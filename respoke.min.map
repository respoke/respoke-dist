{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///respoke.min.js","webpack:///webpack/bootstrap 3a9745f6b4fb5203bd1c","webpack:///./index.js","webpack:///./respoke/directConnection.js","webpack:///./respoke/deps/adapter.js","webpack:///./respoke/event.js","webpack:///./respoke/class.js","webpack:///./respoke/client.js","webpack:///./respoke/presentable.js","webpack:///./respoke/connection.js","webpack:///./respoke/endpoint.js","webpack:///./respoke/textMessage.js","webpack:///./respoke/signalingMessage.js","webpack:///./respoke/group.js","webpack:///./respoke/signalingChannel.js","webpack:///./respoke/respoke.js","webpack:///./respoke/peerConnection.js","webpack:///./respoke/callState.js","webpack:///./respoke/call.js","webpack:///./respoke/localMedia.js","webpack:///./respoke/remoteMedia.js","webpack:///./respoke/conference.js","webpack:///./~/airbrake-js/dist/client.js","webpack:///./~/q/q.js","webpack:///./~/loglevel/lib/loglevel.js","webpack:///./~/statechart/lib/statechart.js","webpack:///./~/socket.io-client/dist/socket.io.js","webpack:///(webpack)/buildin/module.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Q","respoke","log","params","listenDataChannel","evt","dataChannel","channel","onerror","onDataChannelError","onmessage","onDataChannelMessage","readyState","onopen","onDataChannelOpen","saveParameters","that","listen","onOpen","onClose","onMessage","onStart","onError","pc","fire","stats","error","close","message","JSON","parse","data","e","remoteEndpoint","directConnection","endpoint","createDataChannel","binaryType","instanceId","EventEmitter","className","makeGUID","caller","getClient","getStats","onStats","MediaStats","accept","debug","state","answer","ignore","skipRemove","removeDirectConnection","sendMessage","deferred","defer","retVal","handlePromise","promise","onSuccess","isActive","send","stringify","object","resolve","reject","Error","maybeFixConfiguration","pcConfig","i","iceServers","length","hasOwnProperty","url","urls","RTCPeerConnection","getUserMedia","attachMediaStream","reattachMediaStream","webrtcDetectedBrowser","webrtcDetectedVersion","navigator","mozGetUserMedia","console","parseInt","userAgent","match","pcConstraints","mozRTCPeerConnection","window","RTCSessionDescription","mozRTCSessionDescription","RTCIceCandidate","mozRTCIceCandidate","bind","createIceServer","username","password","iceServer","urlParts","split","indexOf","turnUrlParts","credential","createIceServers","push","element","stream","mozSrcObject","setTimeout","play","to","from","webkitGetUserMedia","result","webkitRTCPeerConnection","srcObject","src","URL","createObjectURL","respokeClass","callOnce","func","called","apply","arguments","listenerBuilder","listener","eventType","stack","eventList","once","isInternal","string","toString","undefined","invalidEventType","invalidListener","fn","isNotAlreadyAdded","map","warn","splice","count","toRemove","name","target","hasListeners","every","client","Object","keys","forEach","key","clientSettings","developmentMode","enableCallDebugReport","reconnect","actuallyConnect","token","appId","endpointId","signalingChannel","open","then","authenticate","done","presence","setPresence","onCall","onDirectConnection","onJoin","onLeave","onConnect","onDisconnect","calls","hangup","signal","onReconnect","info","err","addCall","removeCall","checkEndpointForRemoval","all","groups","group","getMembers","connectionsByGroup","absent","connectionList","conn","endpoints","ept","index","Presentable","instances","connectTries","superClass","location","hostname","port","baseURL","resolveEndpointPresence","SignalingChannel","connect","disconnect","verifyConnected","leaveGroups","leave","fin","sendPresence","getCall","methods","screenshare","did","web","sip","conference","callParams","fromType","type","switchType","one","create","conferenceId","callerId","toType","number","uri","setOnline","setOffline","getEndpoint","skipPresence","startConferenceCall","recipient","constraints","convertConstraints","video","audio","mandatory","optional","signalOffer","signalParams","signalType","sendSDP","signalAnswer","sessionId","signalConnected","connectionId","sendConnected","signalModify","sendModify","signalCandidate","sendCandidate","signalHangup","sendHangup","signalReport","report","sendReport","Conference","startScreenShare","startCall","startAudioCall","startVideoCall","startPhoneCall","Call","startSIPCall","isConnected","join","joinGroup","groupList","getGroup","Group","addGroup","addMember","connection","getConnection","newGroup","removeMember","endpt","getGroups","grp","skipCreate","Endpoint","registerPresence","endpointList","onPresence","endpointsToSearch","Connection","connections","getEndpoints","resolvePresence","getPresence","startDirectConnection","getScreenShareConstraints","sendOnly","receiveOnly","constraintsHasScreenShare","needDirectConnection","offerOptions","OfferToReceiveAudio","presenceList","idList","options","sort","a","b","indexA","indexB","rawMessage","header","fromConnection","timestamp","body","toConnection","requestConnectionReply","fromEndpoint","required","attr","allowed","version","validateConnection","validateMembership","isJoined","leaveGroup","skipEvent","publish","getGroupMembers","list","now","performance","io","Date","getTime","PendingRequests","contents","counter","add","obj","remove","reset","isConnecting","socket","connecting","doOpen","path","httpMethod","parameters","tokenId","response","code","appToken","buildResponseError","firstUpper","str","toUpperCase","slice","reconnectTimeout","maxReconnectTimeout","user","wsCall","handleResponse","thisHandler","statusCode","request","tries","isPending","start","sendWebsocketRequest","durationMillis","pendingRequests","failWebsocketRequest","status","errors","logRequest","method","bodyLength","encodeURI","bodySizeLimit","toLowerCase","objectId","replace","details","emit","headers","App-Token","paramString","makeParamString","xhr","setRequestHeader","onreadystatechange","limit","unit","getAllResponseHeaders","getResponseHeader","strings","value","Array","xhrResponse","pairs","pair","val","substring","res","requestId","presenceRegistered","XMLHttpRequest","routingMethods","handlerQueue",400,401,403,404,409,429,500,"connected","isSendingReport","fcall","getToken","newToken","ttl","removeAllListeners","show","toRun","saveDeferred","TextMessage","ep","sendACK","sendSignal","signalId","ackedSignalType","SignalingMessage","debugData","action","routeSignal","doOffer","doConnected","doModify","doAnswer","doIceCandidates","doBye","doUnknown","addHandler","on","handler","onPubSub","groupMessage","generateConnectHandler","category","pieces","protocol","host","connectParams","connect timeout","force new connection","sync disconnect on unload","secure","query","knownSignals","pendingRequest","getTurnCredentials","creds","uris","cred","global","chromeScreenSharingExtensionReady","detail","available","hasChromeExtension","chooseDesktopMedia","callback","sourceIdListener","screenSourceId","sourceId","document","removeEventListener","dispatchEvent","extEvent","source","addEventListener","Airbrake","setLevel","levels","WARN","originalFactory","methodFactory","methodName","logLevel","errorReporter","logMethod","skipErrorReporting","airbrake","projectId","projectKey","args","prototype","reporterMessage","unshift","buildNumber","streams","longStackSupport","stackJumpLimit","longStackJumpLimit","stopUnhandledRejectionTracking","needsChromeExtension","chrome","opera","needsFirefoxExtension","hasFirefoxExtension","isNwjs","gui","process","nwDispatcher","requireNwGui","mediaSources","Screen","Init","createEvent","initCustomEvent","Class","Client","DirectConnection","PeerConnection","CallState","LocalMedia","RemoteMedia","createClient","r","chars","uuid","rnd","Math","random","returnUndef","hasUserMedia","Function","hasRTCPeerConnection","hasWebsocket","WebSocket","webkitWebSocket","MozWebSocket","hasScreenShare","clone","isEqual","aKeys","sdpStreamCount","sdp","matches","resolvedMatches","line","sdpHasAudio","sdpHasVideo","sdpHasDataChannel","sdpHasSendOnly","sdpHasReceiveOnly","constraintsHasAudio","constraintsHasVideo","chromeMediaSource","mediaSource","defaults","queueFactory","queue","trigger","safeAction","item","convertedConstraints","screenConstraint","isArray","maxWidth","maxHeight","thing","googTemporalLayeredScreencast","getScreenShareMedia","localMediaStreamReceivedHandler","localMedia","localMediaErrorHandler","criteria","iceCandidates","candidate","signalCandidateOrig","candidatesSent","initOffer","makeOptionsReceiveOnly","makeOptionsSendOnly","createOffer","saveOfferAndSend","OfferToReceiveVideo","OfferToSendVideo","OfferToSendAudio","offerToReceiveVideo","offerToReceiveAudio","offerToSendVideo","offerToSendAudio","MediaStatsParser","peerConnection","interval","stopStats","onIceCandidate","oCan","forceTurn","disableTurn","candidateSendingQueue","onIceConnectionStateChange","iceConnectionState","onNegotiationNeeded","processSendingQueue","can","processReceivingQueue","candidateReceivingQueue","addIceCandidate","candidatesReceived","oSession","sdpsSent","setLocalDescription","sessionDescription","sentSDP","saveAnswerAndSend","callerconnection","listenAnswer","sdpsReceived","sdpExpectedStreamCount","lastSDPString","calleeconnection","setRemoteDescription","dispatch","newErr","callStoppedReason","listenConnected","listenModify","defModify","isState","toSendHangup","previewLocalMedia","pcOptions","DtlsSrtpKeyAgreement","RtpDataChannels","callStarted","callStopped","callerendpoint","calleeendpoint","os","platform","processOffer","oOffer","hasDataChannel","createAnswer","processedRemoteSDP","init","servers","onicecandidate","onnegotiationneeded","oniceconnectionstatechange","onaddstream","onremovestream","ondatachannel","getRemoteStreams","getLocalStreams","addStream","sentSignal","startModify","addRemoteCandidate","receivedSDP","Statechart","assert","condition","rejectModify","modifyTimer","clear","clearReceiveAnswerTimer","receiveAnswerTimer","needToObtainMedia","hasLocalMedia","needToApproveDirectConnection","automaticOffering","hasListener","createTimer","time","timer","clearTimeout","allTimers","fsm","answerTimer","connectionTimer","oldRole","answerTimeout","receiveAnswerTimeout","connectionTimeout","modifyTimeout","nontransitionEvents","hasLocalMediaApproval","receivedBye","isAnswered","rejectEvent","guard","hasMedia","hangupReason","reason","hangupEvent","signalBye","stateParams","initialState","states","idle","exit","initiate","receiveLocalMedia","receiveOffer","negotiatingContainer","modify","preparing","entry","isModifying","approve","gettingMedia","approvingDeviceAccess","approvingContent","offeringContainer","sentOffer","offering","receiveRemoteMedia","receiveAnswer","connectingContainer","modifyingContainer","modifying","connectedContainer","receive","terminatedContainer","terminated","run","debugOff","getState","currentState","oldState","newState","modifyingStates","defMedia","actuallyAddDirectConnection","onLocalMedia","onHangup","onAllow","onAnswer","onApprove","onMute","onRequestingMedia","videoLocalElement","videoRemoteElement","outgoingMediaStreams","updateOutgoingMediaEstimate","incomingMediaStreams","updateIncomingMediaEstimate","buildLocalMedia","constraint","used","streamReceivedHandler","onRemoteStreamRemoved","onRemoteStreamAdded","remoteMedia","useEl","hasAudio","hasVideo","temporary","getAudioTracks","getVideoTracks","idx","muted","doAddVideo","skipModify","setSDP","setConstraints","listenOffer","outgoingMedia","onModifyAccept","dc","onModifyReject","listenHangup","defineProperty","configurable","enumerable","get","set","videoIsMuted","audioIsMuted","getLocalElement","getRemoteElement","addVideo","isFulfilled","addAudio","getDirectConnection","addDirectConnection","closeDirectConnection","doHangup","stop","toggleVideo","unmuteVideo","muteVideo","toggleAudio","unmuteAudio","muteAudio","local","remote","mediaPromises","shift","getStream","theConstraints","s","sConstraints","chromeMediaSourceId","removeStream","toRemoveIndex","onReceiveUserMedia","theStream","allowTimer","createElement","aStream","numPc","autoplay","requestMedia","requestingScreenShare","useFakeMedia","fake","screenShareSource","onUserMediaError","errorMessage","isVideoMuted","track","enabled","isAudioMuted","onTopic","onPresenter","eventName","require","f","t","n","o","u","l",1,"merge","opts","reporter","_projectId","_projectKey","_host","_context","_params","_env","_session","_processor","_reporters","_filters","processor","addReporter","setProject","setHost","addContext","context","setEnvironmentName","envName","environment","addParams","addEnvironment","env","addSession","session","addFilter","filter","defContext","ref","language","sourceMapEnabled","String","_this","errInfo","filterFn","j","k","len","len1","notice","ref1","ref2","reporterFn","notifier","_wrapArguments","arg","wrap","airbrakeWrapper","prop","self","__airbrake__","exc","_error","__inner__","./internal/compat","./internal/merge","./processors/stack","./reporters/jsonp","./reporters/xhr",2,"base",3,"jsonifyNotice","truncate","truncateObj","dst","maxLength","floor","json","./truncate",4,"objs",5,"getAttr","depth","getPath","nn","seen","dd","el","Boolean","Number","RegExp",6,"rules","typeMessageRe","re","function","file","column","evaledRe","mm","columnNumber","cb","backtrace","lines","msg","processorName","rule","uncaughtExcRe","fileName","lineNumber","filename","lineno","colno",7,"cbCount","cbName","head","payload","removeScript","script","resp","_","encodeURIComponent","getElementsByTagName","removeChild","onload","appendChild","../internal/jsonify_notice",8,"req","responseText","definition","bootstrap","uncurryThis","isObject","isStopIteration","exception","object_toString","QReturnValue","makeStackTraceLong","hasStacks","STACK_JUMP_SEPARATOR","stacks","concatedStacks","filterStackString","stackString","desiredLines","isInternalFrame","isNodeFrame","stackLine","getFileNameAndLineNumber","attempt1","exec","attempt2","attempt3","fileNameAndLineNumber","qFileName","qStartingLine","qEndingLine","captureLine","firstLine","deprecate","alternative","Promise","isPromiseAlike","coerce","fulfill","become","newPromise","resolvedPromise","array_reduce","messages","nextTick","promiseDispatch","progressListeners","object_create","op","operands","array_slice","valueOf","nearerValue","nearer","isPromise","inspect","notify","progress","progressListener","resolver","TypeError","race","answerPs","descriptor","fallback","inspected","when","fulfilled","rejected","progressed","isRejected","resetUnhandledRejections","unhandledReasons","unhandledRejections","trackUnhandledRejections","trackRejection","runAfter","array_indexOf","reportedUnhandledRejections","untrackRejection","at","atReport","rejection","rhs","delete","post","thisp","object_keys","master","isDef","spread","async","makeGenerator","continuer","verb","StopIteration","generator","errback","spawn","_return","promised","promises","pendingCount","snapshot","any","prev","current","onFulfilled","onRejected","onProgress","allResolved","array_map","noop","allSettled","nodeify","nodeback","flush","task","domain","next","enter","runSingle","laterQueue","pop","flushing","isNodeJS","tail","requestTick","setImmediate","MessageChannel","port1","requestPortTick","port2","postMessage","reduce","basis","collect","Type","object_hasOwnProperty","ReturnValue","Q_DEBUG","makeNodeResolver","passByCopy","x","y","makePromise","_fulfilled","_rejected","newException","_progressed","newValue","threw","tap","thenResolve","thenReject","getUnhandledReasons","array","del","mapply","mcall","invoke","fapply","fbind","concat","regardless","fail","onUnhandledError","timeout","ms","timeoutId","delay","nfapply","nodeArgs","nfcall","nfbind","denodeify","baseArgs","nbind","bound","nmapply","npost","nsend","nmcall","ninvoke","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","realMethod","undefinedType","bindMethod","enableLoggingWhenConsoleArrives","level","replaceLoggingMethods","logMethods","persistLevelIfPossible","levelNum","levelName","localStorage","cookie","loadPersistedLevel","storedLevel","TRACE","DEBUG","INFO","ERROR","SILENT","enableAll","disableAll","_log","noConflict","QState","QEvent","assertion","opt","construct","myState","top","mySource","Initial","empty","newInitialState","handled","TOP","flatten","anEventOrNull","equals","superstate","stateOrName","_topState","statesTable","_flatten","parent","selectState","stateName","anEvent","act","handleUnhandledEvent","aStateName","transition","aStateOrName","enterVia","q","lca","entryLength","QEventEmpty","QEventEntry","QEventExit","QEventInit","__WEBPACK_AMD_DEFINE_ARRAY__","transports","sockets","uuri","util","parseUri","uniqueUri","Socket","of","parts","addition","chunkQuery","components","part","qs","kv","pageLoaded","load","event","capture","attachEvent","xdomain","XDomainRequest","ua","hasCORS","webkit","importScripts","additional","deep","lastseen","mixin","ctor","ctor2","inherit","intersect","arr","arr2","ret","longest","shortest","toArray","enu","withCredentials","test","iDevice","$events","addListener","removeListener","pos","listeners","nativeJSON","date","d","isFinite","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","quote","escapable","lastIndex","meta","charCodeAt","holder","v","partial","mind","gap","rep","indent","cx","\b","\t","\n","\f","\r","\"","\\","replacer","space","text","reviver","walk","eval","SyntaxError","parser","packets","reasons","advice","encodePacket","packet","ack","adv","ev","ackId","encoded","encodePayload","decoded","regexp","decodePacket","decodePayload","charAt","substr","Transport","sessid","heartbeats","onData","clearCloseTimeout","reconnecting","setCloseTimeout","msgs","onPacket","setHeartbeatTimeout","onHeartbeat","isOpen","closeTimeout","clearTimeouts","reopenTimeout","heartbeat","prepareUrl","scheme","resource","ready","try multiple transports","reconnection delay","reconnection limit","Infinity","reopen delay","max reconnection attempts","auto connect","flash policy port","manualFlush","namespaces","buffer","doBuffer","isXDomain","disconnectSync","SocketNamespace","nsp","$emit","handshake","complete","insertAt","parentNode","insertBefore","getTransport","override","transport","check","xdomainCheck","sessionid","sid","connectTimeoutTimer","remaining","heartbeatTimeout","origTransports","heartbeatTimeoutTimer","setBuffer","flushBuffer","wasConnected","wasConnecting","reconnectionAttempts","reconnectionTimer","maybeReconnect","reconnectionDelay","redoTransports","tryMultiple","maxAttempts","flags","Flag","ackPackets","acks","namespace","lastArg","WS","websocket","onclose","Flashsocket","flashsocket","__addTask","__tasks","WEB_SOCKET_SWF_LOCATION","loadFlashPolicyFile","__initialize","swfobject","getFlashPlayerVersion","major","WEB_SOCKET_DISABLE_AUTO_INITIALIZATION","J","Z","C","aa","X","U","Y","K","O","D","h","T","V","H","setAttribute","GetVariable","ab","M","pv","callee","ag","af","callbackFn","success","ae","F","swfVersion","wk","expressInstall","A","ai","width","getAttribute","height","styleclass","align","ah","ac","ad","P","w","z","SetVariable","nodeName","win","mac","E","B","g","R","title","ie","flashvars","style","display","replaceChild","innerHTML","childNodes","nodeType","cloneNode","movie","outerHTML","N","getElementById","I","G","styleSheets","addRule","createTextNode","visibility","L","S","W","parseFloat","plugins","description","mimeTypes","enabledPlugin","w3","detachEvent","documentElement","doScroll","registerObject","getObjectById","embedSWF","aj","al","am","ak","an","switchOffAutoHideShow","minor","release","hasFlashPlayerVersion","createSWF","showExpressInstall","removeSWF","createCSS","addDomLoadEvent","addLoadEvent","getQueryParamValue","search","hash","expressInstallCallback","protocols","proxyHost","proxyPort","__id","__nextId","__instances","CONNECTING","bufferedAmount","__events","__flash","CLOSED","CLOSING","useCapture","events","__handleEvent","flashEvent","jsEvent","__createSimpleEvent","decodeURIComponent","__createMessageEvent","Event","initEvent","bubbles","cancelable","MessageEvent","initMessageEvent","OPEN","loadManualPolicyFile","__swfLocation","container","position","__isFlashLite","left","hasPriority","swliveconnect","allowScriptAccess","__onFlashInitialized","setCallerUrl","href","setDebug","WEB_SOCKET_DEBUG","__onFlashEvent","receiveEvents","webSocketId","__log","__error","mimeType","XHR","sendBuffer","stateChange","posting","sendXHR","contentType","usesXDomReq","socketProtocol","isXProtocol","HTMLFile","htmlfile","doc","write","parentWindow","iframeC","iframe","destroy","CollectGarbage","XHRPolling","retryCounter","abort","JSONPPolling","indicator","initIframe","form","iframeId","area","submit","webpackPolyfill","paths","children"],"mappings":"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","file":"respoke.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"respoke\"] = factory();\n\telse\n\t\troot[\"respoke\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","/*! Copyright (c) 2014, Digium, Inc. All Rights Reserved. MIT Licensed.For details and documentation visit https://www.respoke.io */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"respoke\"] = factory();\n\telse\n\t\troot[\"respoke\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(13);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar Q = __webpack_require__(21);\n\tvar respoke = __webpack_require__(13);\n\tvar log = respoke.log;\n\t\n\t/**\n\t * A direct connection via RTCDataChannel, including state and path negotation.\n\t * @class respoke.DirectConnection\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {string} params\n\t * @param {string} params.instanceId - client id\n\t * @param {respoke.Call} params.call - The call that is handling state for this direct connection.\n\t * @param {boolean} [params.forceTurn] - If true, force the data to flow through relay servers instead of allowing\n\t * it to flow peer-to-peer. The relay acts like a blind proxy.\n\t * @param {string} params.connectionId - The connection ID of the remoteEndpoint.\n\t * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n\t * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n\t * @param {function} params.signalReport - Signaling action from SignalingChannel.\n\t * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n\t * @param {respoke.DirectConnection.onStart} [params.onStart] - Callback for when setup of the direct connection\n\t * begins. The direct connection will not be open yet.\n\t * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors that happen during\n\t * direct connection setup or media renegotiation.\n\t * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for closing the direct connection.\n\t * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for opening the direct connection.\n\t * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the request\n\t * for a direct connection and setup is about to begin.\n\t * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for incoming messages. Not usually\n\t * necessary to listen to this event if you are already listening to respoke.Endpoint#message.\n\t * @returns {respoke.DirectConnection}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t\n\t    /**\n\t     * A name to identify this class\n\t     * @memberof! respoke.DirectConnection\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.DirectConnection';\n\t    /**\n\t     * The unique identifier of the direct connection.\n\t     *\n\t     * @memberof! respoke.DirectConnection\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = respoke.makeGUID();\n\t\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name call\n\t     * @type {respoke.Call}\n\t     */\n\t    if (!that.call.caller) {\n\t        that.call.caller = false;\n\t    }\n\t\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name dataChannel\n\t     * @type {RTCDataChannel}\n\t     * @private\n\t     */\n\t    var dataChannel = null;\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name client\n\t     * @type {respoke.Client}\n\t     * @private\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name pc\n\t     * @type {RTCPeerConnection}\n\t     * @private\n\t     */\n\t    var pc = params.pc;\n\t    delete params.pc;\n\t\n\t    /**\n\t     * When the datachannel is availble, we need to attach the callbacks. The event this function is attached to\n\t     * only fires for the callee.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.listenDataChannel\n\t     * @param {respoke.Event} evt\n\t     * @private\n\t     */\n\t    function listenDataChannel(evt) {\n\t        dataChannel = evt.channel;\n\t        dataChannel.onerror = onDataChannelError;\n\t        dataChannel.onmessage = onDataChannelMessage;\n\t        if (dataChannel.readyState === 'open') {\n\t            dataChannel.onopen = null;\n\t            onDataChannelOpen();\n\t        } else {\n\t            dataChannel.onopen = onDataChannelOpen;\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Register any event listeners passed in as callbacks\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.saveParameters\n\t     * @param {object} params\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for when the direct connection\n\t     * is closed.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for when the direct connection\n\t     * is open.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for incoming messages.\n\t     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n\t     * connection.\n\t     * @param {respoke.DirectConnection.onStart} [params.onStart] - Callback for when the direct connection\n\t     * is being set up. The direct connection will not be open yet.\n\t     * @param {boolean} [params.forceTurn] - If true, force the data to flow through relay servers instead of allowing\n\t     * it to flow peer-to-peer. The relay acts like a blind proxy.\n\t     * @private\n\t     */\n\t    function saveParameters(params) {\n\t        /**\n\t         * The direct connection is open.\n\t         * @event respoke.DirectConnection#open\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.listen('open', params.onOpen);\n\t        /**\n\t         * The direct connection is closed.\n\t         * @event respoke.DirectConnection#close\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.listen('close', params.onClose);\n\t        /**\n\t         * Incoming message on this direct connection.\n\t         * @event respoke.DirectConnection#message\n\t         * @type {respoke.Event}\n\t         * @property {respoke.TextMessage} message\n\t         * @property {respoke.Endpoint} endpoint\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.listen('message', params.onMessage);\n\t        // documented elsewhere\n\t        that.listen('start', params.onStart);\n\t        /**\n\t         * An error occurred while setting up the direct connection.\n\t         * @event respoke.DirectConnection#error\n\t         * @type {respoke.Event}\n\t         * @property {string} reason - A human-readable description of the error.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.listen('error', params.onError);\n\t        pc.listen('direct-connection', listenDataChannel, true);\n\t        pc.listen('stats', function fireStats(evt) {\n\t            /**\n\t             * This event is fired every time statistical information about the direct connection\n\t             * becomes available.\n\t             * @event respoke.DirectConnection#stats\n\t             * @type {respoke.Event}\n\t             * @property {object} stats - an object with stats in it.\n\t             * @property {respoke.DirectConnection} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.fire('stats', {stats: evt.stats});\n\t        }, true);\n\t\n\t    }\n\t    saveParameters(params);\n\t\n\t    delete that.onOpen;\n\t    delete that.onClose;\n\t    delete that.onMessage;\n\t\n\t    /**\n\t     * Return media stats. Since we have to wait for both the answer and offer to be available before starting\n\t     * statistics, we'll return a promise for the stats object.\n\t     *\n\t     *     directConnection.getStats({\n\t     *         onStats: function (evt) {\n\t     *             console.log('Stats', evt.stats);\n\t     *         }\n\t     *     }).done(function () {\n\t     *         console.log('Stats started.');\n\t     *     }, function (err) {\n\t     *         console.log('Direct connection is already closed.');\n\t     *     });\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.getStats\n\t     * @returns {Promise<object>|undefined}\n\t     * @param {object} params\n\t     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive the\n\t     * stats if the Respoke stats module is loaded. If no callback is provided, the connection's report will\n\t     * contain stats but the developer will not receive them on the client-side.\n\t     * @param {respoke.DirectConnection.statsSuccessHandler} [params.onSuccess] - Success handler for this\n\t     * invocation of this method only.\n\t     * @param {respoke.DirectConnection.errorHandler} [params.onError] - Error handler for this invocation of\n\t     * this method only.\n\t     */\n\t    that.getStats = function (params) {\n\t        if (pc && pc.getStats) {\n\t            that.listen('stats', params.onStats);\n\t            delete params.onStats;\n\t            return pc.getStats(params);\n\t        }\n\t        return null;\n\t    };\n\t\n\t    if (!respoke.MediaStats) {\n\t        delete that.getStats;\n\t    }\n\t\n\t    /**\n\t     * Detect datachannel errors for internal state.\n\t     * @memberof! respoke.DirectConnection\n\t     * @private\n\t     * @method respoke.DirectConnection.onDataChannelError\n\t     */\n\t    function onDataChannelError(error) {\n\t        /**\n\t         * Indicate that an error has occurred setting up the direct connection.\n\t         * @event respoke.DirectConnection#error\n\t         * @type {respoke.Event}\n\t         * @property {object} error\n\t         * @property {respoke.DirectConnection} directConnection\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('error', {\n\t            error: error\n\t        });\n\t        that.close();\n\t    }\n\t\n\t    /**\n\t     * Receive and route messages to the Endpoint.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.onDataChannelMessage\n\t     * @private\n\t     * @param {MessageEvent}\n\t     * @fires respoke.DirectConnection#message\n\t     */\n\t    function onDataChannelMessage(evt) {\n\t        var message;\n\t        try {\n\t            message = JSON.parse(evt.data);\n\t        } catch (e) {\n\t            message = evt.data;\n\t        }\n\t        /**\n\t         * A message has been received over the direct connection.\n\t         * @event respoke.Endpoint#message\n\t         * @type {respoke.Event}\n\t         * @property {object} message\n\t         * @property {respoke.DirectConnection} directConnection\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.call.remoteEndpoint.fire('message', {\n\t            message: message,\n\t            directConnection: that\n\t        });\n\t        /**\n\t         * A message has been received over the direct connection.\n\t         * @event respoke.DirectConnection#message\n\t         * @type {respoke.Event}\n\t         * @property {object} message\n\t         * @property {respoke.Endpoint} endpoint\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('message', {\n\t            message: message,\n\t            endpoint: that.call.remoteEndpoint\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Detect when the channel is open.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.onDataChannelOpen\n\t     * @private\n\t     * @param {MessageEvent}\n\t     * @fires respoke.DirectConnection#open\n\t     */\n\t    function onDataChannelOpen(evt) {\n\t        //dataChannel = evt.target || evt.channel;\n\t        /**\n\t         * The direct connection is open.\n\t         * @event respoke.DirectConnection#open\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('open');\n\t    }\n\t\n\t    /**\n\t     * Detect when the channel is closed.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.onDataChannelClose\n\t     * @private\n\t     * @param {MessageEvent}\n\t     * @fires respoke.DirectConnection#close\n\t     */\n\t    function onDataChannelClose(evt) {\n\t        //dataChannel = evt.target || evt.channel;\n\t        /**\n\t         * The direct connection is closed.\n\t         * @event respoke.DirectConnection#close\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('close');\n\t    }\n\t\n\t    /**\n\t     * Create the datachannel. For the caller, set up all the handlers we'll need to keep track of the\n\t     * datachannel's state and to receive messages.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.createDataChannel\n\t     * @private\n\t     */\n\t    function createDataChannel() {\n\t        dataChannel = pc.createDataChannel(\"respokeDataChannel\");\n\t        dataChannel.binaryType = 'arraybuffer';\n\t        dataChannel.onerror = onDataChannelError;\n\t        dataChannel.onmessage = onDataChannelMessage;\n\t        dataChannel.onopen = onDataChannelOpen;\n\t\n\t        /**\n\t         * The direct connection setup has begun. This does NOT mean it's ready to send messages yet. Listen to\n\t         * DirectConnection#open for that notification.\n\t         * @event respoke.DirectConnection#start\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('start');\n\t    }\n\t\n\t    /**\n\t     * Start the process of obtaining media. saveParameters will only be meaningful for the callee,\n\t     * since the library calls this method for the caller. Developers will use this method to pass in\n\t     * callbacks for the callee.\n\t     *\n\t     *     directConnection.accept({\n\t     *         onOpen: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.accept\n\t     * @fires respoke.DirectConnection#accept\n\t     * @param {object} params\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen]\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose]\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage]\n\t     */\n\t    that.accept = function (params) {\n\t        params = params || {};\n\t        log.debug('DirectConnection.accept');\n\t        saveParameters(params);\n\t\n\t        log.debug(\"I am \" + (pc.state.caller ? '' : 'not ') + \"the caller.\");\n\t\n\t        if (pc.state.caller === true) {\n\t            createDataChannel();\n\t        }\n\t        that.call.answer();\n\t\n\t        /**\n\t         * The request to open a direct connection has been accepted.\n\t         * @event respoke.DirectConnection#accept\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('accept');\n\t    };\n\t\n\t    /**\n\t     * Tear down the connection.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.close\n\t     * @fires respoke.DirectConnection#close\n\t     */\n\t    that.close = function (params) {\n\t        params = params || {};\n\t        log.debug(\"DirectConnection.close\");\n\t\n\t        if (that.call && that.call.remoteEndpoint) {\n\t            that.call.remoteEndpoint.directConnection = null;\n\t        }\n\t\n\t        if (dataChannel) {\n\t            dataChannel.close();\n\t        }\n\t\n\t        /**\n\t         * The direct connection has been closed.\n\t         * @event respoke.DirectConnection#close\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('close');\n\t\n\t        that.ignore();\n\t\n\t        if (that.call && params.skipRemove !== true) {\n\t            that.call.removeDirectConnection();\n\t        }\n\t\n\t        dataChannel = null;\n\t        that.call = null;\n\t        pc = null;\n\t    };\n\t\n\t    /**\n\t     * Send a message over the datachannel in the form of a JSON-encoded plain old JavaScript object. Only one\n\t     * attribute may be given: either a string 'message' or an object 'object'.\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     *\n\t     *     directConnection.sendMessage({\n\t     *         message: \"And they say HTTP is stateless!\"\n\t     *     });\n\t     *\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.sendMessage\n\t     * @param {object} params\n\t     * @param {string} [params.message] - The message to send.\n\t     * @param {object} [params.object] - An object to send.\n\t     * @param {respoke.DirectConnection.sendHandler} [params.onSuccess] - Success handler for this invocation\n\t     * of this method only.\n\t     * @param {respoke.DirectConnection.errorHandler} [params.onError] - Error handler for this invocation\n\t     * of this method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t        if (that.isActive()) {\n\t            dataChannel.send(JSON.stringify(params.object || {\n\t                message: params.message\n\t            }));\n\t            deferred.resolve();\n\t        } else {\n\t            deferred.reject(new Error(\"dataChannel not in an open state.\"));\n\t        }\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Expose close as reject for approve/reject workflow.\n\t     *\n\t     *     client.listen('direct-connection, function (evt) {\n\t     *         if (iDontLikeThisPerson()) {\n\t     *             evt.directConnection.reject();\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.reject\n\t     * @param {boolean} signal - Optional flag to indicate whether to send or suppress sending\n\t     * a hangup signal to the remote side.\n\t     */\n\t    that.reject = that.close;\n\t\n\t    /**\n\t     * Indicate whether a datachannel is being setup or is in progress.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.isActive\n\t     * @returns {boolean}\n\t     */\n\t    that.isActive = function () {\n\t        // Why does pc.iceConnectionState not transition into 'connected' even though media is flowing?\n\t        //return (pc && pc.isActive() && dataChannel && dataChannel.readyState === 'open');\n\t        return (dataChannel && dataChannel.readyState === 'open');\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.DirectConnection\n\t\n\t/**\n\t * Called when the direct connection is closed.  This callback is called every time respoke.DirectConnection#close\n\t * fires.\n\t * @callback respoke.DirectConnection.onClose\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Called when the setup of the direct connection has begun. The direct connection will not be open yet. This\n\t * callback is called every time respoke.DirectConnection#start fires.\n\t * @callback respoke.DirectConnection.onStart\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Called when the direct connection is opened.  This callback is called every time respoke.DirectConnection#open\n\t * fires.\n\t * @callback respoke.DirectConnection.onOpen\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Called when a message is received over the direct connection.  This callback is called every time\n\t * respoke.DirectConnection#message fires.\n\t * @callback respoke.DirectConnection.onMessage\n\t * @param {respoke.Event} evt\n\t * @param {object} evt.message\n\t * @param {respoke.Endpoint} evt.endpoint\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Handle an error that resulted from a specific method call. This handler will not fire more than once.\n\t * @callback respoke.DirectConnection.errorHandler\n\t * @param {Error} err\n\t */\n\t/**\n\t * When a call is in setup or media renegotiation happens. This callback will be called every time\n\t * respoke.DirectConnection#error.\n\t * @callback respoke.DirectConnection.onError\n\t * @param {respoke.Event} evt\n\t * @param {boolean} evt.reason - A human-readable description of the error.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Called when the callee accepts the direct connection. This callback is called every time\n\t * respoke.DirectConnection#accept is fired.\n\t * @callback respoke.DirectConnection.onAccept\n\t * @param {respoke.Event} evt\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Handle the successful kick-off of stats on a call.\n\t * @callback respoke.DirectConnection.statsSuccessHandler\n\t * @param {respoke.Event} evt\n\t * @param {object} evt.stats - an object with stats in it.\n\t * @param {respoke.DirectConnection} evt.target\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * Handle sending successfully.\n\t * @callback respoke.DirectConnection.sendHandler\n\t */\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t *  Copyright (c) 2014 The WebRTC project authors. All Rights Reserved.\n\t *\n\t *  Use of this source code is governed by a BSD-style license\n\t *  that can be found in the LICENSE file in the same directory as\n\t *  this source file.\n\t * @ignore\n\t */\n\t\n\t/* More information about these options at jshint.com/docs/options */\n\t\n\t/* jshint browser: true, camelcase: true, curly: true, devel: true,\n\teqeqeq: true, forin: false, globalstrict: true, quotmark: single,\n\tundef: true, unused: strict */\n\t\n\t/* global mozRTCIceCandidate, mozRTCPeerConnection,\n\tmozRTCSessionDescription, webkitRTCPeerConnection */\n\t\n\t/* exported trace */\n\t\n\t'use strict';\n\t\n\tvar RTCPeerConnection = null;\n\tvar getUserMedia = null;\n\tvar attachMediaStream = null;\n\tvar reattachMediaStream = null;\n\tvar webrtcDetectedBrowser = null;\n\tvar webrtcDetectedVersion = null;\n\t\n\tfunction trace(text) {\n\t  // This function is used for logging.\n\t  if (text[text.length - 1] === '\\n') {\n\t    text = text.substring(0, text.length - 1);\n\t  }\n\t  console.log((window.performance.now() / 1000).toFixed(3) + ': ' + text);\n\t}\n\t\n\tfunction maybeFixConfiguration(pcConfig) {\n\t  if (!pcConfig) {\n\t    return;\n\t  }\n\t  for (var i = 0; i < pcConfig.iceServers.length; i++) {\n\t    if (pcConfig.iceServers[i].hasOwnProperty('urls')) {\n\t      pcConfig.iceServers[i].url = pcConfig.iceServers[i].urls;\n\t      delete pcConfig.iceServers[i].urls;\n\t    }\n\t  }\n\t}\n\t\n\tif (navigator.mozGetUserMedia) {\n\t  console.log('This appears to be Firefox');\n\t\n\t  webrtcDetectedBrowser = 'firefox';\n\t\n\t  webrtcDetectedVersion =\n\t    parseInt(navigator.userAgent.match(/Firefox\\/([0-9]+)\\./)[1], 10);\n\t\n\t  // The RTCPeerConnection object.\n\t  RTCPeerConnection = function(pcConfig, pcConstraints) {\n\t    // .urls is not supported in FF yet.\n\t    maybeFixConfiguration(pcConfig);\n\t    return new mozRTCPeerConnection(pcConfig, pcConstraints);\n\t  };\n\t\n\t  // The RTCSessionDescription object.\n\t  window.RTCSessionDescription = mozRTCSessionDescription;\n\t\n\t  // The RTCIceCandidate object.\n\t  window.RTCIceCandidate = mozRTCIceCandidate;\n\t\n\t  // getUserMedia shim (only difference is the prefix).\n\t  // Code from Adam Barth.\n\t  getUserMedia = navigator.mozGetUserMedia.bind(navigator);\n\t  navigator.getUserMedia = getUserMedia;\n\t\n\t  // Creates ICE server from the URL for FF.\n\t  window.createIceServer = function(url, username, password) {\n\t    var iceServer = null;\n\t    var urlParts = url.split(':');\n\t    if (urlParts[0].indexOf('stun') === 0) {\n\t      // Create ICE server with STUN URL.\n\t      iceServer = {\n\t        'url': url\n\t      };\n\t    } else if (urlParts[0].indexOf('turn') === 0) {\n\t      if (webrtcDetectedVersion < 27) {\n\t        // Create iceServer with turn url.\n\t        // Ignore the transport parameter from TURN url for FF version <=27.\n\t        var turnUrlParts = url.split('?');\n\t        // Return null for createIceServer if transport=tcp.\n\t        if (turnUrlParts.length === 1 ||\n\t          turnUrlParts[1].indexOf('transport=udp') === 0) {\n\t          iceServer = {\n\t            'url': turnUrlParts[0],\n\t            'credential': password,\n\t            'username': username\n\t          };\n\t        }\n\t      } else {\n\t        // FF 27 and above supports transport parameters in TURN url,\n\t        // So passing in the full url to create iceServer.\n\t        iceServer = {\n\t          'url': url,\n\t          'credential': password,\n\t          'username': username\n\t        };\n\t      }\n\t    }\n\t    return iceServer;\n\t  };\n\t\n\t  window.createIceServers = function(urls, username, password) {\n\t    var iceServers = [];\n\t    // Use .url for FireFox.\n\t    for (var i = 0; i < urls.length; i++) {\n\t      var iceServer =\n\t        window.createIceServer(urls[i], username, password);\n\t      if (iceServer !== null) {\n\t        iceServers.push(iceServer);\n\t      }\n\t    }\n\t    return iceServers;\n\t  };\n\t\n\t  // Attach a media stream to an element.\n\t  attachMediaStream = function(element, stream) {\n\t    //console.log('Attaching media stream');\n\t    element.mozSrcObject = stream;\n\t    setTimeout(function () {\n\t      element.play();\n\t    }, 100);\n\t  };\n\t\n\t  reattachMediaStream = function(to, from) {\n\t    //console.log('Reattaching media stream');\n\t    to.mozSrcObject = from.mozSrcObject;\n\t  };\n\t\n\t} else if (navigator.webkitGetUserMedia) {\n\t  console.log('This appears to be Chrome');\n\t\n\t  webrtcDetectedBrowser = 'chrome';\n\t  // Temporary fix until crbug/374263 is fixed.\n\t  // Setting Chrome version to 999, if version is unavailable.\n\t  var result = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n\t  if (result !== null) {\n\t    webrtcDetectedVersion = parseInt(result[2], 10);\n\t  } else {\n\t    webrtcDetectedVersion = 999;\n\t  }\n\t\n\t  // Creates iceServer from the url for Chrome M33 and earlier.\n\t  window.createIceServer = function(url, username, password) {\n\t    var iceServer = null;\n\t    var urlParts = url.split(':');\n\t    if (urlParts[0].indexOf('stun') === 0) {\n\t      // Create iceServer with stun url.\n\t      iceServer = {\n\t        'url': url\n\t      };\n\t    } else if (urlParts[0].indexOf('turn') === 0) {\n\t      // Chrome M28 & above uses below TURN format.\n\t      iceServer = {\n\t        'url': url,\n\t        'credential': password,\n\t        'username': username\n\t      };\n\t    }\n\t    return iceServer;\n\t  };\n\t\n\t  // Creates iceServers from the urls for Chrome M34 and above.\n\t  window.createIceServers = function(urls, username, password) {\n\t    var iceServers = [];\n\t    if (webrtcDetectedVersion >= 34) {\n\t      // .urls is supported since Chrome M34.\n\t      iceServers = {\n\t        'urls': urls,\n\t        'credential': password,\n\t        'username': username\n\t      };\n\t    } else {\n\t      for (var i = 0; i < urls.length; i++) {\n\t        var iceServer =\n\t          window.createIceServer(urls[i], username, password);\n\t        if (iceServer !== null) {\n\t          iceServers.push(iceServer);\n\t        }\n\t      }\n\t    }\n\t    return iceServers;\n\t  };\n\t\n\t  // The RTCPeerConnection object.\n\t  RTCPeerConnection = function(pcConfig, pcConstraints) {\n\t    // .urls is supported since Chrome M34.\n\t    if (webrtcDetectedVersion < 34) {\n\t      maybeFixConfiguration(pcConfig);\n\t    }\n\t    return new webkitRTCPeerConnection(pcConfig, pcConstraints);\n\t  };\n\t\n\t  // Get UserMedia (only difference is the prefix).\n\t  // Code from Adam Barth.\n\t  getUserMedia = navigator.webkitGetUserMedia.bind(navigator);\n\t  navigator.getUserMedia = getUserMedia;\n\t\n\t  // Attach a media stream to an element.\n\t  attachMediaStream = function(element, stream) {\n\t    if (typeof element.srcObject !== 'undefined') {\n\t      element.srcObject = stream;\n\t    } else if (typeof element.mozSrcObject !== 'undefined') {\n\t      element.mozSrcObject = stream;\n\t    } else if (typeof element.src !== 'undefined') {\n\t      element.src = URL.createObjectURL(stream);\n\t    } else {\n\t      console.log('Error attaching stream to element.');\n\t    }\n\t  };\n\t\n\t  reattachMediaStream = function(to, from) {\n\t    to.src = from.src;\n\t  };\n\t} else {\n\t  console.log('Browser does not appear to be WebRTC-capable');\n\t}\n\t\n\t\n\twindow.RTCPeerConnection = RTCPeerConnection;\n\twindow.getUserMedia = getUserMedia;\n\twindow.attachMediaStream = attachMediaStream;\n\twindow.reattachMediaStream = reattachMediaStream;\n\twindow.webrtcDetectedBrowser = webrtcDetectedBrowser;\n\twindow.webrtcDetectedVersion = webrtcDetectedVersion;\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar log = __webpack_require__(22);\n\tvar respokeClass = __webpack_require__(4);\n\t\n\t/**\n\t * Higher order function to wrap a passed in function. The returned function will only execute\n\t * the passed in function the first time it is called, then be a no-op any subsequent tries.\n\t *\n\t * @private\n\t */\n\tvar callOnce = function (func) {\n\t    \"use strict\";\n\t    return (function () {\n\t        var called = false;\n\t        return function () {\n\t            if (!called) {\n\t                func.apply(null, arguments);\n\t                called = true;\n\t            }\n\t        };\n\t    })();\n\t};\n\t\n\t/**\n\t * A generic class for emitting and listening to events. This is used internally by respoke.js\n\t * to provide evented behavior. You can add custom events and inherit your own objects from\n\t * the EventEmitter.\n\t *\n\t * ```\n\t * // Adding a custom event to a respoke.Client instance\n\t * client.listen('my-event', function (evt) { });\n\t * client.fire('my-event', { name: 'my-event', asdf: 'jkl' });\n\t * ```\n\t *\n\t * ```\n\t * // Custom EventEmitter\n\t * var MyCustomEmitter = respoke.EventEmitter();\n\t * var emitterInstance = MyCustomEmitter();\n\t * emitterInstance.fire('hi', { name: 'hi', message: 'hello' });\n\t * emitterInstance.listen('hi', function (evt) { });\n\t * ```\n\t *\n\t * @class respoke.EventEmitter\n\t * @inherits respoke.Class\n\t * @constructor\n\t * @param {object} params\n\t * @param {string} params.instanceId\n\t * @returns {respoke.EventEmitter}\n\t */\n\tvar EventEmitter = module.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = respokeClass(params);\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.EventEmitter\n\t     * @name className\n\t     * @type {string}\n\t     * @private\n\t     */\n\t    that.className = 'respoke.EventEmitter';\n\t\n\t    /**\n\t     * @memberof! respoke.EventEmitter\n\t     * @name eventList\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var eventList = {};\n\t\n\t    /**\n\t     * Add a listener that will only be called once to an object.  This method adds the given listener to the given\n\t     * event in the case that the same\n\t     * listener is not already registered to this event and the listener is a function.  The third argument 'isInternal'\n\t     * is used only internally by the library to indicate that this listener is a library-used listener and should not\n\t     * count when we are trying to determine if an event has listeners placed by the developer.\n\t     *\n\t     *     client.once('connect', function (evt) {\n\t     *         console.log(\"This is the first time we connected.\");\n\t     *     });\n\t     *\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.listen\n\t     * @param {string} eventType - A developer-specified string identifying the event.\n\t     * @param {respoke.EventEmitter.eventListener} listener - A function to call when the event is fire.\n\t     * @param {boolean} [isInternal] - A flag to indicate this listener was added by the library. This parameter should\n\t     * not be used by developers who are using the library, only by developers who are working on the library itself.\n\t     */\n\t    that.once = function (eventType, listener, isInternal) {\n\t        var string = listener.toString();\n\t        listener = callOnce(listener);\n\t        listener.toString = function () { return string; };\n\t        listener.once = true;\n\t        that.listen(eventType, listener, isInternal);\n\t    };\n\t\n\t    /**\n\t     * Add a `listener` function to an object.\n\t     *\n\t     * This method adds the `listener` to the event `eventName`.\n\t     *\n\t     * If an identical listener already registered to this event, it will **not** be added.\n\t     *\n\t     * ##### Example of adding an event listener.\n\t     *\n\t     *     client.listen('connect', function (evt) {\n\t     *         console.log(\"We've connected!\", evt);\n\t     *     });\n\t     *\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.listen\n\t     * @param {string} eventType - The name of the event.\n\t     * @param {respoke.EventEmitter.eventListener} listener - A function to call when the event is\n\t     * fired.\n\t     * @arg {boolean} isInternal - Internal use only. A flag to indicate this listener was\n\t     * added by the library. This parameter should not be used by developers who are using\n\t     * the library, only by developers who are working on the library itself.\n\t     */\n\t    that.listen = function (eventType, listener, isInternal) {\n\t        if (listener === undefined) {\n\t            return;\n\t        }\n\t        var invalidEventType = typeof eventType !== 'string' || !eventType;\n\t        var invalidListener = typeof listener !== 'function';\n\t        if (invalidEventType || invalidListener) {\n\t            log.error(\"Invalid request to add event listener to\", eventType, listener);\n\t            return;\n\t        }\n\t\n\t        eventList[eventType] = eventList[eventType] || [];\n\t        listener.isInternal = !!isInternal; // boolify\n\t\n\t        var toString = function (fn) {\n\t            return fn.toString();\n\t        };\n\t        var isNotAlreadyAdded = eventList[eventType].map(toString).indexOf(listener.toString()) === -1;\n\t\n\t        if (isNotAlreadyAdded) {\n\t            eventList[eventType].push(listener);\n\t        } else {\n\t            log.warn(\"Not adding duplicate listener to\", eventType, listener);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Remove a listener from an object. If no eventType is specified, all eventTypes will be\n\t     * cleared. If an eventType is specified but no listener is specified, all listeners will be\n\t     * removed from the specified eventType.  If a listener is also specified, only that listener\n\t     * will be removed.\n\t     *\n\t     *     client.ignore('connect', connectHandler);\n\t     *\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.ignore\n\t     * @param {string} [eventType] - An optional developer-specified string identifying the event.\n\t     * @param {function} [listener] - An optional function to remove from the specified event.\n\t     */\n\t    that.ignore = function (eventType, listener) {\n\t        // Remove all events from this object\n\t        if (eventType === undefined) {\n\t            eventList = {};\n\t            return;\n\t        }\n\t\n\t        // Remove all listeners from this event.\n\t        if (listener === undefined || !eventList[eventType]) {\n\t            eventList[eventType] = [];\n\t            return;\n\t        }\n\t\n\t        // Remove only one listener from this event.\n\t        for (var i = eventList[eventType].length - 1; i >= 0; i -= 1) {\n\t            if (listener === eventList[eventType][i]) {\n\t                eventList[eventType].splice(i, 1);\n\t                return;\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Trigger an event on an object. All listeners for the specified eventType will be called.\n\t     * Listeners will be bound to the object ('this' will refer to the object), and additional\n\t     * arguments to fire() will be passed into each listener.\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.fire\n\t     * @param {string} eventType - A developer-specified string identifying the event to fire.\n\t     * @param {string|number|object|array} evt - Any number of optional parameters to be passed to\n\t     * the listener\n\t     * @private\n\t     */\n\t    that.fire = function (eventType, evt) {\n\t        var args = null;\n\t        var count = 0;\n\t        var toRemove = [];\n\t        var i;\n\t\n\t        evt = evt || {};\n\t        evt.name = eventType;\n\t        evt.target = that;\n\t\n\t        if (!eventType) {\n\t            return;\n\t        }\n\t\n\t        if (!eventList[eventType]) {\n\t            log.debug(\"fired \" + that.className + \"#\" + eventType + \" 0 listeners called with params\", evt);\n\t            return;\n\t        }\n\t\n\t        for (i = 0; i < eventList[eventType].length; i += 1) {\n\t            var listener = eventList[eventType][i];\n\t            if (typeof listener === 'function') {\n\t                setTimeout(listenerBuilder(listener, evt, eventType));\n\t\n\t                count += 1;\n\t                if (listener.once === true) {\n\t                    toRemove.push(i);\n\t                }\n\t            }\n\t        }\n\t\n\t        for (i = (toRemove.length - 1); i >= 0; i -= 1) {\n\t            eventList[eventType].splice(toRemove[i], 1);\n\t        }\n\t\n\t        log.debug(\"fired \" + that.className + \"#\" + eventType + \" \" + count + \" listeners called with params\", evt);\n\t    };\n\t\n\t    function listenerBuilder(listener, evt, eventType) {\n\t        return function () {\n\t            try {\n\t                listener.call(that, evt);\n\t            } catch (e) {\n\t                log.error('Error in ' + that.className + \"#\" + eventType, e.message, e.stack);\n\t            }\n\t        };\n\t    }\n\t\n\t    /**\n\t     * Determine if an object has had any listeners registered for a given event outside the library. This method\n\t     * checks for the isInternal flag on each listener and doesn't count it toward an event being listened to. This\n\t     * method is used in the library to handle situations where an action is needed if an event won't be acted on.\n\t     * For instance, if a call comes in for the logged-in user, but the developer isn't listening to\n\t     * {respoke.Client#call}, we'll need to reject the call immediately.\n\t     *\n\t     *     if (client.hasListeners('call')) {\n\t     *         // already handled!\n\t     *     }\n\t     *\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.hasListeners\n\t     * @param {string} eventType - The name of the event\n\t     * @returns {boolean} Whether this event has any listeners that are external to this library.\n\t     */\n\t    that.hasListeners = function (eventType) {\n\t        if (eventType === undefined) {\n\t            throw new Error(\"Missing required parameter event type.\");\n\t        }\n\t\n\t        if (!eventList[eventType]) {\n\t            return false;\n\t        }\n\t\n\t        return !eventList[eventType].every(function eachListener(listener) {\n\t            return listener.isInternal;\n\t        });\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.EventEmitter\n\t/**\n\t * @callback respoke.EventEmitter.eventListener\n\t * @param {respoke.Event} evt\n\t */\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\t/**\n\t * Empty base class. Use params.that (if exists) for the base object, but delete it from the instance.\n\t * Copy all params that were passed in onto the base object. Add the class name.\n\t * @class respoke.Class\n\t * @private\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = params.that || {};\n\t\n\t    that.className = 'respoke.Class';\n\t    delete params.that;\n\t    delete that.client;\n\t\n\t    Object.keys(params).forEach(function copyParam(name) {\n\t        that[name] = params[name];\n\t    });\n\t\n\t    return that;\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar Q = __webpack_require__(21);\n\tvar respoke = __webpack_require__(13);\n\tvar log = respoke.log;\n\t\n\t/**\n\t * `respoke.Client` is the top-level interface to the API. Interacting with Respoke should be done using\n\t * a `respoke.Client` instance.\n\t *\n\t * There are two ways to get a client:\n\t *\n\t *      var client = respoke.createClient(clientParams);\n\t *      // . . . set stuff up, then . . .\n\t *      client.connect(connectParams);\n\t *\n\t * or\n\t *\n\t *      // creates client and connects to Respoke all at once\n\t *      var client = respoke.connect(allParams);\n\t *\n\t * A client does the following things:\n\t *\n\t * 1. authentication with the Respoke API\n\t * 1. receives server-side app-specific information\n\t * 1. tracks connections and presence\n\t * 1. provides methods to get and interact with tracked entities (like groups and endpoints)\n\t * 1. stores default settings for calls and direct connections\n\t * 1. automatically reconnects to the API when network activity is lost*\n\t *\n\t * *If `developmentMode` is set to true. If not using `developmentMode`, disable automatic\n\t * reconnect by sending `reconnect: false` and listening to the Client's disconnect event\n\t * to fetch a new brokered auth token, then call `client.connect()` with the new token.\n\t *\n\t * @class respoke.Client\n\t * @constructor\n\t * @augments respoke.Presentable\n\t * @param {object} params\n\t * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n\t * respoke.connect, respoke.createClient, or to client.connect.\n\t * @param {string} [params.token] - The endpoint's authentication token.\n\t * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t * endpoint. This is only used when `developmentMode` is set to `true`.\n\t * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n\t * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t * operation and will limit the services you will be able to use.\n\t * @param {string|number|object|Array} [params.presence=unavailable] The initial presence to set once connected.\n\t * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n\t * when a disconnect occurs.\n\t * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n\t * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is received\n\t * from anywhere on the system.\n\t * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n\t * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n\t * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect.\n\t * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client's user receives a call.\n\t * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this client's user\n\t * receives a request for a direct connection.\n\t * @returns {respoke.Client}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId || respoke.makeGUID();\n\t    params.instanceId = instanceId;\n\t    var that = respoke.Presentable(params);\n\t    respoke.instances[instanceId] = that;\n\t    delete that.instanceId;\n\t    that.connectTries = 0;\n\t    /**\n\t     * A name to identify this class\n\t     * @memberof! respoke.Client\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Client';\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name host\n\t     * @type {string}\n\t     * @private\n\t     */\n\t    var host = window.location.hostname;\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name port\n\t     * @type {number}\n\t     * @private\n\t     */\n\t    var port = window.location.port;\n\t    /**\n\t     * A simple POJO to store some methods we will want to override but reference later.\n\t     * @memberof! respoke.Client\n\t     * @name superClass\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var superClass = {\n\t        setPresence: that.setPresence\n\t    };\n\t    /**\n\t     * A container for baseURL, token, and appId so they won't be accidentally viewable in any JavaScript debugger.\n\t     * @memberof! respoke.Client\n\t     * @name clientSettings\n\t     * @type {object}\n\t     * @private\n\t     * @property {string} [baseURL] - the URL of the cloud infrastructure's REST API.\n\t     * @property {string} [token] - The endpoint's authentication token.\n\t     * @property {string} [appId] - The id of your Respoke app.\n\t     * @property {string} [endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @property {boolean} [developmentMode=false] - Indication to obtain an authentication token from the service.\n\t     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t     * operation and will limit the services you will be able to use.\n\t     * @property {boolean} [reconnect=false] - Whether or not to automatically reconnect to the Respoke service\n\t     * when a disconnect occurs.\n\t     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n\t     * @property {respoke.Client.onClientMessage} [onMessage] - Callback for when any message is received\n\t     * from anywhere on the system.\n\t     * @property {respoke.Client.onConnect} [onConnect] - Callback for Client connect.\n\t     * @property {respoke.Client.onDisconnect} [onDisconnect] - Callback for Client disconnect.\n\t     * @property {respoke.Client.onReconnect} [onReconnect] - Callback for Client reconnect. Not Implemented.\n\t     * @property {respoke.Client.onCall} [onCall] - Callback for when this client receives a call.\n\t     * @property {respoke.Client.onDirectConnection} [onDirectConnection] - Callback for when this client\n\t     * receives a request for a direct connection.\n\t     * @property {boolean} enableCallDebugReport=true - Upon finishing a call, should the client send debugging\n\t     * information to the API? Defaults to `true`.\n\t     */\n\t    var clientSettings = {};\n\t\n\t    delete that.appId;\n\t    delete that.baseURL;\n\t    delete that.developmentMode;\n\t    delete that.token;\n\t    delete that.resolveEndpointPresence;\n\t\n\t    /**\n\t     * Internal list of known groups.\n\t     * @memberof! respoke.Client\n\t     * @name groups\n\t     * @type {Array<respoke.Group>}\n\t     * @private\n\t     */\n\t    var groups = [];\n\t    /**\n\t     * Internal list of known endpoints.\n\t     * @memberof! respoke.Client\n\t     * @name endpoints\n\t     * @type {Array<respoke.Endpoint>}\n\t     * @private\n\t     */\n\t    var endpoints = [];\n\t    /**\n\t     * Array of calls in progress, made accessible for informational purposes only.\n\t     * **Never modify this array directly.**\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @name calls\n\t     * @type {array}\n\t     */\n\t    that.calls = [];\n\t    log.debug(\"Client ID is \", instanceId);\n\t\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name signalingChannel\n\t     * @type {respoke.SignalingChannel}\n\t     * @private\n\t     */\n\t    var signalingChannel = respoke.SignalingChannel({\n\t        instanceId: instanceId,\n\t        clientSettings: clientSettings\n\t    });\n\t\n\t    /**\n\t     * Save parameters of the constructor or client.connect() onto the clientSettings object\n\t     * @memberof! respoke.Client\n\t     * @method respoke.saveParameters\n\t     * @param {object} params\n\t     * @param {respoke.Client.connectSuccessHandler} [params.onSuccess] - Success handler for this invocation\n\t     * of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n\t     * respoke.connect, respoke.createClient, or to client.connect.\n\t     * @param {string} [params.token] - The endpoint's authentication token.\n\t     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n\t     * @param {respoke.client.resolveEndpointPresence} [params.resolveEndpointPresence] An optional function for\n\t     * resolving presence for an endpoint.  An endpoint can have multiple Connections this function will be used\n\t     * to decide which Connection's presence gets precedence for the Endpoint.\n\t     * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n\t     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t     * operation and will limit the services you will be able to use.\n\t     * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n\t     * when a disconnect occurs.\n\t     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves\n\t     * a group.\n\t     * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is\n\t     * received from anywhere on the system.\n\t     * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n\t     * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n\t     * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n\t     * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client receives a call.\n\t     * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this\n\t     * client receives a request for a direct connection.\n\t     * @private\n\t     */\n\t    function saveParameters(params) {\n\t        Object.keys(params).forEach(function eachParam(key) {\n\t            if (['onSuccess', 'onError', 'reconnect'].indexOf(key) === -1 && params[key] !== undefined) {\n\t                clientSettings[key] = params[key];\n\t            }\n\t        });\n\t\n\t        clientSettings.developmentMode = !!clientSettings.developmentMode;\n\t        clientSettings.enableCallDebugReport = typeof clientSettings.enableCallDebugReport === 'boolean' ?\n\t            clientSettings.enableCallDebugReport : true;\n\t\n\t        if (typeof params.reconnect !== 'boolean') {\n\t            clientSettings.reconnect = typeof clientSettings.developmentMode === 'boolean' ? clientSettings.developmentMode : false;\n\t        } else {\n\t            clientSettings.reconnect = !!params.reconnect;\n\t        }\n\t    }\n\t    saveParameters(params);\n\t\n\t    /**\n\t     * Connect to the Respoke infrastructure and authenticate using `params.token`.\n\t     *\n\t     * After `connect`, the app auth session token is stored so it can be used in API requests.\n\t     *\n\t     * This method attaches quite a few event listeners for things like group joining and connection status changes.\n\t     *\n\t     * #### Usage\n\t     *\n\t     *      client.connect({\n\t     *          appId: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\",\n\t     *          token: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\", // if not developmentMode\n\t     *          developmentMode: false || true,\n\t     *          // if developmentMode, otherwise your server will set endpointId\n\t     *          endpointId: \"billy\"\n\t     *      });\n\t     *      client.listen(\"connect\", function () { } );\n\t     *\n\t     *\n\t     * If no `params.token` is given and `developmentMode` is set to true, it will attempt to obtain a token\n\t     * automatically. You must set an `endpointId`.\n\t     *\n\t     *\n\t     * #### App auth session token expiration\n\t     *\n\t     * If `params.reconnect` is set to true (which it is by default for `developmentMode`), the `client`\n\t     * will attempt to keep reconnecting each time the app auth session expires.\n\t     *\n\t     * If not using `developmentMode`, automatic reconnect will be disabled. You will need to\n\t     * listen to the Client's `disconnect` event to fetch a new brokered auth token and call\n\t     * `client.connect()` with the new token.\n\t     *\n\t     *      client.listen('disconnect', function () {\n\t     *\n\t     *          // example method you implemented to get a new token from your server\n\t     *          myServer.getNewRespokeAccessToken(function (newToken) {\n\t     *              // reconnect with respoke.Client\n\t     *              client.connect({ token: newToken });\n\t     *          });\n\t     *\n\t     *      });\n\t     *\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.connect\n\t     * @param {object} params\n\t     * @param {respoke.Client.connectSuccessHandler} [params.onSuccess] - Success handler for this invocation\n\t     * of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n\t     * respoke.connect, respoke.createClient, or to client.connect.\n\t     * @param {string} [params.token] - The endpoint's authentication token.\n\t     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n\t     * @param {respoke.client.resolveEndpointPresence} [params.resolveEndpointPresence] An optional function for\n\t     * resolving presence for an endpoint.  An endpoint can have multiple Connections this function will be used\n\t     * to decide which Connection's presence gets precedence for the Endpoint.\n\t     * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n\t     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t     * operation and will limit the services you will be able to use.\n\t     * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n\t     * when a disconnect occurs.\n\t     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves\n\t     * a group.\n\t     * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is\n\t     * received from anywhere on the system.\n\t     * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n\t     * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n\t     * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n\t     * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client receives a call.\n\t     * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this\n\t     * client receives a request for a direct connection.\n\t     * @returns {Promise|undefined}\n\t     * @fires respoke.Client#connect\n\t     */\n\t    that.connect = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        params = params || {};\n\t        log.debug('Client.connect');\n\t        that.connectTries += 1;\n\t\n\t        saveParameters(params);\n\t\n\t        that.endpointId = clientSettings.endpointId;\n\t        promise = actuallyConnect(params);\n\t        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        promise.then(function successHandler() {\n\t            /**\n\t             * This event is fired the first time the library connects to the cloud infrastructure.\n\t             * @event respoke.Client#connect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.fire('connect');\n\t\n\t            /**\n\t             * This event fires only when the initial `connect` fails.\n\t             *\n\t             * @ignore **This comment is for documentation purposes**, since #error bubbles\n\t             * up from other classes, but it should show on `respoke.Client` docs.\n\t             *\n\t             * @event respoke.Client#error\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t        });\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * This function contains the meat of the connection, the portions which can be repeated again on reconnect.\n\t     *\n\t     * When `reconnect` is true, this function will be added in an event listener to the Client#disconnect event.\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.actuallyConnect\n\t     * @private\n\t     * @param {object} params\n\t     * @param {connectSuccessHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    function actuallyConnect(params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t\n\t        if (!clientSettings.token &&\n\t                (!clientSettings.appId || !clientSettings.endpointId || clientSettings.developmentMode !== true)) {\n\t            deferred.reject(new Error(\"Must pass either endpointID & appId & developmentMode=true, or a token, \" +\n\t                \"to client.connect().\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        signalingChannel.open({\n\t            actuallyConnect: actuallyConnect,\n\t            endpointId: that.endpointId,\n\t            token: clientSettings.token\n\t        }).then(function successHandler() {\n\t            return signalingChannel.authenticate();\n\t        }).done(function successHandler() {\n\t            // set initial presence for the connection\n\t            if (clientSettings.presence) {\n\t                that.setPresence({presence: clientSettings.presence});\n\t            }\n\t\n\t            /*!\n\t             * These rely on the EventEmitter checking for duplicate event listeners in order for these\n\t             * not to be duplicated on reconnect.\n\t             */\n\t\n\t            /**\n\t             * This event provides notification for when an incoming call is being received.  If the user wishes\n\t             * to allow the call, `evt.call.answer()`.\n\t             * @event respoke.Client#call\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Call} call\n\t             * @property {respoke.Endpoint} endpoint\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.listen('call', clientSettings.onCall);\n\t            /**\n\t             * This event is fired when the local end of the directConnection is available. It still will not be\n\t             * ready to send and receive messages until the 'open' event fires.\n\t             * @event respoke.Client#direct-connection\n\t             * @type {respoke.Event}\n\t             * @property {respoke.DirectConnection} directConnection\n\t             * @property {respoke.Endpoint} endpoint\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.listen('direct-connection', clientSettings.onDirectConnection);\n\t            that.listen('join', clientSettings.onJoin);\n\t            /**\n\t             * This event is fired every time the client leaves a group.\n\t             * @event respoke.Client#leave\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Group} group\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.listen('leave', clientSettings.onLeave);\n\t            /**\n\t             * A generic message handler when a message was received by the client.\n\t             *\n\t             * @event respoke.Client#message\n\t             * @type {respoke.Event}\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Endpoint} endpoint - If the message was private, this is the Endpoint who sent it.\n\t             * @property {respoke.Group} group - If the message was to a group, this is the group.\n\t             * @property {respoke.TextMessage} message - The generic message object.\n\t             * @property {string} message.connectionId\n\t             * @property {string} message.endpointId\n\t             * @property {string} message.message - Message body text.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.listen('message', clientSettings.onMessage);\n\t            that.listen('connect', clientSettings.onConnect);\n\t            /**\n\t             * Client has disconnected from Respoke.\n\t             *\n\t             * @event respoke.Client#disconnect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.listen('disconnect', clientSettings.onDisconnect);\n\t            that.listen('disconnect', function () {\n\t                that.calls.forEach(function (call) {\n\t                    call.hangup({signal: false});\n\t                });\n\t            }, true);\n\t            /**\n\t             * Client has reconnected to Respoke.\n\t             *\n\t             * @event respoke.Client#reconnect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.listen('reconnect', clientSettings.onReconnect);\n\t\n\t            log.info('logged in as ' + that.endpointId, that);\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t            if (err.message && err.message.match(/Connection limit exceeded/)) {\n\t                log.error(\n\t                    'You have reached the connection limit on the account associated with this appId. ' +\n\t                    'Please upgrade your account from the developer portal at https://portal.respoke.io ' +\n\t                    'if you need more concurrent connections.', err);\n\t            } else {\n\t                log.error(err.message, err.stack);\n\t            }\n\t        });\n\t\n\t        return deferred.promise;\n\t    }\n\t\n\t    /**\n\t     * Disconnect from the Respoke infrastructure, leave all groups, invalidate the token, and disconnect the websocket.\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.disconnect\n\t     * @returns {Promise|undefined}\n\t     * @param {object} params\n\t     * @param {disconnectSuccessHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @fires respoke.Client#disconnect\n\t     */\n\t    that.disconnect = function (params) {\n\t        // TODO: also call this on socket disconnect\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            deferred.reject(e);\n\t            return retVal;\n\t        }\n\t\n\t        var leaveGroups = groups.map(function eachGroup(group) {\n\t            group.leave();\n\t        });\n\t\n\t        Q.all(leaveGroups).fin(function successHandler() {\n\t            return signalingChannel.close();\n\t        }).fin(function finallyHandler() {\n\t            that.presence = 'unavailable';\n\t            endpoints = [];\n\t            groups = [];\n\t            /**\n\t             * This event is fired when the library has disconnected from the cloud infrastructure.\n\t             * @event respoke.Client#disconnect\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.fire('disconnect');\n\t            deferred.resolve();\n\t        }).done();\n\t\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Set the presence for this client.\n\t     *\n\t     * The value of presence can be a string, number, object, or array - in any format -\n\t     * depending on the needs of your application. The only requirement is that\n\t     * `JSON.stringify()` must work (no circular references).\n\t     *\n\t     *      var myPresence = 'At lunch'\n\t     *                      || 4\n\t     *                      || { status: 'Away', message: 'At lunch' }\n\t     *                      || ['Away', 'At lunch'];\n\t     *\n\t     *      client.setPresence({\n\t     *          presence: myPresence,\n\t     *          onSuccess: function (evt) {\n\t     *              // successfully updated my presence\n\t     *          }\n\t     *      });\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.setPresence\n\t     * @param {object} params\n\t     * @param {string|number|object|array} params.presence\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @overrides Presentable.setPresence\n\t     * @return {Promise|undefined}\n\t     */\n\t    that.setPresence = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        params = params || {};\n\t\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        }\n\t\n\t        log.info('sending my presence update ' + params.presence);\n\t\n\t        promise = signalingChannel.sendPresence({\n\t            presence: params.presence\n\t        });\n\t\n\t        promise.then(function successHandler(p) {\n\t            superClass.setPresence(params);\n\t            clientSettings.presence = params.presence;\n\t        });\n\t        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Get the Call with the endpoint specified.\n\t     *\n\t     *     // hang up on chad\n\t     *     var call = client.getCall({\n\t     *         endpointId: 'chad'\n\t     *     });\n\t     *\n\t     *     if (call) {\n\t     *         call.hangup()\n\t     *     }\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getCall\n\t     * @param {object} params\n\t     * @param {string} [params.id] - Call ID.\n\t     * @param {string} [params.endpointId] - Endpoint ID. Warning: If you pass only the endpointId, this method\n\t     * will just return the first call that matches. If you are placing multiple calls to the same endpoint,\n\t     * pass in the call ID, too.\n\t     * @arg {boolean} [params.create] - whether or not to create a new call if the specified endpointId isn't found\n\t     * @arg {string} [params.fromType] - fromType from the signal, tells us if this is a SIP or DID call.\n\t     * @arg {string} [params.target] - target from the signal, tells us if this is a screenshare or conference call.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.getCall = function (params) {\n\t        var call = null;\n\t        var methods = {\n\t            screenshare: \"startScreenShare\",\n\t            did: \"startPhoneCall\",\n\t            web: \"startCall\",\n\t            sip: \"startSIPCall\",\n\t            conference: \"startConferenceCall\"\n\t        };\n\t        var callParams = {};\n\t        params.fromType = params.type || \"web\";\n\t        var switchType = params.type;\n\t\n\t        that.calls.every(function findCall(one) {\n\t            if (params.id && one.id === params.id) {\n\t                call = one;\n\t                return false;\n\t            }\n\t\n\t            if (!params.id && params.endpointId && one.remoteEndpoint.id === params.endpointId) {\n\t                call = one;\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t\n\t        if (call || params.create !== true) {\n\t            return call;\n\t        }\n\t\n\t        callParams.id = params.id;\n\t        callParams.conferenceId = params.conferenceId;\n\t        callParams.caller = false;\n\t        callParams.fromType = \"web\";\n\t        callParams.callerId = params.callerId;\n\t        callParams.target = params.target;\n\t\n\t        if (params.target === \"conference\") {\n\t            callParams.conferenceId = params.conferenceId;\n\t            switchType = params.target;\n\t        } else if (params.target === \"screenshare\") {\n\t            switchType = params.target;\n\t        }\n\t\n\t        switch (switchType) {\n\t            case \"screenshare\":\n\t            case \"web\":\n\t                callParams.toType = \"web\"; // overwrite \"screenshare\"\n\t                callParams.endpointId = params.endpointId;\n\t                break;\n\t            case \"did\":\n\t                callParams.number = params.endpointId;\n\t                callParams.toType = \"did\";\n\t                break;\n\t            case \"sip\":\n\t                callParams.uri = params.endpointId;\n\t                callParams.toType = \"sip\";\n\t                break;\n\t        }\n\t\n\t        try {\n\t            call = that[methods[params.type]](callParams);\n\t        } catch (e) {\n\t            log.error(\"Couldn't create Call.\", e.message, e.stack);\n\t        }\n\t        return call;\n\t    };\n\t\n\t    /**\n\t     * Add the call to internal record-keeping.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.addCall\n\t     * @param {object} evt\n\t     * @param {respoke.Call} evt.call\n\t     * @param {respoke.Endpoint} evt.endpoint\n\t     * @private\n\t     */\n\t    function addCall(evt) {\n\t        log.debug('addCall');\n\t        if (!evt.call) {\n\t            throw new Error(\"Can't add call without a call parameter.\");\n\t        }\n\t        if (that.calls.indexOf(evt.call) === -1) {\n\t            that.calls.push(evt.call);\n\t        }\n\t\n\t        evt.call.listen('hangup', function () {\n\t            removeCall({call: evt.call});\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Remove the call or direct connection from internal record-keeping.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.removeCall\n\t     * @param {object} evt\n\t     * @param {respoke.Call} evt.target\n\t     * @private\n\t     */\n\t    function removeCall(evt) {\n\t        var match = 0;\n\t        if (!evt.call) {\n\t            throw new Error(\"Can't remove call without a call parameter.\");\n\t        }\n\t\n\t        // Loop backward since we're modifying the array in place.\n\t        for (var i = that.calls.length - 1; i >= 0; i -= 1) {\n\t            if (that.calls[i].id === evt.call.id) {\n\t                that.calls.splice(i, 1);\n\t                match += 1;\n\t            }\n\t        }\n\t\n\t        if (match !== 1) {\n\t            log.warn(\"Something went wrong.\", match, \"calls were removed!\");\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Convenience method for setting presence to `\"available\"`.\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.setOnline\n\t     * @param {object} params\n\t     * @param {string|number|object|Array} [params.presence=available] - The presence to set.\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.setOnline = function (params) {\n\t        var promise;\n\t\n\t        params = params || {};\n\t        params.presence = params.presence || 'available';\n\t\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        }\n\t\n\t        return that.setPresence(params);\n\t    };\n\t\n\t    /**\n\t     * Convenience method for setting presence to `\"unavailable\"`.\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.setOffline\n\t     * @param {object} params\n\t     * @param {string|number|object|Array} [params.presence=unavailable] - The presence to set.\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.setOffline = function (params) {\n\t        var promise;\n\t\n\t        params = params || {};\n\t        params.presence = params.presence || 'unavailable';\n\t\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        }\n\t\n\t        return that.setPresence(params);\n\t    };\n\t\n\t    /**\n\t     * Send a message to an endpoint.\n\t     *\n\t     *     client.sendMessage({\n\t     *         endpointId: 'dan',\n\t     *         message: \"Jolly good.\"\n\t     *     });\n\t     *\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.sendMessage\n\t     * @param {object} params\n\t     * @param {string} params.endpointId - The endpoint id of the recipient.\n\t     * @param {string} [params.connectionId] - The optional connection id of the receipient. If not set, message will be\n\t     * broadcast to all connections for this endpoint.\n\t     * @param {string} params.message - a string message.\n\t     * @param {sendHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        var endpoint;\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t            return retVal;\n\t        }\n\t        endpoint = that.getEndpoint({\n\t            skipPresence: true,\n\t            id: params.endpointId\n\t        });\n\t        delete params.endpointId;\n\t        return endpoint.sendMessage(params);\n\t    };\n\t\n\t    /**\n\t     * Experimental. Create a new conference call with the specified conferenceId.\n\t     *\n\t     *     client.startConferenceCall({\n\t     *         conferenceId: \"javascript-meetup\",\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startConferenceCall\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} params.conferenceId - The id that should be used to create the conference call or the ID\n\t     * of the call to join.\n\t     * @arg {string} [params.key] - The access key to use. If not set, the conference call will be open such\n\t     * that any endpoint can join.\n\t     * @arg {boolean} [params.open] - whether endpoints can join this conference without a key.\n\t     * @arg {respoke.Conference.onJoin} [params.onJoin] - Callback for when a participant joins the conference.\n\t     * @arg {respoke.Conference.onLeave} [params.onLeave] - Callback for when a participant leaves the conference.\n\t     * @arg {respoke.Conference.onMessage} [params.onMessage] - Callback for when a message is sent to the conference.\n\t     * @param {respoke.Conference.onMute} [params.onMute] - Callback for when local or remote media is muted or unmuted.\n\t     * @arg {respoke.Conference.onTopic} [params.onTopic] - Callback for the conference topic changes.\n\t     * @arg {respoke.Conference.onPresenter} [params.onPresenter] - Callback for when the presenter changes.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n\t     * and the remote party has received the video.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @returns {respoke.Conference}\n\t     */\n\t    that.startConferenceCall = function (params) {\n\t        var conference = null;\n\t        var recipient;\n\t\n\t        params = params || {};\n\t        params.open = !!params.open;\n\t\n\t        that.verifyConnected();\n\t\n\t        if (!params.conferenceId) {\n\t            params.conferenceId = respoke.makeGUID();\n\t        }\n\t\n\t        recipient = {id: params.conferenceId};\n\t\n\t        if (params.open) {\n\t            params.key = undefined;\n\t        } else if (!params.key) {\n\t            params.key = respoke.makeGUID();\n\t        }\n\t\n\t        params.instanceId = instanceId;\n\t        params.target = \"conference\";\n\t        params.constraints = respoke.convertConstraints(params.constraints, [{\n\t            video: false,\n\t            audio: true,\n\t            mandatory: {},\n\t            optional: []\n\t        }]);\n\t\n\t        params.signalOffer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'offer';\n\t            signalParams.target = params.target;\n\t            signalParams.id = params.id;\n\t            signalParams.key = params.key;\n\t            signalParams.open = params.open;\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = \"conference\";\n\t\n\t            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n\t        };\n\t        params.signalAnswer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'answer';\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = recipient;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalParams.toType = \"conference\";\n\t            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n\t                signalParams.call.hangup({signal: false});\n\t            });\n\t        };\n\t        params.signalConnected = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.connectionId = signalParams.call.connectionId;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = \"conference\";\n\t            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n\t                signalParams.call.hangup();\n\t            });\n\t        };\n\t        params.signalModify = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = recipient;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalParams.toType = \"conference\";\n\t            signalingChannel.sendModify(signalParams).done();\n\t        };\n\t        params.signalCandidate = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = recipient;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalParams.toType = \"conference\";\n\t            signalingChannel.sendCandidate(signalParams).done();\n\t        };\n\t        params.signalHangup = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = recipient;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalParams.toType = \"conference\";\n\t            signalingChannel.sendHangup(signalParams).done();\n\t        };\n\t        params.signalReport = function (signalParams) {\n\t            log.debug(\"Sending debug report\", signalParams.report);\n\t            signalingChannel.sendReport(signalParams).done();\n\t        };\n\t\n\t        params.signalingChannel = signalingChannel;\n\t        conference = respoke.Conference(params);\n\t        addCall({call: conference.call});\n\t        return conference;\n\t    };\n\t\n\t    /**\n\t     * Create a new screen sharing call. Screenshares are inherently unidirectional video only. This may change\n\t     * in the future when Chrome adds the ability to obtain screen video and microphone audio at the same time. For\n\t     * now, if you also need audio, place a second audio only call.\n\t     *\n\t     * The endpoint who calls `client.startScreenShare` will be the one whose screen is shared. If you'd like to\n\t     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n\t     * not the sharer, it is recommened that you use `endpoint.sendMessage` to send a control message to the user\n\t     * whose screenshare is being requested so that user's app can call `client.startScreenShare`.\n\t     *\n\t     * NOTE: At this time, screen sharing only works with Chrome, and Chrome requires a Chrome extension to\n\t     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension.\n\t     * Support for additional browsers will be added in the future.\n\t     *\n\t     *     client.startScreenShare({\n\t     *         endpointId: 'tian',\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startScreenShare\n\t     * @param {object} params\n\t     * @param {string} params.endpointId - The id of the endpoint that should be called.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n\t     * and the remote party has received the video.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {string} [params.source] - Pass in what type of mediaSource you want. If omitted, you'll have access\n\t     * to both the screen and windows. In firefox, you'll have access to the screen only.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startScreenShare = function (params) {\n\t        that.verifyConnected();\n\t        var endpoint = that.getEndpoint({\n\t            skipPresence: true,\n\t            id: params.endpointId\n\t        });\n\t        delete params.endpointId;\n\t        return endpoint.startScreenShare(params);\n\t    };\n\t\n\t    /**\n\t     * Place an audio and/or video call to an endpoint.\n\t     *\n\t     *     // defaults to video when no constraints are supplied\n\t     *     client.startCall({\n\t     *         endpointId: 'erin',\n\t     *         onConnect: function (evt) { },\n\t     *         onLocalMedia: function (evt) { }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startCall\n\t     * @param {object} params\n\t     * @param {string} params.endpointId - The id of the endpoint that should be called.\n\t     * @param {Array<RTCConstraints>} [params.constraints]\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n\t     * with the local audio and/or video attached.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n\t     * with the remote audio and/or video attached.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n\t     * up.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have\n\t     * local video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have\n\t     * remote video attached to it.\n\t     * @return {respoke.Call}\n\t     */\n\t    that.startCall = function (params) {\n\t        that.verifyConnected();\n\t        var endpoint = that.getEndpoint({\n\t            skipPresence: true,\n\t            id: params.endpointId\n\t        });\n\t        delete params.endpointId;\n\t        return endpoint.startCall(params);\n\t    };\n\t\n\t    /**\n\t     * Place an audio only call to an endpoint.\n\t     *\n\t     *     client.startAudioCall({\n\t     *         endpointId: 'erin',\n\t     *         onConnect: function (evt) { },\n\t     *         onLocalMedia: function (evt) { }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startAudioCall\n\t     * @param {object} params\n\t     * @param {string} params.endpointId - The id of the endpoint that should be called.\n\t     * @param {string} [params.connectionId]\n\t     * @param {Array<RTCConstraints>} [params.constraints]\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 element\n\t     * with the local audio and/or video attached.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 element\n\t     * with the remote audio and/or video attached.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n\t     * up.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     * @return {respoke.Call}\n\t     */\n\t    that.startAudioCall = function (params) {\n\t        that.verifyConnected();\n\t        var endpoint = that.getEndpoint({\n\t            skipPresence: true,\n\t            id: params.endpointId\n\t        });\n\t        delete params.endpointId;\n\t        return endpoint.startAudioCall(params);\n\t    };\n\t\n\t    /**\n\t     * Place a video call to an endpoint.\n\t     *\n\t     *     client.startVideoCall({\n\t     *         endpointId: 'erin',\n\t     *         onConnect: function (evt) { },\n\t     *         onLocalMedia: function (evt) { }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startVideoCall\n\t     * @param {object} params\n\t     * @param {string} params.endpointId - The id of the endpoint that should be called.\n\t     * @param {Array<RTCConstraints>} [params.constraints]\n\t     * @param {string} [params.connectionId]\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n\t     * with the local audio and/or video attached.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n\t     * with the remote audio and/or video attached.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n\t     * up.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     * @return {respoke.Call}\n\t     */\n\t    that.startVideoCall = function (params) {\n\t        that.verifyConnected();\n\t        var endpoint = that.getEndpoint({\n\t            skipPresence: true,\n\t            id: params.endpointId\n\t        });\n\t        delete params.endpointId;\n\t        return endpoint.startVideoCall(params);\n\t    };\n\t\n\t    /**\n\t     * Place an audio call with a phone number.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startPhoneCall\n\t     * @param {object} params\n\t     * @param {string} params.number - The phone number that should be called.\n\t     * @arg {string} params.callerId - The phone number to use as the caller ID for this phone call. This must\n\t     * be a phone number listed in your Respoke account, associated with your app, and allowed by the role\n\t     * that this client is authenticated with. If the role contains a list of numbers and the token does not contain\n\t     * callerId, this field must be used to set caller ID selected from the list of numbers or no caller ID will be set.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n\t     * with the local audio and/or video attached.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n\t     * with the remote audio and/or video attached.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n\t     * up.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @return {respoke.Call}\n\t     */\n\t    that.startPhoneCall = function (params) {\n\t        var promise;\n\t        var call = null;\n\t        var recipient = {};\n\t        params = params || {};\n\t        params.constraints = [{\n\t            video: false,\n\t            audio: true,\n\t            mandatory: {},\n\t            optional: []\n\t        }];\n\t\n\t        that.verifyConnected();\n\t\n\t        if (!params.number) {\n\t            throw new Error(\"Can't start a phone call without a number.\");\n\t        }\n\t\n\t        if (typeof params.caller !== 'boolean') {\n\t            params.caller = true;\n\t        }\n\t\n\t        recipient.id = params.number;\n\t\n\t        params.instanceId = instanceId;\n\t        params.remoteEndpoint = recipient;\n\t\n\t        params.toType = params.toType || 'did';\n\t        params.fromType = params.fromType || 'web';\n\t\n\t        params.signalOffer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'offer';\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t\n\t            // using hasOwnProperty here because callerId could be explicitly set to null or empty string\n\t            if (params.hasOwnProperty('callerId')) {\n\t                signalParams.callerId = {number: params.callerId};\n\t            }\n\t            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n\t        };\n\t        params.signalAnswer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'answer';\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't answer the call.\", err.message, err.stack);\n\t                signalParams.call.hangup({signal: false});\n\t            });\n\t        };\n\t        params.signalConnected = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.connectionId = signalParams.connectionId;\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send connected.\", err.message, err.stack);\n\t                signalParams.call.hangup();\n\t            });\n\t        };\n\t        params.signalModify = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendModify(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send modify.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalCandidate = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendCandidate(signalParams).done();\n\t        };\n\t        params.signalHangup = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendHangup(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send hangup.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalReport = function (signalParams) {\n\t            log.debug(\"Sending debug report\", signalParams.report);\n\t            signalingChannel.sendReport(signalParams);\n\t        };\n\t\n\t        params.signalingChannel = signalingChannel;\n\t        call = respoke.Call(params);\n\t        addCall({call: call});\n\t        return call;\n\t    };\n\t\n\t    /**\n\t     * Place an audio call to a SIP URI.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startSIPCall\n\t     * @param {object} params\n\t     * @param {string} params.uri - The SIP URI to call.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n\t     * with the local audio and/or video attached.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n\t     * with the remote audio and/or video attached.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n\t     * up.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @return {respoke.Call}\n\t     */\n\t    that.startSIPCall = function (params) {\n\t        var promise;\n\t        var call = null;\n\t        var recipient = {};\n\t        params = params || {};\n\t        params.constraints = [{\n\t            video: false,\n\t            audio: true,\n\t            mandatory: {},\n\t            optional: []\n\t        }];\n\t\n\t        that.verifyConnected();\n\t\n\t        if (!params.uri) {\n\t            throw new Error(\"Can't start a phone call without a SIP URI.\");\n\t        }\n\t\n\t        if (typeof params.caller !== 'boolean') {\n\t            params.caller = true;\n\t        }\n\t\n\t        recipient.id = params.uri;\n\t\n\t        params.instanceId = instanceId;\n\t        params.remoteEndpoint = recipient;\n\t\n\t        params.toType = params.toType || 'sip';\n\t        params.fromType = params.fromType || 'web';\n\t\n\t        params.signalOffer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'offer';\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n\t        };\n\t        params.signalAnswer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'answer';\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't answer the call.\", err.message, err.stack);\n\t                signalParams.call.hangup({signal: false});\n\t            });\n\t        };\n\t        params.signalConnected = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.connectionId = signalParams.connectionId;\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send connected.\", err.message, err.stack);\n\t                signalParams.call.hangup();\n\t            });\n\t        };\n\t        params.signalModify = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendModify(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send modify.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalCandidate = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendCandidate(signalParams).done();\n\t        };\n\t        params.signalHangup = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendHangup(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send hangup.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalReport = function (signalParams) {\n\t            log.debug(\"Sending debug report\", signalParams.report);\n\t            signalingChannel.sendReport(signalParams);\n\t        };\n\t\n\t        params.signalingChannel = signalingChannel;\n\t        call = respoke.Call(params);\n\t        addCall({call: call});\n\t        return call;\n\t    };\n\t\n\t    /**\n\t     * Assert that we are connected to the backend infrastructure.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.verifyConnected\n\t     * @throws {Error}\n\t     * @private\n\t     */\n\t    that.verifyConnected = function () {\n\t        if (!signalingChannel.isConnected()) {\n\t            throw new Error(\"Can't complete request when not connected. Please reconnect!\");\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Check whether this client is connected to the Respoke API.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.isConnected\n\t     * @returns boolean\n\t     */\n\t    that.isConnected = function () {\n\t        return signalingChannel.isConnected();\n\t    };\n\t\n\t    /**\n\t     * Join a group and begin keeping track of it. If this method is called multiple times synchronously, it will\n\t     * batch requests and only make one API call to Respoke.\n\t     *\n\t     * You can leave the group by calling `group.leave()`;\n\t     *\n\t     * ##### Joining and leaving a group\n\t     *\n\t     *      var group;\n\t     *\n\t     *      client.join({\n\t     *          id: \"book-club\",\n\t     *          onSuccess: function (evt) {\n\t     *              console.log('I joined', evt.group.id);\n\t     *              // \"I joined book-club\"\n\t     *              group = evt.group;\n\t     *              group.sendMessage({\n\t     *                  message: 'sup'\n\t     *              });\n\t     *          }\n\t     *      });\n\t     *\n\t     *      // . . .\n\t     *      // Some time later, leave the group.\n\t     *      // . . .\n\t     *      group.leave({\n\t     *          onSuccess: function (evt) {\n\t     *              console.log('I left', evt.group.id);\n\t     *              // \"I left book-club\"\n\t     *          }\n\t     *      });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.join\n\t     * @param {object} params\n\t     * @param {string} params.id - The name of the group.\n\t     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {respoke.Group.onMessage} [params.onMessage] - Message handler for messages from this group only.\n\t     * @param {respoke.Group.onJoin} [params.onJoin] - Join event listener for endpoints who join this group only.\n\t     * @param {respoke.Group.onLeave} [params.onLeave] - Leave event listener for endpoints who leave\n\t     * this group only.\n\t     * @returns {Promise<respoke.Group>|undefined} The instance of the respoke.Group which the client joined.\n\t     * @fires respoke.Client#join\n\t     */\n\t    that.join = function (params) {\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            deferred.reject(e);\n\t            return retVal;\n\t        }\n\t\n\t        if (!params.id) {\n\t            deferred.reject(new Error(\"Can't join a group with no group id.\"));\n\t            return retVal;\n\t        }\n\t\n\t        signalingChannel.joinGroup({\n\t            groupList: [params.id]\n\t        }).done(function successHandler() {\n\t            var group;\n\t            params.signalingChannel = signalingChannel;\n\t            params.instanceId = instanceId;\n\t\n\t            group = that.getGroup({id: params.id});\n\t\n\t            if (!group) {\n\t                group = respoke.Group(params);\n\t                that.addGroup(group);\n\t            }\n\t\n\t            group.listen('join', params.onJoin);\n\t            group.listen('leave', params.onLeave);\n\t            group.listen('message', params.onMessage);\n\t\n\t            group.addMember({\n\t                connection: that.getConnection({\n\t                    endpointId: that.endpointId,\n\t                    connectionId: that.connectionId\n\t                })\n\t            });\n\t\n\t            /**\n\t             * This event is fired every time the client joins a group. If the client leaves\n\t             * a group, this event will be fired again on the next time the client joins the group.\n\t             * @event respoke.Client#join\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Group} group\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.fire('join', {\n\t                group: group\n\t            });\n\t            deferred.resolve(group);\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Add a Group. This is called when we join a group and need to begin keeping track of it.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.addGroup\n\t     * @param {respoke.Group}\n\t     * @private\n\t     */\n\t    that.addGroup = function (newGroup) {\n\t        if (!newGroup || newGroup.className !== 'respoke.Group') {\n\t            throw new Error(\"Can't add group to internal tracking without a group.\");\n\t        }\n\t\n\t        newGroup.listen('leave', function leaveHandler(evt) {\n\t            newGroup.removeMember({connectionId: evt.connection.id});\n\t            var endpt = evt.connection.getEndpoint();\n\t            if (!endpt.hasListeners('presence')) {\n\t                checkEndpointForRemoval(endpt);\n\t            }\n\t        }, true);\n\t\n\t        groups.push(newGroup);\n\t    };\n\t\n\t    /**\n\t     * Get a list of all the groups the client is currently a member of.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getGroups\n\t     * @returns {Array<respoke.Group>} All of the groups the library is aware of.\n\t     */\n\t    that.getGroups = function () {\n\t        return groups;\n\t    };\n\t\n\t    /**\n\t     * Find a group by id and return it.\n\t     *\n\t     *     var group = client.getGroup({\n\t     *         id: \"resistance\"\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getGroup\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     * @param {respoke.Group.onJoin} [params.onJoin] - Receive notification that an endpoint has joined this group.\n\t     * @param {respoke.Group.onLeave} [params.onLeave] - Receive notification that an endpoint has left this group.\n\t     * @param {respoke.Group.onMessage} [params.onMessage] - Receive notification that a message has been\n\t     * received to a group.\n\t     * @returns {respoke.Group|undefined} The group whose ID was specified.\n\t     */\n\t    that.getGroup = function (params) {\n\t        var group;\n\t        if (!params || !params.id) {\n\t            throw new Error(\"Can't get a group without group id.\");\n\t        }\n\t\n\t        groups.every(function eachGroup(grp) {\n\t            if (grp.id === params.id) {\n\t                group = grp;\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t\n\t        if (group) {\n\t            group.listen('join', params.onJoin);\n\t            group.listen('leave', params.onLeave);\n\t            group.listen('message', params.onMessage);\n\t        }\n\t\n\t        return group;\n\t    };\n\t\n\t    /**\n\t     * Remove an Endpoint. Since an endpoint can be a member of multiple groups, we can't just remove it from\n\t     * our list on respoke.Endpoint#leave. We must see if it's a member of any more groups. If it's not\n\t     * a member of any other groups, we can stop keeping track of it.\n\t     * @todo TODO Need to account for Endpoints not created as part of a group. These do not need to be\n\t     * deleted based on group membership.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.checkEndpointForRemoval\n\t     * @param {object} params\n\t     * @param {string} params.id - The ID of the Endpoint to check for removal.\n\t     * @private\n\t     */\n\t    function checkEndpointForRemoval(params) {\n\t        params = params || {};\n\t        if (!params.id) {\n\t            throw new Error(\"Can't remove endpoint from internal tracking without group id.\");\n\t        }\n\t\n\t        Q.all(groups.map(function eachGroup(group) {\n\t            return group.getMembers();\n\t        })).done(function successHandler(connectionsByGroup) {\n\t            // connectionsByGroup is a two-dimensional array where the first dimension is a group\n\t            // and the second dimension is a connection.\n\t            var absent = connectionsByGroup.every(function eachConnectionList(connectionList) {\n\t                return connectionList.every(function eachConnection(conn) {\n\t                    return (conn.endpointId !== params.id);\n\t                });\n\t            });\n\t            if (absent) {\n\t                endpoints.every(function eachEndpoint(ept, index) {\n\t                    if (ept.id === params.id) {\n\t                        endpoints.splice(index, 1);\n\t                        return false;\n\t                    }\n\t                    return true;\n\t                });\n\t            }\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Find an endpoint by id and return the `respoke.Endpoint` object.\n\t     *\n\t     * If it is not already cached locally, will be added to the local cache of tracked endpoints,\n\t     * its presence will be determined, and will be available in `client.getEndpoints()`.\n\t     *\n\t     *     var endpoint = client.getEndpoint({\n\t     *         id: \"dlee\"\n\t     *     });\n\t     *\n\t     * @ignore If the endpoint is not found in the local cache of endpoint objects (see `client.getEndpoints()`),\n\t     * it will be created. This is useful, for example, in the case of dynamic endpoints where groups are\n\t     * not in use. Override dynamic endpoint creation by setting `params.skipCreate = true`.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getEndpoint\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     * @param {respoke.Endpoint.onMessage} [params.onMessage] - Handle messages sent to the logged-in user\n\t     * from this one Endpoint.\n\t     * @param {respoke.Endpoint.onPresence} [params.onPresence] - Handle presence notifications from this one\n\t     * Endpoint.\n\t     * @arg {boolean} [params.skipCreate] - Skip the creation step and return undefined if we don't yet\n\t     * @arg {boolean} [params.skipPresence] - Skip registering for this endpoint's presence.\n\t     * @returns {respoke.Endpoint} The endpoint whose ID was specified.\n\t     */\n\t    that.getEndpoint = function (params) {\n\t        var endpoint;\n\t        if (!params || !params.id) {\n\t            throw new Error(\"Can't get an endpoint without endpoint id.\");\n\t        }\n\t\n\t        endpoints.every(function eachEndpoint(ept) {\n\t            if (ept.id === params.id) {\n\t                endpoint = ept;\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t\n\t        if (!endpoint && params && !params.skipCreate) {\n\t            params.instanceId = instanceId;\n\t            params.signalingChannel = signalingChannel;\n\t            params.resolveEndpointPresence = clientSettings.resolveEndpointPresence;\n\t            params.addCall = addCall;\n\t\n\t            endpoint = respoke.Endpoint(params);\n\t            endpoints.push(endpoint);\n\t        }\n\t\n\t        if (!endpoint) {\n\t            return;\n\t        }\n\t\n\t        if (params.skipPresence !== true) {\n\t            signalingChannel.registerPresence({\n\t                endpointList: [endpoint.id]\n\t            }).done(null, function (err) {\n\t                log.error(\"Couldn't register for presence on\", endpoint.id, err.message);\n\t            });\n\t        }\n\t        endpoint.listen('presence', params.onPresence);\n\t        endpoint.listen('message', params.onMessage);\n\t\n\t        return endpoint;\n\t    };\n\t\n\t    /**\n\t     * Find a Connection by id and return it.\n\t     *\n\t     *     var connection = client.getConnection({\n\t     *         id: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\"\n\t     *     });\n\t     *\n\t     * @ignore In most cases, if we don't find it we will create it. This is useful\n\t     * in the case of dynamic endpoints where groups are not in use. Set skipCreate=true\n\t     * to return undefined if the Connection is not already known.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getConnection\n\t     * @param {object} params\n\t     * @param {string} params.connectionId\n\t     * @param {string} [params.endpointId] - An endpointId to use in the creation of this connection.\n\t     * @param {respoke.Endpoint.onMessage} [params.onMessage] - Handle messages sent to the logged-in user\n\t     * from this one Connection.\n\t     * @param {respoke.Endpoint.onPresence} [params.onPresence] - Handle presence notifications from this one\n\t     * Connection.\n\t     * @returns {respoke.Connection} The connection whose ID was specified.\n\t     */\n\t    that.getConnection = function (params) {\n\t        var connection;\n\t        var endpoint;\n\t        var endpointsToSearch = endpoints;\n\t\n\t        params = params || {};\n\t        if (!params.connectionId) {\n\t            throw new Error(\"Can't get a connection without connection id.\");\n\t        }\n\t        if (!params.endpointId && !params.skipCreate) {\n\t            throw new Error(\"Can't create a connection without endpoint id.\");\n\t        }\n\t\n\t        if (params.endpointId) {\n\t            endpoint = that.getEndpoint({\n\t                id: params.endpointId,\n\t                skipPresence: true,\n\t                skipCreate: params.skipCreate\n\t            });\n\t\n\t            endpointsToSearch = [];\n\t            if (endpoint) {\n\t                endpointsToSearch = [endpoint];\n\t            }\n\t        }\n\t\n\t        endpointsToSearch.every(function eachEndpoint(ept) {\n\t            connection = ept.getConnection(params);\n\t            return !connection;\n\t        });\n\t\n\t        if (!connection && !params.skipCreate) {\n\t            params.instanceId = instanceId;\n\t            connection = respoke.Connection(params);\n\t            endpoint.connections.push(connection);\n\t        }\n\t\n\t        return connection;\n\t    };\n\t\n\t    /**\n\t     * Get the list of **all endpoints** that the library has knowledge of.\n\t     * These are `respoke.Endpoint` objects, not just the endpointIds.\n\t     *\n\t     * The library gains knowledge of an endpoint in two ways:\n\t     * 1. when an endpoint joins a group that the user (currently logged-in endpoint) is a member of (if group presence is enabled)\n\t     * 2. when an endpoint that the user (currently logged-in endpoint) is watching*\n\t     *\n\t     * *If an endpoint that the library does not know about sends a message to the client, you\n\t     * can immediately call the `client.getEndpoint()` method on the sender of the message to enable\n\t     * watching of the sender's endpoint.\n\t     *\n\t     *      client.on('message', function (data) {\n\t     *          if (data.endpoint) {\n\t     *              // start tracking this endpoint.\n\t     *              client.getEndpoint({ id: data.endpoint.id });\n\t     *          }\n\t     *      });\n\t     *\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getEndpoints\n\t     * @returns {Array<respoke.Endpoint>}\n\t     */\n\t    that.getEndpoints = function () {\n\t        return endpoints;\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.Client\n\t\n\t/**\n\t * Handle sending successfully.\n\t * @callback respoke.Client.successHandler\n\t */\n\t/**\n\t * Handle joining a group successfully. This callback is called only once when Client.join() is called.\n\t * @callback respoke.Client.joinHandler\n\t * @param {respoke.Group} group\n\t */\n\t/**\n\t * Receive notification that the client has joined a group. This callback is called everytime\n\t * respoke.Client#join is fired.\n\t * @callback respoke.Client.onJoin\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Group} evt.group\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * Receive notification that the client has left a group. This callback is called everytime\n\t * respoke.Client#leave is fired.\n\t * @callback respoke.Client.onLeave\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Group} evt.group\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * Receive notification that a message has been received. This callback is called every time\n\t * respoke.Client#message is fired.\n\t * @callback respoke.Client.onClientMessage\n\t * @param {respoke.Event} evt\n\t * @param {respoke.TextMessage} evt.message\n\t * @param {respoke.Group} [evt.group] - If the message is to a group we already know about,\n\t * this will be set. If null, the developer can use client.join({id: evt.message.header.channel}) to join\n\t * the group. From that point forward, Group#message will fire when a message is received as well. If\n\t * group is undefined instead of null, the message is not a group message at all.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Client} evt.target\n\t */\n\t/**\n\t * Receive notification that the client is receiving a call from a remote party. This callback is called every\n\t * time respoke.Client#call is fired.\n\t * @callback respoke.Client.onCall\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Call} evt.call\n\t * @param {respoke.Endpoint} evt.endpoint\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * Receive notification that the client is receiving a request for a direct connection from a remote party.\n\t * This callback is called every time respoke.Client#direct-connection is fired.\n\t * @callback respoke.Client.onDirectConnection\n\t * @param {respoke.Event} evt\n\t * @param {respoke.DirectConnection} evt.directConnection\n\t * @param {respoke.Endpoint} evt.endpoint\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * Receive notification Respoke has successfully connected to the cloud. This callback is called every time\n\t * respoke.Client#connect is fired.\n\t * @callback respoke.Client.onConnect\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Client} evt.target\n\t */\n\t/**\n\t * Receive notification Respoke has successfully disconnected from the cloud. This callback is called every time\n\t * respoke.Client#disconnect is fired.\n\t * @callback respoke.Client.onDisconnect\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Client} evt.target\n\t */\n\t/**\n\t * Receive notification Respoke has successfully reconnected to the cloud. This callback is called every time\n\t * respoke.Client#reconnect is fired.\n\t * @callback respoke.Client.onReconnect\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Client} evt.target\n\t */\n\t/**\n\t * Handle disconnection to the cloud successfully.\n\t * @callback respoke.Client.disconnectSuccessHandler\n\t */\n\t/**\n\t * Handle an error that resulted from a method call.\n\t * @callback respoke.Client.errorHandler\n\t * @params {Error} err\n\t */\n\t/**\n\t * Handle connection to the cloud successfully.\n\t * @callback respoke.Client.connectSuccessHandler\n\t */\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar respoke = __webpack_require__(13);\n\t\n\t/**\n\t * The purpose of the class is to allow multiple types of entities to expose presence functionality.\n\t *\n\t * Setting the presence on a client is provided via `client.setPresence({ presence: \"At lunch\" })`.\n\t *\n\t * @class respoke.Presentable\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.instanceId\n\t * @param {string} params.id\n\t * @returns {respoke.Presentable}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Presentable\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.Presentable\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Presentable';\n\t    /**\n\t     * Represents the presence status. Typically a string, but other types are supported.\n\t     * Defaults to `'unavailable'`.\n\t     *\n\t     * **Do not modify this directly** - it won't update presence with Respoke. Use `setPresence()`.\n\t     *\n\t     * @memberof! respoke.Presentable\n\t     * @name presence\n\t     * @type {string|number|object|Array}\n\t     * @private\n\t     */\n\t    that.presence = 'unavailable';\n\t\n\t    /**\n\t     * @memberof! respoke.Presentable\n\t     * @name client\n\t     * @type {respoke.Client}\n\t     * @private\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t\n\t    /**\n\t     * Set the presence on the object for this session.\n\t     * \n\t     * ```\n\t     * client.setPresence({ presence: 'busy' });\n\t     * ```\n\t     * \n\t     * While technically available on an Endpoint or Connection, this will not trigger\n\t     * any API changes. The changes will only be reflected locally.\n\t     *\n\t     * @memberof! respoke.Presentable\n\t     * @method respoke.Presentable.setPresence\n\t     * @param {object} params\n\t     * @param {string|number|object|Array} [params.presence=available]\n\t     * @param {string} params.connectionId\n\t     * @fires respoke.Presentable#presence\n\t     * @private\n\t     */\n\t    that.setPresence = function (params) {\n\t        var connection;\n\t        params = params || {};\n\t        params.presence = params.presence || 'available';\n\t        params.connectionId = params.connectionId || that.connectionId;\n\t\n\t        if (that.className === 'respoke.Client' || that.className === 'respoke.Connection') {\n\t            that.presence = params.presence;\n\t            if (that.className === 'respoke.Connection') {\n\t                that.getEndpoint().resolvePresence();\n\t            }\n\t        } else if (that.className === 'respoke.Endpoint') {\n\t            if (!params.connectionId) {\n\t                throw new Error(\"Can't set Endpoint presence without a connectionId.\");\n\t            }\n\t\n\t            connection = that.getConnection({connectionId: params.connectionId}) || client.getConnection({\n\t                connectionId: params.connectionId,\n\t                skipCreate: false,\n\t                endpointId: that.id\n\t            });\n\t\n\t            connection.presence = params.presence;\n\t            that.resolvePresence();\n\t        }\n\t\n\t        /**\n\t         * This event indicates that the presence for this endpoint has been updated.\n\t         * @event respoke.Presentable#presence\n\t         * @type {respoke.Event}\n\t         * @property {string|number|object|Array} presence\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Presentable} target\n\t         */\n\t        that.fire('presence', {\n\t            presence: that.presence\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Get the presence of a Presentable instance.\n\t     *\n\t     *      var billy = client.getEndpoint({ id: \"billychia\" });\n\t     *      var pres = billy.getPresence();\n\t     *      console.log('Billy is', pres); // \"Billy is available\"\n\t     *\n\t     * @memberof! respoke.Presentable\n\t     * @method respoke.Presentable.getPresence\n\t     * @returns {string|number|object|array} the current presence of this endpoint.\n\t     */\n\t    that.getPresence = function () {\n\t        return that.presence;\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.Presentable\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar respoke = __webpack_require__(13);\n\t\n\t/**\n\t * A `respoke.Connection` always belongs to an Endpoint.\n\t *\n\t * There is a distinction between Endpoint and Connection because an Endpoint can be authenticated\n\t * from multiple devices, browsers, or browser tabs. Each of these separate authentications is a Connection.\n\t * A Client can choose to interact with connections of the same endpoint in different ways.\n\t *\n\t * @constructor\n\t * @class respoke.Connection\n\t * @augments respoke.Presentable\n\t * @param {object} params\n\t * @param {string} params.id\n\t * @returns {respoke.Connection}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Connection\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.Presentable(params);\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name client\n\t     * @type {respoke.Client}\n\t     * @private\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t\n\t    /**\n\t     * The connection id.\n\t     * @memberof! respoke.Connection\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = that.id || that.connectionId;\n\t    if (!that.id) {\n\t        throw new Error(\"Can't make a connection without an id.\");\n\t    }\n\t    delete that.instanceId;\n\t    delete that.connectionId;\n\t\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.Connection\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Connection';\n\t\n\t    /**\n\t     * Send a message to this connection of an endpoint. If the endpoint has multiple connections,\n\t     * it will only receive the message at this connection.\n\t     *\n\t     *     connection.sendMessage({\n\t     *         message: \"PJ, put that PBR down!\"\n\t     *     });\n\t     *\n\t     * **Using callbacks** will disable promises.\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.sendMessage\n\t     * @param {object} params\n\t     * @param {string} params.message\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation\n\t     * of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        params = params || {};\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().sendMessage(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new screen sharing call. Screenshares are inherently unidirectional video only. This may change\n\t     * in the future when Chrome adds the ability to obtain screen video and microphone audio at the same time. For\n\t     * now, if you also need audio, place a second audio only call.\n\t     *\n\t     * The endpoint who calls `connection.startScreenShare` will be the one whose screen is shared. If you'd like to\n\t     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n\t     * not the sharer, it is recommened that you use `endpoint.sendMessage` to send a control message to the user\n\t     * whose screenshare is being requested so that user's app can call `connection.startScreenShare`.\n\t     *\n\t     * NOTE: At this time, screen sharing only works with Chrome, and Chrome requires a Chrome extension to\n\t     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension.\n\t     * Support for additional browsers will be added in the future.\n\t     *\n\t     *     connection.startScreenShare({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startScreenShare\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n\t     * and the remote party has received the video.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startScreenShare = function (params) {\n\t        client.verifyConnected();\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().startScreenShare(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new Call for a voice and/or video call this particular connection, only. The Call cannot be answered\n\t     * by another connection of this Endpoint.\n\t     *\n\t     *     connection.startCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {RTCConstraints} [params.constraints]\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startCall = function (params) {\n\t        params = params || {};\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().startCall(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new audio-only call.\n\t     *\n\t     *     connection.startAudioCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startAudioCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startAudioCall = function (params) {\n\t        client.verifyConnected();\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().startAudioCall(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new call with audio and video.\n\t     *\n\t     *     connection.startVideoCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startVideoCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has\n\t     * been hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startVideoCall = function (params) {\n\t        client.verifyConnected();\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().startVideoCall(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new DirectConnection with this particular connection, only. The DirectConnection cannot be answered\n\t     * by another connection of this Endpoint.  This method creates a new Call as well, attaching this\n\t     * DirectConnection to it for the purposes of creating a peer-to-peer link for sending data such as messages to\n\t     * the other endpoint. Information sent through a DirectConnection is not handled by the cloud infrastructure.\n\t     *\n\t     *     connection.startDirectConnection({\n\t     *         onOpen: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startDirectConnection\n\t     * @param {object} params\n\t     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess] - Success handler for this\n\t     * invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {respoke.DirectConnection.onStart} [params.onStart] - A callback for when setup of the direct\n\t     * connection begins. The direct connection will not be open yet.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - A callback for receiving notification of when\n\t     * the DirectConnection is open and ready to be used.\n\t     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n\t     * connection.\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - A callback for receiving notification of\n\t     * when the DirectConnection is closed and the two Endpoints are disconnected.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - A callback for receiving messages sent\n\t     * through the DirectConnection.\n\t     * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the\n\t     * request for a direct connection and setup begins.\n\t     * @returns {respoke.DirectConnection} The DirectConnection which can be used to send data and messages\n\t     * directly to the other endpoint.\n\t     */\n\t    that.startDirectConnection = function (params) {\n\t        var retVal;\n\t        var deferred;\n\t        params = params || {};\n\t\n\t        try {\n\t            client.verifyConnected();\n\t        } catch (err) {\n\t            deferred = respoke.Q.defer();\n\t            retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().startDirectConnection(params);\n\t    };\n\t\n\t    /**\n\t     * Get the Endpoint that this Connection belongs to.\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.getEndpoint\n\t     * @returns {respoke.Endpoint}\n\t     */\n\t    that.getEndpoint = function () {\n\t        return client.getEndpoint({\n\t            id: that.endpointId,\n\t            skipPresence: true\n\t        });\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.Connection\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar Q = __webpack_require__(21);\n\tvar respoke = __webpack_require__(13);\n\tvar log = respoke.log;\n\t\n\t/**\n\t * `respoke.Endpoint`s are users of a Respoke app.\n\t * An Endpoint can be a person in a browser or device, or an app using Respoke APIs from a server.\n\t * A Client can interact with endpoints through messages, audio or video calls, or direct connections.\n\t * An Endpoint may be authenticated from multiple devices to the same app (each of which is\n\t * represented by a Connection).\n\t *\n\t * ```\n\t * var jim = client.getEndpoint({ id: 'jim' });\n\t * ```\n\t *\n\t * @constructor\n\t * @class respoke.Endpoint\n\t * @augments respoke.Presentable\n\t * @param {object} params\n\t * @param {string} params.id\n\t * @param {string} params.instanceId\n\t * @param {respoke.client.resolvePresence} [params.resolvePresence] An optional function for resolving presence\n\t * for an endpoint.\n\t * @returns {respoke.Endpoint}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Endpoint\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.Presentable(params);\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name client\n\t     * @type {respoke.Client}\n\t     * @private\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name signalingChannel\n\t     * @type {respoke.SignalingChannel}\n\t     * @private\n\t     */\n\t    var signalingChannel = params.signalingChannel;\n\t\n\t    var addCall = params.addCall;\n\t\n\t    delete that.signalingChannel;\n\t    delete that.instanceId;\n\t    delete that.connectionId;\n\t    delete that.addCall;\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.Endpoint\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Endpoint';\n\t    /**\n\t     * A direct connection to this endpoint. This can be used to send direct messages.\n\t     * @memberof! respoke.Endpoint\n\t     * @name directConnection\n\t     * @type {respoke.DirectConnection}\n\t     */\n\t    that.directConnection = null;\n\t\n\t    /**\n\t     * Array of connections for this endpoint.\n\t     * @memberof! respoke.Endpoint\n\t     * @name connections\n\t     * @type {Array<respoke.Connection>}\n\t     */\n\t    that.connections = [];\n\t    client.listen('disconnect', function disconnectHandler() {\n\t        that.connections = [];\n\t    });\n\t\n\t    var resolveEndpointPresence = params.resolveEndpointPresence;\n\t    delete that.resolveEndpointPresence;\n\t\n\t    /**\n\t     * Send a message to the endpoint through the infrastructure.\n\t     *\n\t     * ```\n\t     * endpoint.sendMessage({\n\t     *     message: \"wassuuuuup\"\n\t     * });\n\t     * ```\n\t     *\n\t     * **Using callbacks** will disable promises.\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.sendMessage\n\t     * @param {object} params\n\t     * @param {string} params.message\n\t     * @param {string} [params.connectionId]\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of this\n\t     * method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this method\n\t     * only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        params = params || {};\n\t\n\t        promise = signalingChannel.sendMessage({\n\t            connectionId: params.connectionId,\n\t            message: params.message,\n\t            recipient: that\n\t        });\n\t\n\t        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Create a new audio-only call.\n\t     *\n\t     *     endpoint.startAudioCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startAudioCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startAudioCall = function (params) {\n\t        params = params || {};\n\t\n\t        params.constraints = respoke.convertConstraints(params.constraints, [{\n\t            video: false,\n\t            audio: true,\n\t            optional: [],\n\t            mandatory: {}\n\t        }]);\n\t\n\t        return that.startCall(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new call with audio and video.\n\t     *\n\t     *     endpoint.startVideoCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startVideoCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startVideoCall = function (params) {\n\t        params = params || {};\n\t\n\t        params.constraints = respoke.convertConstraints(params.constraints, [{\n\t            video: true,\n\t            audio: true,\n\t            optional: [],\n\t            mandatory: {}\n\t        }]);\n\t\n\t        return that.startCall(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new screen sharing call. Screenshares are inherently unidirectional video only. This may change\n\t     * in the future when Chrome adds the ability to obtain screen video and microphone audio at the same time. For\n\t     * now, if you also need audio, place a second audio only call.\n\t     *\n\t     * The endpoint who calls `endpoint.startScreenShare` will be the one whose screen is shared. If you'd like to\n\t     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n\t     * not the sharer, it is recommened that you use `endpoint.sendMessage` to send a control message to the user\n\t     * whose screenshare is being requested so that user's app can call `endpoint.startScreenShare`.\n\t     *\n\t     * NOTE: At this time, screen sharing only works with Chrome, and Chrome requires a Chrome extension to\n\t     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension.\n\t     * Support for additional browsers will be added in the future.\n\t     *\n\t     *     endpoint.startScreenShare({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startScreenShare\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n\t     * and the remote party has received the video.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {string} [params.source] - Pass in what type of mediaSource you want. If omitted, you'll have access\n\t     * to both the screen and windows. In firefox, you'll have access to the screen only.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startScreenShare = function (params) {\n\t        params = params || {};\n\t        params.target = 'screenshare';\n\t\n\t        if (typeof params.caller !== 'boolean') {\n\t            params.caller = true;\n\t        }\n\t\n\t        if (params.caller) {\n\t            params.constraints = respoke.getScreenShareConstraints(params);\n\t            params.sendOnly = true;\n\t        } else {\n\t            params.receiveOnly = true;\n\t        }\n\t\n\t        return that.startCall(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new call.\n\t     *\n\t     *     endpoint.startCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {Array<RTCConstraints>} [params.constraints]\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startCall = function (params) {\n\t        var call = null;\n\t        params = params || {};\n\t\n\t        params.constraints = respoke.convertConstraints(params.constraints, [{\n\t            video: true,\n\t            audio: true,\n\t            mandatory: {},\n\t            optional: []\n\t        }]);\n\t\n\t        // If they are requesting a screen share by constraints without having called startScreenShare\n\t        if (params.target !== 'screenshare' && params.constraints[0] &&\n\t                respoke.constraintsHasScreenShare(params.constraints[0])) {\n\t            return that.startScreenShare(params);\n\t        }\n\t\n\t        params.target = params.target || \"call\";\n\t\n\t        log.debug('Endpoint.call', params);\n\t        client.verifyConnected();\n\t        if (typeof params.caller !== 'boolean') {\n\t            params.caller = true;\n\t        }\n\t\n\t        if (!that.id) {\n\t            log.error(\"Can't start a call without endpoint ID!\");\n\t            return;\n\t        }\n\t\n\t        params.instanceId = instanceId;\n\t        params.remoteEndpoint = that;\n\t\n\t        params.signalOffer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'offer';\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = that;\n\t\n\t            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n\t        };\n\t        params.signalAnswer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'answer';\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = that;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n\t                signalParams.call.hangup({signal: false});\n\t            });\n\t        };\n\t        params.signalConnected = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.connectionId = signalParams.call.connectionId;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalParams.recipient = that;\n\t            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n\t                signalParams.call.hangup();\n\t            });\n\t        };\n\t        params.signalModify = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = that;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalingChannel.sendModify(signalParams).done();\n\t        };\n\t        params.signalCandidate = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = that;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalingChannel.sendCandidate(signalParams).done();\n\t        };\n\t        params.signalHangup = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = that;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalingChannel.sendHangup(signalParams).done();\n\t        };\n\t        params.signalReport = function (signalParams) {\n\t            log.debug(\"Sending debug report\", signalParams.report);\n\t            signalingChannel.sendReport(signalParams).done();\n\t        };\n\t\n\t        params.signalingChannel = signalingChannel;\n\t        call = respoke.Call(params);\n\t        addCall({call: call});\n\t        return call;\n\t    };\n\t\n\t    /**\n\t     * Create a new DirectConnection.  This method creates a new Call as well, attaching this DirectConnection to\n\t     * it for the purposes of creating a peer-to-peer link for sending data such as messages to the other endpoint.\n\t     * Information sent through a DirectConnection is not handled by the cloud infrastructure.  If there is already\n\t     * a direct connection open, this method will resolve the promise with that direct connection instead of\n\t     * attempting to create a new one.\n\t     *\n\t     *     endpoint.startDirectConnection({\n\t     *         onOpen: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startDirectConnection\n\t     * @param {object} params\n\t     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess] - Success handler for this\n\t     * invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {respoke.DirectConnection.onStart} [params.onStart] - A callback for when setup of the direct\n\t     * connection begins. The direct connection will not be open yet.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - A callback for receiving notification of when\n\t     * the DirectConnection is open and ready to be used.\n\t     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n\t     * connection.\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - A callback for receiving notification of\n\t     * when the DirectConnection is closed and the two Endpoints are disconnected.\n\t     * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the\n\t     * request for a direct connection and setup begins.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - A callback for receiving messages sent\n\t     * through the DirectConnection.\n\t     * @param {string} [params.connectionId] - An optional connection ID to use for this connection. This allows\n\t     * the connection to be made to a specific instance of an endpoint in the case that the same endpoint is logged\n\t     * in from multiple locations.\n\t     * @returns {Promise<respoke.DirectConnection>} The DirectConnection which can be used to send data and messages\n\t     * directly to the other endpoint.\n\t     */\n\t    that.startDirectConnection = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t        var call;\n\t\n\t        try {\n\t            client.verifyConnected();\n\t        } catch (err) {\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        if (that.directConnection || params.create === false) {\n\t            deferred.resolve(that.directConnection);\n\t            return retVal;\n\t        }\n\t\n\t        if (typeof params.caller !== 'boolean') {\n\t            params.caller = true;\n\t        }\n\t\n\t        if (!that.id) {\n\t            deferred.reject(new Error(\"Can't start a direct connection without endpoint ID!\"));\n\t            return retVal;\n\t        }\n\t\n\t        params.instanceId = instanceId;\n\t        params.remoteEndpoint = that;\n\t\n\t        params.signalOffer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'offer';\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t\n\t            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n\t        };\n\t        params.signalConnected = function (signalParams) {\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n\t                signalParams.call.hangup();\n\t            });\n\t        };\n\t        params.signalAnswer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t            signalParams.signalType = 'answer';\n\t            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n\t                signalParams.call.hangup({signal: false});\n\t            });\n\t        };\n\t        params.signalCandidate = function (signalParams) {\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t            signalingChannel.sendCandidate(signalParams).done();\n\t        };\n\t        params.signalHangup = function (signalParams) {\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t            signalingChannel.sendHangup(signalParams).done();\n\t        };\n\t        params.signalReport = function (signalParams) {\n\t            signalParams.report.target = 'directConnection';\n\t            log.debug(\"Not sending report\");\n\t            log.debug(signalParams.report);\n\t        };\n\t        params.needDirectConnection = true;\n\t        // Don't include audio in the offer SDP\n\t        params.offerOptions = {\n\t            mandatory: {\n\t                OfferToReceiveAudio: false\n\t            }\n\t        };\n\t\n\t        params.signalingChannel = signalingChannel;\n\t        call = respoke.Call(params);\n\t        addCall({call: call});\n\t        call.listen('direct-connection', function directConnectionHandler(evt) {\n\t            that.directConnection = evt.directConnection;\n\t            if (params.caller !== true) {\n\t                if (!client.hasListeners('direct-connection') &&\n\t                        !client.hasListeners('direct-connection') &&\n\t                        !call.hasListeners('direct-connection')) {\n\t                    that.directConnection.reject();\n\t                    deferred.reject(new Error(\"Got an incoming direct connection with no handlers to accept it!\"));\n\t                    return;\n\t                }\n\t\n\t                deferred.resolve(that.directConnection);\n\t                that.directConnection.listen('close', function closeHandler(evt) {\n\t                    that.directConnection = undefined;\n\t                }, true);\n\t            }\n\t        }, true);\n\t\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Find the presence out of all known connections with the highest priority (most availability)\n\t     * and set it as the endpoint's resolved presence.\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.resolvePresence\n\t     * @private\n\t     */\n\t    that.resolvePresence = function () {\n\t\n\t        var presenceList = that.connections.map(function (connection) {\n\t            return connection.presence;\n\t        });\n\t\n\t        if (resolveEndpointPresence !== undefined) {\n\t            that.presence = resolveEndpointPresence(presenceList);\n\t        } else {\n\t            var options = ['chat', 'available', 'away', 'dnd', 'xa', 'unavailable'];\n\t            var idList;\n\t\n\t            /*!\n\t             * Sort the connections array by the priority of the value of the presence of that\n\t             * connectionId. This will cause the first element in the list to be the id of the\n\t             * session with the highest priority presence so we can access it by the 0 index.\n\t             * TODO: If we don't really care about the sorting and only about the highest priority\n\t             * we could use Array.prototype.every to improve this algorithm.\n\t             */\n\t            idList = that.connections.sort(function sorter(a, b) {\n\t                var indexA = options.indexOf(a.presence);\n\t                var indexB = options.indexOf(b.presence);\n\t                // Move it to the end of the list if it isn't one of our accepted presence values\n\t                indexA = indexA === -1 ? 1000 : indexA;\n\t                indexB = indexB === -1 ? 1000 : indexB;\n\t                return indexA < indexB ? -1 : (indexB < indexA ? 1 : 0);\n\t            });\n\t\n\t            if (idList[0]) {\n\t                that.presence = idList[0].presence;\n\t            } else {\n\t                that.presence = 'unavailable';\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Get the Connection with the specified id. The connection ID is optional if only one connection exists.\n\t     *\n\t     *     var connection = endpoint.getConnection({\n\t     *         connectionId: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\"\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.getConnection\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} [params.connectionId]\n\t     * @return {respoke.Connection}\n\t     */\n\t    that.getConnection = function (params) {\n\t        var connection = null;\n\t        params = params || {};\n\t        if (that.connections.length === 1 &&\n\t                (!params.connectionId || that.connections[0] === params.connectionId)) {\n\t            return that.connections[0];\n\t        }\n\t\n\t        if (!params || !params.connectionId) {\n\t            throw new Error(\"Can't find a connection without the connectionId.\");\n\t        }\n\t\n\t        that.connections.every(function eachConnection(conn) {\n\t            if (conn.id === params.connectionId) {\n\t                connection = conn;\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t\n\t        return connection;\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.Endpoint\n\t/**\n\t * Handle messages sent to the logged-in user from this one Endpoint.  This callback is called every time\n\t * respoke.Endpoint#message fires.\n\t * @callback respoke.Endpoint.onMessage\n\t * @param {respoke.Event} evt\n\t * @param {respoke.TextMessage} evt.message - the message\n\t * @param {respoke.Endpoint} evt.target\n\t * @param {string} evt.name - the event name\n\t */\n\t/**\n\t * Handle presence notifications from this one Endpoint.  This callback is called every time\n\t * respoke.Endpoint#message fires.\n\t * @callback respoke.Endpoint.onPresence\n\t * @param {respoke.Event} evt\n\t * @param {string|number|object|Array} evt.presence - the Endpoint's presence\n\t * @param {respoke.Endpoint} evt.target\n\t * @param {string} evt.name - the event name\n\t */\n\t /**\n\t * Handle resolving presence for this endpoint\n\t * @callback respoke.Client.resolveEndpointPresence\n\t * @param {Array<object>} connectionPresence\n\t * @returns {object|string|number}\n\t */\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\t/**\n\t * A text message and the information needed to route it.\n\t * @class respoke.TextMessage\n\t * @constructor\n\t * @param {object} params\n\t * @param {string} [params.endpointId] - If sending, endpoint ID of the thing we're sending a message to.\n\t * @param {string} [params.connectionId] - If sending, connection ID of the thing we're sending a message to.\n\t * @param {string} [params.message] - If sending, a message to send\n\t * @param {object} [params.rawMessage] - If receiving, the parsed JSON we got from the server\n\t * @private\n\t * @returns {respoke.TextMessage}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = {};\n\t\n\t    /**\n\t     * Parse rawMessage and set attributes required for message delivery.\n\t     * @memberof! respoke.TextMessage\n\t     * @method respoke.TextMessage.parse\n\t     * @private\n\t     */\n\t    function parse() {\n\t        if (params.rawMessage) {\n\t            try {\n\t                that.endpointId = params.rawMessage.header.from;\n\t                that.connectionId = params.rawMessage.header.fromConnection;\n\t                that.timestamp = params.rawMessage.header.timestamp;\n\t            } catch (e) {\n\t                throw new Error(e);\n\t            }\n\t            that.message = params.rawMessage.message || params.rawMessage.body;\n\t            if (params.rawMessage.header.channel) {\n\t                that.recipient = params.rawMessage.header.channel;\n\t            }\n\t        } else {\n\t            try {\n\t                that.to = params.endpointId;\n\t                that.toConnection = params.connectionId;\n\t                that.requestConnectionReply = (params.requestConnectionReply === true);\n\t            } catch (e) {\n\t                throw new Error(e);\n\t            }\n\t            that.message = params.message;\n\t        }\n\t    }\n\t\n\t    parse();\n\t    return that;\n\t}; // End respoke.TextMessage\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\t/**\n\t * A signaling message and the information needed to route it.\n\t * @class respoke.SignalingMessage\n\t * @constructor\n\t * @param {object} params\n\t * @param {string} [params.fromEndpoint] - If sending, the endpoint ID of the recipient\n\t * @param {string} [params.fromConnection] - If sending, the connection ID of the recipient\n\t * @param {string} [params.connectionId] - The connectionId of the endpoint whose answer signal has been accepted.\n\t * @param {string} [params.signal] - If sending, a message to send\n\t * @param {respoke.Endpoint} [params.recipient]\n\t * @param {string} [params.signalType]\n\t * @param {string} [params.sessionId] - A globally unique ID to identify this call.\n\t * @param {string} [params.target] - Either 'call' or 'directConnection', TODO remove the need for this.\n\t * @param {string} [params.callerId] - Human readable caller ID. Not implemented.\n\t * @param {RTCSessionDescription} [params.sdp]\n\t * @param {Array<RTCIceCandidate>} [params.iceCandidates]\n\t * @param {object} [params.offering] - Object describing the media we're offering to send the remote party in a more\n\t * usable way than SDP. Not implemented.\n\t * @param {object} [params.requesting] - Object describing the media we're requesting from the remote party in a more\n\t * usable way than SDP. Not implemented.\n\t * @param {string} [params.reason] - Human readable reason for hanging up.\n\t * @param {string} [params.error] - String indicating that a previous signal was malformed or received in the wrong\n\t * state. Not implemented.\n\t * @param {string} [params.status] - \"Ringing\". Not implemented.\n\t * @param {object} [params.rawMessage] - If receiving, the parsed JSON we got from the server\n\t * @private\n\t * @returns {respoke.SignalingMessage}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = {};\n\t    /**\n\t     * Attributes without which we cannot build a signaling message.\n\t     * @memberof! respoke.SignalingMessage\n\t     * @name required\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var required = ['recipient', 'signalType', 'sessionId', 'target', 'signalId'];\n\t    /**\n\t     * Attributes which we will copy onto the signal if defined.\n\t     * @memberof! respoke.SignalingMessage\n\t     * @name required\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var allowed = [\n\t        'signalType', 'sessionId', 'sessionDescription', 'iceCandidates', 'offering', 'target', 'signalId', 'callerId',\n\t        'requesting', 'reason', 'error', 'status', 'connectionId', 'version'\n\t    ];\n\t\n\t    params.version = '1.0';\n\t\n\t    /**\n\t     * Parse rawMessage and set attributes required for message delivery.\n\t     * @memberof! respoke.SignalingMessage\n\t     * @method respoke.SignalingMessage.parse\n\t     * @private\n\t     */\n\t    function parse() {\n\t        if (params.rawMessage) {\n\t            try {\n\t                that = JSON.parse(params.rawMessage.body); // Incoming message\n\t            } catch (e) {\n\t                that = params.rawMessage.body;\n\t            }\n\t            that.fromType = params.rawMessage.header.fromType;\n\t            that.fromEndpoint = params.rawMessage.header.from;\n\t            that.fromConnection = params.rawMessage.header.fromConnection;\n\t            that.timestamp = params.rawMessage.header.timestamp;\n\t\n\t            if (!that.target) {\n\t                that.target = 'call';\n\t            }\n\t        } else {\n\t            required.forEach(function eachAttr(attr) {\n\t                if (params[attr] === 0 || !params[attr]) {\n\t                    throw new Error(\"Can't build a signaling without \" + attr);\n\t                }\n\t            });\n\t\n\t            allowed.forEach(function eachAttr(attr) {\n\t                if (params[attr] === 0 || params[attr]) {\n\t                    that[attr] = params[attr];\n\t                }\n\t            });\n\t        }\n\t    }\n\t\n\t    parse();\n\t    return that;\n\t}; // End respoke.SignalingMessage\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar Q = __webpack_require__(21);\n\tvar respoke = __webpack_require__(13);\n\t\n\t/**\n\t * A `respoke.Group` represents a collection of endpoints.\n\t *\n\t * There are methods to communicate with the endpoints at the group level and track\n\t * their presence in the group.\n\t *\n\t * @class respoke.Group\n\t * @augments respoke.EventEmitter\n\t * @constructor\n\t * @param {object} params\n\t * @param {string} params.instanceId\n\t * @param {respoke.Group.onJoin} params.onJoin - A callback to receive notifications every time a new\n\t * endpoint has joined the group. This callback does not get called when the client joins the group.\n\t * @param {respoke.Group.onMessage} params.onMessage - A callback to receive messages sent to the group from\n\t * remote endpoints.\n\t * @param {respoke.Group.onLeave} params.onLeave - A callback to receive notifications every time a new\n\t * endpoint has left the group. This callback does not get called when the client leaves the group.\n\t * @returns {respoke.Group}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t\n\t    var that = respoke.EventEmitter(params);\n\t    /**\n\t     * @memberof! respoke.Group\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var client = respoke.getClient(instanceId);\n\t\n\t    if (!that.id) {\n\t        throw new Error(\"Can't create a group without an ID.\");\n\t    }\n\t\n\t    /**\n\t     * Internal reference to the api signaling channel.\n\t     * @memberof! respoke.Group\n\t     * @name signalingChannel\n\t     * @type respoke.SignalingChannel\n\t     * @private\n\t     */\n\t    var signalingChannel = params.signalingChannel;\n\t    delete params.signalingChannel;\n\t\n\t    /**\n\t     * The connections to members of this group.\n\t     * @memberof! respoke.Group\n\t     * @name endpoints\n\t     * @type {array<respoke.Connection>}\n\t     */\n\t    that.connections = [];\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.Group\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Group';\n\t    that.listen('join', params.onJoin);\n\t    /**\n\t     * Indicates that a message has been sent to this group.\n\t     * @event respoke.Group#message\n\t     * @type {respoke.Event}\n\t     * @property {respoke.TextMessage} message\n\t     * @property {string} name - The event name.\n\t     * @property {respoke.Group} target\n\t     */\n\t    that.listen('message', params.onMessage);\n\t    that.listen('leave', params.onLeave);\n\t    client.listen('disconnect', function disconnectHandler() {\n\t        that.connections = [];\n\t    });\n\t\n\t    delete that.instanceId;\n\t    delete that.onMessage;\n\t    delete that.onPresence;\n\t    delete that.onJoin;\n\t    delete that.onLeave;\n\t\n\t    /**\n\t     * Join this group.\n\t     *\n\t     *     group.join().done(function () {\n\t     *         group.sendMessage({\n\t     *             message: \"Hey, ppl! I'm here!\"\n\t     *         });\n\t     *     }, function (err) {\n\t     *         // Couldn't join the group, possibly permissions error\n\t     *     });\n\t     *\n\t     * **Using callbacks** will disable promises.\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.join\n\t     * @return {Promise|undefined}\n\t     * @param {object} params\n\t     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @fires respoke.Client#join\n\t     */\n\t    that.join = function () {\n\t        var params = {\n\t            id: that.id\n\t        };\n\t        var promise;\n\t        var deferred;\n\t        var retVal;\n\t\n\t        try {\n\t            validateConnection();\n\t        } catch (err) {\n\t            deferred = Q.defer();\n\t            retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        promise = client.join(params);\n\t        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Leave this group. If this method is called multiple times synchronously, it will batch requests and\n\t     * only make one API call to Respoke.\n\t     *\n\t     *     group.leave({\n\t     *         onSuccess: function () {\n\t     *             // good riddance\n\t     *         },\n\t     *         onError: function (err) {\n\t     *             // Couldn't leave the group, possibly a permissions error\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.leave\n\t     * @param {object} params\n\t     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @return {Promise|undefined}\n\t     * @fires respoke.Client#leave\n\t     */\n\t    that.leave = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t\n\t        try {\n\t            validateConnection();\n\t            validateMembership();\n\t        } catch (err) {\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        signalingChannel.leaveGroup({\n\t            groupList: [that.id]\n\t        }).done(function successHandler() {\n\t            that.connections = [];\n\t            deferred.resolve();\n\t\n\t            /**\n\t             * This event is fired when the client leaves a group.\n\t             * @event respoke.Client#leave\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Group} group\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             * @private\n\t             */\n\t            client.fire('leave', {\n\t                group: that\n\t            });\n\t        }, function errorHandler(err) {\n\t            deferred.reject();\n\t        });\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Remove a Connection from a Group. This does not change the status of the remote Endpoint, it only changes the\n\t     * internal representation of the Group membership. This method should only be used internally.\n\t     * @private\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.removeMember\n\t     * @param {object} params\n\t     * @param {string} [params.connectionId] - Endpoint's connection id\n\t     * @fires respoke.Group#leave\n\t     */\n\t    that.removeMember = function (params) {\n\t        params = params || {};\n\t\n\t        try {\n\t            validateConnection();\n\t            validateMembership();\n\t        } catch (err) {\n\t            return;\n\t        }\n\t\n\t        if (!params.connectionId) {\n\t            throw new Error(\"Can't remove a member to the group without it's Connection id.\");\n\t        }\n\t\n\t        that.connections.every(function eachConnection(conn, index) {\n\t            if (conn.id === params.connectionId) {\n\t                that.connections.splice(index, 1);\n\t\n\t                /**\n\t                 * This event is fired when a member leaves a group the client is a member of.\n\t                 * @event respoke.Group#leave\n\t                 * @type {respoke.Event}\n\t                 * @property {respoke.Connection} connection - The connection that left the group.\n\t                 * @property {string} name - The event name.\n\t                 * @property {respoke.Group} target\n\t                 */\n\t                that.fire('leave', {\n\t                    connection: conn\n\t                });\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Return true if the logged-in user is a member of this group and false if not.\n\t     *\n\t     *     if (group.isJoined()) {\n\t     *         // I'm a member!\n\t     *     } else {\n\t     *         // Maybe join here\n\t     *     }\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.isJoined\n\t     * @returns {boolean}\n\t     */\n\t    that.isJoined = function () {\n\t        // connections array contains some connections and ours is among them.\n\t        return (that.connections.length > 0 && !that.connections.every(function (conn) {\n\t            return conn.id !== client.connectionId;\n\t        }));\n\t    };\n\t\n\t    /**\n\t     * Add a Connection to a group. This does not change the status of the remote Endpoint, it only changes the\n\t     * internal representation of the Group membership. This method should only be used internally.\n\t     * @memberof! respoke.Group\n\t     * @private\n\t     * @method respoke.Group.addMember\n\t     * @param {object} params\n\t     * @param {respoke.Connection} params.connection\n\t     * @fires respoke.Group#join\n\t     */\n\t    that.addMember = function (params) {\n\t        params = params || {};\n\t        var absent;\n\t\n\t        validateConnection();\n\t\n\t        if (!params.connection) {\n\t            throw new Error(\"Can't add a member to the group without it's Connection object.\");\n\t        }\n\t\n\t        absent = that.connections.every(function eachConnection(conn) {\n\t            return (conn.id !== params.connection.id);\n\t        });\n\t\n\t        if (absent) {\n\t            that.connections.push(params.connection);\n\t            if (params.skipEvent) {\n\t                return;\n\t            }\n\t\n\t            /**\n\t             * This event is fired when a member joins a Group that the currently logged-in endpoint is a member\n\t             * of.\n\t             * @event respoke.Group#join\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Connection} connection - The connection that joined the group.\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Group} target\n\t             */\n\t            that.fire('join', {\n\t                connection: params.connection\n\t            });\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Validate that the client is connected to the Respoke infrastructure.\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.validateConnection\n\t     * @private\n\t     */\n\t    function validateConnection() {\n\t        if (!signalingChannel || !signalingChannel.isConnected()) {\n\t            throw new Error(\"Can't complete request when not connected. Please reconnect!\");\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Validate that the client is a member of this group.\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.validateMembership\n\t     * @private\n\t     */\n\t    function validateMembership() {\n\t        if (!that.isJoined()) {\n\t            throw new Error(\"Not a member of this group anymore.\");\n\t        }\n\t    }\n\t\n\t    /**\n\t     *\n\t     * Send a message to all of the endpoints in the group.\n\t     *\n\t     *      var group = client.getGroup({ id: 'js-enthusiasts'});\n\t     *\n\t     *      group.sendMessage({\n\t     *          message: \"Cat on keyboard\",\n\t     *          onSuccess: function (evt) {\n\t     *              console.log('Message was sent');\n\t     *          }\n\t     *      });\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.sendMessage\n\t     * @param {object} params\n\t     * @param {string} params.message - The message.\n\t     * @param {function} params.onSuccess - Success handler indicating that the message was delivered.\n\t     * @param {function} params.onError - Error handler indicating that the message was not delivered.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        params = params || {};\n\t        params.id = that.id;\n\t        var promise;\n\t\n\t        try {\n\t            validateConnection();\n\t            validateMembership();\n\t        } catch (err) {\n\t            promise = Q.reject(err);\n\t        }\n\t\n\t        return respoke.handlePromise(promise ? promise : signalingChannel.publish(params),\n\t                params.onSuccess, params.onError);\n\t    };\n\t\n\t    /**\n\t     * Get group members\n\t     *\n\t     * Get an array containing all connections subscribed to the group. Accepts onSuccess or onError parameters,\n\t     * or it returns a promise that you can observe. An endpoint may have more than one connection subscribed to\n\t\t * a group, so if you're interested in unique endpoints, you may want to filter the connections by endpointId.\n\t     *\n\t     *     group.getMembers({\n\t     *         onSuccess: function (connections) {\n\t     *             connections.forEach(function (connection) {\n\t     *                 console.log(connection.endpoint.id);\n\t     *             });\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.getMembers\n\t     * @param {object} params\n\t     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Success handler for this invocation of this method only.\n\t     * @returns {Promise<Array>} A promise to an array of Connections.\n\t     */\n\t    that.getMembers = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t\n\t        try {\n\t            validateConnection();\n\t            validateMembership();\n\t        } catch (err) {\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        signalingChannel.getGroupMembers({\n\t            id: that.id\n\t        }).done(function successHandler(list) {\n\t            var endpointList = [];\n\t            list.forEach(function eachMember(params) {\n\t                var connection = client.getConnection({\n\t                    endpointId: params.endpointId,\n\t                    connectionId: params.connectionId,\n\t                    skipCreate: true\n\t                });\n\t\n\t                if (!connection) {\n\t                    // Create the connection\n\t                    connection = client.getConnection({\n\t                        endpointId: params.endpointId,\n\t                        connectionId: params.connectionId\n\t                    });\n\t                }\n\t\n\t                if (endpointList.indexOf(params.endpointId) === -1) {\n\t                    endpointList.push(params.endpointId);\n\t                }\n\t                that.addMember({\n\t                    connection: connection,\n\t                    skipEvent: true\n\t                });\n\t            });\n\t\n\t            deferred.resolve(that.connections);\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Experimental. Create a new conference call. The ID will be the group name. Only members of this group will\n\t     * be permitted to participate in the conference call.\n\t     *\n\t     *     group.startConferenceCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.startConferenceCall\n\t     * @private\n\t     * @param {object} params\n\t     * @arg {respoke.Conference.onJoin} [params.onJoin] - Callback for when a participant joins the conference.\n\t     * @arg {respoke.Conference.onLeave} [params.onLeave] - Callback for when a participant leaves the conference.\n\t     * @arg {respoke.Conference.onMessage} [params.onMessage] - Callback for when a message is sent to the conference.\n\t     * @param {respoke.Conference.onMute} [params.onMute] - Callback for when local or remote media is muted or unmuted.\n\t     * @arg {respoke.Conference.onTopic} [params.onTopic] - Callback for the conference topic changes.\n\t     * @arg {respoke.Conference.onPresenter} [params.onPresenter] - Callback for when the presenter changes.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n\t     * and the remote party has received the video.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @returns {respoke.Conference}\n\t     */\n\t    that.startConferenceCall = function (params) {\n\t        var conference = null;\n\t        params = params || {};\n\t        params.conferenceId = that.id;\n\t\n\t        conference = client.startConferenceCall(params);\n\t        return conference;\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.Group\n\t/**\n\t * Receive notification that an endpoint has joined this group. This callback is called everytime\n\t * respoke.Group#join is fired.\n\t * @callback respoke.Group.onJoin\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Connection} evt.connection\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Group} evt.target\n\t */\n\t/**\n\t * Receive notification that an endpoint has left this group. This callback is called everytime\n\t * respoke.Group#leave is fired.\n\t * @callback respoke.Group.onLeave\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Connection} evt.connection\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Group} evt.target\n\t */\n\t/**\n\t * Receive notification that a message has been received to a group. This callback is called every time\n\t * respoke.Group#message is fired.\n\t * @callback respoke.Group.onMessage\n\t * @param {respoke.Event} evt\n\t * @param {respoke.TextMessage} evt.message\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Group} evt.target\n\t */\n\t/**\n\t * Get a list of the Connections which are members of this Group.\n\t * @callback respoke.Group.connectionsHandler\n\t * @param {Array<respoke.Connection>} connections\n\t */\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar Q = __webpack_require__(21);\n\tvar io = __webpack_require__(24);\n\tvar respoke = __webpack_require__(13);\n\tvar log = respoke.log;\n\t\n\t/**\n\t * Returns a timestamp, measured in milliseconds.\n\t *\n\t * This method will use high resolution time, if available. Otherwise it falls back to just\n\t * using the wall clock.\n\t *\n\t * @return {number} Number of milliseconds that have passed since some point in the past.\n\t * @private\n\t */\n\tvar now;\n\tvar performance;\n\tif (performance && performance.now) {\n\t    now = performance.now.bind(performance);\n\t} else if (Date.now) {\n\t    now = Date.now.bind(Date);\n\t} else {\n\t    now = function () {\n\t        return new Date().getTime();\n\t    };\n\t}\n\t\n\t/**\n\t * Container for holding requests that are currently waiting on responses.\n\t * @returns {PendingRequests}\n\t * @private\n\t * @constructor\n\t */\n\tvar PendingRequests = function () {\n\t    /**\n\t     * Pending requests.\n\t     * @private\n\t     * @type {Array}\n\t     */\n\t    var contents = [];\n\t    /**\n\t     * Counter to provide the next id.\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var counter = 0;\n\t    var that = {};\n\t\n\t    /**\n\t     * Add a new pending request.\n\t     *\n\t     * @memberof PendingRequests\n\t     * @param obj\n\t     * @returns {*} The key to use for the `remove` method.\n\t     */\n\t    that.add = function (obj) {\n\t        contents[counter] = obj;\n\t        counter++;\n\t        return counter;\n\t    };\n\t\n\t    /**\n\t     * Remove a pending request.\n\t     *\n\t     * @param {*} key Key returned from `add` method.\n\t     */\n\t    that.remove = function (key) {\n\t        delete contents[key];\n\t    };\n\t\n\t    /**\n\t     * Disposes of any currently pending requests, synchronously invoking the provided function on\n\t     * each.\n\t     *\n\t     * @param {function} [fn] Callback for pending requests.\n\t     */\n\t    that.reset = function (fn) {\n\t        if (fn) {\n\t            contents.forEach(fn);\n\t        }\n\t        contents = [];\n\t    };\n\t\n\t    return that;\n\t};\n\t\n\t/**\n\t * The purpose of this class is to make a method call for each API call\n\t * to the backend REST interface.  This class takes care of App authentication, websocket connection,\n\t * Endpoint authentication, and all App interactions thereafter.  Almost all methods return a Promise.\n\t * @class respoke.SignalingChannel\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.instanceId - client id\n\t * @private\n\t * @returns {respoke.SignalingChannel}\n\t */\n\tmodule.exports = function (params) {\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name className\n\t     * @type {string}\n\t     * @private\n\t     */\n\t    that.className = 'respoke.SignalingChannel';\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name client\n\t     * @private\n\t     * @type {respoke.Client}\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name socket\n\t     * @private\n\t     * @type {Socket.io.Socket}\n\t     */\n\t    var socket = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name clientSettings\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var clientSettings = params.clientSettings;\n\t    delete that.clientSettings;\n\t    clientSettings.baseURL = clientSettings.baseURL || 'https://api.respoke.io';\n\t    /**\n\t     * A map to avoid duplicate endpoint presence registrations.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name presenceRegistered\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var presenceRegistered = {};\n\t    /**\n\t     * A reference to the private function Client.actuallyConnect that gets set in SignalingChannel.open() so we\n\t     * don't have to make it public.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name actuallyConnect\n\t     * @private\n\t     * @type {function}\n\t     */\n\t    var actuallyConnect = null;\n\t    /**\n\t     * Set of promises for any pending requests on the WebSocket.\n\t     * @private\n\t     * @type {PendingRequests}\n\t     */\n\t    var pendingRequests = PendingRequests();\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name reconnectTimeout\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var reconnectTimeout = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name maxReconnectTimeout\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var maxReconnectTimeout = 5 * 60 * 1000;\n\t    /**\n\t     * Rejects a message if the body size is greater than this. It is enforced servcer side, so changing this\n\t     * won't make the bodySizeLimit any bigger, this just gives you a senseable error if it's too big.\n\t     * @memberof! respoke.signalingChannel\n\t     * @name bodySizeLimit\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var bodySizeLimit = 20000;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name appId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var appId = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name endpointId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var endpointId = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name token\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var token = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name appToken\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var appToken = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name xhr\n\t     * @private\n\t     * @type {XMLHttpRequest}\n\t     */\n\t    var xhr = new XMLHttpRequest();\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name routingMethods\n\t     * @private\n\t     * @type {object}\n\t     * @desc The methods contained in this object are statically defined methods that are called by constructing\n\t     * their names dynamically. 'do' + $className + $signalType == 'doCallOffer', et. al.\n\t     */\n\t    var routingMethods = {};\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name handlerQueue\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var handlerQueue = {\n\t        'message': [],\n\t        'signal': [],\n\t        'presence': []\n\t    };\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name errors\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var errors = {\n\t        400: \"Can't perform this action: missing or invalid parameters.\",\n\t        401: \"Can't perform this action: not authenticated.\",\n\t        403: \"Can't perform this action: not authorized.\",\n\t        404: \"Item not found.\",\n\t        409: \"Can't perform this action: item in the wrong state.\",\n\t        429: \"API rate limit was exceeded.\",\n\t        500: \"Can't perform this action: server problem.\"\n\t    };\n\t\n\t    /**\n\t     * Indicate whether the signaling channel has a valid connection to Respoke.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.isConnected\n\t     * @return {boolean}\n\t     */\n\t    that.isConnected = function () {\n\t        return !!(socket && socket.socket.connected);\n\t    };\n\t\n\t    /**\n\t     * Indicate whether the signaling channel is currently waiting on a websocket to connect.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.isConnecting\n\t     * @private\n\t     * @return {boolean}\n\t     */\n\t    function isConnecting() {\n\t        return !!(socket && socket.socket.connecting);\n\t    }\n\t\n\t    /**\n\t     * Get the call debug preference.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.isSendingReport\n\t     * @private\n\t     * @return {boolean}\n\t     */\n\t    that.isSendingReport = function (params) {\n\t        return clientSettings.enableCallDebugReport;\n\t    };\n\t\n\t    /**\n\t     * Open a connection to the REST API and validate the app, creating a session token.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.open\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} [params.token] - The Endpoint's auth token\n\t     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @return {Promise}\n\t     */\n\t    that.open = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug('SignalingChannel.open', params, clientSettings);\n\t        token = params.token || token;\n\t        actuallyConnect = typeof params.actuallyConnect === 'function' ? params.actuallyConnect : actuallyConnect;\n\t\n\t        Q.fcall(function tokenPromise() {\n\t            if (clientSettings.developmentMode === true && clientSettings.appId && params.endpointId) {\n\t                return that.getToken({\n\t                    appId: clientSettings.appId,\n\t                    endpointId: params.endpointId\n\t                });\n\t            }\n\t            return null;\n\t        }).then(function successHandler(newToken) {\n\t            token = newToken || token;\n\t            return doOpen({token: token});\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t            log.debug('client', client);\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Get a developer mode token for an endpoint. App must be in developer mode.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getToken\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @return {Promise<String>}\n\t     */\n\t    that.getToken = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug('SignalingChannel.getToken', params);\n\t\n\t        var callParams = {\n\t            path: '/v1/tokens',\n\t            httpMethod: 'POST',\n\t            parameters: {\n\t                appId: clientSettings.appId,\n\t                endpointId: params.endpointId,\n\t                ttl: 60 * 60 * 6\n\t            }\n\t        };\n\t\n\t        call(callParams).done(function (response) {\n\t            if (response.code === 200 && response.result && response.result.tokenId) {\n\t                token = response.result.tokenId;\n\t                deferred.resolve(response.result.tokenId);\n\t                return;\n\t            }\n\t            deferred.reject(buildResponseError(response, \"Couldn't get a developer mode token: \" + response.error));\n\t        }, function (err) {\n\t            deferred.reject(new Error(\"Couldn't get a developer mode token: \" + err.message));\n\t        });\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Open a connection to the REST API and validate the app, creating a session token.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.doOpen\n\t     * @param {object} params\n\t     * @param {string} params.token - The Endpoint's auth token\n\t     * @return {Promise}\n\t     * @private\n\t     */\n\t    function doOpen(params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug('SignalingChannel.doOpen', params);\n\t\n\t        if (!params.token) {\n\t            deferred.reject(new Error(\"Can't open connection to Respoke without a token.\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        call({\n\t            path: '/v1/session-tokens',\n\t            httpMethod: 'POST',\n\t            parameters: {\n\t                tokenId: params.token\n\t            }\n\t        }).done(function (response) {\n\t            if (response.code === 200) {\n\t                appToken = response.result.token;\n\t                deferred.resolve();\n\t                log.debug(\"Signaling connection open to\", clientSettings.baseURL);\n\t            } else {\n\t                deferred.reject(buildResponseError(response, \"Couldn't authenticate app: \" + response.error));\n\t            }\n\t        }, function (err) {\n\t            log.error(\"Network call failed:\", err.message);\n\t            deferred.reject(new Error(\"Couldn't authenticate app: \" + err.message));\n\t        });\n\t\n\t        return deferred.promise;\n\t    }\n\t\n\t    /**\n\t     * Close a connection to the REST API. Invalidate the session token.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.close\n\t     * @private\n\t     * @return {Promise}\n\t     */\n\t    that.close = function () {\n\t        var deferred = Q.defer();\n\t\n\t        wsCall({\n\t            path: '/v1/connections/%s/',\n\t            httpMethod: 'DELETE',\n\t            objectId: client.endpointId\n\t        }).fin(function finallyHandler() {\n\t            return call({\n\t                path: '/v1/session-tokens',\n\t                httpMethod: 'DELETE'\n\t            });\n\t        }).fin(function finallyHandler() {\n\t            if (socket) {\n\t                socket.removeAllListeners();\n\t                socket.disconnect();\n\t            }\n\t            deferred.resolve();\n\t        }).done();\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Generate and send a presence message representing the client's current status. This triggers\n\t     * the server to send the client's endpoint's presence.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendPresence\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string|number|object|Array} [params.presence=available]\n\t     * @param {string} [params.status] - Non-enumeration human-readable status.\n\t     * @param {string} [params.show] - I can't remember what this is.\n\t     * @returns {Promise}\n\t     */\n\t    that.sendPresence = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug(\"Signaling sendPresence\");\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            path: '/v1/presence',\n\t            httpMethod: 'POST',\n\t            parameters: {\n\t                'presence': {\n\t                    show: params.show,\n\t                    'status': params.status,\n\t                    type: params.presence || \"available\"\n\t                }\n\t            }\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Get or create a group in the infrastructure.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getGroup\n\t     * @private\n\t     * @returns {Promise<respoke.Group>}\n\t     * @param {object} params\n\t     * @param {string} params.name\n\t     */\n\t    that.getGroup = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug('signalingChannel.getGroup');\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            httpMethod: 'POST',\n\t            path: '/v1/channels/',\n\t            parameters: {\n\t                name: params.name\n\t            }\n\t        }).then(function successHandler(group) {\n\t            deferred.resolve(group);\n\t        }, function errorHandler(err) {\n\t            // Group was already created, just return back the same params we were given.\n\t            deferred.resolve({id: params.name});\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Leave a group. In order to aggregate subsequent repeated requests, this function, when called synchronously,\n\t     * will continue to accumulate group ids until the next tick of the event loop, when the request will be\n\t     * issued. The same instance of Promise is returned each time.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @private\n\t     * @method respoke.SignalingChannel.leaveGroup\n\t     * @returns {Promise}\n\t     * @param {object} params\n\t     * @param {array} params.groupList\n\t     */\n\t    that.leaveGroup = (function () {\n\t        var groups = {};\n\t        var deferred = Q.defer();\n\t\n\t        return function (params) {\n\t            params = params || {};\n\t            params.groupList = params.groupList || [];\n\t\n\t            var toRun = (Object.keys(groups).length === 0);\n\t\n\t            if (!that.isConnected()) {\n\t                deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t                return deferred.promise;\n\t            }\n\t\n\t            params.groupList.forEach(function (id) {\n\t                if (typeof id === 'string') {\n\t                    groups[id] = true;\n\t                }\n\t            });\n\t\n\t            if (!toRun) {\n\t                return deferred.promise;\n\t            }\n\t\n\t            setTimeout(function () {\n\t                // restart accumulation\n\t                var groupList = Object.keys(groups);\n\t                groups = {};\n\t                var saveDeferred = deferred;\n\t                deferred = Q.defer();\n\t\n\t                if (groupList.length === 0) {\n\t                    saveDeferred.resolve();\n\t                    return;\n\t                }\n\t\n\t                wsCall({\n\t                    path: '/v1/groups/',\n\t                    parameters: {\n\t                        groups: groupList\n\t                    },\n\t                    httpMethod: 'DELETE'\n\t                }).done(function successHandler() {\n\t                    saveDeferred.resolve();\n\t                }, function errorHandler(err) {\n\t                    saveDeferred.reject(err);\n\t                });\n\t            });\n\t            return deferred.promise;\n\t        };\n\t    })();\n\t\n\t    /**\n\t     * Join a group. In order to aggregate subsequent repeated requests, this function, when called synchronously,\n\t     * will continue to accumulate group ids until the next tick of the event loop, when the request will be\n\t     * issued. The same instance of Promise is returned each time.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.joinGroup\n\t     * @private\n\t     * @returns {Promise}\n\t     * @param {object} params\n\t     * @param {array} params.groupList\n\t     */\n\t    that.joinGroup = (function () {\n\t        var groups = {};\n\t        var deferred = Q.defer();\n\t\n\t        return function (params) {\n\t            params = params || {};\n\t            params.groupList = params.groupList || [];\n\t\n\t            var toRun = (Object.keys(groups).length === 0);\n\t\n\t            if (!that.isConnected()) {\n\t                deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t                return deferred.promise;\n\t            }\n\t\n\t            params.groupList.forEach(function (id) {\n\t                if (typeof id === 'string') {\n\t                    groups[id] = true;\n\t                }\n\t            });\n\t\n\t            if (!toRun) {\n\t                return deferred.promise;\n\t            }\n\t\n\t            setTimeout(function () {\n\t                // restart accumulation\n\t                var groupList = Object.keys(groups);\n\t                groups = {};\n\t                var saveDeferred = deferred;\n\t                deferred = Q.defer();\n\t\n\t                if (groupList.length === 0) {\n\t                    saveDeferred.resolve();\n\t                    return;\n\t                }\n\t\n\t                wsCall({\n\t                    path: '/v1/groups/',\n\t                    parameters: {\n\t                        groups: groupList\n\t                    },\n\t                    httpMethod: 'POST'\n\t                }).done(function successHandler() {\n\t                    saveDeferred.resolve();\n\t                }, function errorHandler(err) {\n\t                    saveDeferred.reject(err);\n\t                });\n\t            });\n\t            return deferred.promise;\n\t        };\n\t    })();\n\t\n\t    /**\n\t     * Publish a message to a group.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @private\n\t     * @method respoke.SignalingChannel.publish\n\t     * @returns {Promise}\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     * @param {string} params.message\n\t     */\n\t    that.publish = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var message = respoke.TextMessage({\n\t            endpointId: params.id,\n\t            message: params.message\n\t        });\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            path: '/v1/channels/%s/publish/',\n\t            objectId: params.id,\n\t            httpMethod: 'POST',\n\t            parameters: message\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Register as an observer of presence for the specified endpoint ids. In order to aggregate subsequent repeated\n\t     * requests, this function, when called synchronously, will continue to accumulate endpoint ids until the next\n\t     * tick of the event loop, when the request will be issued. The same instance of Promise is returned each time.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.registerPresence\n\t     * @private\n\t     * @param {object} params\n\t     * @param {Array<string>} params.endpointList\n\t     * @returns {Promise}\n\t     */\n\t    that.registerPresence = (function () {\n\t        var endpoints = {};\n\t        var deferred = Q.defer();\n\t\n\t        return function (params) {\n\t            params = params || {};\n\t            params.endpointList = params.endpointList || [];\n\t            var toRun = (Object.keys(endpoints).length === 0);\n\t\n\t            if (!that.isConnected()) {\n\t                return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            }\n\t\n\t            params.endpointList.forEach(function (ep) {\n\t                if (typeof ep === 'string' && presenceRegistered[ep] !== true) {\n\t                    endpoints[ep] = true;\n\t                }\n\t            });\n\t\n\t            if (!toRun) {\n\t                return deferred.promise;\n\t            }\n\t\n\t            setTimeout(function () {\n\t                // restart accumulation\n\t                var endpointList = Object.keys(endpoints);\n\t                endpoints = {};\n\t                var saveDeferred = deferred;\n\t                deferred = Q.defer();\n\t\n\t                if (endpointList.length === 0) {\n\t                    saveDeferred.resolve();\n\t                    return;\n\t                }\n\t\n\t                wsCall({\n\t                    httpMethod: 'POST',\n\t                    path: '/v1/presenceobservers',\n\t                    parameters: {\n\t                        endpointList: endpointList\n\t                    }\n\t                }).done(function successHandler() {\n\t                    params.endpointList.forEach(function eachId(id) {\n\t                        presenceRegistered[id] = true;\n\t                    });\n\t                    saveDeferred.resolve();\n\t                }, function (err) {\n\t                    saveDeferred.reject(err);\n\t                });\n\t                // We could even add a tiny delay like 10ms if we want to get more conservative and\n\t                // catch asychronous calls to client.getEndpoint() and other methods which call\n\t                // this method.\n\t            });\n\t\n\t            return deferred.promise;\n\t        };\n\t    })();\n\t\n\t    /**\n\t     * Join a group.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getGroupMembers\n\t     * @private\n\t     * @returns {Promise<Array>}\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     */\n\t    that.getGroupMembers = function (params) {\n\t        var deferred = Q.defer();\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (!params.id) {\n\t            deferred.reject(new Error(\"Can't get group's endpoints without group ID.\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        return wsCall({\n\t            path: '/v1/channels/%s/subscribers/',\n\t            objectId: params.id,\n\t            httpMethod: 'GET'\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Send a chat message.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendMessage\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.SignalingMessage} params.message - The string text message to send.\n\t     * @param {respoke.Endpoint} params.recipient\n\t     * @param {string} [params.connectionId]\n\t     * @returns {Promise}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var message = respoke.TextMessage({\n\t            endpointId: params.recipient.id,\n\t            connectionId: params.connectionId,\n\t            message: params.message\n\t        });\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            path: '/v1/messages',\n\t            httpMethod: 'POST',\n\t            parameters: message\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Send an ACK signal to acknowlege reception of a signal.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendACK\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.SignalingMessage} params.signal\n\t     * @return {Promise}\n\t     */\n\t    that.sendACK = function (params) {\n\t        var endpoint;\n\t        params = params || {};\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        if (!params.signal) {\n\t            return Q.reject(new Error(\"Can't send ACK, no signal was given.\"));\n\t        }\n\t\n\t        endpoint = client.getEndpoint({\n\t            id: params.signal.fromEndpoint,\n\t            skipPresence: true\n\t        });\n\t        if (!endpoint) {\n\t            return Q.reject(new Error(\"Can't send ACK, can't get endpoint.\"));\n\t        }\n\t\n\t        return that.sendSignal({\n\t            recipient: endpoint,\n\t            signalType: 'ack',\n\t            signalId: params.signal.signalId,\n\t            sessionId: params.signal.sessionId,\n\t            target: params.signal.target,\n\t            ackedSignalType: params.signal.signalType\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Send a signaling message.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendSignal\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Call} [params.call] - For getting the sessionId & connectionId. Not required for 'ack'.\n\t     * @return {Promise}\n\t     */\n\t    that.sendSignal = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var signal;\n\t        var to;\n\t        var toConnection;\n\t        var toType;\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (params.call) {\n\t            params.sessionId = params.call.id;\n\t            if (params.call.connectionId) { // the recipient's connectionId\n\t                params.connectionId = params.call.connectionId;\n\t            }\n\t        }\n\t\n\t        to = params.recipient.id;\n\t        toConnection = params.connectionId;\n\t        toType = params.toType || 'web';\n\t\n\t        try {\n\t            params.signalId = respoke.makeGUID();\n\t            // This will strip off non-signaling attributes.\n\t            signal = respoke.SignalingMessage(params);\n\t        } catch (e) {\n\t            deferred.reject(e);\n\t            return deferred.promise;\n\t        }\n\t\n\t        params = {\n\t            signal: JSON.stringify(signal),\n\t            to: to,\n\t            toConnection: toConnection,\n\t            toType: toType\n\t        };\n\t\n\t        wsCall({\n\t            path: '/v1/signaling',\n\t            httpMethod: 'POST',\n\t            parameters: {\n\t                signal: JSON.stringify(signal),\n\t                to: to,\n\t                toConnection: toConnection,\n\t                toType: toType\n\t            }\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Send an ICE candidate.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendCandidate\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @param {string} [params.connectionId]\n\t     * @param {Array<RTCIceCandidate>} params.iceCandidates - An array of ICE candidate.\n\t     * @return {Promise}\n\t     */\n\t    that.sendCandidate = function (params) {\n\t        params = params || {};\n\t        params.signalType = 'iceCandidates';\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        return that.sendSignal(params);\n\t    };\n\t\n\t    /**\n\t     * Send an SDP.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendSDP\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @param {string} [params.connectionId]\n\t     * @param {RTCSessionDescription} params.sessionDescription - An SDP to JSONify and send.\n\t     * @return {Promise}\n\t     */\n\t    that.sendSDP = function (params) {\n\t        params = params || {};\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        if (['offer', 'answer'].indexOf(params.signalType) === -1) {\n\t            return Q.reject(\"Not an SDP type signal.\");\n\t        }\n\t\n\t        return that.sendSignal(params);\n\t    };\n\t\n\t    /**\n\t     * Send a call report to the cloud infrastructure.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendReport\n\t     * @private\n\t     * @param {object} params\n\t     * @todo TODO document the params.\n\t     * @return {Promise}\n\t     */\n\t    that.sendReport = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var message = {\n\t            debugData: params\n\t        };\n\t\n\t        if (!clientSettings.enableCallDebugReport) {\n\t            log.debug('not sending call debugs - disabled');\n\t            deferred.resolve();\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            path: '/v1/call-debugs',\n\t            httpMethod: 'POST',\n\t            parameters: message\n\t        }).done(function () {\n\t            deferred.resolve();\n\t        }, function (err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Send a message hanging up the WebRTC session.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendHangup\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @param {string} [params.connectionId]\n\t     * @param {string} params.reason - The reason the session is being hung up.\n\t     * @return {Promise}\n\t     */\n\t    that.sendHangup = function (params) {\n\t        params = params || {};\n\t        params.signalType = 'bye';\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        return that.sendSignal(params);\n\t    };\n\t\n\t    /**\n\t     * Send a message to all connection ids indicating we have negotiated a call with one connection.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendConnected\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @return {Promise}\n\t     */\n\t    that.sendConnected = function (params) {\n\t        params = params || {};\n\t        params.signalType = 'connected';\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        return that.sendSignal(params);\n\t    };\n\t\n\t    /**\n\t     * Send a message to the remote party indicating a desire to renegotiate media.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendModify\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @param {string} params.action - The state of the modify request, one of: 'initiate', 'accept', 'reject'\n\t     * @return {Promise}\n\t     */\n\t    that.sendModify = function (params) {\n\t        params = params || {};\n\t        params.signalType = 'modify';\n\t\n\t        if (['initiate', 'accept', 'reject'].indexOf(params.action) === -1) {\n\t            return Q.reject(\"No valid action in modify signal.\");\n\t        }\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        return that.sendSignal(params);\n\t    };\n\t\n\t    /**\n\t     * Uppercase the first letter of the word.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.firstUpper\n\t     * @private\n\t     */\n\t    function firstUpper(str) {\n\t        return str[0].toUpperCase() + str.slice(1);\n\t    }\n\t\n\t    /**\n\t     * Route different types of signaling messages via events.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routeSignal\n\t     * @private\n\t     * @param {respoke.SignalingMessage} message - A message to route\n\t     * @fires respoke.Call#offer\n\t     * @fires respoke.Call#connected\n\t     * @fires respoke.Call#answer\n\t     * @fires respoke.Call#iceCandidates\n\t     * @fires respoke.Call#hangup\n\t     * @fires respoke.DirectConnection#offer\n\t     * @fires respoke.DirectConnection#connected\n\t     * @fires respoke.DirectConnection#answer\n\t     * @fires respoke.DirectConnection#iceCandidates\n\t     * @fires respoke.DirectConnection#hangup\n\t     */\n\t    that.routeSignal = function (signal) {\n\t        var target = null;\n\t        var method = 'do';\n\t\n\t        if (signal.signalType !== 'iceCandidates') { // Too many of these!\n\t            log.debug(signal.signalType, signal);\n\t        }\n\t\n\t        if (signal.target === undefined) {\n\t            throw new Error(\"target undefined\");\n\t        }\n\t\n\t        // Only create if this signal is an offer.\n\t        Q.fcall(function makePromise() {\n\t            var endpoint;\n\t            /*!\n\t             * This will return calls regardless of whether they are associated\n\t             * with a direct connection or not, and it will create a call if no\n\t             * call is found and this signal is an offer. Direct connections get\n\t             * created in the next step.\n\t             */\n\t            target = client.getCall({\n\t                id: signal.sessionId,\n\t                endpointId: signal.fromEndpoint,\n\t                target: signal.target,\n\t                conferenceId: signal.conferenceId,\n\t                type: signal.fromType,\n\t                create: (signal.target !== 'directConnection' && signal.signalType === 'offer'),\n\t                callerId: signal.callerId\n\t            });\n\t            if (target) {\n\t                return target;\n\t            }\n\t\n\t            if (signal.target === 'directConnection') {\n\t                // return a promise\n\t                endpoint = client.getEndpoint({\n\t                    id: signal.fromEndpoint,\n\t                    skipPresence: true\n\t                });\n\t\n\t                if (endpoint.directConnection && endpoint.directConnection.call.id === signal.sessionId) {\n\t                    return endpoint.directConnection;\n\t                }\n\t\n\t                return endpoint.startDirectConnection({\n\t                    id: signal.sessionId,\n\t                    create: (signal.signalType === 'offer'),\n\t                    caller: (signal.signalType !== 'offer')\n\t                });\n\t            }\n\t        }).done(function successHandler(target) {\n\t            // target might be null, a Call, or a DirectConnection.\n\t            if (target) {\n\t                target = target.call || target;\n\t            }\n\t            if (!target || target.id !== signal.sessionId) {\n\t                // orphaned signal\n\t                log.warn(\"Couldn't associate signal with a call.\", signal);\n\t                return;\n\t            }\n\t\n\t            method += firstUpper(signal.signalType);\n\t            routingMethods[method]({\n\t                call: target,\n\t                signal: signal\n\t            });\n\t        }, null);\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doOffer\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-offer\n\t     */\n\t    routingMethods.doOffer = function (params) {\n\t        params.call.connectionId = params.signal.fromConnection;\n\t        /**\n\t         * Send the `offer` signal into the Call.\n\t         * @event respoke.Call#signal-offer\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-offer', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doConnected\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-connected\n\t     */\n\t    routingMethods.doConnected = function (params) {\n\t        /**\n\t         * Send the `connected` signal into the Call.\n\t         * @event respoke.Call#signal-connected\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-connected', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.dModify\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-modify\n\t     */\n\t    routingMethods.doModify = function (params) {\n\t        /**\n\t         * Send the `modify` signal into the Call.\n\t         * @event respoke.Call#signal-modify\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-modify', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doAnswer\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-answer\n\t     */\n\t    routingMethods.doAnswer = function (params) {\n\t        params.call.connectionId = params.signal.fromConnection;\n\t        /**\n\t         * Send the `answer` signal into the Call.\n\t         * @event respoke.Call#signal-answer\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-answer', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doIceCandidates\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-icecandidates\n\t     */\n\t    routingMethods.doIceCandidates = function (params) {\n\t        /**\n\t         * Send the `icecandidates` signal into the Call.\n\t         * @event respoke.Call#signal-icecandidates\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-icecandidates', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doBye\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-hangup\n\t     */\n\t    routingMethods.doBye = function (params) {\n\t        /**\n\t         *  We may receive hangup from one or more parties after connectionId is set if the call is rejected\n\t         *  by a connection that didn't win the call. In this case, we have to ignore the signal since\n\t         *  we are already on a call. TODO: this should really be inside PeerConnection.\n\t         */\n\t        if (params.call.connectionId && params.call.connectionId !== params.signal.fromConnection) {\n\t            return;\n\t        }\n\t        /**\n\t         * Send the `hangup` signal into the Call.\n\t         * @event respoke.Call#signal-hangup\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-hangup', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doUnknown\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     */\n\t    routingMethods.doUnknown = function (params) {\n\t        log.error(\"Don't know what to do with\", params.signal.target, \"msg of unknown type\", params.signal.signalType);\n\t    };\n\t\n\t    /**\n\t     * Add a handler to the connection for messages of different types.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.addHandler\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} params.type - The type of socket message, i. e., 'message', 'presence', 'join'\n\t     * @param {function} params.handler - A function to which to pass the message\n\t     * @todo TODO See if this is necessary anymore\n\t     */\n\t    that.addHandler = function (params) {\n\t        if (socket.socket && socket.socket.open) {\n\t            socket.on(params.type, params.handler);\n\t        } else {\n\t            handlerQueue[params.type].push(params.handler);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Socket handler for pub-sub messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onPubSub\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     * @fires respoke.Group#message\n\t     * @fires respoke.Client#message\n\t     */\n\t    var onPubSub = function onPubSub(message) {\n\t        var group;\n\t        var groupMessage;\n\t\n\t        if (message.header.from === client.endpointId) {\n\t            return;\n\t        }\n\t\n\t        groupMessage = respoke.TextMessage({\n\t            rawMessage: message\n\t        });\n\t\n\t        group = client.getGroup({id: message.header.channel});\n\t        if (group) {\n\t            /**\n\t             * Indicate that a message has been received to a group.\n\t             * @event respoke.Group#message\n\t             * @type {respoke.Event}\n\t             * @property {respoke.TextMessage} message\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Group} target\n\t             */\n\t            group.fire('message', {\n\t                message: groupMessage\n\t            });\n\t        }\n\t        /**\n\t         * Indicate that a message has been received.\n\t         * @event respoke.Client#message\n\t         * @type {respoke.Event}\n\t         * @property {respoke.TextMessage} message\n\t         * @property {respoke.Group} [group] - If the message is to a group we already know about,\n\t         * this will be set. If null, the developer can use client.join({id: evt.message.header.channel}) to join\n\t         * the group. From that point forward, Group#message will fire when a message is received as well. If\n\t         * group is undefined instead of null, the message is not a group message at all.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Client} target\n\t         */\n\t        client.fire('message', {\n\t            message: groupMessage,\n\t            group: group || null\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Socket handler for join messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onJoin\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     */\n\t    var onJoin = function onJoin(message) {\n\t        var group;\n\t        var presenceMessage;\n\t        var endpoint;\n\t        var connection;\n\t\n\t        if (message.connectionId === client.connectionId) {\n\t            connection = client.getConnection({connectionId: message.connectionId, endpointId: message.endpointId});\n\t            group = client.getGroup({id: message.header.channel});\n\t            if (!group) {\n\t                group = respoke.Group({\n\t                    id: message.header.channel,\n\t                    instanceId: instanceId,\n\t                    signalingChannel: that\n\t                });\n\t                client.addGroup(group);\n\t            }\n\t            if (!group.isJoined()) {\n\t                group.addMember({connection: connection});\n\t                client.fire('join', {\n\t                    group: group\n\t                });\n\t            }\n\t        } else {\n\t\n\t            endpoint = client.getEndpoint({\n\t                skipPresence: true,\n\t                id: message.endpointId,\n\t                instanceId: instanceId,\n\t                name: message.endpointId\n\t            });\n\t\n\t            // Handle presence not associated with a channel\n\t            if (!connection) {\n\t                endpoint.setPresence({\n\t                    connectionId: message.connectionId\n\t                });\n\t                connection = client.getConnection({\n\t                    connectionId: message.connectionId,\n\t                    endpointId: message.endpointId\n\t                });\n\t            }\n\t\n\t            group = client.getGroup({id: message.header.channel});\n\t\n\t            if (group && connection) {\n\t                group.addMember({connection: connection});\n\t            } else {\n\t                log.error(\"Can't add endpoint to group:\", message, group, endpoint, connection);\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Socket handler for leave messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onLeave\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     */\n\t    var onLeave = function onLeave(message) {\n\t        var group;\n\t        var presenceMessage;\n\t        var endpoint;\n\t        if (message.connectionId === client.connectionId) {\n\t            group = client.getGroup({id: message.header.channel});\n\t            client.fire('leave', {\n\t                group: group\n\t            });\n\t        } else {\n\t\n\t            endpoint = client.getEndpoint({\n\t                skipPresence: true,\n\t                id: message.endpointId\n\t            });\n\t\n\t            endpoint.connections.every(function eachConnection(conn, index) {\n\t                if (conn.id === message.connectionId) {\n\t                    endpoint.connections.splice(index, 1);\n\t                    return false;\n\t                }\n\t                return true;\n\t            });\n\t\n\t            group = client.getGroup({id: message.header.channel});\n\t            group.removeMember({connectionId: message.connectionId});\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Socket handler for presence messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onMessage\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     * @fires respoke.Endpoint#message\n\t     * @fires respoke.Client#message\n\t     */\n\t    var onMessage = function onMessage(message) {\n\t        var endpoint;\n\t        message = respoke.TextMessage({rawMessage: message});\n\t        if (message.endpointId) {\n\t            endpoint = client.getEndpoint({\n\t                id: message.endpointId,\n\t                skipCreate: true\n\t            });\n\t        }\n\t        if (endpoint) {\n\t            /**\n\t             * Indicate that a message has been received.\n\t             * @event respoke.Endpoint#message\n\t             * @type {respoke.Event}\n\t             * @property {respoke.TextMessage} message\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Endpoint} target\n\t             */\n\t            endpoint.fire('message', {\n\t                message: message\n\t            });\n\t        }\n\t        /**\n\t         * Indicate that a message has been received.\n\t         * @event respoke.Client#message\n\t         * @type {respoke.Event}\n\t         * @property {respoke.TextMessage} message\n\t         * @property {respoke.Endpoint} [endpoint] - If the message is from an endpoint we already know about,\n\t         * this will be set. If null, the developer can use client.getEndpoint({id: evt.message.endpointId}) to get\n\t         * the Endpoint. From that point forward, Endpoint#message will fire when a message is received as well.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Client} target\n\t         */\n\t        client.fire('message', {\n\t            endpoint: endpoint || null,\n\t            message: message\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Create a socket handler for the onConnect event with all the right things in scope.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.generateConnectHandler\n\t     * @param {respoke.Client.successHandler} [onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @private\n\t     */\n\t    var generateConnectHandler = function generateConnectHandler(onSuccess, onError) {\n\t        onSuccess = onSuccess || function () {};\n\t        onError = onError || function () {};\n\t        return function onConnect() {\n\t            Object.keys(handlerQueue).forEach(function addEachHandlerType(category) {\n\t                if (!handlerQueue[category]) {\n\t                    return;\n\t                }\n\t\n\t                handlerQueue[category].forEach(function addEachHandler(handler) {\n\t                    socket.on(category, handler);\n\t                });\n\t                handlerQueue[category] = [];\n\t            });\n\t\n\t            wsCall({\n\t                path: '/v1/connections',\n\t                httpMethod: 'POST'\n\t            }).done(function successHandler(res) {\n\t                log.debug('connections result', res);\n\t                client.endpointId = res.endpointId;\n\t                client.connectionId = res.id;\n\t                onSuccess();\n\t            }, onError);\n\t        };\n\t    };\n\t\n\t    /**\n\t     * Socket handler for presence messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onPresence\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     */\n\t    function onPresence(message) {\n\t        var endpoint;\n\t        var groups;\n\t\n\t        if (message.header.from === client.endpointId) {\n\t            // Skip ourselves\n\t            return;\n\t        }\n\t        log.debug('socket.on presence', message);\n\t\n\t        endpoint = client.getEndpoint({\n\t            skipPresence: true,\n\t            id: message.header.from,\n\t            instanceId: instanceId,\n\t            name: message.header.from,\n\t            connection: message.header.fromConnection\n\t        });\n\t\n\t        endpoint.setPresence({\n\t            connectionId: message.header.fromConnection,\n\t            presence: message.type\n\t        });\n\t\n\t        if (endpoint.getPresence() === 'unavailable') {\n\t            groups = client.getGroups();\n\t            if (groups) {\n\t                groups.forEach(function eachGroup(group) {\n\t                    group.removeMember({connectionId: message.header.fromConnection});\n\t                });\n\t            }\n\t        }\n\t    }\n\t\n\t    /*!\n\t     * On reconnect, start with a reconnect interval of 2000ms. Every time reconnect fails, the interval\n\t     * is doubled up to a maximum of 5 minutes. From then on, it will attempt to reconnect every 5 minutes forever.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.reconnect\n\t     * @private\n\t     */\n\t    function reconnect() {\n\t        appToken = undefined;\n\t        token = undefined;\n\t        reconnectTimeout = (reconnectTimeout === null) ? 2500 : 2 * reconnectTimeout;\n\t\n\t        if (reconnectTimeout > (maxReconnectTimeout)) {\n\t            reconnectTimeout = maxReconnectTimeout;\n\t        }\n\t\n\t        setTimeout(function doReconnect() {\n\t            actuallyConnect().then(function successHandler() {\n\t                reconnectTimeout = null;\n\t                log.debug('socket reconnected');\n\t                return Q.all(client.getGroups().map(function iterGroups(group) {\n\t                    client.join({\n\t                        id: group.id,\n\t                        onMessage: clientSettings.onMessage,\n\t                        onJoin: clientSettings.onJoin,\n\t                        onLeave: clientSettings.onLeave\n\t                    });\n\t                }));\n\t            }).done(function successHandler(user) {\n\t                /**\n\t                 * Indicate that a reconnect has succeeded.\n\t                 * @event respoke.Client#reconnect\n\t                 * @property {string} name - the event name.\n\t                 * @property {respoke.Client}\n\t                 */\n\t                client.fire('reconnect');\n\t            }, function (err) {\n\t                log.error(\"Couldn't rejoin previous groups.\", err.message, err.stack);\n\t                reconnect();\n\t            });\n\t        }, reconnectTimeout);\n\t    }\n\t\n\t    /**\n\t     * Authenticate to the cloud and call the handler on state change.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.authenticate\n\t     * @private\n\t     * @param {object} params\n\t     * @return {Promise}\n\t     */\n\t    that.authenticate = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var pieces = [];\n\t        var protocol = null;\n\t        var host = null;\n\t        var port = null;\n\t\n\t        if (!appToken) {\n\t            deferred.reject(new Error(\"Can't open a websocket without an app token.\"));\n\t        }\n\t\n\t        pieces = clientSettings.baseURL.split(/:\\/\\//);\n\t        protocol = pieces[0];\n\t        pieces = pieces[1].split(/:/);\n\t        host = pieces[0];\n\t        port = pieces[1];\n\t\n\t        /*!\n\t         * Try to connect for 2 seconds before failing.\n\t         * @private\n\t         */\n\t        var connectParams = {\n\t            'connect timeout': 2000,\n\t            'force new connection': true, // Don't try to reuse old connection.\n\t            'sync disconnect on unload': true, // have Socket.io call disconnect() on the browser unload event.\n\t            reconnect: false,\n\t            host: host,\n\t            port: port || '443',\n\t            protocol: protocol,\n\t            secure: (protocol === 'https'),\n\t            query: '__sails_io_sdk_version=0.10.0&app-token=' + appToken\n\t        };\n\t\n\t        if (that.isConnected() || isConnecting()) {\n\t            return;\n\t        }\n\t        socket = io.connect(clientSettings.baseURL, connectParams);\n\t\n\t        socket.on('connect', generateConnectHandler(function onSuccess() {\n\t            deferred.resolve();\n\t        }, function onError(err) {\n\t            deferred.reject(err);\n\t        }));\n\t\n\t        socket.on('join', onJoin);\n\t        socket.on('leave', onLeave);\n\t        socket.on('pubsub', onPubSub);\n\t        socket.on('message', onMessage);\n\t        socket.on('presence', onPresence);\n\t\n\t        // connection timeout\n\t        socket.on('connect_failed', function connectFailedHandler(res) {\n\t            deferred.reject(new Error(\"WebSocket connection failed.\"));\n\t            log.error('Socket.io connect timeout.', res || \"\");\n\t            reconnect();\n\t        });\n\t\n\t        // handshake error, 403\n\t        socket.on('error', function errorHandler(res) {\n\t            log.debug('Socket.io request failed.', res || \"\");\n\t            reconnect();\n\t        });\n\t\n\t        that.addHandler({\n\t            type: 'signal',\n\t            handler: function signalHandler(message) {\n\t                var knownSignals = ['offer', 'answer', 'connected', 'modify', 'iceCandidates', 'bye'];\n\t                var signal = respoke.SignalingMessage({\n\t                    rawMessage: message\n\t                });\n\t\n\t                if (signal.signalType === 'ack') {\n\t                    return;\n\t                }\n\t\n\t                if (!signal.target || !signal.signalType || knownSignals.indexOf(signal.signalType) === -1) {\n\t                    log.error(\"Got malformed signal.\", signal);\n\t                    throw new Error(\"Can't route signal without target or type.\");\n\t                }\n\t\n\t                that.routeSignal(signal);\n\t            }\n\t        });\n\t\n\t        socket.on('disconnect', function onDisconnect() {\n\t            pendingRequests.reset(function (pendingRequest) {\n\t                log.debug('Failing pending requests');\n\t                pendingRequest.reject(new Error(\"WebSocket disconnected\"));\n\t            });\n\t\n\t            /**\n\t             * Indicate that this client has been disconnected from the Respoke service.\n\t             * @event respoke.Client#disconnect\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            client.fire('disconnect');\n\t\n\t            if (clientSettings.reconnect !== true) {\n\t                socket = null;\n\t                return;\n\t            }\n\t            reconnect();\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Get ephemeral TURN credentials.  This method is called whenever a call is either\n\t     * sent or received, prior to creating a PeerConnection\n\t     *\n\t     * @memberof! respoke.SignalingChannel\n\t     * @private\n\t     * @method respoke.SignalingChannel.getTurnCredentials\n\t     * @return {Promise<Array>}\n\t     */\n\t    that.getTurnCredentials = function () {\n\t        var deferred = Q.defer();\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            httpMethod: 'GET',\n\t            path: '/v1/turn'\n\t        }).done(function successHandler(creds) {\n\t            var result = [];\n\t\n\t            if (!creds || !creds.uris) {\n\t                deferred.reject(new Error(\"Turn credentials empty.\"));\n\t                return;\n\t            }\n\t\n\t            creds.uris.forEach(function saveTurnUri(uri) {\n\t                var cred = null;\n\t\n\t                if (!uri) {\n\t                    return;\n\t                }\n\t\n\t                cred = createIceServer(uri, creds.username, creds.password);\n\t                result.push(cred);\n\t            });\n\t\n\t            if (result.length === 0) {\n\t                deferred.reject(new Error(\"Got no TURN credentials.\"));\n\t            }\n\t\n\t            log.debug('TURN creds', result);\n\t            deferred.resolve(result);\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Construct a websocket API call and return the formatted response and errors. The 'success'\n\t     * attribute indicates the success or failure of the API call. The 'response' attribute\n\t     * is an associative array constructed by json.decode. The 'error' attriute is a message.\n\t     * If the API call is successful but the server returns invalid JSON, error will be\n\t     * \"Invalid JSON.\" and response will be the unchanged content of the response body.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.wsCall\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} params.httpMethod\n\t     * @param {string} params.path\n\t     * @param {string} params.objectId\n\t     * @param {object} params.parameters\n\t     * @return {Promise<object>}\n\t     */\n\t    function wsCall(params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var start = now();\n\t        // Too many of these!\n\t        var logRequest = params.path.indexOf('messages') === -1 && params.path.indexOf('signaling') === -1;\n\t        var request;\n\t        var bodyLength = 0;\n\t        if (params.parameters) {\n\t            bodyLength = encodeURI(JSON.stringify(params.parameters)).split(/%..|./).length - 1;\n\t        }\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (!params) {\n\t            deferred.reject(new Error('No params.'));\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (!params.path) {\n\t            deferred.reject(new Error('No request path.'));\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (bodyLength > bodySizeLimit) {\n\t            deferred.reject(new Error('Request body exceeds maximum size of ' + bodySizeLimit + ' bytes'));\n\t            return deferred.promise;\n\t        }\n\t\n\t        params.httpMethod = (params.httpMethod || 'get').toLowerCase();\n\t\n\t        if (params.objectId) {\n\t            params.path = params.path.replace(/\\%s/ig, params.objectId);\n\t        }\n\t\n\t        if (logRequest) {\n\t            log.debug('socket request', {\n\t                method: params.httpMethod,\n\t                path: params.path,\n\t                parameters: params.parameters\n\t            });\n\t        }\n\t\n\t        request = {\n\t            method: params.httpMethod,\n\t            path: params.path,\n\t            parameters: params.parameters,\n\t            tries: 0,\n\t            durationMillis: 0\n\t        };\n\t\n\t        request.id = pendingRequests.add(deferred);\n\t\n\t        function handleResponse(response) {\n\t            var thisHandler = this; // jshint ignore:line\n\t            /*!\n\t             * Response:\n\t             *  {\n\t             *      body: {},\n\t             *      headers: {},\n\t             *      statusCode: 200\n\t             *  }\n\t             */\n\t            try {\n\t                response.body = JSON.parse(response.body);\n\t            } catch (e) {\n\t                if (typeof response.body !== 'object') {\n\t                    deferred.reject(new Error(\"Server response could not be parsed!\" + response.body));\n\t                    return;\n\t                }\n\t            }\n\t\n\t            if (response.statusCode === 429) {\n\t                if (request.tries < 3 && deferred.promise.isPending()) {\n\t                    setTimeout(function () {\n\t                        start = now();\n\t                        sendWebsocketRequest(request, handleResponse);\n\t                    }, 1000); // one day this will be response.interval or something\n\t                } else {\n\t                    request.durationMillis = now() - start;\n\t                    pendingRequests.remove(request.id);\n\t                    failWebsocketRequest(request, response,\n\t                            \"Too many retries after rate limit exceeded.\", deferred);\n\t                }\n\t                return;\n\t            }\n\t\n\t            request.durationMillis = now() - start;\n\t            pendingRequests.remove(request.id);\n\t\n\t            if ([200, 204, 205, 302, 401, 403, 404, 418].indexOf(thisHandler.status) === -1) {\n\t                failWebsocketRequest(request, response,\n\t                        response.body.error || errors[thisHandler.status] || \"Unknown error\", deferred);\n\t            } else {\n\t                deferred.resolve(response.body);\n\t            }\n\t\n\t            if (logRequest) {\n\t                log.debug('socket response', {\n\t                    method: request.method,\n\t                    path: request.path,\n\t                    durationMillis: request.durationMillis,\n\t                    response: response\n\t                });\n\t            }\n\t        }\n\t\n\t        start = now();\n\t        sendWebsocketRequest(request, handleResponse);\n\t        return deferred.promise;\n\t    }\n\t\n\t    function failWebsocketRequest(request, response, error, deferred) {\n\t        if (response && response.body && response.body.error) {\n\t            if (response.body.details) {\n\t                error += ' ' + response.body.details;\n\t            }\n\t            deferred.reject(buildResponseError(response, error + ' (' + request.method + ' ' + request.path + ')'));\n\t        } else {\n\t            deferred.resolve(response.body);\n\t        }\n\t    }\n\t\n\t    function sendWebsocketRequest(request, handleResponse) {\n\t        request.tries += 1;\n\t        socket.emit(request.method, JSON.stringify({\n\t            url: request.path,\n\t            data: request.parameters,\n\t            headers: {'App-Token': appToken}\n\t        }), handleResponse);\n\t    }\n\t\n\t    /**\n\t     * Construct an API call and return the formatted response and errors. The 'success'\n\t     * attribute indicates the success or failure of the API call. The 'response' attribute\n\t     * is an associative array constructed by json.decode. The 'error' attribute is a message.\n\t     * If the API call is successful but the server returns invalid JSON, error will be\n\t     * \"Invalid JSON.\" and response will be the unchanged content of the response body.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.call\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} params.httpMethod\n\t     * @param {string} params.objectId\n\t     * @param {string} params.path\n\t     * @param {object} params.parameters\n\t     * @returns {Promise}\n\t     */\n\t    function call(params) {\n\t        /* Params go in the URI for GET, DELETE, same format for\n\t         * POST and PUT, but they must be sent separately after the\n\t         * request is opened. */\n\t        var deferred = Q.defer();\n\t        var paramString = null;\n\t        var uri = null;\n\t        var response = {\n\t            'result': null,\n\t            'code': null\n\t        };\n\t        var start = now();\n\t\n\t        uri = clientSettings.baseURL + params.path;\n\t\n\t        if (!params) {\n\t            deferred.reject(new Error('No params.'));\n\t            return;\n\t        }\n\t\n\t        if (!params.httpMethod) {\n\t            deferred.reject(new Error('No HTTP method.'));\n\t            return;\n\t        }\n\t\n\t        if (!params.path) {\n\t            deferred.reject(new Error('No request path.'));\n\t            return;\n\t        }\n\t\n\t        if (params.objectId) {\n\t            params.path = params.path.replace(/\\%s/ig, params.objectId);\n\t        }\n\t\n\t        if (['GET', 'DELETE'].indexOf(params.httpMethod) > -1) {\n\t            uri += makeParamString(params.parameters);\n\t        }\n\t\n\t        xhr.open(params.httpMethod, uri);\n\t        if (appToken) {\n\t            xhr.setRequestHeader(\"App-Token\", appToken);\n\t        }\n\t        if (['POST', 'PUT'].indexOf(params.httpMethod) > -1) {\n\t            paramString = JSON.stringify(params.parameters);\n\t            if (paramString.length > bodySizeLimit) {\n\t                deferred.reject(new Error('Request body exceeds maximum size of ' + bodySizeLimit + ' bytes'));\n\t                return;\n\t            }\n\t            xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n\t        } else if (['GET', 'DELETE'].indexOf(params.httpMethod) === -1) {\n\t            deferred.reject(new Error('Illegal HTTP request method ' + params.httpMethod));\n\t            return;\n\t        }\n\t        log.debug('request', {\n\t            method: params.httpMethod,\n\t            uri: uri,\n\t            params: paramString\n\t        });\n\t\n\t        try {\n\t            xhr.send(paramString);\n\t        } catch (err) {\n\t            deferred.reject(err);\n\t            return;\n\t        }\n\t\n\t        xhr.onreadystatechange = function () {\n\t            var durationMillis = now() - start;\n\t            var limit;\n\t            var unit;\n\t\n\t            if (this.readyState !== 4) {\n\t                return;\n\t            }\n\t\n\t            if (this.status === 0) {\n\t                deferred.reject(new Error(\"Status is 0: Incomplete request, SSL error, or CORS error.\"));\n\t                return;\n\t            }\n\t\n\t            if ([200, 204, 205, 302, 401, 403, 404, 418].indexOf(this.status) > -1) {\n\t                response.code = this.status;\n\t                response.headers = getAllResponseHeaders(this);\n\t                response.uri = uri;\n\t                response.params = params.parameters;\n\t                response.error = errors[this.status];\n\t                if (this.response) {\n\t                    try {\n\t                        response.result = JSON.parse(this.response);\n\t                    } catch (e) {\n\t                        response.result = this.response;\n\t                        response.error = \"Invalid JSON.\";\n\t                    }\n\t                }\n\t                log.debug('response', {\n\t                    method: params.httpMethod,\n\t                    durationMillis: durationMillis,\n\t                    response: response\n\t                });\n\t                deferred.resolve(response);\n\t            } else if (this.status === 429) {\n\t                unit = getResponseHeader(this, 'RateLimit-Time-Units');\n\t                limit = getResponseHeader(this, 'RateLimit-Limit');\n\t                deferred.reject(buildResponseError(response, \"Rate limit of \" + limit + \"/\" + unit +\n\t                    \" exceeded. Try again in 1 \" + unit + \".\"));\n\t            } else {\n\t                deferred.reject(buildResponseError(response, 'unexpected response ' + this.status));\n\t            }\n\t        };\n\t\n\t        return deferred.promise;\n\t    }\n\t\n\t    /**\n\t     * Turn key/value and key/list pairs into an HTTP URL parameter string.\n\t     * var1=value1&var2=value2,value3,value4\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.makeParamString\n\t     * @private\n\t     * @param {object} params - Arbitrary collection of strings and arrays to serialize.\n\t     * @returns {string}\n\t     */\n\t    function makeParamString(params) {\n\t        var strings = [];\n\t        if (!params) {\n\t            return '';\n\t        }\n\t\n\t        Object.keys(params).forEach(function formatParam(name) {\n\t            var value = params[name];\n\t            /* Skip objects -- We won't know how to name these. */\n\t            if (value instanceof Array) {\n\t                strings.push([name, value.join(',')].join('='));\n\t            } else if (typeof value !== 'object' && typeof value !== 'function') {\n\t                strings.push([name, value].join('='));\n\t            }\n\t        });\n\t\n\t        if (strings.length > 0) {\n\t            return '?' + strings.join('&');\n\t        } else {\n\t            return '';\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Tries to retrieve a single header value from an XHR response. If the header is disallowed,\n\t     * or does not exist, will return null. Otherwise returns the value of the header.\n\t     *\n\t     * The CORS spec does not define what the browser should do in the case of a request for a\n\t     * disallowed header, but at least Chrome throws an exception.\n\t     *\n\t     * @param {object} xhrResponse The response of an XMLHttpRequest\n\t     * @param {string} header The name of the header to retrieve the value for\n\t     * @returns {string|null} The value(s) of the header, or null if disallowed or unavailable.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getResponseHeader\n\t     * @private\n\t     */\n\t    function getResponseHeader(xhrResponse, header) {\n\t        try {\n\t            return xhrResponse.getResponseHeader(header);\n\t        } catch (e) {\n\t            return null;\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Retrieves all headers from an XHR response as key/val pairs\n\t     *\n\t     * @param {object} xhrResponse The response of an XMLHttpRequest\n\t     * @returns {*} the key/val pairs of the response headers\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getAllResponseHeaders\n\t     * @private\n\t     */\n\t    function getAllResponseHeaders(xhrResponse) {\n\t        var result = {};\n\t        var headers;\n\t        var pairs;\n\t\n\t        headers = xhrResponse.getAllResponseHeaders();\n\t        if (!headers) {\n\t            return result;\n\t        }\n\t\n\t        // 1 header per line (cr+lf)\n\t        pairs = headers.split('\\u000d\\u000a');\n\t        pairs.forEach(function (pair) {\n\t            var key;\n\t            var val;\n\t\n\t            // key separated from value by ': '\n\t            // value may contain ': ', so using indexOf instead of split\n\t            var index = pair.indexOf('\\u003a\\u0020');\n\t            if (index > 0) {\n\t                key = pair.substring(0, index);\n\t                val = pair.substring(index + 2);\n\t                result[key] = val;\n\t            }\n\t        });\n\t\n\t        return result;\n\t    }\n\t\n\t    /**\n\t     * Creates an Error with the supplied `message` and, if available, the `Request-Id` header\n\t     * from the supplied `response`.\n\t     *\n\t     * @param {object} res\n\t     * @param {object} [res.headers]\n\t     * @param {string} [res.headers.Request-Id] The requestId to append to the Error message\n\t     * @param {string} message The message the Error should be constructed with\n\t     * @returns {Error} the constructed Error object\n\t     * @memberof respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.buildResponseError\n\t     * @api private\n\t     */\n\t    function buildResponseError(res, message) {\n\t        var requestId = res && res.headers && res.headers['Request-Id'];\n\t        if (requestId) {\n\t            message += ' [Request-Id: ' + requestId + ']';\n\t        }\n\t\n\t        return new Error(message);\n\t    }\n\t\n\t    return that;\n\t}; // End respoke.SignalingChannel\n\t/**\n\t * Handle an error that resulted from a method call.\n\t * @callback respoke.SignalingChannel.errorHandler\n\t * @params {Error} err\n\t */\n\t/**\n\t * Handle sending successfully.\n\t * @callback respoke.SignalingChannel.sendHandler\n\t */\n\t/**\n\t * Receive a group.\n\t * @callback respoke.SignalingChannel.groupHandler\n\t * @param {respoke.Group}\n\t */\n\t/**\n\t * Receive a list of groups.\n\t * @callback respoke.SignalingChannel.groupListHandler\n\t * @param {Array}\n\t */\n\t/**\n\t * Receive a list of TURN credentials.\n\t * @callback respoke.SignalingChannel.turnSuccessHandler\n\t * @param {Array}\n\t */\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";\n\t/*jshint bitwise: false*/\n\t\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar Airbrake = __webpack_require__(20);\n\tvar log = __webpack_require__(22);\n\tlog.setLevel(log.levels.WARN);\n\t\n\tvar originalFactory = log.methodFactory;\n\tlog.methodFactory = function logMethodFactory(methodName, logLevel) {\n\t    var logMethod = originalFactory(methodName, logLevel);\n\t    var errorReporter;\n\t\n\t    if (!window.skipErrorReporting && methodName === 'error') {\n\t        var airbrake = new Airbrake({\n\t            projectId: '98133',\n\t            projectKey: 'cd3e085acc5e554658ebcdabd112a6f4'\n\t        });\n\t        errorReporter = function (message) {\n\t            airbrake.push({ error: { message: message } });\n\t        };\n\t    } else {\n\t        errorReporter = function () { };\n\t    }\n\t\n\t    return function (message) {\n\t        var args = Array.prototype.slice.call(arguments);\n\t        var reporterMessage = args.join(' ');\n\t\n\t        args.unshift('[Respoke]');\n\t        logMethod.apply(this, args);\n\t        errorReporter(reporterMessage);\n\t    };\n\t};\n\t\n\t__webpack_require__(2);\n\t\n\t/**\n\t * `respoke` is a global static class.\n\t *\n\t *\n\t * Include the [latest version](https://cdn.respoke.io/respoke.min.js) or\n\t * [choose a previous release](http://cdn.respoke.io/list.html).\n\t *\n\t * Or use `npm install --save respoke`.\n\t *\n\t * Interact with Respoke primarily via [`respoke.Client`](respoke.Client.html):\n\t *\n\t *      var client = respoke.createClient();\n\t *\n\t *\n\t * **Development mode without brokered auth**\n\t *\n\t *      var client = respoke.createClient({\n\t *          appId: \"XXXXXXX-my-app-id-XXXXXX\",\n\t *          developmentMode: true,\n\t *          endpointId: \"billy\"\n\t *      });\n\t *\n\t *      client.listen('connect', function () {\n\t *          console.log('connected to respoke!');\n\t *      });\n\t *\n\t *      client.listen('error', function (err) {\n\t *          console.error('Connection to Respoke failed.', err);\n\t *      });\n\t *\n\t *      client.connect();\n\t *\n\t *\n\t * **Production mode with brokered auth**\n\t *\n\t *      var client = respoke.createClient();\n\t *\n\t *      client.listen('connect', function () {\n\t *          console.log('connected to respoke!');\n\t *      });\n\t *\n\t *      client.listen('error', function (err) {\n\t *          console.error('Connection to Respoke failed.', err);\n\t *      });\n\t *\n\t *      // Respoke auth token obtained by your server.\n\t *      // This is how you control who can connect to Respoke app.\n\t *      // See API docs for POST [base]/tokens\n\t *      var tokenId = \"XXXX-XXXX-brokered-auth-token-XXXXX\";\n\t *\n\t *      // connect to respoke with the token\n\t *      client.connect({\n\t *          token: tokenId\n\t *      });\n\t *\n\t *      // fetch a new token from your server if it expires\n\t *      client.listen('disconnect', function (evt) {\n\t *          // fetch another token from your server.\n\t *          var newTokenId = \"XXXX-XXXX-brokered-auth-token2-XXXXX\";\n\t *          client.connect({\n\t *              token: newTokenId\n\t *          });\n\t *      });\n\t *\n\t *\n\t *\n\t * ### Event listeners vs callback handlers\n\t *\n\t * There are two ways to attach listeners. It is highly recommended that you choose one pattern\n\t * and stick to it throughout your app.\n\t *\n\t * For every `event-name`, there is a corresponding callback `onEventName`.\n\t *\n\t * **With a listener**\n\t *\n\t *      var client = respoke.createClient();\n\t *      client.listen('connect', function () { });\n\t *\n\t * **or with a callback**\n\t *\n\t *      var client = respoke.createClient({\n\t *          // other options go here\n\t *\n\t *          onConnect: function () { }\n\t *      });\n\t *\n\t *\n\t * @namespace respoke\n\t * @class respoke\n\t * @global\n\t * @link https://cdn.respoke.io/respoke.min.js\n\t */\n\t\n\tvar EventEmitter = __webpack_require__(3);\n\tvar respoke = module.exports = EventEmitter({\n\t    buildNumber: 'v1.33.1',\n\t    streams: [],\n\t    Q: __webpack_require__(21)\n\t});\n\t\n\trespoke.Q.longStackSupport = true;\n\trespoke.Q.stackJumpLimit = 5;\n\trespoke.Q.longStackJumpLimit = 20;\n\trespoke.Q.stopUnhandledRejectionTracking();\n\t\n\t/**\n\t * A map of respoke.Client instances available for use. This is useful if you would like to separate some\n\t * functionality of your app into a separate Respoke app which would require a separate appId.\n\t * @type {boolean}\n\t */\n\trespoke.instances = {};\n\t\n\t/**\n\t * Indicate whether the user's browser is Chrome and requires the Respoke Chrome extension to do screen sharing.\n\t * @type {boolean}\n\t * @private\n\t */\n\trespoke.needsChromeExtension = !!(window.chrome && !window.opera && navigator.webkitGetUserMedia);\n\t\n\t/**\n\t * Indicate whether the user's browser is Firefox and requires the Respoke Firefox extension to do screen sharing.\n\t * @type {boolean}\n\t * @private\n\t */\n\trespoke.needsFirefoxExtension = window.webrtcDetectedBrowser === 'firefox';\n\t\n\t/**\n\t * Indicate whether the user has a Respoke Chrome extension installed and running correcty on this domain.\n\t * @type {boolean}\n\t * @private\n\t */\n\trespoke.hasChromeExtension = false;\n\t\n\t/**\n\t * Indicate whether the user has a Respoke Firefox extension installed and running correcty on this domain.\n\t * @type {boolean}\n\t * @private\n\t */\n\trespoke.hasFirefoxExtension = false;\n\t\n\t/**\n\t * This method will be overridden in the case that an extension or plugin is available for screen sharing.\n\t *\n\t * @static\n\t * @private\n\t * @memberof respoke\n\t */\n\trespoke.chooseDesktopMedia = function () {\n\t    log.warn(\"Screen sharing is not implemented for this browser.\");\n\t};\n\t\n\t/**\n\t * Indicate whether we are dealing with node-webkit, and expose chooseDesktopMedia if so\n\t * @type {boolean}\n\t * @private\n\t */\n\trespoke.isNwjs = (function () {\n\t    var gui;\n\t    var isNwjs = !!((typeof process !== 'undefined') && (typeof global !== 'undefined') &&\n\t        global.window && global.window.nwDispatcher);\n\t\n\t    if (isNwjs) {\n\t        // expose native node-webkit chooseDesktopMedia (requires nw.js 0.12+)\n\t        gui = window.nwDispatcher.requireNwGui();\n\t        respoke.chooseDesktopMedia = function (data, callback) {\n\t            // make data param optional\n\t            if (!callback && (typeof data === 'function')) {\n\t                callback = data;\n\t                data = null;\n\t            }\n\t\n\t            /*!\n\t             * mediaSources can be one of 'window', 'screen', or 'tab', or an array with multiples\n\t             * https://developer.chrome.com/extensions/desktopCapture\n\t             */\n\t            var mediaSources = data && data.source ? [data.source] : ['window', 'screen'];\n\t\n\t            gui.Screen.Init();\n\t            gui.Screen.chooseDesktopMedia(mediaSources, function (sourceId) {\n\t                callback({\n\t                    type: 'respoke-source-id',\n\t                    sourceId: sourceId\n\t                });\n\t            });\n\t        };\n\t    }\n\t\n\t    return isNwjs;\n\t})();\n\t\n\t/**\n\t * Create an Event. This is used in the Chrome/Firefox extensions to communicate between the library and extension.\n\t * @type {function}\n\t * @private\n\t */\n\trespoke.extEvent = function (type, data) {\n\t    var evt = document.createEvent(\"CustomEvent\");\n\t    evt.initCustomEvent(type, true, true, data);\n\t    return evt;\n\t};\n\t\n\t/**\n\t * `\"v0.0.0\"`\n\t *\n\t * The respoke.min.js version.\n\t *\n\t * Past versions can be found at [cdn.respoke.io/list.html](http://cdn.respoke.io/list.html)\n\t * @type {string}\n\t */\n\trespoke.version = respoke.buildNumber + \"\";\n\t\n\trespoke.log = log;\n\trespoke.Class = __webpack_require__(4);\n\trespoke.EventEmitter = EventEmitter;\n\trespoke.Client = __webpack_require__(5);\n\trespoke.Presentable = __webpack_require__(6);\n\trespoke.Connection = __webpack_require__(7);\n\trespoke.Endpoint = __webpack_require__(8);\n\trespoke.TextMessage = __webpack_require__(9);\n\trespoke.SignalingMessage = __webpack_require__(10);\n\trespoke.Group = __webpack_require__(11);\n\trespoke.SignalingChannel = __webpack_require__(12);\n\trespoke.DirectConnection = __webpack_require__(1);\n\trespoke.PeerConnection = __webpack_require__(14);\n\trespoke.CallState = __webpack_require__(15);\n\trespoke.Call = __webpack_require__(16);\n\trespoke.LocalMedia = __webpack_require__(17);\n\trespoke.RemoteMedia = __webpack_require__(18);\n\trespoke.Conference = __webpack_require__(19);\n\t\n\t/*!\n\t * Get information from the Respoke Screen Sharing Chrome extension if it is installed.\n\t */\n\tfunction chromeScreenSharingExtensionReady(evt) {\n\t    var data = evt.detail;\n\t    if (data.available !== true) {\n\t        return;\n\t    }\n\t\n\t    respoke.hasChromeExtension = true;\n\t    respoke.chooseDesktopMedia = function (params, callback) {\n\t        if (!callback) {\n\t            throw new Error(\"Can't choose desktop media without callback parameter.\");\n\t        }\n\t\n\t        function sourceIdListener(evt) {\n\t            var data = evt.detail;\n\t\n\t            respoke.screenSourceId = data.sourceId;\n\t            callback(data);\n\t            document.removeEventListener(\"respoke-source-id\", sourceIdListener);\n\t        }\n\t\n\t        document.dispatchEvent(respoke.extEvent('ct-respoke-source-id', {\n\t            source: params.source ? [params.source] : ['screen', 'window']\n\t        }));\n\t\n\t        document.addEventListener(\"respoke-source-id\", sourceIdListener);\n\t    };\n\t\n\t    respoke.fire('extension-loaded', {\n\t        type: 'screen-sharing'\n\t    });\n\t\n\t    log.info(\"Respoke Screen Share Chrome extension available for use.\");\n\t}\n\t\n\t// TODO: remove 'respoke-available' event listener on next major version bump\n\tdocument.addEventListener('respoke-available', chromeScreenSharingExtensionReady);\n\tdocument.addEventListener('respoke-chrome-screen-sharing-available', chromeScreenSharingExtensionReady);\n\tdocument.addEventListener('respoke-firefox-screen-sharing-available', function (evt) {\n\t\n\t    var data = evt.detail;\n\t    if (data !== 'available') {\n\t        return;\n\t    }\n\t\n\t    respoke.hasFirefoxExtension = true;\n\t\n\t    respoke.fire('extension-loaded', {\n\t        type: 'screen-sharing'\n\t    });\n\t\n\t    log.info(\"Respoke Screen Share Firefox extension available for use.\");\n\t});\n\t\n\t/**\n\t * This is one of two possible entry points for interating with the library.\n\t *\n\t * This method creates a new Client object\n\t * which represents your user's connection to your Respoke app.\n\t *\n\t * This method **automatically calls client.connect(params)** after the client is created.\n\t *\n\t * @static\n\t * @memberof respoke\n\t * @param {object} params Parameters to the respoke.Client constructor.\n\t * @param {string} [params.appId]\n\t * @param {string} [params.baseURL]\n\t * @param {string} [params.token]\n\t * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n\t * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n\t * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t * operation and will limit the services you will be able to use.\n\t * @param {boolean} [params.reconnect=false] - Whether or not to automatically reconnect to the Respoke service\n\t * when a disconnect occurs.\n\t * @param {function} [params.onSuccess] - Success handler for this invocation of this method only.\n\t * @param {function} [params.onError] - Error handler for this invocation of this method only.\n\t * @param {function} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t * @param {function} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n\t * @param {function} [params.onMessage] - Callback for when any message is received from anywhere on the system.\n\t * @param {function} [params.onDisconnect] - Callback for Client disconnect.\n\t * @param {function} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n\t * @param {function} [params.onCall] - Callback for when this client's user receives a call.\n\t * @param {function} [params.onDirectConnection] - Callback for when this client's user receives a request for a\n\t * direct connection.\n\t * @param {boolean} [params.enableCallDebugReport=true] - Optional flag defaulting to true which allows sending\n\t * debugging information.\n\t * @returns {respoke.Client}\n\t */\n\trespoke.connect = function (params) {\n\t    var client = respoke.Client(params);\n\t    client.connect(params);\n\t    return client;\n\t};\n\t\n\t/**\n\t * Getter for the respoke client.\n\t *\n\t * You can have more than one active client, so this method provides a way to retrieve a specific instance.\n\t *\n\t * @static\n\t * @memberof respoke\n\t * @param {number} id The Client ID.\n\t * @returns {respoke.Client}\n\t */\n\trespoke.getClient = function (id) {\n\t    if (id === undefined) {\n\t        log.debug(\"Can't call getClient with no client ID.\", new Error().stack);\n\t    }\n\t    if (!respoke.instances[id]) {\n\t        log.debug(\"No client instance with id\", id);\n\t    }\n\t    return respoke.instances[id];\n\t};\n\t\n\t/**\n\t * This is one of two possible entry points for interating with the library.\n\t *\n\t * This method creates a new Client object which represents your user's connection to your Respoke app.\n\t *\n\t * It **does NOT automatically call the client.connect() method** after the client is created.\n\t *\n\t * The `params` argument is the same as `respoke.connect(params)`.\n\t *\n\t * @static\n\t * @memberof respoke\n\t * @param {object} params Parameters to respoke.Client - same as respoke.connect()\n\t * @returns {respoke.Client}\n\t */\n\trespoke.createClient = function (params) {\n\t    var client;\n\t    params = params || {};\n\t    if (params.instanceId) {\n\t        client = respoke.getClient(params.instanceId);\n\t        if (client) {\n\t            return client;\n\t        }\n\t    }\n\t    return respoke.Client(params);\n\t};\n\t\n\t/**\n\t * Build a closure from a listener that will ensure the listener can only be called once.\n\t * @static\n\t * @private\n\t * @memberof respoke\n\t * @param {function} func\n\t * @return {function}\n\t */\n\trespoke.callOnce = function (func) {\n\t    return (function () {\n\t        var called = false;\n\t        return function () {\n\t            if (called === false) {\n\t                func.apply(null, arguments);\n\t                called = true;\n\t            }\n\t        };\n\t    })();\n\t};\n\t\n\t/**\n\t * @static\n\t * @private\n\t * @memberof respoke\n\t * @returns {number}\n\t */\n\trespoke.makeGUID = function () {\n\t    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n\t    var uuid = new Array(36);\n\t    var rnd = 0;\n\t    var r;\n\t    for (var i = 0; i < 36; i += 1) {\n\t        if (i === 8 || i === 13 ||  i === 18 || i === 23) {\n\t            uuid[i] = '-';\n\t        } else if (i === 14) {\n\t            uuid[i] = '4';\n\t        } else {\n\t            if (rnd <= 0x02) {\n\t                rnd = 0x2000000 + (Math.random() * 0x1000000) | 0;\n\t            }\n\t            r = rnd & 0xf;\n\t            rnd = rnd >> 4;\n\t            uuid[i] = chars[(i === 19) ? (r & 0x3) | 0x8 : r];\n\t        }\n\t    }\n\t    return uuid.join('');\n\t};\n\t\n\t/**\n\t * This method is used internally to attach handlers to promises that are returned by many methods in the library.\n\t * It's not recommended that this method be used by developers and apps.\n\t * @private\n\t * @static\n\t * @memberof respoke\n\t * @param {Promise} promise\n\t * @param {function} onSuccess\n\t * @param {function} onError\n\t * @returns {Promise|undefined}\n\t */\n\trespoke.handlePromise = function (promise, onSuccess, onError) {\n\t    var returnUndef = false;\n\t    if (onSuccess || onError) {\n\t        returnUndef = true;\n\t    }\n\t\n\t    onSuccess = typeof onSuccess === 'function' ? onSuccess : function () {};\n\t    onError = typeof onError === 'function' ? onError : function () {};\n\t    promise.done(onSuccess, onError);\n\t    return (returnUndef ? undefined : promise);\n\t};\n\t\n\t/**\n\t * Does the browser support `UserMedia`?\n\t * @static\n\t * @memberof respoke\n\t * @returns {boolean}\n\t */\n\trespoke.hasUserMedia = function () {\n\t    return (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia) instanceof Function;\n\t};\n\t\n\t/**\n\t * Does the browser support `RTCPeerConnection`?\n\t * @static\n\t * @memberof respoke\n\t * @returns {boolean}\n\t */\n\trespoke.hasRTCPeerConnection = function () {\n\t    return (window.RTCPeerConnection || window.webkitRTCPeerConnection ||\n\t            window.mozRTCPeerConnection) instanceof Function;\n\t};\n\t\n\t/**\n\t * Does the browser support `WebSocket`?\n\t * @static\n\t * @memberof respoke\n\t * @returns {boolean}\n\t */\n\trespoke.hasWebsocket = function () {\n\t    return (window.WebSocket || window.webkitWebSocket || window.MozWebSocket) instanceof Function;\n\t};\n\t\n\t/**\n\t * Does the browser have Screen Sharing enabled via browser extensions?\n\t * @static\n\t * @memberof respoke\n\t * @returns {boolean}\n\t */\n\trespoke.hasScreenShare = function () {\n\t    return respoke.hasChromeExtension || respoke.hasFirefoxExtension;\n\t};\n\t\n\t/**\n\t * Clone an object.\n\t * @static\n\t * @memberof respoke\n\t * @private\n\t * @param {Object} source - The object to clone\n\t * @returns {Object}\n\t */\n\trespoke.clone = function (source) {\n\t    if (source) {\n\t        return JSON.parse(JSON.stringify(source));\n\t    }\n\t    return source;\n\t};\n\t\n\t/**\n\t * Compares two objects for equality\n\t * @static\n\t * @memberof respoke\n\t * @private\n\t * @param {Object} a\n\t * @param {Object} b\n\t * @returns {boolean}\n\t */\n\trespoke.isEqual = function (a, b) {\n\t    var aKeys;\n\t    var i;\n\t\n\t    //check if arrays\n\t    if (a && b && a.hasOwnProperty('length') && b.hasOwnProperty('length') && a.splice && b.splice) {\n\t        if (a.length !== b.length) {\n\t            //short circuit if arrays are different length\n\t            return false;\n\t        }\n\t\n\t        for (i = 0; i < a.length; i += 1) {\n\t            if (!respoke.isEqual(a[i], b[i])) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t\n\t    if (typeof a === 'object' && typeof b === 'object' && Object.keys(a).length === Object.keys(b).length) {\n\t        aKeys = Object.keys(a);\n\t        for (i = 0; i < aKeys.length; i += 1) {\n\t            if (!respoke.isEqual(a[aKeys[i]], b[aKeys[i]])) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t\n\t    return a === b;\n\t};\n\t\n\t/**\n\t * Count the number of MediaStreams indicated by the SDP\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {number}\n\t * @private\n\t */\n\trespoke.sdpStreamCount = function (sdp) {\n\t    var matches;\n\t    var resolvedMatches = {};\n\t\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasAudio called with no parameters.\");\n\t    }\n\t\n\t    matches = sdp.match(/mslabel:(.*)/gi);\n\t\n\t    if (!matches) {\n\t        return 0;\n\t    }\n\t\n\t    matches.forEach(function (line) {\n\t        resolvedMatches[line] = true;\n\t    });\n\t    return Object.keys(resolvedMatches).length;\n\t};\n\t\n\t/**\n\t * Does the sdp indicate an audio stream?\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.sdpHasAudio = function (sdp) {\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasAudio called with no parameters.\");\n\t    }\n\t    return (sdp.indexOf('m=audio') !== -1 && sdp.indexOf('a=recvonly') === -1);\n\t};\n\t\n\t/**\n\t * Does the sdp indicate a video stream?\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.sdpHasVideo = function (sdp) {\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasVideo called with no parameters.\");\n\t    }\n\t    return (sdp.indexOf('m=video') !== -1 && sdp.indexOf('a=recvonly') === -1);\n\t};\n\t\n\t/**\n\t * Does the sdp indicate a data channel?\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.sdpHasDataChannel = function (sdp) {\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasDataChannel called with no parameters.\");\n\t    }\n\t    return sdp.indexOf('m=application') !== -1;\n\t};\n\t\n\t/**\n\t * Does the sdp indicate the creator is sendOnly?\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.sdpHasSendOnly = function (sdp) {\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasSendOnly called with no parameters.\");\n\t    }\n\t    return sdp.indexOf('a=sendonly') !== -1;\n\t};\n\t\n\t/**\n\t * Does the sdp indicate the creator is receiveOnly?\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.sdpHasReceiveOnly = function (sdp) {\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasReceiveOnly called with no parameters.\");\n\t    }\n\t    return sdp.indexOf('a=recvonly') !== -1;\n\t};\n\t\n\t/**\n\t * Do the constraints indicate an audio stream?\n\t * @static\n\t * @memberof respoke\n\t * @params {RTCConstraints}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.constraintsHasAudio = function (constraints) {\n\t    if (!constraints) {\n\t        throw new Error(\"respoke.constraintsHasAudio called with no parameters.\");\n\t    }\n\t    return (constraints.audio === true);\n\t};\n\t\n\t/**\n\t * Does the constraints indicate a video stream?\n\t * @static\n\t * @memberof respoke\n\t * @params {RTCConstraints}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.constraintsHasVideo = function (constraints) {\n\t    if (!constraints) {\n\t        throw new Error(\"respoke.constraintsHasVideo called with no parameters.\");\n\t    }\n\t    return (constraints.video === true || typeof constraints.video === 'object');\n\t};\n\t\n\t/**\n\t * Does the constraints indicate a screenshare?\n\t * @static\n\t * @memberof respoke\n\t * @params {RTCConstraints}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.constraintsHasScreenShare = function (constraints) {\n\t    if (!constraints) {\n\t        throw new Error(\"respoke.constraintsHasScreenShare called with no parameters.\");\n\t    }\n\t\n\t    return (constraints.video && constraints.video.mandatory &&\n\t            (constraints.video.mandatory.chromeMediaSource || constraints.video.mediaSource));\n\t};\n\t\n\t/**\n\t * Convert old-style constraints parameter into a constraints array.\n\t * @static\n\t * @memberof respoke\n\t * @params {Array<RTCConstraints>|RTCConstraints} [constraints]\n\t * @params {Array<RTCConstraints>} [defaults]\n\t * @returns {Array<RTCConstraints>}\n\t * @private\n\t */\n\trespoke.convertConstraints = function (constraints, defaults) {\n\t    constraints = constraints || [];\n\t    defaults = defaults || [];\n\t\n\t    if (!constraints.splice) {\n\t        if (typeof constraints === 'object') {\n\t            constraints = [constraints];\n\t        } else {\n\t            constraints = [];\n\t        }\n\t    }\n\t\n\t    if (constraints.length === 0 && defaults.length > 0) {\n\t        return defaults;\n\t    }\n\t\n\t    return constraints;\n\t};\n\t\n\t/**\n\t * Queue items until a trigger is called, then process them all with an action. Before trigger, hold items for\n\t * processing. After trigger, process new items immediately.\n\t * @static\n\t * @memberof respoke\n\t * @returns {Array}\n\t * @private\n\t */\n\trespoke.queueFactory = function () {\n\t    var queue = [];\n\t    // action replaces Array.push when trigger is called. Thrown errors will be caught and logged.\n\t    queue.trigger = function (action) {\n\t        if (!action) {\n\t            throw new Error(\"Trigger function requires an action parameter.\");\n\t        }\n\t\n\t        function safeAction(item) {\n\t            try {\n\t                action(item);\n\t            } catch (err) {\n\t                log.error(\"Error calling queue action.\", err);\n\t            }\n\t        }\n\t        queue.forEach(safeAction);\n\t        queue.length = 0;\n\t        queue.push = safeAction;\n\t    };\n\t\n\t    return queue;\n\t};\n\t\n\t/**\n\t * Retrieve browser-specific WebRTC getUserMedia constraints needed to start a screen sharing call.\n\t *\n\t * @memberof respoke\n\t * @static\n\t * @param {object} [params]\n\t * @param {string} [params.source] The media source name to pass to firefox\n\t * @param {RTCConstraints|Array<RTCConstraints>} [params.constraints] constraints to use as a base\n\t * @returns {Array<RTCConstraints>}\n\t * @private\n\t */\n\trespoke.getScreenShareConstraints = function (params) {\n\t    params = params || {};\n\t    var convertedConstraints = respoke.convertConstraints(params.constraints, [{\n\t        audio: true,\n\t        video: {},\n\t        mandatory: {},\n\t        optional: []\n\t    }]);\n\t\n\t    var screenConstraint = convertedConstraints[0];\n\t    screenConstraint.audio = false;\n\t    screenConstraint.video = typeof screenConstraint.video === 'object' ? screenConstraint.video : {};\n\t\n\t    if (respoke.needsChromeExtension || respoke.isNwjs) {\n\t        screenConstraint.audio = false;\n\t        screenConstraint.video.optional = Array.isArray(screenConstraint.video.optional) ?\n\t            screenConstraint.video.optional : [];\n\t        screenConstraint.video.mandatory = typeof screenConstraint.video.mandatory === 'object' ?\n\t            screenConstraint.video.mandatory : {};\n\t        screenConstraint.video.mandatory.chromeMediaSource = 'desktop';\n\t        screenConstraint.video.mandatory.maxWidth = typeof screenConstraint.video.mandatory.maxWidth === 'number' ?\n\t            screenConstraint.video.mandatory.maxWidth : 2000;\n\t        screenConstraint.video.mandatory.maxHeight = typeof screenConstraint.video.mandatory.maxHeight === 'number' ?\n\t            screenConstraint.video.mandatory.maxHeight : 2000;\n\t\n\t        if (screenConstraint.video.optional.length > 0) {\n\t            screenConstraint.video.optional.forEach(function (thing) {\n\t                thing.googTemporalLayeredScreencast = true;\n\t            });\n\t        } else {\n\t            screenConstraint.video.optional[0] = {\n\t                googTemporalLayeredScreencast: true\n\t            };\n\t        }\n\t    } else {\n\t        // firefox, et. al.\n\t        screenConstraint.video.mediaSource = params.source || 'screen';\n\t    }\n\t\n\t    return convertedConstraints;\n\t};\n\t\n\t/**\n\t * Retrieve a started instance of `respoke.LocalMedia` containing a screen share stream. Useful if you\n\t * want to prepare the stream prior to starting a screen share.\n\t *\n\t *     respoke.getScreenShareMedia().then(function (localMedia) {\n\t *         document.getElementById('#video').appendChild(localMedia.element);\n\t *         group.listen('join', function (evt) {\n\t *             evt.connection.startScreenShare({\n\t *                 outgoingMedia: localMedia\n\t *             });\n\t *         });\n\t *     }).catch(function (err) {\n\t *         console.log(err);\n\t *     });\n\t *\n\t * @static\n\t * @memberof respoke\n\t * @param {object} params\n\t * @param {string} [params.source] - The source you would like to use for your screen share. Values vary by browser.\n\t *  In Chrome, acceptable values are one of 'screen', 'window', or 'tab'.\n\t *  In Firefox, acceptable values are one of 'screen', 'window', or 'application'.\n\t * @param {RTCConstraints|Array<RTCConstraints>} [params.constraints] - constraints to use as a base\n\t * @param {HTMLVideoElement} [params.element] - Pass in an optional html video element to have local\n\t *  video attached to it.\n\t * @param {function} [params.onSuccess] Upon success, called with instance of `respoke.LocalMedia`\n\t * @param {function} [params.onError] Upon failure, called with the error that occurred.\n\t * @returns {Promise|undefined}\n\t * @private\n\t */\n\trespoke.getScreenShareMedia = function (params) {\n\t    params = params || {};\n\t\n\t    var deferred = respoke.Q.defer();\n\t\n\t    var criteria = {\n\t        source: params.source,\n\t        constraints: respoke.clone(params.constraints)\n\t    };\n\t\n\t    var localMedia = respoke.LocalMedia({\n\t        hasScreenShare: true,\n\t        constraints: respoke.getScreenShareConstraints(criteria)[0],\n\t        source: params.source,\n\t        element: params.element\n\t    });\n\t\n\t    function localMediaStreamReceivedHandler() {\n\t        localMedia.ignore('error', localMediaErrorHandler);\n\t        deferred.resolve(localMedia);\n\t    }\n\t\n\t    function localMediaErrorHandler(evt) {\n\t        localMedia.ignore('stream-received', localMediaStreamReceivedHandler);\n\t        deferred.reject(evt);\n\t    }\n\t\n\t    localMedia.once('stream-received', localMediaStreamReceivedHandler);\n\t    localMedia.once('error', localMediaErrorHandler);\n\t    localMedia.start();\n\t\n\t    return respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t};\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar Q = __webpack_require__(21);\n\tvar respoke = __webpack_require__(13);\n\tvar log = respoke.log;\n\t\n\t/**\n\t * WebRTC PeerConnection. This class handles all the state and connectivity for Call and DirectConnection.\n\t * This class cannot be used alone, but is instantiated by and must be given media by either Call, DirectConnection,\n\t * or the not-yet-implemented ScreenShare.\n\t * @class respoke.PeerConnection\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.instanceId - client id\n\t * @param {boolean} [params.forceTurn] - If true, delete all 'host' and 'srvflx' candidates and send only 'relay'\n\t * candidates.\n\t * @param {boolean} [params.disableTurn] - If true, delete all 'relay' candidates and send only 'host' and 'srvflx'\n\t * candidates.\n\t * @param {respoke.Call} params.call\n\t * @param {string} params.connectionId - The connection ID of the remoteEndpoint.\n\t * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n\t * @param {function} params.signalModify - Signaling action from SignalingChannel.\n\t * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n\t * @param {function} params.signalReport - Signaling action from SignalingChannel.\n\t * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n\t * @param {respoke.Call.onHangup} [params.onHangup] - Callback for the developer to be notified about hangup.\n\t * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for the developer to receive\n\t * statistics about the call. This is only used if call.getStats() is called and the stats module is loaded.\n\t * @param {object} [params.pcOptions]\n\t * @param {object} [params.offerOptions]\n\t * @returns {respoke.PeerConnection}\n\t */\n\t\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.PeerConnection';\n\t\n\t    /**\n\t     * Whether or not we will send a 'hangup' signal to the other side during hangup.\n\t     * @memberof! respoke.PeerConnection\n\t     * @name toSendHangup\n\t     * @type {respoke.Endpoint}\n\t     */\n\t    var toSendHangup;\n\t\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @private\n\t     * @name pc\n\t     * @type RTCPeerConnection\n\t     * @desc The RTCPeerConnection as provided by the browser API. All internal state, networking functionality, and\n\t     * raw data transfer occurs within the PeerConnection.\n\t     */\n\t    var pc = null;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name defModify\n\t     * @private\n\t     * @type {Promise}\n\t     * @desc Used in the state machine to trigger methods or functions whose execution depends on the reception,\n\t     * handling, or sending of some information.\n\t     */\n\t    var defModify;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name previewLocalMedia\n\t     * @private\n\t     * @type {respoke.Call.previewLocalMedia}\n\t     * @desc A callback provided by the developer that we'll call after receiving local media and before\n\t     * approve() is called.\n\t     */\n\t    var previewLocalMedia = typeof params.previewLocalMedia === 'function' ? params.previewLocalMedia : undefined;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name candidateSendingQueue\n\t     * @private\n\t     * @type {array}\n\t     * @desc An array to save candidates between offer and answer so that both parties can process them simultaneously.\n\t     */\n\t    var candidateSendingQueue = respoke.queueFactory();\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name candidateReceivingQueue\n\t     * @private\n\t     * @type {array}\n\t     * @desc An array to save candidates between offer and answer so that both parties can process them simultaneously.\n\t     */\n\t    var candidateReceivingQueue = respoke.queueFactory();\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name client\n\t     * @private\n\t     * @type {respoke.Client}\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalOffer\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalOffer = params.signalOffer;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalConnected\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalConnected = params.signalConnected;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalModify\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalModify = params.signalModify;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalAnswer\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalAnswer = params.signalAnswer;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalHangup\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalHangup = respoke.callOnce(params.signalHangup);\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalReport\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalReport = params.signalReport;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalCandidateOrig\n\t     * @private\n\t     * @type {function}\n\t     * @desc A temporary function saved from params in order to construct the candidate signaling function.\n\t     */\n\t    var signalCandidateOrig = params.signalCandidate;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalCandidate\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed from the one passed to us by the signaling channel with additions\n\t     * to facilitate candidate logging.\n\t     */\n\t    function signalCandidate(params) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t\n\t        params.iceCandidates = [params.candidate];\n\t        signalCandidateOrig(params);\n\t        that.report.candidatesSent.push({candidate: params.candidate});\n\t    }\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name sdpExpectedStreamCount\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    that.sdpExpectedStreamCount = 0;\n\t\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name offerOptions\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var offerOptions = params.offerOptions || {};\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name pcOptions\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var pcOptions = params.pcOptions || {\n\t        optional: [\n\t            { DtlsSrtpKeyAgreement: true },\n\t            { RtpDataChannels: false }\n\t        ]\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name report\n\t     * @type {object}\n\t     */\n\t    that.report = {\n\t        callStarted: 0,\n\t        callStopped: 0,\n\t        callerendpoint: that.call.caller ? client.name : that.call.remoteEndpoint.id,\n\t        callerconnection: that.call.caller ? client.id : that.call.connectionId,\n\t        calleeendpoint: that.call.caller ? that.call.remoteEndpoint.id : client.id,\n\t        calleeconnection: that.call.caller ? that.call.connectionId : client.connectionId,\n\t        sessionId: that.call.id,\n\t        lastSDPString: '',\n\t        sdpsSent: [],\n\t        sdpsReceived: [],\n\t        candidatesSent: [],\n\t        candidatesReceived: [],\n\t        userAgent: navigator.userAgent,\n\t        os: navigator.platform\n\t    };\n\t\n\t    /**\n\t     * Start the process of network and media negotiation. Called after local video approved.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.initOffer\n\t     * @fires respoke.PeerConnection#initOffer\n\t     * @private\n\t     */\n\t    function initOffer() {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t\n\t        if (that.state.receiveOnly) {\n\t            makeOptionsReceiveOnly(offerOptions);\n\t        }\n\t\n\t        if (that.state.sendOnly) {\n\t            makeOptionsSendOnly(offerOptions);\n\t        }\n\t\n\t        log.info('creating offer', offerOptions);\n\t        pc.createOffer(saveOfferAndSend, function errorHandler(p) {\n\t            log.error('createOffer failed');\n\t        }, offerOptions);\n\t    }\n\t\n\t    function makeOptionsReceiveOnly(options) {\n\t        if (navigator.webkitGetUserMedia) {\n\t            options.mandatory = {\n\t                OfferToReceiveVideo: true,\n\t                OfferToReceiveAudio: true,\n\t                OfferToSendVideo: false,\n\t                OfferToSendAudio: false\n\t            };\n\t        } else {\n\t            options.offerToReceiveVideo = true;\n\t            options.offerToReceiveAudio = true;\n\t            options.offerToSendVideo = false;\n\t            options.offerToSendAudio = false;\n\t        }\n\t    }\n\t\n\t    function makeOptionsSendOnly(options) {\n\t        if (navigator.webkitGetUserMedia) {\n\t            options.mandatory = {\n\t                OfferToSendVideo: true,\n\t                OfferToSendAudio: true,\n\t                OfferToReceiveVideo: false,\n\t                OfferToReceiveAudio: false\n\t            };\n\t        } else {\n\t            options.offerToSendVideo = true;\n\t            options.offerToSendAudio = true;\n\t            options.offerToReceiveVideo = false;\n\t            options.offerToReceiveAudio = false;\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Process a remote offer if we are not the caller. This is necessary because we don't process the offer until\n\t     * the callee has answered the call.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.processOffer\n\t     * @param {RTCSessionDescriptor}\n\t     * @returns {Promise}\n\t     */\n\t    that.processOffer = function (oOffer) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        log.debug('processOffer', oOffer);\n\t\n\t        that.report.sdpsReceived.push(oOffer);\n\t        that.report.lastSDPString = oOffer.sdp;\n\t\n\t        //set flags for audio / video being offered\n\t        that.sdpExpectedStreamCount = respoke.sdpStreamCount(oOffer.sdp);\n\t        that.call.hasDataChannel = respoke.sdpHasDataChannel(oOffer.sdp);\n\t\n\t        try {\n\t            pc.setRemoteDescription(new RTCSessionDescription(oOffer),\n\t                function successHandler() {\n\t                    if (!pc) {\n\t                        return;\n\t                    }\n\t\n\t                    processReceivingQueue();\n\t                    log.debug('set remote desc of offer succeeded');\n\t                    pc.createAnswer(function successHandler(oSession) {\n\t                        that.state.processedRemoteSDP = true;\n\t                        saveAnswerAndSend(oSession);\n\t                    }, function errorHandler(err) {\n\t                        err = new Error(\"Error creating SDP answer.\" + err.message);\n\t                        that.report.callStoppedReason = err.message;\n\t                        /**\n\t                         * This event is fired on errors that occur during call setup or media negotiation.\n\t                         * @event respoke.Call#error\n\t                         * @type {respoke.Event}\n\t                         * @property {string} reason - A human readable description about the error.\n\t                         * @property {respoke.Call} target\n\t                         * @property {string} name - the event name.\n\t                         */\n\t                        that.call.fire('error', {\n\t                            message: err.message\n\t                        });\n\t                        log.error('create answer failed');\n\t                        that.report.callStoppedReason = 'setRemoteDescription failed at answer.';\n\t                        that.close();\n\t                    });\n\t                }, function errorHandler(err) {\n\t                    err = new Error('Error calling setRemoteDescription on offer I received.' + err.message);\n\t                    that.report.callStoppedReason = err.message;\n\t                    /**\n\t                     * This event is fired on errors that occur during call setup or media negotiation.\n\t                     * @event respoke.Call#error\n\t                     * @type {respoke.Event}\n\t                     * @property {string} reason - A human readable description about the error.\n\t                     * @property {respoke.Call} target\n\t                     * @property {string} name - the event name.\n\t                     */\n\t                    that.call.fire('error', {\n\t                        message: err.message\n\t                    });\n\t                }\n\t            );\n\t        } catch (err) {\n\t            var newErr = new Error(\"Exception calling setRemoteDescription on offer I received.\" + err.message);\n\t            that.report.callStoppedReason = newErr.message;\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.call.fire('error', {\n\t                message: newErr.message\n\t            });\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Return media stats. Since we have to wait for both the answer and offer to be available before starting\n\t     * statistics, we'll return a promise for the stats object.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.getStats\n\t     * @returns {Promise<{respoke.MediaStatsParser}>|undefined}\n\t     * @param {object} params\n\t     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onSuccess] - Success handler for this\n\t     * invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @fires respoke.PeerConnection#stats\n\t     */\n\t    function getStats(params) {\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t\n\t        if (!respoke.MediaStats) {\n\t            deferred.reject(new Error(\"Statistics module is not loaded.\"));\n\t            return retVal;\n\t        }\n\t\n\t        function onConnect() {\n\t            var stats = respoke.MediaStatsParser({\n\t                peerConnection: pc,\n\t                interval: params.interval,\n\t                onStats: function statsHandler(stats) {\n\t                    if (!pc) {\n\t                        return;\n\t                    }\n\t\n\t                    /**\n\t                     * This event is fired every 5 seconds by default, configurable by the 'interval' property to\n\t                     * `call.startStats` and reports the current state of media statistics.\n\t                     * @event respoke.PeerConnection#stats\n\t                     * @type {respoke.Event}\n\t                     * @property {object} stats - an object with stats in it.\n\t                     * @property {string} name - the event name.\n\t                     * @property {respoke.PeerConnection}\n\t                     */\n\t                    that.fire('stats', {\n\t                        stats: stats\n\t                    });\n\t                }\n\t            });\n\t            that.listen('close', function closeHandler(evt) {\n\t\n\t                stats.stopStats();\n\t            }, true);\n\t            deferred.resolve();\n\t        }\n\t\n\t        if (!pc) {\n\t            that.once('stream-received', onConnect);\n\t        } else {\n\t            onConnect();\n\t        }\n\t\n\t        return retVal;\n\t    }\n\t\n\t    if (respoke.MediaStats) {\n\t        that.getStats = getStats;\n\t    }\n\t\n\t    /**\n\t     * Create the RTCPeerConnection and add handlers. Process any offer we have already received.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.init\n\t     */\n\t    that.init = function init() {\n\t        log.debug('PC.init');\n\t\n\t        if (pc) {\n\t            return;\n\t        }\n\t\n\t        that.report.callStarted = new Date().getTime();\n\t\n\t        pc = new RTCPeerConnection(that.servers, pcOptions);\n\t        pc.onicecandidate = onIceCandidate;\n\t        pc.onnegotiationneeded = onNegotiationNeeded;\n\t        pc.oniceconnectionstatechange = onIceConnectionStateChange;\n\t        pc.onaddstream = function onaddstream(evt) {\n\t            /**\n\t             * Indicate the RTCPeerConnection has received remote media.\n\t             * @event respoke.PeerConnection#remote-stream-received\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('remote-stream-received', {\n\t                stream: evt.stream\n\t            });\n\t        };\n\t        pc.onremovestream = function onremovestream(evt) {\n\t            /**\n\t             * Indicate the remote side has stopped sending media.\n\t             * @event respoke.PeerConnection#remote-stream-removed\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('remote-stream-removed', {\n\t                stream: evt.stream\n\t            });\n\t        };\n\t        pc.ondatachannel = function ondatachannel(evt) {\n\t            /**\n\t             * CAUTION: This event is only called for the callee because RTCPeerConnection#ondatachannel\n\t             * is only called for the callee.\n\t             * @event respoke.PeerConnection#direct-connection\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('direct-connection', {\n\t                channel: evt.channel\n\t            });\n\t        };\n\t\n\t        that.state.listen('offering:entry', function (evt) {\n\t            if (that.state.caller) {\n\t                initOffer();\n\t            }\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Return an array of remote media streams.\n\t     * @muremberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.getRemoteStreams\n\t     */\n\t    that.getRemoteStreams = function () {\n\t        if (!pc) {\n\t            return [];\n\t        }\n\t        return pc.getRemoteStreams.apply(pc, Array.prototype.slice.call(arguments));\n\t    };\n\t\n\t    /**\n\t     * Return an array of local media streams.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.getLocalStreams\n\t     */\n\t    that.getLocalStreams = function () {\n\t        if (!pc) {\n\t            return [];\n\t        }\n\t        return pc.getLocalStreams.apply(pc, Array.prototype.slice.call(arguments));\n\t    };\n\t\n\t    /**\n\t     * Create a data channel.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.createDataChannel\n\t     */\n\t    that.createDataChannel = function () {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        return pc.createDataChannel.apply(pc, Array.prototype.slice.call(arguments));\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.addStream\n\t     * Expose addStream.\n\t     * @param {RTCMediaStream}\n\t     */\n\t    that.addStream = function (stream) {\n\t        if (!pc) {\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.call.fire('error', {\n\t                message: \"Got local stream in a precall state.\"\n\t            });\n\t            return;\n\t        }\n\t        pc.addStream(stream);\n\t    };\n\t\n\t    /**\n\t     * Process a local ICE Candidate\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.onIceCandidate\n\t     * @private\n\t     * @param {RTCIceCandidate}\n\t     */\n\t    function onIceCandidate(oCan) {\n\t        var candidate = oCan.candidate; // {candidate: ..., sdpMLineIndex: ... }\n\t        if (!pc || !candidate || !candidate.candidate) {\n\t            return;\n\t        }\n\t\n\t        if (that.forceTurn === true && candidate.candidate.indexOf(\"typ relay\") === -1) {\n\t            log.debug(\"Dropping candidate because forceTurn is on.\");\n\t            return;\n\t        } else if (that.disableTurn === true && candidate.candidate.indexOf(\"typ relay\") !== -1) {\n\t            log.debug(\"Dropping candidate because disableTurn is on.\");\n\t            return;\n\t        }\n\t\n\t        candidateSendingQueue.push(candidate);\n\t    }\n\t\n\t    /**\n\t     * Handle ICE state change\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.onIceConnectionStateChange\n\t     * @private\n\t     */\n\t    function onIceConnectionStateChange(evt) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t\n\t        if (pc.iceConnectionState === 'connected') {\n\t            /**\n\t             * Indicate that we've successfully connected to the remote side. This is only helpful for the\n\t             * outgoing connection.\n\t             * @event respoke.PeerConnection#connect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('connect');\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Handle renegotiation\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.onNegotiationNeeded\n\t     * @private\n\t     */\n\t    function onNegotiationNeeded() {\n\t        log.warn(\"Negotiation needed.\");\n\t    }\n\t\n\t    /**\n\t     * Process any ICE candidates that we received from our browser before we were able to send\n\t     * our SDP to the other side.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.processSendingQueue\n\t     * @private\n\t     */\n\t    function processSendingQueue() {\n\t        candidateSendingQueue.trigger(function sendIce(can) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t\n\t            signalCandidate({\n\t                candidate: can,\n\t                call: that.call\n\t            });\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Process any ICE candidates that we received from the other side while we were waiting on the other\n\t     * party's SDP to arrive and be processed.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.processReceivingQueue\n\t     * @private\n\t     */\n\t    function processReceivingQueue() {\n\t        candidateReceivingQueue.trigger(function processIce(can) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t\n\t            pc.addIceCandidate(new RTCIceCandidate(can.candidate), function onSuccess() {\n\t                log.debug((that.state.caller ? 'caller' : 'callee'), 'got a remote candidate.', can.candidate);\n\t                that.report.candidatesReceived.push(can.candidate);\n\t            }, function onError(e) {\n\t                log.error(\"Couldn't add ICE candidate: \" + e.message, can.candidate);\n\t            });\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Save an SDP we've gotten from the browser which will be an offer and send it to the other\n\t     * side.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.saveOfferAndSend\n\t     * @param {RTCSessionDescription}\n\t     * @private\n\t     */\n\t    function saveOfferAndSend(oSession) {\n\t        oSession.type = 'offer';\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        log.debug('setting and sending offer', oSession);\n\t        that.report.sdpsSent.push(oSession);\n\t\n\t        pc.setLocalDescription(oSession, function successHandler(p) {\n\t            oSession.type = 'offer';\n\t            signalOffer({\n\t                call: that.call,\n\t                sessionDescription: oSession,\n\t                onSuccess: function () {\n\t                    that.state.sentSDP = true;\n\t                    processSendingQueue();\n\t                },\n\t                onError: function (err) {\n\t                    log.error('offer could not be sent', err);\n\t                    that.call.hangup({signal: false});\n\t                }\n\t            });\n\t        }, function errorHandler(p) {\n\t            var err = new Error('Error calling setLocalDescription on offer I created.');\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.call.fire('error', {\n\t                message: err.message\n\t            });\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Save our SDP we've gotten from the browser which will be an answer and send it to the\n\t     * other side.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.saveAnswerAndSend\n\t     * @param {RTCSessionDescription}\n\t     * @private\n\t     */\n\t    function saveAnswerAndSend(oSession) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t\n\t        if (!that.state.caller) {\n\t            that.report.callerconnection = that.call.connectionId;\n\t        }\n\t\n\t        oSession.type = 'answer';\n\t        log.debug('setting and sending answer', oSession);\n\t        that.report.sdpsSent.push(oSession);\n\t\n\t        pc.setLocalDescription(oSession, function successHandler(p) {\n\t            oSession.type = 'answer';\n\t            signalAnswer({\n\t                sessionDescription: oSession,\n\t                call: that.call,\n\t                onSuccess: processSendingQueue\n\t            });\n\t            that.state.sentSDP = true;\n\t        }, function errorHandler(p) {\n\t            var err = new Error('Error calling setLocalDescription on answer I created.');\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.call.fire('error', {\n\t                message: err.message\n\t            });\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n\t     * signal is not false and we have not received a hangup signal from the remote party.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.close\n\t     * @fires respoke.PeerConnection#destoy\n\t     * @param {object} param\n\t     * @param {boolean} [param.signal] - Optional flag to indicate whether to send or suppress sending\n\t     * a hangup signal to the remote side. This is set to false by the library if we're responding to a\n\t     * hangup signal.\n\t     * @fires respoke.PeerConnection#close\n\t     */\n\t    that.close = function (params) {\n\t        params = params || {};\n\t        toSendHangup = true;\n\t\n\t        if (that.state.caller === true) {\n\t            if (!that.state.sentSDP) {\n\t                // Never send hangup if we are the caller but we haven't sent any other signal yet.\n\t                toSendHangup = false;\n\t            }\n\t        }\n\t\n\t        toSendHangup = (typeof params.signal === 'boolean' ? params.signal : toSendHangup);\n\t        if (toSendHangup) {\n\t            log.info('sending hangup');\n\t            signalHangup({\n\t                call: that.call\n\t            });\n\t        }\n\t\n\t        that.report.callStopped = new Date().getTime();\n\t\n\t        /**\n\t         * Indicate that the RTCPeerConnection is closed.\n\t         * @event respoke.PeerConnection#close\n\t         * @type {respoke.Event}\n\t         * @property {boolean} sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.PeerConnection}\n\t         */\n\t        that.fire('close', {\n\t            sentSignal: toSendHangup\n\t        });\n\t        that.ignore();\n\t\n\t        if (pc && that.report) {\n\t            pc.close();\n\t        }\n\t        pc = null;\n\t\n\t        if (that.call.enableCallDebugReport) {\n\t            signalReport({\n\t                report: that.report\n\t            });\n\t        }\n\t        that.report = null;\n\t    };\n\t    that.close = respoke.callOnce(that.close);\n\t\n\t    /**\n\t     * Indicate whether a call is being setup or is in progress.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.isActive\n\t     * @returns {boolean}\n\t     */\n\t    that.isActive = function () {\n\t        return !!(pc && ['completed', 'connected', 'new', 'checking'].indexOf(pc.iceConnectionState) > -1);\n\t    };\n\t\n\t    /**\n\t     * Save the answer and tell the browser about it.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.listenAnswer\n\t     * @param {object} evt\n\t     * @param {object} evt.signal - The signal, including the remote SDP and the connectionId of the endpoint who\n\t     * answered the call.\n\t     * @private\n\t     */\n\t    function listenAnswer(evt) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        log.debug('got answer', evt.signal);\n\t\n\t        that.report.sdpsReceived.push(evt.signal.sessionDescription);\n\t        that.state.sendOnly = respoke.sdpHasReceiveOnly(evt.signal.sessionDescription.sdp);\n\t        that.sdpExpectedStreamCount = respoke.sdpStreamCount(evt.signal.sessionDescription.sdp);\n\t        that.report.lastSDPString = evt.signal.sessionDescription.sdp;\n\t\n\t        if (that.state.caller) {\n\t            that.report.calleeconnection = evt.signal.fromConnection;\n\t        }\n\t\n\t        that.call.connectionId = evt.signal.fromConnection;\n\t        // TODO don't signal connected more than once.\n\t        signalConnected({\n\t            call: that.call\n\t        });\n\t\n\t        pc.setRemoteDescription(\n\t            new RTCSessionDescription(evt.signal.sessionDescription),\n\t            function successHandler() {\n\t                processReceivingQueue();\n\t                that.state.dispatch('receiveAnswer');\n\t            }, function errorHandler(p) {\n\t                var newErr = new Error(\"Exception calling setRemoteDescription on answer I received.\");\n\t                that.report.callStoppedReason = newErr.message;\n\t                /**\n\t                 * This event is fired on errors that occur during call setup or media negotiation.\n\t                 * @event respoke.Call#error\n\t                 * @type {respoke.Event}\n\t                 * @property {string} reason - A human readable description about the error.\n\t                 * @property {respoke.Call} target\n\t                 * @property {string} name - the event name.\n\t                 */\n\t                that.call.fire('error', {\n\t                    message: newErr.message\n\t                });\n\t                log.error('set remote desc of answer failed', evt.signal.sessionDescription, p);\n\t                that.report.callStoppedReason = 'setRemoteDescription failed at answer.';\n\t                that.close();\n\t            }\n\t        );\n\t    }\n\t\n\t    /**\n\t     * Figure out who won the call. This necessary to prevent two connections of the same endpoint from thinking\n\t     * they are both on the same call.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.listenConnected\n\t     * @private\n\t     */\n\t    function listenConnected(evt) {\n\t        if (evt.signal.connectionId !== client.connectionId) {\n\t            log.debug(\"Hanging up because I didn't win the call.\", evt.signal, client);\n\t            that.call.hangup({signal: false});\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Send the initiate signal to start the modify process. This method is only called by the caller of the\n\t     * renegotiation.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.startModify\n\t     * @param {object} params\n\t     * @param {object} [params.constraints] - Indicate this is a request for media and what type of media.\n\t     * @param {boolean} [params.directConnection] - Indicate this is a request for a direct connection.\n\t     */\n\t    that.startModify = function (params) {\n\t        defModify = Q.defer();\n\t        signalModify({\n\t            action: 'initiate',\n\t            call: that.call,\n\t            constraints: params.constraints,\n\t            directConnection: params.directConnection\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Indicate a desire from the other side to renegotiate media.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.listenModify\n\t     * @param {object} evt\n\t     * @param {object} evt.signal\n\t     * @private\n\t     */\n\t    function listenModify(evt) {\n\t        var err;\n\t        log.debug('PC.listenModify', evt.signal);\n\t\n\t        if (evt.signal.action === 'accept') {\n\t            if (defModify.promise.isPending()) {\n\t                defModify.resolve();\n\t                /**\n\t                 * Indicate that the remote party has accepted our invitation to begin renegotiating media.\n\t                 * @event respoke.PeerConnection#modify-accept\n\t                 * @type {respoke.Event}\n\t                 * @property {string} name - the event name.\n\t                 * @property {respoke.PeerConnection}\n\t                 */\n\t                that.fire('modify-accept', {signal: evt.signal});\n\t            }\n\t            return;\n\t        } else if (evt.signal.action === 'reject') {\n\t            if (defModify.promise.isPending()) {\n\t                err = new Error(\"Remote party cannot negotiate.\");\n\t                log.debug(err.message);\n\t                defModify.reject(err);\n\t                /**\n\t                 * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n\t                 * @event respoke.PeerConnection#modify-reject\n\t                 * @type {respoke.Event}\n\t                 * @property {Error} err\n\t                 * @property {string} name - the event name.\n\t                 * @property {respoke.PeerConnection}\n\t                 */\n\t                that.fire('modify-reject', {err: err});\n\t            }\n\t            return;\n\t        }\n\t\n\t        // This code only gets executed if signal.action === 'initiate'\n\t        if (defModify && defModify.promise.isPending()) {\n\t            // TODO compare signal request ID and accept if we have the higher request ID,\n\t            // reject if we have the lower request ID.\n\t            err = new Error(\"Got modify in a negotiating state.\");\n\t            log.debug(err.message);\n\t            defModify.reject(err);\n\t            /**\n\t             * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n\t             * @event respoke.PeerConnection#modify-reject\n\t             * @type {respoke.Event}\n\t             * @property {Error} err\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('modify-reject', {err: err});\n\t            signalModify({\n\t                action: 'reject',\n\t                call: that.call\n\t            });\n\t            return;\n\t        }\n\t\n\t        defModify = Q.defer();\n\t\n\t        if (!that.state.sentSDP || that.state.isState('idle')) {\n\t            err = new Error(\"Got modify in a precall state.\");\n\t            /**\n\t             * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n\t             * @event respoke.PeerConnection#modify-reject\n\t             * @type {respoke.Event}\n\t             * @property {Error} err\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('modify-reject', {err: err});\n\t            signalModify({\n\t                action: 'reject',\n\t                call: that.call\n\t            });\n\t            defModify.reject(err);\n\t            return;\n\t        }\n\t\n\t        /**\n\t         * Indicate that the remote party has accepted our invitation to begin renegotiating media.\n\t         * @event respoke.PeerConnection#modify-accept\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.PeerConnection}\n\t         */\n\t        that.fire('modify-accept', {signal: evt.signal});\n\t        signalModify({\n\t            action: 'accept',\n\t            call: that.call\n\t        });\n\t        defModify.resolve();\n\t    }\n\t\n\t    /**\n\t     * Save the candidate. If we initiated the call, place the candidate into the queue so\n\t     * we can process them after we receive the answer.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.addRemoteCandidate\n\t     * @param {object} params\n\t     * @param {RTCIceCandidate} params.candidate\n\t     */\n\t    that.addRemoteCandidate = function (params) {\n\t        if (!pc && (that.state.sentSDP || that.state.receivedSDP)) { // we hung up.\n\t            return;\n\t        }\n\t\n\t        if (!params || !params.candidate || !params.candidate.hasOwnProperty('sdpMLineIndex')) {\n\t            log.warn(\"addRemoteCandidate got wrong format!\", params);\n\t            return;\n\t        }\n\t\n\t        candidateReceivingQueue.push(params);\n\t    };\n\t\n\t    that.call.listen('signal-answer', listenAnswer, true);\n\t    that.call.listen('signal-connected', listenConnected, true);\n\t    that.call.listen('signal-modify', listenModify, true);\n\t\n\t    return that;\n\t}; // End respoke.PeerConnection\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar respoke = __webpack_require__(13);\n\tvar log = respoke.log;\n\tvar Statechart = __webpack_require__(23);\n\tvar Q = __webpack_require__(21);\n\t\n\t/**\n\t * State machine for WebRTC calling, data channels, and screen sharing.\n\t * NOTE: All state transitions are synchronous! However, listeners to the events this class fires will be called\n\t * asynchronously.\n\t * @class respoke.CallState\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {respoke.Call} call\n\t * @link https://cdn.respoke.io/respoke.min.js\n\t * @returns {respoke.CallState}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var fsm;\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    that.className = 'respoke.CallState';\n\t    delete that.instanceId;\n\t\n\t    var client = respoke.getClient(instanceId);\n\t    var allTimers = [];\n\t    var answerTimer;\n\t    var answerTimeout = params.answerTimeout || 10000;\n\t    var receiveAnswerTimer;\n\t    var receiveAnswerTimeout = params.receiveAnswerTimeout || 60000;\n\t    var connectionTimer;\n\t    var connectionTimeout = params.connectionTimeout || 10000;\n\t    var modifyTimer;\n\t    var modifyTimeout = params.modifyTimeout || 60000;\n\t    var oldRole;\n\t\n\t    /*!\n\t     * These can quite often result in a condition in which they do not cause a transition to occur.\n\t     * There is at least one \"universal\" (air quotes) event which probably? shouldn't? but may\n\t     * result in a non-transition error when it's OK, and that is the 'reject' event.\n\t     */\n\t    var nontransitionEvents = ['receiveLocalMedia', 'receiveRemoteMedia', 'approve', 'answer', 'sentOffer',\n\t        'receiveAnswer'];\n\t\n\t    function assert(condition) {\n\t        if (!condition) {\n\t            throw new Error(\"Assertion failed.\");\n\t        }\n\t    }\n\t\n\t    that.hasLocalMediaApproval = false;\n\t    that.hasLocalMedia = false;\n\t    that.receivedBye = false;\n\t    that.isAnswered = false;\n\t    that.sentSDP = false;\n\t    that.receivedSDP = false;\n\t    that.processedRemoteSDP = false;\n\t    that.needDirectConnection = !!that.needDirectConnection;\n\t    that.sendOnly = !!that.sendOnly;\n\t    that.receiveOnly = !!that.receiveOnly;\n\t\n\t    // Event\n\t    var rejectEvent = [{\n\t        target: 'connected',\n\t        guard: function (params) {\n\t            // we have any media flowing or data channel open\n\t            if (typeof oldRole === 'boolean') {\n\t                // Reset the role if we have aborted a modify.\n\t                that.caller = oldRole;\n\t            }\n\t\n\t            if (modifyTimer) {\n\t                modifyTimer.clear();\n\t            }\n\t\n\t            return that.hasMedia();\n\t        }\n\t    }, {\n\t        target: 'terminated',\n\t        guard: function (params) {\n\t            params = params || {};\n\t            // we have no media flowing or data channel open\n\t            that.hangupReason = params.reason || \"no media\";\n\t            return !that.hasMedia();\n\t        }\n\t    }];\n\t\n\t    // Event\n\t    function rejectModify() {\n\t        // reject modification\n\t        if (modifyTimer) {\n\t            modifyTimer.clear();\n\t        }\n\t    }\n\t\n\t    // Event\n\t    function clearReceiveAnswerTimer() {\n\t        that.processedRemoteSDP = true;\n\t        if (receiveAnswerTimer) {\n\t            receiveAnswerTimer.clear();\n\t        }\n\t    }\n\t\n\t    // Event\n\t    var hangupEvent = {\n\t        target: 'terminated',\n\t        action: function (params) {\n\t            params = params || {};\n\t            that.signalBye = params.signal;\n\t            that.hangupReason = that.hangupReason || params.reason || \"none\";\n\t        }\n\t    };\n\t\n\t    function needToObtainMedia() {\n\t        return (\n\t            that.needDirectConnection !== true &&\n\t            that.receiveOnly !== true &&\n\t            that.hasLocalMedia !== true\n\t        );\n\t    }\n\t\n\t    function needToApproveDirectConnection(params) {\n\t        return (that.needDirectConnection === true && typeof params.previewLocalMedia === 'function');\n\t    }\n\t\n\t    function automaticOffering(params) {\n\t        if (that.caller !== true) {\n\t            return false;\n\t        }\n\t\n\t        // TODO: this will need to be change with media negotiation\n\t        if ((!that.needDirectConnection && that.receiveOnly) || that.hasLocalMedia) {\n\t            return true;\n\t        }\n\t        return (that.needDirectConnection === true && typeof params.previewLocalMedia !== 'function');\n\t    }\n\t\n\t    function hasListener() {\n\t        if ((client.hasListeners('call') && !that.needDirectConnection) ||\n\t                (client.hasListeners('direct-connection') && that.needDirectConnection)) {\n\t            return true;\n\t        } else {\n\t            return false;\n\t        }\n\t    }\n\t\n\t    function createTimer(func, name, time) {\n\t        var id = setTimeout(function () {\n\t            id = null;\n\t            log.error((that.caller ? \"caller's\" : \"callee's\"), name, \"timer expired.\");\n\t            func();\n\t        }, time);\n\t        log.debug('setting timer', name, 'for', time / 1000, 'secs');\n\t        var timer  = {\n\t            name: name,\n\t            clear: function () {\n\t                if (id === null) {\n\t                    return;\n\t                }\n\t                log.debug('clearing', (that.caller ? \"caller's\" : \"callee's\"), 'timer', name);\n\t                clearTimeout(id);\n\t                id = null;\n\t            }\n\t        };\n\t        allTimers.push(timer);\n\t        return timer;\n\t    }\n\t\n\t    var stateParams = {\n\t        initialState: 'idle',\n\t        states: {\n\t            // State\n\t            idle: {\n\t                // Event\n\t                exit: function () {\n\t                    that.fire('idle:exit');\n\t                },\n\t                // Event\n\t                initiate: [{\n\t                    target: 'negotiatingContainer',\n\t                    guard: function (params) {\n\t                        assert(typeof params.caller === 'boolean');\n\t                        return (params.caller === true || hasListener());\n\t                    }\n\t                }, {\n\t                    target: 'terminated',\n\t                    guard: function (params) {\n\t                        return (params.caller !== true && !hasListener());\n\t                    }\n\t                }],\n\t                receiveLocalMedia: function () {\n\t                    that.hasLocalMedia = true;\n\t                },\n\t                // Event\n\t                receiveOffer: {\n\t                    action: function (params) {\n\t                        that.receivedSDP = true;\n\t                    }\n\t                },\n\t                // Event\n\t                hangup: hangupEvent\n\t            },\n\t            // State\n\t            negotiatingContainer: {\n\t                init: \"preparing\",\n\t                // Event\n\t                hangup: hangupEvent,\n\t                // Event\n\t                modify: rejectModify,\n\t                // Event\n\t                receiveLocalMedia: function () {\n\t                    that.hasLocalMedia = true;\n\t                },\n\t                states: {\n\t                    preparing: {\n\t                        // Event\n\t                        entry: {\n\t                            action: function () {\n\t                                that.hasLocalMediaApproval = false;\n\t                                that.hasLocalMedia = false;\n\t                                that.sentSDP = false;\n\t                                that.receivedSDP = false;\n\t                                that.processedRemoteSDP = false;\n\t                                that.isAnswered = false;\n\t                                if (!that.isModifying()) {\n\t                                    answerTimer = createTimer(function () {\n\t                                        that.dispatch('reject', {reason: \"answer own call timer \" + that.caller});\n\t                                    }, 'answer own call', answerTimeout);\n\t                                }\n\t                                that.fire('preparing:entry');\n\t                            }\n\t                        },\n\t                        // Event\n\t                        exit: function () {\n\t                            that.fire('preparing:exit');\n\t                            if (answerTimer) {\n\t                                answerTimer.clear();\n\t                            }\n\t                        },\n\t                        // Event\n\t                        reject: rejectEvent,\n\t                        // Event\n\t                        receiveOffer: {\n\t                            action: function (params) {\n\t                                that.receivedSDP = true;\n\t                                if (that.isAnswered) {\n\t                                    // If we get here, we are the callee and we've answered the call before the call\n\t                                    // creation/receive offer promise chain completed.\n\t                                    setTimeout(function () {\n\t                                        that.dispatch('answer', params);\n\t                                    });\n\t                                }\n\t                            }\n\t                        },\n\t                        // Event\n\t                        answer: [{\n\t                            action: function (params) {\n\t                                assert(!params.previewLocalMedia || typeof params.previewLocalMedia === 'function');\n\t                                that.isAnswered = true;\n\t                                if (typeof params.previewLocalMedia !== 'function') {\n\t                                    that.hasLocalMediaApproval = true;\n\t                                }\n\t                            }\n\t                        }, {\n\t                            // we are going to send media\n\t                            target: 'approvingDeviceAccess',\n\t                            guard: needToObtainMedia\n\t                        }, {\n\t                            // we are sending a direct connection & developer wants to approve\n\t                            target: 'approvingContent',\n\t                            guard: needToApproveDirectConnection\n\t                        }, {\n\t                            target: 'offering',\n\t                            guard: automaticOffering\n\t                        }, {\n\t                            // we are not sending anything or developer does not want to approve media.\n\t                            target: 'connecting',\n\t                            guard: function (params) {\n\t                                // caller will always answer before sending offer.\n\t                                // callee will usually answer after receiving offer if media is requested.\n\t                                if (!that.receivedSDP) {\n\t                                    return false;\n\t                                }\n\t\n\t                                if (needToObtainMedia() || needToApproveDirectConnection(params) ||\n\t                                        automaticOffering(params)) {\n\t                                    return false;\n\t                                }\n\t\n\t                                if (!params.previewLocalMedia || that.receiveOnly) {\n\t                                    setTimeout(function () {\n\t                                        params.approve();\n\t                                    });\n\t                                }\n\t                                return (that.receiveOnly === true || that.needDirectConnection === true);\n\t                            }\n\t                        }]\n\t                    },\n\t                    // State\n\t                    gettingMedia: {\n\t                        reject: rejectEvent,\n\t                        // Event\n\t                        receiveLocalMedia: [{\n\t                            action: function () {\n\t                                that.hasLocalMedia = true;\n\t                            }\n\t                        }, {\n\t                            target: 'offering',\n\t                            guard: function (params) {\n\t                                return (that.caller === true && that.hasLocalMediaApproval === true &&\n\t                                    that.hasLocalMedia === true);\n\t                            }\n\t                        }, {\n\t                            target: 'connecting',\n\t                            guard: function (params) {\n\t                                return (that.caller === false && that.hasLocalMediaApproval === true &&\n\t                                    that.hasLocalMedia === true);\n\t                            }\n\t                        }],\n\t                        states: {\n\t                            // State\n\t                            approvingDeviceAccess: {\n\t                                // Event\n\t                                entry: function () {\n\t                                    that.fire('approving-device-access:entry');\n\t                                },\n\t                                // Event\n\t                                approve: [{\n\t                                    target: 'approvingContent',\n\t                                    guard: function (params) {\n\t                                        return (typeof params.previewLocalMedia === 'function');\n\t                                    }\n\t                                }, {\n\t                                    target: 'connecting',\n\t                                    guard: function (params) {\n\t                                        return (that.caller === false &&\n\t                                            (that.hasLocalMedia === true || that.needDirectConnection === true) &&\n\t                                            typeof params.previewLocalMedia !== 'function');\n\t                                    }\n\t                                }, {\n\t                                    target: 'offering',\n\t                                    guard: function (params) {\n\t                                        return (that.caller === true && that.hasLocalMedia === true &&\n\t                                            typeof params.previewLocalMedia !== 'function');\n\t                                    }\n\t                                }]\n\t                            },\n\t                            // State\n\t                            approvingContent: {\n\t                                // Event\n\t                                entry: function () {\n\t                                    that.fire('approving-content:entry');\n\t                                },\n\t                                // Event\n\t                                exit: function () {\n\t                                    that.fire('approving-content:exit');\n\t                                },\n\t                                // Event\n\t                                approve: [function (params) {\n\t                                    that.hasLocalMediaApproval = true;\n\t                                }, {\n\t                                    target: 'offering',\n\t                                    guard: function (params) {\n\t                                        return (that.caller === true && that.hasLocalMedia === true);\n\t                                    }\n\t                                }, {\n\t                                    target: 'connecting',\n\t                                    guard: function (params) {\n\t                                        return (that.caller === false && that.hasLocalMedia === true);\n\t                                    }\n\t                                }]\n\t                            }\n\t                        }\n\t                    },\n\t                    // State\n\t                    offeringContainer: {\n\t                        init: 'offering',\n\t                        reject: rejectEvent,\n\t                        sentOffer: function () {\n\t                            // start answer timer\n\t                            receiveAnswerTimer = createTimer(function () {\n\t                                that.dispatch('reject', {reason: \"receive answer timer\"});\n\t                            }, 'receive answer', receiveAnswerTimeout);\n\t                        },\n\t                        states: {\n\t                            offering: {\n\t                                // Event\n\t                                entry: function () {\n\t                                    that.fire('offering:entry');\n\t                                },\n\t                                // Event\n\t                                exit: function () {\n\t                                    that.fire('offering:exit');\n\t                                },\n\t                                // Event\n\t                                receiveLocalMedia: [function () {\n\t                                    that.hasLocalMedia = true;\n\t                                }, {\n\t                                    target: 'connected',\n\t                                    guard: function (params) {\n\t                                        // for direct connection, local media is the same as remote media\n\t                                        return (that.needDirectConnection === true);\n\t                                    }\n\t                                }],\n\t                                // Event\n\t                                receiveRemoteMedia: {\n\t                                    target: 'connected'\n\t                                },\n\t                                // Event\n\t                                receiveAnswer: [clearReceiveAnswerTimer, {\n\t                                    target: 'connecting'\n\t                                }]\n\t                            }\n\t                        }\n\t                    },\n\t                    // State\n\t                    connectingContainer: {\n\t                        init: 'connecting',\n\t                        reject: rejectEvent,\n\t                        receiveAnswer: clearReceiveAnswerTimer,\n\t                        states: {\n\t                            connecting: {\n\t                                // Event\n\t                                entry: function () {\n\t                                    that.fire('connecting:entry');\n\t\n\t                                    // set connection timer\n\t                                    connectionTimer = createTimer(function () {\n\t                                        that.dispatch('reject', {reason: \"connection timer\"});\n\t                                    }, 'connection', connectionTimeout);\n\t                                },\n\t                                // Event\n\t                                exit: function () {\n\t                                    if (connectionTimer) {\n\t                                        connectionTimer.clear();\n\t                                    }\n\t                                    if (modifyTimer) {\n\t                                        modifyTimer.clear();\n\t                                    }\n\t                                    that.fire('connecting:exit');\n\t                                },\n\t                                // Event\n\t                                receiveLocalMedia: [{\n\t                                    action: function () {\n\t                                        that.hasLocalMedia = true;\n\t                                    }\n\t                                }, {\n\t                                    target: 'connected',\n\t                                    guard: function (params) {\n\t                                        // for direct connection, local media is the same as remote media\n\t                                        return (that.needDirectConnection === true && that.caller === false);\n\t                                    }\n\t                                }],\n\t                                // Event\n\t                                receiveRemoteMedia: {\n\t                                    target: 'connected'\n\t                                }\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            },\n\t            // State\n\t            // This state is for when we are in limbo between connected and negotiating and we are\n\t            // trying to figure out if the other side will allow us to modify. If we receive modify in\n\t            // this state, we will reject it. If the other party is in connected, we will be able to modify.\n\t            modifyingContainer: {\n\t                init: 'modifying',\n\t                reject: rejectEvent,\n\t                // Event\n\t                modify: rejectModify,\n\t                // Event\n\t                hangup: hangupEvent,\n\t                states: {\n\t                    modifying: {\n\t                        // Event\n\t                        entry: function () {\n\t                            modifyTimer = createTimer(function () {\n\t                                that.dispatch('reject', {reason: \"modify timer\"});\n\t                            }, 'modify for caller', modifyTimeout);\n\t                            that.fire('modifying:entry');\n\t                        },\n\t                        // Event\n\t                        accept: [function () {\n\t                            that.caller = true;\n\t                        }, {\n\t                            target: 'preparing'\n\t                        }],\n\t                        // Event\n\t                        exit: function () {\n\t                            that.fire('modifying:exit');\n\t                        }\n\t                    }\n\t                }\n\t            },\n\t            // State\n\t            connectedContainer: {\n\t                init: 'connected',\n\t                reject: {\n\t                    target: 'terminated',\n\t                    action: function (params) {\n\t                        that.hangupReason = params.reason || \"got reject while connected\";\n\t                    }\n\t                },\n\t                receiveAnswer: clearReceiveAnswerTimer,\n\t                // Event\n\t                hangup: hangupEvent,\n\t                states: {\n\t                    connected: {\n\t                        // Event\n\t                        entry: function () {\n\t                            oldRole = that.caller;\n\t                            that.needDirectConnection = false;\n\t                            that.fire('connected:entry');\n\t                        },\n\t                        // Event\n\t                        exit: function () {\n\t                            that.fire('connected:exit');\n\t                        },\n\t                        // Event\n\t                        modify: [{\n\t                            // be notified that the other side would like modification\n\t                            target: 'preparing',\n\t                            guard: function (params) {\n\t                                params = params || {};\n\t                                if (params.receive === true) {\n\t                                    that.caller = false;\n\t                                    modifyTimer = createTimer(function () {\n\t                                        // If modify gets interrupted, go back to previous roles.\n\t                                        that.dispatch('reject', {reason: \"modify timer\"});\n\t                                    }, 'modify', modifyTimeout);\n\t                                    return true;\n\t                                }\n\t                            }\n\t                        }, {\n\t                            // request to begin modification\n\t                            target: 'modifying',\n\t                            guard: function (params) {\n\t                                params = params || {};\n\t                                return (params.receive !== true);\n\t                            }\n\t                        }]\n\t                    }\n\t                }\n\t            },\n\t            // State\n\t            terminatedContainer: {\n\t                init: 'terminated',\n\t                states: {\n\t                    terminated: {\n\t                        // Event\n\t                        entry: {\n\t                            action: function () {\n\t                                that.fire('terminated:entry');\n\t                                allTimers.forEach(function (timer) {\n\t                                    timer.clear();\n\t                                });\n\t                                setTimeout(function () {\n\t                                    fsm = null;\n\t                                    that.ignore();\n\t                                });\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    };\n\t\n\t    stateParams.that = Object.create(Statechart);\n\t    fsm = respoke.Class(stateParams);\n\t    fsm.run({\n\t        // rename to 'debug' to enable\n\t        debugOff: function () {\n\t            // So we can print the caller. Debug most often used when testing & tests run in the same tab.\n\t            var args = Array.prototype.slice.call(arguments);\n\t            args.splice(0, 0, that.caller);\n\t            log.debug.apply(log, args);\n\t        }\n\t    });\n\t\n\t    /**\n\t     * Return the name of the current state.\n\t     * @memberof! respoke.CallState\n\t     * @method respoke.Call.getState\n\t     * @returns {string}\n\t     */\n\t    that.getState = function () {\n\t        if (!fsm) {\n\t            return 'terminated';\n\t        }\n\t        return fsm.currentState().name;\n\t    };\n\t\n\t    /**\n\t     * Synchronously dispatch an event, which may or may not change the state.\n\t     * @memberof! respoke.CallState\n\t     * @method respoke.Call.dispatch\n\t     */\n\t    that.dispatch = function (evt, args) {\n\t        var oldState;\n\t        var newState;\n\t\n\t        if (!fsm) {\n\t            return;\n\t        }\n\t\n\t        oldState = that.getState();\n\t        try {\n\t            fsm.dispatch(evt, args);\n\t        } catch (err) {\n\t            log.debug('error dispatching', evt, 'from', oldState, \"with\", args, err);\n\t            throw err;\n\t        }\n\t        newState = that.getState();\n\t        if (oldState === newState && nontransitionEvents.indexOf(evt) === -1) {\n\t            log.debug(that.caller, \"Possible bad event \" + evt + \", no transition occured.\");\n\t        }\n\t        log.debug(that.caller, 'dispatching', evt, 'moving from ', oldState, 'to', newState, args);\n\t    };\n\t\n\t    /**\n\t     * Determine whether or not we are in the middle of a call modification.\n\t     * @memberof! respoke.CallState\n\t     * @method respoke.Call.isModifying\n\t     * @returns {boolean}\n\t     */\n\t    that.isModifying = function () {\n\t        var modifyingStates = ['preparing', 'modifying', 'approvingDeviceAccess', 'approvingMedia', 'offering'];\n\t        return (modifyingStates.indexOf(that.getState()) > -1 && that.hasMedia());\n\t    };\n\t\n\t    /**\n\t     * Helper for testing state name\n\t     * @memberof! respoke.CallState\n\t     * @method respoke.Call.isState\n\t     * @param {string} name\n\t     * @returns {boolean}\n\t     */\n\t    that.isState = function (name) {\n\t        return (that.getState() === name);\n\t    };\n\t\n\t    assert(typeof that.hasMedia === 'function');\n\t    assert(typeof that.caller === 'boolean');\n\t    return that;\n\t};\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar Q = __webpack_require__(21);\n\tvar respoke = __webpack_require__(13);\n\tvar log = respoke.log;\n\t\n\t/**\n\t * A `respoke.Call` is Respoke's interface into a WebRTC call, including getUserMedia,\n\t * path and codec negotation, and call state.\n\t * There are several methods on an instance of `respoke.Client` which return a `respoke.Call`.\n\t *\n\t * ```\n\t * var jim = client.getEndpoint({ id: 'jim' });\n\t * var call = jim.startAudioCall();\n\t * ```\n\t *\n\t * @class respoke.Call\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.instanceId - client id\n\t * @param {boolean} params.caller - whether or not we initiated the call\n\t * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t * @param {boolean} [params.sendOnly] - whether or not we send media\n\t * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t * relay servers. If it cannot flow through relay servers, the call will fail.\n\t * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t * required to flow peer-to-peer. If it cannot, the call will fail.\n\t * @param {respoke.Endpoint} params.remoteEndpoint - The endpoint who is being called.\n\t * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint.\n\t * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t * wants to perform an action between local media becoming available and calling approve().\n\t * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n\t * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n\t * @param {function} params.signalReport - Signaling action from SignalingChannel.\n\t * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n\t * @param {Array<RTCConstraints>} params.constraints - Array of WebRTC constraints. This is ignored when\n\t * `params.outgoingMedia` is passed into the Call object.\n\t * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t * media renegotiation.\n\t * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t * element with the local audio and/or video attached.\n\t * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n\t * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n\t * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n\t * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t * This callback will be called when media is muted or unmuted.\n\t * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t * for the user to give permission to start getting audio or video.\n\t * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t * the approval was automatic.\n\t * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n\t * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n\t * granted by the browser without asking the user to approve it.\n\t * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n\t * video attached to it.\n\t * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n\t * @param {respoke.LocalMedia} params.outgoingMedia - Pass in an optional LocalMedia object to override the one that is\n\t * built automatically when establishing the call. When this is defined then any constraints passed to the\n\t * call are ignored since the media object already exists.\n\t * video attached to it.\n\t * @returns {respoke.Call}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t    delete that.outgoingMedia;\n\t\n\t    /**\n\t     * A name to identify the type of object.\n\t     * @memberof! respoke.Call\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Call';\n\t\n\t    /**\n\t     * Whether or not the client is the caller of the call.\n\t     * @memberof! respoke.Call\n\t     * @name caller\n\t     * @type {boolean}\n\t     */\n\t    that.caller = !!that.caller;\n\t    Object.defineProperty(that, \"initiator\", {\n\t        configurable: true,\n\t        enumerable: true,\n\t        get: function () {\n\t            log.warn(\"The call.initiator flag is deprecated. Please use call.caller instead.\");\n\t            return that.caller;\n\t        },\n\t        set: function () {\n\t            // ignore\n\t        }\n\t    });\n\t\n\t    if (!that.caller) {\n\t        // Don't let Respoke.js pass any default constraints if we're accepting the call. We have no freaking clue\n\t        // what kind of media we are expected to provide at this point.\n\t        delete params.constraints;\n\t        that.constraints = [];\n\t    }\n\t\n\t    /**\n\t     * The call ID.\n\t     * @memberof! respoke.Call\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = that.caller ? respoke.makeGUID() : that.id;\n\t\n\t    // log the call id to the console for debugging purposes. Do not change this to `respoke.log`!\n\t    console.log(\"[Respoke] Creating call. id='\" + that.id + \"'\");\n\t\n\t    if (!that.id) {\n\t        throw new Error(\"Can't start a new call without a call id.\");\n\t    }\n\t\n\t    /**\n\t     * Promise used to trigger actions dependant upon having received media or a datachannel.\n\t     * @memberof! respoke.Call\n\t     * @name defMedia\n\t     * @private\n\t     * @type {Promise}\n\t     */\n\t    var defMedia = Q.defer();\n\t    /**\n\t     * Promise used to trigger notification of a request for renegotiating media. For the caller of the\n\t     * renegotiation (which doesn't have to be the same as the caller of the call), this is resolved\n\t     * or rejected as soon as the 'accept' or 'reject' signal is received. For the callee, it is\n\t     * resolved or rejected only after the developer or user approves or rejects the modify.\n\t     * @memberof! respoke.Call\n\t     * @name defModify\n\t     * @private\n\t     * @type {Promise}\n\t     */\n\t    var defModify;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name previewLocalMedia\n\t     * @private\n\t     * @type {respoke.Call.previewLocalMedia}\n\t     */\n\t    var previewLocalMedia = params.previewLocalMedia;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name client\n\t     * @private\n\t     * @type {respoke.getClient}\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name signalingChannel\n\t     * @private\n\t     * @type {respoke.signalingChannel}\n\t     */\n\t    var signalingChannel = params.signalingChannel;\n\t\n\t    /**\n\t     * Informational property. Whether call debugs were enabled on the client during creation.\n\t     * Changing this value will do nothing.\n\t     * @name enableCallDebugReport\n\t     * @type {boolean}\n\t     */\n\t    that.enableCallDebugReport = params.signalingChannel.isSendingReport();\n\t\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name pc\n\t     * @private\n\t     * @type {respoke.PeerConnection}\n\t     */\n\t    var pc = respoke.PeerConnection({\n\t        instanceId: instanceId,\n\t        state: respoke.CallState({\n\t            instanceId: instanceId,\n\t            caller: that.caller,\n\t            needDirectConnection: params.needDirectConnection,\n\t            sendOnly: params.sendOnly,\n\t            receiveOnly: params.receiveOnly,\n\t            // hasMedia is not defined yet.\n\t            hasMedia: function () {\n\t                return that.hasMedia();\n\t            }\n\t        }),\n\t        forceTurn: !!params.forceTurn,\n\t        call: that,\n\t        pcOptions: {\n\t            optional: [\n\t                { DtlsSrtpKeyAgreement: true },\n\t                { RtpDataChannels: false }\n\t            ]\n\t        },\n\t        offerOptions: params.offerOptions || null,\n\t        signalOffer: function (args) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t\n\t            params.signalOffer(args);\n\t            pc.state.dispatch('sentOffer');\n\t        },\n\t        signalConnected: params.signalConnected,\n\t        signalAnswer: params.signalAnswer,\n\t        signalModify: params.signalModify,\n\t        signalHangup: params.signalHangup,\n\t        signalReport: params.signalReport,\n\t        signalCandidate: params.signalCandidate\n\t    });\n\t\n\t    /**\n\t     * Array of streams of local media that we are sending to the remote party.\n\t     * @name outgoingMediaStreams\n\t     * @type {Array<respoke.LocalMedia>}\n\t     */\n\t    that.outgoingMediaStreams = [];\n\t    that.outgoingMediaStreams.hasAudio = function () {\n\t        if (that.outgoingMediaStreams.length === 0) {\n\t            return false;\n\t        }\n\t\n\t        return !that.outgoingMediaStreams.every(function (stream) {\n\t            return stream.getAudioTracks().length === 0;\n\t        });\n\t    };\n\t    that.outgoingMediaStreams.hasVideo = function () {\n\t        if (that.outgoingMediaStreams.length === 0) {\n\t            return false;\n\t        }\n\t\n\t        return !that.outgoingMediaStreams.every(function (stream) {\n\t            return stream.getVideoTracks().length === 0;\n\t        });\n\t    };\n\t\n\t    if (params.outgoingMedia) {\n\t        that.outgoingMediaStreams.push(params.outgoingMedia);\n\t    }\n\t\n\t    /**\n\t     * Local media that we are sending to the remote party. This will be undefined if we are sending no media.\n\t     * This property is just the first item in the `outgoingMediaStreams` array. If multiple streams are present,\n\t     * use that array to find the stream you need instead of relying on this property.\n\t     * @name outgoingMedia\n\t     * @type {respoke.LocalMedia}\n\t     */\n\t    Object.defineProperty(that, \"outgoingMedia\", {\n\t        configurable: false,\n\t        enumerable: true,\n\t        get: function () {\n\t            return that.outgoingMediaStreams[0];\n\t        },\n\t        set: function () {\n\t            // ignore\n\t        }\n\t    });\n\t\n\t    /**\n\t     * Array of streams of remote media that we are receiving from the remote party.\n\t     * @name incomingMediaStreams\n\t     * @type {Array<respoke.RemoteMedia>}\n\t     */\n\t    that.incomingMediaStreams = [];\n\t    that.incomingMediaStreams.hasAudio = function () {\n\t        if (that.incomingMediaStreams.length === 0) {\n\t            return false;\n\t        }\n\t\n\t        return !that.incomingMediaStreams.every(function (stream) {\n\t            return stream.getAudioTracks().length === 0;\n\t        });\n\t    };\n\t    that.incomingMediaStreams.hasVideo = function () {\n\t        if (that.incomingMediaStreams.length === 0) {\n\t            return false;\n\t        }\n\t\n\t        return !that.incomingMediaStreams.every(function (stream) {\n\t            return stream.getVideoTracks().length === 0;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Remote media that we are receiving from the remote party.  This will be undefined if we\n\t     * are receiving no media. This property is just the first item in the `incomingMediaStreams` array. If multiple\n\t     * streams are present, use that array to find the stream you need instead of relying on this property.\n\t     * @name incomingMedia\n\t     * @type {respoke.RemoteMedia}\n\t     */\n\t    Object.defineProperty(that, \"incomingMedia\", {\n\t        configurable: false,\n\t        enumerable: true,\n\t        get: function () {\n\t            return that.incomingMediaStreams[0];\n\t        },\n\t        set: function () {\n\t            // ignore\n\t        }\n\t    });\n\t\n\t    /**\n\t     * A flag indicating whether this call has audio or is expected to have audio coming in from the other side.\n\t     *\n\t     * @name hasAudio\n\t     * @type {boolean}\n\t     */\n\t    Object.defineProperty(that, \"hasAudio\", {\n\t        configurable: false,\n\t        enumerable: true,\n\t        get: that.incomingMediaStreams.hasAudio,\n\t        set: function () {\n\t            // ignore\n\t        }\n\t    });\n\t\n\t    /**\n\t     * A flag indicating whether this call has video or is expected to have video coming in from the other side.\n\t     *\n\t     * @name hasVideo\n\t     * @type {boolean}\n\t     */\n\t    Object.defineProperty(that, \"hasVideo\", {\n\t        configurable: false,\n\t        enumerable: true,\n\t        get: that.incomingMediaStreams.hasVideo,\n\t        set: function () {\n\t            // ignore\n\t        }\n\t    });\n\t\n\t    delete params.signalingChannel;\n\t    delete that.signalingChannel;\n\t\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name videoIsMuted\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var videoIsMuted = false;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name audioIsMuted\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var audioIsMuted = false;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name directConnection\n\t     * @private\n\t     * @type {respoke.DirectConnection}\n\t     */\n\t    var directConnection = null;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name toSendHangup\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var toSendHangup = null;\n\t\n\t    /**\n\t     * Set up promises. If we're not the caller, we need to listen for approval AND the remote SDP to come in\n\t     * before we can act on the call. Save parameters sent in with the constructor, then delete them off the call.\n\t     * If this call was initiated with a DirectConnection, set it up so answer() will be the approval mechanism.\n\t     * @method respoke.Call.init\n\t     * @memberof! respoke.Call\n\t     * @fires respoke.Client#call\n\t     * @private\n\t     */\n\t    function init() {\n\t        log.debug('Call.init');\n\t\n\t        if (defModify !== undefined) {\n\t            defMedia = Q.defer();\n\t        }\n\t\n\t        pc.init(); // instantiates RTCPeerConnection, can't call on modify\n\t        if (defModify === undefined && pc.state.needDirectConnection === true) {\n\t            actuallyAddDirectConnection(params);\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Register any event listeners passed in as callbacks, save other params to answer() and accept().\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.saveParameters\n\t     * @param {object} params\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n\t     * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will fire even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n\t     * user's media.  This event gets fired even if the allow process is automatic, i. e., permission and media is\n\t     * granted by the browser without asking the user to approve it.\n\t     * @param {Array<RTCConstraints>} [params.constraints]\n\t     * @param {boolean} [params.forceTurn]\n\t     * @param {boolean} [params.receiveOnly]\n\t     * @param {boolean} [params.sendOnly]\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     * @private\n\t     * @fires respoke.Call#stats\n\t     */\n\t    function saveParameters(params) {\n\t        var isNewConstraint;\n\t\n\t        /* This happens when the call is hung up automatically, for instance due to the lack of an onCall\n\t         * handler. In this case, pc has been set to null in hangup. The call has already failed, and the\n\t         * invocation of this function is an artifact of async code not being finished yet, so we can just\n\t         * skip all of this setup.\n\t         */\n\t        if (!pc) {\n\t            return;\n\t        }\n\t\n\t        that.listen('local-stream-received', params.onLocalMedia);\n\t        that.listen('connect', params.onConnect);\n\t        that.listen('hangup', params.onHangup);\n\t        that.listen('allow', params.onAllow);\n\t        that.listen('answer', params.onAnswer);\n\t        that.listen('approve', params.onApprove);\n\t        that.listen('mute', params.onMute);\n\t        that.listen('requesting-media', params.onRequestingMedia);\n\t\n\t        previewLocalMedia = typeof params.previewLocalMedia === 'function' ?\n\t            params.previewLocalMedia : previewLocalMedia;\n\t\n\t        pc.state.receiveOnly = typeof params.receiveOnly === 'boolean' ? params.receiveOnly : pc.state.receiveOnly;\n\t        pc.state.sendOnly = typeof params.sendOnly === 'boolean' ? params.sendOnly : pc.state.sendOnly;\n\t        pc.state.needDirectConnection = typeof params.needDirectConnection === 'boolean' ?\n\t            params.needDirectConnection : pc.state.needDirectConnection;\n\t        pc.disableTurn = typeof params.disableTurn === 'boolean' ? params.disableTurn : !!pc.disableTurn;\n\t        pc.forceTurn = typeof params.forceTurn === 'boolean' ? params.forceTurn : !!pc.forceTurn;\n\t\n\t        that.videoLocalElement = params.videoLocalElement ? params.videoLocalElement : that.videoLocalElement;\n\t        that.videoRemoteElement = params.videoRemoteElement ? params.videoRemoteElement : that.videoRemoteElement;\n\t\n\t        if (that.toType === 'did' && !that.caller) {\n\t            params.callerId = params.callerId || {};\n\t            that.callerId = {\n\t                name: params.callerId.name || null,\n\t                number: params.callerId.number || null\n\t            };\n\t        }\n\t\n\t        if (pc.state.receiveOnly) {\n\t            that.outgoingMediaStreams.length = 0;\n\t            that.constraints = [];\n\t        } else if (params.constraints) {\n\t            that.constraints = respoke.convertConstraints(params.constraints);\n\t            updateOutgoingMediaEstimate({constraints: that.constraints[0], source: params.source});\n\t        }\n\t\n\t        if (pc.state.sendOnly) {\n\t            that.incomingMediaStreams.length = 0;\n\t        } else if (params.constraints && pc.state.caller === true && that.incomingMediaStreams.length === 0) {\n\t            // TODO above condition is not good enough for media renegotiation.\n\t            // Only the person who initiated this round of media negotiation needs to estimate remote\n\t            // media based on what constraints local media is using.\n\t            // Also don't try to guess what media they'll send back if we're sending more than one stream.\n\t            that.constraints = respoke.convertConstraints(params.constraints);\n\t            updateIncomingMediaEstimate({constraints: params.constraints[0]});\n\t        }\n\t\n\t        pc.listen('stats', function fireStats(evt) {\n\t            /**\n\t             * This event is fired every time statistical information about audio and/or video on a call\n\t             * becomes available.\n\t             * @event respoke.Call#stats\n\t             * @type {respoke.Event}\n\t             * @property {respoke.MediaStats} stats - an object with stats in it.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.fire('stats', {stats: evt.stats});\n\t        }, true);\n\t\n\t        delete that.signalOffer;\n\t        delete that.signalConnected;\n\t        delete that.signalAnswer;\n\t        delete that.signalHangup;\n\t        delete that.signalReport;\n\t        delete that.signalCandidate;\n\t    }\n\t\n\t    /**\n\t     * Build respoke.LocalMedia after the call is answered.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.buildLocalMedia\n\t     * @param {RTCConstraint} constraint\n\t     * @private\n\t     */\n\t    function buildLocalMedia(constraint) {\n\t        var localMedia;\n\t\n\t        if (pc.state.receiveOnly) {\n\t            return Q.reject(new Error(\"Shouldn't have requested local media when receiveOnly is true.\"));\n\t        }\n\t\n\t        if (constraint.className === 'respoke.LocalMedia') {\n\t            localMedia = constraint;\n\t        } else {\n\t            localMedia = respoke.LocalMedia({\n\t                hasScreenShare: respoke.constraintsHasScreenShare(constraint),\n\t                constraints: constraint,\n\t                source: params.source\n\t            });\n\t            that.outgoingMediaStreams.push(localMedia);\n\t        }\n\t\n\t        // Use the element for only one set of constraints, and make sure it's one that has video.\n\t        if (respoke.constraintsHasVideo(localMedia.constraints) &&\n\t                that.videoLocalElement && !that.videoLocalElement.used) {\n\t            that.videoLocalElement.used = true;\n\t            localMedia.element = that.videoLocalElement;\n\t        }\n\t\n\t        localMedia.listen('requesting-media', function waitAllowHandler(evt) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t\n\t            /**\n\t             * The browser is asking for permission to access the User's media. This would be an ideal time\n\t             * to modify the UI of the application so that the user notices the request for permissions\n\t             * and approves it.\n\t             * @event respoke.Call#requesting-media\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.fire('requesting-media');\n\t        }, true);\n\t\n\t        localMedia.listen('allow', function allowHandler(evt) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t\n\t            /**\n\t             * The user has approved the request for media. Any UI changes made to remind the user to click Allow\n\t             * should be canceled now. This event is the same as the `onAllow` callback.  This event gets fired\n\t             * even if the allow process is automatic, i. e., permission and media is granted by the browser\n\t             * without asking the user to approve it.\n\t             * @event respoke.Call#allow\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.fire('allow');\n\t            pc.state.dispatch('approve', {\n\t                previewLocalMedia: previewLocalMedia\n\t            });\n\t        }, true);\n\t\n\t        return localMedia.start().then(function () {\n\t            streamReceivedHandler(localMedia);\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Answer the call and start the process of obtaining media. This method is called automatically on the caller's\n\t     * side. This method must be called on the callee's side to indicate that the endpoint does wish to accept the\n\t     * call. The app will have a later opportunity, by passing a callback named previewLocalMedia, to approve or\n\t     * reject the call based on whether audio and/or video is working and is working at an acceptable level.\n\t     *\n\t     *     client.listen('call', function (evt) {\n\t     *         if (!evt.call.caller) {\n\t     *             evt.call.answer();\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.answer\n\t     * @fires respoke.Call#answer\n\t     * @param {object} [params]\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n\t     * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n\t     * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n\t     * granted by the browser without asking the user to approve it.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {boolean} [params.receiveOnly] - Whether or not we accept media.\n\t     * @param {boolean} [params.sendOnly] - Whether or not we send media.\n\t     * @param {Array<RTCConstraints>} [params.constraints] - Information about the media for this call.\n\t     * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     */\n\t    that.answer = function (params) {\n\t        params = params || {};\n\t        log.debug('Call.answer', params);\n\t\n\t        saveParameters(params);\n\t\n\t        pc.listen('remote-stream-received', onRemoteStreamAdded, true);\n\t        pc.listen('remote-stream-removed', onRemoteStreamRemoved, true);\n\t\n\t        pc.state.once('approving-device-access:entry', function (evt) {\n\t            doAddVideo(params);\n\t        });\n\t        pc.state.dispatch('answer', {\n\t            previewLocalMedia: previewLocalMedia,\n\t            approve: that.approve\n\t        });\n\t        /**\n\t         * The call was answered.\n\t         * @event respoke.Call#answer\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('answer');\n\t    };\n\t\n\t    /**\n\t     * Accept a request to modify the media on the call. This method should be called within the Call#modify\n\t     * event listener, which gives the developer or website user a chance to see what changes are proposed and\n\t     * to accept or reject them.\n\t     *\n\t     *     call.listen('modify', function (evt) {\n\t     *         evt.call.accept();\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.accept\n\t     * @fires respoke.Call#accept\n\t     * @private\n\t     * @param {object} [params]\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the developer to receive the\n\t     * remote video element.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for the developer to be notified about hangup.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {boolean} [params.receiveOnly] - Whether or not we accept media.\n\t     * @param {boolean} [params.sendOnly] - Whether or not we send media.\n\t     * @param {Array<RTCConstraints>} [params.constraints] - Information about the media for this call.\n\t     */\n\t    that.accept = that.answer;\n\t\n\t    /**\n\t     * Start the process of network and media negotiation. If the app passes in a callback named previewLocalMedia\n\t     * in order to allow the logged-in person a chance to base their decision to continue the call on whether\n\t     * audio and/or video is working correctly,\n\t     * this method must be called on both sides in order to begin the call. If call.approve() is called, the call\n\t     * will progress as expected. If call.reject() is called, the call will be aborted.\n\t     *\n\t     *     call.listen('local-stream-received', function (evt) {\n\t     *         if (userLikesVideo()) {\n\t     *             evt.call.approve();\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.approve\n\t     * @fires respoke.Call#approve\n\t     */\n\t    that.approve = function () {\n\t        log.debug('Call.approve');\n\t        /**\n\t         * Fired when the local media access is approved.\n\t         * @event respoke.Call#approve\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('approve');\n\t        pc.state.dispatch('approve', {\n\t            previewLocalMedia: previewLocalMedia\n\t        });\n\t\n\t        if (defModify && defModify.promise.isPending()) {\n\t            defModify.resolve(true);\n\t            defModify = undefined;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Listen for the remote side to remove media in the middle of the call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.onRemoteStreamRemoved\n\t     * @private\n\t     * @param {object}\n\t     */\n\t    function onRemoteStreamRemoved(evt) {\n\t        log.debug('pc event: remote stream removed');\n\t    }\n\t\n\t    /**\n\t     * Listen for the remote side to add additional media in the middle of the call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.onRemoteStreamAdded\n\t     * @private\n\t     * @param {object}\n\t     * @fires respoke.Call#connect\n\t     */\n\t    function onRemoteStreamAdded(evt) {\n\t        var hasAudio = false;\n\t        var hasVideo = false;\n\t        var hasScreenShare = false;\n\t        var remoteMedia;\n\t        var useEl;\n\t\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        log.debug('received remote media', evt);\n\t\n\t        // This is the first remote media we have received. The one we currently have is a guess. Rip it\n\t        // out and replace it with reality.\n\t        if (that.incomingMediaStreams.length === 1 && that.incomingMediaStreams[0].temporary === true) {\n\t            // have to do it this way because assigning a blank array to that.incomingMediaStreams will\n\t            // clobber the methods like hasAudio that we have added to the array.\n\t            that.incomingMediaStreams.length = 0;\n\t        }\n\t\n\t        hasAudio = evt.stream.getAudioTracks().length > 0;\n\t        hasVideo = evt.stream.getVideoTracks().length > 0;\n\t        // TODO this is not good enough long term.\n\t        hasScreenShare = hasVideo && that.target === 'screenshare';\n\t\n\t        if (that.videoRemoteElement && !that.videoRemoteElement.used) {\n\t            that.videoRemoteElement.used = true;\n\t            useEl = that.videoRemoteElement;\n\t        }\n\t\n\t        remoteMedia = respoke.RemoteMedia({\n\t            element: useEl,\n\t            stream: evt.stream,\n\t            hasScreenShare: hasScreenShare,\n\t            constraints: {\n\t                audio: hasAudio,\n\t                video: hasVideo\n\t            }\n\t        });\n\t        that.incomingMediaStreams.push(remoteMedia);\n\t\n\t        /**\n\t         * Indicates that remote media stream has been added to the call.\n\t         * @event respoke.Call#remote-stream-received\n\t         * @type {respoke.Event}\n\t         * @property {Element} element - The HTML5 Video element with the remote stream attached.\n\t         * @property {respoke.RemoteMedia} stream - The incomingMedia property on the call.\n\t         * @property {string} name - The event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('remote-stream-received', {\n\t            stream: remoteMedia\n\t        });\n\t\n\t        if (that.incomingMediaStreams.length < pc.sdpExpectedStreamCount) {\n\t            // there are more streams left to receive before we can dispatch the event to the state machine.\n\t            return;\n\t        }\n\t\n\t        /**\n\t         * Indicates that either remote media stream has been added to the call or if no\n\t         * media is expected, the other side is receiving our media.\n\t         * @event respoke.Call#connect\n\t         * @type {respoke.Event}\n\t         * @property {Element} element - The HTML5 Video element with the remote stream attached.\n\t         * @property {respoke.RemoteMedia} stream - The incomingMedia property on the call.\n\t         * @property {string} name - The event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        pc.state.dispatch('receiveRemoteMedia');\n\t        that.fire('connect', {\n\t            stream: remoteMedia.stream,\n\t            element: remoteMedia.element\n\t        });\n\t    }\n\t\n\t    /**\n\t     * ## The plugin `respoke.MediaStats` must be loaded before using this method.\n\t     *\n\t     * Start the process of listening for a continuous stream of statistics about the flow of audio and/or video.\n\t     * Since we have to wait for both the answer and offer to be available before starting\n\t     * statistics, the library returns a promise for the stats object. The statistics object does not contain the\n\t     * statistics; rather it contains methods of interacting with the actions of obtaining statistics. To obtain\n\t     * the actual statistics one time, use stats.getStats(); use the onStats callback to obtain a continuous\n\t     * stream of statistics every `interval` seconds.  Returns null if stats module is not loaded.\n\t     *\n\t     *     call.getStats({\n\t     *         onStats: function (evt) {\n\t     *             console.log('Stats', evt.stats);\n\t     *         }\n\t     *     }).done(function () {\n\t     *         console.log('Stats started');\n\t     *     }, function (err) {\n\t     *         console.log('Call is already hung up.');\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.getStats\n\t     * @param {object} params\n\t     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive\n\t     * the stats. If no callback is provided, the call's report will contain stats but the developer will not\n\t     * receive them on the client-side.\n\t     * @param {respoke.Call.statsSuccessHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Call.errorHandler} [params.onError] - Error handler for this invocation of this method only.\n\t     * @returns {Promise<object>|null}\n\t     */\n\t    function getStats(params) {\n\t        if (pc && pc.getStats) {\n\t            that.listen('stats', params.onStats);\n\t            return pc.getStats(params);\n\t        }\n\t        return null;\n\t    }\n\t    if (respoke.MediaStats) {\n\t        that.getStats = getStats;\n\t    }\n\t\n\t    /**\n\t     * Return local video element with the logged-in endpoint's audio and/or video streams attached to it.\n\t     *\n\t     *     var el = call.getLocalElement();\n\t     *     container.append(el);\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.getLocalElement\n\t     * @returns {Video} An HTML5 video element.\n\t     */\n\t    that.getLocalElement = function () {\n\t        return that.outgoingMediaStreams[0] ? that.outgoingMediaStreams[0].element : undefined;\n\t    };\n\t\n\t    /**\n\t     * Return remote video element with the remote endpoint's audio and/or video streams attached to it.\n\t     *\n\t     *     var el = call.getRemoteElement();\n\t     *     container.append(el);\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.getRemoteElement\n\t     * @returns {Video} An HTML5 video element.\n\t     */\n\t    that.getRemoteElement = function () {\n\t        return that.incomingMediaStreams[0] ? that.incomingMediaStreams[0].element : undefined;\n\t    };\n\t\n\t    /**\n\t     * Set up the local media.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.streamReceivedHandler\n\t     * @param {respoke.LocalMedia} The local media.\n\t     * @private\n\t     */\n\t    function streamReceivedHandler(localMedia) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t\n\t        pc.addStream(localMedia.stream);\n\t        if (typeof previewLocalMedia === 'function' && localMedia.element) {\n\t            previewLocalMedia(localMedia.element, that);\n\t        }\n\t\n\t        localMedia.listen('stop', function stopHandler(/* evt */) {\n\t            // if the local media has stopped, it has already been removed from respoke.streams.\n\t            // just need to remove it from the call's streams, and hangup if no streams left.\n\t\n\t            var idx = that.outgoingMediaStreams.indexOf(localMedia);\n\t            if (idx > -1) {\n\t                that.outgoingMediaStreams.splice(idx, 1);\n\t            }\n\t\n\t            if (!that.outgoingMediaStreams.length && !that.incomingMediaStreams.length) {\n\t                that.hangup({ reason: 'last stream ended' });\n\t            }\n\t        });\n\t\n\t        /**\n\t         * Indicate that the call has received local media from the browser.\n\t         * @event respoke.Call#local-stream-received\n\t         * @type {respoke.Event}\n\t         * @property {Element} element\n\t         * @property {respoke.LocalMedia} stream\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('local-stream-received', {\n\t            element: localMedia.element,\n\t            stream: localMedia\n\t        });\n\t\n\t        /**\n\t         * This event indicates that local video has been unmuted.\n\t         * @event respoke.Call#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        localMedia.listen('mute', function (evt) {\n\t            that.fire('mute', {\n\t                type: evt.type,\n\t                muted: evt.muted\n\t            });\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Create the RTCPeerConnection and add handlers. Process any offer we have already received. This method is called\n\t     * after answer() so we cannot use this method to set up the DirectConnection.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.doAddVideo\n\t     * @private\n\t     * @param {object} params\n\t     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect]\n\t     * @param {respoke.Call.onHangup} [params.onHangup]\n\t     * @fires respoke.Call#requesting-media\n\t     * @fires respoke.Call#allow\n\t     * @fires respoke.Call#local-stream-received\n\t     */\n\t    function doAddVideo(params) {\n\t        log.debug('Call.doAddVideo');\n\t        saveParameters(params);\n\t    }\n\t\n\t    /**\n\t     * Add a video and audio stream to the existing call. By default, this method adds both video AND audio.\n\t     * If audio is not desired, pass {audio: false}.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.addVideo\n\t     * @private\n\t     * @param {object} params\n\t     * @param {boolean} [params.audio=true]\n\t     * @param {boolean} [params.video=true]\n\t     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints, indicating the media\n\t     * being requested is\n\t     * an audio and/or video stream.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect]\n\t     * @param {respoke.Call.onHangup} [params.onHangup]\n\t     * @param {respoke.Call.mediaSuccessHandler} [params.onSuccess]\n\t     * @param {respoke.Client.errorHandler} [params.onError]\n\t     * @returns {Promise<respoke.LocalMedia>}\n\t     */\n\t    that.addVideo = function (params) {\n\t        log.debug('Call.addVideo');\n\t        params = params || {};\n\t        if (!params.constraints || !params.constraints.length) {\n\t            params.constraints = [{video: true, audio: true}];\n\t        }\n\t        params.instanceId = instanceId;\n\t\n\t        if (!defMedia.promise.isFulfilled()) { // we're the callee & have just accepted to modify\n\t            doAddVideo(params);\n\t        } else { // we're the caller and need to see if we can modify\n\t            pc.startModify({\n\t                constraints: params.constraints\n\t            });\n\t            defModify = Q.defer();\n\t            defModify.promise.then(function modifyAccepted() {\n\t                doAddVideo(params);\n\t            });\n\t        }\n\t        return defModify.promise;\n\t    };\n\t\n\t    /**\n\t     * Add an audio stream to the existing call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.addAudio\n\t     * @private\n\t     * @param {object} params\n\t     * @param {boolean} [params.audio=true]\n\t     * @param {boolean} [params.video=false]\n\t     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints, indicating the media\n\t     * being requested is an audio and/or video stream.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect]\n\t     * @param {respoke.Call.onHangup} [params.onHangup]\n\t     * @param {respoke.Call.mediaSuccessHandler} [params.onSuccess]\n\t     * @param {respoke.Client.errorHandler} [params.onError]\n\t     * @returns {Promise<respoke.LocalMedia>}\n\t     */\n\t    that.addAudio = function (params) {\n\t        params = params || {};\n\t        if (!params.constraints || !params.constraints.length) {\n\t            params.constraints = [{video: false, audio: true}];\n\t        }\n\t\n\t        return that.addVideo(params);\n\t    };\n\t\n\t    /**\n\t     * Get the direct connection on this call, if it exists.\n\t     *\n\t     *     var dc = call.getDirectConnection();\n\t     *     if (!dc) {\n\t     *         console.log(\"No direct connection has been started.\");\n\t     *     } else {\n\t     *         dc.sendMessage({message: 'hi'});\n\t     *     }\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.getDirectConnection\n\t     * @returns {respoke.DirectConnection}\n\t     */\n\t    that.getDirectConnection = function () {\n\t        return directConnection || null;\n\t    };\n\t\n\t    /**\n\t     * Remove a direct connection from the existing call. If there is no other media, this will hang up the call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.removeDirectConnection\n\t     * @private\n\t     * @param {object} params\n\t     * @arg {boolean} [params.skipModify] Do not restart media negotiation.\n\t     */\n\t    that.removeDirectConnection = function (params) {\n\t        params = params || {};\n\t        log.debug('Call.removeDirectConnection');\n\t\n\t        if (directConnection) {\n\t            directConnection.close({skipRemove: true});\n\t        }\n\t\n\t        if (!that.hasMedia()) {\n\t            log.debug('Hanging up because there are no local streams.');\n\t            that.hangup();\n\t            return;\n\t        }\n\t\n\t        if (params.skipModify === true) {\n\t            return;\n\t        }\n\t\n\t        pc.startModify({\n\t            directConnection: false\n\t        });\n\t        defModify = Q.defer();\n\t        defModify.promise.done(function onModifySuccess() {\n\t            defMedia.resolve();\n\t            defModify = undefined;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Add a direct connection to the existing call.\n\t     *\n\t     *     call.addDirectConnection({\n\t     *         onOpen: function (evt) {\n\t     *             console.log(\"Direct connection open!\");\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.addDirectConnection\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for the developer to be notified about\n\t     * closing the connection.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for the developer to be notified about\n\t     * opening the connection.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for the developer to be notified\n\t     * about incoming messages. Not usually necessary to listen to this event if you are already listening to\n\t     * respoke.Endpoint#message.\n\t     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess]\n\t     * @param {respoke.Client.errorHandler} [params.onError]\n\t     * @returns {Promise<respoke.DirectConnection>}\n\t     */\n\t    that.addDirectConnection = function (params) {\n\t        log.debug('Call.addDirectConnection');\n\t        pc.startModify({\n\t            directConnection: true\n\t        });\n\t        defModify = Q.defer();\n\t        return defModify.promise.then(function onModifySuccess() {\n\t            return actuallyAddDirectConnection(params);\n\t        }, function onModifyError(err) {\n\t            throw err;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Add a direct connection to the existing call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.actuallyAddDirectConnection\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for the developer to be notified about\n\t     * closing the connection.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for the developer to be notified about\n\t     * opening the connection.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for the developer to be notified\n\t     * about incoming messages. Not usually necessary to listen to this event if you are already listening to\n\t     * respoke.Endpoint#message.\n\t     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess]\n\t     * @param {respoke.Client.errorHandler} [params.onError]\n\t     * @returns {Promise<respoke.DirectConnection>}\n\t     * @fires respoke.Client#direct-connection\n\t     * @fires respoke.Call#direct-connection\n\t     */\n\t    function actuallyAddDirectConnection(params) {\n\t        log.debug('Call.actuallyAddDirectConnection', params);\n\t        params = params || {};\n\t        defMedia.promise.then(params.onSuccess, params.onError);\n\t\n\t        if (directConnection && directConnection.isActive()) {\n\t            if (defMedia.promise.isPending()) {\n\t                defMedia.resolve(directConnection);\n\t            } else {\n\t                log.warn(\"Not creating a new direct connection.\");\n\t            }\n\t            return defMedia.promise;\n\t        }\n\t\n\t        params.instanceId = instanceId;\n\t        params.pc = pc;\n\t        params.call = that;\n\t\n\t        directConnection = respoke.DirectConnection(params);\n\t\n\t        directConnection.listen('close', function closeHandler() {\n\t            if (!that.hasMedia()) {\n\t                log.debug('Hanging up because there are no local streams.');\n\t                that.hangup();\n\t            } else {\n\t                that.removeDirectConnection({skipModify: true});\n\t            }\n\t        }, true);\n\t\n\t        directConnection.listen('accept', function acceptHandler() {\n\t            if (pc.state.caller === false) {\n\t                log.debug('Answering as a result of approval.');\n\t            } else {\n\t                defMedia.resolve(directConnection);\n\t            }\n\t        }, true);\n\t\n\t        directConnection.listen('open', function openHandler() {\n\t            pc.state.dispatch('receiveRemoteMedia');\n\t        }, true);\n\t\n\t        directConnection.listen('error', function errorHandler(err) {\n\t            defMedia.reject(new Error(err));\n\t        }, true);\n\t\n\t        that.remoteEndpoint.directConnection = directConnection;\n\t\n\t        /**\n\t         * This event is fired when the local end of the directConnection is available. It still will not be\n\t         * ready to send and receive messages until the 'open' event fires.\n\t         * @event respoke.Call#direct-connection\n\t         * @type {respoke.Event}\n\t         * @property {respoke.DirectConnection} directConnection\n\t         * @property {respoke.Endpoint} endpoint\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('direct-connection', {\n\t            directConnection: directConnection,\n\t            endpoint: that.remoteEndpoint\n\t        });\n\t\n\t        /**\n\t         * This event is fired when the logged-in endpoint is receiving a request to open a direct connection\n\t         * to another endpoint.  If the user wishes to allow the direct connection, calling\n\t         * evt.directConnection.accept() will allow the connection to be set up.\n\t         * @event respoke.Client#direct-connection\n\t         * @type {respoke.Event}\n\t         * @property {respoke.DirectConnection} directConnection\n\t         * @property {respoke.Endpoint} endpoint\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         * @private\n\t         */\n\t        client.fire('direct-connection', {\n\t            directConnection: directConnection,\n\t            endpoint: that.remoteEndpoint\n\t        });\n\t\n\t        if (pc.state.caller === true) {\n\t            directConnection.accept();\n\t        }\n\t\n\t        return defMedia.promise;\n\t    }\n\t\n\t    /**\n\t     * Close the direct connection.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.closeDirectConnection\n\t     */\n\t    that.closeDirectConnection = function () {\n\t        if (directConnection) {\n\t            directConnection.close();\n\t            directConnection = null;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n\t     * signal is not false and we have not received a hangup signal from the remote party.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.hangup\n\t     * @fires respoke.Call#hangup\n\t     * @param {object} params\n\t     * @arg {boolean} params.signal Optional flag to indicate whether to send or suppress sending\n\t     * a hangup signal to the remote side.\n\t     */\n\t    that.hangup = function (params) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        params = params || {};\n\t        params.reason = params.reason || \"hangup method called.\";\n\t        pc.state.dispatch('hangup', params);\n\t    };\n\t    that.hangup = respoke.callOnce(that.hangup);\n\t\n\t    /**\n\t     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n\t     * signal is not false and we have not received a hangup signal from the remote party. This is an event\n\t     * handler added to the state machine via `once`.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.hangup\n\t     * @fires respoke.Call#hangup\n\t     * @private\n\t     */\n\t    var doHangup = function () {\n\t        log.debug('hangup', that.caller);\n\t\n\t        that.outgoingMediaStreams.forEach(function (stream) {\n\t            // only call stop on the stream if it was constructed explicitly for the call\n\t            if (stream !== params.outgoingMedia) {\n\t                stream.stop();\n\t            }\n\t        });\n\t\n\t        if (directConnection) {\n\t            directConnection.close();\n\t            directConnection = null;\n\t        }\n\t\n\t        if (pc) {\n\t            pc.close({signal: (pc.state.receivedBye ? false : pc.state.signalBye)});\n\t        }\n\t\n\t        /**\n\t         * This event is fired when the call has hung up.\n\t         * @event respoke.Call#hangup\n\t         * @type {respoke.Event}\n\t         * @property {boolean} sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('hangup', {\n\t            reason: pc.state.hangupReason || \"No reason specified.\"\n\t        });\n\t\n\t        pc.state.ignore();\n\t        pc.ignore();\n\t        that.ignore();\n\t        pc = null;\n\t    };\n\t    doHangup = respoke.callOnce(doHangup);\n\t\n\t    /**\n\t     * Expose hangup as reject for approve/reject workflow.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.reject\n\t     * @param {object} params\n\t     */\n\t    that.reject = function () {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        pc.state.dispatch('reject', {reason: 'call.reject() called'});\n\t    };\n\t\n\t    /**\n\t     * Indicate whether a call is being setup or is in progress.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.isActive\n\t     * @returns {boolean}\n\t     */\n\t    that.isActive = function () {\n\t        return !!(pc && pc.isActive() && (\n\t            that.outgoingMediaStreams.length > 0 ||\n\t            that.incomingMediaStreams.length > 0 ||\n\t            (directConnection && directConnection.isActive())\n\t        ));\n\t    };\n\t\n\t    /**\n\t     * Set the estimated media status on incoming media.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.listenAnswer\n\t     * @param {object} evt\n\t     * @param {object} evt.signal - The offer signal including the sdp\n\t     * @private\n\t     */\n\t    function listenAnswer(evt) {\n\t        log.debug('listenAnswer', evt.signal);\n\t\n\t        that.hasDataChannel = respoke.sdpHasDataChannel(evt.signal.sessionDescription.sdp);\n\t        updateIncomingMediaEstimate({sdp: evt.signal.sessionDescription});\n\t    }\n\t\n\t    /**\n\t     * Set the estimated media status on incoming media.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.updateIncomingMediaEstimate\n\t     * @param {object} params\n\t     * @param {RTCSessionDescriptor} [params.sdp] - optional sdp to use to estimate media\n\t     * @param {RTCConstraints} [params.constraints] - optional constraints to use to estimate media\n\t     * @private\n\t     */\n\t    function updateIncomingMediaEstimate(params) {\n\t        if (pc.state.sendOnly) {\n\t            that.incomingMediaStreams.length = 0;\n\t            return;\n\t        }\n\t\n\t        if (!params.sdp && !params.constraints) {\n\t            throw new Error(\"Can't estimate incoming media without sdp or constraints\");\n\t        }\n\t\n\t        if (that.incomingMediaStreams.length === 0) {\n\t            that.incomingMediaStreams.push(respoke.RemoteMedia({\n\t                hasScreenShare: (that.target === 'screenshare'),\n\t                temporary: true\n\t            }));\n\t        }\n\t\n\t        if (params.sdp) {\n\t            if (that.incomingMediaStreams[0] && that.incomingMediaStreams[0].temporary) {\n\t                that.incomingMediaStreams[0].setSDP(params.sdp);\n\t            }\n\t        }\n\t\n\t        if (params.constraints) {\n\t            if (that.incomingMediaStreams[0] && that.incomingMediaStreams[0].temporary) {\n\t                that.incomingMediaStreams[0].setConstraints(params.constraints);\n\t            }\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Set the estimated media status on outgoing media. For this method, by the time we have constraints, we're\n\t     * already calling getUserMedia so we will have exactly the right information. No need to use constraints\n\t     * to estimate.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.updateOutgoingMediaEstimate\n\t     * @param {object} params\n\t     * @param {RTCSessionDescriptor} [params.sdp] - optional sdp to use to estimate media\n\t     * @param {RTCConstraints} [params.constraints] - optional constraints to use to estimate media\n\t     * @private\n\t     */\n\t    function updateOutgoingMediaEstimate(params) {\n\t        if (pc.state.receiveOnly) {\n\t            that.outgoingMediaStreams.length = 0;\n\t            that.constraints = [];\n\t            return;\n\t        }\n\t\n\t        if (!params.sdp && !params.constraints) {\n\t            throw new Error(\"Can't estimate outgoing media without sdp or constraints\");\n\t        }\n\t\n\t        if (that.outgoingMediaStreams.length === 0) {\n\t            that.outgoingMediaStreams.push(respoke.LocalMedia({\n\t                instanceId: instanceId,\n\t                temporary: true,\n\t                source: params.source\n\t            }));\n\t        }\n\t\n\t        if (params.sdp) {\n\t            if (that.outgoingMediaStreams[0] && that.outgoingMediaStreams[0].temporary) {\n\t                that.outgoingMediaStreams[0].setSDP(params.sdp);\n\t            }\n\t        }\n\t\n\t        if (params.constraints) {\n\t            if (that.outgoingMediaStreams[0] && that.outgoingMediaStreams[0].temporary) {\n\t                that.outgoingMediaStreams[0].setConstraints(params.constraints);\n\t            }\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Save the offer so we can tell the browser about it after the PeerConnection is ready.\n\t     * Set the estimated media status on incoming and outgoing media.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.listenOffer\n\t     * @param {object} evt\n\t     * @param {object} evt.signal - The offer signal including the sdp\n\t     * @private\n\t     * @fires respoke.Call#modify\n\t     */\n\t    function listenOffer(evt) {\n\t        log.debug('listenOffer', evt.signal);\n\t        var info = {};\n\t\n\t        that.sessionId = evt.signal.sessionId;\n\t        pc.state.receiveOnly = respoke.sdpHasSendOnly(evt.signal.sessionDescription.sdp);\n\t        pc.state.sendOnly = respoke.sdpHasReceiveOnly(evt.signal.sessionDescription.sdp);\n\t        pc.state.listen('connecting:entry', function () {\n\t            if (!pc.state.caller) {\n\t                pc.processOffer(evt.signal.sessionDescription);\n\t            }\n\t        });\n\t\n\t        // Only do this if we're still trying to guess what media is coming in.\n\t        // TODO not good enough for media renegotiation\n\t        updateIncomingMediaEstimate({sdp: evt.signal.sessionDescription});\n\t\n\t        /*!\n\t         * Always overwrite constraints for callee on every offer, since answer() and accept() will\n\t         * always be called after parsing the SDP. However, if the caller isn't sending any media,\n\t         * use audio & video as our estimate.\n\t         * TODO not good enough for media renegotiation\n\t         */\n\t        // If sendOnly, we can't rely on the offer for media estimate. It doesn't have any media in it!\n\t        if (pc.state.sendOnly) {\n\t            updateOutgoingMediaEstimate({constraints: {\n\t                audio: true,\n\t                video: true\n\t            }});\n\t        } else {\n\t            updateOutgoingMediaEstimate({sdp: evt.signal.sessionDescription});\n\t        }\n\t\n\t        if (that.outgoingMedia) {\n\t            log.info(\"Default outgoingMedia constraints\", that.outgoingMedia.constraints);\n\t        }\n\t\n\t        if (pc.state.isModifying()) {\n\t            if (pc.state.needDirectConnection === true) {\n\t                info.directConnection = directConnection;\n\t            } else if (pc.state.needDirectConnection === false) {\n\t                // Nothing\n\t            } else {\n\t                info.call = that;\n\t            }\n\t            /**\n\t             * Indicates a request to add something to an existing call. If 'constraints' is set, evt.constraints\n\t             * describes the media the other side has added. In this case, call.approve() must be called in order\n\t             * to approve the new media and send the same type of media.  If directConnection exists, the other side\n\t             * wishes to to open a direct connection. In order to approve, call directConnection.accept(). In either\n\t             * case, call.reject() and directConnection.reject() can be called to decline the request to add to the\n\t             * call.\n\t             * @event respoke.Call#modify\n\t             * @type {respoke.Event}\n\t             * @property {object} [constraints]\n\t             * @property {boolean} [directConnection]\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.fire('modify', info);\n\t        }\n\t\n\t        pc.state.dispatch('receiveOffer', {\n\t            previewLocalMedia: previewLocalMedia,\n\t            approve: that.approve\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Save the answer and tell the browser about it.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.listenModify\n\t     * @private\n\t     */\n\t    function listenModify(evt) {\n\t        log.debug('Call.listenModify', evt);\n\t        if (evt.signal.action === 'initiate') {\n\t            defModify = Q.defer();\n\t            pc.state.dispatch('modify', {receive: true});\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Set up state and media for the modify.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.onModifyAccept\n\t     * @param {respoke.Event} evt\n\t     * @private\n\t     */\n\t    function onModifyAccept(evt) {\n\t        pc.state.dispatch('accept');\n\t\n\t        if (evt.signal.action !== 'initiate') {\n\t            defModify.resolve(); // resolved later for callee\n\t            defModify = undefined;\n\t            return;\n\t        }\n\t\n\t        // callee only from here down\n\t\n\t        // init the directConnection if necessary. We don't need to do anything with\n\t        // audio or video right now.\n\t        if (evt.signal.directConnection === true) {\n\t            actuallyAddDirectConnection().done(function successHandler(dc) {\n\t                directConnection = dc;\n\t                directConnection.accept();\n\t            });\n\t        } else if (evt.signal.directConnection === false) {\n\t            if (directConnection) {\n\t                that.removeDirectConnection({skipModify: true});\n\t                defMedia.resolve(false);\n\t            }\n\t        }\n\t        pc.state.needDirectConnection = typeof evt.signal.directConnection === 'boolean' ?\n\t            evt.signal.directConnection : null;\n\t        that.outgoingMedia.constraints = evt.signal.constraints || that.outgoingMedia.constraints;\n\t    }\n\t\n\t    /**\n\t     * Ignore the modify.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.onModifyReject\n\t     * @param {respoke.Event} evt\n\t     * @param {Error} evt.err\n\t     * @private\n\t     */\n\t    function onModifyReject(evt) {\n\t        if (evt.signal.action !== 'initiate') {\n\t            defMedia.reject(evt.err);\n\t            defModify.reject(evt.err);\n\t            defModify = undefined;\n\t        }\n\t    }\n\t\n\t    /**\n\t     * If video is muted, unmute. If not muted, mute.\n\t     * @deprecated\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.toggleVideo\n\t     */\n\t    that.toggleVideo = function () {\n\t        if (that.isActive()) {\n\t            if (!videoIsMuted) {\n\t                that.muteVideo();\n\t            } else {\n\t                that.unmuteVideo();\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * If audio is muted, unmute. If not muted, mute.\n\t     * @deprecated\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.toggleAudio\n\t     */\n\t    that.toggleAudio = function () {\n\t        if (that.isActive()) {\n\t            if (!audioIsMuted) {\n\t                that.muteAudio();\n\t            } else {\n\t                that.unmuteAudio();\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Indicate whether the call has media of any type flowing in either direction.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.hasMedia\n\t     * @returns {boolean}\n\t     */\n\t    that.hasMedia = function () {\n\t        var local;\n\t        var remote;\n\t\n\t        if (!pc || !pc.getLocalStreams) {\n\t            // PeerConnection.init() has not been called yet\n\t            return false;\n\t        }\n\t\n\t        local = pc.getLocalStreams();\n\t        remote = pc.getRemoteStreams();\n\t\n\t        if (directConnection && directConnection.isActive()) {\n\t            return true;\n\t        }\n\t\n\t        return (local.length > 0 || remote.length > 0);\n\t    };\n\t\n\t    /**\n\t     * Mute all local video streams.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.muteVideo\n\t     * @fires respoke.Call#mute\n\t     */\n\t    that.muteVideo = function () {\n\t        if (videoIsMuted) {\n\t            return;\n\t        }\n\t        that.outgoingMedia.muteVideo();\n\t        videoIsMuted = true;\n\t    };\n\t\n\t    /**\n\t     * Unmute all local video streams.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.unmuteVideo\n\t     * @fires respoke.Call#mute\n\t     */\n\t    that.unmuteVideo = function () {\n\t        if (!videoIsMuted) {\n\t            return;\n\t        }\n\t        that.outgoingMedia.unmuteVideo();\n\t        videoIsMuted = false;\n\t    };\n\t\n\t    /**\n\t     * Mute all local audio streams.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.muteAudio\n\t     * @fires respoke.Call#mute\n\t     */\n\t    that.muteAudio = function () {\n\t        if (audioIsMuted) {\n\t            return;\n\t        }\n\t        that.outgoingMedia.muteAudio();\n\t        audioIsMuted = true;\n\t    };\n\t\n\t    /**\n\t     * Unmute all local audio streams.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.unmuteAudio\n\t     * @fires respoke.Call#mute\n\t     */\n\t    that.unmuteAudio = function () {\n\t        if (!audioIsMuted) {\n\t            return;\n\t        }\n\t\n\t        that.outgoingMedia.unmuteAudio();\n\t        audioIsMuted = false;\n\t    };\n\t\n\t    /**\n\t     * Save the hangup reason and hang up.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.listenHangup\n\t     * @params {object} evt\n\t     * @params {object} evt.signal - The hangup signal, including an optional hangup reason.\n\t     * @private\n\t     */\n\t    function listenHangup(evt) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        pc.report.callStoppedReason = evt.signal.reason || \"Remote side hung up\";\n\t        pc.state.receivedBye = true;\n\t        pc.state.dispatch('hangup', {signal: false, reason: pc.report.callStoppedReason});\n\t    }\n\t\n\t    pc.state.once('terminated:entry', function (evt) {\n\t        doHangup();\n\t    }, true);\n\t\n\t    that.listen('signal-answer', listenAnswer);\n\t    that.listen('signal-offer', function (evt) {\n\t        if (pc.state.getState() === 'idle') {\n\t            pc.state.once('preparing:entry', function () {\n\t                listenOffer(evt);\n\t            });\n\t        } else {\n\t            listenOffer(evt);\n\t        }\n\t    }, true);\n\t    that.listen('signal-hangup', listenHangup, true);\n\t    that.listen('signal-modify', listenModify, true);\n\t    pc.listen('modify-reject', onModifyReject, true);\n\t    pc.listen('modify-accept', onModifyAccept, true);\n\t    that.listen('signal-icecandidates', function onCandidateSignal(evt) {\n\t        if (!pc || !evt.signal.iceCandidates || !evt.signal.iceCandidates.length) {\n\t            return;\n\t        }\n\t        evt.signal.iceCandidates.forEach(function processCandidate(candidate) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t            pc.addRemoteCandidate({candidate: candidate});\n\t        });\n\t    }, true);\n\t\n\t    that.listen('answer', function (evt) {\n\t        var mediaPromises = [];\n\t\n\t        if (pc.state.receiveOnly || pc.state.needDirectConnection) {\n\t            that.outgoingMediaStreams.length = 0;\n\t            return;\n\t        }\n\t\n\t        /*!\n\t         * By the time we get to here, we could be in a couple of states.\n\t         *\n\t         * If receiveOnly is set to true, we could possibly have constraints (if the developer used the API wrong)\n\t         * but we will not have any media in that.outgoingMediaStreams. We should unset that.constraints and skip\n\t         * building any local media.\n\t         *\n\t         * If we have never received any constraints, and receiveOnly is NOT set to true, we will have an estimate\n\t         * at that.outgoingMediaStreams[0] with temporary set to true. This estimate was set by parsing the SDP.\n\t         *\n\t         * If we have received one or more constraints, that.constraints array will contain the most recent set\n\t         * AND we will have an estimate at that.outgoingMediaStreams[0] with temporary set to true. We must completely\n\t         * rebuild that.outgoingMediaStreams from that.constraints.\n\t         */\n\t        if (pc.state.receiveOnly) {\n\t            that.outgoingMediaStreams.length = 0;\n\t            that.constraints = [];\n\t            return;\n\t        }\n\t\n\t        if (that.constraints.length === 0) {\n\t            // We didn't get told what to do by constraints; use our guess.\n\t            that.outgoingMediaStreams[0].temporary = undefined;\n\t        } else if (that.outgoingMediaStreams.length > 0 && that.outgoingMediaStreams[0].temporary) {\n\t            // We got told what to do. Discard our guess. It's OK for that.outgoingMediaStreams to be empty now.\n\t            that.outgoingMediaStreams.shift();\n\t        }\n\t\n\t        // If outgoingMedia is passed into the Call then there is no need to build the LocalMedia here\n\t        if (params.outgoingMedia) {\n\t            return;\n\t        }\n\t\n\t        if (that.constraints.length > 0) {\n\t            that.outgoingMediaStreams.length = 0;\n\t            that.constraints.forEach(function (constraint) {\n\t                mediaPromises.push(buildLocalMedia(constraint));\n\t            });\n\t        } else if (that.outgoingMediaStreams.length > 0) {\n\t            that.outgoingMediaStreams.forEach(function (stream) {\n\t                mediaPromises.push(buildLocalMedia(stream));\n\t            });\n\t        } else {\n\t            throw new Error(\"I have no idea what type of media I am supposed to build.\");\n\t        }\n\t\n\t        // These errors are handled elsewhere.\n\t        Q.all(mediaPromises).done(function () {\n\t            pc.state.dispatch('receiveLocalMedia');\n\t        }, function (err) {\n\t            pc.state.dispatch('reject', {reason: 'media stream error'});\n\t            pc.report.callStoppedReason = err.message;\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.fire('error', {\n\t                reason: err.message\n\t            });\n\t        });\n\t    }, true);\n\t\n\t    if (pc.state.needDirectConnection !== true) {\n\t        pc.state.once('preparing:entry', function () {\n\t            /**\n\t             * This event provides notification for when an incoming call is being received.  If the user wishes\n\t             * to allow the call, the app should call evt.call.answer() to answer the call.\n\t             * @event respoke.Client#call\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Call} call\n\t             * @property {respoke.Endpoint} endpoint\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            client.fire('call', {\n\t                endpoint: that.remoteEndpoint,\n\t                call: that\n\t            });\n\t        }, true);\n\t    }\n\t\n\t    pc.state.listen('idle:exit', function (evt) {\n\t        saveParameters(params);\n\t    });\n\t\n\t    pc.state.listen('preparing:entry', function (evt) {\n\t        init();\n\t\n\t        if (params.outgoingMedia) {\n\t            streamReceivedHandler(params.outgoingMedia);\n\t            pc.state.dispatch('receiveLocalMedia');\n\t        }\n\t\n\t        if (pc.state.caller === true) {\n\t            that.answer();\n\t        }\n\t    }, true);\n\t\n\t    /*!\n\t     *  If we are sending media and the other side is not, we have to fire Call#connect manually,\n\t     *  because the RTCPeerConnection will never reach an ICE connection state of \"connected.\"\n\t     *  This will need to be moved when we start handling media renegotiation.\n\t     */\n\t    pc.state.listen('connecting:entry', function connectNoMedia() {\n\t        if (pc.state.sendOnly) {\n\t            /**\n\t             * Indicates that either remote media stream has been added to the call or if no\n\t             * media is expected, the other side is receiving our media.\n\t             * @event respoke.Call#connect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.fire('connect');\n\t            pc.state.dispatch('receiveRemoteMedia');\n\t        }\n\t    });\n\t\n\t    signalingChannel.getTurnCredentials().then(function (result) {\n\t        if (!pc) {\n\t            throw new Error(\"Already hung up.\");\n\t        }\n\t        if (!result) {\n\t            log.warn(\"Relay service not available.\");\n\t            pc.servers = {iceServers: []};\n\t        } else {\n\t            pc.servers = {iceServers: result};\n\t        }\n\t    }).fin(function () {\n\t        if (!pc) {\n\t            throw new Error(\"Already hung up.\");\n\t        }\n\t        pc.state.dispatch('initiate', {\n\t            caller: that.caller\n\t        });\n\t    }).done(null, function (err) {\n\t        if (err.message !== \"Already hung up.\") {\n\t            log.debug('Unexpected exception', err);\n\t        }\n\t    });\n\t\n\t    return that;\n\t}; // End respoke.Call\n\t\n\t/**\n\t * Handle an error that resulted from a method call.\n\t * @callback respoke.Call.errorHandler\n\t * @param {Error} err\n\t */\n\t/**\n\t * Handle the successful kick-off of stats on a call.\n\t * @callback respoke.Call.statsSuccessHandler\n\t * @param {respoke.MediaStatsParser} statsParser\n\t */\n\t/**\n\t * Handle obtaining media successfully.\n\t * @callback respoke.Call.mediaSuccessHandler\n\t * @param {respoke.LocalMedia} localMedia\n\t */\n\t/**\n\t * When on a call, receive local media when it becomes available. This is what you will need to provide if you want\n\t * to show the user their own video during a call. This callback is called every time\n\t * respoke.Call#local-stream-received is fired.\n\t * @callback respoke.Call.onLocalMedia Callback for receiving an HTML5 Video\n\t * element with the local audio and/or video attached.\n\t * @param {respoke.Event} evt\n\t * @param {Element} evt.element\n\t * @param {respoke.LocalMedia} - The outgoingMedia property on the call.\n\t * @param {string} evt.name - The event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When on a call, receive remote media when it becomes available. This is what you will need to provide if you want\n\t * to show the user the other party's video during a call. This callback is called every time\n\t * respoke.Call#connect is fired.\n\t * @callback respoke.Call.onConnect\n\t * @param {respoke.Event} evt\n\t * @param {Element} evt.element - the HTML5 Video element with the new stream attached.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When a call is in setup or media renegotiation happens. This callback will be called every time\n\t * respoke.Call#error.\n\t * @callback respoke.Call.onError\n\t * @param {respoke.Event} evt\n\t * @param {boolean} evt.reason - A human-readable description of the error.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When on a call, receive notification the call has been hung up. This callback is called every time\n\t * respoke.Call#hangup is fired.\n\t * @callback respoke.Call.onHangup\n\t * @param {respoke.Event} evt\n\t * @param {boolean} evt.sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * Called when changing the mute state on any type of media. This callback will be called when media is muted or\n\t * unmuted. This callback is called every time respoke.Call#mute is fired.\n\t * @callback respoke.Call.onMute\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * Called when the callee answers the call. This callback is called every time respoke.Call#answer is fired.\n\t * @callback respoke.Call.onAnswer\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * Called when the user approves local media. This callback will be called whether or not the approval was based\n\t * on user feedback. I. e., it will be called even if the approval was automatic. This callback is called every time\n\t * respoke.Call#approve is fired.\n\t * @callback respoke.Call.onApprove\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When setting up a call, receive notification that the browser has granted access to media.  This callback is\n\t * called every time respoke.Call#allow is fired.\n\t * @callback respoke.Call.onAllow\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When setting up a call, receive notification that the app has asked the browser for permission to get audio or\n\t * video and is waiting on the browser to grant or reject permission. This callback will be called every time\n\t * respoke.Call#requesting-media is fired.\n\t * @callback respoke.Call.onRequestingMedia\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * The use of stats requires an additional module to Respoke. When on a call, receive periodic statistical\n\t * information about the call, including the codec, lost packets, and bandwidth being consumed. This callback is\n\t * called every time respoke.Call#stats is fired.\n\t * @callback respoke.MediaStatsParser.statsHandler\n\t * @param {respoke.Event} evt\n\t * @param {respoke.MediaStats} evt.stats - an object with stats in it.\n\t * @param {respoke.Call} evt.target\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * When on a call, receive local media when it becomes available. This is what you will need to provide if you want\n\t * to allow the user to preview and approve or reject their own video before a call. If this callback is provided,\n\t * Respoke will wait for call.answer() to be called before proceeding. If this callback is not provided,\n\t * Respoke will proceed without waiting for user input. This callback is called every time\n\t * respoke.Call#local-stream-received is fired.\n\t * @callback respoke.Call.previewLocalMedia\n\t * @param {object} element - the HTML5 Video element with the new stream attached.\n\t * @param {respoke.Call} call\n\t */\n\t/**\n\t * Receive the DirectConnection.\n\t * @callback respoke.Call.directConnectionSuccessHandler\n\t * @param {respoke.DirectConnection} directConnection\n\t */\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar respoke = __webpack_require__(13);\n\tvar log = respoke.log;\n\tvar Q = respoke.Q;\n\t\n\t/**\n\t * A wrapper around the stream from `getUserMedia`,\n\t * which is attached to a call at `call.outgoingMedia`.\n\t *\n\t * @class respoke.LocalMedia\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {object} [params.constraints]\n\t * @param {HTMLVideoElement} params.element - Pass in an optional html video element to have local\n\t * video attached to it.\n\t * @returns {respoke.LocalMedia}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = respoke.EventEmitter(params);\n\t\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.LocalMedia';\n\t    /**\n\t     * Respoke media ID (different from a `MediaStream.id`).\n\t     * @memberof! respoke.LocalMedia\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = respoke.makeGUID();\n\t    /**\n\t     * The HTML element with video attached.\n\t     * @memberof! respoke.LocalMedia\n\t     * @name element\n\t     * @type {HTMLVideoElement}\n\t     */\n\t    that.element = params.element;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name hasScreenShare\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var hasScreenShare = params.hasScreenShare;\n\t    delete params.hasScreenShare;\n\t\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name screenShareSource\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var screenShareSource = params.source;\n\t    delete params.source;\n\t\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name sdpHasAudio\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasAudio = false;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name sdpHasVideo\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasVideo = false;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name sdpHasDataChannel\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasDataChannel = false;\n\t    /**\n\t     * A timer to make sure we only fire {respoke.LocalMedia#requesting-media} if the browser doesn't\n\t     * automatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.\n\t     * @memberof! respoke.LocalMedia\n\t     * @name allowTimer\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var allowTimer = 0;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name mediaOptions\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var mediaOptions = {\n\t        optional: [\n\t            { DtlsSrtpKeyAgreement: true },\n\t            { RtpDataChannels: false }\n\t        ]\n\t    };\n\t\n\t    /**\n\t     * The local `MediaStream` from `getUserMedia()`.\n\t     * @memberof! respoke.LocalMedia\n\t     * @name stream\n\t     * @type {RTCMediaStream}\n\t     */\n\t    that.stream = null;\n\t\n\t    /**\n\t     * The media deferred whose promise is returned from localMedia.start and resolved with the stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @name deferred\n\t     * @type {object}\n\t     * @private\n\t     */\n\t    var deferred = Q.defer();\n\t\n\t    function getStream(theConstraints) {\n\t        for (var i = 0; i < respoke.streams.length; i++) {\n\t            var s = respoke.streams[i];\n\t\n\t            var sConstraints = respoke.clone(s.constraints);\n\t            if (sConstraints.video && sConstraints.video.mandatory &&\n\t                sConstraints.video.mandatory.chromeMediaSourceId) {\n\t                delete sConstraints.video.mandatory.chromeMediaSourceId;\n\t            }\n\t\n\t            if (respoke.isEqual(sConstraints, theConstraints)) {\n\t                return s.stream;\n\t            }\n\t        }\n\t        return null;\n\t    }\n\t\n\t    function removeStream(theConstraints) {\n\t        var toRemoveIndex;\n\t        for (var i = 0; i < respoke.streams.length; i++) {\n\t            var s = respoke.streams[i];\n\t            if (respoke.isEqual(s.constraints, theConstraints)) {\n\t                toRemoveIndex = i;\n\t                break;\n\t            }\n\t        }\n\t        if (toRemoveIndex !== undefined) {\n\t            respoke.streams.splice(toRemoveIndex, 1);\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Save the local stream. Kick off SDP creation.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.onReceiveUserMedia\n\t     * @private\n\t     * @param {RTCMediaStream} theStream\n\t     */\n\t    function onReceiveUserMedia(theStream) {\n\t        that.stream = theStream;\n\t        clearTimeout(allowTimer);\n\t        /**\n\t         * The user has approved the request for media. Any UI changes made to remind the user to click Allow\n\t         * should be canceled now. This event is the same as the `onAllow` callback.  This event gets fired\n\t         * even if the allow process is automatic, i. e., permission and media is granted by the browser\n\t         * without asking the user to approve it.\n\t         * @event respoke.LocalMedia#allow\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         */\n\t        that.fire('allow');\n\t        log.debug('User gave permission to use media.');\n\t        log.debug('onReceiveUserMedia');\n\t\n\t        that.element = that.element || document.createElement('video');\n\t\n\t        // This still needs some work. Using cached streams causes an unused video element to be passed\n\t        // back to the App. This is because we assume at the moment that only one local media video element\n\t        // will be needed. The first one passed back will contain media and the others will fake it. Media\n\t        // will still be sent with every peer connection. Also need to study the use of getLocalElement\n\t        // and the implications of passing back a video element with no media attached.\n\t        var aStream = getStream(that.constraints);\n\t        if (aStream) {\n\t            aStream.numPc += 1;\n\t\n\t            attachMediaStream(that.element, that.stream);\n\t            // We won't want our local video outputting audio.\n\t            that.element.muted = true;\n\t            that.element.autoplay = true;\n\t\n\t            // perform cleanup on the LocalMedia instance if the underlying stream has ended\n\t            aStream.addEventListener('ended', that.stop, false);\n\t\n\t            deferred.resolve();\n\t        } else {\n\t            that.stream.numPc = 1;\n\t            respoke.streams.push({stream: that.stream, constraints: that.constraints});\n\t\n\t            attachMediaStream(that.element, that.stream);\n\t            // We won't want our local video outputting audio.\n\t            that.element.muted = true;\n\t            that.element.autoplay = true;\n\t\n\t            // perform cleanup on the LocalMedia instance if the underlying stream has ended\n\t            that.stream.addEventListener('ended', that.stop, false);\n\t            deferred.resolve();\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Expose getAudioTracks.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.getAudioTracks\n\t     */\n\t    that.getAudioTracks = function () {\n\t        if (that.stream) {\n\t            return that.stream.getAudioTracks();\n\t        }\n\t        return [];\n\t    };\n\t\n\t    /**\n\t     * Expose getVideoTracks.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.getVideoTracks\n\t     */\n\t    that.getVideoTracks = function () {\n\t        if (that.stream) {\n\t            return that.stream.getVideoTracks();\n\t        }\n\t        return [];\n\t    };\n\t\n\t    /**\n\t     * Create the RTCPeerConnection and add handlers. Process any offer we have already received.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.requestMedia\n\t     * @private\n\t     */\n\t    function requestMedia() {\n\t        var theStream;\n\t        var requestingScreenShare;\n\t\n\t        if (!that.constraints) {\n\t            deferred.reject(new Error('No constraints.'));\n\t            return;\n\t        }\n\t\n\t        if (respoke.useFakeMedia === true) {\n\t            that.constraints.fake = true;\n\t        }\n\t\n\t        theStream = getStream(that.constraints);\n\t        if (theStream) {\n\t            log.debug('using old stream');\n\t            onReceiveUserMedia(theStream);\n\t            return;\n\t        }\n\t\n\t        // TODO set getStream(that.constraints) = true as a flag that we are already\n\t        // attempting to obtain this media so the race condition where gUM is called twice with\n\t        // the same constraints when calls are placed too quickly together doesn't occur.\n\t        allowTimer = setTimeout(function delayPermissionsRequest() {\n\t            /**\n\t             * The browser is asking for permission to access the User's media. This would be an ideal time\n\t             * to modify the UI of the application so that the user notices the request for permissions\n\t             * and approves it.\n\t             * @event respoke.LocalMedia#requesting-media\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.LocalMedia} target\n\t             */\n\t            that.fire('requesting-media');\n\t        }, 500);\n\t\n\t        requestingScreenShare =\n\t            (that.constraints.video.mandatory && that.constraints.video.mandatory.chromeMediaSource) ||\n\t            (that.constraints.video.chromeMediaSource) || (that.constraints.video.mediaSource);\n\t\n\t        if (requestingScreenShare) {\n\t            if (respoke.isNwjs || (respoke.needsChromeExtension && respoke.hasChromeExtension)) {\n\t                respoke.chooseDesktopMedia({source: screenShareSource}, function (params) {\n\t                    if (!params.sourceId) {\n\t                        deferred.reject(new Error(\"Error trying to get screensharing source: \" + params.error));\n\t                        return;\n\t                    }\n\t                    that.constraints.video.mandatory.chromeMediaSourceId = params.sourceId;\n\t                    log.debug(\"Running getUserMedia with constraints\", that.constraints);\n\t                    getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n\t                });\n\t                return;\n\t            } else if (respoke.needsFirefoxExtension && respoke.hasFirefoxExtension) {\n\t                log.debug(\"Running getUserMedia with constraints\", that.constraints);\n\t                getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n\t                return;\n\t            } else {\n\t                deferred.reject(new Error(\"Screen sharing not implemented on this platform yet.\"));\n\t                return;\n\t            }\n\t        }\n\t        log.debug(\"Running getUserMedia with constraints\", that.constraints);\n\t        getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n\t    }\n\t\n\t    /**\n\t     * Handle any error that comes up during the process of getting user media.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.onUserMediaError\n\t     * @private\n\t     * @param {object}\n\t     */\n\t    function onUserMediaError(p) {\n\t        var errorMessage = p.code === 1 ? \"Permission denied.\" : \"Unknown.\";\n\t        deferred.reject(new Error(\"Error getting user media: \" + errorMessage));\n\t    }\n\t\n\t    /**\n\t     * Whether the video stream is muted, or undefined if no stream of this type exists.\n\t     *\n\t     * All video tracks must be muted for this to return `false`.\n\t     * @returns boolean\n\t     */\n\t    that.isVideoMuted = function () {\n\t        if (!that.stream || !that.stream.getVideoTracks().length) {\n\t            return undefined;\n\t        }\n\t\n\t        return that.stream.getVideoTracks().every(function (track) {\n\t            return !track.enabled;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Mute local video stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.muteVideo\n\t     * @fires respoke.LocalMedia#mute\n\t     */\n\t    that.muteVideo = function () {\n\t        if (that.isVideoMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n\t            track.enabled = false;\n\t        });\n\t        /**\n\t         * Indicate that the mute status of local audio or video has changed.\n\t         * @event respoke.LocalMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'video',\n\t            muted: true\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Unmute local video stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.unmuteVideo\n\t     * @fires respoke.LocalMedia#mute\n\t     */\n\t    that.unmuteVideo = function () {\n\t        if (!that.isVideoMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n\t            track.enabled = true;\n\t        });\n\t        /**\n\t         * Indicate that the mute status of local audio or video has changed.\n\t         * @event respoke.LocalMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'video',\n\t            muted: false\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Whether the audio stream is muted, or undefined if no track of this type exists.\n\t     *\n\t     * All audio tracks must be muted for this to return `false`.\n\t     * @returns boolean\n\t     */\n\t    that.isAudioMuted = function () {\n\t        if (!that.stream || !that.stream.getAudioTracks().length) {\n\t            return undefined;\n\t        }\n\t        return that.stream.getAudioTracks().every(function (track) {\n\t            return !track.enabled;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Mute local audio stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.muteAudio\n\t     * @fires respoke.LocalMedia#mute\n\t     */\n\t    that.muteAudio = function () {\n\t        if (that.isAudioMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n\t            track.enabled = false;\n\t        });\n\t        /**\n\t         * Indicate that the mute status of local audio or video has changed.\n\t         * @event respoke.LocalMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'audio',\n\t            muted: true\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Unmute local audio stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.unmuteAudio\n\t     * @fires respoke.LocalMedia#mute\n\t     */\n\t    that.unmuteAudio = function () {\n\t        if (!that.isAudioMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n\t            track.enabled = true;\n\t        });\n\t        /**\n\t         * Indicate that the mute status of local audio or video has changed.\n\t         * @event respoke.LocalMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'audio',\n\t            muted: false\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Stop the stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.stop\n\t     * @fires respoke.LocalMedia#stop\n\t     */\n\t    that.stop = function () {\n\t        if (!that.stream) {\n\t            return;\n\t        }\n\t\n\t        that.stream.numPc -= 1;\n\t        if (that.stream.numPc === 0) {\n\t            that.stream.stop();\n\t            removeStream(that.constraints);\n\t        }\n\t        that.stream = null;\n\t        /**\n\t         * Indicate that local media has stopped.\n\t         * @event respoke.LocalMedia#stop\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         */\n\t        that.fire('stop');\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we are sending a screenshare.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.hasScreenShare\n\t     * @return {boolean}\n\t     */\n\t    that.hasScreenShare = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getVideoTracks().length > 0 && hasScreenShare);\n\t        }\n\t        return hasScreenShare;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we are sending video.\n\t     *\n\t     * Note: This method will return true when the video is a screenshare.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.hasVideo\n\t     * @return {boolean}\n\t     */\n\t    that.hasVideo = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getVideoTracks().length > 0);\n\t        }\n\t        return sdpHasVideo;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we are sending audio.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.hasAudio\n\t     * @return {boolean}\n\t     */\n\t    that.hasAudio = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getAudioTracks().length > 0);\n\t        }\n\t        return sdpHasAudio;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we have media yet.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.hasMedia\n\t     * @return {boolean}\n\t     */\n\t    that.hasMedia = function () {\n\t        return !!that.stream;\n\t    };\n\t\n\t    /**\n\t     * Save and parse the SDP.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.setSDP\n\t     * @param {RTCSessionDescription} oSession\n\t     * @private\n\t     */\n\t    that.setSDP = function (oSession) {\n\t        sdpHasVideo = respoke.sdpHasVideo(oSession.sdp);\n\t        sdpHasAudio = respoke.sdpHasAudio(oSession.sdp);\n\t        sdpHasDataChannel = respoke.sdpHasDataChannel(oSession.sdp);\n\t\n\t        // We don't have media yet & this can still be changed so create the defaults based on what the sdp says.\n\t        if (that.temporary) {\n\t            that.constraints = {\n\t                video: sdpHasVideo,\n\t                audio: sdpHasAudio,\n\t                mandatory: {},\n\t                optional: []\n\t            };\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Parse the constraints.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.setConstraints\n\t     * @param {MediaConstraints} constraints\n\t     * @private\n\t     */\n\t    that.setConstraints = function (constraints) {\n\t        that.constraints = constraints;\n\t        sdpHasVideo = respoke.constraintsHasVideo(that.constraints);\n\t        sdpHasAudio = respoke.constraintsHasAudio(that.constraints);\n\t    };\n\t\n\t    /**\n\t     * Start the stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.start\n\t     * @fires respoke.LocalMedia#start\n\t     * @param {object} [params]\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.start = function (params) {\n\t        var retVal;\n\t        params = params || {};\n\t\n\t        if (that.temporary) {\n\t            deferred.reject(new Error(\"Temporary local media started!\"));\n\t        } else {\n\t            requestMedia();\n\t        }\n\t\n\t        retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t        return retVal;\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.LocalMedia\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar respoke = __webpack_require__(13);\n\t\n\t/**\n\t * Class for managing the remote media stream,\n\t * which is attached to a call at `call.outgoingMedia`.\n\t *\n\t * @class respoke.RemoteMedia\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {object} params.constraints\n\t * @param {boolean} params.temporary - whether this instance represents our best guess of future media. If so,\n\t * this object will be deleted when real media comes in. It will be replaced by different instance of\n\t * respoke.RemoteMedia representing the actual state of media.\n\t * @param {HTMLVideoElement} params.element - Pass in an optional html video element to have remote\n\t * video attached to it.\n\t * @returns {respoke.RemoteMedia}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var that = respoke.EventEmitter(params);\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.RemoteMedia';\n\t    /**\n\t     * Respoke media ID (different from a `MediaStream.id`).\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = respoke.makeGUID();\n\t    /**\n\t     * The HTML element with attached video.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name element\n\t     * @type {HTMLVideoElement}\n\t     */\n\t    that.element = params.element || document.createElement('video');\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name hasScreenShare\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var hasScreenShare = params.hasScreenShare;\n\t    delete params.hasScreenShare;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name sdpHasAudio\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasAudio = false;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name sdpHasVideo\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasVideo = false;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name sdpHasDataChannel\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasDataChannel = false;\n\t    /**\n\t     * A timer to make sure we only fire {respoke.RemoteMedia#requesting-media} if the browser doesn't\n\t     * automatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name allowTimer\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var allowTimer = 0;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name mediaOptions\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var mediaOptions = {\n\t        optional: [\n\t            { DtlsSrtpKeyAgreement: true },\n\t            { RtpDataChannels: false }\n\t        ]\n\t    };\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name pc\n\t     * @private\n\t     * @type {respoke.PeerConnection}\n\t     */\n\t    var pc = params.pc;\n\t    delete that.pc;\n\t    /**\n\t     * The remote `MediaStream`.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name stream\n\t     * @type {RTCMediaStream}\n\t     */\n\t    that.stream = params.stream;\n\t\n\t    if (!that.temporary) {\n\t        attachMediaStream(that.element, that.stream);\n\t        that.element.autoplay = true;\n\t        setTimeout(that.element.play.bind(that.element)); // stupid Firefox requires this.\n\t    }\n\t\n\t    /**\n\t     * Indicate whether we are receiving a screenshare.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.hasScreenShare\n\t     * @return {boolean}\n\t     */\n\t    that.hasScreenShare = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getVideoTracks().length > 0 && hasScreenShare);\n\t        }\n\t        return hasScreenShare;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we are receiving video.\n\t     *\n\t     * Note: This method will return true when the video is a screenshare.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.hasVideo\n\t     * @return {boolean}\n\t     */\n\t    that.hasVideo = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getVideoTracks().length > 0);\n\t        }\n\t        return sdpHasVideo;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we are receiving audio.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.hasAudio\n\t     * @return {boolean}\n\t     */\n\t    that.hasAudio = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getAudioTracks().length > 0);\n\t        }\n\t        return sdpHasAudio;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we have media yet.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.hasMedia\n\t     * @return {boolean}\n\t     */\n\t    that.hasMedia = function () {\n\t        return !!that.stream;\n\t    };\n\t\n\t    /**\n\t     * Save and parse the SDP\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.setSDP\n\t     * @param {RTCSessionDescription} oSession\n\t     * @private\n\t     */\n\t    that.setSDP = function (oSession) {\n\t        sdpHasVideo = respoke.sdpHasVideo(oSession.sdp);\n\t        sdpHasAudio = respoke.sdpHasAudio(oSession.sdp);\n\t        sdpHasDataChannel = respoke.sdpHasDataChannel(oSession.sdp);\n\t    };\n\t\n\t    /**\n\t     * Parse the constraints.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.setConstraints\n\t     * @param {MediaConstraints} constraints\n\t     * @private\n\t     */\n\t    that.setConstraints = function (constraints) {\n\t        that.constraints = constraints;\n\t        sdpHasVideo = respoke.constraintsHasVideo(that.constraints);\n\t        sdpHasAudio = respoke.constraintsHasAudio(that.constraints);\n\t    };\n\t\n\t    /**\n\t     * Expose getAudioTracks.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.getAudioTracks\n\t     */\n\t    that.getAudioTracks = function () {\n\t        if (that.stream) {\n\t            return that.stream.getAudioTracks();\n\t        }\n\t        return [];\n\t    };\n\t\n\t    /**\n\t     * Expose getVideoTracks.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.getVideoTracks\n\t     */\n\t    that.getVideoTracks = function () {\n\t        if (that.stream) {\n\t            return that.stream.getVideoTracks();\n\t        }\n\t        return [];\n\t    };\n\t\n\t    /**\n\t     * Stop the stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.stop\n\t     * @fires respoke.RemoteMedia#stop\n\t     */\n\t    that.stop = function () {\n\t        if (!that.stream) {\n\t            return;\n\t        }\n\t\n\t        that.stream.numPc -= 1;\n\t        if (that.stream.numPc === 0) {\n\t            that.stream.stop();\n\t        }\n\t        that.stream = null;\n\t        /**\n\t         * Indicate that remote media has stopped.\n\t         * @event respoke.RemoteMedia#stop\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         */\n\t        that.fire('stop');\n\t    };\n\t\n\t    /**\n\t     * Whether the video stream is muted.\n\t     *\n\t     * All video tracks must be muted for this to return `false`.\n\t     * @returns boolean\n\t     */\n\t    that.isVideoMuted = function () {\n\t        if (!that.stream) {\n\t            return false;\n\t        }\n\t        return that.stream.getVideoTracks().every(function (track) {\n\t            return !track.enabled;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Mute remote video stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.muteVideo\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.muteVideo = function () {\n\t        if (that.isVideoMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n\t            track.enabled = false;\n\t        });\n\t        /**\n\t         * Indicate that the muted status of remote video or audio has changed.\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'video',\n\t            muted: true\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Unmute remote video stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.unmuteVideo\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.unmuteVideo = function () {\n\t        if (!that.isVideoMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n\t            track.enabled = true;\n\t        });\n\t        /**\n\t         * Indicate that the muted status of remote video or audio has changed.\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'video',\n\t            muted: false\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Whether the audio stream is muted.\n\t     *\n\t     * All audio tracks must be muted for this to return `false`.\n\t     * @returns boolean\n\t     */\n\t    that.isAudioMuted = function () {\n\t        if (!that.stream) {\n\t            return false;\n\t        }\n\t        return that.stream.getAudioTracks().every(function (track) {\n\t            return !track.enabled;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Mute remote audio stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.muteAudio\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.muteAudio = function () {\n\t        if (that.isAudioMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n\t            track.enabled = false;\n\t        });\n\t        /**\n\t         * Indicate that the muted status of remote video or audio has changed.\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'audio',\n\t            muted: true\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Unmute remote audio stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.unmuteAudio\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.unmuteAudio = function () {\n\t        if (!that.isAudioMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n\t            track.enabled = true;\n\t        });\n\t        /**\n\t         * Indicate that the muted status of remote video or audio has changed.\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'audio',\n\t            muted: false\n\t        });\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.RemoteMedia\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar Q = __webpack_require__(21);\n\tvar respoke = __webpack_require__(13);\n\t\n\t/**\n\t * A conference call to one or more people with audio. Eventually this will handle video, too.\n\t * @class respoke.Conference\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.conferenceId - The id that should be used to create the conference call or the ID\n\t * of the call to join.\n\t * @param {string} params.instanceId - client id\n\t * @param {string} params.key - The key that indicates an endpoint can join.\n\t * @param {boolean} params.open - whether endpoints can join this conference without a key.\n\t * @param {boolean} params.caller - whether or not we initiated the call\n\t * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t * @param {boolean} [params.sendOnly] - whether or not we send media\n\t * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t * relay servers. If it cannot flow through relay servers, the call will fail.\n\t * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t * required to flow peer-to-peer. If it cannot, the call will fail.\n\t * @param {respoke.Endpoint} params.remoteEndpoint - The endpoint who is being called.\n\t * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint.\n\t * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t * wants to perform an action between local media becoming available and calling approve().\n\t * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n\t * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n\t * @param {function} params.signalReport - Signaling action from SignalingChannel.\n\t * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n\t * @param {Array<RTCConstraints>} params.constraints - Array of WebRTC constraints.\n\t * @param {respoke.Conference.onJoin} [params.onJoin] - Callback for when a participant joins the conference.\n\t * @param {respoke.Conference.onLeave} [params.onLeave] - Callback for when a participant leaves the conference.\n\t * @param {respoke.Conference.onMessage} [params.onMessage] - Callback for when a message is sent to the conference.\n\t * @param {respoke.Conference.onMute} [params.onMute] - Callback for when local or remote media is muted or unmuted.\n\t * @param {respoke.Conference.onTopic} [params.onTopic] - Callback for the conference topic changes.\n\t * @param {respoke.Conference.onPresenter} [params.onPresenter] - Callback for when the presenter changes.\n\t * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t * media renegotiation.\n\t * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t * element with the local audio and/or video attached.\n\t * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n\t * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n\t * it was ended in a graceful manner.\n\t * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t * This callback will be called when media is muted or unmuted.\n\t * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t * for the user to give permission to start getting audio or video.\n\t * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t * the approval was automatic.\n\t * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n\t * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n\t * granted by the browser without asking the user to approve it.\n\t * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n\t * video attached to it.\n\t * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n\t * video attached to it.\n\t * @returns {respoke.Conference}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var signalingChannel = params.signalingChannel;\n\t    var that = respoke.EventEmitter({\n\t        open: params.open,\n\t        key: params.key,\n\t        id: params.conferenceId\n\t    });\n\t\n\t    that.listen('join', params.onJoin);\n\t    that.listen('leave', params.onLeave);\n\t    that.listen('message', params.onMessage);\n\t    that.listen('mute', params.onMute);\n\t    that.listen('topic', params.onTopic);\n\t    that.listen('presenter', params.onPresenter);\n\t    delete params.onJoin;\n\t    delete params.onLeave;\n\t    delete params.onMessage;\n\t    delete params.onMute;\n\t    delete params.onTopic;\n\t    delete params.onPresenter;\n\t\n\t    params.caller = true;\n\t    delete params.conferenceId;\n\t    delete params.key;\n\t    params.remoteEndpoint = that;\n\t    that.call = respoke.Call(params);\n\t\n\t    // Redirect a bunch of events.\n\t    ['mute', 'hangup', 'connect'].forEach(function (eventName) {\n\t        that.call.listen(eventName, function (evt) {\n\t            evt.call = that.call; // target will be updated to point to this conference object.\n\t            that.fire(eventName, evt);\n\t        });\n\t    });\n\t\n\t    delete that.instanceId;\n\t\n\t    /**\n\t     * A name to identify this class\n\t     * @memberof! respoke.Conference\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Conference';\n\t\n\t    /**\n\t     * @memberof! respoke.Conference\n\t     * @name client\n\t     * @type {respoke.Client}\n\t     * @private\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t\n\t    /**\n\t     * Hang up on the conference call.\n\t     * @memberof! respoke.Conference\n\t     * @method respoke.Conference.hangup\n\t     */\n\t    that.hangup = that.call.hangup;\n\t\n\t    /**\n\t     * Mute local user's audio.\n\t     * @memberof! respoke.Conference\n\t     * @method respoke.Conference.muteAudio\n\t     */\n\t    that.muteAudio = that.call.muteAudio;\n\t\n\t    return that;\n\t};\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar require;var require;/* WEBPACK VAR INJECTION */(function(global) {(function(f){if(true){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}(g.airbrakeJs || (g.airbrakeJs = {})).Client = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\t(function (global){\n\tvar Client, merge;\n\t\n\trequire('./internal/compat');\n\t\n\tmerge = require('./internal/merge');\n\t\n\tClient = (function() {\n\t  function Client(opts) {\n\t    var reporter;\n\t    if (opts == null) {\n\t      opts = {};\n\t    }\n\t    this._projectId = opts.projectId || 0;\n\t    this._projectKey = opts.projectKey || '';\n\t    this._host = 'https://api.airbrake.io';\n\t    this._context = {};\n\t    this._params = {};\n\t    this._env = {};\n\t    this._session = {};\n\t    this._processor = null;\n\t    this._reporters = [];\n\t    this._filters = [];\n\t    if (opts.processor !== void 0) {\n\t      this._processor = opts.processor;\n\t    } else {\n\t      this._processor = require('./processors/stack');\n\t    }\n\t    if (opts.reporter !== void 0) {\n\t      this.addReporter(opts.reporter);\n\t    } else {\n\t      if ('withCredentials' in new global.XMLHttpRequest()) {\n\t        reporter = require('./reporters/xhr');\n\t      } else {\n\t        reporter = require('./reporters/jsonp');\n\t      }\n\t      this.addReporter(reporter);\n\t    }\n\t  }\n\t\n\t  Client.prototype.setProject = function(id, key) {\n\t    this._projectId = id;\n\t    return this._projectKey = key;\n\t  };\n\t\n\t  Client.prototype.setHost = function(host) {\n\t    return this._host = host;\n\t  };\n\t\n\t  Client.prototype.addContext = function(context) {\n\t    return merge(this._context, context);\n\t  };\n\t\n\t  Client.prototype.setEnvironmentName = function(envName) {\n\t    return this._context.environment = envName;\n\t  };\n\t\n\t  Client.prototype.addParams = function(params) {\n\t    return merge(this._params, params);\n\t  };\n\t\n\t  Client.prototype.addEnvironment = function(env) {\n\t    return merge(this._env, env);\n\t  };\n\t\n\t  Client.prototype.addSession = function(session) {\n\t    return merge(this._session, session);\n\t  };\n\t\n\t  Client.prototype.addReporter = function(reporter) {\n\t    return this._reporters.push(reporter);\n\t  };\n\t\n\t  Client.prototype.addFilter = function(filter) {\n\t    return this._filters.push(filter);\n\t  };\n\t\n\t  Client.prototype.push = function(err) {\n\t    var defContext, ref;\n\t    defContext = {\n\t      language: 'JavaScript',\n\t      sourceMapEnabled: true\n\t    };\n\t    if ((ref = global.navigator) != null ? ref.userAgent : void 0) {\n\t      defContext.userAgent = global.navigator.userAgent;\n\t    }\n\t    if (global.location) {\n\t      defContext.url = String(global.location);\n\t    }\n\t    return this._processor(err.error || err, (function(_this) {\n\t      return function(name, errInfo) {\n\t        var filterFn, j, k, len, len1, notice, ref1, ref2, reporterFn;\n\t        notice = {\n\t          notifier: {\n\t            name: 'airbrake-js-' + name,\n\t            version: '0.4.0-alpha.1',\n\t            url: 'https://github.com/airbrake/airbrake-js'\n\t          },\n\t          errors: [errInfo],\n\t          context: merge(defContext, _this._context, err.context),\n\t          params: merge({}, _this._params, err.params),\n\t          environment: merge({}, _this._env, err.environment),\n\t          session: merge({}, _this._session, err.session)\n\t        };\n\t        ref1 = _this._filters;\n\t        for (j = 0, len = ref1.length; j < len; j++) {\n\t          filterFn = ref1[j];\n\t          if (!filterFn(notice)) {\n\t            return;\n\t          }\n\t        }\n\t        ref2 = _this._reporters;\n\t        for (k = 0, len1 = ref2.length; k < len1; k++) {\n\t          reporterFn = ref2[k];\n\t          reporterFn(notice, {\n\t            projectId: _this._projectId,\n\t            projectKey: _this._projectKey,\n\t            host: _this._host\n\t          });\n\t        }\n\t      };\n\t    })(this));\n\t  };\n\t\n\t  Client.prototype._wrapArguments = function(args) {\n\t    var arg, i, j, len;\n\t    for (i = j = 0, len = args.length; j < len; i = ++j) {\n\t      arg = args[i];\n\t      if (typeof arg === 'function') {\n\t        args[i] = this.wrap(arg);\n\t      }\n\t    }\n\t    return args;\n\t  };\n\t\n\t  Client.prototype.wrap = function(fn) {\n\t    var airbrakeWrapper, prop, self;\n\t    if (fn.__airbrake__) {\n\t      return fn;\n\t    }\n\t    self = this;\n\t    airbrakeWrapper = function() {\n\t      var args, exc;\n\t      args = self._wrapArguments(arguments);\n\t      try {\n\t        return fn.apply(this, args);\n\t      } catch (_error) {\n\t        exc = _error;\n\t        args = Array.prototype.slice.call(arguments);\n\t        self.push({\n\t          error: exc,\n\t          params: {\n\t            \"arguments\": args\n\t          }\n\t        });\n\t        return null;\n\t      }\n\t    };\n\t    for (prop in fn) {\n\t      if (fn.hasOwnProperty(prop)) {\n\t        airbrakeWrapper[prop] = fn[prop];\n\t      }\n\t    }\n\t    airbrakeWrapper.__airbrake__ = true;\n\t    airbrakeWrapper.__inner__ = fn;\n\t    return airbrakeWrapper;\n\t  };\n\t\n\t  return Client;\n\t\n\t})();\n\t\n\tmodule.exports = Client;\n\t\n\t\n\t\n\t}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\t},{\"./internal/compat\":2,\"./internal/merge\":4,\"./processors/stack\":6,\"./reporters/jsonp\":7,\"./reporters/xhr\":8}],2:[function(require,module,exports){\n\tvar base;\n\t\n\tif ((base = Array.prototype).indexOf == null) {\n\t  base.indexOf = function(obj, start) {\n\t    var i, j, ref, ref1;\n\t    start = start || 0;\n\t    for (i = j = ref = start, ref1 = this.length; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {\n\t      if (this[i] === obj) {\n\t        return i;\n\t      }\n\t    }\n\t    return -1;\n\t  };\n\t}\n\t\n\t\n\t\n\t},{}],3:[function(require,module,exports){\n\tvar jsonifyNotice, truncate, truncateObj;\n\t\n\ttruncate = require('./truncate');\n\t\n\ttruncateObj = function(obj, n) {\n\t  var dst, key;\n\t  if (n == null) {\n\t    n = 1000;\n\t  }\n\t  dst = {};\n\t  for (key in obj) {\n\t    dst[key] = truncate(obj[key], n = n);\n\t  }\n\t  return dst;\n\t};\n\t\n\tjsonifyNotice = function(notice, n, maxLength) {\n\t  var err, s;\n\t  if (n == null) {\n\t    n = 1000;\n\t  }\n\t  if (maxLength == null) {\n\t    maxLength = 64000;\n\t  }\n\t  while (true) {\n\t    notice.params = truncateObj(notice.params, n = n);\n\t    notice.environment = truncateObj(notice.environment, n = n);\n\t    notice.session = truncateObj(notice.session, n = n);\n\t    s = JSON.stringify(notice);\n\t    if (s.length < maxLength) {\n\t      return s;\n\t    }\n\t    if (n === 0) {\n\t      break;\n\t    }\n\t    n = Math.floor(n / 2);\n\t  }\n\t  err = new Error(\"airbrake-js: cannot jsonify notice (length=\" + s.length + \" maxLength=\" + maxLength + \")\");\n\t  err.params = {\n\t    json: s.slice(0, +Math.floor(n / 2) + 1 || 9e9) + '...'\n\t  };\n\t  throw err;\n\t};\n\t\n\tmodule.exports = jsonifyNotice;\n\t\n\t\n\t\n\t},{\"./truncate\":5}],4:[function(require,module,exports){\n\tvar merge;\n\t\n\tmerge = function() {\n\t  var dst, i, key, len, obj, objs;\n\t  objs = Array.prototype.slice.call(arguments);\n\t  dst = objs.shift() || {};\n\t  for (i = 0, len = objs.length; i < len; i++) {\n\t    obj = objs[i];\n\t    for (key in obj) {\n\t      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n\t        dst[key] = obj[key];\n\t      }\n\t    }\n\t  }\n\t  return dst;\n\t};\n\t\n\tmodule.exports = merge;\n\t\n\t\n\t\n\t},{}],5:[function(require,module,exports){\n\tvar getAttr, truncate;\n\t\n\tgetAttr = function(obj, attr) {\n\t  var exc;\n\t  try {\n\t    return obj[attr];\n\t  } catch (_error) {\n\t    exc = _error;\n\t    return void 0;\n\t  }\n\t};\n\t\n\ttruncate = function(value, n, depth) {\n\t  var fn, getPath, keys, nn, seen;\n\t  if (n == null) {\n\t    n = 1000;\n\t  }\n\t  if (depth == null) {\n\t    depth = 5;\n\t  }\n\t  nn = 0;\n\t  keys = [];\n\t  seen = [];\n\t  getPath = function(value) {\n\t    var i, index, j, path, ref;\n\t    index = seen.indexOf(value);\n\t    path = [keys[index]];\n\t    for (i = j = ref = index; ref <= 0 ? j <= 0 : j >= 0; i = ref <= 0 ? ++j : --j) {\n\t      if (seen[i] && getAttr(seen[i], path[0]) === value) {\n\t        value = seen[i];\n\t        path.unshift(keys[i]);\n\t      }\n\t    }\n\t    return '~' + path.join('.');\n\t  };\n\t  fn = function(value, key, dd) {\n\t    var dst, el, i, j, len, val;\n\t    if (key == null) {\n\t      key = '';\n\t    }\n\t    if (dd == null) {\n\t      dd = 0;\n\t    }\n\t    nn++;\n\t    if (nn > n) {\n\t      return '[Truncated]';\n\t    }\n\t    if (value === null || value === void 0) {\n\t      return value;\n\t    }\n\t    switch (typeof value) {\n\t      case 'boolean':\n\t      case 'number':\n\t      case 'string':\n\t      case 'function':\n\t        return value;\n\t      case 'object':\n\t        break;\n\t      default:\n\t        return String(value);\n\t    }\n\t    if (value instanceof Boolean || value instanceof Number || value instanceof String || value instanceof Date || value instanceof RegExp) {\n\t      return value;\n\t    }\n\t    if (seen.indexOf(value) >= 0) {\n\t      return \"[Circular \" + (getPath(value)) + \"]\";\n\t    }\n\t    dd++;\n\t    if (dd > depth) {\n\t      return '[Truncated]';\n\t    }\n\t    keys.push(key);\n\t    seen.push(value);\n\t    nn--;\n\t    if (Object.prototype.toString.apply(value) === '[object Array]') {\n\t      dst = [];\n\t      for (i = j = 0, len = value.length; j < len; i = ++j) {\n\t        el = value[i];\n\t        nn++;\n\t        if (nn >= n) {\n\t          break;\n\t        }\n\t        dst.push(fn(el, key = i, dd));\n\t      }\n\t      return dst;\n\t    }\n\t    dst = {};\n\t    for (key in value) {\n\t      if (!Object.prototype.hasOwnProperty.call(value, key)) {\n\t        continue;\n\t      }\n\t      nn++;\n\t      if (nn >= n) {\n\t        break;\n\t      }\n\t      val = getAttr(value, key);\n\t      if (val !== void 0) {\n\t        dst[key] = fn(val, key = key, dd);\n\t      }\n\t    }\n\t    return dst;\n\t  };\n\t  return fn(value);\n\t};\n\t\n\tmodule.exports = truncate;\n\t\n\t\n\t\n\t},{}],6:[function(require,module,exports){\n\tvar processor, rules, typeMessageRe;\n\t\n\trules = [\n\t  {\n\t    name: 'v8',\n\t    re: /^\\s*at\\s(.+?)\\s\\((?:(?:(.+):(\\d+):(\\d+))|(.+))\\)$/,\n\t    fn: function(m) {\n\t      return {\n\t        \"function\": m[1],\n\t        file: m[2] || m[5],\n\t        line: m[3] && parseInt(m[3], 10) || 0,\n\t        column: m[4] && parseInt(m[4], 10) || 0\n\t      };\n\t    }\n\t  }, {\n\t    name: 'firefox30',\n\t    re: /^(.*)@(.+):(\\d+):(\\d+)$/,\n\t    fn: function(m) {\n\t      var evaledRe, file, func, mm;\n\t      func = m[1];\n\t      file = m[2];\n\t      evaledRe = /^(\\S+)\\s(line\\s\\d+\\s>\\seval.*)$/;\n\t      if (mm = file.match(evaledRe)) {\n\t        if (func.length > 0) {\n\t          func = func + ' ' + mm[2];\n\t        } else {\n\t          func = mm[2];\n\t        }\n\t        file = mm[1];\n\t      }\n\t      return {\n\t        \"function\": func,\n\t        file: file,\n\t        line: parseInt(m[3], 10),\n\t        column: parseInt(m[4], 10)\n\t      };\n\t    }\n\t  }, {\n\t    name: 'firefox14',\n\t    re: /^(.*)@(.+):(\\d+)$/,\n\t    fn: function(m, i, e) {\n\t      var column;\n\t      if (i === 0) {\n\t        column = e.columnNumber || 0;\n\t      } else {\n\t        column = 0;\n\t      }\n\t      return {\n\t        \"function\": m[1],\n\t        file: m[2],\n\t        line: parseInt(m[3], 10),\n\t        column: column\n\t      };\n\t    }\n\t  }, {\n\t    name: 'v8-short',\n\t    re: /^\\s*at\\s(.+):(\\d+):(\\d+)$/,\n\t    fn: function(m) {\n\t      return {\n\t        \"function\": '',\n\t        file: m[1],\n\t        line: parseInt(m[2], 10),\n\t        column: parseInt(m[3], 10)\n\t      };\n\t    }\n\t  }, {\n\t    name: 'default',\n\t    re: /.+/,\n\t    fn: function(m) {\n\t      return {\n\t        \"function\": m[0],\n\t        file: '',\n\t        line: 0,\n\t        column: 0\n\t      };\n\t    }\n\t  }\n\t];\n\t\n\ttypeMessageRe = /^\\S+:\\s.+$/;\n\t\n\tprocessor = function(e, cb) {\n\t  var backtrace, i, j, k, len, len1, line, lines, m, msg, processorName, rule, stack, type, uncaughtExcRe;\n\t  processorName = 'nostack';\n\t  stack = e.stack || '';\n\t  lines = stack.split('\\n');\n\t  backtrace = [];\n\t  for (i = j = 0, len = lines.length; j < len; i = ++j) {\n\t    line = lines[i];\n\t    if (line === '') {\n\t      continue;\n\t    }\n\t    for (k = 0, len1 = rules.length; k < len1; k++) {\n\t      rule = rules[k];\n\t      m = line.match(rule.re);\n\t      if (!m) {\n\t        continue;\n\t      }\n\t      processorName = rule.name;\n\t      backtrace.push(rule.fn(m, i, e));\n\t      break;\n\t    }\n\t  }\n\t  if ((processorName === 'v8' || processorName === 'v8-short') && backtrace.length > 0 && backtrace[0][\"function\"].match(typeMessageRe)) {\n\t    backtrace = backtrace.slice(1);\n\t  }\n\t  if (backtrace.length === 0 && ((e.fileName != null) || (e.lineNumber != null) || (e.columnNumber != null))) {\n\t    backtrace.push({\n\t      \"function\": '',\n\t      file: e.fileName || '',\n\t      line: parseInt(e.lineNumber, 10) || 0,\n\t      column: parseInt(e.columnNumber, 10) || 0\n\t    });\n\t  }\n\t  if (backtrace.length === 0 && ((e.filename != null) || (e.lineno != null) || (e.column != null) || (e.colno != null))) {\n\t    backtrace.push({\n\t      \"function\": '',\n\t      file: e.filename || '',\n\t      line: parseInt(e.lineno, 10) || 0,\n\t      column: parseInt(e.column || e.colno, 10) || 0\n\t    });\n\t  }\n\t  if (e.message != null) {\n\t    msg = e.message;\n\t  } else {\n\t    msg = String(e);\n\t  }\n\t  if (e.name != null) {\n\t    type = e.name;\n\t    msg = type + ': ' + msg;\n\t  } else {\n\t    uncaughtExcRe = /^Uncaught\\s(.+?):\\s.+$/;\n\t    m = msg.match(uncaughtExcRe);\n\t    if (m) {\n\t      type = m[1];\n\t    } else {\n\t      type = '';\n\t    }\n\t  }\n\t  return cb(processorName, {\n\t    'type': type,\n\t    'message': msg,\n\t    'backtrace': backtrace\n\t  });\n\t};\n\t\n\tmodule.exports = processor;\n\t\n\t\n\t\n\t},{}],7:[function(require,module,exports){\n\t(function (global){\n\tvar cbCount, jsonifyNotice, report;\n\t\n\tjsonifyNotice = require('../internal/jsonify_notice');\n\t\n\tcbCount = 0;\n\t\n\treport = function(notice, opts) {\n\t  var cbName, document, head, payload, removeScript, script, url;\n\t  cbCount++;\n\t  cbName = \"airbrakeCb\" + String(cbCount);\n\t  global[cbName] = function(resp) {\n\t    var _;\n\t    if (typeof console !== \"undefined\" && console !== null) {\n\t      if (typeof console.debug === \"function\") {\n\t        console.debug(\"airbrake-js: error #%s was reported: %s\", resp.id, resp.url);\n\t      }\n\t    }\n\t    try {\n\t      return delete global[cbName];\n\t    } catch (_error) {\n\t      _ = _error;\n\t      return global[cbName] = void 0;\n\t    }\n\t  };\n\t  payload = encodeURIComponent(jsonifyNotice(notice));\n\t  url = opts.host + \"/api/v3/projects/\" + opts.projectId + \"/create-notice?key=\" + opts.projectKey + \"&callback=\" + cbName + \"&body=\" + payload;\n\t  document = global.document;\n\t  head = document.getElementsByTagName('head')[0];\n\t  script = document.createElement('script');\n\t  script.src = url;\n\t  removeScript = function() {\n\t    return head.removeChild(script);\n\t  };\n\t  script.onload = removeScript;\n\t  script.onerror = removeScript;\n\t  return head.appendChild(script);\n\t};\n\t\n\tmodule.exports = report;\n\t\n\t\n\t\n\t}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\t},{\"../internal/jsonify_notice\":3}],8:[function(require,module,exports){\n\t(function (global){\n\tvar jsonifyNotice, report;\n\t\n\tjsonifyNotice = require('../internal/jsonify_notice');\n\t\n\treport = function(notice, opts) {\n\t  var payload, req, url;\n\t  url = opts.host + \"/api/v3/projects/\" + opts.projectId + \"/notices?key=\" + opts.projectKey;\n\t  payload = jsonifyNotice(notice);\n\t  req = new global.XMLHttpRequest();\n\t  req.open('POST', url, true);\n\t  req.setRequestHeader('Content-Type', 'application/json');\n\t  req.send(payload);\n\t  return req.onreadystatechange = function() {\n\t    var resp;\n\t    if (req.readyState === 4 && req.status === 201 && ((typeof console !== \"undefined\" && console !== null ? console.debug : void 0) != null)) {\n\t      resp = JSON.parse(req.responseText);\n\t      return console.debug(\"airbrake: error #%s was reported: %s\", resp.id, resp.url);\n\t    }\n\t  };\n\t};\n\t\n\tmodule.exports = report;\n\t\n\t\n\t\n\t}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\t},{\"../internal/jsonify_notice\":3}]},{},[1])(1)\n\t});\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// vim:ts=4:sts=4:sw=4:\n\t/*!\n\t *\n\t * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n\t * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n\t *\n\t * With parts by Tyler Close\n\t * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n\t * at http://www.opensource.org/licenses/mit-license.html\n\t * Forked at ref_send.js version: 2009-05-11\n\t *\n\t * With parts by Mark Miller\n\t * Copyright (C) 2011 Google Inc.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t *\n\t */\n\t\n\t(function (definition) {\n\t    \"use strict\";\n\t\n\t    // This file will function properly as a <script> tag, or a module\n\t    // using CommonJS and NodeJS or RequireJS module formats.  In\n\t    // Common/Node/RequireJS, the module exports the Q API and when\n\t    // executed as a simple <script>, it creates a Q global instead.\n\t\n\t    // Montage Require\n\t    if (typeof bootstrap === \"function\") {\n\t        bootstrap(\"promise\", definition);\n\t\n\t    // CommonJS\n\t    } else if (true) {\n\t        module.exports = definition();\n\t\n\t    // RequireJS\n\t    } else if (typeof define === \"function\" && define.amd) {\n\t        define(definition);\n\t\n\t    // SES (Secure EcmaScript)\n\t    } else if (typeof ses !== \"undefined\") {\n\t        if (!ses.ok()) {\n\t            return;\n\t        } else {\n\t            ses.makeQ = definition;\n\t        }\n\t\n\t    // <script>\n\t    } else if (typeof self !== \"undefined\") {\n\t        self.Q = definition();\n\t\n\t    } else {\n\t        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n\t    }\n\t\n\t})(function () {\n\t\"use strict\";\n\t\n\tvar hasStacks = false;\n\ttry {\n\t    throw new Error();\n\t} catch (e) {\n\t    hasStacks = !!e.stack;\n\t}\n\t\n\t// All code after this point will be filtered from stack traces reported\n\t// by Q.\n\tvar qStartingLine = captureLine();\n\tvar qFileName;\n\t\n\t// shims\n\t\n\t// used for fallback in \"allResolved\"\n\tvar noop = function () {};\n\t\n\t// Use the fastest possible means to execute a task in a future turn\n\t// of the event loop.\n\tvar nextTick =(function () {\n\t    // linked list of tasks (single, with head node)\n\t    var head = {task: void 0, next: null};\n\t    var tail = head;\n\t    var flushing = false;\n\t    var requestTick = void 0;\n\t    var isNodeJS = false;\n\t    // queue for late tasks, used by unhandled rejection tracking\n\t    var laterQueue = [];\n\t\n\t    function flush() {\n\t        /* jshint loopfunc: true */\n\t        var task, domain;\n\t\n\t        while (head.next) {\n\t            head = head.next;\n\t            task = head.task;\n\t            head.task = void 0;\n\t            domain = head.domain;\n\t\n\t            if (domain) {\n\t                head.domain = void 0;\n\t                domain.enter();\n\t            }\n\t            runSingle(task, domain);\n\t\n\t        }\n\t        while (laterQueue.length) {\n\t            task = laterQueue.pop();\n\t            runSingle(task);\n\t        }\n\t        flushing = false;\n\t    }\n\t    // runs a single function in the async queue\n\t    function runSingle(task, domain) {\n\t        try {\n\t            task();\n\t\n\t        } catch (e) {\n\t            if (isNodeJS) {\n\t                // In node, uncaught exceptions are considered fatal errors.\n\t                // Re-throw them synchronously to interrupt flushing!\n\t\n\t                // Ensure continuation if the uncaught exception is suppressed\n\t                // listening \"uncaughtException\" events (as domains does).\n\t                // Continue in next event to avoid tick recursion.\n\t                if (domain) {\n\t                    domain.exit();\n\t                }\n\t                setTimeout(flush, 0);\n\t                if (domain) {\n\t                    domain.enter();\n\t                }\n\t\n\t                throw e;\n\t\n\t            } else {\n\t                // In browsers, uncaught exceptions are not fatal.\n\t                // Re-throw them asynchronously to avoid slow-downs.\n\t                setTimeout(function () {\n\t                    throw e;\n\t                }, 0);\n\t            }\n\t        }\n\t\n\t        if (domain) {\n\t            domain.exit();\n\t        }\n\t    }\n\t\n\t    nextTick = function (task) {\n\t        tail = tail.next = {\n\t            task: task,\n\t            domain: isNodeJS && process.domain,\n\t            next: null\n\t        };\n\t\n\t        if (!flushing) {\n\t            flushing = true;\n\t            requestTick();\n\t        }\n\t    };\n\t\n\t    if (typeof process === \"object\" &&\n\t        process.toString() === \"[object process]\" && process.nextTick) {\n\t        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n\t        // To see through fake Node environments:\n\t        // * Mocha test runner - exposes a `process` global without a `nextTick`\n\t        // * Browserify - exposes a `process.nexTick` function that uses\n\t        //   `setTimeout`. In this case `setImmediate` is preferred because\n\t        //    it is faster. Browserify's `process.toString()` yields\n\t        //   \"[object Object]\", while in a real Node environment\n\t        //   `process.nextTick()` yields \"[object process]\".\n\t        isNodeJS = true;\n\t\n\t        requestTick = function () {\n\t            process.nextTick(flush);\n\t        };\n\t\n\t    } else if (typeof setImmediate === \"function\") {\n\t        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n\t        if (typeof window !== \"undefined\") {\n\t            requestTick = setImmediate.bind(window, flush);\n\t        } else {\n\t            requestTick = function () {\n\t                setImmediate(flush);\n\t            };\n\t        }\n\t\n\t    } else if (typeof MessageChannel !== \"undefined\") {\n\t        // modern browsers\n\t        // http://www.nonblocking.io/2011/06/windownexttick.html\n\t        var channel = new MessageChannel();\n\t        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n\t        // working message ports the first time a page loads.\n\t        channel.port1.onmessage = function () {\n\t            requestTick = requestPortTick;\n\t            channel.port1.onmessage = flush;\n\t            flush();\n\t        };\n\t        var requestPortTick = function () {\n\t            // Opera requires us to provide a message payload, regardless of\n\t            // whether we use it.\n\t            channel.port2.postMessage(0);\n\t        };\n\t        requestTick = function () {\n\t            setTimeout(flush, 0);\n\t            requestPortTick();\n\t        };\n\t\n\t    } else {\n\t        // old browsers\n\t        requestTick = function () {\n\t            setTimeout(flush, 0);\n\t        };\n\t    }\n\t    // runs a task after all other tasks have been run\n\t    // this is useful for unhandled rejection tracking that needs to happen\n\t    // after all `then`d tasks have been run.\n\t    nextTick.runAfter = function (task) {\n\t        laterQueue.push(task);\n\t        if (!flushing) {\n\t            flushing = true;\n\t            requestTick();\n\t        }\n\t    };\n\t    return nextTick;\n\t})();\n\t\n\t// Attempt to make generics safe in the face of downstream\n\t// modifications.\n\t// There is no situation where this is necessary.\n\t// If you need a security guarantee, these primordials need to be\n\t// deeply frozen anyway, and if you don’t need a security guarantee,\n\t// this is just plain paranoid.\n\t// However, this **might** have the nice side-effect of reducing the size of\n\t// the minified code by reducing x.call() to merely x()\n\t// See Mark Miller’s explanation of what this does.\n\t// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n\tvar call = Function.call;\n\tfunction uncurryThis(f) {\n\t    return function () {\n\t        return call.apply(f, arguments);\n\t    };\n\t}\n\t// This is equivalent, but slower:\n\t// uncurryThis = Function_bind.bind(Function_bind.call);\n\t// http://jsperf.com/uncurrythis\n\t\n\tvar array_slice = uncurryThis(Array.prototype.slice);\n\t\n\tvar array_reduce = uncurryThis(\n\t    Array.prototype.reduce || function (callback, basis) {\n\t        var index = 0,\n\t            length = this.length;\n\t        // concerning the initial value, if one is not provided\n\t        if (arguments.length === 1) {\n\t            // seek to the first value in the array, accounting\n\t            // for the possibility that is is a sparse array\n\t            do {\n\t                if (index in this) {\n\t                    basis = this[index++];\n\t                    break;\n\t                }\n\t                if (++index >= length) {\n\t                    throw new TypeError();\n\t                }\n\t            } while (1);\n\t        }\n\t        // reduce\n\t        for (; index < length; index++) {\n\t            // account for the possibility that the array is sparse\n\t            if (index in this) {\n\t                basis = callback(basis, this[index], index);\n\t            }\n\t        }\n\t        return basis;\n\t    }\n\t);\n\t\n\tvar array_indexOf = uncurryThis(\n\t    Array.prototype.indexOf || function (value) {\n\t        // not a very good shim, but good enough for our one use of it\n\t        for (var i = 0; i < this.length; i++) {\n\t            if (this[i] === value) {\n\t                return i;\n\t            }\n\t        }\n\t        return -1;\n\t    }\n\t);\n\t\n\tvar array_map = uncurryThis(\n\t    Array.prototype.map || function (callback, thisp) {\n\t        var self = this;\n\t        var collect = [];\n\t        array_reduce(self, function (undefined, value, index) {\n\t            collect.push(callback.call(thisp, value, index, self));\n\t        }, void 0);\n\t        return collect;\n\t    }\n\t);\n\t\n\tvar object_create = Object.create || function (prototype) {\n\t    function Type() { }\n\t    Type.prototype = prototype;\n\t    return new Type();\n\t};\n\t\n\tvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\t\n\tvar object_keys = Object.keys || function (object) {\n\t    var keys = [];\n\t    for (var key in object) {\n\t        if (object_hasOwnProperty(object, key)) {\n\t            keys.push(key);\n\t        }\n\t    }\n\t    return keys;\n\t};\n\t\n\tvar object_toString = uncurryThis(Object.prototype.toString);\n\t\n\tfunction isObject(value) {\n\t    return value === Object(value);\n\t}\n\t\n\t// generator related shims\n\t\n\t// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\n\tfunction isStopIteration(exception) {\n\t    return (\n\t        object_toString(exception) === \"[object StopIteration]\" ||\n\t        exception instanceof QReturnValue\n\t    );\n\t}\n\t\n\t// FIXME: Remove this helper and Q.return once ES6 generators are in\n\t// SpiderMonkey.\n\tvar QReturnValue;\n\tif (typeof ReturnValue !== \"undefined\") {\n\t    QReturnValue = ReturnValue;\n\t} else {\n\t    QReturnValue = function (value) {\n\t        this.value = value;\n\t    };\n\t}\n\t\n\t// long stack traces\n\t\n\tvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\t\n\tfunction makeStackTraceLong(error, promise) {\n\t    // If possible, transform the error stack trace by removing Node and Q\n\t    // cruft, then concatenating with the stack trace of `promise`. See #57.\n\t    if (hasStacks &&\n\t        promise.stack &&\n\t        typeof error === \"object\" &&\n\t        error !== null &&\n\t        error.stack &&\n\t        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n\t    ) {\n\t        var stacks = [];\n\t        for (var p = promise; !!p; p = p.source) {\n\t            if (p.stack) {\n\t                stacks.unshift(p.stack);\n\t            }\n\t        }\n\t        stacks.unshift(error.stack);\n\t\n\t        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n\t        error.stack = filterStackString(concatedStacks);\n\t    }\n\t}\n\t\n\tfunction filterStackString(stackString) {\n\t    var lines = stackString.split(\"\\n\");\n\t    var desiredLines = [];\n\t    for (var i = 0; i < lines.length; ++i) {\n\t        var line = lines[i];\n\t\n\t        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n\t            desiredLines.push(line);\n\t        }\n\t    }\n\t    return desiredLines.join(\"\\n\");\n\t}\n\t\n\tfunction isNodeFrame(stackLine) {\n\t    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n\t           stackLine.indexOf(\"(node.js:\") !== -1;\n\t}\n\t\n\tfunction getFileNameAndLineNumber(stackLine) {\n\t    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n\t    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n\t    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n\t    if (attempt1) {\n\t        return [attempt1[1], Number(attempt1[2])];\n\t    }\n\t\n\t    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n\t    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n\t    if (attempt2) {\n\t        return [attempt2[1], Number(attempt2[2])];\n\t    }\n\t\n\t    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n\t    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n\t    if (attempt3) {\n\t        return [attempt3[1], Number(attempt3[2])];\n\t    }\n\t}\n\t\n\tfunction isInternalFrame(stackLine) {\n\t    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\t\n\t    if (!fileNameAndLineNumber) {\n\t        return false;\n\t    }\n\t\n\t    var fileName = fileNameAndLineNumber[0];\n\t    var lineNumber = fileNameAndLineNumber[1];\n\t\n\t    return fileName === qFileName &&\n\t        lineNumber >= qStartingLine &&\n\t        lineNumber <= qEndingLine;\n\t}\n\t\n\t// discover own file name and line number range for filtering stack\n\t// traces\n\tfunction captureLine() {\n\t    if (!hasStacks) {\n\t        return;\n\t    }\n\t\n\t    try {\n\t        throw new Error();\n\t    } catch (e) {\n\t        var lines = e.stack.split(\"\\n\");\n\t        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n\t        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n\t        if (!fileNameAndLineNumber) {\n\t            return;\n\t        }\n\t\n\t        qFileName = fileNameAndLineNumber[0];\n\t        return fileNameAndLineNumber[1];\n\t    }\n\t}\n\t\n\tfunction deprecate(callback, name, alternative) {\n\t    return function () {\n\t        if (typeof console !== \"undefined\" &&\n\t            typeof console.warn === \"function\") {\n\t            console.warn(name + \" is deprecated, use \" + alternative +\n\t                         \" instead.\", new Error(\"\").stack);\n\t        }\n\t        return callback.apply(callback, arguments);\n\t    };\n\t}\n\t\n\t// end of shims\n\t// beginning of real work\n\t\n\t/**\n\t * Constructs a promise for an immediate reference, passes promises through, or\n\t * coerces promises from different systems.\n\t * @param value immediate reference or promise\n\t */\n\tfunction Q(value) {\n\t    // If the object is already a Promise, return it directly.  This enables\n\t    // the resolve function to both be used to created references from objects,\n\t    // but to tolerably coerce non-promises to promises.\n\t    if (value instanceof Promise) {\n\t        return value;\n\t    }\n\t\n\t    // assimilate thenables\n\t    if (isPromiseAlike(value)) {\n\t        return coerce(value);\n\t    } else {\n\t        return fulfill(value);\n\t    }\n\t}\n\tQ.resolve = Q;\n\t\n\t/**\n\t * Performs a task in a future turn of the event loop.\n\t * @param {Function} task\n\t */\n\tQ.nextTick = nextTick;\n\t\n\t/**\n\t * Controls whether or not long stack traces will be on\n\t */\n\tQ.longStackSupport = false;\n\t\n\t// enable long stacks if Q_DEBUG is set\n\tif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n\t    Q.longStackSupport = true;\n\t}\n\t\n\t/**\n\t * Constructs a {promise, resolve, reject} object.\n\t *\n\t * `resolve` is a callback to invoke with a more resolved value for the\n\t * promise. To fulfill the promise, invoke `resolve` with any value that is\n\t * not a thenable. To reject the promise, invoke `resolve` with a rejected\n\t * thenable, or invoke `reject` with the reason directly. To resolve the\n\t * promise to another thenable, thus putting it in the same state, invoke\n\t * `resolve` with that other thenable.\n\t */\n\tQ.defer = defer;\n\tfunction defer() {\n\t    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n\t    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n\t    // element of the messages array is itself an array of complete arguments to\n\t    // forward to the resolved promise.  We coerce the resolution value to a\n\t    // promise using the `resolve` function because it handles both fully\n\t    // non-thenable values and other thenables gracefully.\n\t    var messages = [], progressListeners = [], resolvedPromise;\n\t\n\t    var deferred = object_create(defer.prototype);\n\t    var promise = object_create(Promise.prototype);\n\t\n\t    promise.promiseDispatch = function (resolve, op, operands) {\n\t        var args = array_slice(arguments);\n\t        if (messages) {\n\t            messages.push(args);\n\t            if (op === \"when\" && operands[1]) { // progress operand\n\t                progressListeners.push(operands[1]);\n\t            }\n\t        } else {\n\t            Q.nextTick(function () {\n\t                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n\t            });\n\t        }\n\t    };\n\t\n\t    // XXX deprecated\n\t    promise.valueOf = function () {\n\t        if (messages) {\n\t            return promise;\n\t        }\n\t        var nearerValue = nearer(resolvedPromise);\n\t        if (isPromise(nearerValue)) {\n\t            resolvedPromise = nearerValue; // shorten chain\n\t        }\n\t        return nearerValue;\n\t    };\n\t\n\t    promise.inspect = function () {\n\t        if (!resolvedPromise) {\n\t            return { state: \"pending\" };\n\t        }\n\t        return resolvedPromise.inspect();\n\t    };\n\t\n\t    if (Q.longStackSupport && hasStacks) {\n\t        try {\n\t            throw new Error();\n\t        } catch (e) {\n\t            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n\t            // accessor around; that causes memory leaks as per GH-111. Just\n\t            // reify the stack trace as a string ASAP.\n\t            //\n\t            // At the same time, cut off the first line; it's always just\n\t            // \"[object Promise]\\n\", as per the `toString`.\n\t            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n\t        }\n\t    }\n\t\n\t    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n\t    // consolidating them into `become`, since otherwise we'd create new\n\t    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\t\n\t    function become(newPromise) {\n\t        resolvedPromise = newPromise;\n\t        promise.source = newPromise;\n\t\n\t        array_reduce(messages, function (undefined, message) {\n\t            Q.nextTick(function () {\n\t                newPromise.promiseDispatch.apply(newPromise, message);\n\t            });\n\t        }, void 0);\n\t\n\t        messages = void 0;\n\t        progressListeners = void 0;\n\t    }\n\t\n\t    deferred.promise = promise;\n\t    deferred.resolve = function (value) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\t\n\t        become(Q(value));\n\t    };\n\t\n\t    deferred.fulfill = function (value) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\t\n\t        become(fulfill(value));\n\t    };\n\t    deferred.reject = function (reason) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\t\n\t        become(reject(reason));\n\t    };\n\t    deferred.notify = function (progress) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\t\n\t        array_reduce(progressListeners, function (undefined, progressListener) {\n\t            Q.nextTick(function () {\n\t                progressListener(progress);\n\t            });\n\t        }, void 0);\n\t    };\n\t\n\t    return deferred;\n\t}\n\t\n\t/**\n\t * Creates a Node-style callback that will resolve or reject the deferred\n\t * promise.\n\t * @returns a nodeback\n\t */\n\tdefer.prototype.makeNodeResolver = function () {\n\t    var self = this;\n\t    return function (error, value) {\n\t        if (error) {\n\t            self.reject(error);\n\t        } else if (arguments.length > 2) {\n\t            self.resolve(array_slice(arguments, 1));\n\t        } else {\n\t            self.resolve(value);\n\t        }\n\t    };\n\t};\n\t\n\t/**\n\t * @param resolver {Function} a function that returns nothing and accepts\n\t * the resolve, reject, and notify functions for a deferred.\n\t * @returns a promise that may be resolved with the given resolve and reject\n\t * functions, or rejected by a thrown exception in resolver\n\t */\n\tQ.Promise = promise; // ES6\n\tQ.promise = promise;\n\tfunction promise(resolver) {\n\t    if (typeof resolver !== \"function\") {\n\t        throw new TypeError(\"resolver must be a function.\");\n\t    }\n\t    var deferred = defer();\n\t    try {\n\t        resolver(deferred.resolve, deferred.reject, deferred.notify);\n\t    } catch (reason) {\n\t        deferred.reject(reason);\n\t    }\n\t    return deferred.promise;\n\t}\n\t\n\tpromise.race = race; // ES6\n\tpromise.all = all; // ES6\n\tpromise.reject = reject; // ES6\n\tpromise.resolve = Q; // ES6\n\t\n\t// XXX experimental.  This method is a way to denote that a local value is\n\t// serializable and should be immediately dispatched to a remote upon request,\n\t// instead of passing a reference.\n\tQ.passByCopy = function (object) {\n\t    //freeze(object);\n\t    //passByCopies.set(object, true);\n\t    return object;\n\t};\n\t\n\tPromise.prototype.passByCopy = function () {\n\t    //freeze(object);\n\t    //passByCopies.set(object, true);\n\t    return this;\n\t};\n\t\n\t/**\n\t * If two promises eventually fulfill to the same value, promises that value,\n\t * but otherwise rejects.\n\t * @param x {Any*}\n\t * @param y {Any*}\n\t * @returns {Any*} a promise for x and y if they are the same, but a rejection\n\t * otherwise.\n\t *\n\t */\n\tQ.join = function (x, y) {\n\t    return Q(x).join(y);\n\t};\n\t\n\tPromise.prototype.join = function (that) {\n\t    return Q([this, that]).spread(function (x, y) {\n\t        if (x === y) {\n\t            // TODO: \"===\" should be Object.is or equiv\n\t            return x;\n\t        } else {\n\t            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n\t        }\n\t    });\n\t};\n\t\n\t/**\n\t * Returns a promise for the first of an array of promises to become settled.\n\t * @param answers {Array[Any*]} promises to race\n\t * @returns {Any*} the first promise to be settled\n\t */\n\tQ.race = race;\n\tfunction race(answerPs) {\n\t    return promise(function (resolve, reject) {\n\t        // Switch to this once we can assume at least ES5\n\t        // answerPs.forEach(function (answerP) {\n\t        //     Q(answerP).then(resolve, reject);\n\t        // });\n\t        // Use this in the meantime\n\t        for (var i = 0, len = answerPs.length; i < len; i++) {\n\t            Q(answerPs[i]).then(resolve, reject);\n\t        }\n\t    });\n\t}\n\t\n\tPromise.prototype.race = function () {\n\t    return this.then(Q.race);\n\t};\n\t\n\t/**\n\t * Constructs a Promise with a promise descriptor object and optional fallback\n\t * function.  The descriptor contains methods like when(rejected), get(name),\n\t * set(name, value), post(name, args), and delete(name), which all\n\t * return either a value, a promise for a value, or a rejection.  The fallback\n\t * accepts the operation name, a resolver, and any further arguments that would\n\t * have been forwarded to the appropriate method above had a method been\n\t * provided with the proper name.  The API makes no guarantees about the nature\n\t * of the returned object, apart from that it is usable whereever promises are\n\t * bought and sold.\n\t */\n\tQ.makePromise = Promise;\n\tfunction Promise(descriptor, fallback, inspect) {\n\t    if (fallback === void 0) {\n\t        fallback = function (op) {\n\t            return reject(new Error(\n\t                \"Promise does not support operation: \" + op\n\t            ));\n\t        };\n\t    }\n\t    if (inspect === void 0) {\n\t        inspect = function () {\n\t            return {state: \"unknown\"};\n\t        };\n\t    }\n\t\n\t    var promise = object_create(Promise.prototype);\n\t\n\t    promise.promiseDispatch = function (resolve, op, args) {\n\t        var result;\n\t        try {\n\t            if (descriptor[op]) {\n\t                result = descriptor[op].apply(promise, args);\n\t            } else {\n\t                result = fallback.call(promise, op, args);\n\t            }\n\t        } catch (exception) {\n\t            result = reject(exception);\n\t        }\n\t        if (resolve) {\n\t            resolve(result);\n\t        }\n\t    };\n\t\n\t    promise.inspect = inspect;\n\t\n\t    // XXX deprecated `valueOf` and `exception` support\n\t    if (inspect) {\n\t        var inspected = inspect();\n\t        if (inspected.state === \"rejected\") {\n\t            promise.exception = inspected.reason;\n\t        }\n\t\n\t        promise.valueOf = function () {\n\t            var inspected = inspect();\n\t            if (inspected.state === \"pending\" ||\n\t                inspected.state === \"rejected\") {\n\t                return promise;\n\t            }\n\t            return inspected.value;\n\t        };\n\t    }\n\t\n\t    return promise;\n\t}\n\t\n\tPromise.prototype.toString = function () {\n\t    return \"[object Promise]\";\n\t};\n\t\n\tPromise.prototype.then = function (fulfilled, rejected, progressed) {\n\t    var self = this;\n\t    var deferred = defer();\n\t    var done = false;   // ensure the untrusted promise makes at most a\n\t                        // single call to one of the callbacks\n\t\n\t    function _fulfilled(value) {\n\t        try {\n\t            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n\t        } catch (exception) {\n\t            return reject(exception);\n\t        }\n\t    }\n\t\n\t    function _rejected(exception) {\n\t        if (typeof rejected === \"function\") {\n\t            makeStackTraceLong(exception, self);\n\t            try {\n\t                return rejected(exception);\n\t            } catch (newException) {\n\t                return reject(newException);\n\t            }\n\t        }\n\t        return reject(exception);\n\t    }\n\t\n\t    function _progressed(value) {\n\t        return typeof progressed === \"function\" ? progressed(value) : value;\n\t    }\n\t\n\t    Q.nextTick(function () {\n\t        self.promiseDispatch(function (value) {\n\t            if (done) {\n\t                return;\n\t            }\n\t            done = true;\n\t\n\t            deferred.resolve(_fulfilled(value));\n\t        }, \"when\", [function (exception) {\n\t            if (done) {\n\t                return;\n\t            }\n\t            done = true;\n\t\n\t            deferred.resolve(_rejected(exception));\n\t        }]);\n\t    });\n\t\n\t    // Progress propagator need to be attached in the current tick.\n\t    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n\t        var newValue;\n\t        var threw = false;\n\t        try {\n\t            newValue = _progressed(value);\n\t        } catch (e) {\n\t            threw = true;\n\t            if (Q.onerror) {\n\t                Q.onerror(e);\n\t            } else {\n\t                throw e;\n\t            }\n\t        }\n\t\n\t        if (!threw) {\n\t            deferred.notify(newValue);\n\t        }\n\t    }]);\n\t\n\t    return deferred.promise;\n\t};\n\t\n\tQ.tap = function (promise, callback) {\n\t    return Q(promise).tap(callback);\n\t};\n\t\n\t/**\n\t * Works almost like \"finally\", but not called for rejections.\n\t * Original resolution value is passed through callback unaffected.\n\t * Callback may return a promise that will be awaited for.\n\t * @param {Function} callback\n\t * @returns {Q.Promise}\n\t * @example\n\t * doSomething()\n\t *   .then(...)\n\t *   .tap(console.log)\n\t *   .then(...);\n\t */\n\tPromise.prototype.tap = function (callback) {\n\t    callback = Q(callback);\n\t\n\t    return this.then(function (value) {\n\t        return callback.fcall(value).thenResolve(value);\n\t    });\n\t};\n\t\n\t/**\n\t * Registers an observer on a promise.\n\t *\n\t * Guarantees:\n\t *\n\t * 1. that fulfilled and rejected will be called only once.\n\t * 2. that either the fulfilled callback or the rejected callback will be\n\t *    called, but not both.\n\t * 3. that fulfilled and rejected will not be called in this turn.\n\t *\n\t * @param value      promise or immediate reference to observe\n\t * @param fulfilled  function to be called with the fulfilled value\n\t * @param rejected   function to be called with the rejection exception\n\t * @param progressed function to be called on any progress notifications\n\t * @return promise for the return value from the invoked callback\n\t */\n\tQ.when = when;\n\tfunction when(value, fulfilled, rejected, progressed) {\n\t    return Q(value).then(fulfilled, rejected, progressed);\n\t}\n\t\n\tPromise.prototype.thenResolve = function (value) {\n\t    return this.then(function () { return value; });\n\t};\n\t\n\tQ.thenResolve = function (promise, value) {\n\t    return Q(promise).thenResolve(value);\n\t};\n\t\n\tPromise.prototype.thenReject = function (reason) {\n\t    return this.then(function () { throw reason; });\n\t};\n\t\n\tQ.thenReject = function (promise, reason) {\n\t    return Q(promise).thenReject(reason);\n\t};\n\t\n\t/**\n\t * If an object is not a promise, it is as \"near\" as possible.\n\t * If a promise is rejected, it is as \"near\" as possible too.\n\t * If it’s a fulfilled promise, the fulfillment value is nearer.\n\t * If it’s a deferred promise and the deferred has been resolved, the\n\t * resolution is \"nearer\".\n\t * @param object\n\t * @returns most resolved (nearest) form of the object\n\t */\n\t\n\t// XXX should we re-do this?\n\tQ.nearer = nearer;\n\tfunction nearer(value) {\n\t    if (isPromise(value)) {\n\t        var inspected = value.inspect();\n\t        if (inspected.state === \"fulfilled\") {\n\t            return inspected.value;\n\t        }\n\t    }\n\t    return value;\n\t}\n\t\n\t/**\n\t * @returns whether the given object is a promise.\n\t * Otherwise it is a fulfilled value.\n\t */\n\tQ.isPromise = isPromise;\n\tfunction isPromise(object) {\n\t    return object instanceof Promise;\n\t}\n\t\n\tQ.isPromiseAlike = isPromiseAlike;\n\tfunction isPromiseAlike(object) {\n\t    return isObject(object) && typeof object.then === \"function\";\n\t}\n\t\n\t/**\n\t * @returns whether the given object is a pending promise, meaning not\n\t * fulfilled or rejected.\n\t */\n\tQ.isPending = isPending;\n\tfunction isPending(object) {\n\t    return isPromise(object) && object.inspect().state === \"pending\";\n\t}\n\t\n\tPromise.prototype.isPending = function () {\n\t    return this.inspect().state === \"pending\";\n\t};\n\t\n\t/**\n\t * @returns whether the given object is a value or fulfilled\n\t * promise.\n\t */\n\tQ.isFulfilled = isFulfilled;\n\tfunction isFulfilled(object) {\n\t    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n\t}\n\t\n\tPromise.prototype.isFulfilled = function () {\n\t    return this.inspect().state === \"fulfilled\";\n\t};\n\t\n\t/**\n\t * @returns whether the given object is a rejected promise.\n\t */\n\tQ.isRejected = isRejected;\n\tfunction isRejected(object) {\n\t    return isPromise(object) && object.inspect().state === \"rejected\";\n\t}\n\t\n\tPromise.prototype.isRejected = function () {\n\t    return this.inspect().state === \"rejected\";\n\t};\n\t\n\t//// BEGIN UNHANDLED REJECTION TRACKING\n\t\n\t// This promise library consumes exceptions thrown in handlers so they can be\n\t// handled by a subsequent promise.  The exceptions get added to this array when\n\t// they are created, and removed when they are handled.  Note that in ES6 or\n\t// shimmed environments, this would naturally be a `Set`.\n\tvar unhandledReasons = [];\n\tvar unhandledRejections = [];\n\tvar reportedUnhandledRejections = [];\n\tvar trackUnhandledRejections = true;\n\t\n\tfunction resetUnhandledRejections() {\n\t    unhandledReasons.length = 0;\n\t    unhandledRejections.length = 0;\n\t\n\t    if (!trackUnhandledRejections) {\n\t        trackUnhandledRejections = true;\n\t    }\n\t}\n\t\n\tfunction trackRejection(promise, reason) {\n\t    if (!trackUnhandledRejections) {\n\t        return;\n\t    }\n\t    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n\t        Q.nextTick.runAfter(function () {\n\t            if (array_indexOf(unhandledRejections, promise) !== -1) {\n\t                process.emit(\"unhandledRejection\", reason, promise);\n\t                reportedUnhandledRejections.push(promise);\n\t            }\n\t        });\n\t    }\n\t\n\t    unhandledRejections.push(promise);\n\t    if (reason && typeof reason.stack !== \"undefined\") {\n\t        unhandledReasons.push(reason.stack);\n\t    } else {\n\t        unhandledReasons.push(\"(no stack) \" + reason);\n\t    }\n\t}\n\t\n\tfunction untrackRejection(promise) {\n\t    if (!trackUnhandledRejections) {\n\t        return;\n\t    }\n\t\n\t    var at = array_indexOf(unhandledRejections, promise);\n\t    if (at !== -1) {\n\t        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n\t            Q.nextTick.runAfter(function () {\n\t                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n\t                if (atReport !== -1) {\n\t                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n\t                    reportedUnhandledRejections.splice(atReport, 1);\n\t                }\n\t            });\n\t        }\n\t        unhandledRejections.splice(at, 1);\n\t        unhandledReasons.splice(at, 1);\n\t    }\n\t}\n\t\n\tQ.resetUnhandledRejections = resetUnhandledRejections;\n\t\n\tQ.getUnhandledReasons = function () {\n\t    // Make a copy so that consumers can't interfere with our internal state.\n\t    return unhandledReasons.slice();\n\t};\n\t\n\tQ.stopUnhandledRejectionTracking = function () {\n\t    resetUnhandledRejections();\n\t    trackUnhandledRejections = false;\n\t};\n\t\n\tresetUnhandledRejections();\n\t\n\t//// END UNHANDLED REJECTION TRACKING\n\t\n\t/**\n\t * Constructs a rejected promise.\n\t * @param reason value describing the failure\n\t */\n\tQ.reject = reject;\n\tfunction reject(reason) {\n\t    var rejection = Promise({\n\t        \"when\": function (rejected) {\n\t            // note that the error has been handled\n\t            if (rejected) {\n\t                untrackRejection(this);\n\t            }\n\t            return rejected ? rejected(reason) : this;\n\t        }\n\t    }, function fallback() {\n\t        return this;\n\t    }, function inspect() {\n\t        return { state: \"rejected\", reason: reason };\n\t    });\n\t\n\t    // Note that the reason has not been handled.\n\t    trackRejection(rejection, reason);\n\t\n\t    return rejection;\n\t}\n\t\n\t/**\n\t * Constructs a fulfilled promise for an immediate reference.\n\t * @param value immediate reference\n\t */\n\tQ.fulfill = fulfill;\n\tfunction fulfill(value) {\n\t    return Promise({\n\t        \"when\": function () {\n\t            return value;\n\t        },\n\t        \"get\": function (name) {\n\t            return value[name];\n\t        },\n\t        \"set\": function (name, rhs) {\n\t            value[name] = rhs;\n\t        },\n\t        \"delete\": function (name) {\n\t            delete value[name];\n\t        },\n\t        \"post\": function (name, args) {\n\t            // Mark Miller proposes that post with no name should apply a\n\t            // promised function.\n\t            if (name === null || name === void 0) {\n\t                return value.apply(void 0, args);\n\t            } else {\n\t                return value[name].apply(value, args);\n\t            }\n\t        },\n\t        \"apply\": function (thisp, args) {\n\t            return value.apply(thisp, args);\n\t        },\n\t        \"keys\": function () {\n\t            return object_keys(value);\n\t        }\n\t    }, void 0, function inspect() {\n\t        return { state: \"fulfilled\", value: value };\n\t    });\n\t}\n\t\n\t/**\n\t * Converts thenables to Q promises.\n\t * @param promise thenable promise\n\t * @returns a Q promise\n\t */\n\tfunction coerce(promise) {\n\t    var deferred = defer();\n\t    Q.nextTick(function () {\n\t        try {\n\t            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n\t        } catch (exception) {\n\t            deferred.reject(exception);\n\t        }\n\t    });\n\t    return deferred.promise;\n\t}\n\t\n\t/**\n\t * Annotates an object such that it will never be\n\t * transferred away from this process over any promise\n\t * communication channel.\n\t * @param object\n\t * @returns promise a wrapping of that object that\n\t * additionally responds to the \"isDef\" message\n\t * without a rejection.\n\t */\n\tQ.master = master;\n\tfunction master(object) {\n\t    return Promise({\n\t        \"isDef\": function () {}\n\t    }, function fallback(op, args) {\n\t        return dispatch(object, op, args);\n\t    }, function () {\n\t        return Q(object).inspect();\n\t    });\n\t}\n\t\n\t/**\n\t * Spreads the values of a promised array of arguments into the\n\t * fulfillment callback.\n\t * @param fulfilled callback that receives variadic arguments from the\n\t * promised array\n\t * @param rejected callback that receives the exception if the promise\n\t * is rejected.\n\t * @returns a promise for the return value or thrown exception of\n\t * either callback.\n\t */\n\tQ.spread = spread;\n\tfunction spread(value, fulfilled, rejected) {\n\t    return Q(value).spread(fulfilled, rejected);\n\t}\n\t\n\tPromise.prototype.spread = function (fulfilled, rejected) {\n\t    return this.all().then(function (array) {\n\t        return fulfilled.apply(void 0, array);\n\t    }, rejected);\n\t};\n\t\n\t/**\n\t * The async function is a decorator for generator functions, turning\n\t * them into asynchronous generators.  Although generators are only part\n\t * of the newest ECMAScript 6 drafts, this code does not cause syntax\n\t * errors in older engines.  This code should continue to work and will\n\t * in fact improve over time as the language improves.\n\t *\n\t * ES6 generators are currently part of V8 version 3.19 with the\n\t * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n\t * for longer, but under an older Python-inspired form.  This function\n\t * works on both kinds of generators.\n\t *\n\t * Decorates a generator function such that:\n\t *  - it may yield promises\n\t *  - execution will continue when that promise is fulfilled\n\t *  - the value of the yield expression will be the fulfilled value\n\t *  - it returns a promise for the return value (when the generator\n\t *    stops iterating)\n\t *  - the decorated function returns a promise for the return value\n\t *    of the generator or the first rejected promise among those\n\t *    yielded.\n\t *  - if an error is thrown in the generator, it propagates through\n\t *    every following yield until it is caught, or until it escapes\n\t *    the generator function altogether, and is translated into a\n\t *    rejection for the promise returned by the decorated generator.\n\t */\n\tQ.async = async;\n\tfunction async(makeGenerator) {\n\t    return function () {\n\t        // when verb is \"send\", arg is a value\n\t        // when verb is \"throw\", arg is an exception\n\t        function continuer(verb, arg) {\n\t            var result;\n\t\n\t            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n\t            // engine that has a deployed base of browsers that support generators.\n\t            // However, SM's generators use the Python-inspired semantics of\n\t            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n\t            // like to make it possible to use generators in deployed browsers, so\n\t            // we also support Python-style generators.  At some point we can remove\n\t            // this block.\n\t\n\t            if (typeof StopIteration === \"undefined\") {\n\t                // ES6 Generators\n\t                try {\n\t                    result = generator[verb](arg);\n\t                } catch (exception) {\n\t                    return reject(exception);\n\t                }\n\t                if (result.done) {\n\t                    return Q(result.value);\n\t                } else {\n\t                    return when(result.value, callback, errback);\n\t                }\n\t            } else {\n\t                // SpiderMonkey Generators\n\t                // FIXME: Remove this case when SM does ES6 generators.\n\t                try {\n\t                    result = generator[verb](arg);\n\t                } catch (exception) {\n\t                    if (isStopIteration(exception)) {\n\t                        return Q(exception.value);\n\t                    } else {\n\t                        return reject(exception);\n\t                    }\n\t                }\n\t                return when(result, callback, errback);\n\t            }\n\t        }\n\t        var generator = makeGenerator.apply(this, arguments);\n\t        var callback = continuer.bind(continuer, \"next\");\n\t        var errback = continuer.bind(continuer, \"throw\");\n\t        return callback();\n\t    };\n\t}\n\t\n\t/**\n\t * The spawn function is a small wrapper around async that immediately\n\t * calls the generator and also ends the promise chain, so that any\n\t * unhandled errors are thrown instead of forwarded to the error\n\t * handler. This is useful because it's extremely common to run\n\t * generators at the top-level to work with libraries.\n\t */\n\tQ.spawn = spawn;\n\tfunction spawn(makeGenerator) {\n\t    Q.done(Q.async(makeGenerator)());\n\t}\n\t\n\t// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n\t/**\n\t * Throws a ReturnValue exception to stop an asynchronous generator.\n\t *\n\t * This interface is a stop-gap measure to support generator return\n\t * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n\t * generators like Chromium 29, just use \"return\" in your generator\n\t * functions.\n\t *\n\t * @param value the return value for the surrounding generator\n\t * @throws ReturnValue exception with the value.\n\t * @example\n\t * // ES6 style\n\t * Q.async(function* () {\n\t *      var foo = yield getFooPromise();\n\t *      var bar = yield getBarPromise();\n\t *      return foo + bar;\n\t * })\n\t * // Older SpiderMonkey style\n\t * Q.async(function () {\n\t *      var foo = yield getFooPromise();\n\t *      var bar = yield getBarPromise();\n\t *      Q.return(foo + bar);\n\t * })\n\t */\n\tQ[\"return\"] = _return;\n\tfunction _return(value) {\n\t    throw new QReturnValue(value);\n\t}\n\t\n\t/**\n\t * The promised function decorator ensures that any promise arguments\n\t * are settled and passed as values (`this` is also settled and passed\n\t * as a value).  It will also ensure that the result of a function is\n\t * always a promise.\n\t *\n\t * @example\n\t * var add = Q.promised(function (a, b) {\n\t *     return a + b;\n\t * });\n\t * add(Q(a), Q(B));\n\t *\n\t * @param {function} callback The function to decorate\n\t * @returns {function} a function that has been decorated.\n\t */\n\tQ.promised = promised;\n\tfunction promised(callback) {\n\t    return function () {\n\t        return spread([this, all(arguments)], function (self, args) {\n\t            return callback.apply(self, args);\n\t        });\n\t    };\n\t}\n\t\n\t/**\n\t * sends a message to a value in a future turn\n\t * @param object* the recipient\n\t * @param op the name of the message operation, e.g., \"when\",\n\t * @param args further arguments to be forwarded to the operation\n\t * @returns result {Promise} a promise for the result of the operation\n\t */\n\tQ.dispatch = dispatch;\n\tfunction dispatch(object, op, args) {\n\t    return Q(object).dispatch(op, args);\n\t}\n\t\n\tPromise.prototype.dispatch = function (op, args) {\n\t    var self = this;\n\t    var deferred = defer();\n\t    Q.nextTick(function () {\n\t        self.promiseDispatch(deferred.resolve, op, args);\n\t    });\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Gets the value of a property in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of property to get\n\t * @return promise for the property value\n\t */\n\tQ.get = function (object, key) {\n\t    return Q(object).dispatch(\"get\", [key]);\n\t};\n\t\n\tPromise.prototype.get = function (key) {\n\t    return this.dispatch(\"get\", [key]);\n\t};\n\t\n\t/**\n\t * Sets the value of a property in a future turn.\n\t * @param object    promise or immediate reference for object object\n\t * @param name      name of property to set\n\t * @param value     new value of property\n\t * @return promise for the return value\n\t */\n\tQ.set = function (object, key, value) {\n\t    return Q(object).dispatch(\"set\", [key, value]);\n\t};\n\t\n\tPromise.prototype.set = function (key, value) {\n\t    return this.dispatch(\"set\", [key, value]);\n\t};\n\t\n\t/**\n\t * Deletes a property in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of property to delete\n\t * @return promise for the return value\n\t */\n\tQ.del = // XXX legacy\n\tQ[\"delete\"] = function (object, key) {\n\t    return Q(object).dispatch(\"delete\", [key]);\n\t};\n\t\n\tPromise.prototype.del = // XXX legacy\n\tPromise.prototype[\"delete\"] = function (key) {\n\t    return this.dispatch(\"delete\", [key]);\n\t};\n\t\n\t/**\n\t * Invokes a method in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of method to invoke\n\t * @param value     a value to post, typically an array of\n\t *                  invocation arguments for promises that\n\t *                  are ultimately backed with `resolve` values,\n\t *                  as opposed to those backed with URLs\n\t *                  wherein the posted value can be any\n\t *                  JSON serializable object.\n\t * @return promise for the return value\n\t */\n\t// bound locally because it is used by other methods\n\tQ.mapply = // XXX As proposed by \"Redsandro\"\n\tQ.post = function (object, name, args) {\n\t    return Q(object).dispatch(\"post\", [name, args]);\n\t};\n\t\n\tPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\n\tPromise.prototype.post = function (name, args) {\n\t    return this.dispatch(\"post\", [name, args]);\n\t};\n\t\n\t/**\n\t * Invokes a method in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of method to invoke\n\t * @param ...args   array of invocation arguments\n\t * @return promise for the return value\n\t */\n\tQ.send = // XXX Mark Miller's proposed parlance\n\tQ.mcall = // XXX As proposed by \"Redsandro\"\n\tQ.invoke = function (object, name /*...args*/) {\n\t    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n\t};\n\t\n\tPromise.prototype.send = // XXX Mark Miller's proposed parlance\n\tPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\n\tPromise.prototype.invoke = function (name /*...args*/) {\n\t    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n\t};\n\t\n\t/**\n\t * Applies the promised function in a future turn.\n\t * @param object    promise or immediate reference for target function\n\t * @param args      array of application arguments\n\t */\n\tQ.fapply = function (object, args) {\n\t    return Q(object).dispatch(\"apply\", [void 0, args]);\n\t};\n\t\n\tPromise.prototype.fapply = function (args) {\n\t    return this.dispatch(\"apply\", [void 0, args]);\n\t};\n\t\n\t/**\n\t * Calls the promised function in a future turn.\n\t * @param object    promise or immediate reference for target function\n\t * @param ...args   array of application arguments\n\t */\n\tQ[\"try\"] =\n\tQ.fcall = function (object /* ...args*/) {\n\t    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n\t};\n\t\n\tPromise.prototype.fcall = function (/*...args*/) {\n\t    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n\t};\n\t\n\t/**\n\t * Binds the promised function, transforming return values into a fulfilled\n\t * promise and thrown errors into a rejected one.\n\t * @param object    promise or immediate reference for target function\n\t * @param ...args   array of application arguments\n\t */\n\tQ.fbind = function (object /*...args*/) {\n\t    var promise = Q(object);\n\t    var args = array_slice(arguments, 1);\n\t    return function fbound() {\n\t        return promise.dispatch(\"apply\", [\n\t            this,\n\t            args.concat(array_slice(arguments))\n\t        ]);\n\t    };\n\t};\n\tPromise.prototype.fbind = function (/*...args*/) {\n\t    var promise = this;\n\t    var args = array_slice(arguments);\n\t    return function fbound() {\n\t        return promise.dispatch(\"apply\", [\n\t            this,\n\t            args.concat(array_slice(arguments))\n\t        ]);\n\t    };\n\t};\n\t\n\t/**\n\t * Requests the names of the owned properties of a promised\n\t * object in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @return promise for the keys of the eventually settled object\n\t */\n\tQ.keys = function (object) {\n\t    return Q(object).dispatch(\"keys\", []);\n\t};\n\t\n\tPromise.prototype.keys = function () {\n\t    return this.dispatch(\"keys\", []);\n\t};\n\t\n\t/**\n\t * Turns an array of promises into a promise for an array.  If any of\n\t * the promises gets rejected, the whole array is rejected immediately.\n\t * @param {Array*} an array (or promise for an array) of values (or\n\t * promises for values)\n\t * @returns a promise for an array of the corresponding values\n\t */\n\t// By Mark Miller\n\t// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\n\tQ.all = all;\n\tfunction all(promises) {\n\t    return when(promises, function (promises) {\n\t        var pendingCount = 0;\n\t        var deferred = defer();\n\t        array_reduce(promises, function (undefined, promise, index) {\n\t            var snapshot;\n\t            if (\n\t                isPromise(promise) &&\n\t                (snapshot = promise.inspect()).state === \"fulfilled\"\n\t            ) {\n\t                promises[index] = snapshot.value;\n\t            } else {\n\t                ++pendingCount;\n\t                when(\n\t                    promise,\n\t                    function (value) {\n\t                        promises[index] = value;\n\t                        if (--pendingCount === 0) {\n\t                            deferred.resolve(promises);\n\t                        }\n\t                    },\n\t                    deferred.reject,\n\t                    function (progress) {\n\t                        deferred.notify({ index: index, value: progress });\n\t                    }\n\t                );\n\t            }\n\t        }, void 0);\n\t        if (pendingCount === 0) {\n\t            deferred.resolve(promises);\n\t        }\n\t        return deferred.promise;\n\t    });\n\t}\n\t\n\tPromise.prototype.all = function () {\n\t    return all(this);\n\t};\n\t\n\t/**\n\t * Returns the first resolved promise of an array. Prior rejected promises are\n\t * ignored.  Rejects only if all promises are rejected.\n\t * @param {Array*} an array containing values or promises for values\n\t * @returns a promise fulfilled with the value of the first resolved promise,\n\t * or a rejected promise if all promises are rejected.\n\t */\n\tQ.any = any;\n\t\n\tfunction any(promises) {\n\t    if (promises.length === 0) {\n\t        return Q.resolve();\n\t    }\n\t\n\t    var deferred = Q.defer();\n\t    var pendingCount = 0;\n\t    array_reduce(promises, function (prev, current, index) {\n\t        var promise = promises[index];\n\t\n\t        pendingCount++;\n\t\n\t        when(promise, onFulfilled, onRejected, onProgress);\n\t        function onFulfilled(result) {\n\t            deferred.resolve(result);\n\t        }\n\t        function onRejected() {\n\t            pendingCount--;\n\t            if (pendingCount === 0) {\n\t                deferred.reject(new Error(\n\t                    \"Can't get fulfillment value from any promise, all \" +\n\t                    \"promises were rejected.\"\n\t                ));\n\t            }\n\t        }\n\t        function onProgress(progress) {\n\t            deferred.notify({\n\t                index: index,\n\t                value: progress\n\t            });\n\t        }\n\t    }, undefined);\n\t\n\t    return deferred.promise;\n\t}\n\t\n\tPromise.prototype.any = function () {\n\t    return any(this);\n\t};\n\t\n\t/**\n\t * Waits for all promises to be settled, either fulfilled or\n\t * rejected.  This is distinct from `all` since that would stop\n\t * waiting at the first rejection.  The promise returned by\n\t * `allResolved` will never be rejected.\n\t * @param promises a promise for an array (or an array) of promises\n\t * (or values)\n\t * @return a promise for an array of promises\n\t */\n\tQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\n\tfunction allResolved(promises) {\n\t    return when(promises, function (promises) {\n\t        promises = array_map(promises, Q);\n\t        return when(all(array_map(promises, function (promise) {\n\t            return when(promise, noop, noop);\n\t        })), function () {\n\t            return promises;\n\t        });\n\t    });\n\t}\n\t\n\tPromise.prototype.allResolved = function () {\n\t    return allResolved(this);\n\t};\n\t\n\t/**\n\t * @see Promise#allSettled\n\t */\n\tQ.allSettled = allSettled;\n\tfunction allSettled(promises) {\n\t    return Q(promises).allSettled();\n\t}\n\t\n\t/**\n\t * Turns an array of promises into a promise for an array of their states (as\n\t * returned by `inspect`) when they have all settled.\n\t * @param {Array[Any*]} values an array (or promise for an array) of values (or\n\t * promises for values)\n\t * @returns {Array[State]} an array of states for the respective values.\n\t */\n\tPromise.prototype.allSettled = function () {\n\t    return this.then(function (promises) {\n\t        return all(array_map(promises, function (promise) {\n\t            promise = Q(promise);\n\t            function regardless() {\n\t                return promise.inspect();\n\t            }\n\t            return promise.then(regardless, regardless);\n\t        }));\n\t    });\n\t};\n\t\n\t/**\n\t * Captures the failure of a promise, giving an oportunity to recover\n\t * with a callback.  If the given promise is fulfilled, the returned\n\t * promise is fulfilled.\n\t * @param {Any*} promise for something\n\t * @param {Function} callback to fulfill the returned promise if the\n\t * given promise is rejected\n\t * @returns a promise for the return value of the callback\n\t */\n\tQ.fail = // XXX legacy\n\tQ[\"catch\"] = function (object, rejected) {\n\t    return Q(object).then(void 0, rejected);\n\t};\n\t\n\tPromise.prototype.fail = // XXX legacy\n\tPromise.prototype[\"catch\"] = function (rejected) {\n\t    return this.then(void 0, rejected);\n\t};\n\t\n\t/**\n\t * Attaches a listener that can respond to progress notifications from a\n\t * promise's originating deferred. This listener receives the exact arguments\n\t * passed to ``deferred.notify``.\n\t * @param {Any*} promise for something\n\t * @param {Function} callback to receive any progress notifications\n\t * @returns the given promise, unchanged\n\t */\n\tQ.progress = progress;\n\tfunction progress(object, progressed) {\n\t    return Q(object).then(void 0, void 0, progressed);\n\t}\n\t\n\tPromise.prototype.progress = function (progressed) {\n\t    return this.then(void 0, void 0, progressed);\n\t};\n\t\n\t/**\n\t * Provides an opportunity to observe the settling of a promise,\n\t * regardless of whether the promise is fulfilled or rejected.  Forwards\n\t * the resolution to the returned promise when the callback is done.\n\t * The callback can return a promise to defer completion.\n\t * @param {Any*} promise\n\t * @param {Function} callback to observe the resolution of the given\n\t * promise, takes no arguments.\n\t * @returns a promise for the resolution of the given promise when\n\t * ``fin`` is done.\n\t */\n\tQ.fin = // XXX legacy\n\tQ[\"finally\"] = function (object, callback) {\n\t    return Q(object)[\"finally\"](callback);\n\t};\n\t\n\tPromise.prototype.fin = // XXX legacy\n\tPromise.prototype[\"finally\"] = function (callback) {\n\t    callback = Q(callback);\n\t    return this.then(function (value) {\n\t        return callback.fcall().then(function () {\n\t            return value;\n\t        });\n\t    }, function (reason) {\n\t        // TODO attempt to recycle the rejection with \"this\".\n\t        return callback.fcall().then(function () {\n\t            throw reason;\n\t        });\n\t    });\n\t};\n\t\n\t/**\n\t * Terminates a chain of promises, forcing rejections to be\n\t * thrown as exceptions.\n\t * @param {Any*} promise at the end of a chain of promises\n\t * @returns nothing\n\t */\n\tQ.done = function (object, fulfilled, rejected, progress) {\n\t    return Q(object).done(fulfilled, rejected, progress);\n\t};\n\t\n\tPromise.prototype.done = function (fulfilled, rejected, progress) {\n\t    var onUnhandledError = function (error) {\n\t        // forward to a future turn so that ``when``\n\t        // does not catch it and turn it into a rejection.\n\t        Q.nextTick(function () {\n\t            makeStackTraceLong(error, promise);\n\t            if (Q.onerror) {\n\t                Q.onerror(error);\n\t            } else {\n\t                throw error;\n\t            }\n\t        });\n\t    };\n\t\n\t    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n\t    var promise = fulfilled || rejected || progress ?\n\t        this.then(fulfilled, rejected, progress) :\n\t        this;\n\t\n\t    if (typeof process === \"object\" && process && process.domain) {\n\t        onUnhandledError = process.domain.bind(onUnhandledError);\n\t    }\n\t\n\t    promise.then(void 0, onUnhandledError);\n\t};\n\t\n\t/**\n\t * Causes a promise to be rejected if it does not get fulfilled before\n\t * some milliseconds time out.\n\t * @param {Any*} promise\n\t * @param {Number} milliseconds timeout\n\t * @param {Any*} custom error message or Error object (optional)\n\t * @returns a promise for the resolution of the given promise if it is\n\t * fulfilled before the timeout, otherwise rejected.\n\t */\n\tQ.timeout = function (object, ms, error) {\n\t    return Q(object).timeout(ms, error);\n\t};\n\t\n\tPromise.prototype.timeout = function (ms, error) {\n\t    var deferred = defer();\n\t    var timeoutId = setTimeout(function () {\n\t        if (!error || \"string\" === typeof error) {\n\t            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n\t            error.code = \"ETIMEDOUT\";\n\t        }\n\t        deferred.reject(error);\n\t    }, ms);\n\t\n\t    this.then(function (value) {\n\t        clearTimeout(timeoutId);\n\t        deferred.resolve(value);\n\t    }, function (exception) {\n\t        clearTimeout(timeoutId);\n\t        deferred.reject(exception);\n\t    }, deferred.notify);\n\t\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Returns a promise for the given value (or promised value), some\n\t * milliseconds after it resolved. Passes rejections immediately.\n\t * @param {Any*} promise\n\t * @param {Number} milliseconds\n\t * @returns a promise for the resolution of the given promise after milliseconds\n\t * time has elapsed since the resolution of the given promise.\n\t * If the given promise rejects, that is passed immediately.\n\t */\n\tQ.delay = function (object, timeout) {\n\t    if (timeout === void 0) {\n\t        timeout = object;\n\t        object = void 0;\n\t    }\n\t    return Q(object).delay(timeout);\n\t};\n\t\n\tPromise.prototype.delay = function (timeout) {\n\t    return this.then(function (value) {\n\t        var deferred = defer();\n\t        setTimeout(function () {\n\t            deferred.resolve(value);\n\t        }, timeout);\n\t        return deferred.promise;\n\t    });\n\t};\n\t\n\t/**\n\t * Passes a continuation to a Node function, which is called with the given\n\t * arguments provided as an array, and returns a promise.\n\t *\n\t *      Q.nfapply(FS.readFile, [__filename])\n\t *      .then(function (content) {\n\t *      })\n\t *\n\t */\n\tQ.nfapply = function (callback, args) {\n\t    return Q(callback).nfapply(args);\n\t};\n\t\n\tPromise.prototype.nfapply = function (args) {\n\t    var deferred = defer();\n\t    var nodeArgs = array_slice(args);\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.fapply(nodeArgs).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Passes a continuation to a Node function, which is called with the given\n\t * arguments provided individually, and returns a promise.\n\t * @example\n\t * Q.nfcall(FS.readFile, __filename)\n\t * .then(function (content) {\n\t * })\n\t *\n\t */\n\tQ.nfcall = function (callback /*...args*/) {\n\t    var args = array_slice(arguments, 1);\n\t    return Q(callback).nfapply(args);\n\t};\n\t\n\tPromise.prototype.nfcall = function (/*...args*/) {\n\t    var nodeArgs = array_slice(arguments);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.fapply(nodeArgs).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Wraps a NodeJS continuation passing function and returns an equivalent\n\t * version that returns a promise.\n\t * @example\n\t * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n\t * .then(console.log)\n\t * .done()\n\t */\n\tQ.nfbind =\n\tQ.denodeify = function (callback /*...args*/) {\n\t    var baseArgs = array_slice(arguments, 1);\n\t    return function () {\n\t        var nodeArgs = baseArgs.concat(array_slice(arguments));\n\t        var deferred = defer();\n\t        nodeArgs.push(deferred.makeNodeResolver());\n\t        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n\t        return deferred.promise;\n\t    };\n\t};\n\t\n\tPromise.prototype.nfbind =\n\tPromise.prototype.denodeify = function (/*...args*/) {\n\t    var args = array_slice(arguments);\n\t    args.unshift(this);\n\t    return Q.denodeify.apply(void 0, args);\n\t};\n\t\n\tQ.nbind = function (callback, thisp /*...args*/) {\n\t    var baseArgs = array_slice(arguments, 2);\n\t    return function () {\n\t        var nodeArgs = baseArgs.concat(array_slice(arguments));\n\t        var deferred = defer();\n\t        nodeArgs.push(deferred.makeNodeResolver());\n\t        function bound() {\n\t            return callback.apply(thisp, arguments);\n\t        }\n\t        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n\t        return deferred.promise;\n\t    };\n\t};\n\t\n\tPromise.prototype.nbind = function (/*thisp, ...args*/) {\n\t    var args = array_slice(arguments, 0);\n\t    args.unshift(this);\n\t    return Q.nbind.apply(void 0, args);\n\t};\n\t\n\t/**\n\t * Calls a method of a Node-style object that accepts a Node-style\n\t * callback with a given array of arguments, plus a provided callback.\n\t * @param object an object that has the named method\n\t * @param {String} name name of the method of object\n\t * @param {Array} args arguments to pass to the method; the callback\n\t * will be provided by Q and appended to these arguments.\n\t * @returns a promise for the value or error\n\t */\n\tQ.nmapply = // XXX As proposed by \"Redsandro\"\n\tQ.npost = function (object, name, args) {\n\t    return Q(object).npost(name, args);\n\t};\n\t\n\tPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\n\tPromise.prototype.npost = function (name, args) {\n\t    var nodeArgs = array_slice(args || []);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Calls a method of a Node-style object that accepts a Node-style\n\t * callback, forwarding the given variadic arguments, plus a provided\n\t * callback argument.\n\t * @param object an object that has the named method\n\t * @param {String} name name of the method of object\n\t * @param ...args arguments to pass to the method; the callback will\n\t * be provided by Q and appended to these arguments.\n\t * @returns a promise for the value or error\n\t */\n\tQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\n\tQ.nmcall = // XXX Based on \"Redsandro's\" proposal\n\tQ.ninvoke = function (object, name /*...args*/) {\n\t    var nodeArgs = array_slice(arguments, 2);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\tPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\n\tPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\n\tPromise.prototype.ninvoke = function (name /*...args*/) {\n\t    var nodeArgs = array_slice(arguments, 1);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * If a function would like to support both Node continuation-passing-style and\n\t * promise-returning-style, it can end its internal promise chain with\n\t * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n\t * elects to use a nodeback, the result will be sent there.  If they do not\n\t * pass a nodeback, they will receive the result promise.\n\t * @param object a result (or a promise for a result)\n\t * @param {Function} nodeback a Node.js-style callback\n\t * @returns either the promise or nothing\n\t */\n\tQ.nodeify = nodeify;\n\tfunction nodeify(object, nodeback) {\n\t    return Q(object).nodeify(nodeback);\n\t}\n\t\n\tPromise.prototype.nodeify = function (nodeback) {\n\t    if (nodeback) {\n\t        this.then(function (value) {\n\t            Q.nextTick(function () {\n\t                nodeback(null, value);\n\t            });\n\t        }, function (error) {\n\t            Q.nextTick(function () {\n\t                nodeback(error);\n\t            });\n\t        });\n\t    } else {\n\t        return this;\n\t    }\n\t};\n\t\n\t// All code before this point will be filtered from stack traces.\n\tvar qEndingLine = captureLine();\n\t\n\treturn Q;\n\t\n\t});\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\r\n\t* loglevel - https://github.com/pimterry/loglevel\r\n\t*\r\n\t* Copyright (c) 2013 Tim Perry\r\n\t* Licensed under the MIT license.\r\n\t*/\r\n\t(function (root, definition) {\r\n\t    if (typeof module === 'object' && module.exports && \"function\" === 'function') {\r\n\t        module.exports = definition();\r\n\t    } else if (true) {\r\n\t        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\t    } else {\r\n\t        root.log = definition();\r\n\t    }\r\n\t}(this, function () {\r\n\t    var self = {};\r\n\t    var noop = function() {};\r\n\t    var undefinedType = \"undefined\";\r\n\t\r\n\t    function realMethod(methodName) {\r\n\t        if (typeof console === undefinedType) {\r\n\t            return false; // We can't build a real method without a console to log to\r\n\t        } else if (console[methodName] !== undefined) {\r\n\t            return bindMethod(console, methodName);\r\n\t        } else if (console.log !== undefined) {\r\n\t            return bindMethod(console, 'log');\r\n\t        } else {\r\n\t            return noop;\r\n\t        }\r\n\t    }\r\n\t\r\n\t    function bindMethod(obj, methodName) {\r\n\t        var method = obj[methodName];\r\n\t        if (typeof method.bind === 'function') {\r\n\t            return method.bind(obj);\r\n\t        } else {\r\n\t            try {\r\n\t                return Function.prototype.bind.call(method, obj);\r\n\t            } catch (e) {\r\n\t                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\r\n\t                return function() {\r\n\t                    return Function.prototype.apply.apply(method, [obj, arguments]);\r\n\t                };\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t\r\n\t    function enableLoggingWhenConsoleArrives(methodName, level) {\r\n\t        return function () {\r\n\t            if (typeof console !== undefinedType) {\r\n\t                replaceLoggingMethods(level);\r\n\t                self[methodName].apply(self, arguments);\r\n\t            }\r\n\t        };\r\n\t    }\r\n\t\r\n\t    var logMethods = [\r\n\t        \"trace\",\r\n\t        \"debug\",\r\n\t        \"info\",\r\n\t        \"warn\",\r\n\t        \"error\"\r\n\t    ];\r\n\t\r\n\t    function replaceLoggingMethods(level) {\r\n\t        for (var i = 0; i < logMethods.length; i++) {\r\n\t            var methodName = logMethods[i];\r\n\t            self[methodName] = (i < level) ? noop : self.methodFactory(methodName, level);\r\n\t        }\r\n\t    }\r\n\t\r\n\t    function persistLevelIfPossible(levelNum) {\r\n\t        var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\r\n\t\r\n\t        // Use localStorage if available\r\n\t        try {\r\n\t            window.localStorage['loglevel'] = levelName;\r\n\t            return;\r\n\t        } catch (ignore) {}\r\n\t\r\n\t        // Use session cookie as fallback\r\n\t        try {\r\n\t            window.document.cookie = \"loglevel=\" + levelName + \";\";\r\n\t        } catch (ignore) {}\r\n\t    }\r\n\t\r\n\t    function loadPersistedLevel() {\r\n\t        var storedLevel;\r\n\t\r\n\t        try {\r\n\t            storedLevel = window.localStorage['loglevel'];\r\n\t        } catch (ignore) {}\r\n\t\r\n\t        if (typeof storedLevel === undefinedType) {\r\n\t            try {\r\n\t                storedLevel = /loglevel=([^;]+)/.exec(window.document.cookie)[1];\r\n\t            } catch (ignore) {}\r\n\t        }\r\n\t        \r\n\t        if (self.levels[storedLevel] === undefined) {\r\n\t            storedLevel = \"WARN\";\r\n\t        }\r\n\t\r\n\t        self.setLevel(self.levels[storedLevel]);\r\n\t    }\r\n\t\r\n\t    /*\r\n\t     *\r\n\t     * Public API\r\n\t     *\r\n\t     */\r\n\t\r\n\t    self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\r\n\t        \"ERROR\": 4, \"SILENT\": 5};\r\n\t\r\n\t    self.methodFactory = function (methodName, level) {\r\n\t        return realMethod(methodName) ||\r\n\t               enableLoggingWhenConsoleArrives(methodName, level);\r\n\t    };\r\n\t\r\n\t    self.setLevel = function (level) {\r\n\t        if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\r\n\t            level = self.levels[level.toUpperCase()];\r\n\t        }\r\n\t        if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\r\n\t            persistLevelIfPossible(level);\r\n\t            replaceLoggingMethods(level);\r\n\t            if (typeof console === undefinedType && level < self.levels.SILENT) {\r\n\t                return \"No console available for logging\";\r\n\t            }\r\n\t        } else {\r\n\t            throw \"log.setLevel() called with invalid level: \" + level;\r\n\t        }\r\n\t    };\r\n\t\r\n\t    self.enableAll = function() {\r\n\t        self.setLevel(self.levels.TRACE);\r\n\t    };\r\n\t\r\n\t    self.disableAll = function() {\r\n\t        self.setLevel(self.levels.SILENT);\r\n\t    };\r\n\t\r\n\t    // Grab the current global log variable in case of overwrite\r\n\t    var _log = (typeof window !== undefinedType) ? window.log : undefined;\r\n\t    self.noConflict = function() {\r\n\t        if (typeof window !== undefinedType &&\r\n\t               window.log === self) {\r\n\t            window.log = _log;\r\n\t        }\r\n\t\r\n\t        return self;\r\n\t    };\r\n\t\r\n\t    loadPersistedLevel();\r\n\t    return self;\r\n\t}));\r\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Copyright (c) 2010 David Durman\n\t//\n\t// The contents of this file are subject to the MIT License (the \"License\");\n\t// you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\t// http://opensource.org/licenses/MIT.\n\t//\n\t// This hierarchical state machine implementation has been inspired\n\t// by the QP active object framework, see http://www.state-machine.com/\n\t\n\t\n\t(function(root, factory){\n\t    \"use strict\";\n\t\n\t    if (true) {\n\t\n\t        // Node. Does not work with strict CommonJS, but\n\t        // only CommonJS-like enviroments that support module.exports,\n\t        // like Node.\n\t        module.exports = factory();\n\t\n\t    } else if (typeof define === 'function' && define.amd) {\n\t\n\t        // AMD. Register as an anonymous module.\n\t        define(factory);\n\t\n\t    } else {\n\t\n\t        // Browser globals (root is window)\n\t        root.Statechart = factory();\n\t    }\n\t\n\t}(this, function(){\n\t\n\t    \"use strict\";\n\t\n\t    var assert = function(assertion){\n\t        if (!assertion) {\n\t            throw new Error(\"Assertion failed.\");\n\t        }\n\t    };\n\t\n\t\n\t    // Statechart.\n\t    // -----------\n\t\n\t    // `myState` - the current state\n\t    // `mySource` - the source of the current transition\n\t\n\t    var Statechart = {\n\t\n\t        run: function(opt){\n\t            opt = opt || {};\n\t            this.debug = opt.debug ? opt.debug : function(){};\n\t            this.construct(this.initialState);\n\t            this.init(null);\n\t        },\n\t\n\t        construct: function(initialState){\n\t            this.myState = this.top();\n\t            this.mySource = this.state(\"Initial\");\n\t\n\t            // Initial pseudo-state\n\t            this.states.Initial = {\n\t                empty: function(){\n\t                    this.newInitialState(initialState);\n\t                }\n\t            };\n\t            var handled = function(){ return null; };\n\t\n\t            // TOP state\n\t            this.states.TOP = {\n\t                entry: handled,\n\t                exit:  handled,\n\t                init:  handled,\n\t                empty: handled\n\t            };\n\t            this.flatten();\n\t        },\n\t\n\t        // Trigger the initial transition and recursively enter the submachine of the top state.\n\t        // Must be called only once for a given Statechart before dispatching any events to it.\n\t        init: function(anEventOrNull){\n\t            assert(this.myState === this.top() && this.mySource !== null);\n\t            var s = this.myState;    // save top in temp\n\t            this.mySource.trigger(anEventOrNull);    // topmost initial transition\n\t            assert(s.equals(this.myState.superstate()));    // verify that we only went one level deep\n\t            s = this.myState;\n\t            s.enter();\n\t            while (s.init() === null) {    // while init is handled (i.e. till we reach a leaf node)\n\t                assert(s.equals(this.myState.superstate()));    // verify that we only went one level deep\n\t                s = this.myState;\n\t                s.enter();\n\t            }\n\t        },\n\t\n\t        state: function(stateOrName){\n\t            return (stateOrName && stateOrName instanceof QState) ? stateOrName : new QState(this, stateOrName);\n\t        },\n\t\n\t        top: function(stateOrName){\n\t            // create the top state only once and store it to an auxiliary property\n\t            return (this._topState || (this._topState = new QState(this, \"TOP\")));\n\t        },\n\t\n\t        currentState: function(){\n\t            return this.myState;\n\t        },\n\t\n\t        flatten: function(){\n\t            this.statesTable = this.statesTable || {};\n\t            this._flatten(this.states, this.top().name);\n\t        },\n\t\n\t        _flatten: function(states, parent){\n\t            if (!states) {\n\t                return;\n\t            }\n\t\n\t            for (var state in states) {\n\t                if (states.hasOwnProperty(state)) {\n\t                    this.statesTable[state] = states[state];\n\t                    this.statesTable[state].parent = parent;\n\t                    this._flatten(states[state].states, state);\n\t                }\n\t            }\n\t        },\n\t\n\t        selectState: function(stateName){\n\t            return this.statesTable[stateName];\n\t        },\n\t\n\t        dispatchEvent: function(anEvent, state, act){\n\t            act = act || state[anEvent.type];\n\t\n\t            // Action might also be an array in which case it is assumed that evaluating guards decides\n\t            // which target to enter.\n\t            if (act instanceof Array) {\n\t                for (var i = 0; i < act.length; i++) {\n\t                    this.dispatchEvent(anEvent, state, act[i]);\n\t                }\n\t            }\n\t\n\t            // @todo This is terrible edge case used just for more fancy Statechart representation\n\t            // It allows using \"MyState\": { init: \"MySubState\", ... } intead of\n\t            // \"MyState\": { init: function(){ this.newInitialState(\"MySubState\"); }, ... }\n\t            // In some cases the latter form can be useful for better control of the Statechart\n\t            if (anEvent.type === \"init\" && typeof act === \"string\") {\n\t                this.newInitialState(act);\n\t                return null; // handled\n\t            }\n\t\n\t            if (act instanceof Function){\n\t                act.call(this, anEvent.args);\n\t                return null;  // handled\n\t            } else if (act) {\n\t                // no guard at all or the guard condition is met\n\t                if (!act.guard || (act.guard && act.guard.call(this, anEvent.args))){\n\t                    if (act.action) {\n\t                        act.action.call(this, anEvent.args);\n\t                    }\n\t                    if (act.target) {\n\t                        this.newState(act.target);\n\t                    }\n\t                    return null;  // handled\n\t                }\n\t            } else {        // act is undefined (no handler in state for anEvent)\n\t                if (state === this.selectState(\"TOP\")) {\n\t                    this.handleUnhandledEvent(anEvent); // not-handled\n\t                    return null;    // handled (TOP state handles all events)\n\t                }\n\t            }\n\t            return this.state(state.parent); // not-handled\n\t        },\n\t\n\t        // Override this when needed.\n\t        handleUnhandledEvent: function(anEvent){\n\t            this.debug(\"Unhandled event: \" + anEvent.type);\n\t            return null;\n\t        },\n\t\n\t        // Traverse the state hierarchy starting from the currently active state myState.\n\t        // Advance up the state hierarchy (i.e., from substates to superstates), invoking all\n\t        // the state handlers in succession. At each level of state nesting, it intercepts the value\n\t        // returned from a state handler to obtain the superstate needed to advance to the next level.\n\t        dispatch: function(anEvent, args){\n\t            if (!anEvent || !(anEvent instanceof QEvent)) {\n\t                anEvent = new QEvent(anEvent, args);\n\t            }\n\t            this.mySource = this.myState;\n\t            while (this.mySource) {\n\t                this.mySource = this.mySource.trigger(anEvent);\n\t            }\n\t        },\n\t\n\t        // Performs dynamic transition. (macro Q_TRAN_DYN())\n\t        newState: function(aStateName){\n\t            this.transition(this.state(aStateName));\n\t        },\n\t\n\t        // Used by handlers only in response to the #init event. (macro Q_INIT())\n\t        // USAGE: return this.newInitialState(\"whatever\");\n\t        // @return null for convenience\n\t\n\t        newInitialState: function(aStateOrName){\n\t            this.myState = this.state(aStateOrName);\n\t            return null;\n\t        },\n\t\n\t        // Dynamic transition. (Q_TRAN_DYN())\n\t        transition: function(target){\n\t            assert(!target.equals(this.top()));\n\t\n\t            var entry = [];\n\t            var mySource = this.mySource;\n\t            var s = this.myState;\n\t\n\t            // exit all the nested states between myState and mySource\n\t            assert(s !== null);\n\t            assert(mySource !== null);\n\t            while (!s.equals(mySource)) {\n\t                s = s.exit() || s.superstate();\n\t            }\n\t\n\t            // check all seven possible source/target state combinations\n\t\n\t\t    entry.push(target);\n\t\n\t            // (a) mySource == target (self transition)\n\t            if (mySource.equals(target)) {\n\t                mySource.exit();\n\t                return this.enterVia(target, entry);\n\t            }\n\t\n\t            // (b) mySource == target.superstate (one level deep)\n\t            var p = target.superstate();\n\t            if (mySource.equals(p)) {\n\t                return this.enterVia(target, entry);\n\t            }\n\t\n\t            assert(mySource !== null);\n\t\n\t            // (c) mySource.superstate == target.superstate (most common - fsa)\n\t            var q = mySource.superstate();\n\t            if (q.equals(p)) {\n\t                mySource.exit();\n\t                return this.enterVia(target, entry);\n\t            }\n\t\n\t            // (d) mySource.superstate == target (one level up)\n\t            if (q.equals(target)) {\n\t                mySource.exit();\n\t                entry.pop();    // do not enter the LCA\n\t                return this.enterVia(target, entry);\n\t            }\n\t\n\t            // (e) mySource == target.superstate.superstate... hierarchy (many levels deep)\n\t\t    entry.push(p);\n\t            s = p.superstate();\n\t            while (s !== null) {\n\t                if (mySource.equals(s)) {\n\t                    return this.enterVia(target, entry);\n\t                }\n\t\n\t\t\tentry.push(s);\n\t                s = s.superstate();\n\t            }\n\t\n\t            // otherwise we're definitely exiting mySource\n\t            mySource.exit();\n\t\n\t            // entry array is complete, save its length to avoid computing it repeatedly\n\t            var entryLength = entry.length;\n\t\n\t            // (f) mySource.superstate == target.superstate.superstate... hierarchy\n\t            var lca;\n\t            for (lca = entryLength - 1; lca >= 0; lca -= 1) {\n\t                if (q.equals(entry[lca])) {\n\t                    return this.enterVia(target, entry.slice(0, lca)); // do not enter lca\n\t                }\n\t            }\n\t\n\t            // (g) each mySource.superstate.superstate... for each target.superstate.superstate...\n\t            s = q;\n\t            while (s !== null) {\n\t                for (lca = entryLength - 1; lca >= 0; lca -= 1) {\n\t                    if (s.equals(entry[lca])) {\n\t                        return this.enterVia(target, entry.slice(0, lca)); // do not enter lca\n\t                    }\n\t                }\n\t                s.exit();\n\t                s = s.superstate();\n\t            }\n\t        },\n\t\n\t        // tail of transition()\n\t        // We are in the LCA of mySource and target.\n\t        enterVia: function(target, entry){\n\t\n\t            // retrace the entry path in reverse order\n\t            var idx = entry.length;\n\t            while (idx > 0) {\n\t                idx--;\n\t                entry[idx].enter();\n\t            }\n\t\n\t            this.myState = target;\n\t            while (target.init() === null) {\n\t                // initial transition must go one level deep\n\t                assert(target.equals(this.myState.superstate()));\n\t                target = this.myState;\n\t                target.enter();\n\t            }\n\t        }\n\t    };\n\t\n\t    // QState.\n\t    // -------\n\t\n\t    function QState(fsm, name){\n\t        this.fsm = fsm;\n\t        this.name = name;\n\t    }\n\t\n\t    QState.prototype = {\n\t        equals: function(state){\n\t            return (this.name === state.name && this.fsm === state.fsm);\n\t        },\n\t\n\t        dispatchEvent: function(anEvent, state){\n\t            return this.fsm.dispatchEvent(anEvent, state);\n\t        },\n\t\n\t        trigger: function(anEvent){\n\t            var evt = anEvent || QEventEmpty;\n\t            var state = this.fsm.selectState(this.name);\n\t            return this.dispatchEvent(evt, state);\n\t        },\n\t\n\t        enter: function(){\n\t            this.fsm.debug(\"[\" + this.name + \"] enter\");\n\t            return this.trigger(QEventEntry);\n\t        },\n\t\n\t        exit: function(){\n\t            this.fsm.debug(\"[\" + this.name + \"] exit\");\n\t            return this.trigger(QEventExit);\n\t        },\n\t\n\t        init: function(){\n\t            this.fsm.debug(\"[\" + this.name + \"] init\");\n\t            return this.trigger(QEventInit);\n\t        },\n\t\n\t        // Answer my superstate. Default is to return fsm top state.\n\t        superstate: function(){\n\t            var superstate = this.trigger(QEventEmpty);\n\t            if (superstate && superstate instanceof QState) {\n\t                return superstate;\n\t            }\n\t            superstate = this.fsm.top();\n\t            if (this.name === superstate.name) {\n\t                return null;\n\t            }\n\t            return superstate;\n\t        }\n\t    };\n\t\n\t    // QEvent\n\t    // ------\n\t\n\t    function QEvent(type, args){\n\t        this.type = type;\n\t        this.args = args;\n\t    }\n\t\n\t    // these events are static, they do not carry any arguments\n\t    // -> create them only once\n\t    // moreover, they don't have to be exposed to the outer world\n\t    var QEventEntry = new QEvent(\"entry\");\n\t    var QEventExit = new QEvent(\"exit\");\n\t    var QEventInit = new QEvent(\"init\");\n\t    var QEventEmpty = new QEvent(\"empty\");\n\t\n\t\n\t    return Statechart;\n\t}));\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/*! Socket.IO.js build:0.9.17, development. Copyright(c) 2011 LearnBoost <dev@learnboost.com> MIT Licensed */\n\t\n\tvar io = (false ? {} : module.exports);\n\t(function() {\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, global) {\n\t\n\t  /**\n\t   * IO namespace.\n\t   *\n\t   * @namespace\n\t   */\n\t\n\t  var io = exports;\n\t\n\t  /**\n\t   * Socket.IO version\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  io.version = '0.9.17';\n\t\n\t  /**\n\t   * Protocol implemented.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  io.protocol = 1;\n\t\n\t  /**\n\t   * Available transports, these will be populated with the available transports\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  io.transports = [];\n\t\n\t  /**\n\t   * Keep track of jsonp callbacks.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.j = [];\n\t\n\t  /**\n\t   * Keep track of our io.Sockets\n\t   *\n\t   * @api private\n\t   */\n\t  io.sockets = {};\n\t\n\t\n\t  /**\n\t   * Manages connections to hosts.\n\t   *\n\t   * @param {String} uri\n\t   * @Param {Boolean} force creation of new socket (defaults to false)\n\t   * @api public\n\t   */\n\t\n\t  io.connect = function (host, details) {\n\t    var uri = io.util.parseUri(host)\n\t      , uuri\n\t      , socket;\n\t\n\t    if (global && global.location) {\n\t      uri.protocol = uri.protocol || global.location.protocol.slice(0, -1);\n\t      uri.host = uri.host || (global.document\n\t        ? global.document.domain : global.location.hostname);\n\t      uri.port = uri.port || global.location.port;\n\t    }\n\t\n\t    uuri = io.util.uniqueUri(uri);\n\t\n\t    var options = {\n\t        host: uri.host\n\t      , secure: 'https' == uri.protocol\n\t      , port: uri.port || ('https' == uri.protocol ? 443 : 80)\n\t      , query: uri.query || ''\n\t    };\n\t\n\t    io.util.merge(options, details);\n\t\n\t    if (options['force new connection'] || !io.sockets[uuri]) {\n\t      socket = new io.Socket(options);\n\t    }\n\t\n\t    if (!options['force new connection'] && socket) {\n\t      io.sockets[uuri] = socket;\n\t    }\n\t\n\t    socket = socket || io.sockets[uuri];\n\t\n\t    // if path is different from '' or /\n\t    return socket.of(uri.path.length > 1 ? uri.path : '');\n\t  };\n\t\n\t})(true ? module.exports : (this.io = {}), this);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, global) {\n\t\n\t  /**\n\t   * Utilities namespace.\n\t   *\n\t   * @namespace\n\t   */\n\t\n\t  var util = exports.util = {};\n\t\n\t  /**\n\t   * Parses an URI\n\t   *\n\t   * @author Steven Levithan <stevenlevithan.com> (MIT license)\n\t   * @api public\n\t   */\n\t\n\t  var re = /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\t\n\t  var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password',\n\t               'host', 'port', 'relative', 'path', 'directory', 'file', 'query',\n\t               'anchor'];\n\t\n\t  util.parseUri = function (str) {\n\t    var m = re.exec(str || '')\n\t      , uri = {}\n\t      , i = 14;\n\t\n\t    while (i--) {\n\t      uri[parts[i]] = m[i] || '';\n\t    }\n\t\n\t    return uri;\n\t  };\n\t\n\t  /**\n\t   * Produces a unique url that identifies a Socket.IO connection.\n\t   *\n\t   * @param {Object} uri\n\t   * @api public\n\t   */\n\t\n\t  util.uniqueUri = function (uri) {\n\t    var protocol = uri.protocol\n\t      , host = uri.host\n\t      , port = uri.port;\n\t\n\t    if ('document' in global) {\n\t      host = host || document.domain;\n\t      port = port || (protocol == 'https'\n\t        && document.location.protocol !== 'https:' ? 443 : document.location.port);\n\t    } else {\n\t      host = host || 'localhost';\n\t\n\t      if (!port && protocol == 'https') {\n\t        port = 443;\n\t      }\n\t    }\n\t\n\t    return (protocol || 'http') + '://' + host + ':' + (port || 80);\n\t  };\n\t\n\t  /**\n\t   * Mergest 2 query strings in to once unique query string\n\t   *\n\t   * @param {String} base\n\t   * @param {String} addition\n\t   * @api public\n\t   */\n\t\n\t  util.query = function (base, addition) {\n\t    var query = util.chunkQuery(base || '')\n\t      , components = [];\n\t\n\t    util.merge(query, util.chunkQuery(addition || ''));\n\t    for (var part in query) {\n\t      if (query.hasOwnProperty(part)) {\n\t        components.push(part + '=' + query[part]);\n\t      }\n\t    }\n\t\n\t    return components.length ? '?' + components.join('&') : '';\n\t  };\n\t\n\t  /**\n\t   * Transforms a querystring in to an object\n\t   *\n\t   * @param {String} qs\n\t   * @api public\n\t   */\n\t\n\t  util.chunkQuery = function (qs) {\n\t    var query = {}\n\t      , params = qs.split('&')\n\t      , i = 0\n\t      , l = params.length\n\t      , kv;\n\t\n\t    for (; i < l; ++i) {\n\t      kv = params[i].split('=');\n\t      if (kv[0]) {\n\t        query[kv[0]] = kv[1];\n\t      }\n\t    }\n\t\n\t    return query;\n\t  };\n\t\n\t  /**\n\t   * Executes the given function when the page is loaded.\n\t   *\n\t   *     io.util.load(function () { console.log('page loaded'); });\n\t   *\n\t   * @param {Function} fn\n\t   * @api public\n\t   */\n\t\n\t  var pageLoaded = false;\n\t\n\t  util.load = function (fn) {\n\t    if ('document' in global && document.readyState === 'complete' || pageLoaded) {\n\t      return fn();\n\t    }\n\t\n\t    util.on(global, 'load', fn, false);\n\t  };\n\t\n\t  /**\n\t   * Adds an event.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  util.on = function (element, event, fn, capture) {\n\t    if (element.attachEvent) {\n\t      element.attachEvent('on' + event, fn);\n\t    } else if (element.addEventListener) {\n\t      element.addEventListener(event, fn, capture);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Generates the correct `XMLHttpRequest` for regular and cross domain requests.\n\t   *\n\t   * @param {Boolean} [xdomain] Create a request that can be used cross domain.\n\t   * @returns {XMLHttpRequest|false} If we can create a XMLHttpRequest.\n\t   * @api private\n\t   */\n\t\n\t  util.request = function (xdomain) {\n\t\n\t    if (xdomain && 'undefined' != typeof XDomainRequest && !util.ua.hasCORS) {\n\t      return new XDomainRequest();\n\t    }\n\t\n\t    if ('undefined' != typeof XMLHttpRequest && (!xdomain || util.ua.hasCORS)) {\n\t      return new XMLHttpRequest();\n\t    }\n\t\n\t    if (!xdomain) {\n\t      try {\n\t        return new window[(['Active'].concat('Object').join('X'))]('Microsoft.XMLHTTP');\n\t      } catch(e) { }\n\t    }\n\t\n\t    return null;\n\t  };\n\t\n\t  /**\n\t   * XHR based transport constructor.\n\t   *\n\t   * @constructor\n\t   * @api public\n\t   */\n\t\n\t  /**\n\t   * Change the internal pageLoaded value.\n\t   */\n\t\n\t  if ('undefined' != typeof window) {\n\t    util.load(function () {\n\t      pageLoaded = true;\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Defers a function to ensure a spinner is not displayed by the browser\n\t   *\n\t   * @param {Function} fn\n\t   * @api public\n\t   */\n\t\n\t  util.defer = function (fn) {\n\t    if (!util.ua.webkit || 'undefined' != typeof importScripts) {\n\t      return fn();\n\t    }\n\t\n\t    util.load(function () {\n\t      setTimeout(fn, 100);\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Merges two objects.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.merge = function merge (target, additional, deep, lastseen) {\n\t    var seen = lastseen || []\n\t      , depth = typeof deep == 'undefined' ? 2 : deep\n\t      , prop;\n\t\n\t    for (prop in additional) {\n\t      if (additional.hasOwnProperty(prop) && util.indexOf(seen, prop) < 0) {\n\t        if (typeof target[prop] !== 'object' || !depth) {\n\t          target[prop] = additional[prop];\n\t          seen.push(additional[prop]);\n\t        } else {\n\t          util.merge(target[prop], additional[prop], depth - 1, seen);\n\t        }\n\t      }\n\t    }\n\t\n\t    return target;\n\t  };\n\t\n\t  /**\n\t   * Merges prototypes from objects\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.mixin = function (ctor, ctor2) {\n\t    util.merge(ctor.prototype, ctor2.prototype);\n\t  };\n\t\n\t  /**\n\t   * Shortcut for prototypical and static inheritance.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  util.inherit = function (ctor, ctor2) {\n\t    function f() {};\n\t    f.prototype = ctor2.prototype;\n\t    ctor.prototype = new f;\n\t  };\n\t\n\t  /**\n\t   * Checks if the given object is an Array.\n\t   *\n\t   *     io.util.isArray([]); // true\n\t   *     io.util.isArray({}); // false\n\t   *\n\t   * @param Object obj\n\t   * @api public\n\t   */\n\t\n\t  util.isArray = Array.isArray || function (obj) {\n\t    return Object.prototype.toString.call(obj) === '[object Array]';\n\t  };\n\t\n\t  /**\n\t   * Intersects values of two arrays into a third\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.intersect = function (arr, arr2) {\n\t    var ret = []\n\t      , longest = arr.length > arr2.length ? arr : arr2\n\t      , shortest = arr.length > arr2.length ? arr2 : arr;\n\t\n\t    for (var i = 0, l = shortest.length; i < l; i++) {\n\t      if (~util.indexOf(longest, shortest[i]))\n\t        ret.push(shortest[i]);\n\t    }\n\t\n\t    return ret;\n\t  };\n\t\n\t  /**\n\t   * Array indexOf compatibility.\n\t   *\n\t   * @see bit.ly/a5Dxa2\n\t   * @api public\n\t   */\n\t\n\t  util.indexOf = function (arr, o, i) {\n\t\n\t    for (var j = arr.length, i = i < 0 ? i + j < 0 ? 0 : i + j : i || 0;\n\t         i < j && arr[i] !== o; i++) {}\n\t\n\t    return j <= i ? -1 : i;\n\t  };\n\t\n\t  /**\n\t   * Converts enumerables to array.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.toArray = function (enu) {\n\t    var arr = [];\n\t\n\t    for (var i = 0, l = enu.length; i < l; i++)\n\t      arr.push(enu[i]);\n\t\n\t    return arr;\n\t  };\n\t\n\t  /**\n\t   * UA / engines detection namespace.\n\t   *\n\t   * @namespace\n\t   */\n\t\n\t  util.ua = {};\n\t\n\t  /**\n\t   * Whether the UA supports CORS for XHR.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.ua.hasCORS = 'undefined' != typeof XMLHttpRequest && (function () {\n\t    try {\n\t      var a = new XMLHttpRequest();\n\t    } catch (e) {\n\t      return false;\n\t    }\n\t\n\t    return a.withCredentials != undefined;\n\t  })();\n\t\n\t  /**\n\t   * Detect webkit.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.ua.webkit = 'undefined' != typeof navigator\n\t    && /webkit/i.test(navigator.userAgent);\n\t\n\t   /**\n\t   * Detect iPad/iPhone/iPod.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.ua.iDevice = 'undefined' != typeof navigator\n\t      && /iPad|iPhone|iPod/i.test(navigator.userAgent);\n\t\n\t})('undefined' != typeof io ? io : module.exports, this);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.EventEmitter = EventEmitter;\n\t\n\t  /**\n\t   * Event emitter constructor.\n\t   *\n\t   * @api public.\n\t   */\n\t\n\t  function EventEmitter () {};\n\t\n\t  /**\n\t   * Adds a listener\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  EventEmitter.prototype.on = function (name, fn) {\n\t    if (!this.$events) {\n\t      this.$events = {};\n\t    }\n\t\n\t    if (!this.$events[name]) {\n\t      this.$events[name] = fn;\n\t    } else if (io.util.isArray(this.$events[name])) {\n\t      this.$events[name].push(fn);\n\t    } else {\n\t      this.$events[name] = [this.$events[name], fn];\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\t\n\t  /**\n\t   * Adds a volatile listener.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  EventEmitter.prototype.once = function (name, fn) {\n\t    var self = this;\n\t\n\t    function on () {\n\t      self.removeListener(name, on);\n\t      fn.apply(this, arguments);\n\t    };\n\t\n\t    on.listener = fn;\n\t    this.on(name, on);\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Removes a listener.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  EventEmitter.prototype.removeListener = function (name, fn) {\n\t    if (this.$events && this.$events[name]) {\n\t      var list = this.$events[name];\n\t\n\t      if (io.util.isArray(list)) {\n\t        var pos = -1;\n\t\n\t        for (var i = 0, l = list.length; i < l; i++) {\n\t          if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {\n\t            pos = i;\n\t            break;\n\t          }\n\t        }\n\t\n\t        if (pos < 0) {\n\t          return this;\n\t        }\n\t\n\t        list.splice(pos, 1);\n\t\n\t        if (!list.length) {\n\t          delete this.$events[name];\n\t        }\n\t      } else if (list === fn || (list.listener && list.listener === fn)) {\n\t        delete this.$events[name];\n\t      }\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Removes all listeners for an event.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  EventEmitter.prototype.removeAllListeners = function (name) {\n\t    if (name === undefined) {\n\t      this.$events = {};\n\t      return this;\n\t    }\n\t\n\t    if (this.$events && this.$events[name]) {\n\t      this.$events[name] = null;\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Gets all listeners for a certain event.\n\t   *\n\t   * @api publci\n\t   */\n\t\n\t  EventEmitter.prototype.listeners = function (name) {\n\t    if (!this.$events) {\n\t      this.$events = {};\n\t    }\n\t\n\t    if (!this.$events[name]) {\n\t      this.$events[name] = [];\n\t    }\n\t\n\t    if (!io.util.isArray(this.$events[name])) {\n\t      this.$events[name] = [this.$events[name]];\n\t    }\n\t\n\t    return this.$events[name];\n\t  };\n\t\n\t  /**\n\t   * Emits an event.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  EventEmitter.prototype.emit = function (name) {\n\t    if (!this.$events) {\n\t      return false;\n\t    }\n\t\n\t    var handler = this.$events[name];\n\t\n\t    if (!handler) {\n\t      return false;\n\t    }\n\t\n\t    var args = Array.prototype.slice.call(arguments, 1);\n\t\n\t    if ('function' == typeof handler) {\n\t      handler.apply(this, args);\n\t    } else if (io.util.isArray(handler)) {\n\t      var listeners = handler.slice();\n\t\n\t      for (var i = 0, l = listeners.length; i < l; i++) {\n\t        listeners[i].apply(this, args);\n\t      }\n\t    } else {\n\t      return false;\n\t    }\n\t\n\t    return true;\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * Based on JSON2 (http://www.JSON.org/js.html).\n\t */\n\t\n\t(function (exports, nativeJSON) {\n\t  \"use strict\";\n\t\n\t  // use native JSON if it's available\n\t  if (nativeJSON && nativeJSON.parse){\n\t    return exports.JSON = {\n\t      parse: nativeJSON.parse\n\t    , stringify: nativeJSON.stringify\n\t    };\n\t  }\n\t\n\t  var JSON = exports.JSON = {};\n\t\n\t  function f(n) {\n\t      // Format integers to have at least two digits.\n\t      return n < 10 ? '0' + n : n;\n\t  }\n\t\n\t  function date(d, key) {\n\t    return isFinite(d.valueOf()) ?\n\t        d.getUTCFullYear()     + '-' +\n\t        f(d.getUTCMonth() + 1) + '-' +\n\t        f(d.getUTCDate())      + 'T' +\n\t        f(d.getUTCHours())     + ':' +\n\t        f(d.getUTCMinutes())   + ':' +\n\t        f(d.getUTCSeconds())   + 'Z' : null;\n\t  };\n\t\n\t  var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n\t      escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n\t      gap,\n\t      indent,\n\t      meta = {    // table of character substitutions\n\t          '\\b': '\\\\b',\n\t          '\\t': '\\\\t',\n\t          '\\n': '\\\\n',\n\t          '\\f': '\\\\f',\n\t          '\\r': '\\\\r',\n\t          '\"' : '\\\\\"',\n\t          '\\\\': '\\\\\\\\'\n\t      },\n\t      rep;\n\t\n\t\n\t  function quote(string) {\n\t\n\t// If the string contains no control characters, no quote characters, and no\n\t// backslash characters, then we can safely slap some quotes around it.\n\t// Otherwise we must also replace the offending characters with safe escape\n\t// sequences.\n\t\n\t      escapable.lastIndex = 0;\n\t      return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n\t          var c = meta[a];\n\t          return typeof c === 'string' ? c :\n\t              '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n\t      }) + '\"' : '\"' + string + '\"';\n\t  }\n\t\n\t\n\t  function str(key, holder) {\n\t\n\t// Produce a string from holder[key].\n\t\n\t      var i,          // The loop counter.\n\t          k,          // The member key.\n\t          v,          // The member value.\n\t          length,\n\t          mind = gap,\n\t          partial,\n\t          value = holder[key];\n\t\n\t// If the value has a toJSON method, call it to obtain a replacement value.\n\t\n\t      if (value instanceof Date) {\n\t          value = date(key);\n\t      }\n\t\n\t// If we were called with a replacer function, then call the replacer to\n\t// obtain a replacement value.\n\t\n\t      if (typeof rep === 'function') {\n\t          value = rep.call(holder, key, value);\n\t      }\n\t\n\t// What happens next depends on the value's type.\n\t\n\t      switch (typeof value) {\n\t      case 'string':\n\t          return quote(value);\n\t\n\t      case 'number':\n\t\n\t// JSON numbers must be finite. Encode non-finite numbers as null.\n\t\n\t          return isFinite(value) ? String(value) : 'null';\n\t\n\t      case 'boolean':\n\t      case 'null':\n\t\n\t// If the value is a boolean or null, convert it to a string. Note:\n\t// typeof null does not produce 'null'. The case is included here in\n\t// the remote chance that this gets fixed someday.\n\t\n\t          return String(value);\n\t\n\t// If the type is 'object', we might be dealing with an object or an array or\n\t// null.\n\t\n\t      case 'object':\n\t\n\t// Due to a specification blunder in ECMAScript, typeof null is 'object',\n\t// so watch out for that case.\n\t\n\t          if (!value) {\n\t              return 'null';\n\t          }\n\t\n\t// Make an array to hold the partial results of stringifying this object value.\n\t\n\t          gap += indent;\n\t          partial = [];\n\t\n\t// Is the value an array?\n\t\n\t          if (Object.prototype.toString.apply(value) === '[object Array]') {\n\t\n\t// The value is an array. Stringify every element. Use null as a placeholder\n\t// for non-JSON values.\n\t\n\t              length = value.length;\n\t              for (i = 0; i < length; i += 1) {\n\t                  partial[i] = str(i, value) || 'null';\n\t              }\n\t\n\t// Join all of the elements together, separated with commas, and wrap them in\n\t// brackets.\n\t\n\t              v = partial.length === 0 ? '[]' : gap ?\n\t                  '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n\t                  '[' + partial.join(',') + ']';\n\t              gap = mind;\n\t              return v;\n\t          }\n\t\n\t// If the replacer is an array, use it to select the members to be stringified.\n\t\n\t          if (rep && typeof rep === 'object') {\n\t              length = rep.length;\n\t              for (i = 0; i < length; i += 1) {\n\t                  if (typeof rep[i] === 'string') {\n\t                      k = rep[i];\n\t                      v = str(k, value);\n\t                      if (v) {\n\t                          partial.push(quote(k) + (gap ? ': ' : ':') + v);\n\t                      }\n\t                  }\n\t              }\n\t          } else {\n\t\n\t// Otherwise, iterate through all of the keys in the object.\n\t\n\t              for (k in value) {\n\t                  if (Object.prototype.hasOwnProperty.call(value, k)) {\n\t                      v = str(k, value);\n\t                      if (v) {\n\t                          partial.push(quote(k) + (gap ? ': ' : ':') + v);\n\t                      }\n\t                  }\n\t              }\n\t          }\n\t\n\t// Join all of the member texts together, separated with commas,\n\t// and wrap them in braces.\n\t\n\t          v = partial.length === 0 ? '{}' : gap ?\n\t              '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n\t              '{' + partial.join(',') + '}';\n\t          gap = mind;\n\t          return v;\n\t      }\n\t  }\n\t\n\t// If the JSON object does not yet have a stringify method, give it one.\n\t\n\t  JSON.stringify = function (value, replacer, space) {\n\t\n\t// The stringify method takes a value and an optional replacer, and an optional\n\t// space parameter, and returns a JSON text. The replacer can be a function\n\t// that can replace values, or an array of strings that will select the keys.\n\t// A default replacer method can be provided. Use of the space parameter can\n\t// produce text that is more easily readable.\n\t\n\t      var i;\n\t      gap = '';\n\t      indent = '';\n\t\n\t// If the space parameter is a number, make an indent string containing that\n\t// many spaces.\n\t\n\t      if (typeof space === 'number') {\n\t          for (i = 0; i < space; i += 1) {\n\t              indent += ' ';\n\t          }\n\t\n\t// If the space parameter is a string, it will be used as the indent string.\n\t\n\t      } else if (typeof space === 'string') {\n\t          indent = space;\n\t      }\n\t\n\t// If there is a replacer, it must be a function or an array.\n\t// Otherwise, throw an error.\n\t\n\t      rep = replacer;\n\t      if (replacer && typeof replacer !== 'function' &&\n\t              (typeof replacer !== 'object' ||\n\t              typeof replacer.length !== 'number')) {\n\t          throw new Error('JSON.stringify');\n\t      }\n\t\n\t// Make a fake root object containing our value under the key of ''.\n\t// Return the result of stringifying the value.\n\t\n\t      return str('', {'': value});\n\t  };\n\t\n\t// If the JSON object does not yet have a parse method, give it one.\n\t\n\t  JSON.parse = function (text, reviver) {\n\t  // The parse method takes a text and an optional reviver function, and returns\n\t  // a JavaScript value if the text is a valid JSON text.\n\t\n\t      var j;\n\t\n\t      function walk(holder, key) {\n\t\n\t  // The walk method is used to recursively walk the resulting structure so\n\t  // that modifications can be made.\n\t\n\t          var k, v, value = holder[key];\n\t          if (value && typeof value === 'object') {\n\t              for (k in value) {\n\t                  if (Object.prototype.hasOwnProperty.call(value, k)) {\n\t                      v = walk(value, k);\n\t                      if (v !== undefined) {\n\t                          value[k] = v;\n\t                      } else {\n\t                          delete value[k];\n\t                      }\n\t                  }\n\t              }\n\t          }\n\t          return reviver.call(holder, key, value);\n\t      }\n\t\n\t\n\t  // Parsing happens in four stages. In the first stage, we replace certain\n\t  // Unicode characters with escape sequences. JavaScript handles many characters\n\t  // incorrectly, either silently deleting them, or treating them as line endings.\n\t\n\t      text = String(text);\n\t      cx.lastIndex = 0;\n\t      if (cx.test(text)) {\n\t          text = text.replace(cx, function (a) {\n\t              return '\\\\u' +\n\t                  ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n\t          });\n\t      }\n\t\n\t  // In the second stage, we run the text against regular expressions that look\n\t  // for non-JSON patterns. We are especially concerned with '()' and 'new'\n\t  // because they can cause invocation, and '=' because it can cause mutation.\n\t  // But just to be safe, we want to reject all unexpected forms.\n\t\n\t  // We split the second stage into 4 regexp operations in order to work around\n\t  // crippling inefficiencies in IE's and Safari's regexp engines. First we\n\t  // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we\n\t  // replace all simple value tokens with ']' characters. Third, we delete all\n\t  // open brackets that follow a colon or comma or that begin the text. Finally,\n\t  // we look to see that the remaining characters are only whitespace or ']' or\n\t  // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.\n\t\n\t      if (/^[\\],:{}\\s]*$/\n\t              .test(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')\n\t                  .replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']')\n\t                  .replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))) {\n\t\n\t  // In the third stage we use the eval function to compile the text into a\n\t  // JavaScript structure. The '{' operator is subject to a syntactic ambiguity\n\t  // in JavaScript: it can begin a block or an object literal. We wrap the text\n\t  // in parens to eliminate the ambiguity.\n\t\n\t          j = eval('(' + text + ')');\n\t\n\t  // In the optional fourth stage, we recursively walk the new structure, passing\n\t  // each name/value pair to a reviver function for possible transformation.\n\t\n\t          return typeof reviver === 'function' ?\n\t              walk({'': j}, '') : j;\n\t      }\n\t\n\t  // If the text is not JSON parseable, then a SyntaxError is thrown.\n\t\n\t      throw new SyntaxError('JSON.parse');\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , typeof JSON !== 'undefined' ? JSON : undefined\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Parser namespace.\n\t   *\n\t   * @namespace\n\t   */\n\t\n\t  var parser = exports.parser = {};\n\t\n\t  /**\n\t   * Packet types.\n\t   */\n\t\n\t  var packets = parser.packets = [\n\t      'disconnect'\n\t    , 'connect'\n\t    , 'heartbeat'\n\t    , 'message'\n\t    , 'json'\n\t    , 'event'\n\t    , 'ack'\n\t    , 'error'\n\t    , 'noop'\n\t  ];\n\t\n\t  /**\n\t   * Errors reasons.\n\t   */\n\t\n\t  var reasons = parser.reasons = [\n\t      'transport not supported'\n\t    , 'client not handshaken'\n\t    , 'unauthorized'\n\t  ];\n\t\n\t  /**\n\t   * Errors advice.\n\t   */\n\t\n\t  var advice = parser.advice = [\n\t      'reconnect'\n\t  ];\n\t\n\t  /**\n\t   * Shortcuts.\n\t   */\n\t\n\t  var JSON = io.JSON\n\t    , indexOf = io.util.indexOf;\n\t\n\t  /**\n\t   * Encodes a packet.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  parser.encodePacket = function (packet) {\n\t    var type = indexOf(packets, packet.type)\n\t      , id = packet.id || ''\n\t      , endpoint = packet.endpoint || ''\n\t      , ack = packet.ack\n\t      , data = null;\n\t\n\t    switch (packet.type) {\n\t      case 'error':\n\t        var reason = packet.reason ? indexOf(reasons, packet.reason) : ''\n\t          , adv = packet.advice ? indexOf(advice, packet.advice) : '';\n\t\n\t        if (reason !== '' || adv !== '')\n\t          data = reason + (adv !== '' ? ('+' + adv) : '');\n\t\n\t        break;\n\t\n\t      case 'message':\n\t        if (packet.data !== '')\n\t          data = packet.data;\n\t        break;\n\t\n\t      case 'event':\n\t        var ev = { name: packet.name };\n\t\n\t        if (packet.args && packet.args.length) {\n\t          ev.args = packet.args;\n\t        }\n\t\n\t        data = JSON.stringify(ev);\n\t        break;\n\t\n\t      case 'json':\n\t        data = JSON.stringify(packet.data);\n\t        break;\n\t\n\t      case 'connect':\n\t        if (packet.qs)\n\t          data = packet.qs;\n\t        break;\n\t\n\t      case 'ack':\n\t        data = packet.ackId\n\t          + (packet.args && packet.args.length\n\t              ? '+' + JSON.stringify(packet.args) : '');\n\t        break;\n\t    }\n\t\n\t    // construct packet with required fragments\n\t    var encoded = [\n\t        type\n\t      , id + (ack == 'data' ? '+' : '')\n\t      , endpoint\n\t    ];\n\t\n\t    // data fragment is optional\n\t    if (data !== null && data !== undefined)\n\t      encoded.push(data);\n\t\n\t    return encoded.join(':');\n\t  };\n\t\n\t  /**\n\t   * Encodes multiple messages (payload).\n\t   *\n\t   * @param {Array} messages\n\t   * @api private\n\t   */\n\t\n\t  parser.encodePayload = function (packets) {\n\t    var decoded = '';\n\t\n\t    if (packets.length == 1)\n\t      return packets[0];\n\t\n\t    for (var i = 0, l = packets.length; i < l; i++) {\n\t      var packet = packets[i];\n\t      decoded += '\\ufffd' + packet.length + '\\ufffd' + packets[i];\n\t    }\n\t\n\t    return decoded;\n\t  };\n\t\n\t  /**\n\t   * Decodes a packet\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  var regexp = /([^:]+):([0-9]+)?(\\+)?:([^:]+)?:?([\\s\\S]*)?/;\n\t\n\t  parser.decodePacket = function (data) {\n\t    var pieces = data.match(regexp);\n\t\n\t    if (!pieces) return {};\n\t\n\t    var id = pieces[2] || ''\n\t      , data = pieces[5] || ''\n\t      , packet = {\n\t            type: packets[pieces[1]]\n\t          , endpoint: pieces[4] || ''\n\t        };\n\t\n\t    // whether we need to acknowledge the packet\n\t    if (id) {\n\t      packet.id = id;\n\t      if (pieces[3])\n\t        packet.ack = 'data';\n\t      else\n\t        packet.ack = true;\n\t    }\n\t\n\t    // handle different packet types\n\t    switch (packet.type) {\n\t      case 'error':\n\t        var pieces = data.split('+');\n\t        packet.reason = reasons[pieces[0]] || '';\n\t        packet.advice = advice[pieces[1]] || '';\n\t        break;\n\t\n\t      case 'message':\n\t        packet.data = data || '';\n\t        break;\n\t\n\t      case 'event':\n\t        try {\n\t          var opts = JSON.parse(data);\n\t          packet.name = opts.name;\n\t          packet.args = opts.args;\n\t        } catch (e) { }\n\t\n\t        packet.args = packet.args || [];\n\t        break;\n\t\n\t      case 'json':\n\t        try {\n\t          packet.data = JSON.parse(data);\n\t        } catch (e) { }\n\t        break;\n\t\n\t      case 'connect':\n\t        packet.qs = data || '';\n\t        break;\n\t\n\t      case 'ack':\n\t        var pieces = data.match(/^([0-9]+)(\\+)?(.*)/);\n\t        if (pieces) {\n\t          packet.ackId = pieces[1];\n\t          packet.args = [];\n\t\n\t          if (pieces[3]) {\n\t            try {\n\t              packet.args = pieces[3] ? JSON.parse(pieces[3]) : [];\n\t            } catch (e) { }\n\t          }\n\t        }\n\t        break;\n\t\n\t      case 'disconnect':\n\t      case 'heartbeat':\n\t        break;\n\t    };\n\t\n\t    return packet;\n\t  };\n\t\n\t  /**\n\t   * Decodes data payload. Detects multiple messages\n\t   *\n\t   * @return {Array} messages\n\t   * @api public\n\t   */\n\t\n\t  parser.decodePayload = function (data) {\n\t    // IE doesn't like data[i] for unicode chars, charAt works fine\n\t    if (data.charAt(0) == '\\ufffd') {\n\t      var ret = [];\n\t\n\t      for (var i = 1, length = ''; i < data.length; i++) {\n\t        if (data.charAt(i) == '\\ufffd') {\n\t          ret.push(parser.decodePacket(data.substr(i + 1).substr(0, length)));\n\t          i += Number(length) + 1;\n\t          length = '';\n\t        } else {\n\t          length += data.charAt(i);\n\t        }\n\t      }\n\t\n\t      return ret;\n\t    } else {\n\t      return [parser.decodePacket(data)];\n\t    }\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.Transport = Transport;\n\t\n\t  /**\n\t   * This is the transport template for all supported transport methods.\n\t   *\n\t   * @constructor\n\t   * @api public\n\t   */\n\t\n\t  function Transport (socket, sessid) {\n\t    this.socket = socket;\n\t    this.sessid = sessid;\n\t  };\n\t\n\t  /**\n\t   * Apply EventEmitter mixin.\n\t   */\n\t\n\t  io.util.mixin(Transport, io.EventEmitter);\n\t\n\t\n\t  /**\n\t   * Indicates whether heartbeats is enabled for this transport\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.heartbeats = function () {\n\t    return true;\n\t  };\n\t\n\t  /**\n\t   * Handles the response from the server. When a new response is received\n\t   * it will automatically update the timeout, decode the message and\n\t   * forwards the response to the onMessage function for further processing.\n\t   *\n\t   * @param {String} data Response from the server.\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onData = function (data) {\n\t    this.clearCloseTimeout();\n\t\n\t    // If the connection in currently open (or in a reopening state) reset the close\n\t    // timeout since we have just received data. This check is necessary so\n\t    // that we don't reset the timeout on an explicitly disconnected connection.\n\t    if (this.socket.connected || this.socket.connecting || this.socket.reconnecting) {\n\t      this.setCloseTimeout();\n\t    }\n\t\n\t    if (data !== '') {\n\t      // todo: we should only do decodePayload for xhr transports\n\t      var msgs = io.parser.decodePayload(data);\n\t\n\t      if (msgs && msgs.length) {\n\t        for (var i = 0, l = msgs.length; i < l; i++) {\n\t          this.onPacket(msgs[i]);\n\t        }\n\t      }\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Handles packets.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onPacket = function (packet) {\n\t    this.socket.setHeartbeatTimeout();\n\t\n\t    if (packet.type == 'heartbeat') {\n\t      return this.onHeartbeat();\n\t    }\n\t\n\t    if (packet.type == 'connect' && packet.endpoint == '') {\n\t      this.onConnect();\n\t    }\n\t\n\t    if (packet.type == 'error' && packet.advice == 'reconnect') {\n\t      this.isOpen = false;\n\t    }\n\t\n\t    this.socket.onPacket(packet);\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Sets close timeout\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.setCloseTimeout = function () {\n\t    if (!this.closeTimeout) {\n\t      var self = this;\n\t\n\t      this.closeTimeout = setTimeout(function () {\n\t        self.onDisconnect();\n\t      }, this.socket.closeTimeout);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Called when transport disconnects.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onDisconnect = function () {\n\t    if (this.isOpen) this.close();\n\t    this.clearTimeouts();\n\t    this.socket.onDisconnect();\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Called when transport connects\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onConnect = function () {\n\t    this.socket.onConnect();\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Clears close timeout\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.clearCloseTimeout = function () {\n\t    if (this.closeTimeout) {\n\t      clearTimeout(this.closeTimeout);\n\t      this.closeTimeout = null;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Clear timeouts\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.clearTimeouts = function () {\n\t    this.clearCloseTimeout();\n\t\n\t    if (this.reopenTimeout) {\n\t      clearTimeout(this.reopenTimeout);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Sends a packet\n\t   *\n\t   * @param {Object} packet object.\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.packet = function (packet) {\n\t    this.send(io.parser.encodePacket(packet));\n\t  };\n\t\n\t  /**\n\t   * Send the received heartbeat message back to server. So the server\n\t   * knows we are still connected.\n\t   *\n\t   * @param {String} heartbeat Heartbeat response from the server.\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onHeartbeat = function (heartbeat) {\n\t    this.packet({ type: 'heartbeat' });\n\t  };\n\t\n\t  /**\n\t   * Called when the transport opens.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onOpen = function () {\n\t    this.isOpen = true;\n\t    this.clearCloseTimeout();\n\t    this.socket.onOpen();\n\t  };\n\t\n\t  /**\n\t   * Notifies the base when the connection with the Socket.IO server\n\t   * has been disconnected.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onClose = function () {\n\t    var self = this;\n\t\n\t    /* FIXME: reopen delay causing a infinit loop\n\t    this.reopenTimeout = setTimeout(function () {\n\t      self.open();\n\t    }, this.socket.options['reopen delay']);*/\n\t\n\t    this.isOpen = false;\n\t    this.socket.onClose();\n\t    this.onDisconnect();\n\t  };\n\t\n\t  /**\n\t   * Generates a connection url based on the Socket.IO URL Protocol.\n\t   * See <https://github.com/learnboost/socket.io-node/> for more details.\n\t   *\n\t   * @returns {String} Connection url\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.prepareUrl = function () {\n\t    var options = this.socket.options;\n\t\n\t    return this.scheme() + '://'\n\t      + options.host + ':' + options.port + '/'\n\t      + options.resource + '/' + io.protocol\n\t      + '/' + this.name + '/' + this.sessid;\n\t  };\n\t\n\t  /**\n\t   * Checks if the transport is ready to start a connection.\n\t   *\n\t   * @param {Socket} socket The socket instance that needs a transport\n\t   * @param {Function} fn The callback\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.ready = function (socket, fn) {\n\t    fn.call(this);\n\t  };\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io, global) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.Socket = Socket;\n\t\n\t  /**\n\t   * Create a new `Socket.IO client` which can establish a persistent\n\t   * connection with a Socket.IO enabled server.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  function Socket (options) {\n\t    this.options = {\n\t        port: 80\n\t      , secure: false\n\t      , document: 'document' in global ? document : false\n\t      , resource: 'socket.io'\n\t      , transports: io.transports\n\t      , 'connect timeout': 10000\n\t      , 'try multiple transports': true\n\t      , 'reconnect': true\n\t      , 'reconnection delay': 500\n\t      , 'reconnection limit': Infinity\n\t      , 'reopen delay': 3000\n\t      , 'max reconnection attempts': 10\n\t      , 'sync disconnect on unload': false\n\t      , 'auto connect': true\n\t      , 'flash policy port': 10843\n\t      , 'manualFlush': false\n\t    };\n\t\n\t    io.util.merge(this.options, options);\n\t\n\t    this.connected = false;\n\t    this.open = false;\n\t    this.connecting = false;\n\t    this.reconnecting = false;\n\t    this.namespaces = {};\n\t    this.buffer = [];\n\t    this.doBuffer = false;\n\t\n\t    if (this.options['sync disconnect on unload'] &&\n\t        (!this.isXDomain() || io.util.ua.hasCORS)) {\n\t      var self = this;\n\t      io.util.on(global, 'beforeunload', function () {\n\t        self.disconnectSync();\n\t      }, false);\n\t    }\n\t\n\t    if (this.options['auto connect']) {\n\t      this.connect();\n\t    }\n\t};\n\t\n\t  /**\n\t   * Apply EventEmitter mixin.\n\t   */\n\t\n\t  io.util.mixin(Socket, io.EventEmitter);\n\t\n\t  /**\n\t   * Returns a namespace listener/emitter for this socket\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  Socket.prototype.of = function (name) {\n\t    if (!this.namespaces[name]) {\n\t      this.namespaces[name] = new io.SocketNamespace(this, name);\n\t\n\t      if (name !== '') {\n\t        this.namespaces[name].packet({ type: 'connect' });\n\t      }\n\t    }\n\t\n\t    return this.namespaces[name];\n\t  };\n\t\n\t  /**\n\t   * Emits the given event to the Socket and all namespaces\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.publish = function () {\n\t    this.emit.apply(this, arguments);\n\t\n\t    var nsp;\n\t\n\t    for (var i in this.namespaces) {\n\t      if (this.namespaces.hasOwnProperty(i)) {\n\t        nsp = this.of(i);\n\t        nsp.$emit.apply(nsp, arguments);\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Performs the handshake\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  function empty () { };\n\t\n\t  Socket.prototype.handshake = function (fn) {\n\t    var self = this\n\t      , options = this.options;\n\t\n\t    function complete (data) {\n\t      if (data instanceof Error) {\n\t        self.connecting = false;\n\t        self.onError(data.message);\n\t      } else {\n\t        fn.apply(null, data.split(':'));\n\t      }\n\t    };\n\t\n\t    var url = [\n\t          'http' + (options.secure ? 's' : '') + ':/'\n\t        , options.host + ':' + options.port\n\t        , options.resource\n\t        , io.protocol\n\t        , io.util.query(this.options.query, 't=' + +new Date)\n\t      ].join('/');\n\t\n\t    if (this.isXDomain() && !io.util.ua.hasCORS) {\n\t      var insertAt = document.getElementsByTagName('script')[0]\n\t        , script = document.createElement('script');\n\t\n\t      script.src = url + '&jsonp=' + io.j.length;\n\t      insertAt.parentNode.insertBefore(script, insertAt);\n\t\n\t      io.j.push(function (data) {\n\t        complete(data);\n\t        script.parentNode.removeChild(script);\n\t      });\n\t    } else {\n\t      var xhr = io.util.request();\n\t\n\t      xhr.open('GET', url, true);\n\t      if (this.isXDomain()) {\n\t        xhr.withCredentials = true;\n\t      }\n\t      xhr.onreadystatechange = function () {\n\t        if (xhr.readyState == 4) {\n\t          xhr.onreadystatechange = empty;\n\t\n\t          if (xhr.status == 200) {\n\t            complete(xhr.responseText);\n\t          } else if (xhr.status == 403) {\n\t            self.onError(xhr.responseText);\n\t          } else {\n\t            self.connecting = false;            \n\t            !self.reconnecting && self.onError(xhr.responseText);\n\t          }\n\t        }\n\t      };\n\t      xhr.send(null);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Find an available transport based on the options supplied in the constructor.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.getTransport = function (override) {\n\t    var transports = override || this.transports, match;\n\t\n\t    for (var i = 0, transport; transport = transports[i]; i++) {\n\t      if (io.Transport[transport]\n\t        && io.Transport[transport].check(this)\n\t        && (!this.isXDomain() || io.Transport[transport].xdomainCheck(this))) {\n\t        return new io.Transport[transport](this, this.sessionid);\n\t      }\n\t    }\n\t\n\t    return null;\n\t  };\n\t\n\t  /**\n\t   * Connects to the server.\n\t   *\n\t   * @param {Function} [fn] Callback.\n\t   * @returns {io.Socket}\n\t   * @api public\n\t   */\n\t\n\t  Socket.prototype.connect = function (fn) {\n\t    if (this.connecting) {\n\t      return this;\n\t    }\n\t\n\t    var self = this;\n\t    self.connecting = true;\n\t    \n\t    this.handshake(function (sid, heartbeat, close, transports) {\n\t      self.sessionid = sid;\n\t      self.closeTimeout = close * 1000;\n\t      self.heartbeatTimeout = heartbeat * 1000;\n\t      if(!self.transports)\n\t          self.transports = self.origTransports = (transports ? io.util.intersect(\n\t              transports.split(',')\n\t            , self.options.transports\n\t          ) : self.options.transports);\n\t\n\t      self.setHeartbeatTimeout();\n\t\n\t      function connect (transports){\n\t        if (self.transport) self.transport.clearTimeouts();\n\t\n\t        self.transport = self.getTransport(transports);\n\t        if (!self.transport) return self.publish('connect_failed');\n\t\n\t        // once the transport is ready\n\t        self.transport.ready(self, function () {\n\t          self.connecting = true;\n\t          self.publish('connecting', self.transport.name);\n\t          self.transport.open();\n\t\n\t          if (self.options['connect timeout']) {\n\t            self.connectTimeoutTimer = setTimeout(function () {\n\t              if (!self.connected) {\n\t                self.connecting = false;\n\t\n\t                if (self.options['try multiple transports']) {\n\t                  var remaining = self.transports;\n\t\n\t                  while (remaining.length > 0 && remaining.splice(0,1)[0] !=\n\t                         self.transport.name) {}\n\t\n\t                    if (remaining.length){\n\t                      connect(remaining);\n\t                    } else {\n\t                      self.publish('connect_failed');\n\t                    }\n\t                }\n\t              }\n\t            }, self.options['connect timeout']);\n\t          }\n\t        });\n\t      }\n\t\n\t      connect(self.transports);\n\t\n\t      self.once('connect', function (){\n\t        clearTimeout(self.connectTimeoutTimer);\n\t\n\t        fn && typeof fn == 'function' && fn();\n\t      });\n\t    });\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Clears and sets a new heartbeat timeout using the value given by the\n\t   * server during the handshake.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.setHeartbeatTimeout = function () {\n\t    clearTimeout(this.heartbeatTimeoutTimer);\n\t    if(this.transport && !this.transport.heartbeats()) return;\n\t\n\t    var self = this;\n\t    this.heartbeatTimeoutTimer = setTimeout(function () {\n\t      self.transport.onClose();\n\t    }, this.heartbeatTimeout);\n\t  };\n\t\n\t  /**\n\t   * Sends a message.\n\t   *\n\t   * @param {Object} data packet.\n\t   * @returns {io.Socket}\n\t   * @api public\n\t   */\n\t\n\t  Socket.prototype.packet = function (data) {\n\t    if (this.connected && !this.doBuffer) {\n\t      this.transport.packet(data);\n\t    } else {\n\t      this.buffer.push(data);\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Sets buffer state\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.setBuffer = function (v) {\n\t    this.doBuffer = v;\n\t\n\t    if (!v && this.connected && this.buffer.length) {\n\t      if (!this.options['manualFlush']) {\n\t        this.flushBuffer();\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Flushes the buffer data over the wire.\n\t   * To be invoked manually when 'manualFlush' is set to true.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  Socket.prototype.flushBuffer = function() {\n\t    this.transport.payload(this.buffer);\n\t    this.buffer = [];\n\t  };\n\t  \n\t\n\t  /**\n\t   * Disconnect the established connect.\n\t   *\n\t   * @returns {io.Socket}\n\t   * @api public\n\t   */\n\t\n\t  Socket.prototype.disconnect = function () {\n\t    if (this.connected || this.connecting) {\n\t      if (this.open) {\n\t        this.of('').packet({ type: 'disconnect' });\n\t      }\n\t\n\t      // handle disconnection immediately\n\t      this.onDisconnect('booted');\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Disconnects the socket with a sync XHR.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.disconnectSync = function () {\n\t    // ensure disconnection\n\t    var xhr = io.util.request();\n\t    var uri = [\n\t        'http' + (this.options.secure ? 's' : '') + ':/'\n\t      , this.options.host + ':' + this.options.port\n\t      , this.options.resource\n\t      , io.protocol\n\t      , ''\n\t      , this.sessionid\n\t    ].join('/') + '/?disconnect=1';\n\t\n\t    xhr.open('GET', uri, false);\n\t    xhr.send(null);\n\t\n\t    // handle disconnection immediately\n\t    this.onDisconnect('booted');\n\t  };\n\t\n\t  /**\n\t   * Check if we need to use cross domain enabled transports. Cross domain would\n\t   * be a different port or different domain name.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.isXDomain = function () {\n\t\n\t    var port = global.location.port ||\n\t      ('https:' == global.location.protocol ? 443 : 80);\n\t\n\t    return this.options.host !== global.location.hostname \n\t      || this.options.port != port;\n\t  };\n\t\n\t  /**\n\t   * Called upon handshake.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.onConnect = function () {\n\t    if (!this.connected) {\n\t      this.connected = true;\n\t      this.connecting = false;\n\t      if (!this.doBuffer) {\n\t        // make sure to flush the buffer\n\t        this.setBuffer(false);\n\t      }\n\t      this.emit('connect');\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Called when the transport opens\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.onOpen = function () {\n\t    this.open = true;\n\t  };\n\t\n\t  /**\n\t   * Called when the transport closes.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.onClose = function () {\n\t    this.open = false;\n\t    clearTimeout(this.heartbeatTimeoutTimer);\n\t  };\n\t\n\t  /**\n\t   * Called when the transport first opens a connection\n\t   *\n\t   * @param text\n\t   */\n\t\n\t  Socket.prototype.onPacket = function (packet) {\n\t    this.of(packet.endpoint).onPacket(packet);\n\t  };\n\t\n\t  /**\n\t   * Handles an error.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.onError = function (err) {\n\t    if (err && err.advice) {\n\t      if (err.advice === 'reconnect' && (this.connected || this.connecting)) {\n\t        this.disconnect();\n\t        if (this.options.reconnect) {\n\t          this.reconnect();\n\t        }\n\t      }\n\t    }\n\t\n\t    this.publish('error', err && err.reason ? err.reason : err);\n\t  };\n\t\n\t  /**\n\t   * Called when the transport disconnects.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.onDisconnect = function (reason) {\n\t    var wasConnected = this.connected\n\t      , wasConnecting = this.connecting;\n\t\n\t    this.connected = false;\n\t    this.connecting = false;\n\t    this.open = false;\n\t\n\t    if (wasConnected || wasConnecting) {\n\t      this.transport.close();\n\t      this.transport.clearTimeouts();\n\t      if (wasConnected) {\n\t        this.publish('disconnect', reason);\n\t\n\t        if ('booted' != reason && this.options.reconnect && !this.reconnecting) {\n\t          this.reconnect();\n\t        }\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Called upon reconnection.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.reconnect = function () {\n\t    this.reconnecting = true;\n\t    this.reconnectionAttempts = 0;\n\t    this.reconnectionDelay = this.options['reconnection delay'];\n\t\n\t    var self = this\n\t      , maxAttempts = this.options['max reconnection attempts']\n\t      , tryMultiple = this.options['try multiple transports']\n\t      , limit = this.options['reconnection limit'];\n\t\n\t    function reset () {\n\t      if (self.connected) {\n\t        for (var i in self.namespaces) {\n\t          if (self.namespaces.hasOwnProperty(i) && '' !== i) {\n\t              self.namespaces[i].packet({ type: 'connect' });\n\t          }\n\t        }\n\t        self.publish('reconnect', self.transport.name, self.reconnectionAttempts);\n\t      }\n\t\n\t      clearTimeout(self.reconnectionTimer);\n\t\n\t      self.removeListener('connect_failed', maybeReconnect);\n\t      self.removeListener('connect', maybeReconnect);\n\t\n\t      self.reconnecting = false;\n\t\n\t      delete self.reconnectionAttempts;\n\t      delete self.reconnectionDelay;\n\t      delete self.reconnectionTimer;\n\t      delete self.redoTransports;\n\t\n\t      self.options['try multiple transports'] = tryMultiple;\n\t    };\n\t\n\t    function maybeReconnect () {\n\t      if (!self.reconnecting) {\n\t        return;\n\t      }\n\t\n\t      if (self.connected) {\n\t        return reset();\n\t      };\n\t\n\t      if (self.connecting && self.reconnecting) {\n\t        return self.reconnectionTimer = setTimeout(maybeReconnect, 1000);\n\t      }\n\t\n\t      if (self.reconnectionAttempts++ >= maxAttempts) {\n\t        if (!self.redoTransports) {\n\t          self.on('connect_failed', maybeReconnect);\n\t          self.options['try multiple transports'] = true;\n\t          self.transports = self.origTransports;\n\t          self.transport = self.getTransport();\n\t          self.redoTransports = true;\n\t          self.connect();\n\t        } else {\n\t          self.publish('reconnect_failed');\n\t          reset();\n\t        }\n\t      } else {\n\t        if (self.reconnectionDelay < limit) {\n\t          self.reconnectionDelay *= 2; // exponential back off\n\t        }\n\t\n\t        self.connect();\n\t        self.publish('reconnecting', self.reconnectionDelay, self.reconnectionAttempts);\n\t        self.reconnectionTimer = setTimeout(maybeReconnect, self.reconnectionDelay);\n\t      }\n\t    };\n\t\n\t    this.options['try multiple transports'] = false;\n\t    this.reconnectionTimer = setTimeout(maybeReconnect, this.reconnectionDelay);\n\t\n\t    this.on('connect', maybeReconnect);\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.SocketNamespace = SocketNamespace;\n\t\n\t  /**\n\t   * Socket namespace constructor.\n\t   *\n\t   * @constructor\n\t   * @api public\n\t   */\n\t\n\t  function SocketNamespace (socket, name) {\n\t    this.socket = socket;\n\t    this.name = name || '';\n\t    this.flags = {};\n\t    this.json = new Flag(this, 'json');\n\t    this.ackPackets = 0;\n\t    this.acks = {};\n\t  };\n\t\n\t  /**\n\t   * Apply EventEmitter mixin.\n\t   */\n\t\n\t  io.util.mixin(SocketNamespace, io.EventEmitter);\n\t\n\t  /**\n\t   * Copies emit since we override it\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  SocketNamespace.prototype.$emit = io.EventEmitter.prototype.emit;\n\t\n\t  /**\n\t   * Creates a new namespace, by proxying the request to the socket. This\n\t   * allows us to use the synax as we do on the server.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  SocketNamespace.prototype.of = function () {\n\t    return this.socket.of.apply(this.socket, arguments);\n\t  };\n\t\n\t  /**\n\t   * Sends a packet.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  SocketNamespace.prototype.packet = function (packet) {\n\t    packet.endpoint = this.name;\n\t    this.socket.packet(packet);\n\t    this.flags = {};\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Sends a message\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  SocketNamespace.prototype.send = function (data, fn) {\n\t    var packet = {\n\t        type: this.flags.json ? 'json' : 'message'\n\t      , data: data\n\t    };\n\t\n\t    if ('function' == typeof fn) {\n\t      packet.id = ++this.ackPackets;\n\t      packet.ack = true;\n\t      this.acks[packet.id] = fn;\n\t    }\n\t\n\t    return this.packet(packet);\n\t  };\n\t\n\t  /**\n\t   * Emits an event\n\t   *\n\t   * @api public\n\t   */\n\t  \n\t  SocketNamespace.prototype.emit = function (name) {\n\t    var args = Array.prototype.slice.call(arguments, 1)\n\t      , lastArg = args[args.length - 1]\n\t      , packet = {\n\t            type: 'event'\n\t          , name: name\n\t        };\n\t\n\t    if ('function' == typeof lastArg) {\n\t      packet.id = ++this.ackPackets;\n\t      packet.ack = 'data';\n\t      this.acks[packet.id] = lastArg;\n\t      args = args.slice(0, args.length - 1);\n\t    }\n\t\n\t    packet.args = args;\n\t\n\t    return this.packet(packet);\n\t  };\n\t\n\t  /**\n\t   * Disconnects the namespace\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  SocketNamespace.prototype.disconnect = function () {\n\t    if (this.name === '') {\n\t      this.socket.disconnect();\n\t    } else {\n\t      this.packet({ type: 'disconnect' });\n\t      this.$emit('disconnect');\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Handles a packet\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  SocketNamespace.prototype.onPacket = function (packet) {\n\t    var self = this;\n\t\n\t    function ack () {\n\t      self.packet({\n\t          type: 'ack'\n\t        , args: io.util.toArray(arguments)\n\t        , ackId: packet.id\n\t      });\n\t    };\n\t\n\t    switch (packet.type) {\n\t      case 'connect':\n\t        this.$emit('connect');\n\t        break;\n\t\n\t      case 'disconnect':\n\t        if (this.name === '') {\n\t          this.socket.onDisconnect(packet.reason || 'booted');\n\t        } else {\n\t          this.$emit('disconnect', packet.reason);\n\t        }\n\t        break;\n\t\n\t      case 'message':\n\t      case 'json':\n\t        var params = ['message', packet.data];\n\t\n\t        if (packet.ack == 'data') {\n\t          params.push(ack);\n\t        } else if (packet.ack) {\n\t          this.packet({ type: 'ack', ackId: packet.id });\n\t        }\n\t\n\t        this.$emit.apply(this, params);\n\t        break;\n\t\n\t      case 'event':\n\t        var params = [packet.name].concat(packet.args);\n\t\n\t        if (packet.ack == 'data')\n\t          params.push(ack);\n\t\n\t        this.$emit.apply(this, params);\n\t        break;\n\t\n\t      case 'ack':\n\t        if (this.acks[packet.ackId]) {\n\t          this.acks[packet.ackId].apply(this, packet.args);\n\t          delete this.acks[packet.ackId];\n\t        }\n\t        break;\n\t\n\t      case 'error':\n\t        if (packet.advice){\n\t          this.socket.onError(packet);\n\t        } else {\n\t          if (packet.reason == 'unauthorized') {\n\t            this.$emit('connect_failed', packet.reason);\n\t          } else {\n\t            this.$emit('error', packet.reason);\n\t          }\n\t        }\n\t        break;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Flag interface.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  function Flag (nsp, name) {\n\t    this.namespace = nsp;\n\t    this.name = name;\n\t  };\n\t\n\t  /**\n\t   * Send a message\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  Flag.prototype.send = function () {\n\t    this.namespace.flags[this.name] = true;\n\t    this.namespace.send.apply(this.namespace, arguments);\n\t  };\n\t\n\t  /**\n\t   * Emit an event\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  Flag.prototype.emit = function () {\n\t    this.namespace.flags[this.name] = true;\n\t    this.namespace.emit.apply(this.namespace, arguments);\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io, global) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.websocket = WS;\n\t\n\t  /**\n\t   * The WebSocket transport uses the HTML5 WebSocket API to establish an\n\t   * persistent connection with the Socket.IO server. This transport will also\n\t   * be inherited by the FlashSocket fallback as it provides a API compatible\n\t   * polyfill for the WebSockets.\n\t   *\n\t   * @constructor\n\t   * @extends {io.Transport}\n\t   * @api public\n\t   */\n\t\n\t  function WS (socket) {\n\t    io.Transport.apply(this, arguments);\n\t  };\n\t\n\t  /**\n\t   * Inherits from Transport.\n\t   */\n\t\n\t  io.util.inherit(WS, io.Transport);\n\t\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  WS.prototype.name = 'websocket';\n\t\n\t  /**\n\t   * Initializes a new `WebSocket` connection with the Socket.IO server. We attach\n\t   * all the appropriate listeners to handle the responses from the server.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  WS.prototype.open = function () {\n\t    var query = io.util.query(this.socket.options.query)\n\t      , self = this\n\t      , Socket\n\t\n\t\n\t    if (!Socket) {\n\t      Socket = global.MozWebSocket || global.WebSocket;\n\t    }\n\t\n\t    this.websocket = new Socket(this.prepareUrl() + query);\n\t\n\t    this.websocket.onopen = function () {\n\t      self.onOpen();\n\t      self.socket.setBuffer(false);\n\t    };\n\t    this.websocket.onmessage = function (ev) {\n\t      self.onData(ev.data);\n\t    };\n\t    this.websocket.onclose = function () {\n\t      self.onClose();\n\t      self.socket.setBuffer(true);\n\t    };\n\t    this.websocket.onerror = function (e) {\n\t      self.onError(e);\n\t    };\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Send a message to the Socket.IO server. The message will automatically be\n\t   * encoded in the correct message format.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  // Do to a bug in the current IDevices browser, we need to wrap the send in a \n\t  // setTimeout, when they resume from sleeping the browser will crash if \n\t  // we don't allow the browser time to detect the socket has been closed\n\t  if (io.util.ua.iDevice) {\n\t    WS.prototype.send = function (data) {\n\t      var self = this;\n\t      setTimeout(function() {\n\t         self.websocket.send(data);\n\t      },0);\n\t      return this;\n\t    };\n\t  } else {\n\t    WS.prototype.send = function (data) {\n\t      this.websocket.send(data);\n\t      return this;\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Payload\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  WS.prototype.payload = function (arr) {\n\t    for (var i = 0, l = arr.length; i < l; i++) {\n\t      this.packet(arr[i]);\n\t    }\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Disconnect the established `WebSocket` connection.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  WS.prototype.close = function () {\n\t    this.websocket.close();\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Handle the errors that `WebSocket` might be giving when we\n\t   * are attempting to connect or send messages.\n\t   *\n\t   * @param {Error} e The error.\n\t   * @api private\n\t   */\n\t\n\t  WS.prototype.onError = function (e) {\n\t    this.socket.onError(e);\n\t  };\n\t\n\t  /**\n\t   * Returns the appropriate scheme for the URI generation.\n\t   *\n\t   * @api private\n\t   */\n\t  WS.prototype.scheme = function () {\n\t    return this.socket.options.secure ? 'wss' : 'ws';\n\t  };\n\t\n\t  /**\n\t   * Checks if the browser has support for native `WebSockets` and that\n\t   * it's not the polyfill created for the FlashSocket transport.\n\t   *\n\t   * @return {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  WS.check = function () {\n\t    return ('WebSocket' in global && !('__addTask' in WebSocket))\n\t          || 'MozWebSocket' in global;\n\t  };\n\t\n\t  /**\n\t   * Check if the `WebSocket` transport support cross domain communications.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  WS.xdomainCheck = function () {\n\t    return true;\n\t  };\n\t\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.transports.push('websocket');\n\t\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.flashsocket = Flashsocket;\n\t\n\t  /**\n\t   * The FlashSocket transport. This is a API wrapper for the HTML5 WebSocket\n\t   * specification. It uses a .swf file to communicate with the server. If you want\n\t   * to serve the .swf file from a other server than where the Socket.IO script is\n\t   * coming from you need to use the insecure version of the .swf. More information\n\t   * about this can be found on the github page.\n\t   *\n\t   * @constructor\n\t   * @extends {io.Transport.websocket}\n\t   * @api public\n\t   */\n\t\n\t  function Flashsocket () {\n\t    io.Transport.websocket.apply(this, arguments);\n\t  };\n\t\n\t  /**\n\t   * Inherits from Transport.\n\t   */\n\t\n\t  io.util.inherit(Flashsocket, io.Transport.websocket);\n\t\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.prototype.name = 'flashsocket';\n\t\n\t  /**\n\t   * Disconnect the established `FlashSocket` connection. This is done by adding a \n\t   * new task to the FlashSocket. The rest will be handled off by the `WebSocket` \n\t   * transport.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.prototype.open = function () {\n\t    var self = this\n\t      , args = arguments;\n\t\n\t    WebSocket.__addTask(function () {\n\t      io.Transport.websocket.prototype.open.apply(self, args);\n\t    });\n\t    return this;\n\t  };\n\t  \n\t  /**\n\t   * Sends a message to the Socket.IO server. This is done by adding a new\n\t   * task to the FlashSocket. The rest will be handled off by the `WebSocket` \n\t   * transport.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.prototype.send = function () {\n\t    var self = this, args = arguments;\n\t    WebSocket.__addTask(function () {\n\t      io.Transport.websocket.prototype.send.apply(self, args);\n\t    });\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Disconnects the established `FlashSocket` connection.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.prototype.close = function () {\n\t    WebSocket.__tasks.length = 0;\n\t    io.Transport.websocket.prototype.close.call(this);\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * The WebSocket fall back needs to append the flash container to the body\n\t   * element, so we need to make sure we have access to it. Or defer the call\n\t   * until we are sure there is a body element.\n\t   *\n\t   * @param {Socket} socket The socket instance that needs a transport\n\t   * @param {Function} fn The callback\n\t   * @api private\n\t   */\n\t\n\t  Flashsocket.prototype.ready = function (socket, fn) {\n\t    function init () {\n\t      var options = socket.options\n\t        , port = options['flash policy port']\n\t        , path = [\n\t              'http' + (options.secure ? 's' : '') + ':/'\n\t            , options.host + ':' + options.port\n\t            , options.resource\n\t            , 'static/flashsocket'\n\t            , 'WebSocketMain' + (socket.isXDomain() ? 'Insecure' : '') + '.swf'\n\t          ];\n\t\n\t      // Only start downloading the swf file when the checked that this browser\n\t      // actually supports it\n\t      if (!Flashsocket.loaded) {\n\t        if (typeof WEB_SOCKET_SWF_LOCATION === 'undefined') {\n\t          // Set the correct file based on the XDomain settings\n\t          WEB_SOCKET_SWF_LOCATION = path.join('/');\n\t        }\n\t\n\t        if (port !== 843) {\n\t          WebSocket.loadFlashPolicyFile('xmlsocket://' + options.host + ':' + port);\n\t        }\n\t\n\t        WebSocket.__initialize();\n\t        Flashsocket.loaded = true;\n\t      }\n\t\n\t      fn.call(self);\n\t    }\n\t\n\t    var self = this;\n\t    if (document.body) return init();\n\t\n\t    io.util.load(init);\n\t  };\n\t\n\t  /**\n\t   * Check if the FlashSocket transport is supported as it requires that the Adobe\n\t   * Flash Player plug-in version `10.0.0` or greater is installed. And also check if\n\t   * the polyfill is correctly loaded.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.check = function () {\n\t    if (\n\t        typeof WebSocket == 'undefined'\n\t      || !('__initialize' in WebSocket) || !swfobject\n\t    ) return false;\n\t\n\t    return swfobject.getFlashPlayerVersion().major >= 10;\n\t  };\n\t\n\t  /**\n\t   * Check if the FlashSocket transport can be used as cross domain / cross origin \n\t   * transport. Because we can't see which type (secure or insecure) of .swf is used\n\t   * we will just return true.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.xdomainCheck = function () {\n\t    return true;\n\t  };\n\t\n\t  /**\n\t   * Disable AUTO_INITIALIZATION\n\t   */\n\t\n\t  if (typeof window != 'undefined') {\n\t    WEB_SOCKET_DISABLE_AUTO_INITIALIZATION = true;\n\t  }\n\t\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.transports.push('flashsocket');\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t/*\tSWFObject v2.2 <http://code.google.com/p/swfobject/> \n\t\tis released under the MIT License <http://www.opensource.org/licenses/mit-license.php> \n\t*/\n\tif ('undefined' != typeof window) {\n\tvar swfobject=function(){var D=\"undefined\",r=\"object\",S=\"Shockwave Flash\",W=\"ShockwaveFlash.ShockwaveFlash\",q=\"application/x-shockwave-flash\",R=\"SWFObjectExprInst\",x=\"onreadystatechange\",O=window,j=document,t=navigator,T=false,U=[h],o=[],N=[],I=[],l,Q,E,B,J=false,a=false,n,G,m=true,M=function(){var aa=typeof j.getElementById!=D&&typeof j.getElementsByTagName!=D&&typeof j.createElement!=D,ah=t.userAgent.toLowerCase(),Y=t.platform.toLowerCase(),ae=Y?/win/.test(Y):/win/.test(ah),ac=Y?/mac/.test(Y):/mac/.test(ah),af=/webkit/.test(ah)?parseFloat(ah.replace(/^.*webkit\\/(\\d+(\\.\\d+)?).*$/,\"$1\")):false,X=!+\"\\v1\",ag=[0,0,0],ab=null;if(typeof t.plugins!=D&&typeof t.plugins[S]==r){ab=t.plugins[S].description;if(ab&&!(typeof t.mimeTypes!=D&&t.mimeTypes[q]&&!t.mimeTypes[q].enabledPlugin)){T=true;X=false;ab=ab.replace(/^.*\\s+(\\S+\\s+\\S+$)/,\"$1\");ag[0]=parseInt(ab.replace(/^(.*)\\..*$/,\"$1\"),10);ag[1]=parseInt(ab.replace(/^.*\\.(.*)\\s.*$/,\"$1\"),10);ag[2]=/[a-zA-Z]/.test(ab)?parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/,\"$1\"),10):0}}else{if(typeof O[(['Active'].concat('Object').join('X'))]!=D){try{var ad=new window[(['Active'].concat('Object').join('X'))](W);if(ad){ab=ad.GetVariable(\"$version\");if(ab){X=true;ab=ab.split(\" \")[1].split(\",\");ag=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}}catch(Z){}}}return{w3:aa,pv:ag,wk:af,ie:X,win:ae,mac:ac}}(),k=function(){if(!M.w3){return}if((typeof j.readyState!=D&&j.readyState==\"complete\")||(typeof j.readyState==D&&(j.getElementsByTagName(\"body\")[0]||j.body))){f()}if(!J){if(typeof j.addEventListener!=D){j.addEventListener(\"DOMContentLoaded\",f,false)}if(M.ie&&M.win){j.attachEvent(x,function(){if(j.readyState==\"complete\"){j.detachEvent(x,arguments.callee);f()}});if(O==top){(function(){if(J){return}try{j.documentElement.doScroll(\"left\")}catch(X){setTimeout(arguments.callee,0);return}f()})()}}if(M.wk){(function(){if(J){return}if(!/loaded|complete/.test(j.readyState)){setTimeout(arguments.callee,0);return}f()})()}s(f)}}();function f(){if(J){return}try{var Z=j.getElementsByTagName(\"body\")[0].appendChild(C(\"span\"));Z.parentNode.removeChild(Z)}catch(aa){return}J=true;var X=U.length;for(var Y=0;Y<X;Y++){U[Y]()}}function K(X){if(J){X()}else{U[U.length]=X}}function s(Y){if(typeof O.addEventListener!=D){O.addEventListener(\"load\",Y,false)}else{if(typeof j.addEventListener!=D){j.addEventListener(\"load\",Y,false)}else{if(typeof O.attachEvent!=D){i(O,\"onload\",Y)}else{if(typeof O.onload==\"function\"){var X=O.onload;O.onload=function(){X();Y()}}else{O.onload=Y}}}}}function h(){if(T){V()}else{H()}}function V(){var X=j.getElementsByTagName(\"body\")[0];var aa=C(r);aa.setAttribute(\"type\",q);var Z=X.appendChild(aa);if(Z){var Y=0;(function(){if(typeof Z.GetVariable!=D){var ab=Z.GetVariable(\"$version\");if(ab){ab=ab.split(\" \")[1].split(\",\");M.pv=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}else{if(Y<10){Y++;setTimeout(arguments.callee,10);return}}X.removeChild(aa);Z=null;H()})()}else{H()}}function H(){var ag=o.length;if(ag>0){for(var af=0;af<ag;af++){var Y=o[af].id;var ab=o[af].callbackFn;var aa={success:false,id:Y};if(M.pv[0]>0){var ae=c(Y);if(ae){if(F(o[af].swfVersion)&&!(M.wk&&M.wk<312)){w(Y,true);if(ab){aa.success=true;aa.ref=z(Y);ab(aa)}}else{if(o[af].expressInstall&&A()){var ai={};ai.data=o[af].expressInstall;ai.width=ae.getAttribute(\"width\")||\"0\";ai.height=ae.getAttribute(\"height\")||\"0\";if(ae.getAttribute(\"class\")){ai.styleclass=ae.getAttribute(\"class\")}if(ae.getAttribute(\"align\")){ai.align=ae.getAttribute(\"align\")}var ah={};var X=ae.getElementsByTagName(\"param\");var ac=X.length;for(var ad=0;ad<ac;ad++){if(X[ad].getAttribute(\"name\").toLowerCase()!=\"movie\"){ah[X[ad].getAttribute(\"name\")]=X[ad].getAttribute(\"value\")}}P(ai,ah,Y,ab)}else{p(ae);if(ab){ab(aa)}}}}}else{w(Y,true);if(ab){var Z=z(Y);if(Z&&typeof Z.SetVariable!=D){aa.success=true;aa.ref=Z}ab(aa)}}}}}function z(aa){var X=null;var Y=c(aa);if(Y&&Y.nodeName==\"OBJECT\"){if(typeof Y.SetVariable!=D){X=Y}else{var Z=Y.getElementsByTagName(r)[0];if(Z){X=Z}}}return X}function A(){return !a&&F(\"6.0.65\")&&(M.win||M.mac)&&!(M.wk&&M.wk<312)}function P(aa,ab,X,Z){a=true;E=Z||null;B={success:false,id:X};var ae=c(X);if(ae){if(ae.nodeName==\"OBJECT\"){l=g(ae);Q=null}else{l=ae;Q=X}aa.id=R;if(typeof aa.width==D||(!/%$/.test(aa.width)&&parseInt(aa.width,10)<310)){aa.width=\"310\"}if(typeof aa.height==D||(!/%$/.test(aa.height)&&parseInt(aa.height,10)<137)){aa.height=\"137\"}j.title=j.title.slice(0,47)+\" - Flash Player Installation\";var ad=M.ie&&M.win?(['Active'].concat('').join('X')):\"PlugIn\",ac=\"MMredirectURL=\"+O.location.toString().replace(/&/g,\"%26\")+\"&MMplayerType=\"+ad+\"&MMdoctitle=\"+j.title;if(typeof ab.flashvars!=D){ab.flashvars+=\"&\"+ac}else{ab.flashvars=ac}if(M.ie&&M.win&&ae.readyState!=4){var Y=C(\"div\");X+=\"SWFObjectNew\";Y.setAttribute(\"id\",X);ae.parentNode.insertBefore(Y,ae);ae.style.display=\"none\";(function(){if(ae.readyState==4){ae.parentNode.removeChild(ae)}else{setTimeout(arguments.callee,10)}})()}u(aa,ab,X)}}function p(Y){if(M.ie&&M.win&&Y.readyState!=4){var X=C(\"div\");Y.parentNode.insertBefore(X,Y);X.parentNode.replaceChild(g(Y),X);Y.style.display=\"none\";(function(){if(Y.readyState==4){Y.parentNode.removeChild(Y)}else{setTimeout(arguments.callee,10)}})()}else{Y.parentNode.replaceChild(g(Y),Y)}}function g(ab){var aa=C(\"div\");if(M.win&&M.ie){aa.innerHTML=ab.innerHTML}else{var Y=ab.getElementsByTagName(r)[0];if(Y){var ad=Y.childNodes;if(ad){var X=ad.length;for(var Z=0;Z<X;Z++){if(!(ad[Z].nodeType==1&&ad[Z].nodeName==\"PARAM\")&&!(ad[Z].nodeType==8)){aa.appendChild(ad[Z].cloneNode(true))}}}}}return aa}function u(ai,ag,Y){var X,aa=c(Y);if(M.wk&&M.wk<312){return X}if(aa){if(typeof ai.id==D){ai.id=Y}if(M.ie&&M.win){var ah=\"\";for(var ae in ai){if(ai[ae]!=Object.prototype[ae]){if(ae.toLowerCase()==\"data\"){ag.movie=ai[ae]}else{if(ae.toLowerCase()==\"styleclass\"){ah+=' class=\"'+ai[ae]+'\"'}else{if(ae.toLowerCase()!=\"classid\"){ah+=\" \"+ae+'=\"'+ai[ae]+'\"'}}}}}var af=\"\";for(var ad in ag){if(ag[ad]!=Object.prototype[ad]){af+='<param name=\"'+ad+'\" value=\"'+ag[ad]+'\" />'}}aa.outerHTML='<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"'+ah+\">\"+af+\"</object>\";N[N.length]=ai.id;X=c(ai.id)}else{var Z=C(r);Z.setAttribute(\"type\",q);for(var ac in ai){if(ai[ac]!=Object.prototype[ac]){if(ac.toLowerCase()==\"styleclass\"){Z.setAttribute(\"class\",ai[ac])}else{if(ac.toLowerCase()!=\"classid\"){Z.setAttribute(ac,ai[ac])}}}}for(var ab in ag){if(ag[ab]!=Object.prototype[ab]&&ab.toLowerCase()!=\"movie\"){e(Z,ab,ag[ab])}}aa.parentNode.replaceChild(Z,aa);X=Z}}return X}function e(Z,X,Y){var aa=C(\"param\");aa.setAttribute(\"name\",X);aa.setAttribute(\"value\",Y);Z.appendChild(aa)}function y(Y){var X=c(Y);if(X&&X.nodeName==\"OBJECT\"){if(M.ie&&M.win){X.style.display=\"none\";(function(){if(X.readyState==4){b(Y)}else{setTimeout(arguments.callee,10)}})()}else{X.parentNode.removeChild(X)}}}function b(Z){var Y=c(Z);if(Y){for(var X in Y){if(typeof Y[X]==\"function\"){Y[X]=null}}Y.parentNode.removeChild(Y)}}function c(Z){var X=null;try{X=j.getElementById(Z)}catch(Y){}return X}function C(X){return j.createElement(X)}function i(Z,X,Y){Z.attachEvent(X,Y);I[I.length]=[Z,X,Y]}function F(Z){var Y=M.pv,X=Z.split(\".\");X[0]=parseInt(X[0],10);X[1]=parseInt(X[1],10)||0;X[2]=parseInt(X[2],10)||0;return(Y[0]>X[0]||(Y[0]==X[0]&&Y[1]>X[1])||(Y[0]==X[0]&&Y[1]==X[1]&&Y[2]>=X[2]))?true:false}function v(ac,Y,ad,ab){if(M.ie&&M.mac){return}var aa=j.getElementsByTagName(\"head\")[0];if(!aa){return}var X=(ad&&typeof ad==\"string\")?ad:\"screen\";if(ab){n=null;G=null}if(!n||G!=X){var Z=C(\"style\");Z.setAttribute(\"type\",\"text/css\");Z.setAttribute(\"media\",X);n=aa.appendChild(Z);if(M.ie&&M.win&&typeof j.styleSheets!=D&&j.styleSheets.length>0){n=j.styleSheets[j.styleSheets.length-1]}G=X}if(M.ie&&M.win){if(n&&typeof n.addRule==r){n.addRule(ac,Y)}}else{if(n&&typeof j.createTextNode!=D){n.appendChild(j.createTextNode(ac+\" {\"+Y+\"}\"))}}}function w(Z,X){if(!m){return}var Y=X?\"visible\":\"hidden\";if(J&&c(Z)){c(Z).style.visibility=Y}else{v(\"#\"+Z,\"visibility:\"+Y)}}function L(Y){var Z=/[\\\\\\\"<>\\.;]/;var X=Z.exec(Y)!=null;return X&&typeof encodeURIComponent!=D?encodeURIComponent(Y):Y}var d=function(){if(M.ie&&M.win){window.attachEvent(\"onunload\",function(){var ac=I.length;for(var ab=0;ab<ac;ab++){I[ab][0].detachEvent(I[ab][1],I[ab][2])}var Z=N.length;for(var aa=0;aa<Z;aa++){y(N[aa])}for(var Y in M){M[Y]=null}M=null;for(var X in swfobject){swfobject[X]=null}swfobject=null})}}();return{registerObject:function(ab,X,aa,Z){if(M.w3&&ab&&X){var Y={};Y.id=ab;Y.swfVersion=X;Y.expressInstall=aa;Y.callbackFn=Z;o[o.length]=Y;w(ab,false)}else{if(Z){Z({success:false,id:ab})}}},getObjectById:function(X){if(M.w3){return z(X)}},embedSWF:function(ab,ah,ae,ag,Y,aa,Z,ad,af,ac){var X={success:false,id:ah};if(M.w3&&!(M.wk&&M.wk<312)&&ab&&ah&&ae&&ag&&Y){w(ah,false);K(function(){ae+=\"\";ag+=\"\";var aj={};if(af&&typeof af===r){for(var al in af){aj[al]=af[al]}}aj.data=ab;aj.width=ae;aj.height=ag;var am={};if(ad&&typeof ad===r){for(var ak in ad){am[ak]=ad[ak]}}if(Z&&typeof Z===r){for(var ai in Z){if(typeof am.flashvars!=D){am.flashvars+=\"&\"+ai+\"=\"+Z[ai]}else{am.flashvars=ai+\"=\"+Z[ai]}}}if(F(Y)){var an=u(aj,am,ah);if(aj.id==ah){w(ah,true)}X.success=true;X.ref=an}else{if(aa&&A()){aj.data=aa;P(aj,am,ah,ac);return}else{w(ah,true)}}if(ac){ac(X)}})}else{if(ac){ac(X)}}},switchOffAutoHideShow:function(){m=false},ua:M,getFlashPlayerVersion:function(){return{major:M.pv[0],minor:M.pv[1],release:M.pv[2]}},hasFlashPlayerVersion:F,createSWF:function(Z,Y,X){if(M.w3){return u(Z,Y,X)}else{return undefined}},showExpressInstall:function(Z,aa,X,Y){if(M.w3&&A()){P(Z,aa,X,Y)}},removeSWF:function(X){if(M.w3){y(X)}},createCSS:function(aa,Z,Y,X){if(M.w3){v(aa,Z,Y,X)}},addDomLoadEvent:K,addLoadEvent:s,getQueryParamValue:function(aa){var Z=j.location.search||j.location.hash;if(Z){if(/\\?/.test(Z)){Z=Z.split(\"?\")[1]}if(aa==null){return L(Z)}var Y=Z.split(\"&\");for(var X=0;X<Y.length;X++){if(Y[X].substring(0,Y[X].indexOf(\"=\"))==aa){return L(Y[X].substring((Y[X].indexOf(\"=\")+1)))}}}return\"\"},expressInstallCallback:function(){if(a){var X=c(R);if(X&&l){X.parentNode.replaceChild(l,X);if(Q){w(Q,true);if(M.ie&&M.win){l.style.display=\"block\"}}if(E){E(B)}}a=false}}}}();\n\t}\n\t// Copyright: Hiroshi Ichikawa <http://gimite.net/en/>\n\t// License: New BSD License\n\t// Reference: http://dev.w3.org/html5/websockets/\n\t// Reference: http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol\n\t\n\t(function() {\n\t  \n\t  if ('undefined' == typeof window || window.WebSocket) return;\n\t\n\t  var console = window.console;\n\t  if (!console || !console.log || !console.error) {\n\t    console = {log: function(){ }, error: function(){ }};\n\t  }\n\t  \n\t  if (!swfobject.hasFlashPlayerVersion(\"10.0.0\")) {\n\t    console.error(\"Flash Player >= 10.0.0 is required.\");\n\t    return;\n\t  }\n\t  if (location.protocol == \"file:\") {\n\t    console.error(\n\t      \"WARNING: web-socket-js doesn't work in file:///... URL \" +\n\t      \"unless you set Flash Security Settings properly. \" +\n\t      \"Open the page via Web server i.e. http://...\");\n\t  }\n\t\n\t  /**\n\t   * This class represents a faux web socket.\n\t   * @param {string} url\n\t   * @param {array or string} protocols\n\t   * @param {string} proxyHost\n\t   * @param {int} proxyPort\n\t   * @param {string} headers\n\t   */\n\t  WebSocket = function(url, protocols, proxyHost, proxyPort, headers) {\n\t    var self = this;\n\t    self.__id = WebSocket.__nextId++;\n\t    WebSocket.__instances[self.__id] = self;\n\t    self.readyState = WebSocket.CONNECTING;\n\t    self.bufferedAmount = 0;\n\t    self.__events = {};\n\t    if (!protocols) {\n\t      protocols = [];\n\t    } else if (typeof protocols == \"string\") {\n\t      protocols = [protocols];\n\t    }\n\t    // Uses setTimeout() to make sure __createFlash() runs after the caller sets ws.onopen etc.\n\t    // Otherwise, when onopen fires immediately, onopen is called before it is set.\n\t    setTimeout(function() {\n\t      WebSocket.__addTask(function() {\n\t        WebSocket.__flash.create(\n\t            self.__id, url, protocols, proxyHost || null, proxyPort || 0, headers || null);\n\t      });\n\t    }, 0);\n\t  };\n\t\n\t  /**\n\t   * Send data to the web socket.\n\t   * @param {string} data  The data to send to the socket.\n\t   * @return {boolean}  True for success, false for failure.\n\t   */\n\t  WebSocket.prototype.send = function(data) {\n\t    if (this.readyState == WebSocket.CONNECTING) {\n\t      throw \"INVALID_STATE_ERR: Web Socket connection has not been established\";\n\t    }\n\t    // We use encodeURIComponent() here, because FABridge doesn't work if\n\t    // the argument includes some characters. We don't use escape() here\n\t    // because of this:\n\t    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Functions#escape_and_unescape_Functions\n\t    // But it looks decodeURIComponent(encodeURIComponent(s)) doesn't\n\t    // preserve all Unicode characters either e.g. \"\\uffff\" in Firefox.\n\t    // Note by wtritch: Hopefully this will not be necessary using ExternalInterface.  Will require\n\t    // additional testing.\n\t    var result = WebSocket.__flash.send(this.__id, encodeURIComponent(data));\n\t    if (result < 0) { // success\n\t      return true;\n\t    } else {\n\t      this.bufferedAmount += result;\n\t      return false;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Close this web socket gracefully.\n\t   */\n\t  WebSocket.prototype.close = function() {\n\t    if (this.readyState == WebSocket.CLOSED || this.readyState == WebSocket.CLOSING) {\n\t      return;\n\t    }\n\t    this.readyState = WebSocket.CLOSING;\n\t    WebSocket.__flash.close(this.__id);\n\t  };\n\t\n\t  /**\n\t   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n\t   *\n\t   * @param {string} type\n\t   * @param {function} listener\n\t   * @param {boolean} useCapture\n\t   * @return void\n\t   */\n\t  WebSocket.prototype.addEventListener = function(type, listener, useCapture) {\n\t    if (!(type in this.__events)) {\n\t      this.__events[type] = [];\n\t    }\n\t    this.__events[type].push(listener);\n\t  };\n\t\n\t  /**\n\t   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n\t   *\n\t   * @param {string} type\n\t   * @param {function} listener\n\t   * @param {boolean} useCapture\n\t   * @return void\n\t   */\n\t  WebSocket.prototype.removeEventListener = function(type, listener, useCapture) {\n\t    if (!(type in this.__events)) return;\n\t    var events = this.__events[type];\n\t    for (var i = events.length - 1; i >= 0; --i) {\n\t      if (events[i] === listener) {\n\t        events.splice(i, 1);\n\t        break;\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n\t   *\n\t   * @param {Event} event\n\t   * @return void\n\t   */\n\t  WebSocket.prototype.dispatchEvent = function(event) {\n\t    var events = this.__events[event.type] || [];\n\t    for (var i = 0; i < events.length; ++i) {\n\t      events[i](event);\n\t    }\n\t    var handler = this[\"on\" + event.type];\n\t    if (handler) handler(event);\n\t  };\n\t\n\t  /**\n\t   * Handles an event from Flash.\n\t   * @param {Object} flashEvent\n\t   */\n\t  WebSocket.prototype.__handleEvent = function(flashEvent) {\n\t    if (\"readyState\" in flashEvent) {\n\t      this.readyState = flashEvent.readyState;\n\t    }\n\t    if (\"protocol\" in flashEvent) {\n\t      this.protocol = flashEvent.protocol;\n\t    }\n\t    \n\t    var jsEvent;\n\t    if (flashEvent.type == \"open\" || flashEvent.type == \"error\") {\n\t      jsEvent = this.__createSimpleEvent(flashEvent.type);\n\t    } else if (flashEvent.type == \"close\") {\n\t      // TODO implement jsEvent.wasClean\n\t      jsEvent = this.__createSimpleEvent(\"close\");\n\t    } else if (flashEvent.type == \"message\") {\n\t      var data = decodeURIComponent(flashEvent.message);\n\t      jsEvent = this.__createMessageEvent(\"message\", data);\n\t    } else {\n\t      throw \"unknown event type: \" + flashEvent.type;\n\t    }\n\t    \n\t    this.dispatchEvent(jsEvent);\n\t  };\n\t  \n\t  WebSocket.prototype.__createSimpleEvent = function(type) {\n\t    if (document.createEvent && window.Event) {\n\t      var event = document.createEvent(\"Event\");\n\t      event.initEvent(type, false, false);\n\t      return event;\n\t    } else {\n\t      return {type: type, bubbles: false, cancelable: false};\n\t    }\n\t  };\n\t  \n\t  WebSocket.prototype.__createMessageEvent = function(type, data) {\n\t    if (document.createEvent && window.MessageEvent && !window.opera) {\n\t      var event = document.createEvent(\"MessageEvent\");\n\t      event.initMessageEvent(\"message\", false, false, data, null, null, window, null);\n\t      return event;\n\t    } else {\n\t      // IE and Opera, the latter one truncates the data parameter after any 0x00 bytes.\n\t      return {type: type, data: data, bubbles: false, cancelable: false};\n\t    }\n\t  };\n\t  \n\t  /**\n\t   * Define the WebSocket readyState enumeration.\n\t   */\n\t  WebSocket.CONNECTING = 0;\n\t  WebSocket.OPEN = 1;\n\t  WebSocket.CLOSING = 2;\n\t  WebSocket.CLOSED = 3;\n\t\n\t  WebSocket.__flash = null;\n\t  WebSocket.__instances = {};\n\t  WebSocket.__tasks = [];\n\t  WebSocket.__nextId = 0;\n\t  \n\t  /**\n\t   * Load a new flash security policy file.\n\t   * @param {string} url\n\t   */\n\t  WebSocket.loadFlashPolicyFile = function(url){\n\t    WebSocket.__addTask(function() {\n\t      WebSocket.__flash.loadManualPolicyFile(url);\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Loads WebSocketMain.swf and creates WebSocketMain object in Flash.\n\t   */\n\t  WebSocket.__initialize = function() {\n\t    if (WebSocket.__flash) return;\n\t    \n\t    if (WebSocket.__swfLocation) {\n\t      // For backword compatibility.\n\t      window.WEB_SOCKET_SWF_LOCATION = WebSocket.__swfLocation;\n\t    }\n\t    if (!window.WEB_SOCKET_SWF_LOCATION) {\n\t      console.error(\"[WebSocket] set WEB_SOCKET_SWF_LOCATION to location of WebSocketMain.swf\");\n\t      return;\n\t    }\n\t    var container = document.createElement(\"div\");\n\t    container.id = \"webSocketContainer\";\n\t    // Hides Flash box. We cannot use display: none or visibility: hidden because it prevents\n\t    // Flash from loading at least in IE. So we move it out of the screen at (-100, -100).\n\t    // But this even doesn't work with Flash Lite (e.g. in Droid Incredible). So with Flash\n\t    // Lite, we put it at (0, 0). This shows 1x1 box visible at left-top corner but this is\n\t    // the best we can do as far as we know now.\n\t    container.style.position = \"absolute\";\n\t    if (WebSocket.__isFlashLite()) {\n\t      container.style.left = \"0px\";\n\t      container.style.top = \"0px\";\n\t    } else {\n\t      container.style.left = \"-100px\";\n\t      container.style.top = \"-100px\";\n\t    }\n\t    var holder = document.createElement(\"div\");\n\t    holder.id = \"webSocketFlash\";\n\t    container.appendChild(holder);\n\t    document.body.appendChild(container);\n\t    // See this article for hasPriority:\n\t    // http://help.adobe.com/en_US/as3/mobile/WS4bebcd66a74275c36cfb8137124318eebc6-7ffd.html\n\t    swfobject.embedSWF(\n\t      WEB_SOCKET_SWF_LOCATION,\n\t      \"webSocketFlash\",\n\t      \"1\" /* width */,\n\t      \"1\" /* height */,\n\t      \"10.0.0\" /* SWF version */,\n\t      null,\n\t      null,\n\t      {hasPriority: true, swliveconnect : true, allowScriptAccess: \"always\"},\n\t      null,\n\t      function(e) {\n\t        if (!e.success) {\n\t          console.error(\"[WebSocket] swfobject.embedSWF failed\");\n\t        }\n\t      });\n\t  };\n\t  \n\t  /**\n\t   * Called by Flash to notify JS that it's fully loaded and ready\n\t   * for communication.\n\t   */\n\t  WebSocket.__onFlashInitialized = function() {\n\t    // We need to set a timeout here to avoid round-trip calls\n\t    // to flash during the initialization process.\n\t    setTimeout(function() {\n\t      WebSocket.__flash = document.getElementById(\"webSocketFlash\");\n\t      WebSocket.__flash.setCallerUrl(location.href);\n\t      WebSocket.__flash.setDebug(!!window.WEB_SOCKET_DEBUG);\n\t      for (var i = 0; i < WebSocket.__tasks.length; ++i) {\n\t        WebSocket.__tasks[i]();\n\t      }\n\t      WebSocket.__tasks = [];\n\t    }, 0);\n\t  };\n\t  \n\t  /**\n\t   * Called by Flash to notify WebSockets events are fired.\n\t   */\n\t  WebSocket.__onFlashEvent = function() {\n\t    setTimeout(function() {\n\t      try {\n\t        // Gets events using receiveEvents() instead of getting it from event object\n\t        // of Flash event. This is to make sure to keep message order.\n\t        // It seems sometimes Flash events don't arrive in the same order as they are sent.\n\t        var events = WebSocket.__flash.receiveEvents();\n\t        for (var i = 0; i < events.length; ++i) {\n\t          WebSocket.__instances[events[i].webSocketId].__handleEvent(events[i]);\n\t        }\n\t      } catch (e) {\n\t        console.error(e);\n\t      }\n\t    }, 0);\n\t    return true;\n\t  };\n\t  \n\t  // Called by Flash.\n\t  WebSocket.__log = function(message) {\n\t    console.log(decodeURIComponent(message));\n\t  };\n\t  \n\t  // Called by Flash.\n\t  WebSocket.__error = function(message) {\n\t    console.error(decodeURIComponent(message));\n\t  };\n\t  \n\t  WebSocket.__addTask = function(task) {\n\t    if (WebSocket.__flash) {\n\t      task();\n\t    } else {\n\t      WebSocket.__tasks.push(task);\n\t    }\n\t  };\n\t  \n\t  /**\n\t   * Test if the browser is running flash lite.\n\t   * @return {boolean} True if flash lite is running, false otherwise.\n\t   */\n\t  WebSocket.__isFlashLite = function() {\n\t    if (!window.navigator || !window.navigator.mimeTypes) {\n\t      return false;\n\t    }\n\t    var mimeType = window.navigator.mimeTypes[\"application/x-shockwave-flash\"];\n\t    if (!mimeType || !mimeType.enabledPlugin || !mimeType.enabledPlugin.filename) {\n\t      return false;\n\t    }\n\t    return mimeType.enabledPlugin.filename.match(/flashlite/i) ? true : false;\n\t  };\n\t  \n\t  if (!window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION) {\n\t    if (window.addEventListener) {\n\t      window.addEventListener(\"load\", function(){\n\t        WebSocket.__initialize();\n\t      }, false);\n\t    } else {\n\t      window.attachEvent(\"onload\", function(){\n\t        WebSocket.__initialize();\n\t      });\n\t    }\n\t  }\n\t  \n\t})();\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io, global) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  exports.XHR = XHR;\n\t\n\t  /**\n\t   * XHR constructor\n\t   *\n\t   * @costructor\n\t   * @api public\n\t   */\n\t\n\t  function XHR (socket) {\n\t    if (!socket) return;\n\t\n\t    io.Transport.apply(this, arguments);\n\t    this.sendBuffer = [];\n\t  };\n\t\n\t  /**\n\t   * Inherits from Transport.\n\t   */\n\t\n\t  io.util.inherit(XHR, io.Transport);\n\t\n\t  /**\n\t   * Establish a connection\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  XHR.prototype.open = function () {\n\t    this.socket.setBuffer(false);\n\t    this.onOpen();\n\t    this.get();\n\t\n\t    // we need to make sure the request succeeds since we have no indication\n\t    // whether the request opened or not until it succeeded.\n\t    this.setCloseTimeout();\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Check if we need to send data to the Socket.IO server, if we have data in our\n\t   * buffer we encode it and forward it to the `post` method.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  XHR.prototype.payload = function (payload) {\n\t    var msgs = [];\n\t\n\t    for (var i = 0, l = payload.length; i < l; i++) {\n\t      msgs.push(io.parser.encodePacket(payload[i]));\n\t    }\n\t\n\t    this.send(io.parser.encodePayload(msgs));\n\t  };\n\t\n\t  /**\n\t   * Send data to the Socket.IO server.\n\t   *\n\t   * @param data The message\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  XHR.prototype.send = function (data) {\n\t    this.post(data);\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Posts a encoded message to the Socket.IO server.\n\t   *\n\t   * @param {String} data A encoded message.\n\t   * @api private\n\t   */\n\t\n\t  function empty () { };\n\t\n\t  XHR.prototype.post = function (data) {\n\t    var self = this;\n\t    this.socket.setBuffer(true);\n\t\n\t    function stateChange () {\n\t      if (this.readyState == 4) {\n\t        this.onreadystatechange = empty;\n\t        self.posting = false;\n\t\n\t        if (this.status == 200){\n\t          self.socket.setBuffer(false);\n\t        } else {\n\t          self.onClose();\n\t        }\n\t      }\n\t    }\n\t\n\t    function onload () {\n\t      this.onload = empty;\n\t      self.socket.setBuffer(false);\n\t    };\n\t\n\t    this.sendXHR = this.request('POST');\n\t\n\t    if (global.XDomainRequest && this.sendXHR instanceof XDomainRequest) {\n\t      this.sendXHR.onload = this.sendXHR.onerror = onload;\n\t    } else {\n\t      this.sendXHR.onreadystatechange = stateChange;\n\t    }\n\t\n\t    this.sendXHR.send(data);\n\t  };\n\t\n\t  /**\n\t   * Disconnects the established `XHR` connection.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  XHR.prototype.close = function () {\n\t    this.onClose();\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Generates a configured XHR request\n\t   *\n\t   * @param {String} url The url that needs to be requested.\n\t   * @param {String} method The method the request should use.\n\t   * @returns {XMLHttpRequest}\n\t   * @api private\n\t   */\n\t\n\t  XHR.prototype.request = function (method) {\n\t    var req = io.util.request(this.socket.isXDomain())\n\t      , query = io.util.query(this.socket.options.query, 't=' + +new Date);\n\t\n\t    req.open(method || 'GET', this.prepareUrl() + query, true);\n\t\n\t    if (method == 'POST') {\n\t      try {\n\t        if (req.setRequestHeader) {\n\t          req.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n\t        } else {\n\t          // XDomainRequest\n\t          req.contentType = 'text/plain';\n\t        }\n\t      } catch (e) {}\n\t    }\n\t\n\t    return req;\n\t  };\n\t\n\t  /**\n\t   * Returns the scheme to use for the transport URLs.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  XHR.prototype.scheme = function () {\n\t    return this.socket.options.secure ? 'https' : 'http';\n\t  };\n\t\n\t  /**\n\t   * Check if the XHR transports are supported\n\t   *\n\t   * @param {Boolean} xdomain Check if we support cross domain requests.\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  XHR.check = function (socket, xdomain) {\n\t    try {\n\t      var request = io.util.request(xdomain),\n\t          usesXDomReq = (global.XDomainRequest && request instanceof XDomainRequest),\n\t          socketProtocol = (socket && socket.options && socket.options.secure ? 'https:' : 'http:'),\n\t          isXProtocol = (global.location && socketProtocol != global.location.protocol);\n\t      if (request && !(usesXDomReq && isXProtocol)) {\n\t        return true;\n\t      }\n\t    } catch(e) {}\n\t\n\t    return false;\n\t  };\n\t\n\t  /**\n\t   * Check if the XHR transport supports cross domain requests.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  XHR.xdomainCheck = function (socket) {\n\t    return XHR.check(socket, true);\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.htmlfile = HTMLFile;\n\t\n\t  /**\n\t   * The HTMLFile transport creates a `forever iframe` based transport\n\t   * for Internet Explorer. Regular forever iframe implementations will \n\t   * continuously trigger the browsers buzy indicators. If the forever iframe\n\t   * is created inside a `htmlfile` these indicators will not be trigged.\n\t   *\n\t   * @constructor\n\t   * @extends {io.Transport.XHR}\n\t   * @api public\n\t   */\n\t\n\t  function HTMLFile (socket) {\n\t    io.Transport.XHR.apply(this, arguments);\n\t  };\n\t\n\t  /**\n\t   * Inherits from XHR transport.\n\t   */\n\t\n\t  io.util.inherit(HTMLFile, io.Transport.XHR);\n\t\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  HTMLFile.prototype.name = 'htmlfile';\n\t\n\t  /**\n\t   * Creates a new Ac...eX `htmlfile` with a forever loading iframe\n\t   * that can be used to listen to messages. Inside the generated\n\t   * `htmlfile` a reference will be made to the HTMLFile transport.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  HTMLFile.prototype.get = function () {\n\t    this.doc = new window[(['Active'].concat('Object').join('X'))]('htmlfile');\n\t    this.doc.open();\n\t    this.doc.write('<html></html>');\n\t    this.doc.close();\n\t    this.doc.parentWindow.s = this;\n\t\n\t    var iframeC = this.doc.createElement('div');\n\t    iframeC.className = 'socketio';\n\t\n\t    this.doc.body.appendChild(iframeC);\n\t    this.iframe = this.doc.createElement('iframe');\n\t\n\t    iframeC.appendChild(this.iframe);\n\t\n\t    var self = this\n\t      , query = io.util.query(this.socket.options.query, 't='+ +new Date);\n\t\n\t    this.iframe.src = this.prepareUrl() + query;\n\t\n\t    io.util.on(window, 'unload', function () {\n\t      self.destroy();\n\t    });\n\t  };\n\t\n\t  /**\n\t   * The Socket.IO server will write script tags inside the forever\n\t   * iframe, this function will be used as callback for the incoming\n\t   * information.\n\t   *\n\t   * @param {String} data The message\n\t   * @param {document} doc Reference to the context\n\t   * @api private\n\t   */\n\t\n\t  HTMLFile.prototype._ = function (data, doc) {\n\t    // unescape all forward slashes. see GH-1251\n\t    data = data.replace(/\\\\\\//g, '/');\n\t    this.onData(data);\n\t    try {\n\t      var script = doc.getElementsByTagName('script')[0];\n\t      script.parentNode.removeChild(script);\n\t    } catch (e) { }\n\t  };\n\t\n\t  /**\n\t   * Destroy the established connection, iframe and `htmlfile`.\n\t   * And calls the `CollectGarbage` function of Internet Explorer\n\t   * to release the memory.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  HTMLFile.prototype.destroy = function () {\n\t    if (this.iframe){\n\t      try {\n\t        this.iframe.src = 'about:blank';\n\t      } catch(e){}\n\t\n\t      this.doc = null;\n\t      this.iframe.parentNode.removeChild(this.iframe);\n\t      this.iframe = null;\n\t\n\t      CollectGarbage();\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Disconnects the established connection.\n\t   *\n\t   * @returns {Transport} Chaining.\n\t   * @api public\n\t   */\n\t\n\t  HTMLFile.prototype.close = function () {\n\t    this.destroy();\n\t    return io.Transport.XHR.prototype.close.call(this);\n\t  };\n\t\n\t  /**\n\t   * Checks if the browser supports this transport. The browser\n\t   * must have an `Ac...eXObject` implementation.\n\t   *\n\t   * @return {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  HTMLFile.check = function (socket) {\n\t    if (typeof window != \"undefined\" && (['Active'].concat('Object').join('X')) in window){\n\t      try {\n\t        var a = new window[(['Active'].concat('Object').join('X'))]('htmlfile');\n\t        return a && io.Transport.XHR.check(socket);\n\t      } catch(e){}\n\t    }\n\t    return false;\n\t  };\n\t\n\t  /**\n\t   * Check if cross domain requests are supported.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  HTMLFile.xdomainCheck = function () {\n\t    // we can probably do handling for sub-domains, we should\n\t    // test that it's cross domain but a subdomain here\n\t    return false;\n\t  };\n\t\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.transports.push('htmlfile');\n\t\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io, global) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports['xhr-polling'] = XHRPolling;\n\t\n\t  /**\n\t   * The XHR-polling transport uses long polling XHR requests to create a\n\t   * \"persistent\" connection with the server.\n\t   *\n\t   * @constructor\n\t   * @api public\n\t   */\n\t\n\t  function XHRPolling () {\n\t    io.Transport.XHR.apply(this, arguments);\n\t  };\n\t\n\t  /**\n\t   * Inherits from XHR transport.\n\t   */\n\t\n\t  io.util.inherit(XHRPolling, io.Transport.XHR);\n\t\n\t  /**\n\t   * Merge the properties from XHR transport\n\t   */\n\t\n\t  io.util.merge(XHRPolling, io.Transport.XHR);\n\t\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  XHRPolling.prototype.name = 'xhr-polling';\n\t\n\t  /**\n\t   * Indicates whether heartbeats is enabled for this transport\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  XHRPolling.prototype.heartbeats = function () {\n\t    return false;\n\t  };\n\t\n\t  /** \n\t   * Establish a connection, for iPhone and Android this will be done once the page\n\t   * is loaded.\n\t   *\n\t   * @returns {Transport} Chaining.\n\t   * @api public\n\t   */\n\t\n\t  XHRPolling.prototype.open = function () {\n\t    var self = this;\n\t\n\t    io.Transport.XHR.prototype.open.call(self);\n\t    return false;\n\t  };\n\t\n\t  /**\n\t   * Starts a XHR request to wait for incoming messages.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  function empty () {};\n\t\n\t  XHRPolling.prototype.get = function () {\n\t    if (!this.isOpen) return;\n\t\n\t    var self = this;\n\t\n\t    function stateChange () {\n\t      if (this.readyState == 4) {\n\t        this.onreadystatechange = empty;\n\t\n\t        if (this.status == 200) {\n\t          self.onData(this.responseText);\n\t          self.get();\n\t        } else {\n\t          self.onClose();\n\t        }\n\t      }\n\t    };\n\t\n\t    function onload () {\n\t      this.onload = empty;\n\t      this.onerror = empty;\n\t      self.retryCounter = 1;\n\t      self.onData(this.responseText);\n\t      self.get();\n\t    };\n\t\n\t    function onerror () {\n\t      self.retryCounter ++;\n\t      if(!self.retryCounter || self.retryCounter > 3) {\n\t        self.onClose();  \n\t      } else {\n\t        self.get();\n\t      }\n\t    };\n\t\n\t    this.xhr = this.request();\n\t\n\t    if (global.XDomainRequest && this.xhr instanceof XDomainRequest) {\n\t      this.xhr.onload = onload;\n\t      this.xhr.onerror = onerror;\n\t    } else {\n\t      this.xhr.onreadystatechange = stateChange;\n\t    }\n\t\n\t    this.xhr.send(null);\n\t  };\n\t\n\t  /**\n\t   * Handle the unclean close behavior.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  XHRPolling.prototype.onClose = function () {\n\t    io.Transport.XHR.prototype.onClose.call(this);\n\t\n\t    if (this.xhr) {\n\t      this.xhr.onreadystatechange = this.xhr.onload = this.xhr.onerror = empty;\n\t      try {\n\t        this.xhr.abort();\n\t      } catch(e){}\n\t      this.xhr = null;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Webkit based browsers show a infinit spinner when you start a XHR request\n\t   * before the browsers onload event is called so we need to defer opening of\n\t   * the transport until the onload event is called. Wrapping the cb in our\n\t   * defer method solve this.\n\t   *\n\t   * @param {Socket} socket The socket instance that needs a transport\n\t   * @param {Function} fn The callback\n\t   * @api private\n\t   */\n\t\n\t  XHRPolling.prototype.ready = function (socket, fn) {\n\t    var self = this;\n\t\n\t    io.util.defer(function () {\n\t      fn.call(self);\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.transports.push('xhr-polling');\n\t\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io, global) {\n\t  /**\n\t   * There is a way to hide the loading indicator in Firefox. If you create and\n\t   * remove a iframe it will stop showing the current loading indicator.\n\t   * Unfortunately we can't feature detect that and UA sniffing is evil.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  var indicator = global.document && \"MozAppearance\" in\n\t    global.document.documentElement.style;\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports['jsonp-polling'] = JSONPPolling;\n\t\n\t  /**\n\t   * The JSONP transport creates an persistent connection by dynamically\n\t   * inserting a script tag in the page. This script tag will receive the\n\t   * information of the Socket.IO server. When new information is received\n\t   * it creates a new script tag for the new data stream.\n\t   *\n\t   * @constructor\n\t   * @extends {io.Transport.xhr-polling}\n\t   * @api public\n\t   */\n\t\n\t  function JSONPPolling (socket) {\n\t    io.Transport['xhr-polling'].apply(this, arguments);\n\t\n\t    this.index = io.j.length;\n\t\n\t    var self = this;\n\t\n\t    io.j.push(function (msg) {\n\t      self._(msg);\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Inherits from XHR polling transport.\n\t   */\n\t\n\t  io.util.inherit(JSONPPolling, io.Transport['xhr-polling']);\n\t\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  JSONPPolling.prototype.name = 'jsonp-polling';\n\t\n\t  /**\n\t   * Posts a encoded message to the Socket.IO server using an iframe.\n\t   * The iframe is used because script tags can create POST based requests.\n\t   * The iframe is positioned outside of the view so the user does not\n\t   * notice it's existence.\n\t   *\n\t   * @param {String} data A encoded message.\n\t   * @api private\n\t   */\n\t\n\t  JSONPPolling.prototype.post = function (data) {\n\t    var self = this\n\t      , query = io.util.query(\n\t             this.socket.options.query\n\t          , 't='+ (+new Date) + '&i=' + this.index\n\t        );\n\t\n\t    if (!this.form) {\n\t      var form = document.createElement('form')\n\t        , area = document.createElement('textarea')\n\t        , id = this.iframeId = 'socketio_iframe_' + this.index\n\t        , iframe;\n\t\n\t      form.className = 'socketio';\n\t      form.style.position = 'absolute';\n\t      form.style.top = '0px';\n\t      form.style.left = '0px';\n\t      form.style.display = 'none';\n\t      form.target = id;\n\t      form.method = 'POST';\n\t      form.setAttribute('accept-charset', 'utf-8');\n\t      area.name = 'd';\n\t      form.appendChild(area);\n\t      document.body.appendChild(form);\n\t\n\t      this.form = form;\n\t      this.area = area;\n\t    }\n\t\n\t    this.form.action = this.prepareUrl() + query;\n\t\n\t    function complete () {\n\t      initIframe();\n\t      self.socket.setBuffer(false);\n\t    };\n\t\n\t    function initIframe () {\n\t      if (self.iframe) {\n\t        self.form.removeChild(self.iframe);\n\t      }\n\t\n\t      try {\n\t        // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n\t        iframe = document.createElement('<iframe name=\"'+ self.iframeId +'\">');\n\t      } catch (e) {\n\t        iframe = document.createElement('iframe');\n\t        iframe.name = self.iframeId;\n\t      }\n\t\n\t      iframe.id = self.iframeId;\n\t\n\t      self.form.appendChild(iframe);\n\t      self.iframe = iframe;\n\t    };\n\t\n\t    initIframe();\n\t\n\t    // we temporarily stringify until we figure out how to prevent\n\t    // browsers from turning `\\n` into `\\r\\n` in form inputs\n\t    this.area.value = io.JSON.stringify(data);\n\t\n\t    try {\n\t      this.form.submit();\n\t    } catch(e) {}\n\t\n\t    if (this.iframe.attachEvent) {\n\t      iframe.onreadystatechange = function () {\n\t        if (self.iframe.readyState == 'complete') {\n\t          complete();\n\t        }\n\t      };\n\t    } else {\n\t      this.iframe.onload = complete;\n\t    }\n\t\n\t    this.socket.setBuffer(true);\n\t  };\n\t\n\t  /**\n\t   * Creates a new JSONP poll that can be used to listen\n\t   * for messages from the Socket.IO server.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  JSONPPolling.prototype.get = function () {\n\t    var self = this\n\t      , script = document.createElement('script')\n\t      , query = io.util.query(\n\t             this.socket.options.query\n\t          , 't='+ (+new Date) + '&i=' + this.index\n\t        );\n\t\n\t    if (this.script) {\n\t      this.script.parentNode.removeChild(this.script);\n\t      this.script = null;\n\t    }\n\t\n\t    script.async = true;\n\t    script.src = this.prepareUrl() + query;\n\t    script.onerror = function () {\n\t      self.onClose();\n\t    };\n\t\n\t    var insertAt = document.getElementsByTagName('script')[0];\n\t    insertAt.parentNode.insertBefore(script, insertAt);\n\t    this.script = script;\n\t\n\t    if (indicator) {\n\t      setTimeout(function () {\n\t        var iframe = document.createElement('iframe');\n\t        document.body.appendChild(iframe);\n\t        document.body.removeChild(iframe);\n\t      }, 100);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Callback function for the incoming message stream from the Socket.IO server.\n\t   *\n\t   * @param {String} data The message\n\t   * @api private\n\t   */\n\t\n\t  JSONPPolling.prototype._ = function (msg) {\n\t    this.onData(msg);\n\t    if (this.isOpen) {\n\t      this.get();\n\t    }\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * The indicator hack only works after onload\n\t   *\n\t   * @param {Socket} socket The socket instance that needs a transport\n\t   * @param {Function} fn The callback\n\t   * @api private\n\t   */\n\t\n\t  JSONPPolling.prototype.ready = function (socket, fn) {\n\t    var self = this;\n\t    if (!indicator) return fn.call(this);\n\t\n\t    io.util.load(function () {\n\t      fn.call(self);\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Checks if browser supports this transport.\n\t   *\n\t   * @return {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  JSONPPolling.check = function () {\n\t    return 'document' in global;\n\t  };\n\t\n\t  /**\n\t   * Check if cross domain requests are supported\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  JSONPPolling.xdomainCheck = function () {\n\t    return true;\n\t  };\n\t\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.transports.push('jsonp-polling');\n\t\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\t\n\tif (true) {\n\t  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () { return io; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}\n\t})();\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(25)(module)))\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** respoke.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 3a9745f6b4fb5203bd1c\n **/","module.exports = require('./respoke/respoke');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\nvar log = respoke.log;\n\n/**\n * A direct connection via RTCDataChannel, including state and path negotation.\n * @class respoke.DirectConnection\n * @constructor\n * @augments respoke.EventEmitter\n * @param {string} params\n * @param {string} params.instanceId - client id\n * @param {respoke.Call} params.call - The call that is handling state for this direct connection.\n * @param {boolean} [params.forceTurn] - If true, force the data to flow through relay servers instead of allowing\n * it to flow peer-to-peer. The relay acts like a blind proxy.\n * @param {string} params.connectionId - The connection ID of the remoteEndpoint.\n * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n * @param {function} params.signalReport - Signaling action from SignalingChannel.\n * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n * @param {respoke.DirectConnection.onStart} [params.onStart] - Callback for when setup of the direct connection\n * begins. The direct connection will not be open yet.\n * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors that happen during\n * direct connection setup or media renegotiation.\n * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for closing the direct connection.\n * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for opening the direct connection.\n * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the request\n * for a direct connection and setup is about to begin.\n * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for incoming messages. Not usually\n * necessary to listen to this event if you are already listening to respoke.Endpoint#message.\n * @returns {respoke.DirectConnection}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Client\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n\n    /**\n     * A name to identify this class\n     * @memberof! respoke.DirectConnection\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.DirectConnection';\n    /**\n     * The unique identifier of the direct connection.\n     *\n     * @memberof! respoke.DirectConnection\n     * @name id\n     * @type {string}\n     */\n    that.id = respoke.makeGUID();\n\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name call\n     * @type {respoke.Call}\n     */\n    if (!that.call.caller) {\n        that.call.caller = false;\n    }\n\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name dataChannel\n     * @type {RTCDataChannel}\n     * @private\n     */\n    var dataChannel = null;\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name client\n     * @type {respoke.Client}\n     * @private\n     */\n    var client = respoke.getClient(instanceId);\n\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name pc\n     * @type {RTCPeerConnection}\n     * @private\n     */\n    var pc = params.pc;\n    delete params.pc;\n\n    /**\n     * When the datachannel is availble, we need to attach the callbacks. The event this function is attached to\n     * only fires for the callee.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.listenDataChannel\n     * @param {respoke.Event} evt\n     * @private\n     */\n    function listenDataChannel(evt) {\n        dataChannel = evt.channel;\n        dataChannel.onerror = onDataChannelError;\n        dataChannel.onmessage = onDataChannelMessage;\n        if (dataChannel.readyState === 'open') {\n            dataChannel.onopen = null;\n            onDataChannelOpen();\n        } else {\n            dataChannel.onopen = onDataChannelOpen;\n        }\n    }\n\n    /**\n     * Register any event listeners passed in as callbacks\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.saveParameters\n     * @param {object} params\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for when the direct connection\n     * is closed.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for when the direct connection\n     * is open.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for incoming messages.\n     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n     * connection.\n     * @param {respoke.DirectConnection.onStart} [params.onStart] - Callback for when the direct connection\n     * is being set up. The direct connection will not be open yet.\n     * @param {boolean} [params.forceTurn] - If true, force the data to flow through relay servers instead of allowing\n     * it to flow peer-to-peer. The relay acts like a blind proxy.\n     * @private\n     */\n    function saveParameters(params) {\n        /**\n         * The direct connection is open.\n         * @event respoke.DirectConnection#open\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.listen('open', params.onOpen);\n        /**\n         * The direct connection is closed.\n         * @event respoke.DirectConnection#close\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.listen('close', params.onClose);\n        /**\n         * Incoming message on this direct connection.\n         * @event respoke.DirectConnection#message\n         * @type {respoke.Event}\n         * @property {respoke.TextMessage} message\n         * @property {respoke.Endpoint} endpoint\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.listen('message', params.onMessage);\n        // documented elsewhere\n        that.listen('start', params.onStart);\n        /**\n         * An error occurred while setting up the direct connection.\n         * @event respoke.DirectConnection#error\n         * @type {respoke.Event}\n         * @property {string} reason - A human-readable description of the error.\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.listen('error', params.onError);\n        pc.listen('direct-connection', listenDataChannel, true);\n        pc.listen('stats', function fireStats(evt) {\n            /**\n             * This event is fired every time statistical information about the direct connection\n             * becomes available.\n             * @event respoke.DirectConnection#stats\n             * @type {respoke.Event}\n             * @property {object} stats - an object with stats in it.\n             * @property {respoke.DirectConnection} target\n             * @property {string} name - the event name.\n             */\n            that.fire('stats', {stats: evt.stats});\n        }, true);\n\n    }\n    saveParameters(params);\n\n    delete that.onOpen;\n    delete that.onClose;\n    delete that.onMessage;\n\n    /**\n     * Return media stats. Since we have to wait for both the answer and offer to be available before starting\n     * statistics, we'll return a promise for the stats object.\n     *\n     *     directConnection.getStats({\n     *         onStats: function (evt) {\n     *             console.log('Stats', evt.stats);\n     *         }\n     *     }).done(function () {\n     *         console.log('Stats started.');\n     *     }, function (err) {\n     *         console.log('Direct connection is already closed.');\n     *     });\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.getStats\n     * @returns {Promise<object>|undefined}\n     * @param {object} params\n     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive the\n     * stats if the Respoke stats module is loaded. If no callback is provided, the connection's report will\n     * contain stats but the developer will not receive them on the client-side.\n     * @param {respoke.DirectConnection.statsSuccessHandler} [params.onSuccess] - Success handler for this\n     * invocation of this method only.\n     * @param {respoke.DirectConnection.errorHandler} [params.onError] - Error handler for this invocation of\n     * this method only.\n     */\n    that.getStats = function (params) {\n        if (pc && pc.getStats) {\n            that.listen('stats', params.onStats);\n            delete params.onStats;\n            return pc.getStats(params);\n        }\n        return null;\n    };\n\n    if (!respoke.MediaStats) {\n        delete that.getStats;\n    }\n\n    /**\n     * Detect datachannel errors for internal state.\n     * @memberof! respoke.DirectConnection\n     * @private\n     * @method respoke.DirectConnection.onDataChannelError\n     */\n    function onDataChannelError(error) {\n        /**\n         * Indicate that an error has occurred setting up the direct connection.\n         * @event respoke.DirectConnection#error\n         * @type {respoke.Event}\n         * @property {object} error\n         * @property {respoke.DirectConnection} directConnection\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('error', {\n            error: error\n        });\n        that.close();\n    }\n\n    /**\n     * Receive and route messages to the Endpoint.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.onDataChannelMessage\n     * @private\n     * @param {MessageEvent}\n     * @fires respoke.DirectConnection#message\n     */\n    function onDataChannelMessage(evt) {\n        var message;\n        try {\n            message = JSON.parse(evt.data);\n        } catch (e) {\n            message = evt.data;\n        }\n        /**\n         * A message has been received over the direct connection.\n         * @event respoke.Endpoint#message\n         * @type {respoke.Event}\n         * @property {object} message\n         * @property {respoke.DirectConnection} directConnection\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.call.remoteEndpoint.fire('message', {\n            message: message,\n            directConnection: that\n        });\n        /**\n         * A message has been received over the direct connection.\n         * @event respoke.DirectConnection#message\n         * @type {respoke.Event}\n         * @property {object} message\n         * @property {respoke.Endpoint} endpoint\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('message', {\n            message: message,\n            endpoint: that.call.remoteEndpoint\n        });\n    }\n\n    /**\n     * Detect when the channel is open.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.onDataChannelOpen\n     * @private\n     * @param {MessageEvent}\n     * @fires respoke.DirectConnection#open\n     */\n    function onDataChannelOpen(evt) {\n        //dataChannel = evt.target || evt.channel;\n        /**\n         * The direct connection is open.\n         * @event respoke.DirectConnection#open\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('open');\n    }\n\n    /**\n     * Detect when the channel is closed.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.onDataChannelClose\n     * @private\n     * @param {MessageEvent}\n     * @fires respoke.DirectConnection#close\n     */\n    function onDataChannelClose(evt) {\n        //dataChannel = evt.target || evt.channel;\n        /**\n         * The direct connection is closed.\n         * @event respoke.DirectConnection#close\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('close');\n    }\n\n    /**\n     * Create the datachannel. For the caller, set up all the handlers we'll need to keep track of the\n     * datachannel's state and to receive messages.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.createDataChannel\n     * @private\n     */\n    function createDataChannel() {\n        dataChannel = pc.createDataChannel(\"respokeDataChannel\");\n        dataChannel.binaryType = 'arraybuffer';\n        dataChannel.onerror = onDataChannelError;\n        dataChannel.onmessage = onDataChannelMessage;\n        dataChannel.onopen = onDataChannelOpen;\n\n        /**\n         * The direct connection setup has begun. This does NOT mean it's ready to send messages yet. Listen to\n         * DirectConnection#open for that notification.\n         * @event respoke.DirectConnection#start\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('start');\n    }\n\n    /**\n     * Start the process of obtaining media. saveParameters will only be meaningful for the callee,\n     * since the library calls this method for the caller. Developers will use this method to pass in\n     * callbacks for the callee.\n     *\n     *     directConnection.accept({\n     *         onOpen: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.accept\n     * @fires respoke.DirectConnection#accept\n     * @param {object} params\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen]\n     * @param {respoke.DirectConnection.onClose} [params.onClose]\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage]\n     */\n    that.accept = function (params) {\n        params = params || {};\n        log.debug('DirectConnection.accept');\n        saveParameters(params);\n\n        log.debug(\"I am \" + (pc.state.caller ? '' : 'not ') + \"the caller.\");\n\n        if (pc.state.caller === true) {\n            createDataChannel();\n        }\n        that.call.answer();\n\n        /**\n         * The request to open a direct connection has been accepted.\n         * @event respoke.DirectConnection#accept\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('accept');\n    };\n\n    /**\n     * Tear down the connection.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.close\n     * @fires respoke.DirectConnection#close\n     */\n    that.close = function (params) {\n        params = params || {};\n        log.debug(\"DirectConnection.close\");\n\n        if (that.call && that.call.remoteEndpoint) {\n            that.call.remoteEndpoint.directConnection = null;\n        }\n\n        if (dataChannel) {\n            dataChannel.close();\n        }\n\n        /**\n         * The direct connection has been closed.\n         * @event respoke.DirectConnection#close\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('close');\n\n        that.ignore();\n\n        if (that.call && params.skipRemove !== true) {\n            that.call.removeDirectConnection();\n        }\n\n        dataChannel = null;\n        that.call = null;\n        pc = null;\n    };\n\n    /**\n     * Send a message over the datachannel in the form of a JSON-encoded plain old JavaScript object. Only one\n     * attribute may be given: either a string 'message' or an object 'object'.\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     *\n     *     directConnection.sendMessage({\n     *         message: \"And they say HTTP is stateless!\"\n     *     });\n     *\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.sendMessage\n     * @param {object} params\n     * @param {string} [params.message] - The message to send.\n     * @param {object} [params.object] - An object to send.\n     * @param {respoke.DirectConnection.sendHandler} [params.onSuccess] - Success handler for this invocation\n     * of this method only.\n     * @param {respoke.DirectConnection.errorHandler} [params.onError] - Error handler for this invocation\n     * of this method only.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n        if (that.isActive()) {\n            dataChannel.send(JSON.stringify(params.object || {\n                message: params.message\n            }));\n            deferred.resolve();\n        } else {\n            deferred.reject(new Error(\"dataChannel not in an open state.\"));\n        }\n        return retVal;\n    };\n\n    /**\n     * Expose close as reject for approve/reject workflow.\n     *\n     *     client.listen('direct-connection, function (evt) {\n     *         if (iDontLikeThisPerson()) {\n     *             evt.directConnection.reject();\n     *         }\n     *     });\n     *\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.reject\n     * @param {boolean} signal - Optional flag to indicate whether to send or suppress sending\n     * a hangup signal to the remote side.\n     */\n    that.reject = that.close;\n\n    /**\n     * Indicate whether a datachannel is being setup or is in progress.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.isActive\n     * @returns {boolean}\n     */\n    that.isActive = function () {\n        // Why does pc.iceConnectionState not transition into 'connected' even though media is flowing?\n        //return (pc && pc.isActive() && dataChannel && dataChannel.readyState === 'open');\n        return (dataChannel && dataChannel.readyState === 'open');\n    };\n\n    return that;\n}; // End respoke.DirectConnection\n\n/**\n * Called when the direct connection is closed.  This callback is called every time respoke.DirectConnection#close\n * fires.\n * @callback respoke.DirectConnection.onClose\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Called when the setup of the direct connection has begun. The direct connection will not be open yet. This\n * callback is called every time respoke.DirectConnection#start fires.\n * @callback respoke.DirectConnection.onStart\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Called when the direct connection is opened.  This callback is called every time respoke.DirectConnection#open\n * fires.\n * @callback respoke.DirectConnection.onOpen\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Called when a message is received over the direct connection.  This callback is called every time\n * respoke.DirectConnection#message fires.\n * @callback respoke.DirectConnection.onMessage\n * @param {respoke.Event} evt\n * @param {object} evt.message\n * @param {respoke.Endpoint} evt.endpoint\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Handle an error that resulted from a specific method call. This handler will not fire more than once.\n * @callback respoke.DirectConnection.errorHandler\n * @param {Error} err\n */\n/**\n * When a call is in setup or media renegotiation happens. This callback will be called every time\n * respoke.DirectConnection#error.\n * @callback respoke.DirectConnection.onError\n * @param {respoke.Event} evt\n * @param {boolean} evt.reason - A human-readable description of the error.\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Called when the callee accepts the direct connection. This callback is called every time\n * respoke.DirectConnection#accept is fired.\n * @callback respoke.DirectConnection.onAccept\n * @param {respoke.Event} evt\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Handle the successful kick-off of stats on a call.\n * @callback respoke.DirectConnection.statsSuccessHandler\n * @param {respoke.Event} evt\n * @param {object} evt.stats - an object with stats in it.\n * @param {respoke.DirectConnection} evt.target\n * @param {string} evt.name - the event name.\n */\n/**\n * Handle sending successfully.\n * @callback respoke.DirectConnection.sendHandler\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/directConnection.js\n ** module id = 1\n ** module chunks = 0\n **/","/*!\n *  Copyright (c) 2014 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the same directory as\n *  this source file.\n * @ignore\n */\n\n/* More information about these options at jshint.com/docs/options */\n\n/* jshint browser: true, camelcase: true, curly: true, devel: true,\neqeqeq: true, forin: false, globalstrict: true, quotmark: single,\nundef: true, unused: strict */\n\n/* global mozRTCIceCandidate, mozRTCPeerConnection,\nmozRTCSessionDescription, webkitRTCPeerConnection */\n\n/* exported trace */\n\n'use strict';\n\nvar RTCPeerConnection = null;\nvar getUserMedia = null;\nvar attachMediaStream = null;\nvar reattachMediaStream = null;\nvar webrtcDetectedBrowser = null;\nvar webrtcDetectedVersion = null;\n\nfunction trace(text) {\n  // This function is used for logging.\n  if (text[text.length - 1] === '\\n') {\n    text = text.substring(0, text.length - 1);\n  }\n  console.log((window.performance.now() / 1000).toFixed(3) + ': ' + text);\n}\n\nfunction maybeFixConfiguration(pcConfig) {\n  if (!pcConfig) {\n    return;\n  }\n  for (var i = 0; i < pcConfig.iceServers.length; i++) {\n    if (pcConfig.iceServers[i].hasOwnProperty('urls')) {\n      pcConfig.iceServers[i].url = pcConfig.iceServers[i].urls;\n      delete pcConfig.iceServers[i].urls;\n    }\n  }\n}\n\nif (navigator.mozGetUserMedia) {\n  console.log('This appears to be Firefox');\n\n  webrtcDetectedBrowser = 'firefox';\n\n  webrtcDetectedVersion =\n    parseInt(navigator.userAgent.match(/Firefox\\/([0-9]+)\\./)[1], 10);\n\n  // The RTCPeerConnection object.\n  RTCPeerConnection = function(pcConfig, pcConstraints) {\n    // .urls is not supported in FF yet.\n    maybeFixConfiguration(pcConfig);\n    return new mozRTCPeerConnection(pcConfig, pcConstraints);\n  };\n\n  // The RTCSessionDescription object.\n  window.RTCSessionDescription = mozRTCSessionDescription;\n\n  // The RTCIceCandidate object.\n  window.RTCIceCandidate = mozRTCIceCandidate;\n\n  // getUserMedia shim (only difference is the prefix).\n  // Code from Adam Barth.\n  getUserMedia = navigator.mozGetUserMedia.bind(navigator);\n  navigator.getUserMedia = getUserMedia;\n\n  // Creates ICE server from the URL for FF.\n  window.createIceServer = function(url, username, password) {\n    var iceServer = null;\n    var urlParts = url.split(':');\n    if (urlParts[0].indexOf('stun') === 0) {\n      // Create ICE server with STUN URL.\n      iceServer = {\n        'url': url\n      };\n    } else if (urlParts[0].indexOf('turn') === 0) {\n      if (webrtcDetectedVersion < 27) {\n        // Create iceServer with turn url.\n        // Ignore the transport parameter from TURN url for FF version <=27.\n        var turnUrlParts = url.split('?');\n        // Return null for createIceServer if transport=tcp.\n        if (turnUrlParts.length === 1 ||\n          turnUrlParts[1].indexOf('transport=udp') === 0) {\n          iceServer = {\n            'url': turnUrlParts[0],\n            'credential': password,\n            'username': username\n          };\n        }\n      } else {\n        // FF 27 and above supports transport parameters in TURN url,\n        // So passing in the full url to create iceServer.\n        iceServer = {\n          'url': url,\n          'credential': password,\n          'username': username\n        };\n      }\n    }\n    return iceServer;\n  };\n\n  window.createIceServers = function(urls, username, password) {\n    var iceServers = [];\n    // Use .url for FireFox.\n    for (var i = 0; i < urls.length; i++) {\n      var iceServer =\n        window.createIceServer(urls[i], username, password);\n      if (iceServer !== null) {\n        iceServers.push(iceServer);\n      }\n    }\n    return iceServers;\n  };\n\n  // Attach a media stream to an element.\n  attachMediaStream = function(element, stream) {\n    //console.log('Attaching media stream');\n    element.mozSrcObject = stream;\n    setTimeout(function () {\n      element.play();\n    }, 100);\n  };\n\n  reattachMediaStream = function(to, from) {\n    //console.log('Reattaching media stream');\n    to.mozSrcObject = from.mozSrcObject;\n  };\n\n} else if (navigator.webkitGetUserMedia) {\n  console.log('This appears to be Chrome');\n\n  webrtcDetectedBrowser = 'chrome';\n  // Temporary fix until crbug/374263 is fixed.\n  // Setting Chrome version to 999, if version is unavailable.\n  var result = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n  if (result !== null) {\n    webrtcDetectedVersion = parseInt(result[2], 10);\n  } else {\n    webrtcDetectedVersion = 999;\n  }\n\n  // Creates iceServer from the url for Chrome M33 and earlier.\n  window.createIceServer = function(url, username, password) {\n    var iceServer = null;\n    var urlParts = url.split(':');\n    if (urlParts[0].indexOf('stun') === 0) {\n      // Create iceServer with stun url.\n      iceServer = {\n        'url': url\n      };\n    } else if (urlParts[0].indexOf('turn') === 0) {\n      // Chrome M28 & above uses below TURN format.\n      iceServer = {\n        'url': url,\n        'credential': password,\n        'username': username\n      };\n    }\n    return iceServer;\n  };\n\n  // Creates iceServers from the urls for Chrome M34 and above.\n  window.createIceServers = function(urls, username, password) {\n    var iceServers = [];\n    if (webrtcDetectedVersion >= 34) {\n      // .urls is supported since Chrome M34.\n      iceServers = {\n        'urls': urls,\n        'credential': password,\n        'username': username\n      };\n    } else {\n      for (var i = 0; i < urls.length; i++) {\n        var iceServer =\n          window.createIceServer(urls[i], username, password);\n        if (iceServer !== null) {\n          iceServers.push(iceServer);\n        }\n      }\n    }\n    return iceServers;\n  };\n\n  // The RTCPeerConnection object.\n  RTCPeerConnection = function(pcConfig, pcConstraints) {\n    // .urls is supported since Chrome M34.\n    if (webrtcDetectedVersion < 34) {\n      maybeFixConfiguration(pcConfig);\n    }\n    return new webkitRTCPeerConnection(pcConfig, pcConstraints);\n  };\n\n  // Get UserMedia (only difference is the prefix).\n  // Code from Adam Barth.\n  getUserMedia = navigator.webkitGetUserMedia.bind(navigator);\n  navigator.getUserMedia = getUserMedia;\n\n  // Attach a media stream to an element.\n  attachMediaStream = function(element, stream) {\n    if (typeof element.srcObject !== 'undefined') {\n      element.srcObject = stream;\n    } else if (typeof element.mozSrcObject !== 'undefined') {\n      element.mozSrcObject = stream;\n    } else if (typeof element.src !== 'undefined') {\n      element.src = URL.createObjectURL(stream);\n    } else {\n      console.log('Error attaching stream to element.');\n    }\n  };\n\n  reattachMediaStream = function(to, from) {\n    to.src = from.src;\n  };\n} else {\n  console.log('Browser does not appear to be WebRTC-capable');\n}\n\n\nwindow.RTCPeerConnection = RTCPeerConnection;\nwindow.getUserMedia = getUserMedia;\nwindow.attachMediaStream = attachMediaStream;\nwindow.reattachMediaStream = reattachMediaStream;\nwindow.webrtcDetectedBrowser = webrtcDetectedBrowser;\nwindow.webrtcDetectedVersion = webrtcDetectedVersion;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/deps/adapter.js\n ** module id = 2\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar log = require('loglevel');\nvar respokeClass = require('./class');\n\n/**\n * Higher order function to wrap a passed in function. The returned function will only execute\n * the passed in function the first time it is called, then be a no-op any subsequent tries.\n *\n * @private\n */\nvar callOnce = function (func) {\n    \"use strict\";\n    return (function () {\n        var called = false;\n        return function () {\n            if (!called) {\n                func.apply(null, arguments);\n                called = true;\n            }\n        };\n    })();\n};\n\n/**\n * A generic class for emitting and listening to events. This is used internally by respoke.js\n * to provide evented behavior. You can add custom events and inherit your own objects from\n * the EventEmitter.\n *\n * ```\n * // Adding a custom event to a respoke.Client instance\n * client.listen('my-event', function (evt) { });\n * client.fire('my-event', { name: 'my-event', asdf: 'jkl' });\n * ```\n *\n * ```\n * // Custom EventEmitter\n * var MyCustomEmitter = respoke.EventEmitter();\n * var emitterInstance = MyCustomEmitter();\n * emitterInstance.fire('hi', { name: 'hi', message: 'hello' });\n * emitterInstance.listen('hi', function (evt) { });\n * ```\n *\n * @class respoke.EventEmitter\n * @inherits respoke.Class\n * @constructor\n * @param {object} params\n * @param {string} params.instanceId\n * @returns {respoke.EventEmitter}\n */\nvar EventEmitter = module.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = respokeClass(params);\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.EventEmitter\n     * @name className\n     * @type {string}\n     * @private\n     */\n    that.className = 'respoke.EventEmitter';\n\n    /**\n     * @memberof! respoke.EventEmitter\n     * @name eventList\n     * @private\n     * @type {object}\n     */\n    var eventList = {};\n\n    /**\n     * Add a listener that will only be called once to an object.  This method adds the given listener to the given\n     * event in the case that the same\n     * listener is not already registered to this event and the listener is a function.  The third argument 'isInternal'\n     * is used only internally by the library to indicate that this listener is a library-used listener and should not\n     * count when we are trying to determine if an event has listeners placed by the developer.\n     *\n     *     client.once('connect', function (evt) {\n     *         console.log(\"This is the first time we connected.\");\n     *     });\n     *\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.listen\n     * @param {string} eventType - A developer-specified string identifying the event.\n     * @param {respoke.EventEmitter.eventListener} listener - A function to call when the event is fire.\n     * @param {boolean} [isInternal] - A flag to indicate this listener was added by the library. This parameter should\n     * not be used by developers who are using the library, only by developers who are working on the library itself.\n     */\n    that.once = function (eventType, listener, isInternal) {\n        var string = listener.toString();\n        listener = callOnce(listener);\n        listener.toString = function () { return string; };\n        listener.once = true;\n        that.listen(eventType, listener, isInternal);\n    };\n\n    /**\n     * Add a `listener` function to an object.\n     *\n     * This method adds the `listener` to the event `eventName`.\n     *\n     * If an identical listener already registered to this event, it will **not** be added.\n     *\n     * ##### Example of adding an event listener.\n     *\n     *     client.listen('connect', function (evt) {\n     *         console.log(\"We've connected!\", evt);\n     *     });\n     *\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.listen\n     * @param {string} eventType - The name of the event.\n     * @param {respoke.EventEmitter.eventListener} listener - A function to call when the event is\n     * fired.\n     * @arg {boolean} isInternal - Internal use only. A flag to indicate this listener was\n     * added by the library. This parameter should not be used by developers who are using\n     * the library, only by developers who are working on the library itself.\n     */\n    that.listen = function (eventType, listener, isInternal) {\n        if (listener === undefined) {\n            return;\n        }\n        var invalidEventType = typeof eventType !== 'string' || !eventType;\n        var invalidListener = typeof listener !== 'function';\n        if (invalidEventType || invalidListener) {\n            log.error(\"Invalid request to add event listener to\", eventType, listener);\n            return;\n        }\n\n        eventList[eventType] = eventList[eventType] || [];\n        listener.isInternal = !!isInternal; // boolify\n\n        var toString = function (fn) {\n            return fn.toString();\n        };\n        var isNotAlreadyAdded = eventList[eventType].map(toString).indexOf(listener.toString()) === -1;\n\n        if (isNotAlreadyAdded) {\n            eventList[eventType].push(listener);\n        } else {\n            log.warn(\"Not adding duplicate listener to\", eventType, listener);\n        }\n    };\n\n    /**\n     * Remove a listener from an object. If no eventType is specified, all eventTypes will be\n     * cleared. If an eventType is specified but no listener is specified, all listeners will be\n     * removed from the specified eventType.  If a listener is also specified, only that listener\n     * will be removed.\n     *\n     *     client.ignore('connect', connectHandler);\n     *\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.ignore\n     * @param {string} [eventType] - An optional developer-specified string identifying the event.\n     * @param {function} [listener] - An optional function to remove from the specified event.\n     */\n    that.ignore = function (eventType, listener) {\n        // Remove all events from this object\n        if (eventType === undefined) {\n            eventList = {};\n            return;\n        }\n\n        // Remove all listeners from this event.\n        if (listener === undefined || !eventList[eventType]) {\n            eventList[eventType] = [];\n            return;\n        }\n\n        // Remove only one listener from this event.\n        for (var i = eventList[eventType].length - 1; i >= 0; i -= 1) {\n            if (listener === eventList[eventType][i]) {\n                eventList[eventType].splice(i, 1);\n                return;\n            }\n        }\n    };\n\n    /**\n     * Trigger an event on an object. All listeners for the specified eventType will be called.\n     * Listeners will be bound to the object ('this' will refer to the object), and additional\n     * arguments to fire() will be passed into each listener.\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.fire\n     * @param {string} eventType - A developer-specified string identifying the event to fire.\n     * @param {string|number|object|array} evt - Any number of optional parameters to be passed to\n     * the listener\n     * @private\n     */\n    that.fire = function (eventType, evt) {\n        var args = null;\n        var count = 0;\n        var toRemove = [];\n        var i;\n\n        evt = evt || {};\n        evt.name = eventType;\n        evt.target = that;\n\n        if (!eventType) {\n            return;\n        }\n\n        if (!eventList[eventType]) {\n            log.debug(\"fired \" + that.className + \"#\" + eventType + \" 0 listeners called with params\", evt);\n            return;\n        }\n\n        for (i = 0; i < eventList[eventType].length; i += 1) {\n            var listener = eventList[eventType][i];\n            if (typeof listener === 'function') {\n                setTimeout(listenerBuilder(listener, evt, eventType));\n\n                count += 1;\n                if (listener.once === true) {\n                    toRemove.push(i);\n                }\n            }\n        }\n\n        for (i = (toRemove.length - 1); i >= 0; i -= 1) {\n            eventList[eventType].splice(toRemove[i], 1);\n        }\n\n        log.debug(\"fired \" + that.className + \"#\" + eventType + \" \" + count + \" listeners called with params\", evt);\n    };\n\n    function listenerBuilder(listener, evt, eventType) {\n        return function () {\n            try {\n                listener.call(that, evt);\n            } catch (e) {\n                log.error('Error in ' + that.className + \"#\" + eventType, e.message, e.stack);\n            }\n        };\n    }\n\n    /**\n     * Determine if an object has had any listeners registered for a given event outside the library. This method\n     * checks for the isInternal flag on each listener and doesn't count it toward an event being listened to. This\n     * method is used in the library to handle situations where an action is needed if an event won't be acted on.\n     * For instance, if a call comes in for the logged-in user, but the developer isn't listening to\n     * {respoke.Client#call}, we'll need to reject the call immediately.\n     *\n     *     if (client.hasListeners('call')) {\n     *         // already handled!\n     *     }\n     *\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.hasListeners\n     * @param {string} eventType - The name of the event\n     * @returns {boolean} Whether this event has any listeners that are external to this library.\n     */\n    that.hasListeners = function (eventType) {\n        if (eventType === undefined) {\n            throw new Error(\"Missing required parameter event type.\");\n        }\n\n        if (!eventList[eventType]) {\n            return false;\n        }\n\n        return !eventList[eventType].every(function eachListener(listener) {\n            return listener.isInternal;\n        });\n    };\n\n    return that;\n}; // End respoke.EventEmitter\n/**\n * @callback respoke.EventEmitter.eventListener\n * @param {respoke.Event} evt\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/event.js\n ** module id = 3\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\n/**\n * Empty base class. Use params.that (if exists) for the base object, but delete it from the instance.\n * Copy all params that were passed in onto the base object. Add the class name.\n * @class respoke.Class\n * @private\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = params.that || {};\n\n    that.className = 'respoke.Class';\n    delete params.that;\n    delete that.client;\n\n    Object.keys(params).forEach(function copyParam(name) {\n        that[name] = params[name];\n    });\n\n    return that;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/class.js\n ** module id = 4\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\nvar log = respoke.log;\n\n/**\n * `respoke.Client` is the top-level interface to the API. Interacting with Respoke should be done using\n * a `respoke.Client` instance.\n *\n * There are two ways to get a client:\n *\n *      var client = respoke.createClient(clientParams);\n *      // . . . set stuff up, then . . .\n *      client.connect(connectParams);\n *\n * or\n *\n *      // creates client and connects to Respoke all at once\n *      var client = respoke.connect(allParams);\n *\n * A client does the following things:\n *\n * 1. authentication with the Respoke API\n * 1. receives server-side app-specific information\n * 1. tracks connections and presence\n * 1. provides methods to get and interact with tracked entities (like groups and endpoints)\n * 1. stores default settings for calls and direct connections\n * 1. automatically reconnects to the API when network activity is lost*\n *\n * *If `developmentMode` is set to true. If not using `developmentMode`, disable automatic\n * reconnect by sending `reconnect: false` and listening to the Client's disconnect event\n * to fetch a new brokered auth token, then call `client.connect()` with the new token.\n *\n * @class respoke.Client\n * @constructor\n * @augments respoke.Presentable\n * @param {object} params\n * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n * respoke.connect, respoke.createClient, or to client.connect.\n * @param {string} [params.token] - The endpoint's authentication token.\n * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n * endpoint. This is only used when `developmentMode` is set to `true`.\n * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n * operation and will limit the services you will be able to use.\n * @param {string|number|object|Array} [params.presence=unavailable] The initial presence to set once connected.\n * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n * when a disconnect occurs.\n * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is received\n * from anywhere on the system.\n * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect.\n * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client's user receives a call.\n * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this client's user\n * receives a request for a direct connection.\n * @returns {respoke.Client}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Client\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId || respoke.makeGUID();\n    params.instanceId = instanceId;\n    var that = respoke.Presentable(params);\n    respoke.instances[instanceId] = that;\n    delete that.instanceId;\n    that.connectTries = 0;\n    /**\n     * A name to identify this class\n     * @memberof! respoke.Client\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Client';\n    /**\n     * @memberof! respoke.Client\n     * @name host\n     * @type {string}\n     * @private\n     */\n    var host = window.location.hostname;\n    /**\n     * @memberof! respoke.Client\n     * @name port\n     * @type {number}\n     * @private\n     */\n    var port = window.location.port;\n    /**\n     * A simple POJO to store some methods we will want to override but reference later.\n     * @memberof! respoke.Client\n     * @name superClass\n     * @private\n     * @type {object}\n     */\n    var superClass = {\n        setPresence: that.setPresence\n    };\n    /**\n     * A container for baseURL, token, and appId so they won't be accidentally viewable in any JavaScript debugger.\n     * @memberof! respoke.Client\n     * @name clientSettings\n     * @type {object}\n     * @private\n     * @property {string} [baseURL] - the URL of the cloud infrastructure's REST API.\n     * @property {string} [token] - The endpoint's authentication token.\n     * @property {string} [appId] - The id of your Respoke app.\n     * @property {string} [endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @property {boolean} [developmentMode=false] - Indication to obtain an authentication token from the service.\n     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n     * operation and will limit the services you will be able to use.\n     * @property {boolean} [reconnect=false] - Whether or not to automatically reconnect to the Respoke service\n     * when a disconnect occurs.\n     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n     * @property {respoke.Client.onClientMessage} [onMessage] - Callback for when any message is received\n     * from anywhere on the system.\n     * @property {respoke.Client.onConnect} [onConnect] - Callback for Client connect.\n     * @property {respoke.Client.onDisconnect} [onDisconnect] - Callback for Client disconnect.\n     * @property {respoke.Client.onReconnect} [onReconnect] - Callback for Client reconnect. Not Implemented.\n     * @property {respoke.Client.onCall} [onCall] - Callback for when this client receives a call.\n     * @property {respoke.Client.onDirectConnection} [onDirectConnection] - Callback for when this client\n     * receives a request for a direct connection.\n     * @property {boolean} enableCallDebugReport=true - Upon finishing a call, should the client send debugging\n     * information to the API? Defaults to `true`.\n     */\n    var clientSettings = {};\n\n    delete that.appId;\n    delete that.baseURL;\n    delete that.developmentMode;\n    delete that.token;\n    delete that.resolveEndpointPresence;\n\n    /**\n     * Internal list of known groups.\n     * @memberof! respoke.Client\n     * @name groups\n     * @type {Array<respoke.Group>}\n     * @private\n     */\n    var groups = [];\n    /**\n     * Internal list of known endpoints.\n     * @memberof! respoke.Client\n     * @name endpoints\n     * @type {Array<respoke.Endpoint>}\n     * @private\n     */\n    var endpoints = [];\n    /**\n     * Array of calls in progress, made accessible for informational purposes only.\n     * **Never modify this array directly.**\n     *\n     * @memberof! respoke.Client\n     * @name calls\n     * @type {array}\n     */\n    that.calls = [];\n    log.debug(\"Client ID is \", instanceId);\n\n    /**\n     * @memberof! respoke.Client\n     * @name signalingChannel\n     * @type {respoke.SignalingChannel}\n     * @private\n     */\n    var signalingChannel = respoke.SignalingChannel({\n        instanceId: instanceId,\n        clientSettings: clientSettings\n    });\n\n    /**\n     * Save parameters of the constructor or client.connect() onto the clientSettings object\n     * @memberof! respoke.Client\n     * @method respoke.saveParameters\n     * @param {object} params\n     * @param {respoke.Client.connectSuccessHandler} [params.onSuccess] - Success handler for this invocation\n     * of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n     * respoke.connect, respoke.createClient, or to client.connect.\n     * @param {string} [params.token] - The endpoint's authentication token.\n     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n     * @param {respoke.client.resolveEndpointPresence} [params.resolveEndpointPresence] An optional function for\n     * resolving presence for an endpoint.  An endpoint can have multiple Connections this function will be used\n     * to decide which Connection's presence gets precedence for the Endpoint.\n     * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n     * operation and will limit the services you will be able to use.\n     * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n     * when a disconnect occurs.\n     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves\n     * a group.\n     * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is\n     * received from anywhere on the system.\n     * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n     * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n     * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n     * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client receives a call.\n     * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this\n     * client receives a request for a direct connection.\n     * @private\n     */\n    function saveParameters(params) {\n        Object.keys(params).forEach(function eachParam(key) {\n            if (['onSuccess', 'onError', 'reconnect'].indexOf(key) === -1 && params[key] !== undefined) {\n                clientSettings[key] = params[key];\n            }\n        });\n\n        clientSettings.developmentMode = !!clientSettings.developmentMode;\n        clientSettings.enableCallDebugReport = typeof clientSettings.enableCallDebugReport === 'boolean' ?\n            clientSettings.enableCallDebugReport : true;\n\n        if (typeof params.reconnect !== 'boolean') {\n            clientSettings.reconnect = typeof clientSettings.developmentMode === 'boolean' ? clientSettings.developmentMode : false;\n        } else {\n            clientSettings.reconnect = !!params.reconnect;\n        }\n    }\n    saveParameters(params);\n\n    /**\n     * Connect to the Respoke infrastructure and authenticate using `params.token`.\n     *\n     * After `connect`, the app auth session token is stored so it can be used in API requests.\n     *\n     * This method attaches quite a few event listeners for things like group joining and connection status changes.\n     *\n     * #### Usage\n     *\n     *      client.connect({\n     *          appId: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\",\n     *          token: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\", // if not developmentMode\n     *          developmentMode: false || true,\n     *          // if developmentMode, otherwise your server will set endpointId\n     *          endpointId: \"billy\"\n     *      });\n     *      client.listen(\"connect\", function () { } );\n     *\n     *\n     * If no `params.token` is given and `developmentMode` is set to true, it will attempt to obtain a token\n     * automatically. You must set an `endpointId`.\n     *\n     *\n     * #### App auth session token expiration\n     *\n     * If `params.reconnect` is set to true (which it is by default for `developmentMode`), the `client`\n     * will attempt to keep reconnecting each time the app auth session expires.\n     *\n     * If not using `developmentMode`, automatic reconnect will be disabled. You will need to\n     * listen to the Client's `disconnect` event to fetch a new brokered auth token and call\n     * `client.connect()` with the new token.\n     *\n     *      client.listen('disconnect', function () {\n     *\n     *          // example method you implemented to get a new token from your server\n     *          myServer.getNewRespokeAccessToken(function (newToken) {\n     *              // reconnect with respoke.Client\n     *              client.connect({ token: newToken });\n     *          });\n     *\n     *      });\n     *\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.connect\n     * @param {object} params\n     * @param {respoke.Client.connectSuccessHandler} [params.onSuccess] - Success handler for this invocation\n     * of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n     * respoke.connect, respoke.createClient, or to client.connect.\n     * @param {string} [params.token] - The endpoint's authentication token.\n     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n     * @param {respoke.client.resolveEndpointPresence} [params.resolveEndpointPresence] An optional function for\n     * resolving presence for an endpoint.  An endpoint can have multiple Connections this function will be used\n     * to decide which Connection's presence gets precedence for the Endpoint.\n     * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n     * operation and will limit the services you will be able to use.\n     * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n     * when a disconnect occurs.\n     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves\n     * a group.\n     * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is\n     * received from anywhere on the system.\n     * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n     * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n     * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n     * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client receives a call.\n     * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this\n     * client receives a request for a direct connection.\n     * @returns {Promise|undefined}\n     * @fires respoke.Client#connect\n     */\n    that.connect = function (params) {\n        var promise;\n        var retVal;\n        params = params || {};\n        log.debug('Client.connect');\n        that.connectTries += 1;\n\n        saveParameters(params);\n\n        that.endpointId = clientSettings.endpointId;\n        promise = actuallyConnect(params);\n        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n        promise.then(function successHandler() {\n            /**\n             * This event is fired the first time the library connects to the cloud infrastructure.\n             * @event respoke.Client#connect\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n            that.fire('connect');\n\n            /**\n             * This event fires only when the initial `connect` fails.\n             *\n             * @ignore **This comment is for documentation purposes**, since #error bubbles\n             * up from other classes, but it should show on `respoke.Client` docs.\n             *\n             * @event respoke.Client#error\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n        });\n        return retVal;\n    };\n\n    /**\n     * This function contains the meat of the connection, the portions which can be repeated again on reconnect.\n     *\n     * When `reconnect` is true, this function will be added in an event listener to the Client#disconnect event.\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     * @memberof! respoke.Client\n     * @method respoke.Client.actuallyConnect\n     * @private\n     * @param {object} params\n     * @param {connectSuccessHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    function actuallyConnect(params) {\n        params = params || {};\n        var deferred = Q.defer();\n\n        if (!clientSettings.token &&\n                (!clientSettings.appId || !clientSettings.endpointId || clientSettings.developmentMode !== true)) {\n            deferred.reject(new Error(\"Must pass either endpointID & appId & developmentMode=true, or a token, \" +\n                \"to client.connect().\"));\n            return deferred.promise;\n        }\n\n        signalingChannel.open({\n            actuallyConnect: actuallyConnect,\n            endpointId: that.endpointId,\n            token: clientSettings.token\n        }).then(function successHandler() {\n            return signalingChannel.authenticate();\n        }).done(function successHandler() {\n            // set initial presence for the connection\n            if (clientSettings.presence) {\n                that.setPresence({presence: clientSettings.presence});\n            }\n\n            /*!\n             * These rely on the EventEmitter checking for duplicate event listeners in order for these\n             * not to be duplicated on reconnect.\n             */\n\n            /**\n             * This event provides notification for when an incoming call is being received.  If the user wishes\n             * to allow the call, `evt.call.answer()`.\n             * @event respoke.Client#call\n             * @type {respoke.Event}\n             * @property {respoke.Call} call\n             * @property {respoke.Endpoint} endpoint\n             * @property {string} name - The event name.\n             * @property {respoke.Client} target\n             */\n            that.listen('call', clientSettings.onCall);\n            /**\n             * This event is fired when the local end of the directConnection is available. It still will not be\n             * ready to send and receive messages until the 'open' event fires.\n             * @event respoke.Client#direct-connection\n             * @type {respoke.Event}\n             * @property {respoke.DirectConnection} directConnection\n             * @property {respoke.Endpoint} endpoint\n             * @property {string} name - the event name.\n             * @property {respoke.Call} target\n             */\n            that.listen('direct-connection', clientSettings.onDirectConnection);\n            that.listen('join', clientSettings.onJoin);\n            /**\n             * This event is fired every time the client leaves a group.\n             * @event respoke.Client#leave\n             * @type {respoke.Event}\n             * @property {respoke.Group} group\n             * @property {string} name - the event name.\n             */\n            that.listen('leave', clientSettings.onLeave);\n            /**\n             * A generic message handler when a message was received by the client.\n             *\n             * @event respoke.Client#message\n             * @type {respoke.Event}\n             * @property {string} name - The event name.\n             * @property {respoke.Endpoint} endpoint - If the message was private, this is the Endpoint who sent it.\n             * @property {respoke.Group} group - If the message was to a group, this is the group.\n             * @property {respoke.TextMessage} message - The generic message object.\n             * @property {string} message.connectionId\n             * @property {string} message.endpointId\n             * @property {string} message.message - Message body text.\n             * @property {respoke.Client} target\n             */\n            that.listen('message', clientSettings.onMessage);\n            that.listen('connect', clientSettings.onConnect);\n            /**\n             * Client has disconnected from Respoke.\n             *\n             * @event respoke.Client#disconnect\n             * @type {respoke.Event}\n             * @property {string} name - The event name.\n             * @property {respoke.Client} target\n             */\n            that.listen('disconnect', clientSettings.onDisconnect);\n            that.listen('disconnect', function () {\n                that.calls.forEach(function (call) {\n                    call.hangup({signal: false});\n                });\n            }, true);\n            /**\n             * Client has reconnected to Respoke.\n             *\n             * @event respoke.Client#reconnect\n             * @type {respoke.Event}\n             * @property {string} name - The event name.\n             * @property {respoke.Client} target\n             */\n            that.listen('reconnect', clientSettings.onReconnect);\n\n            log.info('logged in as ' + that.endpointId, that);\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n            if (err.message && err.message.match(/Connection limit exceeded/)) {\n                log.error(\n                    'You have reached the connection limit on the account associated with this appId. ' +\n                    'Please upgrade your account from the developer portal at https://portal.respoke.io ' +\n                    'if you need more concurrent connections.', err);\n            } else {\n                log.error(err.message, err.stack);\n            }\n        });\n\n        return deferred.promise;\n    }\n\n    /**\n     * Disconnect from the Respoke infrastructure, leave all groups, invalidate the token, and disconnect the websocket.\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     * @memberof! respoke.Client\n     * @method respoke.Client.disconnect\n     * @returns {Promise|undefined}\n     * @param {object} params\n     * @param {disconnectSuccessHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @fires respoke.Client#disconnect\n     */\n    that.disconnect = function (params) {\n        // TODO: also call this on socket disconnect\n        params = params || {};\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            deferred.reject(e);\n            return retVal;\n        }\n\n        var leaveGroups = groups.map(function eachGroup(group) {\n            group.leave();\n        });\n\n        Q.all(leaveGroups).fin(function successHandler() {\n            return signalingChannel.close();\n        }).fin(function finallyHandler() {\n            that.presence = 'unavailable';\n            endpoints = [];\n            groups = [];\n            /**\n             * This event is fired when the library has disconnected from the cloud infrastructure.\n             * @event respoke.Client#disconnect\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n            that.fire('disconnect');\n            deferred.resolve();\n        }).done();\n\n        return retVal;\n    };\n\n    /**\n     * Set the presence for this client.\n     *\n     * The value of presence can be a string, number, object, or array - in any format -\n     * depending on the needs of your application. The only requirement is that\n     * `JSON.stringify()` must work (no circular references).\n     *\n     *      var myPresence = 'At lunch'\n     *                      || 4\n     *                      || { status: 'Away', message: 'At lunch' }\n     *                      || ['Away', 'At lunch'];\n     *\n     *      client.setPresence({\n     *          presence: myPresence,\n     *          onSuccess: function (evt) {\n     *              // successfully updated my presence\n     *          }\n     *      });\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.setPresence\n     * @param {object} params\n     * @param {string|number|object|array} params.presence\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @overrides Presentable.setPresence\n     * @return {Promise|undefined}\n     */\n    that.setPresence = function (params) {\n        var promise;\n        var retVal;\n        params = params || {};\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n        }\n\n        log.info('sending my presence update ' + params.presence);\n\n        promise = signalingChannel.sendPresence({\n            presence: params.presence\n        });\n\n        promise.then(function successHandler(p) {\n            superClass.setPresence(params);\n            clientSettings.presence = params.presence;\n        });\n        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n        return retVal;\n    };\n\n    /**\n     * Get the Call with the endpoint specified.\n     *\n     *     // hang up on chad\n     *     var call = client.getCall({\n     *         endpointId: 'chad'\n     *     });\n     *\n     *     if (call) {\n     *         call.hangup()\n     *     }\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getCall\n     * @param {object} params\n     * @param {string} [params.id] - Call ID.\n     * @param {string} [params.endpointId] - Endpoint ID. Warning: If you pass only the endpointId, this method\n     * will just return the first call that matches. If you are placing multiple calls to the same endpoint,\n     * pass in the call ID, too.\n     * @arg {boolean} [params.create] - whether or not to create a new call if the specified endpointId isn't found\n     * @arg {string} [params.fromType] - fromType from the signal, tells us if this is a SIP or DID call.\n     * @arg {string} [params.target] - target from the signal, tells us if this is a screenshare or conference call.\n     * @returns {respoke.Call}\n     */\n    that.getCall = function (params) {\n        var call = null;\n        var methods = {\n            screenshare: \"startScreenShare\",\n            did: \"startPhoneCall\",\n            web: \"startCall\",\n            sip: \"startSIPCall\",\n            conference: \"startConferenceCall\"\n        };\n        var callParams = {};\n        params.fromType = params.type || \"web\";\n        var switchType = params.type;\n\n        that.calls.every(function findCall(one) {\n            if (params.id && one.id === params.id) {\n                call = one;\n                return false;\n            }\n\n            if (!params.id && params.endpointId && one.remoteEndpoint.id === params.endpointId) {\n                call = one;\n                return false;\n            }\n            return true;\n        });\n\n        if (call || params.create !== true) {\n            return call;\n        }\n\n        callParams.id = params.id;\n        callParams.conferenceId = params.conferenceId;\n        callParams.caller = false;\n        callParams.fromType = \"web\";\n        callParams.callerId = params.callerId;\n        callParams.target = params.target;\n\n        if (params.target === \"conference\") {\n            callParams.conferenceId = params.conferenceId;\n            switchType = params.target;\n        } else if (params.target === \"screenshare\") {\n            switchType = params.target;\n        }\n\n        switch (switchType) {\n            case \"screenshare\":\n            case \"web\":\n                callParams.toType = \"web\"; // overwrite \"screenshare\"\n                callParams.endpointId = params.endpointId;\n                break;\n            case \"did\":\n                callParams.number = params.endpointId;\n                callParams.toType = \"did\";\n                break;\n            case \"sip\":\n                callParams.uri = params.endpointId;\n                callParams.toType = \"sip\";\n                break;\n        }\n\n        try {\n            call = that[methods[params.type]](callParams);\n        } catch (e) {\n            log.error(\"Couldn't create Call.\", e.message, e.stack);\n        }\n        return call;\n    };\n\n    /**\n     * Add the call to internal record-keeping.\n     * @memberof! respoke.Client\n     * @method respoke.Client.addCall\n     * @param {object} evt\n     * @param {respoke.Call} evt.call\n     * @param {respoke.Endpoint} evt.endpoint\n     * @private\n     */\n    function addCall(evt) {\n        log.debug('addCall');\n        if (!evt.call) {\n            throw new Error(\"Can't add call without a call parameter.\");\n        }\n        if (that.calls.indexOf(evt.call) === -1) {\n            that.calls.push(evt.call);\n        }\n\n        evt.call.listen('hangup', function () {\n            removeCall({call: evt.call});\n        });\n    }\n\n    /**\n     * Remove the call or direct connection from internal record-keeping.\n     * @memberof! respoke.Client\n     * @method respoke.Client.removeCall\n     * @param {object} evt\n     * @param {respoke.Call} evt.target\n     * @private\n     */\n    function removeCall(evt) {\n        var match = 0;\n        if (!evt.call) {\n            throw new Error(\"Can't remove call without a call parameter.\");\n        }\n\n        // Loop backward since we're modifying the array in place.\n        for (var i = that.calls.length - 1; i >= 0; i -= 1) {\n            if (that.calls[i].id === evt.call.id) {\n                that.calls.splice(i, 1);\n                match += 1;\n            }\n        }\n\n        if (match !== 1) {\n            log.warn(\"Something went wrong.\", match, \"calls were removed!\");\n        }\n    }\n\n    /**\n     * Convenience method for setting presence to `\"available\"`.\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.setOnline\n     * @param {object} params\n     * @param {string|number|object|Array} [params.presence=available] - The presence to set.\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    that.setOnline = function (params) {\n        var promise;\n\n        params = params || {};\n        params.presence = params.presence || 'available';\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n        }\n\n        return that.setPresence(params);\n    };\n\n    /**\n     * Convenience method for setting presence to `\"unavailable\"`.\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.setOffline\n     * @param {object} params\n     * @param {string|number|object|Array} [params.presence=unavailable] - The presence to set.\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    that.setOffline = function (params) {\n        var promise;\n\n        params = params || {};\n        params.presence = params.presence || 'unavailable';\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n        }\n\n        return that.setPresence(params);\n    };\n\n    /**\n     * Send a message to an endpoint.\n     *\n     *     client.sendMessage({\n     *         endpointId: 'dan',\n     *         message: \"Jolly good.\"\n     *     });\n     *\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     * @memberof! respoke.Client\n     * @method respoke.Client.sendMessage\n     * @param {object} params\n     * @param {string} params.endpointId - The endpoint id of the recipient.\n     * @param {string} [params.connectionId] - The optional connection id of the receipient. If not set, message will be\n     * broadcast to all connections for this endpoint.\n     * @param {string} params.message - a string message.\n     * @param {sendHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        var promise;\n        var retVal;\n        var endpoint;\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n            return retVal;\n        }\n        endpoint = that.getEndpoint({\n            skipPresence: true,\n            id: params.endpointId\n        });\n        delete params.endpointId;\n        return endpoint.sendMessage(params);\n    };\n\n    /**\n     * Experimental. Create a new conference call with the specified conferenceId.\n     *\n     *     client.startConferenceCall({\n     *         conferenceId: \"javascript-meetup\",\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.startConferenceCall\n     * @private\n     * @param {object} params\n     * @param {string} params.conferenceId - The id that should be used to create the conference call or the ID\n     * of the call to join.\n     * @arg {string} [params.key] - The access key to use. If not set, the conference call will be open such\n     * that any endpoint can join.\n     * @arg {boolean} [params.open] - whether endpoints can join this conference without a key.\n     * @arg {respoke.Conference.onJoin} [params.onJoin] - Callback for when a participant joins the conference.\n     * @arg {respoke.Conference.onLeave} [params.onLeave] - Callback for when a participant leaves the conference.\n     * @arg {respoke.Conference.onMessage} [params.onMessage] - Callback for when a message is sent to the conference.\n     * @param {respoke.Conference.onMute} [params.onMute] - Callback for when local or remote media is muted or unmuted.\n     * @arg {respoke.Conference.onTopic} [params.onTopic] - Callback for the conference topic changes.\n     * @arg {respoke.Conference.onPresenter} [params.onPresenter] - Callback for when the presenter changes.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n     * and the remote party has received the video.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @returns {respoke.Conference}\n     */\n    that.startConferenceCall = function (params) {\n        var conference = null;\n        var recipient;\n\n        params = params || {};\n        params.open = !!params.open;\n\n        that.verifyConnected();\n\n        if (!params.conferenceId) {\n            params.conferenceId = respoke.makeGUID();\n        }\n\n        recipient = {id: params.conferenceId};\n\n        if (params.open) {\n            params.key = undefined;\n        } else if (!params.key) {\n            params.key = respoke.makeGUID();\n        }\n\n        params.instanceId = instanceId;\n        params.target = \"conference\";\n        params.constraints = respoke.convertConstraints(params.constraints, [{\n            video: false,\n            audio: true,\n            mandatory: {},\n            optional: []\n        }]);\n\n        params.signalOffer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'offer';\n            signalParams.target = params.target;\n            signalParams.id = params.id;\n            signalParams.key = params.key;\n            signalParams.open = params.open;\n            signalParams.recipient = recipient;\n            signalParams.toType = \"conference\";\n\n            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n        };\n        params.signalAnswer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'answer';\n            signalParams.target = params.target;\n            signalParams.recipient = recipient;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalParams.toType = \"conference\";\n            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n                signalParams.call.hangup({signal: false});\n            });\n        };\n        params.signalConnected = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.connectionId = signalParams.call.connectionId;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalParams.recipient = recipient;\n            signalParams.toType = \"conference\";\n            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n                signalParams.call.hangup();\n            });\n        };\n        params.signalModify = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.recipient = recipient;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalParams.toType = \"conference\";\n            signalingChannel.sendModify(signalParams).done();\n        };\n        params.signalCandidate = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.recipient = recipient;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalParams.toType = \"conference\";\n            signalingChannel.sendCandidate(signalParams).done();\n        };\n        params.signalHangup = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.recipient = recipient;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalParams.toType = \"conference\";\n            signalingChannel.sendHangup(signalParams).done();\n        };\n        params.signalReport = function (signalParams) {\n            log.debug(\"Sending debug report\", signalParams.report);\n            signalingChannel.sendReport(signalParams).done();\n        };\n\n        params.signalingChannel = signalingChannel;\n        conference = respoke.Conference(params);\n        addCall({call: conference.call});\n        return conference;\n    };\n\n    /**\n     * Create a new screen sharing call. Screenshares are inherently unidirectional video only. This may change\n     * in the future when Chrome adds the ability to obtain screen video and microphone audio at the same time. For\n     * now, if you also need audio, place a second audio only call.\n     *\n     * The endpoint who calls `client.startScreenShare` will be the one whose screen is shared. If you'd like to\n     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n     * not the sharer, it is recommened that you use `endpoint.sendMessage` to send a control message to the user\n     * whose screenshare is being requested so that user's app can call `client.startScreenShare`.\n     *\n     * NOTE: At this time, screen sharing only works with Chrome, and Chrome requires a Chrome extension to\n     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension.\n     * Support for additional browsers will be added in the future.\n     *\n     *     client.startScreenShare({\n     *         endpointId: 'tian',\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.startScreenShare\n     * @param {object} params\n     * @param {string} params.endpointId - The id of the endpoint that should be called.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n     * and the remote party has received the video.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {string} [params.source] - Pass in what type of mediaSource you want. If omitted, you'll have access\n     * to both the screen and windows. In firefox, you'll have access to the screen only.\n     * @returns {respoke.Call}\n     */\n    that.startScreenShare = function (params) {\n        that.verifyConnected();\n        var endpoint = that.getEndpoint({\n            skipPresence: true,\n            id: params.endpointId\n        });\n        delete params.endpointId;\n        return endpoint.startScreenShare(params);\n    };\n\n    /**\n     * Place an audio and/or video call to an endpoint.\n     *\n     *     // defaults to video when no constraints are supplied\n     *     client.startCall({\n     *         endpointId: 'erin',\n     *         onConnect: function (evt) { },\n     *         onLocalMedia: function (evt) { }\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.startCall\n     * @param {object} params\n     * @param {string} params.endpointId - The id of the endpoint that should be called.\n     * @param {Array<RTCConstraints>} [params.constraints]\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n     * with the local audio and/or video attached.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n     * with the remote audio and/or video attached.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n     * up.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have\n     * local video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have\n     * remote video attached to it.\n     * @return {respoke.Call}\n     */\n    that.startCall = function (params) {\n        that.verifyConnected();\n        var endpoint = that.getEndpoint({\n            skipPresence: true,\n            id: params.endpointId\n        });\n        delete params.endpointId;\n        return endpoint.startCall(params);\n    };\n\n    /**\n     * Place an audio only call to an endpoint.\n     *\n     *     client.startAudioCall({\n     *         endpointId: 'erin',\n     *         onConnect: function (evt) { },\n     *         onLocalMedia: function (evt) { }\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.startAudioCall\n     * @param {object} params\n     * @param {string} params.endpointId - The id of the endpoint that should be called.\n     * @param {string} [params.connectionId]\n     * @param {Array<RTCConstraints>} [params.constraints]\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 element\n     * with the local audio and/or video attached.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 element\n     * with the remote audio and/or video attached.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n     * up.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n     * video attached to it.\n     * @return {respoke.Call}\n     */\n    that.startAudioCall = function (params) {\n        that.verifyConnected();\n        var endpoint = that.getEndpoint({\n            skipPresence: true,\n            id: params.endpointId\n        });\n        delete params.endpointId;\n        return endpoint.startAudioCall(params);\n    };\n\n    /**\n     * Place a video call to an endpoint.\n     *\n     *     client.startVideoCall({\n     *         endpointId: 'erin',\n     *         onConnect: function (evt) { },\n     *         onLocalMedia: function (evt) { }\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.startVideoCall\n     * @param {object} params\n     * @param {string} params.endpointId - The id of the endpoint that should be called.\n     * @param {Array<RTCConstraints>} [params.constraints]\n     * @param {string} [params.connectionId]\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n     * with the local audio and/or video attached.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n     * with the remote audio and/or video attached.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n     * up.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n     * video attached to it.\n     * @return {respoke.Call}\n     */\n    that.startVideoCall = function (params) {\n        that.verifyConnected();\n        var endpoint = that.getEndpoint({\n            skipPresence: true,\n            id: params.endpointId\n        });\n        delete params.endpointId;\n        return endpoint.startVideoCall(params);\n    };\n\n    /**\n     * Place an audio call with a phone number.\n     * @memberof! respoke.Client\n     * @method respoke.Client.startPhoneCall\n     * @param {object} params\n     * @param {string} params.number - The phone number that should be called.\n     * @arg {string} params.callerId - The phone number to use as the caller ID for this phone call. This must\n     * be a phone number listed in your Respoke account, associated with your app, and allowed by the role\n     * that this client is authenticated with. If the role contains a list of numbers and the token does not contain\n     * callerId, this field must be used to set caller ID selected from the list of numbers or no caller ID will be set.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n     * with the local audio and/or video attached.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n     * with the remote audio and/or video attached.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n     * up.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @return {respoke.Call}\n     */\n    that.startPhoneCall = function (params) {\n        var promise;\n        var call = null;\n        var recipient = {};\n        params = params || {};\n        params.constraints = [{\n            video: false,\n            audio: true,\n            mandatory: {},\n            optional: []\n        }];\n\n        that.verifyConnected();\n\n        if (!params.number) {\n            throw new Error(\"Can't start a phone call without a number.\");\n        }\n\n        if (typeof params.caller !== 'boolean') {\n            params.caller = true;\n        }\n\n        recipient.id = params.number;\n\n        params.instanceId = instanceId;\n        params.remoteEndpoint = recipient;\n\n        params.toType = params.toType || 'did';\n        params.fromType = params.fromType || 'web';\n\n        params.signalOffer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'offer';\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n\n            // using hasOwnProperty here because callerId could be explicitly set to null or empty string\n            if (params.hasOwnProperty('callerId')) {\n                signalParams.callerId = {number: params.callerId};\n            }\n            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n        };\n        params.signalAnswer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'answer';\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n                log.error(\"Couldn't answer the call.\", err.message, err.stack);\n                signalParams.call.hangup({signal: false});\n            });\n        };\n        params.signalConnected = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.connectionId = signalParams.connectionId;\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send connected.\", err.message, err.stack);\n                signalParams.call.hangup();\n            });\n        };\n        params.signalModify = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendModify(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send modify.\", err.message, err.stack);\n            });\n        };\n        params.signalCandidate = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendCandidate(signalParams).done();\n        };\n        params.signalHangup = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendHangup(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send hangup.\", err.message, err.stack);\n            });\n        };\n        params.signalReport = function (signalParams) {\n            log.debug(\"Sending debug report\", signalParams.report);\n            signalingChannel.sendReport(signalParams);\n        };\n\n        params.signalingChannel = signalingChannel;\n        call = respoke.Call(params);\n        addCall({call: call});\n        return call;\n    };\n\n    /**\n     * Place an audio call to a SIP URI.\n     * @memberof! respoke.Client\n     * @method respoke.Client.startSIPCall\n     * @param {object} params\n     * @param {string} params.uri - The SIP URI to call.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n     * with the local audio and/or video attached.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n     * with the remote audio and/or video attached.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n     * up.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @return {respoke.Call}\n     */\n    that.startSIPCall = function (params) {\n        var promise;\n        var call = null;\n        var recipient = {};\n        params = params || {};\n        params.constraints = [{\n            video: false,\n            audio: true,\n            mandatory: {},\n            optional: []\n        }];\n\n        that.verifyConnected();\n\n        if (!params.uri) {\n            throw new Error(\"Can't start a phone call without a SIP URI.\");\n        }\n\n        if (typeof params.caller !== 'boolean') {\n            params.caller = true;\n        }\n\n        recipient.id = params.uri;\n\n        params.instanceId = instanceId;\n        params.remoteEndpoint = recipient;\n\n        params.toType = params.toType || 'sip';\n        params.fromType = params.fromType || 'web';\n\n        params.signalOffer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'offer';\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n        };\n        params.signalAnswer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'answer';\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n                log.error(\"Couldn't answer the call.\", err.message, err.stack);\n                signalParams.call.hangup({signal: false});\n            });\n        };\n        params.signalConnected = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.connectionId = signalParams.connectionId;\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send connected.\", err.message, err.stack);\n                signalParams.call.hangup();\n            });\n        };\n        params.signalModify = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendModify(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send modify.\", err.message, err.stack);\n            });\n        };\n        params.signalCandidate = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendCandidate(signalParams).done();\n        };\n        params.signalHangup = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendHangup(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send hangup.\", err.message, err.stack);\n            });\n        };\n        params.signalReport = function (signalParams) {\n            log.debug(\"Sending debug report\", signalParams.report);\n            signalingChannel.sendReport(signalParams);\n        };\n\n        params.signalingChannel = signalingChannel;\n        call = respoke.Call(params);\n        addCall({call: call});\n        return call;\n    };\n\n    /**\n     * Assert that we are connected to the backend infrastructure.\n     * @memberof! respoke.Client\n     * @method respoke.Client.verifyConnected\n     * @throws {Error}\n     * @private\n     */\n    that.verifyConnected = function () {\n        if (!signalingChannel.isConnected()) {\n            throw new Error(\"Can't complete request when not connected. Please reconnect!\");\n        }\n    };\n\n    /**\n     * Check whether this client is connected to the Respoke API.\n     * @memberof! respoke.Client\n     * @method respoke.Client.isConnected\n     * @returns boolean\n     */\n    that.isConnected = function () {\n        return signalingChannel.isConnected();\n    };\n\n    /**\n     * Join a group and begin keeping track of it. If this method is called multiple times synchronously, it will\n     * batch requests and only make one API call to Respoke.\n     *\n     * You can leave the group by calling `group.leave()`;\n     *\n     * ##### Joining and leaving a group\n     *\n     *      var group;\n     *\n     *      client.join({\n     *          id: \"book-club\",\n     *          onSuccess: function (evt) {\n     *              console.log('I joined', evt.group.id);\n     *              // \"I joined book-club\"\n     *              group = evt.group;\n     *              group.sendMessage({\n     *                  message: 'sup'\n     *              });\n     *          }\n     *      });\n     *\n     *      // . . .\n     *      // Some time later, leave the group.\n     *      // . . .\n     *      group.leave({\n     *          onSuccess: function (evt) {\n     *              console.log('I left', evt.group.id);\n     *              // \"I left book-club\"\n     *          }\n     *      });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.join\n     * @param {object} params\n     * @param {string} params.id - The name of the group.\n     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {respoke.Group.onMessage} [params.onMessage] - Message handler for messages from this group only.\n     * @param {respoke.Group.onJoin} [params.onJoin] - Join event listener for endpoints who join this group only.\n     * @param {respoke.Group.onLeave} [params.onLeave] - Leave event listener for endpoints who leave\n     * this group only.\n     * @returns {Promise<respoke.Group>|undefined} The instance of the respoke.Group which the client joined.\n     * @fires respoke.Client#join\n     */\n    that.join = function (params) {\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            deferred.reject(e);\n            return retVal;\n        }\n\n        if (!params.id) {\n            deferred.reject(new Error(\"Can't join a group with no group id.\"));\n            return retVal;\n        }\n\n        signalingChannel.joinGroup({\n            groupList: [params.id]\n        }).done(function successHandler() {\n            var group;\n            params.signalingChannel = signalingChannel;\n            params.instanceId = instanceId;\n\n            group = that.getGroup({id: params.id});\n\n            if (!group) {\n                group = respoke.Group(params);\n                that.addGroup(group);\n            }\n\n            group.listen('join', params.onJoin);\n            group.listen('leave', params.onLeave);\n            group.listen('message', params.onMessage);\n\n            group.addMember({\n                connection: that.getConnection({\n                    endpointId: that.endpointId,\n                    connectionId: that.connectionId\n                })\n            });\n\n            /**\n             * This event is fired every time the client joins a group. If the client leaves\n             * a group, this event will be fired again on the next time the client joins the group.\n             * @event respoke.Client#join\n             * @type {respoke.Event}\n             * @property {respoke.Group} group\n             * @property {string} name - the event name.\n             */\n            that.fire('join', {\n                group: group\n            });\n            deferred.resolve(group);\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return retVal;\n    };\n\n    /**\n     * Add a Group. This is called when we join a group and need to begin keeping track of it.\n     * @memberof! respoke.Client\n     * @method respoke.Client.addGroup\n     * @param {respoke.Group}\n     * @private\n     */\n    that.addGroup = function (newGroup) {\n        if (!newGroup || newGroup.className !== 'respoke.Group') {\n            throw new Error(\"Can't add group to internal tracking without a group.\");\n        }\n\n        newGroup.listen('leave', function leaveHandler(evt) {\n            newGroup.removeMember({connectionId: evt.connection.id});\n            var endpt = evt.connection.getEndpoint();\n            if (!endpt.hasListeners('presence')) {\n                checkEndpointForRemoval(endpt);\n            }\n        }, true);\n\n        groups.push(newGroup);\n    };\n\n    /**\n     * Get a list of all the groups the client is currently a member of.\n     * @memberof! respoke.Client\n     * @method respoke.Client.getGroups\n     * @returns {Array<respoke.Group>} All of the groups the library is aware of.\n     */\n    that.getGroups = function () {\n        return groups;\n    };\n\n    /**\n     * Find a group by id and return it.\n     *\n     *     var group = client.getGroup({\n     *         id: \"resistance\"\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getGroup\n     * @param {object} params\n     * @param {string} params.id\n     * @param {respoke.Group.onJoin} [params.onJoin] - Receive notification that an endpoint has joined this group.\n     * @param {respoke.Group.onLeave} [params.onLeave] - Receive notification that an endpoint has left this group.\n     * @param {respoke.Group.onMessage} [params.onMessage] - Receive notification that a message has been\n     * received to a group.\n     * @returns {respoke.Group|undefined} The group whose ID was specified.\n     */\n    that.getGroup = function (params) {\n        var group;\n        if (!params || !params.id) {\n            throw new Error(\"Can't get a group without group id.\");\n        }\n\n        groups.every(function eachGroup(grp) {\n            if (grp.id === params.id) {\n                group = grp;\n                return false;\n            }\n            return true;\n        });\n\n        if (group) {\n            group.listen('join', params.onJoin);\n            group.listen('leave', params.onLeave);\n            group.listen('message', params.onMessage);\n        }\n\n        return group;\n    };\n\n    /**\n     * Remove an Endpoint. Since an endpoint can be a member of multiple groups, we can't just remove it from\n     * our list on respoke.Endpoint#leave. We must see if it's a member of any more groups. If it's not\n     * a member of any other groups, we can stop keeping track of it.\n     * @todo TODO Need to account for Endpoints not created as part of a group. These do not need to be\n     * deleted based on group membership.\n     * @memberof! respoke.Client\n     * @method respoke.Client.checkEndpointForRemoval\n     * @param {object} params\n     * @param {string} params.id - The ID of the Endpoint to check for removal.\n     * @private\n     */\n    function checkEndpointForRemoval(params) {\n        params = params || {};\n        if (!params.id) {\n            throw new Error(\"Can't remove endpoint from internal tracking without group id.\");\n        }\n\n        Q.all(groups.map(function eachGroup(group) {\n            return group.getMembers();\n        })).done(function successHandler(connectionsByGroup) {\n            // connectionsByGroup is a two-dimensional array where the first dimension is a group\n            // and the second dimension is a connection.\n            var absent = connectionsByGroup.every(function eachConnectionList(connectionList) {\n                return connectionList.every(function eachConnection(conn) {\n                    return (conn.endpointId !== params.id);\n                });\n            });\n            if (absent) {\n                endpoints.every(function eachEndpoint(ept, index) {\n                    if (ept.id === params.id) {\n                        endpoints.splice(index, 1);\n                        return false;\n                    }\n                    return true;\n                });\n            }\n        });\n    }\n\n    /**\n     * Find an endpoint by id and return the `respoke.Endpoint` object.\n     *\n     * If it is not already cached locally, will be added to the local cache of tracked endpoints,\n     * its presence will be determined, and will be available in `client.getEndpoints()`.\n     *\n     *     var endpoint = client.getEndpoint({\n     *         id: \"dlee\"\n     *     });\n     *\n     * @ignore If the endpoint is not found in the local cache of endpoint objects (see `client.getEndpoints()`),\n     * it will be created. This is useful, for example, in the case of dynamic endpoints where groups are\n     * not in use. Override dynamic endpoint creation by setting `params.skipCreate = true`.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getEndpoint\n     * @param {object} params\n     * @param {string} params.id\n     * @param {respoke.Endpoint.onMessage} [params.onMessage] - Handle messages sent to the logged-in user\n     * from this one Endpoint.\n     * @param {respoke.Endpoint.onPresence} [params.onPresence] - Handle presence notifications from this one\n     * Endpoint.\n     * @arg {boolean} [params.skipCreate] - Skip the creation step and return undefined if we don't yet\n     * @arg {boolean} [params.skipPresence] - Skip registering for this endpoint's presence.\n     * @returns {respoke.Endpoint} The endpoint whose ID was specified.\n     */\n    that.getEndpoint = function (params) {\n        var endpoint;\n        if (!params || !params.id) {\n            throw new Error(\"Can't get an endpoint without endpoint id.\");\n        }\n\n        endpoints.every(function eachEndpoint(ept) {\n            if (ept.id === params.id) {\n                endpoint = ept;\n                return false;\n            }\n            return true;\n        });\n\n        if (!endpoint && params && !params.skipCreate) {\n            params.instanceId = instanceId;\n            params.signalingChannel = signalingChannel;\n            params.resolveEndpointPresence = clientSettings.resolveEndpointPresence;\n            params.addCall = addCall;\n\n            endpoint = respoke.Endpoint(params);\n            endpoints.push(endpoint);\n        }\n\n        if (!endpoint) {\n            return;\n        }\n\n        if (params.skipPresence !== true) {\n            signalingChannel.registerPresence({\n                endpointList: [endpoint.id]\n            }).done(null, function (err) {\n                log.error(\"Couldn't register for presence on\", endpoint.id, err.message);\n            });\n        }\n        endpoint.listen('presence', params.onPresence);\n        endpoint.listen('message', params.onMessage);\n\n        return endpoint;\n    };\n\n    /**\n     * Find a Connection by id and return it.\n     *\n     *     var connection = client.getConnection({\n     *         id: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\"\n     *     });\n     *\n     * @ignore In most cases, if we don't find it we will create it. This is useful\n     * in the case of dynamic endpoints where groups are not in use. Set skipCreate=true\n     * to return undefined if the Connection is not already known.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getConnection\n     * @param {object} params\n     * @param {string} params.connectionId\n     * @param {string} [params.endpointId] - An endpointId to use in the creation of this connection.\n     * @param {respoke.Endpoint.onMessage} [params.onMessage] - Handle messages sent to the logged-in user\n     * from this one Connection.\n     * @param {respoke.Endpoint.onPresence} [params.onPresence] - Handle presence notifications from this one\n     * Connection.\n     * @returns {respoke.Connection} The connection whose ID was specified.\n     */\n    that.getConnection = function (params) {\n        var connection;\n        var endpoint;\n        var endpointsToSearch = endpoints;\n\n        params = params || {};\n        if (!params.connectionId) {\n            throw new Error(\"Can't get a connection without connection id.\");\n        }\n        if (!params.endpointId && !params.skipCreate) {\n            throw new Error(\"Can't create a connection without endpoint id.\");\n        }\n\n        if (params.endpointId) {\n            endpoint = that.getEndpoint({\n                id: params.endpointId,\n                skipPresence: true,\n                skipCreate: params.skipCreate\n            });\n\n            endpointsToSearch = [];\n            if (endpoint) {\n                endpointsToSearch = [endpoint];\n            }\n        }\n\n        endpointsToSearch.every(function eachEndpoint(ept) {\n            connection = ept.getConnection(params);\n            return !connection;\n        });\n\n        if (!connection && !params.skipCreate) {\n            params.instanceId = instanceId;\n            connection = respoke.Connection(params);\n            endpoint.connections.push(connection);\n        }\n\n        return connection;\n    };\n\n    /**\n     * Get the list of **all endpoints** that the library has knowledge of.\n     * These are `respoke.Endpoint` objects, not just the endpointIds.\n     *\n     * The library gains knowledge of an endpoint in two ways:\n     * 1. when an endpoint joins a group that the user (currently logged-in endpoint) is a member of (if group presence is enabled)\n     * 2. when an endpoint that the user (currently logged-in endpoint) is watching*\n     *\n     * *If an endpoint that the library does not know about sends a message to the client, you\n     * can immediately call the `client.getEndpoint()` method on the sender of the message to enable\n     * watching of the sender's endpoint.\n     *\n     *      client.on('message', function (data) {\n     *          if (data.endpoint) {\n     *              // start tracking this endpoint.\n     *              client.getEndpoint({ id: data.endpoint.id });\n     *          }\n     *      });\n     *\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getEndpoints\n     * @returns {Array<respoke.Endpoint>}\n     */\n    that.getEndpoints = function () {\n        return endpoints;\n    };\n\n    return that;\n}; // End respoke.Client\n\n/**\n * Handle sending successfully.\n * @callback respoke.Client.successHandler\n */\n/**\n * Handle joining a group successfully. This callback is called only once when Client.join() is called.\n * @callback respoke.Client.joinHandler\n * @param {respoke.Group} group\n */\n/**\n * Receive notification that the client has joined a group. This callback is called everytime\n * respoke.Client#join is fired.\n * @callback respoke.Client.onJoin\n * @param {respoke.Event} evt\n * @param {respoke.Group} evt.group\n * @param {string} evt.name - the event name.\n */\n/**\n * Receive notification that the client has left a group. This callback is called everytime\n * respoke.Client#leave is fired.\n * @callback respoke.Client.onLeave\n * @param {respoke.Event} evt\n * @param {respoke.Group} evt.group\n * @param {string} evt.name - the event name.\n */\n/**\n * Receive notification that a message has been received. This callback is called every time\n * respoke.Client#message is fired.\n * @callback respoke.Client.onClientMessage\n * @param {respoke.Event} evt\n * @param {respoke.TextMessage} evt.message\n * @param {respoke.Group} [evt.group] - If the message is to a group we already know about,\n * this will be set. If null, the developer can use client.join({id: evt.message.header.channel}) to join\n * the group. From that point forward, Group#message will fire when a message is received as well. If\n * group is undefined instead of null, the message is not a group message at all.\n * @param {string} evt.name - the event name.\n * @param {respoke.Client} evt.target\n */\n/**\n * Receive notification that the client is receiving a call from a remote party. This callback is called every\n * time respoke.Client#call is fired.\n * @callback respoke.Client.onCall\n * @param {respoke.Event} evt\n * @param {respoke.Call} evt.call\n * @param {respoke.Endpoint} evt.endpoint\n * @param {string} evt.name - the event name.\n */\n/**\n * Receive notification that the client is receiving a request for a direct connection from a remote party.\n * This callback is called every time respoke.Client#direct-connection is fired.\n * @callback respoke.Client.onDirectConnection\n * @param {respoke.Event} evt\n * @param {respoke.DirectConnection} evt.directConnection\n * @param {respoke.Endpoint} evt.endpoint\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * Receive notification Respoke has successfully connected to the cloud. This callback is called every time\n * respoke.Client#connect is fired.\n * @callback respoke.Client.onConnect\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Client} evt.target\n */\n/**\n * Receive notification Respoke has successfully disconnected from the cloud. This callback is called every time\n * respoke.Client#disconnect is fired.\n * @callback respoke.Client.onDisconnect\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Client} evt.target\n */\n/**\n * Receive notification Respoke has successfully reconnected to the cloud. This callback is called every time\n * respoke.Client#reconnect is fired.\n * @callback respoke.Client.onReconnect\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Client} evt.target\n */\n/**\n * Handle disconnection to the cloud successfully.\n * @callback respoke.Client.disconnectSuccessHandler\n */\n/**\n * Handle an error that resulted from a method call.\n * @callback respoke.Client.errorHandler\n * @params {Error} err\n */\n/**\n * Handle connection to the cloud successfully.\n * @callback respoke.Client.connectSuccessHandler\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/client.js\n ** module id = 5\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar respoke = require('./respoke');\n\n/**\n * The purpose of the class is to allow multiple types of entities to expose presence functionality.\n *\n * Setting the presence on a client is provided via `client.setPresence({ presence: \"At lunch\" })`.\n *\n * @class respoke.Presentable\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.instanceId\n * @param {string} params.id\n * @returns {respoke.Presentable}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Presentable\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.Presentable\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Presentable';\n    /**\n     * Represents the presence status. Typically a string, but other types are supported.\n     * Defaults to `'unavailable'`.\n     *\n     * **Do not modify this directly** - it won't update presence with Respoke. Use `setPresence()`.\n     *\n     * @memberof! respoke.Presentable\n     * @name presence\n     * @type {string|number|object|Array}\n     * @private\n     */\n    that.presence = 'unavailable';\n\n    /**\n     * @memberof! respoke.Presentable\n     * @name client\n     * @type {respoke.Client}\n     * @private\n     */\n    var client = respoke.getClient(instanceId);\n\n    /**\n     * Set the presence on the object for this session.\n     * \n     * ```\n     * client.setPresence({ presence: 'busy' });\n     * ```\n     * \n     * While technically available on an Endpoint or Connection, this will not trigger\n     * any API changes. The changes will only be reflected locally.\n     *\n     * @memberof! respoke.Presentable\n     * @method respoke.Presentable.setPresence\n     * @param {object} params\n     * @param {string|number|object|Array} [params.presence=available]\n     * @param {string} params.connectionId\n     * @fires respoke.Presentable#presence\n     * @private\n     */\n    that.setPresence = function (params) {\n        var connection;\n        params = params || {};\n        params.presence = params.presence || 'available';\n        params.connectionId = params.connectionId || that.connectionId;\n\n        if (that.className === 'respoke.Client' || that.className === 'respoke.Connection') {\n            that.presence = params.presence;\n            if (that.className === 'respoke.Connection') {\n                that.getEndpoint().resolvePresence();\n            }\n        } else if (that.className === 'respoke.Endpoint') {\n            if (!params.connectionId) {\n                throw new Error(\"Can't set Endpoint presence without a connectionId.\");\n            }\n\n            connection = that.getConnection({connectionId: params.connectionId}) || client.getConnection({\n                connectionId: params.connectionId,\n                skipCreate: false,\n                endpointId: that.id\n            });\n\n            connection.presence = params.presence;\n            that.resolvePresence();\n        }\n\n        /**\n         * This event indicates that the presence for this endpoint has been updated.\n         * @event respoke.Presentable#presence\n         * @type {respoke.Event}\n         * @property {string|number|object|Array} presence\n         * @property {string} name - the event name.\n         * @property {respoke.Presentable} target\n         */\n        that.fire('presence', {\n            presence: that.presence\n        });\n    };\n\n    /**\n     * Get the presence of a Presentable instance.\n     *\n     *      var billy = client.getEndpoint({ id: \"billychia\" });\n     *      var pres = billy.getPresence();\n     *      console.log('Billy is', pres); // \"Billy is available\"\n     *\n     * @memberof! respoke.Presentable\n     * @method respoke.Presentable.getPresence\n     * @returns {string|number|object|array} the current presence of this endpoint.\n     */\n    that.getPresence = function () {\n        return that.presence;\n    };\n\n    return that;\n}; // End respoke.Presentable\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/presentable.js\n ** module id = 6\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar respoke = require('./respoke');\n\n/**\n * A `respoke.Connection` always belongs to an Endpoint.\n *\n * There is a distinction between Endpoint and Connection because an Endpoint can be authenticated\n * from multiple devices, browsers, or browser tabs. Each of these separate authentications is a Connection.\n * A Client can choose to interact with connections of the same endpoint in different ways.\n *\n * @constructor\n * @class respoke.Connection\n * @augments respoke.Presentable\n * @param {object} params\n * @param {string} params.id\n * @returns {respoke.Connection}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Connection\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.Presentable(params);\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name client\n     * @type {respoke.Client}\n     * @private\n     */\n    var client = respoke.getClient(instanceId);\n\n    /**\n     * The connection id.\n     * @memberof! respoke.Connection\n     * @name id\n     * @type {string}\n     */\n    that.id = that.id || that.connectionId;\n    if (!that.id) {\n        throw new Error(\"Can't make a connection without an id.\");\n    }\n    delete that.instanceId;\n    delete that.connectionId;\n\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.Connection\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Connection';\n\n    /**\n     * Send a message to this connection of an endpoint. If the endpoint has multiple connections,\n     * it will only receive the message at this connection.\n     *\n     *     connection.sendMessage({\n     *         message: \"PJ, put that PBR down!\"\n     *     });\n     *\n     * **Using callbacks** will disable promises.\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.sendMessage\n     * @param {object} params\n     * @param {string} params.message\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation\n     * of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        params = params || {};\n        params.connectionId = that.id;\n        return that.getEndpoint().sendMessage(params);\n    };\n\n    /**\n     * Create a new screen sharing call. Screenshares are inherently unidirectional video only. This may change\n     * in the future when Chrome adds the ability to obtain screen video and microphone audio at the same time. For\n     * now, if you also need audio, place a second audio only call.\n     *\n     * The endpoint who calls `connection.startScreenShare` will be the one whose screen is shared. If you'd like to\n     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n     * not the sharer, it is recommened that you use `endpoint.sendMessage` to send a control message to the user\n     * whose screenshare is being requested so that user's app can call `connection.startScreenShare`.\n     *\n     * NOTE: At this time, screen sharing only works with Chrome, and Chrome requires a Chrome extension to\n     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension.\n     * Support for additional browsers will be added in the future.\n     *\n     *     connection.startScreenShare({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startScreenShare\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n     * and the remote party has received the video.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @returns {respoke.Call}\n     */\n    that.startScreenShare = function (params) {\n        client.verifyConnected();\n        params.connectionId = that.id;\n        return that.getEndpoint().startScreenShare(params);\n    };\n\n    /**\n     * Create a new Call for a voice and/or video call this particular connection, only. The Call cannot be answered\n     * by another connection of this Endpoint.\n     *\n     *     connection.startCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {RTCConstraints} [params.constraints]\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n     * video attached to it.\n     * @returns {respoke.Call}\n     */\n    that.startCall = function (params) {\n        params = params || {};\n        params.connectionId = that.id;\n        return that.getEndpoint().startCall(params);\n    };\n\n    /**\n     * Create a new audio-only call.\n     *\n     *     connection.startAudioCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startAudioCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @returns {respoke.Call}\n     */\n    that.startAudioCall = function (params) {\n        client.verifyConnected();\n        params.connectionId = that.id;\n        return that.getEndpoint().startAudioCall(params);\n    };\n\n    /**\n     * Create a new call with audio and video.\n     *\n     *     connection.startVideoCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startVideoCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has\n     * been hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @returns {respoke.Call}\n     */\n    that.startVideoCall = function (params) {\n        client.verifyConnected();\n        params.connectionId = that.id;\n        return that.getEndpoint().startVideoCall(params);\n    };\n\n    /**\n     * Create a new DirectConnection with this particular connection, only. The DirectConnection cannot be answered\n     * by another connection of this Endpoint.  This method creates a new Call as well, attaching this\n     * DirectConnection to it for the purposes of creating a peer-to-peer link for sending data such as messages to\n     * the other endpoint. Information sent through a DirectConnection is not handled by the cloud infrastructure.\n     *\n     *     connection.startDirectConnection({\n     *         onOpen: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startDirectConnection\n     * @param {object} params\n     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess] - Success handler for this\n     * invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {respoke.DirectConnection.onStart} [params.onStart] - A callback for when setup of the direct\n     * connection begins. The direct connection will not be open yet.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - A callback for receiving notification of when\n     * the DirectConnection is open and ready to be used.\n     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n     * connection.\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - A callback for receiving notification of\n     * when the DirectConnection is closed and the two Endpoints are disconnected.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - A callback for receiving messages sent\n     * through the DirectConnection.\n     * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the\n     * request for a direct connection and setup begins.\n     * @returns {respoke.DirectConnection} The DirectConnection which can be used to send data and messages\n     * directly to the other endpoint.\n     */\n    that.startDirectConnection = function (params) {\n        var retVal;\n        var deferred;\n        params = params || {};\n\n        try {\n            client.verifyConnected();\n        } catch (err) {\n            deferred = respoke.Q.defer();\n            retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n            deferred.reject(err);\n            return retVal;\n        }\n\n        params.connectionId = that.id;\n        return that.getEndpoint().startDirectConnection(params);\n    };\n\n    /**\n     * Get the Endpoint that this Connection belongs to.\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.getEndpoint\n     * @returns {respoke.Endpoint}\n     */\n    that.getEndpoint = function () {\n        return client.getEndpoint({\n            id: that.endpointId,\n            skipPresence: true\n        });\n    };\n\n    return that;\n}; // End respoke.Connection\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/connection.js\n ** module id = 7\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\nvar log = respoke.log;\n\n/**\n * `respoke.Endpoint`s are users of a Respoke app.\n * An Endpoint can be a person in a browser or device, or an app using Respoke APIs from a server.\n * A Client can interact with endpoints through messages, audio or video calls, or direct connections.\n * An Endpoint may be authenticated from multiple devices to the same app (each of which is\n * represented by a Connection).\n *\n * ```\n * var jim = client.getEndpoint({ id: 'jim' });\n * ```\n *\n * @constructor\n * @class respoke.Endpoint\n * @augments respoke.Presentable\n * @param {object} params\n * @param {string} params.id\n * @param {string} params.instanceId\n * @param {respoke.client.resolvePresence} [params.resolvePresence] An optional function for resolving presence\n * for an endpoint.\n * @returns {respoke.Endpoint}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Endpoint\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.Presentable(params);\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name client\n     * @type {respoke.Client}\n     * @private\n     */\n    var client = respoke.getClient(instanceId);\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name signalingChannel\n     * @type {respoke.SignalingChannel}\n     * @private\n     */\n    var signalingChannel = params.signalingChannel;\n\n    var addCall = params.addCall;\n\n    delete that.signalingChannel;\n    delete that.instanceId;\n    delete that.connectionId;\n    delete that.addCall;\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.Endpoint\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Endpoint';\n    /**\n     * A direct connection to this endpoint. This can be used to send direct messages.\n     * @memberof! respoke.Endpoint\n     * @name directConnection\n     * @type {respoke.DirectConnection}\n     */\n    that.directConnection = null;\n\n    /**\n     * Array of connections for this endpoint.\n     * @memberof! respoke.Endpoint\n     * @name connections\n     * @type {Array<respoke.Connection>}\n     */\n    that.connections = [];\n    client.listen('disconnect', function disconnectHandler() {\n        that.connections = [];\n    });\n\n    var resolveEndpointPresence = params.resolveEndpointPresence;\n    delete that.resolveEndpointPresence;\n\n    /**\n     * Send a message to the endpoint through the infrastructure.\n     *\n     * ```\n     * endpoint.sendMessage({\n     *     message: \"wassuuuuup\"\n     * });\n     * ```\n     *\n     * **Using callbacks** will disable promises.\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.sendMessage\n     * @param {object} params\n     * @param {string} params.message\n     * @param {string} [params.connectionId]\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of this\n     * method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this method\n     * only.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        var promise;\n        var retVal;\n        params = params || {};\n\n        promise = signalingChannel.sendMessage({\n            connectionId: params.connectionId,\n            message: params.message,\n            recipient: that\n        });\n\n        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n        return retVal;\n    };\n\n    /**\n     * Create a new audio-only call.\n     *\n     *     endpoint.startAudioCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startAudioCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @returns {respoke.Call}\n     */\n    that.startAudioCall = function (params) {\n        params = params || {};\n\n        params.constraints = respoke.convertConstraints(params.constraints, [{\n            video: false,\n            audio: true,\n            optional: [],\n            mandatory: {}\n        }]);\n\n        return that.startCall(params);\n    };\n\n    /**\n     * Create a new call with audio and video.\n     *\n     *     endpoint.startVideoCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startVideoCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @returns {respoke.Call}\n     */\n    that.startVideoCall = function (params) {\n        params = params || {};\n\n        params.constraints = respoke.convertConstraints(params.constraints, [{\n            video: true,\n            audio: true,\n            optional: [],\n            mandatory: {}\n        }]);\n\n        return that.startCall(params);\n    };\n\n    /**\n     * Create a new screen sharing call. Screenshares are inherently unidirectional video only. This may change\n     * in the future when Chrome adds the ability to obtain screen video and microphone audio at the same time. For\n     * now, if you also need audio, place a second audio only call.\n     *\n     * The endpoint who calls `endpoint.startScreenShare` will be the one whose screen is shared. If you'd like to\n     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n     * not the sharer, it is recommened that you use `endpoint.sendMessage` to send a control message to the user\n     * whose screenshare is being requested so that user's app can call `endpoint.startScreenShare`.\n     *\n     * NOTE: At this time, screen sharing only works with Chrome, and Chrome requires a Chrome extension to\n     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension.\n     * Support for additional browsers will be added in the future.\n     *\n     *     endpoint.startScreenShare({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startScreenShare\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n     * and the remote party has received the video.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {string} [params.source] - Pass in what type of mediaSource you want. If omitted, you'll have access\n     * to both the screen and windows. In firefox, you'll have access to the screen only.\n     * @returns {respoke.Call}\n     */\n    that.startScreenShare = function (params) {\n        params = params || {};\n        params.target = 'screenshare';\n\n        if (typeof params.caller !== 'boolean') {\n            params.caller = true;\n        }\n\n        if (params.caller) {\n            params.constraints = respoke.getScreenShareConstraints(params);\n            params.sendOnly = true;\n        } else {\n            params.receiveOnly = true;\n        }\n\n        return that.startCall(params);\n    };\n\n    /**\n     * Create a new call.\n     *\n     *     endpoint.startCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {Array<RTCConstraints>} [params.constraints]\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n     * video attached to it.\n     * @returns {respoke.Call}\n     */\n    that.startCall = function (params) {\n        var call = null;\n        params = params || {};\n\n        params.constraints = respoke.convertConstraints(params.constraints, [{\n            video: true,\n            audio: true,\n            mandatory: {},\n            optional: []\n        }]);\n\n        // If they are requesting a screen share by constraints without having called startScreenShare\n        if (params.target !== 'screenshare' && params.constraints[0] &&\n                respoke.constraintsHasScreenShare(params.constraints[0])) {\n            return that.startScreenShare(params);\n        }\n\n        params.target = params.target || \"call\";\n\n        log.debug('Endpoint.call', params);\n        client.verifyConnected();\n        if (typeof params.caller !== 'boolean') {\n            params.caller = true;\n        }\n\n        if (!that.id) {\n            log.error(\"Can't start a call without endpoint ID!\");\n            return;\n        }\n\n        params.instanceId = instanceId;\n        params.remoteEndpoint = that;\n\n        params.signalOffer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'offer';\n            signalParams.target = params.target;\n            signalParams.recipient = that;\n\n            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n        };\n        params.signalAnswer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'answer';\n            signalParams.target = params.target;\n            signalParams.recipient = that;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n                signalParams.call.hangup({signal: false});\n            });\n        };\n        params.signalConnected = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.connectionId = signalParams.call.connectionId;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalParams.recipient = that;\n            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n                signalParams.call.hangup();\n            });\n        };\n        params.signalModify = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.recipient = that;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalingChannel.sendModify(signalParams).done();\n        };\n        params.signalCandidate = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.recipient = that;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalingChannel.sendCandidate(signalParams).done();\n        };\n        params.signalHangup = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.recipient = that;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalingChannel.sendHangup(signalParams).done();\n        };\n        params.signalReport = function (signalParams) {\n            log.debug(\"Sending debug report\", signalParams.report);\n            signalingChannel.sendReport(signalParams).done();\n        };\n\n        params.signalingChannel = signalingChannel;\n        call = respoke.Call(params);\n        addCall({call: call});\n        return call;\n    };\n\n    /**\n     * Create a new DirectConnection.  This method creates a new Call as well, attaching this DirectConnection to\n     * it for the purposes of creating a peer-to-peer link for sending data such as messages to the other endpoint.\n     * Information sent through a DirectConnection is not handled by the cloud infrastructure.  If there is already\n     * a direct connection open, this method will resolve the promise with that direct connection instead of\n     * attempting to create a new one.\n     *\n     *     endpoint.startDirectConnection({\n     *         onOpen: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startDirectConnection\n     * @param {object} params\n     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess] - Success handler for this\n     * invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {respoke.DirectConnection.onStart} [params.onStart] - A callback for when setup of the direct\n     * connection begins. The direct connection will not be open yet.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - A callback for receiving notification of when\n     * the DirectConnection is open and ready to be used.\n     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n     * connection.\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - A callback for receiving notification of\n     * when the DirectConnection is closed and the two Endpoints are disconnected.\n     * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the\n     * request for a direct connection and setup begins.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - A callback for receiving messages sent\n     * through the DirectConnection.\n     * @param {string} [params.connectionId] - An optional connection ID to use for this connection. This allows\n     * the connection to be made to a specific instance of an endpoint in the case that the same endpoint is logged\n     * in from multiple locations.\n     * @returns {Promise<respoke.DirectConnection>} The DirectConnection which can be used to send data and messages\n     * directly to the other endpoint.\n     */\n    that.startDirectConnection = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n        var call;\n\n        try {\n            client.verifyConnected();\n        } catch (err) {\n            deferred.reject(err);\n            return retVal;\n        }\n\n        if (that.directConnection || params.create === false) {\n            deferred.resolve(that.directConnection);\n            return retVal;\n        }\n\n        if (typeof params.caller !== 'boolean') {\n            params.caller = true;\n        }\n\n        if (!that.id) {\n            deferred.reject(new Error(\"Can't start a direct connection without endpoint ID!\"));\n            return retVal;\n        }\n\n        params.instanceId = instanceId;\n        params.remoteEndpoint = that;\n\n        params.signalOffer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'offer';\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n\n            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n        };\n        params.signalConnected = function (signalParams) {\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n                signalParams.call.hangup();\n            });\n        };\n        params.signalAnswer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n            signalParams.signalType = 'answer';\n            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n                signalParams.call.hangup({signal: false});\n            });\n        };\n        params.signalCandidate = function (signalParams) {\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n            signalingChannel.sendCandidate(signalParams).done();\n        };\n        params.signalHangup = function (signalParams) {\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n            signalingChannel.sendHangup(signalParams).done();\n        };\n        params.signalReport = function (signalParams) {\n            signalParams.report.target = 'directConnection';\n            log.debug(\"Not sending report\");\n            log.debug(signalParams.report);\n        };\n        params.needDirectConnection = true;\n        // Don't include audio in the offer SDP\n        params.offerOptions = {\n            mandatory: {\n                OfferToReceiveAudio: false\n            }\n        };\n\n        params.signalingChannel = signalingChannel;\n        call = respoke.Call(params);\n        addCall({call: call});\n        call.listen('direct-connection', function directConnectionHandler(evt) {\n            that.directConnection = evt.directConnection;\n            if (params.caller !== true) {\n                if (!client.hasListeners('direct-connection') &&\n                        !client.hasListeners('direct-connection') &&\n                        !call.hasListeners('direct-connection')) {\n                    that.directConnection.reject();\n                    deferred.reject(new Error(\"Got an incoming direct connection with no handlers to accept it!\"));\n                    return;\n                }\n\n                deferred.resolve(that.directConnection);\n                that.directConnection.listen('close', function closeHandler(evt) {\n                    that.directConnection = undefined;\n                }, true);\n            }\n        }, true);\n\n        return retVal;\n    };\n\n    /**\n     * Find the presence out of all known connections with the highest priority (most availability)\n     * and set it as the endpoint's resolved presence.\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.resolvePresence\n     * @private\n     */\n    that.resolvePresence = function () {\n\n        var presenceList = that.connections.map(function (connection) {\n            return connection.presence;\n        });\n\n        if (resolveEndpointPresence !== undefined) {\n            that.presence = resolveEndpointPresence(presenceList);\n        } else {\n            var options = ['chat', 'available', 'away', 'dnd', 'xa', 'unavailable'];\n            var idList;\n\n            /*!\n             * Sort the connections array by the priority of the value of the presence of that\n             * connectionId. This will cause the first element in the list to be the id of the\n             * session with the highest priority presence so we can access it by the 0 index.\n             * TODO: If we don't really care about the sorting and only about the highest priority\n             * we could use Array.prototype.every to improve this algorithm.\n             */\n            idList = that.connections.sort(function sorter(a, b) {\n                var indexA = options.indexOf(a.presence);\n                var indexB = options.indexOf(b.presence);\n                // Move it to the end of the list if it isn't one of our accepted presence values\n                indexA = indexA === -1 ? 1000 : indexA;\n                indexB = indexB === -1 ? 1000 : indexB;\n                return indexA < indexB ? -1 : (indexB < indexA ? 1 : 0);\n            });\n\n            if (idList[0]) {\n                that.presence = idList[0].presence;\n            } else {\n                that.presence = 'unavailable';\n            }\n        }\n    };\n\n    /**\n     * Get the Connection with the specified id. The connection ID is optional if only one connection exists.\n     *\n     *     var connection = endpoint.getConnection({\n     *         connectionId: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\"\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.getConnection\n     * @private\n     * @param {object} params\n     * @param {string} [params.connectionId]\n     * @return {respoke.Connection}\n     */\n    that.getConnection = function (params) {\n        var connection = null;\n        params = params || {};\n        if (that.connections.length === 1 &&\n                (!params.connectionId || that.connections[0] === params.connectionId)) {\n            return that.connections[0];\n        }\n\n        if (!params || !params.connectionId) {\n            throw new Error(\"Can't find a connection without the connectionId.\");\n        }\n\n        that.connections.every(function eachConnection(conn) {\n            if (conn.id === params.connectionId) {\n                connection = conn;\n                return false;\n            }\n            return true;\n        });\n\n        return connection;\n    };\n\n    return that;\n}; // End respoke.Endpoint\n/**\n * Handle messages sent to the logged-in user from this one Endpoint.  This callback is called every time\n * respoke.Endpoint#message fires.\n * @callback respoke.Endpoint.onMessage\n * @param {respoke.Event} evt\n * @param {respoke.TextMessage} evt.message - the message\n * @param {respoke.Endpoint} evt.target\n * @param {string} evt.name - the event name\n */\n/**\n * Handle presence notifications from this one Endpoint.  This callback is called every time\n * respoke.Endpoint#message fires.\n * @callback respoke.Endpoint.onPresence\n * @param {respoke.Event} evt\n * @param {string|number|object|Array} evt.presence - the Endpoint's presence\n * @param {respoke.Endpoint} evt.target\n * @param {string} evt.name - the event name\n */\n /**\n * Handle resolving presence for this endpoint\n * @callback respoke.Client.resolveEndpointPresence\n * @param {Array<object>} connectionPresence\n * @returns {object|string|number}\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/endpoint.js\n ** module id = 8\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\n/**\n * A text message and the information needed to route it.\n * @class respoke.TextMessage\n * @constructor\n * @param {object} params\n * @param {string} [params.endpointId] - If sending, endpoint ID of the thing we're sending a message to.\n * @param {string} [params.connectionId] - If sending, connection ID of the thing we're sending a message to.\n * @param {string} [params.message] - If sending, a message to send\n * @param {object} [params.rawMessage] - If receiving, the parsed JSON we got from the server\n * @private\n * @returns {respoke.TextMessage}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = {};\n\n    /**\n     * Parse rawMessage and set attributes required for message delivery.\n     * @memberof! respoke.TextMessage\n     * @method respoke.TextMessage.parse\n     * @private\n     */\n    function parse() {\n        if (params.rawMessage) {\n            try {\n                that.endpointId = params.rawMessage.header.from;\n                that.connectionId = params.rawMessage.header.fromConnection;\n                that.timestamp = params.rawMessage.header.timestamp;\n            } catch (e) {\n                throw new Error(e);\n            }\n            that.message = params.rawMessage.message || params.rawMessage.body;\n            if (params.rawMessage.header.channel) {\n                that.recipient = params.rawMessage.header.channel;\n            }\n        } else {\n            try {\n                that.to = params.endpointId;\n                that.toConnection = params.connectionId;\n                that.requestConnectionReply = (params.requestConnectionReply === true);\n            } catch (e) {\n                throw new Error(e);\n            }\n            that.message = params.message;\n        }\n    }\n\n    parse();\n    return that;\n}; // End respoke.TextMessage\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/textMessage.js\n ** module id = 9\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\n/**\n * A signaling message and the information needed to route it.\n * @class respoke.SignalingMessage\n * @constructor\n * @param {object} params\n * @param {string} [params.fromEndpoint] - If sending, the endpoint ID of the recipient\n * @param {string} [params.fromConnection] - If sending, the connection ID of the recipient\n * @param {string} [params.connectionId] - The connectionId of the endpoint whose answer signal has been accepted.\n * @param {string} [params.signal] - If sending, a message to send\n * @param {respoke.Endpoint} [params.recipient]\n * @param {string} [params.signalType]\n * @param {string} [params.sessionId] - A globally unique ID to identify this call.\n * @param {string} [params.target] - Either 'call' or 'directConnection', TODO remove the need for this.\n * @param {string} [params.callerId] - Human readable caller ID. Not implemented.\n * @param {RTCSessionDescription} [params.sdp]\n * @param {Array<RTCIceCandidate>} [params.iceCandidates]\n * @param {object} [params.offering] - Object describing the media we're offering to send the remote party in a more\n * usable way than SDP. Not implemented.\n * @param {object} [params.requesting] - Object describing the media we're requesting from the remote party in a more\n * usable way than SDP. Not implemented.\n * @param {string} [params.reason] - Human readable reason for hanging up.\n * @param {string} [params.error] - String indicating that a previous signal was malformed or received in the wrong\n * state. Not implemented.\n * @param {string} [params.status] - \"Ringing\". Not implemented.\n * @param {object} [params.rawMessage] - If receiving, the parsed JSON we got from the server\n * @private\n * @returns {respoke.SignalingMessage}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = {};\n    /**\n     * Attributes without which we cannot build a signaling message.\n     * @memberof! respoke.SignalingMessage\n     * @name required\n     * @private\n     * @type {string}\n     */\n    var required = ['recipient', 'signalType', 'sessionId', 'target', 'signalId'];\n    /**\n     * Attributes which we will copy onto the signal if defined.\n     * @memberof! respoke.SignalingMessage\n     * @name required\n     * @private\n     * @type {string}\n     */\n    var allowed = [\n        'signalType', 'sessionId', 'sessionDescription', 'iceCandidates', 'offering', 'target', 'signalId', 'callerId',\n        'requesting', 'reason', 'error', 'status', 'connectionId', 'version'\n    ];\n\n    params.version = '1.0';\n\n    /**\n     * Parse rawMessage and set attributes required for message delivery.\n     * @memberof! respoke.SignalingMessage\n     * @method respoke.SignalingMessage.parse\n     * @private\n     */\n    function parse() {\n        if (params.rawMessage) {\n            try {\n                that = JSON.parse(params.rawMessage.body); // Incoming message\n            } catch (e) {\n                that = params.rawMessage.body;\n            }\n            that.fromType = params.rawMessage.header.fromType;\n            that.fromEndpoint = params.rawMessage.header.from;\n            that.fromConnection = params.rawMessage.header.fromConnection;\n            that.timestamp = params.rawMessage.header.timestamp;\n\n            if (!that.target) {\n                that.target = 'call';\n            }\n        } else {\n            required.forEach(function eachAttr(attr) {\n                if (params[attr] === 0 || !params[attr]) {\n                    throw new Error(\"Can't build a signaling without \" + attr);\n                }\n            });\n\n            allowed.forEach(function eachAttr(attr) {\n                if (params[attr] === 0 || params[attr]) {\n                    that[attr] = params[attr];\n                }\n            });\n        }\n    }\n\n    parse();\n    return that;\n}; // End respoke.SignalingMessage\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/signalingMessage.js\n ** module id = 10\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\n\n/**\n * A `respoke.Group` represents a collection of endpoints.\n *\n * There are methods to communicate with the endpoints at the group level and track\n * their presence in the group.\n *\n * @class respoke.Group\n * @augments respoke.EventEmitter\n * @constructor\n * @param {object} params\n * @param {string} params.instanceId\n * @param {respoke.Group.onJoin} params.onJoin - A callback to receive notifications every time a new\n * endpoint has joined the group. This callback does not get called when the client joins the group.\n * @param {respoke.Group.onMessage} params.onMessage - A callback to receive messages sent to the group from\n * remote endpoints.\n * @param {respoke.Group.onLeave} params.onLeave - A callback to receive notifications every time a new\n * endpoint has left the group. This callback does not get called when the client leaves the group.\n * @returns {respoke.Group}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n\n    var that = respoke.EventEmitter(params);\n    /**\n     * @memberof! respoke.Group\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var client = respoke.getClient(instanceId);\n\n    if (!that.id) {\n        throw new Error(\"Can't create a group without an ID.\");\n    }\n\n    /**\n     * Internal reference to the api signaling channel.\n     * @memberof! respoke.Group\n     * @name signalingChannel\n     * @type respoke.SignalingChannel\n     * @private\n     */\n    var signalingChannel = params.signalingChannel;\n    delete params.signalingChannel;\n\n    /**\n     * The connections to members of this group.\n     * @memberof! respoke.Group\n     * @name endpoints\n     * @type {array<respoke.Connection>}\n     */\n    that.connections = [];\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.Group\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Group';\n    that.listen('join', params.onJoin);\n    /**\n     * Indicates that a message has been sent to this group.\n     * @event respoke.Group#message\n     * @type {respoke.Event}\n     * @property {respoke.TextMessage} message\n     * @property {string} name - The event name.\n     * @property {respoke.Group} target\n     */\n    that.listen('message', params.onMessage);\n    that.listen('leave', params.onLeave);\n    client.listen('disconnect', function disconnectHandler() {\n        that.connections = [];\n    });\n\n    delete that.instanceId;\n    delete that.onMessage;\n    delete that.onPresence;\n    delete that.onJoin;\n    delete that.onLeave;\n\n    /**\n     * Join this group.\n     *\n     *     group.join().done(function () {\n     *         group.sendMessage({\n     *             message: \"Hey, ppl! I'm here!\"\n     *         });\n     *     }, function (err) {\n     *         // Couldn't join the group, possibly permissions error\n     *     });\n     *\n     * **Using callbacks** will disable promises.\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.join\n     * @return {Promise|undefined}\n     * @param {object} params\n     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @fires respoke.Client#join\n     */\n    that.join = function () {\n        var params = {\n            id: that.id\n        };\n        var promise;\n        var deferred;\n        var retVal;\n\n        try {\n            validateConnection();\n        } catch (err) {\n            deferred = Q.defer();\n            retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n            deferred.reject(err);\n            return retVal;\n        }\n\n        promise = client.join(params);\n        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n        return retVal;\n    };\n\n    /**\n     * Leave this group. If this method is called multiple times synchronously, it will batch requests and\n     * only make one API call to Respoke.\n     *\n     *     group.leave({\n     *         onSuccess: function () {\n     *             // good riddance\n     *         },\n     *         onError: function (err) {\n     *             // Couldn't leave the group, possibly a permissions error\n     *         }\n     *     });\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.leave\n     * @param {object} params\n     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @return {Promise|undefined}\n     * @fires respoke.Client#leave\n     */\n    that.leave = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n        try {\n            validateConnection();\n            validateMembership();\n        } catch (err) {\n            deferred.reject(err);\n            return retVal;\n        }\n\n        signalingChannel.leaveGroup({\n            groupList: [that.id]\n        }).done(function successHandler() {\n            that.connections = [];\n            deferred.resolve();\n\n            /**\n             * This event is fired when the client leaves a group.\n             * @event respoke.Client#leave\n             * @type {respoke.Event}\n             * @property {respoke.Group} group\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             * @private\n             */\n            client.fire('leave', {\n                group: that\n            });\n        }, function errorHandler(err) {\n            deferred.reject();\n        });\n        return retVal;\n    };\n\n    /**\n     * Remove a Connection from a Group. This does not change the status of the remote Endpoint, it only changes the\n     * internal representation of the Group membership. This method should only be used internally.\n     * @private\n     * @memberof! respoke.Group\n     * @method respoke.Group.removeMember\n     * @param {object} params\n     * @param {string} [params.connectionId] - Endpoint's connection id\n     * @fires respoke.Group#leave\n     */\n    that.removeMember = function (params) {\n        params = params || {};\n\n        try {\n            validateConnection();\n            validateMembership();\n        } catch (err) {\n            return;\n        }\n\n        if (!params.connectionId) {\n            throw new Error(\"Can't remove a member to the group without it's Connection id.\");\n        }\n\n        that.connections.every(function eachConnection(conn, index) {\n            if (conn.id === params.connectionId) {\n                that.connections.splice(index, 1);\n\n                /**\n                 * This event is fired when a member leaves a group the client is a member of.\n                 * @event respoke.Group#leave\n                 * @type {respoke.Event}\n                 * @property {respoke.Connection} connection - The connection that left the group.\n                 * @property {string} name - The event name.\n                 * @property {respoke.Group} target\n                 */\n                that.fire('leave', {\n                    connection: conn\n                });\n                return false;\n            }\n            return true;\n        });\n    };\n\n    /**\n     * Return true if the logged-in user is a member of this group and false if not.\n     *\n     *     if (group.isJoined()) {\n     *         // I'm a member!\n     *     } else {\n     *         // Maybe join here\n     *     }\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.isJoined\n     * @returns {boolean}\n     */\n    that.isJoined = function () {\n        // connections array contains some connections and ours is among them.\n        return (that.connections.length > 0 && !that.connections.every(function (conn) {\n            return conn.id !== client.connectionId;\n        }));\n    };\n\n    /**\n     * Add a Connection to a group. This does not change the status of the remote Endpoint, it only changes the\n     * internal representation of the Group membership. This method should only be used internally.\n     * @memberof! respoke.Group\n     * @private\n     * @method respoke.Group.addMember\n     * @param {object} params\n     * @param {respoke.Connection} params.connection\n     * @fires respoke.Group#join\n     */\n    that.addMember = function (params) {\n        params = params || {};\n        var absent;\n\n        validateConnection();\n\n        if (!params.connection) {\n            throw new Error(\"Can't add a member to the group without it's Connection object.\");\n        }\n\n        absent = that.connections.every(function eachConnection(conn) {\n            return (conn.id !== params.connection.id);\n        });\n\n        if (absent) {\n            that.connections.push(params.connection);\n            if (params.skipEvent) {\n                return;\n            }\n\n            /**\n             * This event is fired when a member joins a Group that the currently logged-in endpoint is a member\n             * of.\n             * @event respoke.Group#join\n             * @type {respoke.Event}\n             * @property {respoke.Connection} connection - The connection that joined the group.\n             * @property {string} name - The event name.\n             * @property {respoke.Group} target\n             */\n            that.fire('join', {\n                connection: params.connection\n            });\n        }\n    };\n\n    /**\n     * Validate that the client is connected to the Respoke infrastructure.\n     * @memberof! respoke.Group\n     * @method respoke.Group.validateConnection\n     * @private\n     */\n    function validateConnection() {\n        if (!signalingChannel || !signalingChannel.isConnected()) {\n            throw new Error(\"Can't complete request when not connected. Please reconnect!\");\n        }\n    }\n\n    /**\n     * Validate that the client is a member of this group.\n     * @memberof! respoke.Group\n     * @method respoke.Group.validateMembership\n     * @private\n     */\n    function validateMembership() {\n        if (!that.isJoined()) {\n            throw new Error(\"Not a member of this group anymore.\");\n        }\n    }\n\n    /**\n     *\n     * Send a message to all of the endpoints in the group.\n     *\n     *      var group = client.getGroup({ id: 'js-enthusiasts'});\n     *\n     *      group.sendMessage({\n     *          message: \"Cat on keyboard\",\n     *          onSuccess: function (evt) {\n     *              console.log('Message was sent');\n     *          }\n     *      });\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.sendMessage\n     * @param {object} params\n     * @param {string} params.message - The message.\n     * @param {function} params.onSuccess - Success handler indicating that the message was delivered.\n     * @param {function} params.onError - Error handler indicating that the message was not delivered.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        params = params || {};\n        params.id = that.id;\n        var promise;\n\n        try {\n            validateConnection();\n            validateMembership();\n        } catch (err) {\n            promise = Q.reject(err);\n        }\n\n        return respoke.handlePromise(promise ? promise : signalingChannel.publish(params),\n                params.onSuccess, params.onError);\n    };\n\n    /**\n     * Get group members\n     *\n     * Get an array containing all connections subscribed to the group. Accepts onSuccess or onError parameters,\n     * or it returns a promise that you can observe. An endpoint may have more than one connection subscribed to\n\t * a group, so if you're interested in unique endpoints, you may want to filter the connections by endpointId.\n     *\n     *     group.getMembers({\n     *         onSuccess: function (connections) {\n     *             connections.forEach(function (connection) {\n     *                 console.log(connection.endpoint.id);\n     *             });\n     *         }\n     *     });\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.getMembers\n     * @param {object} params\n     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Success handler for this invocation of this method only.\n     * @returns {Promise<Array>} A promise to an array of Connections.\n     */\n    that.getMembers = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n        try {\n            validateConnection();\n            validateMembership();\n        } catch (err) {\n            deferred.reject(err);\n            return retVal;\n        }\n\n        signalingChannel.getGroupMembers({\n            id: that.id\n        }).done(function successHandler(list) {\n            var endpointList = [];\n            list.forEach(function eachMember(params) {\n                var connection = client.getConnection({\n                    endpointId: params.endpointId,\n                    connectionId: params.connectionId,\n                    skipCreate: true\n                });\n\n                if (!connection) {\n                    // Create the connection\n                    connection = client.getConnection({\n                        endpointId: params.endpointId,\n                        connectionId: params.connectionId\n                    });\n                }\n\n                if (endpointList.indexOf(params.endpointId) === -1) {\n                    endpointList.push(params.endpointId);\n                }\n                that.addMember({\n                    connection: connection,\n                    skipEvent: true\n                });\n            });\n\n            deferred.resolve(that.connections);\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return retVal;\n    };\n\n    /**\n     * Experimental. Create a new conference call. The ID will be the group name. Only members of this group will\n     * be permitted to participate in the conference call.\n     *\n     *     group.startConferenceCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.startConferenceCall\n     * @private\n     * @param {object} params\n     * @arg {respoke.Conference.onJoin} [params.onJoin] - Callback for when a participant joins the conference.\n     * @arg {respoke.Conference.onLeave} [params.onLeave] - Callback for when a participant leaves the conference.\n     * @arg {respoke.Conference.onMessage} [params.onMessage] - Callback for when a message is sent to the conference.\n     * @param {respoke.Conference.onMute} [params.onMute] - Callback for when local or remote media is muted or unmuted.\n     * @arg {respoke.Conference.onTopic} [params.onTopic] - Callback for the conference topic changes.\n     * @arg {respoke.Conference.onPresenter} [params.onPresenter] - Callback for when the presenter changes.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n     * and the remote party has received the video.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @returns {respoke.Conference}\n     */\n    that.startConferenceCall = function (params) {\n        var conference = null;\n        params = params || {};\n        params.conferenceId = that.id;\n\n        conference = client.startConferenceCall(params);\n        return conference;\n    };\n\n    return that;\n}; // End respoke.Group\n/**\n * Receive notification that an endpoint has joined this group. This callback is called everytime\n * respoke.Group#join is fired.\n * @callback respoke.Group.onJoin\n * @param {respoke.Event} evt\n * @param {respoke.Connection} evt.connection\n * @param {string} evt.name - the event name.\n * @param {respoke.Group} evt.target\n */\n/**\n * Receive notification that an endpoint has left this group. This callback is called everytime\n * respoke.Group#leave is fired.\n * @callback respoke.Group.onLeave\n * @param {respoke.Event} evt\n * @param {respoke.Connection} evt.connection\n * @param {string} evt.name - the event name.\n * @param {respoke.Group} evt.target\n */\n/**\n * Receive notification that a message has been received to a group. This callback is called every time\n * respoke.Group#message is fired.\n * @callback respoke.Group.onMessage\n * @param {respoke.Event} evt\n * @param {respoke.TextMessage} evt.message\n * @param {string} evt.name - the event name.\n * @param {respoke.Group} evt.target\n */\n/**\n * Get a list of the Connections which are members of this Group.\n * @callback respoke.Group.connectionsHandler\n * @param {Array<respoke.Connection>} connections\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/group.js\n ** module id = 11\n ** module chunks = 0\n **/","'use strict';\n/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar Q = require('q');\nvar io = require('socket.io-client');\nvar respoke = require('./respoke');\nvar log = respoke.log;\n\n/**\n * Returns a timestamp, measured in milliseconds.\n *\n * This method will use high resolution time, if available. Otherwise it falls back to just\n * using the wall clock.\n *\n * @return {number} Number of milliseconds that have passed since some point in the past.\n * @private\n */\nvar now;\nvar performance;\nif (performance && performance.now) {\n    now = performance.now.bind(performance);\n} else if (Date.now) {\n    now = Date.now.bind(Date);\n} else {\n    now = function () {\n        return new Date().getTime();\n    };\n}\n\n/**\n * Container for holding requests that are currently waiting on responses.\n * @returns {PendingRequests}\n * @private\n * @constructor\n */\nvar PendingRequests = function () {\n    /**\n     * Pending requests.\n     * @private\n     * @type {Array}\n     */\n    var contents = [];\n    /**\n     * Counter to provide the next id.\n     * @private\n     * @type {number}\n     */\n    var counter = 0;\n    var that = {};\n\n    /**\n     * Add a new pending request.\n     *\n     * @memberof PendingRequests\n     * @param obj\n     * @returns {*} The key to use for the `remove` method.\n     */\n    that.add = function (obj) {\n        contents[counter] = obj;\n        counter++;\n        return counter;\n    };\n\n    /**\n     * Remove a pending request.\n     *\n     * @param {*} key Key returned from `add` method.\n     */\n    that.remove = function (key) {\n        delete contents[key];\n    };\n\n    /**\n     * Disposes of any currently pending requests, synchronously invoking the provided function on\n     * each.\n     *\n     * @param {function} [fn] Callback for pending requests.\n     */\n    that.reset = function (fn) {\n        if (fn) {\n            contents.forEach(fn);\n        }\n        contents = [];\n    };\n\n    return that;\n};\n\n/**\n * The purpose of this class is to make a method call for each API call\n * to the backend REST interface.  This class takes care of App authentication, websocket connection,\n * Endpoint authentication, and all App interactions thereafter.  Almost all methods return a Promise.\n * @class respoke.SignalingChannel\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.instanceId - client id\n * @private\n * @returns {respoke.SignalingChannel}\n */\nmodule.exports = function (params) {\n    params = params || {};\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name className\n     * @type {string}\n     * @private\n     */\n    that.className = 'respoke.SignalingChannel';\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name client\n     * @private\n     * @type {respoke.Client}\n     */\n    var client = respoke.getClient(instanceId);\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name socket\n     * @private\n     * @type {Socket.io.Socket}\n     */\n    var socket = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name clientSettings\n     * @private\n     * @type {object}\n     */\n    var clientSettings = params.clientSettings;\n    delete that.clientSettings;\n    clientSettings.baseURL = clientSettings.baseURL || 'https://api.respoke.io';\n    /**\n     * A map to avoid duplicate endpoint presence registrations.\n     * @memberof! respoke.SignalingChannel\n     * @name presenceRegistered\n     * @private\n     * @type {object}\n     */\n    var presenceRegistered = {};\n    /**\n     * A reference to the private function Client.actuallyConnect that gets set in SignalingChannel.open() so we\n     * don't have to make it public.\n     * @memberof! respoke.SignalingChannel\n     * @name actuallyConnect\n     * @private\n     * @type {function}\n     */\n    var actuallyConnect = null;\n    /**\n     * Set of promises for any pending requests on the WebSocket.\n     * @private\n     * @type {PendingRequests}\n     */\n    var pendingRequests = PendingRequests();\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name reconnectTimeout\n     * @private\n     * @type {number}\n     */\n    var reconnectTimeout = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name maxReconnectTimeout\n     * @private\n     * @type {number}\n     */\n    var maxReconnectTimeout = 5 * 60 * 1000;\n    /**\n     * Rejects a message if the body size is greater than this. It is enforced servcer side, so changing this\n     * won't make the bodySizeLimit any bigger, this just gives you a senseable error if it's too big.\n     * @memberof! respoke.signalingChannel\n     * @name bodySizeLimit\n     * @private\n     * @type {number}\n     */\n    var bodySizeLimit = 20000;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name appId\n     * @private\n     * @type {string}\n     */\n    var appId = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name endpointId\n     * @private\n     * @type {string}\n     */\n    var endpointId = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name token\n     * @private\n     * @type {string}\n     */\n    var token = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name appToken\n     * @private\n     * @type {string}\n     */\n    var appToken = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name xhr\n     * @private\n     * @type {XMLHttpRequest}\n     */\n    var xhr = new XMLHttpRequest();\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name routingMethods\n     * @private\n     * @type {object}\n     * @desc The methods contained in this object are statically defined methods that are called by constructing\n     * their names dynamically. 'do' + $className + $signalType == 'doCallOffer', et. al.\n     */\n    var routingMethods = {};\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name handlerQueue\n     * @private\n     * @type {object}\n     */\n    var handlerQueue = {\n        'message': [],\n        'signal': [],\n        'presence': []\n    };\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name errors\n     * @private\n     * @type {object}\n     */\n    var errors = {\n        400: \"Can't perform this action: missing or invalid parameters.\",\n        401: \"Can't perform this action: not authenticated.\",\n        403: \"Can't perform this action: not authorized.\",\n        404: \"Item not found.\",\n        409: \"Can't perform this action: item in the wrong state.\",\n        429: \"API rate limit was exceeded.\",\n        500: \"Can't perform this action: server problem.\"\n    };\n\n    /**\n     * Indicate whether the signaling channel has a valid connection to Respoke.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.isConnected\n     * @return {boolean}\n     */\n    that.isConnected = function () {\n        return !!(socket && socket.socket.connected);\n    };\n\n    /**\n     * Indicate whether the signaling channel is currently waiting on a websocket to connect.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.isConnecting\n     * @private\n     * @return {boolean}\n     */\n    function isConnecting() {\n        return !!(socket && socket.socket.connecting);\n    }\n\n    /**\n     * Get the call debug preference.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.isSendingReport\n     * @private\n     * @return {boolean}\n     */\n    that.isSendingReport = function (params) {\n        return clientSettings.enableCallDebugReport;\n    };\n\n    /**\n     * Open a connection to the REST API and validate the app, creating a session token.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.open\n     * @private\n     * @param {object} params\n     * @param {string} [params.token] - The Endpoint's auth token\n     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @return {Promise}\n     */\n    that.open = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug('SignalingChannel.open', params, clientSettings);\n        token = params.token || token;\n        actuallyConnect = typeof params.actuallyConnect === 'function' ? params.actuallyConnect : actuallyConnect;\n\n        Q.fcall(function tokenPromise() {\n            if (clientSettings.developmentMode === true && clientSettings.appId && params.endpointId) {\n                return that.getToken({\n                    appId: clientSettings.appId,\n                    endpointId: params.endpointId\n                });\n            }\n            return null;\n        }).then(function successHandler(newToken) {\n            token = newToken || token;\n            return doOpen({token: token});\n        }).done(function successHandler() {\n            deferred.resolve();\n            log.debug('client', client);\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Get a developer mode token for an endpoint. App must be in developer mode.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getToken\n     * @private\n     * @param {object} params\n     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @return {Promise<String>}\n     */\n    that.getToken = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug('SignalingChannel.getToken', params);\n\n        var callParams = {\n            path: '/v1/tokens',\n            httpMethod: 'POST',\n            parameters: {\n                appId: clientSettings.appId,\n                endpointId: params.endpointId,\n                ttl: 60 * 60 * 6\n            }\n        };\n\n        call(callParams).done(function (response) {\n            if (response.code === 200 && response.result && response.result.tokenId) {\n                token = response.result.tokenId;\n                deferred.resolve(response.result.tokenId);\n                return;\n            }\n            deferred.reject(buildResponseError(response, \"Couldn't get a developer mode token: \" + response.error));\n        }, function (err) {\n            deferred.reject(new Error(\"Couldn't get a developer mode token: \" + err.message));\n        });\n        return deferred.promise;\n    };\n\n    /**\n     * Open a connection to the REST API and validate the app, creating a session token.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.doOpen\n     * @param {object} params\n     * @param {string} params.token - The Endpoint's auth token\n     * @return {Promise}\n     * @private\n     */\n    function doOpen(params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug('SignalingChannel.doOpen', params);\n\n        if (!params.token) {\n            deferred.reject(new Error(\"Can't open connection to Respoke without a token.\"));\n            return deferred.promise;\n        }\n\n        call({\n            path: '/v1/session-tokens',\n            httpMethod: 'POST',\n            parameters: {\n                tokenId: params.token\n            }\n        }).done(function (response) {\n            if (response.code === 200) {\n                appToken = response.result.token;\n                deferred.resolve();\n                log.debug(\"Signaling connection open to\", clientSettings.baseURL);\n            } else {\n                deferred.reject(buildResponseError(response, \"Couldn't authenticate app: \" + response.error));\n            }\n        }, function (err) {\n            log.error(\"Network call failed:\", err.message);\n            deferred.reject(new Error(\"Couldn't authenticate app: \" + err.message));\n        });\n\n        return deferred.promise;\n    }\n\n    /**\n     * Close a connection to the REST API. Invalidate the session token.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.close\n     * @private\n     * @return {Promise}\n     */\n    that.close = function () {\n        var deferred = Q.defer();\n\n        wsCall({\n            path: '/v1/connections/%s/',\n            httpMethod: 'DELETE',\n            objectId: client.endpointId\n        }).fin(function finallyHandler() {\n            return call({\n                path: '/v1/session-tokens',\n                httpMethod: 'DELETE'\n            });\n        }).fin(function finallyHandler() {\n            if (socket) {\n                socket.removeAllListeners();\n                socket.disconnect();\n            }\n            deferred.resolve();\n        }).done();\n\n        return deferred.promise;\n    };\n\n    /**\n     * Generate and send a presence message representing the client's current status. This triggers\n     * the server to send the client's endpoint's presence.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendPresence\n     * @private\n     * @param {object} params\n     * @param {string|number|object|Array} [params.presence=available]\n     * @param {string} [params.status] - Non-enumeration human-readable status.\n     * @param {string} [params.show] - I can't remember what this is.\n     * @returns {Promise}\n     */\n    that.sendPresence = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug(\"Signaling sendPresence\");\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/presence',\n            httpMethod: 'POST',\n            parameters: {\n                'presence': {\n                    show: params.show,\n                    'status': params.status,\n                    type: params.presence || \"available\"\n                }\n            }\n        }).done(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return deferred.promise;\n    };\n\n    /**\n     * Get or create a group in the infrastructure.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getGroup\n     * @private\n     * @returns {Promise<respoke.Group>}\n     * @param {object} params\n     * @param {string} params.name\n     */\n    that.getGroup = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug('signalingChannel.getGroup');\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            httpMethod: 'POST',\n            path: '/v1/channels/',\n            parameters: {\n                name: params.name\n            }\n        }).then(function successHandler(group) {\n            deferred.resolve(group);\n        }, function errorHandler(err) {\n            // Group was already created, just return back the same params we were given.\n            deferred.resolve({id: params.name});\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Leave a group. In order to aggregate subsequent repeated requests, this function, when called synchronously,\n     * will continue to accumulate group ids until the next tick of the event loop, when the request will be\n     * issued. The same instance of Promise is returned each time.\n     * @memberof! respoke.SignalingChannel\n     * @private\n     * @method respoke.SignalingChannel.leaveGroup\n     * @returns {Promise}\n     * @param {object} params\n     * @param {array} params.groupList\n     */\n    that.leaveGroup = (function () {\n        var groups = {};\n        var deferred = Q.defer();\n\n        return function (params) {\n            params = params || {};\n            params.groupList = params.groupList || [];\n\n            var toRun = (Object.keys(groups).length === 0);\n\n            if (!that.isConnected()) {\n                deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n                return deferred.promise;\n            }\n\n            params.groupList.forEach(function (id) {\n                if (typeof id === 'string') {\n                    groups[id] = true;\n                }\n            });\n\n            if (!toRun) {\n                return deferred.promise;\n            }\n\n            setTimeout(function () {\n                // restart accumulation\n                var groupList = Object.keys(groups);\n                groups = {};\n                var saveDeferred = deferred;\n                deferred = Q.defer();\n\n                if (groupList.length === 0) {\n                    saveDeferred.resolve();\n                    return;\n                }\n\n                wsCall({\n                    path: '/v1/groups/',\n                    parameters: {\n                        groups: groupList\n                    },\n                    httpMethod: 'DELETE'\n                }).done(function successHandler() {\n                    saveDeferred.resolve();\n                }, function errorHandler(err) {\n                    saveDeferred.reject(err);\n                });\n            });\n            return deferred.promise;\n        };\n    })();\n\n    /**\n     * Join a group. In order to aggregate subsequent repeated requests, this function, when called synchronously,\n     * will continue to accumulate group ids until the next tick of the event loop, when the request will be\n     * issued. The same instance of Promise is returned each time.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.joinGroup\n     * @private\n     * @returns {Promise}\n     * @param {object} params\n     * @param {array} params.groupList\n     */\n    that.joinGroup = (function () {\n        var groups = {};\n        var deferred = Q.defer();\n\n        return function (params) {\n            params = params || {};\n            params.groupList = params.groupList || [];\n\n            var toRun = (Object.keys(groups).length === 0);\n\n            if (!that.isConnected()) {\n                deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n                return deferred.promise;\n            }\n\n            params.groupList.forEach(function (id) {\n                if (typeof id === 'string') {\n                    groups[id] = true;\n                }\n            });\n\n            if (!toRun) {\n                return deferred.promise;\n            }\n\n            setTimeout(function () {\n                // restart accumulation\n                var groupList = Object.keys(groups);\n                groups = {};\n                var saveDeferred = deferred;\n                deferred = Q.defer();\n\n                if (groupList.length === 0) {\n                    saveDeferred.resolve();\n                    return;\n                }\n\n                wsCall({\n                    path: '/v1/groups/',\n                    parameters: {\n                        groups: groupList\n                    },\n                    httpMethod: 'POST'\n                }).done(function successHandler() {\n                    saveDeferred.resolve();\n                }, function errorHandler(err) {\n                    saveDeferred.reject(err);\n                });\n            });\n            return deferred.promise;\n        };\n    })();\n\n    /**\n     * Publish a message to a group.\n     * @memberof! respoke.SignalingChannel\n     * @private\n     * @method respoke.SignalingChannel.publish\n     * @returns {Promise}\n     * @param {object} params\n     * @param {string} params.id\n     * @param {string} params.message\n     */\n    that.publish = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var message = respoke.TextMessage({\n            endpointId: params.id,\n            message: params.message\n        });\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/channels/%s/publish/',\n            objectId: params.id,\n            httpMethod: 'POST',\n            parameters: message\n        }).done(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return deferred.promise;\n    };\n\n    /**\n     * Register as an observer of presence for the specified endpoint ids. In order to aggregate subsequent repeated\n     * requests, this function, when called synchronously, will continue to accumulate endpoint ids until the next\n     * tick of the event loop, when the request will be issued. The same instance of Promise is returned each time.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.registerPresence\n     * @private\n     * @param {object} params\n     * @param {Array<string>} params.endpointList\n     * @returns {Promise}\n     */\n    that.registerPresence = (function () {\n        var endpoints = {};\n        var deferred = Q.defer();\n\n        return function (params) {\n            params = params || {};\n            params.endpointList = params.endpointList || [];\n            var toRun = (Object.keys(endpoints).length === 0);\n\n            if (!that.isConnected()) {\n                return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            }\n\n            params.endpointList.forEach(function (ep) {\n                if (typeof ep === 'string' && presenceRegistered[ep] !== true) {\n                    endpoints[ep] = true;\n                }\n            });\n\n            if (!toRun) {\n                return deferred.promise;\n            }\n\n            setTimeout(function () {\n                // restart accumulation\n                var endpointList = Object.keys(endpoints);\n                endpoints = {};\n                var saveDeferred = deferred;\n                deferred = Q.defer();\n\n                if (endpointList.length === 0) {\n                    saveDeferred.resolve();\n                    return;\n                }\n\n                wsCall({\n                    httpMethod: 'POST',\n                    path: '/v1/presenceobservers',\n                    parameters: {\n                        endpointList: endpointList\n                    }\n                }).done(function successHandler() {\n                    params.endpointList.forEach(function eachId(id) {\n                        presenceRegistered[id] = true;\n                    });\n                    saveDeferred.resolve();\n                }, function (err) {\n                    saveDeferred.reject(err);\n                });\n                // We could even add a tiny delay like 10ms if we want to get more conservative and\n                // catch asychronous calls to client.getEndpoint() and other methods which call\n                // this method.\n            });\n\n            return deferred.promise;\n        };\n    })();\n\n    /**\n     * Join a group.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getGroupMembers\n     * @private\n     * @returns {Promise<Array>}\n     * @param {object} params\n     * @param {string} params.id\n     */\n    that.getGroupMembers = function (params) {\n        var deferred = Q.defer();\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        if (!params.id) {\n            deferred.reject(new Error(\"Can't get group's endpoints without group ID.\"));\n            return deferred.promise;\n        }\n\n        return wsCall({\n            path: '/v1/channels/%s/subscribers/',\n            objectId: params.id,\n            httpMethod: 'GET'\n        });\n    };\n\n    /**\n     * Send a chat message.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendMessage\n     * @private\n     * @param {object} params\n     * @param {respoke.SignalingMessage} params.message - The string text message to send.\n     * @param {respoke.Endpoint} params.recipient\n     * @param {string} [params.connectionId]\n     * @returns {Promise}\n     */\n    that.sendMessage = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var message = respoke.TextMessage({\n            endpointId: params.recipient.id,\n            connectionId: params.connectionId,\n            message: params.message\n        });\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/messages',\n            httpMethod: 'POST',\n            parameters: message\n        }).done(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return deferred.promise;\n    };\n\n    /**\n     * Send an ACK signal to acknowlege reception of a signal.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendACK\n     * @private\n     * @param {object} params\n     * @param {respoke.SignalingMessage} params.signal\n     * @return {Promise}\n     */\n    that.sendACK = function (params) {\n        var endpoint;\n        params = params || {};\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        if (!params.signal) {\n            return Q.reject(new Error(\"Can't send ACK, no signal was given.\"));\n        }\n\n        endpoint = client.getEndpoint({\n            id: params.signal.fromEndpoint,\n            skipPresence: true\n        });\n        if (!endpoint) {\n            return Q.reject(new Error(\"Can't send ACK, can't get endpoint.\"));\n        }\n\n        return that.sendSignal({\n            recipient: endpoint,\n            signalType: 'ack',\n            signalId: params.signal.signalId,\n            sessionId: params.signal.sessionId,\n            target: params.signal.target,\n            ackedSignalType: params.signal.signalType\n        });\n    };\n\n    /**\n     * Send a signaling message.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendSignal\n     * @private\n     * @param {object} params\n     * @param {respoke.Call} [params.call] - For getting the sessionId & connectionId. Not required for 'ack'.\n     * @return {Promise}\n     */\n    that.sendSignal = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var signal;\n        var to;\n        var toConnection;\n        var toType;\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        if (params.call) {\n            params.sessionId = params.call.id;\n            if (params.call.connectionId) { // the recipient's connectionId\n                params.connectionId = params.call.connectionId;\n            }\n        }\n\n        to = params.recipient.id;\n        toConnection = params.connectionId;\n        toType = params.toType || 'web';\n\n        try {\n            params.signalId = respoke.makeGUID();\n            // This will strip off non-signaling attributes.\n            signal = respoke.SignalingMessage(params);\n        } catch (e) {\n            deferred.reject(e);\n            return deferred.promise;\n        }\n\n        params = {\n            signal: JSON.stringify(signal),\n            to: to,\n            toConnection: toConnection,\n            toType: toType\n        };\n\n        wsCall({\n            path: '/v1/signaling',\n            httpMethod: 'POST',\n            parameters: {\n                signal: JSON.stringify(signal),\n                to: to,\n                toConnection: toConnection,\n                toType: toType\n            }\n        }).done(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Send an ICE candidate.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendCandidate\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @param {string} [params.connectionId]\n     * @param {Array<RTCIceCandidate>} params.iceCandidates - An array of ICE candidate.\n     * @return {Promise}\n     */\n    that.sendCandidate = function (params) {\n        params = params || {};\n        params.signalType = 'iceCandidates';\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Send an SDP.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendSDP\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @param {string} [params.connectionId]\n     * @param {RTCSessionDescription} params.sessionDescription - An SDP to JSONify and send.\n     * @return {Promise}\n     */\n    that.sendSDP = function (params) {\n        params = params || {};\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        if (['offer', 'answer'].indexOf(params.signalType) === -1) {\n            return Q.reject(\"Not an SDP type signal.\");\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Send a call report to the cloud infrastructure.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendReport\n     * @private\n     * @param {object} params\n     * @todo TODO document the params.\n     * @return {Promise}\n     */\n    that.sendReport = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var message = {\n            debugData: params\n        };\n\n        if (!clientSettings.enableCallDebugReport) {\n            log.debug('not sending call debugs - disabled');\n            deferred.resolve();\n            return deferred.promise;\n        }\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/call-debugs',\n            httpMethod: 'POST',\n            parameters: message\n        }).done(function () {\n            deferred.resolve();\n        }, function (err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Send a message hanging up the WebRTC session.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendHangup\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @param {string} [params.connectionId]\n     * @param {string} params.reason - The reason the session is being hung up.\n     * @return {Promise}\n     */\n    that.sendHangup = function (params) {\n        params = params || {};\n        params.signalType = 'bye';\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Send a message to all connection ids indicating we have negotiated a call with one connection.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendConnected\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @return {Promise}\n     */\n    that.sendConnected = function (params) {\n        params = params || {};\n        params.signalType = 'connected';\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Send a message to the remote party indicating a desire to renegotiate media.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendModify\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @param {string} params.action - The state of the modify request, one of: 'initiate', 'accept', 'reject'\n     * @return {Promise}\n     */\n    that.sendModify = function (params) {\n        params = params || {};\n        params.signalType = 'modify';\n\n        if (['initiate', 'accept', 'reject'].indexOf(params.action) === -1) {\n            return Q.reject(\"No valid action in modify signal.\");\n        }\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Uppercase the first letter of the word.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.firstUpper\n     * @private\n     */\n    function firstUpper(str) {\n        return str[0].toUpperCase() + str.slice(1);\n    }\n\n    /**\n     * Route different types of signaling messages via events.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routeSignal\n     * @private\n     * @param {respoke.SignalingMessage} message - A message to route\n     * @fires respoke.Call#offer\n     * @fires respoke.Call#connected\n     * @fires respoke.Call#answer\n     * @fires respoke.Call#iceCandidates\n     * @fires respoke.Call#hangup\n     * @fires respoke.DirectConnection#offer\n     * @fires respoke.DirectConnection#connected\n     * @fires respoke.DirectConnection#answer\n     * @fires respoke.DirectConnection#iceCandidates\n     * @fires respoke.DirectConnection#hangup\n     */\n    that.routeSignal = function (signal) {\n        var target = null;\n        var method = 'do';\n\n        if (signal.signalType !== 'iceCandidates') { // Too many of these!\n            log.debug(signal.signalType, signal);\n        }\n\n        if (signal.target === undefined) {\n            throw new Error(\"target undefined\");\n        }\n\n        // Only create if this signal is an offer.\n        Q.fcall(function makePromise() {\n            var endpoint;\n            /*!\n             * This will return calls regardless of whether they are associated\n             * with a direct connection or not, and it will create a call if no\n             * call is found and this signal is an offer. Direct connections get\n             * created in the next step.\n             */\n            target = client.getCall({\n                id: signal.sessionId,\n                endpointId: signal.fromEndpoint,\n                target: signal.target,\n                conferenceId: signal.conferenceId,\n                type: signal.fromType,\n                create: (signal.target !== 'directConnection' && signal.signalType === 'offer'),\n                callerId: signal.callerId\n            });\n            if (target) {\n                return target;\n            }\n\n            if (signal.target === 'directConnection') {\n                // return a promise\n                endpoint = client.getEndpoint({\n                    id: signal.fromEndpoint,\n                    skipPresence: true\n                });\n\n                if (endpoint.directConnection && endpoint.directConnection.call.id === signal.sessionId) {\n                    return endpoint.directConnection;\n                }\n\n                return endpoint.startDirectConnection({\n                    id: signal.sessionId,\n                    create: (signal.signalType === 'offer'),\n                    caller: (signal.signalType !== 'offer')\n                });\n            }\n        }).done(function successHandler(target) {\n            // target might be null, a Call, or a DirectConnection.\n            if (target) {\n                target = target.call || target;\n            }\n            if (!target || target.id !== signal.sessionId) {\n                // orphaned signal\n                log.warn(\"Couldn't associate signal with a call.\", signal);\n                return;\n            }\n\n            method += firstUpper(signal.signalType);\n            routingMethods[method]({\n                call: target,\n                signal: signal\n            });\n        }, null);\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doOffer\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-offer\n     */\n    routingMethods.doOffer = function (params) {\n        params.call.connectionId = params.signal.fromConnection;\n        /**\n         * Send the `offer` signal into the Call.\n         * @event respoke.Call#signal-offer\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-offer', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doConnected\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-connected\n     */\n    routingMethods.doConnected = function (params) {\n        /**\n         * Send the `connected` signal into the Call.\n         * @event respoke.Call#signal-connected\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-connected', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.dModify\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-modify\n     */\n    routingMethods.doModify = function (params) {\n        /**\n         * Send the `modify` signal into the Call.\n         * @event respoke.Call#signal-modify\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-modify', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doAnswer\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-answer\n     */\n    routingMethods.doAnswer = function (params) {\n        params.call.connectionId = params.signal.fromConnection;\n        /**\n         * Send the `answer` signal into the Call.\n         * @event respoke.Call#signal-answer\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-answer', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doIceCandidates\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-icecandidates\n     */\n    routingMethods.doIceCandidates = function (params) {\n        /**\n         * Send the `icecandidates` signal into the Call.\n         * @event respoke.Call#signal-icecandidates\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-icecandidates', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doBye\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-hangup\n     */\n    routingMethods.doBye = function (params) {\n        /**\n         *  We may receive hangup from one or more parties after connectionId is set if the call is rejected\n         *  by a connection that didn't win the call. In this case, we have to ignore the signal since\n         *  we are already on a call. TODO: this should really be inside PeerConnection.\n         */\n        if (params.call.connectionId && params.call.connectionId !== params.signal.fromConnection) {\n            return;\n        }\n        /**\n         * Send the `hangup` signal into the Call.\n         * @event respoke.Call#signal-hangup\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-hangup', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doUnknown\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     */\n    routingMethods.doUnknown = function (params) {\n        log.error(\"Don't know what to do with\", params.signal.target, \"msg of unknown type\", params.signal.signalType);\n    };\n\n    /**\n     * Add a handler to the connection for messages of different types.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.addHandler\n     * @private\n     * @param {object} params\n     * @param {string} params.type - The type of socket message, i. e., 'message', 'presence', 'join'\n     * @param {function} params.handler - A function to which to pass the message\n     * @todo TODO See if this is necessary anymore\n     */\n    that.addHandler = function (params) {\n        if (socket.socket && socket.socket.open) {\n            socket.on(params.type, params.handler);\n        } else {\n            handlerQueue[params.type].push(params.handler);\n        }\n    };\n\n    /**\n     * Socket handler for pub-sub messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onPubSub\n     * @param {object} message The Socket.io message.\n     * @private\n     * @fires respoke.Group#message\n     * @fires respoke.Client#message\n     */\n    var onPubSub = function onPubSub(message) {\n        var group;\n        var groupMessage;\n\n        if (message.header.from === client.endpointId) {\n            return;\n        }\n\n        groupMessage = respoke.TextMessage({\n            rawMessage: message\n        });\n\n        group = client.getGroup({id: message.header.channel});\n        if (group) {\n            /**\n             * Indicate that a message has been received to a group.\n             * @event respoke.Group#message\n             * @type {respoke.Event}\n             * @property {respoke.TextMessage} message\n             * @property {string} name - the event name.\n             * @property {respoke.Group} target\n             */\n            group.fire('message', {\n                message: groupMessage\n            });\n        }\n        /**\n         * Indicate that a message has been received.\n         * @event respoke.Client#message\n         * @type {respoke.Event}\n         * @property {respoke.TextMessage} message\n         * @property {respoke.Group} [group] - If the message is to a group we already know about,\n         * this will be set. If null, the developer can use client.join({id: evt.message.header.channel}) to join\n         * the group. From that point forward, Group#message will fire when a message is received as well. If\n         * group is undefined instead of null, the message is not a group message at all.\n         * @property {string} name - the event name.\n         * @property {respoke.Client} target\n         */\n        client.fire('message', {\n            message: groupMessage,\n            group: group || null\n        });\n    };\n\n    /**\n     * Socket handler for join messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onJoin\n     * @param {object} message The Socket.io message.\n     * @private\n     */\n    var onJoin = function onJoin(message) {\n        var group;\n        var presenceMessage;\n        var endpoint;\n        var connection;\n\n        if (message.connectionId === client.connectionId) {\n            connection = client.getConnection({connectionId: message.connectionId, endpointId: message.endpointId});\n            group = client.getGroup({id: message.header.channel});\n            if (!group) {\n                group = respoke.Group({\n                    id: message.header.channel,\n                    instanceId: instanceId,\n                    signalingChannel: that\n                });\n                client.addGroup(group);\n            }\n            if (!group.isJoined()) {\n                group.addMember({connection: connection});\n                client.fire('join', {\n                    group: group\n                });\n            }\n        } else {\n\n            endpoint = client.getEndpoint({\n                skipPresence: true,\n                id: message.endpointId,\n                instanceId: instanceId,\n                name: message.endpointId\n            });\n\n            // Handle presence not associated with a channel\n            if (!connection) {\n                endpoint.setPresence({\n                    connectionId: message.connectionId\n                });\n                connection = client.getConnection({\n                    connectionId: message.connectionId,\n                    endpointId: message.endpointId\n                });\n            }\n\n            group = client.getGroup({id: message.header.channel});\n\n            if (group && connection) {\n                group.addMember({connection: connection});\n            } else {\n                log.error(\"Can't add endpoint to group:\", message, group, endpoint, connection);\n            }\n        }\n    };\n\n    /**\n     * Socket handler for leave messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onLeave\n     * @param {object} message The Socket.io message.\n     * @private\n     */\n    var onLeave = function onLeave(message) {\n        var group;\n        var presenceMessage;\n        var endpoint;\n        if (message.connectionId === client.connectionId) {\n            group = client.getGroup({id: message.header.channel});\n            client.fire('leave', {\n                group: group\n            });\n        } else {\n\n            endpoint = client.getEndpoint({\n                skipPresence: true,\n                id: message.endpointId\n            });\n\n            endpoint.connections.every(function eachConnection(conn, index) {\n                if (conn.id === message.connectionId) {\n                    endpoint.connections.splice(index, 1);\n                    return false;\n                }\n                return true;\n            });\n\n            group = client.getGroup({id: message.header.channel});\n            group.removeMember({connectionId: message.connectionId});\n        }\n    };\n\n    /**\n     * Socket handler for presence messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onMessage\n     * @param {object} message The Socket.io message.\n     * @private\n     * @fires respoke.Endpoint#message\n     * @fires respoke.Client#message\n     */\n    var onMessage = function onMessage(message) {\n        var endpoint;\n        message = respoke.TextMessage({rawMessage: message});\n        if (message.endpointId) {\n            endpoint = client.getEndpoint({\n                id: message.endpointId,\n                skipCreate: true\n            });\n        }\n        if (endpoint) {\n            /**\n             * Indicate that a message has been received.\n             * @event respoke.Endpoint#message\n             * @type {respoke.Event}\n             * @property {respoke.TextMessage} message\n             * @property {string} name - the event name.\n             * @property {respoke.Endpoint} target\n             */\n            endpoint.fire('message', {\n                message: message\n            });\n        }\n        /**\n         * Indicate that a message has been received.\n         * @event respoke.Client#message\n         * @type {respoke.Event}\n         * @property {respoke.TextMessage} message\n         * @property {respoke.Endpoint} [endpoint] - If the message is from an endpoint we already know about,\n         * this will be set. If null, the developer can use client.getEndpoint({id: evt.message.endpointId}) to get\n         * the Endpoint. From that point forward, Endpoint#message will fire when a message is received as well.\n         * @property {string} name - the event name.\n         * @property {respoke.Client} target\n         */\n        client.fire('message', {\n            endpoint: endpoint || null,\n            message: message\n        });\n    };\n\n    /**\n     * Create a socket handler for the onConnect event with all the right things in scope.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.generateConnectHandler\n     * @param {respoke.Client.successHandler} [onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [onError] - Error handler for this invocation of this\n     * method only.\n     * @private\n     */\n    var generateConnectHandler = function generateConnectHandler(onSuccess, onError) {\n        onSuccess = onSuccess || function () {};\n        onError = onError || function () {};\n        return function onConnect() {\n            Object.keys(handlerQueue).forEach(function addEachHandlerType(category) {\n                if (!handlerQueue[category]) {\n                    return;\n                }\n\n                handlerQueue[category].forEach(function addEachHandler(handler) {\n                    socket.on(category, handler);\n                });\n                handlerQueue[category] = [];\n            });\n\n            wsCall({\n                path: '/v1/connections',\n                httpMethod: 'POST'\n            }).done(function successHandler(res) {\n                log.debug('connections result', res);\n                client.endpointId = res.endpointId;\n                client.connectionId = res.id;\n                onSuccess();\n            }, onError);\n        };\n    };\n\n    /**\n     * Socket handler for presence messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onPresence\n     * @param {object} message The Socket.io message.\n     * @private\n     */\n    function onPresence(message) {\n        var endpoint;\n        var groups;\n\n        if (message.header.from === client.endpointId) {\n            // Skip ourselves\n            return;\n        }\n        log.debug('socket.on presence', message);\n\n        endpoint = client.getEndpoint({\n            skipPresence: true,\n            id: message.header.from,\n            instanceId: instanceId,\n            name: message.header.from,\n            connection: message.header.fromConnection\n        });\n\n        endpoint.setPresence({\n            connectionId: message.header.fromConnection,\n            presence: message.type\n        });\n\n        if (endpoint.getPresence() === 'unavailable') {\n            groups = client.getGroups();\n            if (groups) {\n                groups.forEach(function eachGroup(group) {\n                    group.removeMember({connectionId: message.header.fromConnection});\n                });\n            }\n        }\n    }\n\n    /*!\n     * On reconnect, start with a reconnect interval of 2000ms. Every time reconnect fails, the interval\n     * is doubled up to a maximum of 5 minutes. From then on, it will attempt to reconnect every 5 minutes forever.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.reconnect\n     * @private\n     */\n    function reconnect() {\n        appToken = undefined;\n        token = undefined;\n        reconnectTimeout = (reconnectTimeout === null) ? 2500 : 2 * reconnectTimeout;\n\n        if (reconnectTimeout > (maxReconnectTimeout)) {\n            reconnectTimeout = maxReconnectTimeout;\n        }\n\n        setTimeout(function doReconnect() {\n            actuallyConnect().then(function successHandler() {\n                reconnectTimeout = null;\n                log.debug('socket reconnected');\n                return Q.all(client.getGroups().map(function iterGroups(group) {\n                    client.join({\n                        id: group.id,\n                        onMessage: clientSettings.onMessage,\n                        onJoin: clientSettings.onJoin,\n                        onLeave: clientSettings.onLeave\n                    });\n                }));\n            }).done(function successHandler(user) {\n                /**\n                 * Indicate that a reconnect has succeeded.\n                 * @event respoke.Client#reconnect\n                 * @property {string} name - the event name.\n                 * @property {respoke.Client}\n                 */\n                client.fire('reconnect');\n            }, function (err) {\n                log.error(\"Couldn't rejoin previous groups.\", err.message, err.stack);\n                reconnect();\n            });\n        }, reconnectTimeout);\n    }\n\n    /**\n     * Authenticate to the cloud and call the handler on state change.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.authenticate\n     * @private\n     * @param {object} params\n     * @return {Promise}\n     */\n    that.authenticate = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var pieces = [];\n        var protocol = null;\n        var host = null;\n        var port = null;\n\n        if (!appToken) {\n            deferred.reject(new Error(\"Can't open a websocket without an app token.\"));\n        }\n\n        pieces = clientSettings.baseURL.split(/:\\/\\//);\n        protocol = pieces[0];\n        pieces = pieces[1].split(/:/);\n        host = pieces[0];\n        port = pieces[1];\n\n        /*!\n         * Try to connect for 2 seconds before failing.\n         * @private\n         */\n        var connectParams = {\n            'connect timeout': 2000,\n            'force new connection': true, // Don't try to reuse old connection.\n            'sync disconnect on unload': true, // have Socket.io call disconnect() on the browser unload event.\n            reconnect: false,\n            host: host,\n            port: port || '443',\n            protocol: protocol,\n            secure: (protocol === 'https'),\n            query: '__sails_io_sdk_version=0.10.0&app-token=' + appToken\n        };\n\n        if (that.isConnected() || isConnecting()) {\n            return;\n        }\n        socket = io.connect(clientSettings.baseURL, connectParams);\n\n        socket.on('connect', generateConnectHandler(function onSuccess() {\n            deferred.resolve();\n        }, function onError(err) {\n            deferred.reject(err);\n        }));\n\n        socket.on('join', onJoin);\n        socket.on('leave', onLeave);\n        socket.on('pubsub', onPubSub);\n        socket.on('message', onMessage);\n        socket.on('presence', onPresence);\n\n        // connection timeout\n        socket.on('connect_failed', function connectFailedHandler(res) {\n            deferred.reject(new Error(\"WebSocket connection failed.\"));\n            log.error('Socket.io connect timeout.', res || \"\");\n            reconnect();\n        });\n\n        // handshake error, 403\n        socket.on('error', function errorHandler(res) {\n            log.debug('Socket.io request failed.', res || \"\");\n            reconnect();\n        });\n\n        that.addHandler({\n            type: 'signal',\n            handler: function signalHandler(message) {\n                var knownSignals = ['offer', 'answer', 'connected', 'modify', 'iceCandidates', 'bye'];\n                var signal = respoke.SignalingMessage({\n                    rawMessage: message\n                });\n\n                if (signal.signalType === 'ack') {\n                    return;\n                }\n\n                if (!signal.target || !signal.signalType || knownSignals.indexOf(signal.signalType) === -1) {\n                    log.error(\"Got malformed signal.\", signal);\n                    throw new Error(\"Can't route signal without target or type.\");\n                }\n\n                that.routeSignal(signal);\n            }\n        });\n\n        socket.on('disconnect', function onDisconnect() {\n            pendingRequests.reset(function (pendingRequest) {\n                log.debug('Failing pending requests');\n                pendingRequest.reject(new Error(\"WebSocket disconnected\"));\n            });\n\n            /**\n             * Indicate that this client has been disconnected from the Respoke service.\n             * @event respoke.Client#disconnect\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n            client.fire('disconnect');\n\n            if (clientSettings.reconnect !== true) {\n                socket = null;\n                return;\n            }\n            reconnect();\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Get ephemeral TURN credentials.  This method is called whenever a call is either\n     * sent or received, prior to creating a PeerConnection\n     *\n     * @memberof! respoke.SignalingChannel\n     * @private\n     * @method respoke.SignalingChannel.getTurnCredentials\n     * @return {Promise<Array>}\n     */\n    that.getTurnCredentials = function () {\n        var deferred = Q.defer();\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            httpMethod: 'GET',\n            path: '/v1/turn'\n        }).done(function successHandler(creds) {\n            var result = [];\n\n            if (!creds || !creds.uris) {\n                deferred.reject(new Error(\"Turn credentials empty.\"));\n                return;\n            }\n\n            creds.uris.forEach(function saveTurnUri(uri) {\n                var cred = null;\n\n                if (!uri) {\n                    return;\n                }\n\n                cred = createIceServer(uri, creds.username, creds.password);\n                result.push(cred);\n            });\n\n            if (result.length === 0) {\n                deferred.reject(new Error(\"Got no TURN credentials.\"));\n            }\n\n            log.debug('TURN creds', result);\n            deferred.resolve(result);\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Construct a websocket API call and return the formatted response and errors. The 'success'\n     * attribute indicates the success or failure of the API call. The 'response' attribute\n     * is an associative array constructed by json.decode. The 'error' attriute is a message.\n     * If the API call is successful but the server returns invalid JSON, error will be\n     * \"Invalid JSON.\" and response will be the unchanged content of the response body.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.wsCall\n     * @private\n     * @param {object} params\n     * @param {string} params.httpMethod\n     * @param {string} params.path\n     * @param {string} params.objectId\n     * @param {object} params.parameters\n     * @return {Promise<object>}\n     */\n    function wsCall(params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var start = now();\n        // Too many of these!\n        var logRequest = params.path.indexOf('messages') === -1 && params.path.indexOf('signaling') === -1;\n        var request;\n        var bodyLength = 0;\n        if (params.parameters) {\n            bodyLength = encodeURI(JSON.stringify(params.parameters)).split(/%..|./).length - 1;\n        }\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        if (!params) {\n            deferred.reject(new Error('No params.'));\n            return deferred.promise;\n        }\n\n        if (!params.path) {\n            deferred.reject(new Error('No request path.'));\n            return deferred.promise;\n        }\n\n        if (bodyLength > bodySizeLimit) {\n            deferred.reject(new Error('Request body exceeds maximum size of ' + bodySizeLimit + ' bytes'));\n            return deferred.promise;\n        }\n\n        params.httpMethod = (params.httpMethod || 'get').toLowerCase();\n\n        if (params.objectId) {\n            params.path = params.path.replace(/\\%s/ig, params.objectId);\n        }\n\n        if (logRequest) {\n            log.debug('socket request', {\n                method: params.httpMethod,\n                path: params.path,\n                parameters: params.parameters\n            });\n        }\n\n        request = {\n            method: params.httpMethod,\n            path: params.path,\n            parameters: params.parameters,\n            tries: 0,\n            durationMillis: 0\n        };\n\n        request.id = pendingRequests.add(deferred);\n\n        function handleResponse(response) {\n            var thisHandler = this; // jshint ignore:line\n            /*!\n             * Response:\n             *  {\n             *      body: {},\n             *      headers: {},\n             *      statusCode: 200\n             *  }\n             */\n            try {\n                response.body = JSON.parse(response.body);\n            } catch (e) {\n                if (typeof response.body !== 'object') {\n                    deferred.reject(new Error(\"Server response could not be parsed!\" + response.body));\n                    return;\n                }\n            }\n\n            if (response.statusCode === 429) {\n                if (request.tries < 3 && deferred.promise.isPending()) {\n                    setTimeout(function () {\n                        start = now();\n                        sendWebsocketRequest(request, handleResponse);\n                    }, 1000); // one day this will be response.interval or something\n                } else {\n                    request.durationMillis = now() - start;\n                    pendingRequests.remove(request.id);\n                    failWebsocketRequest(request, response,\n                            \"Too many retries after rate limit exceeded.\", deferred);\n                }\n                return;\n            }\n\n            request.durationMillis = now() - start;\n            pendingRequests.remove(request.id);\n\n            if ([200, 204, 205, 302, 401, 403, 404, 418].indexOf(thisHandler.status) === -1) {\n                failWebsocketRequest(request, response,\n                        response.body.error || errors[thisHandler.status] || \"Unknown error\", deferred);\n            } else {\n                deferred.resolve(response.body);\n            }\n\n            if (logRequest) {\n                log.debug('socket response', {\n                    method: request.method,\n                    path: request.path,\n                    durationMillis: request.durationMillis,\n                    response: response\n                });\n            }\n        }\n\n        start = now();\n        sendWebsocketRequest(request, handleResponse);\n        return deferred.promise;\n    }\n\n    function failWebsocketRequest(request, response, error, deferred) {\n        if (response && response.body && response.body.error) {\n            if (response.body.details) {\n                error += ' ' + response.body.details;\n            }\n            deferred.reject(buildResponseError(response, error + ' (' + request.method + ' ' + request.path + ')'));\n        } else {\n            deferred.resolve(response.body);\n        }\n    }\n\n    function sendWebsocketRequest(request, handleResponse) {\n        request.tries += 1;\n        socket.emit(request.method, JSON.stringify({\n            url: request.path,\n            data: request.parameters,\n            headers: {'App-Token': appToken}\n        }), handleResponse);\n    }\n\n    /**\n     * Construct an API call and return the formatted response and errors. The 'success'\n     * attribute indicates the success or failure of the API call. The 'response' attribute\n     * is an associative array constructed by json.decode. The 'error' attribute is a message.\n     * If the API call is successful but the server returns invalid JSON, error will be\n     * \"Invalid JSON.\" and response will be the unchanged content of the response body.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.call\n     * @private\n     * @param {object} params\n     * @param {string} params.httpMethod\n     * @param {string} params.objectId\n     * @param {string} params.path\n     * @param {object} params.parameters\n     * @returns {Promise}\n     */\n    function call(params) {\n        /* Params go in the URI for GET, DELETE, same format for\n         * POST and PUT, but they must be sent separately after the\n         * request is opened. */\n        var deferred = Q.defer();\n        var paramString = null;\n        var uri = null;\n        var response = {\n            'result': null,\n            'code': null\n        };\n        var start = now();\n\n        uri = clientSettings.baseURL + params.path;\n\n        if (!params) {\n            deferred.reject(new Error('No params.'));\n            return;\n        }\n\n        if (!params.httpMethod) {\n            deferred.reject(new Error('No HTTP method.'));\n            return;\n        }\n\n        if (!params.path) {\n            deferred.reject(new Error('No request path.'));\n            return;\n        }\n\n        if (params.objectId) {\n            params.path = params.path.replace(/\\%s/ig, params.objectId);\n        }\n\n        if (['GET', 'DELETE'].indexOf(params.httpMethod) > -1) {\n            uri += makeParamString(params.parameters);\n        }\n\n        xhr.open(params.httpMethod, uri);\n        if (appToken) {\n            xhr.setRequestHeader(\"App-Token\", appToken);\n        }\n        if (['POST', 'PUT'].indexOf(params.httpMethod) > -1) {\n            paramString = JSON.stringify(params.parameters);\n            if (paramString.length > bodySizeLimit) {\n                deferred.reject(new Error('Request body exceeds maximum size of ' + bodySizeLimit + ' bytes'));\n                return;\n            }\n            xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n        } else if (['GET', 'DELETE'].indexOf(params.httpMethod) === -1) {\n            deferred.reject(new Error('Illegal HTTP request method ' + params.httpMethod));\n            return;\n        }\n        log.debug('request', {\n            method: params.httpMethod,\n            uri: uri,\n            params: paramString\n        });\n\n        try {\n            xhr.send(paramString);\n        } catch (err) {\n            deferred.reject(err);\n            return;\n        }\n\n        xhr.onreadystatechange = function () {\n            var durationMillis = now() - start;\n            var limit;\n            var unit;\n\n            if (this.readyState !== 4) {\n                return;\n            }\n\n            if (this.status === 0) {\n                deferred.reject(new Error(\"Status is 0: Incomplete request, SSL error, or CORS error.\"));\n                return;\n            }\n\n            if ([200, 204, 205, 302, 401, 403, 404, 418].indexOf(this.status) > -1) {\n                response.code = this.status;\n                response.headers = getAllResponseHeaders(this);\n                response.uri = uri;\n                response.params = params.parameters;\n                response.error = errors[this.status];\n                if (this.response) {\n                    try {\n                        response.result = JSON.parse(this.response);\n                    } catch (e) {\n                        response.result = this.response;\n                        response.error = \"Invalid JSON.\";\n                    }\n                }\n                log.debug('response', {\n                    method: params.httpMethod,\n                    durationMillis: durationMillis,\n                    response: response\n                });\n                deferred.resolve(response);\n            } else if (this.status === 429) {\n                unit = getResponseHeader(this, 'RateLimit-Time-Units');\n                limit = getResponseHeader(this, 'RateLimit-Limit');\n                deferred.reject(buildResponseError(response, \"Rate limit of \" + limit + \"/\" + unit +\n                    \" exceeded. Try again in 1 \" + unit + \".\"));\n            } else {\n                deferred.reject(buildResponseError(response, 'unexpected response ' + this.status));\n            }\n        };\n\n        return deferred.promise;\n    }\n\n    /**\n     * Turn key/value and key/list pairs into an HTTP URL parameter string.\n     * var1=value1&var2=value2,value3,value4\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.makeParamString\n     * @private\n     * @param {object} params - Arbitrary collection of strings and arrays to serialize.\n     * @returns {string}\n     */\n    function makeParamString(params) {\n        var strings = [];\n        if (!params) {\n            return '';\n        }\n\n        Object.keys(params).forEach(function formatParam(name) {\n            var value = params[name];\n            /* Skip objects -- We won't know how to name these. */\n            if (value instanceof Array) {\n                strings.push([name, value.join(',')].join('='));\n            } else if (typeof value !== 'object' && typeof value !== 'function') {\n                strings.push([name, value].join('='));\n            }\n        });\n\n        if (strings.length > 0) {\n            return '?' + strings.join('&');\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * Tries to retrieve a single header value from an XHR response. If the header is disallowed,\n     * or does not exist, will return null. Otherwise returns the value of the header.\n     *\n     * The CORS spec does not define what the browser should do in the case of a request for a\n     * disallowed header, but at least Chrome throws an exception.\n     *\n     * @param {object} xhrResponse The response of an XMLHttpRequest\n     * @param {string} header The name of the header to retrieve the value for\n     * @returns {string|null} The value(s) of the header, or null if disallowed or unavailable.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getResponseHeader\n     * @private\n     */\n    function getResponseHeader(xhrResponse, header) {\n        try {\n            return xhrResponse.getResponseHeader(header);\n        } catch (e) {\n            return null;\n        }\n    }\n\n    /**\n     * Retrieves all headers from an XHR response as key/val pairs\n     *\n     * @param {object} xhrResponse The response of an XMLHttpRequest\n     * @returns {*} the key/val pairs of the response headers\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getAllResponseHeaders\n     * @private\n     */\n    function getAllResponseHeaders(xhrResponse) {\n        var result = {};\n        var headers;\n        var pairs;\n\n        headers = xhrResponse.getAllResponseHeaders();\n        if (!headers) {\n            return result;\n        }\n\n        // 1 header per line (cr+lf)\n        pairs = headers.split('\\u000d\\u000a');\n        pairs.forEach(function (pair) {\n            var key;\n            var val;\n\n            // key separated from value by ': '\n            // value may contain ': ', so using indexOf instead of split\n            var index = pair.indexOf('\\u003a\\u0020');\n            if (index > 0) {\n                key = pair.substring(0, index);\n                val = pair.substring(index + 2);\n                result[key] = val;\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     * Creates an Error with the supplied `message` and, if available, the `Request-Id` header\n     * from the supplied `response`.\n     *\n     * @param {object} res\n     * @param {object} [res.headers]\n     * @param {string} [res.headers.Request-Id] The requestId to append to the Error message\n     * @param {string} message The message the Error should be constructed with\n     * @returns {Error} the constructed Error object\n     * @memberof respoke.SignalingChannel\n     * @method respoke.SignalingChannel.buildResponseError\n     * @api private\n     */\n    function buildResponseError(res, message) {\n        var requestId = res && res.headers && res.headers['Request-Id'];\n        if (requestId) {\n            message += ' [Request-Id: ' + requestId + ']';\n        }\n\n        return new Error(message);\n    }\n\n    return that;\n}; // End respoke.SignalingChannel\n/**\n * Handle an error that resulted from a method call.\n * @callback respoke.SignalingChannel.errorHandler\n * @params {Error} err\n */\n/**\n * Handle sending successfully.\n * @callback respoke.SignalingChannel.sendHandler\n */\n/**\n * Receive a group.\n * @callback respoke.SignalingChannel.groupHandler\n * @param {respoke.Group}\n */\n/**\n * Receive a list of groups.\n * @callback respoke.SignalingChannel.groupListHandler\n * @param {Array}\n */\n/**\n * Receive a list of TURN credentials.\n * @callback respoke.SignalingChannel.turnSuccessHandler\n * @param {Array}\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/signalingChannel.js\n ** module id = 12\n ** module chunks = 0\n **/","\"use strict\";\n/*jshint bitwise: false*/\n\n/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar Airbrake = require('airbrake-js');\nvar log = require('loglevel');\nlog.setLevel(log.levels.WARN);\n\nvar originalFactory = log.methodFactory;\nlog.methodFactory = function logMethodFactory(methodName, logLevel) {\n    var logMethod = originalFactory(methodName, logLevel);\n    var errorReporter;\n\n    if (!window.skipErrorReporting && methodName === 'error') {\n        var airbrake = new Airbrake({\n            projectId: '98133',\n            projectKey: 'cd3e085acc5e554658ebcdabd112a6f4'\n        });\n        errorReporter = function (message) {\n            airbrake.push({ error: { message: message } });\n        };\n    } else {\n        errorReporter = function () { };\n    }\n\n    return function (message) {\n        var args = Array.prototype.slice.call(arguments);\n        var reporterMessage = args.join(' ');\n\n        args.unshift('[Respoke]');\n        logMethod.apply(this, args);\n        errorReporter(reporterMessage);\n    };\n};\n\nrequire('./deps/adapter');\n\n/**\n * `respoke` is a global static class.\n *\n *\n * Include the [latest version](https://cdn.respoke.io/respoke.min.js) or\n * [choose a previous release](http://cdn.respoke.io/list.html).\n *\n * Or use `npm install --save respoke`.\n *\n * Interact with Respoke primarily via [`respoke.Client`](respoke.Client.html):\n *\n *      var client = respoke.createClient();\n *\n *\n * **Development mode without brokered auth**\n *\n *      var client = respoke.createClient({\n *          appId: \"XXXXXXX-my-app-id-XXXXXX\",\n *          developmentMode: true,\n *          endpointId: \"billy\"\n *      });\n *\n *      client.listen('connect', function () {\n *          console.log('connected to respoke!');\n *      });\n *\n *      client.listen('error', function (err) {\n *          console.error('Connection to Respoke failed.', err);\n *      });\n *\n *      client.connect();\n *\n *\n * **Production mode with brokered auth**\n *\n *      var client = respoke.createClient();\n *\n *      client.listen('connect', function () {\n *          console.log('connected to respoke!');\n *      });\n *\n *      client.listen('error', function (err) {\n *          console.error('Connection to Respoke failed.', err);\n *      });\n *\n *      // Respoke auth token obtained by your server.\n *      // This is how you control who can connect to Respoke app.\n *      // See API docs for POST [base]/tokens\n *      var tokenId = \"XXXX-XXXX-brokered-auth-token-XXXXX\";\n *\n *      // connect to respoke with the token\n *      client.connect({\n *          token: tokenId\n *      });\n *\n *      // fetch a new token from your server if it expires\n *      client.listen('disconnect', function (evt) {\n *          // fetch another token from your server.\n *          var newTokenId = \"XXXX-XXXX-brokered-auth-token2-XXXXX\";\n *          client.connect({\n *              token: newTokenId\n *          });\n *      });\n *\n *\n *\n * ### Event listeners vs callback handlers\n *\n * There are two ways to attach listeners. It is highly recommended that you choose one pattern\n * and stick to it throughout your app.\n *\n * For every `event-name`, there is a corresponding callback `onEventName`.\n *\n * **With a listener**\n *\n *      var client = respoke.createClient();\n *      client.listen('connect', function () { });\n *\n * **or with a callback**\n *\n *      var client = respoke.createClient({\n *          // other options go here\n *\n *          onConnect: function () { }\n *      });\n *\n *\n * @namespace respoke\n * @class respoke\n * @global\n * @link https://cdn.respoke.io/respoke.min.js\n */\n\nvar EventEmitter = require('./event');\nvar respoke = module.exports = EventEmitter({\n    buildNumber: 'NO BUILD NUMBER',\n    streams: [],\n    Q: require('q')\n});\n\nrespoke.Q.longStackSupport = true;\nrespoke.Q.stackJumpLimit = 5;\nrespoke.Q.longStackJumpLimit = 20;\nrespoke.Q.stopUnhandledRejectionTracking();\n\n/**\n * A map of respoke.Client instances available for use. This is useful if you would like to separate some\n * functionality of your app into a separate Respoke app which would require a separate appId.\n * @type {boolean}\n */\nrespoke.instances = {};\n\n/**\n * Indicate whether the user's browser is Chrome and requires the Respoke Chrome extension to do screen sharing.\n * @type {boolean}\n * @private\n */\nrespoke.needsChromeExtension = !!(window.chrome && !window.opera && navigator.webkitGetUserMedia);\n\n/**\n * Indicate whether the user's browser is Firefox and requires the Respoke Firefox extension to do screen sharing.\n * @type {boolean}\n * @private\n */\nrespoke.needsFirefoxExtension = window.webrtcDetectedBrowser === 'firefox';\n\n/**\n * Indicate whether the user has a Respoke Chrome extension installed and running correcty on this domain.\n * @type {boolean}\n * @private\n */\nrespoke.hasChromeExtension = false;\n\n/**\n * Indicate whether the user has a Respoke Firefox extension installed and running correcty on this domain.\n * @type {boolean}\n * @private\n */\nrespoke.hasFirefoxExtension = false;\n\n/**\n * This method will be overridden in the case that an extension or plugin is available for screen sharing.\n *\n * @static\n * @private\n * @memberof respoke\n */\nrespoke.chooseDesktopMedia = function () {\n    log.warn(\"Screen sharing is not implemented for this browser.\");\n};\n\n/**\n * Indicate whether we are dealing with node-webkit, and expose chooseDesktopMedia if so\n * @type {boolean}\n * @private\n */\nrespoke.isNwjs = (function () {\n    var gui;\n    var isNwjs = !!((typeof process !== 'undefined') && (typeof global !== 'undefined') &&\n        global.window && global.window.nwDispatcher);\n\n    if (isNwjs) {\n        // expose native node-webkit chooseDesktopMedia (requires nw.js 0.12+)\n        gui = window.nwDispatcher.requireNwGui();\n        respoke.chooseDesktopMedia = function (data, callback) {\n            // make data param optional\n            if (!callback && (typeof data === 'function')) {\n                callback = data;\n                data = null;\n            }\n\n            /*!\n             * mediaSources can be one of 'window', 'screen', or 'tab', or an array with multiples\n             * https://developer.chrome.com/extensions/desktopCapture\n             */\n            var mediaSources = data && data.source ? [data.source] : ['window', 'screen'];\n\n            gui.Screen.Init();\n            gui.Screen.chooseDesktopMedia(mediaSources, function (sourceId) {\n                callback({\n                    type: 'respoke-source-id',\n                    sourceId: sourceId\n                });\n            });\n        };\n    }\n\n    return isNwjs;\n})();\n\n/**\n * Create an Event. This is used in the Chrome/Firefox extensions to communicate between the library and extension.\n * @type {function}\n * @private\n */\nrespoke.extEvent = function (type, data) {\n    var evt = document.createEvent(\"CustomEvent\");\n    evt.initCustomEvent(type, true, true, data);\n    return evt;\n};\n\n/**\n * `\"v0.0.0\"`\n *\n * The respoke.min.js version.\n *\n * Past versions can be found at [cdn.respoke.io/list.html](http://cdn.respoke.io/list.html)\n * @type {string}\n */\nrespoke.version = respoke.buildNumber + \"\";\n\nrespoke.log = log;\nrespoke.Class = require('./class');\nrespoke.EventEmitter = EventEmitter;\nrespoke.Client = require('./client');\nrespoke.Presentable = require('./presentable');\nrespoke.Connection = require('./connection');\nrespoke.Endpoint = require('./endpoint');\nrespoke.TextMessage = require('./textMessage');\nrespoke.SignalingMessage = require('./signalingMessage');\nrespoke.Group = require('./group');\nrespoke.SignalingChannel = require('./signalingChannel');\nrespoke.DirectConnection = require('./directConnection');\nrespoke.PeerConnection = require('./peerConnection');\nrespoke.CallState = require('./callState');\nrespoke.Call = require('./call');\nrespoke.LocalMedia = require('./localMedia');\nrespoke.RemoteMedia = require('./remoteMedia');\nrespoke.Conference = require('./conference');\n\n/*!\n * Get information from the Respoke Screen Sharing Chrome extension if it is installed.\n */\nfunction chromeScreenSharingExtensionReady(evt) {\n    var data = evt.detail;\n    if (data.available !== true) {\n        return;\n    }\n\n    respoke.hasChromeExtension = true;\n    respoke.chooseDesktopMedia = function (params, callback) {\n        if (!callback) {\n            throw new Error(\"Can't choose desktop media without callback parameter.\");\n        }\n\n        function sourceIdListener(evt) {\n            var data = evt.detail;\n\n            respoke.screenSourceId = data.sourceId;\n            callback(data);\n            document.removeEventListener(\"respoke-source-id\", sourceIdListener);\n        }\n\n        document.dispatchEvent(respoke.extEvent('ct-respoke-source-id', {\n            source: params.source ? [params.source] : ['screen', 'window']\n        }));\n\n        document.addEventListener(\"respoke-source-id\", sourceIdListener);\n    };\n\n    respoke.fire('extension-loaded', {\n        type: 'screen-sharing'\n    });\n\n    log.info(\"Respoke Screen Share Chrome extension available for use.\");\n}\n\n// TODO: remove 'respoke-available' event listener on next major version bump\ndocument.addEventListener('respoke-available', chromeScreenSharingExtensionReady);\ndocument.addEventListener('respoke-chrome-screen-sharing-available', chromeScreenSharingExtensionReady);\ndocument.addEventListener('respoke-firefox-screen-sharing-available', function (evt) {\n\n    var data = evt.detail;\n    if (data !== 'available') {\n        return;\n    }\n\n    respoke.hasFirefoxExtension = true;\n\n    respoke.fire('extension-loaded', {\n        type: 'screen-sharing'\n    });\n\n    log.info(\"Respoke Screen Share Firefox extension available for use.\");\n});\n\n/**\n * This is one of two possible entry points for interating with the library.\n *\n * This method creates a new Client object\n * which represents your user's connection to your Respoke app.\n *\n * This method **automatically calls client.connect(params)** after the client is created.\n *\n * @static\n * @memberof respoke\n * @param {object} params Parameters to the respoke.Client constructor.\n * @param {string} [params.appId]\n * @param {string} [params.baseURL]\n * @param {string} [params.token]\n * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n * operation and will limit the services you will be able to use.\n * @param {boolean} [params.reconnect=false] - Whether or not to automatically reconnect to the Respoke service\n * when a disconnect occurs.\n * @param {function} [params.onSuccess] - Success handler for this invocation of this method only.\n * @param {function} [params.onError] - Error handler for this invocation of this method only.\n * @param {function} [params.onJoin] - Callback for when this client's endpoint joins a group.\n * @param {function} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n * @param {function} [params.onMessage] - Callback for when any message is received from anywhere on the system.\n * @param {function} [params.onDisconnect] - Callback for Client disconnect.\n * @param {function} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n * @param {function} [params.onCall] - Callback for when this client's user receives a call.\n * @param {function} [params.onDirectConnection] - Callback for when this client's user receives a request for a\n * direct connection.\n * @param {boolean} [params.enableCallDebugReport=true] - Optional flag defaulting to true which allows sending\n * debugging information.\n * @returns {respoke.Client}\n */\nrespoke.connect = function (params) {\n    var client = respoke.Client(params);\n    client.connect(params);\n    return client;\n};\n\n/**\n * Getter for the respoke client.\n *\n * You can have more than one active client, so this method provides a way to retrieve a specific instance.\n *\n * @static\n * @memberof respoke\n * @param {number} id The Client ID.\n * @returns {respoke.Client}\n */\nrespoke.getClient = function (id) {\n    if (id === undefined) {\n        log.debug(\"Can't call getClient with no client ID.\", new Error().stack);\n    }\n    if (!respoke.instances[id]) {\n        log.debug(\"No client instance with id\", id);\n    }\n    return respoke.instances[id];\n};\n\n/**\n * This is one of two possible entry points for interating with the library.\n *\n * This method creates a new Client object which represents your user's connection to your Respoke app.\n *\n * It **does NOT automatically call the client.connect() method** after the client is created.\n *\n * The `params` argument is the same as `respoke.connect(params)`.\n *\n * @static\n * @memberof respoke\n * @param {object} params Parameters to respoke.Client - same as respoke.connect()\n * @returns {respoke.Client}\n */\nrespoke.createClient = function (params) {\n    var client;\n    params = params || {};\n    if (params.instanceId) {\n        client = respoke.getClient(params.instanceId);\n        if (client) {\n            return client;\n        }\n    }\n    return respoke.Client(params);\n};\n\n/**\n * Build a closure from a listener that will ensure the listener can only be called once.\n * @static\n * @private\n * @memberof respoke\n * @param {function} func\n * @return {function}\n */\nrespoke.callOnce = function (func) {\n    return (function () {\n        var called = false;\n        return function () {\n            if (called === false) {\n                func.apply(null, arguments);\n                called = true;\n            }\n        };\n    })();\n};\n\n/**\n * @static\n * @private\n * @memberof respoke\n * @returns {number}\n */\nrespoke.makeGUID = function () {\n    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n    var uuid = new Array(36);\n    var rnd = 0;\n    var r;\n    for (var i = 0; i < 36; i += 1) {\n        if (i === 8 || i === 13 ||  i === 18 || i === 23) {\n            uuid[i] = '-';\n        } else if (i === 14) {\n            uuid[i] = '4';\n        } else {\n            if (rnd <= 0x02) {\n                rnd = 0x2000000 + (Math.random() * 0x1000000) | 0;\n            }\n            r = rnd & 0xf;\n            rnd = rnd >> 4;\n            uuid[i] = chars[(i === 19) ? (r & 0x3) | 0x8 : r];\n        }\n    }\n    return uuid.join('');\n};\n\n/**\n * This method is used internally to attach handlers to promises that are returned by many methods in the library.\n * It's not recommended that this method be used by developers and apps.\n * @private\n * @static\n * @memberof respoke\n * @param {Promise} promise\n * @param {function} onSuccess\n * @param {function} onError\n * @returns {Promise|undefined}\n */\nrespoke.handlePromise = function (promise, onSuccess, onError) {\n    var returnUndef = false;\n    if (onSuccess || onError) {\n        returnUndef = true;\n    }\n\n    onSuccess = typeof onSuccess === 'function' ? onSuccess : function () {};\n    onError = typeof onError === 'function' ? onError : function () {};\n    promise.done(onSuccess, onError);\n    return (returnUndef ? undefined : promise);\n};\n\n/**\n * Does the browser support `UserMedia`?\n * @static\n * @memberof respoke\n * @returns {boolean}\n */\nrespoke.hasUserMedia = function () {\n    return (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia) instanceof Function;\n};\n\n/**\n * Does the browser support `RTCPeerConnection`?\n * @static\n * @memberof respoke\n * @returns {boolean}\n */\nrespoke.hasRTCPeerConnection = function () {\n    return (window.RTCPeerConnection || window.webkitRTCPeerConnection ||\n            window.mozRTCPeerConnection) instanceof Function;\n};\n\n/**\n * Does the browser support `WebSocket`?\n * @static\n * @memberof respoke\n * @returns {boolean}\n */\nrespoke.hasWebsocket = function () {\n    return (window.WebSocket || window.webkitWebSocket || window.MozWebSocket) instanceof Function;\n};\n\n/**\n * Does the browser have Screen Sharing enabled via browser extensions?\n * @static\n * @memberof respoke\n * @returns {boolean}\n */\nrespoke.hasScreenShare = function () {\n    return respoke.hasChromeExtension || respoke.hasFirefoxExtension;\n};\n\n/**\n * Clone an object.\n * @static\n * @memberof respoke\n * @private\n * @param {Object} source - The object to clone\n * @returns {Object}\n */\nrespoke.clone = function (source) {\n    if (source) {\n        return JSON.parse(JSON.stringify(source));\n    }\n    return source;\n};\n\n/**\n * Compares two objects for equality\n * @static\n * @memberof respoke\n * @private\n * @param {Object} a\n * @param {Object} b\n * @returns {boolean}\n */\nrespoke.isEqual = function (a, b) {\n    var aKeys;\n    var i;\n\n    //check if arrays\n    if (a && b && a.hasOwnProperty('length') && b.hasOwnProperty('length') && a.splice && b.splice) {\n        if (a.length !== b.length) {\n            //short circuit if arrays are different length\n            return false;\n        }\n\n        for (i = 0; i < a.length; i += 1) {\n            if (!respoke.isEqual(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    if (typeof a === 'object' && typeof b === 'object' && Object.keys(a).length === Object.keys(b).length) {\n        aKeys = Object.keys(a);\n        for (i = 0; i < aKeys.length; i += 1) {\n            if (!respoke.isEqual(a[aKeys[i]], b[aKeys[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    return a === b;\n};\n\n/**\n * Count the number of MediaStreams indicated by the SDP\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {number}\n * @private\n */\nrespoke.sdpStreamCount = function (sdp) {\n    var matches;\n    var resolvedMatches = {};\n\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasAudio called with no parameters.\");\n    }\n\n    matches = sdp.match(/mslabel:(.*)/gi);\n\n    if (!matches) {\n        return 0;\n    }\n\n    matches.forEach(function (line) {\n        resolvedMatches[line] = true;\n    });\n    return Object.keys(resolvedMatches).length;\n};\n\n/**\n * Does the sdp indicate an audio stream?\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {boolean}\n * @private\n */\nrespoke.sdpHasAudio = function (sdp) {\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasAudio called with no parameters.\");\n    }\n    return (sdp.indexOf('m=audio') !== -1 && sdp.indexOf('a=recvonly') === -1);\n};\n\n/**\n * Does the sdp indicate a video stream?\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {boolean}\n * @private\n */\nrespoke.sdpHasVideo = function (sdp) {\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasVideo called with no parameters.\");\n    }\n    return (sdp.indexOf('m=video') !== -1 && sdp.indexOf('a=recvonly') === -1);\n};\n\n/**\n * Does the sdp indicate a data channel?\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {boolean}\n * @private\n */\nrespoke.sdpHasDataChannel = function (sdp) {\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasDataChannel called with no parameters.\");\n    }\n    return sdp.indexOf('m=application') !== -1;\n};\n\n/**\n * Does the sdp indicate the creator is sendOnly?\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {boolean}\n * @private\n */\nrespoke.sdpHasSendOnly = function (sdp) {\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasSendOnly called with no parameters.\");\n    }\n    return sdp.indexOf('a=sendonly') !== -1;\n};\n\n/**\n * Does the sdp indicate the creator is receiveOnly?\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {boolean}\n * @private\n */\nrespoke.sdpHasReceiveOnly = function (sdp) {\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasReceiveOnly called with no parameters.\");\n    }\n    return sdp.indexOf('a=recvonly') !== -1;\n};\n\n/**\n * Do the constraints indicate an audio stream?\n * @static\n * @memberof respoke\n * @params {RTCConstraints}\n * @returns {boolean}\n * @private\n */\nrespoke.constraintsHasAudio = function (constraints) {\n    if (!constraints) {\n        throw new Error(\"respoke.constraintsHasAudio called with no parameters.\");\n    }\n    return (constraints.audio === true);\n};\n\n/**\n * Does the constraints indicate a video stream?\n * @static\n * @memberof respoke\n * @params {RTCConstraints}\n * @returns {boolean}\n * @private\n */\nrespoke.constraintsHasVideo = function (constraints) {\n    if (!constraints) {\n        throw new Error(\"respoke.constraintsHasVideo called with no parameters.\");\n    }\n    return (constraints.video === true || typeof constraints.video === 'object');\n};\n\n/**\n * Does the constraints indicate a screenshare?\n * @static\n * @memberof respoke\n * @params {RTCConstraints}\n * @returns {boolean}\n * @private\n */\nrespoke.constraintsHasScreenShare = function (constraints) {\n    if (!constraints) {\n        throw new Error(\"respoke.constraintsHasScreenShare called with no parameters.\");\n    }\n\n    return (constraints.video && constraints.video.mandatory &&\n            (constraints.video.mandatory.chromeMediaSource || constraints.video.mediaSource));\n};\n\n/**\n * Convert old-style constraints parameter into a constraints array.\n * @static\n * @memberof respoke\n * @params {Array<RTCConstraints>|RTCConstraints} [constraints]\n * @params {Array<RTCConstraints>} [defaults]\n * @returns {Array<RTCConstraints>}\n * @private\n */\nrespoke.convertConstraints = function (constraints, defaults) {\n    constraints = constraints || [];\n    defaults = defaults || [];\n\n    if (!constraints.splice) {\n        if (typeof constraints === 'object') {\n            constraints = [constraints];\n        } else {\n            constraints = [];\n        }\n    }\n\n    if (constraints.length === 0 && defaults.length > 0) {\n        return defaults;\n    }\n\n    return constraints;\n};\n\n/**\n * Queue items until a trigger is called, then process them all with an action. Before trigger, hold items for\n * processing. After trigger, process new items immediately.\n * @static\n * @memberof respoke\n * @returns {Array}\n * @private\n */\nrespoke.queueFactory = function () {\n    var queue = [];\n    // action replaces Array.push when trigger is called. Thrown errors will be caught and logged.\n    queue.trigger = function (action) {\n        if (!action) {\n            throw new Error(\"Trigger function requires an action parameter.\");\n        }\n\n        function safeAction(item) {\n            try {\n                action(item);\n            } catch (err) {\n                log.error(\"Error calling queue action.\", err);\n            }\n        }\n        queue.forEach(safeAction);\n        queue.length = 0;\n        queue.push = safeAction;\n    };\n\n    return queue;\n};\n\n/**\n * Retrieve browser-specific WebRTC getUserMedia constraints needed to start a screen sharing call.\n *\n * @memberof respoke\n * @static\n * @param {object} [params]\n * @param {string} [params.source] The media source name to pass to firefox\n * @param {RTCConstraints|Array<RTCConstraints>} [params.constraints] constraints to use as a base\n * @returns {Array<RTCConstraints>}\n * @private\n */\nrespoke.getScreenShareConstraints = function (params) {\n    params = params || {};\n    var convertedConstraints = respoke.convertConstraints(params.constraints, [{\n        audio: true,\n        video: {},\n        mandatory: {},\n        optional: []\n    }]);\n\n    var screenConstraint = convertedConstraints[0];\n    screenConstraint.audio = false;\n    screenConstraint.video = typeof screenConstraint.video === 'object' ? screenConstraint.video : {};\n\n    if (respoke.needsChromeExtension || respoke.isNwjs) {\n        screenConstraint.audio = false;\n        screenConstraint.video.optional = Array.isArray(screenConstraint.video.optional) ?\n            screenConstraint.video.optional : [];\n        screenConstraint.video.mandatory = typeof screenConstraint.video.mandatory === 'object' ?\n            screenConstraint.video.mandatory : {};\n        screenConstraint.video.mandatory.chromeMediaSource = 'desktop';\n        screenConstraint.video.mandatory.maxWidth = typeof screenConstraint.video.mandatory.maxWidth === 'number' ?\n            screenConstraint.video.mandatory.maxWidth : 2000;\n        screenConstraint.video.mandatory.maxHeight = typeof screenConstraint.video.mandatory.maxHeight === 'number' ?\n            screenConstraint.video.mandatory.maxHeight : 2000;\n\n        if (screenConstraint.video.optional.length > 0) {\n            screenConstraint.video.optional.forEach(function (thing) {\n                thing.googTemporalLayeredScreencast = true;\n            });\n        } else {\n            screenConstraint.video.optional[0] = {\n                googTemporalLayeredScreencast: true\n            };\n        }\n    } else {\n        // firefox, et. al.\n        screenConstraint.video.mediaSource = params.source || 'screen';\n    }\n\n    return convertedConstraints;\n};\n\n/**\n * Retrieve a started instance of `respoke.LocalMedia` containing a screen share stream. Useful if you\n * want to prepare the stream prior to starting a screen share.\n *\n *     respoke.getScreenShareMedia().then(function (localMedia) {\n *         document.getElementById('#video').appendChild(localMedia.element);\n *         group.listen('join', function (evt) {\n *             evt.connection.startScreenShare({\n *                 outgoingMedia: localMedia\n *             });\n *         });\n *     }).catch(function (err) {\n *         console.log(err);\n *     });\n *\n * @static\n * @memberof respoke\n * @param {object} params\n * @param {string} [params.source] - The source you would like to use for your screen share. Values vary by browser.\n *  In Chrome, acceptable values are one of 'screen', 'window', or 'tab'.\n *  In Firefox, acceptable values are one of 'screen', 'window', or 'application'.\n * @param {RTCConstraints|Array<RTCConstraints>} [params.constraints] - constraints to use as a base\n * @param {HTMLVideoElement} [params.element] - Pass in an optional html video element to have local\n *  video attached to it.\n * @param {function} [params.onSuccess] Upon success, called with instance of `respoke.LocalMedia`\n * @param {function} [params.onError] Upon failure, called with the error that occurred.\n * @returns {Promise|undefined}\n * @private\n */\nrespoke.getScreenShareMedia = function (params) {\n    params = params || {};\n\n    var deferred = respoke.Q.defer();\n\n    var criteria = {\n        source: params.source,\n        constraints: respoke.clone(params.constraints)\n    };\n\n    var localMedia = respoke.LocalMedia({\n        hasScreenShare: true,\n        constraints: respoke.getScreenShareConstraints(criteria)[0],\n        source: params.source,\n        element: params.element\n    });\n\n    function localMediaStreamReceivedHandler() {\n        localMedia.ignore('error', localMediaErrorHandler);\n        deferred.resolve(localMedia);\n    }\n\n    function localMediaErrorHandler(evt) {\n        localMedia.ignore('stream-received', localMediaStreamReceivedHandler);\n        deferred.reject(evt);\n    }\n\n    localMedia.once('stream-received', localMediaStreamReceivedHandler);\n    localMedia.once('error', localMediaErrorHandler);\n    localMedia.start();\n\n    return respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/respoke.js\n ** module id = 13\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\nvar log = respoke.log;\n\n/**\n * WebRTC PeerConnection. This class handles all the state and connectivity for Call and DirectConnection.\n * This class cannot be used alone, but is instantiated by and must be given media by either Call, DirectConnection,\n * or the not-yet-implemented ScreenShare.\n * @class respoke.PeerConnection\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.instanceId - client id\n * @param {boolean} [params.forceTurn] - If true, delete all 'host' and 'srvflx' candidates and send only 'relay'\n * candidates.\n * @param {boolean} [params.disableTurn] - If true, delete all 'relay' candidates and send only 'host' and 'srvflx'\n * candidates.\n * @param {respoke.Call} params.call\n * @param {string} params.connectionId - The connection ID of the remoteEndpoint.\n * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n * @param {function} params.signalModify - Signaling action from SignalingChannel.\n * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n * @param {function} params.signalReport - Signaling action from SignalingChannel.\n * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n * @param {respoke.Call.onHangup} [params.onHangup] - Callback for the developer to be notified about hangup.\n * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for the developer to receive\n * statistics about the call. This is only used if call.getStats() is called and the stats module is loaded.\n * @param {object} [params.pcOptions]\n * @param {object} [params.offerOptions]\n * @returns {respoke.PeerConnection}\n */\n\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.PeerConnection';\n\n    /**\n     * Whether or not we will send a 'hangup' signal to the other side during hangup.\n     * @memberof! respoke.PeerConnection\n     * @name toSendHangup\n     * @type {respoke.Endpoint}\n     */\n    var toSendHangup;\n\n    /**\n     * @memberof! respoke.PeerConnection\n     * @private\n     * @name pc\n     * @type RTCPeerConnection\n     * @desc The RTCPeerConnection as provided by the browser API. All internal state, networking functionality, and\n     * raw data transfer occurs within the PeerConnection.\n     */\n    var pc = null;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name defModify\n     * @private\n     * @type {Promise}\n     * @desc Used in the state machine to trigger methods or functions whose execution depends on the reception,\n     * handling, or sending of some information.\n     */\n    var defModify;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name previewLocalMedia\n     * @private\n     * @type {respoke.Call.previewLocalMedia}\n     * @desc A callback provided by the developer that we'll call after receiving local media and before\n     * approve() is called.\n     */\n    var previewLocalMedia = typeof params.previewLocalMedia === 'function' ? params.previewLocalMedia : undefined;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name candidateSendingQueue\n     * @private\n     * @type {array}\n     * @desc An array to save candidates between offer and answer so that both parties can process them simultaneously.\n     */\n    var candidateSendingQueue = respoke.queueFactory();\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name candidateReceivingQueue\n     * @private\n     * @type {array}\n     * @desc An array to save candidates between offer and answer so that both parties can process them simultaneously.\n     */\n    var candidateReceivingQueue = respoke.queueFactory();\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name client\n     * @private\n     * @type {respoke.Client}\n     */\n    var client = respoke.getClient(instanceId);\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalOffer\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalOffer = params.signalOffer;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalConnected\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalConnected = params.signalConnected;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalModify\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalModify = params.signalModify;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalAnswer\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalAnswer = params.signalAnswer;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalHangup\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalHangup = respoke.callOnce(params.signalHangup);\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalReport\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalReport = params.signalReport;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalCandidateOrig\n     * @private\n     * @type {function}\n     * @desc A temporary function saved from params in order to construct the candidate signaling function.\n     */\n    var signalCandidateOrig = params.signalCandidate;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalCandidate\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed from the one passed to us by the signaling channel with additions\n     * to facilitate candidate logging.\n     */\n    function signalCandidate(params) {\n        if (!pc) {\n            return;\n        }\n\n        params.iceCandidates = [params.candidate];\n        signalCandidateOrig(params);\n        that.report.candidatesSent.push({candidate: params.candidate});\n    }\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name sdpExpectedStreamCount\n     * @private\n     * @type {number}\n     */\n    that.sdpExpectedStreamCount = 0;\n\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name offerOptions\n     * @private\n     * @type {object}\n     */\n    var offerOptions = params.offerOptions || {};\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name pcOptions\n     * @private\n     * @type {object}\n     */\n    var pcOptions = params.pcOptions || {\n        optional: [\n            { DtlsSrtpKeyAgreement: true },\n            { RtpDataChannels: false }\n        ]\n    };\n\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name report\n     * @type {object}\n     */\n    that.report = {\n        callStarted: 0,\n        callStopped: 0,\n        callerendpoint: that.call.caller ? client.name : that.call.remoteEndpoint.id,\n        callerconnection: that.call.caller ? client.id : that.call.connectionId,\n        calleeendpoint: that.call.caller ? that.call.remoteEndpoint.id : client.id,\n        calleeconnection: that.call.caller ? that.call.connectionId : client.connectionId,\n        sessionId: that.call.id,\n        lastSDPString: '',\n        sdpsSent: [],\n        sdpsReceived: [],\n        candidatesSent: [],\n        candidatesReceived: [],\n        userAgent: navigator.userAgent,\n        os: navigator.platform\n    };\n\n    /**\n     * Start the process of network and media negotiation. Called after local video approved.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.initOffer\n     * @fires respoke.PeerConnection#initOffer\n     * @private\n     */\n    function initOffer() {\n        if (!pc) {\n            return;\n        }\n\n        if (that.state.receiveOnly) {\n            makeOptionsReceiveOnly(offerOptions);\n        }\n\n        if (that.state.sendOnly) {\n            makeOptionsSendOnly(offerOptions);\n        }\n\n        log.info('creating offer', offerOptions);\n        pc.createOffer(saveOfferAndSend, function errorHandler(p) {\n            log.error('createOffer failed');\n        }, offerOptions);\n    }\n\n    function makeOptionsReceiveOnly(options) {\n        if (navigator.webkitGetUserMedia) {\n            options.mandatory = {\n                OfferToReceiveVideo: true,\n                OfferToReceiveAudio: true,\n                OfferToSendVideo: false,\n                OfferToSendAudio: false\n            };\n        } else {\n            options.offerToReceiveVideo = true;\n            options.offerToReceiveAudio = true;\n            options.offerToSendVideo = false;\n            options.offerToSendAudio = false;\n        }\n    }\n\n    function makeOptionsSendOnly(options) {\n        if (navigator.webkitGetUserMedia) {\n            options.mandatory = {\n                OfferToSendVideo: true,\n                OfferToSendAudio: true,\n                OfferToReceiveVideo: false,\n                OfferToReceiveAudio: false\n            };\n        } else {\n            options.offerToSendVideo = true;\n            options.offerToSendAudio = true;\n            options.offerToReceiveVideo = false;\n            options.offerToReceiveAudio = false;\n        }\n    }\n\n    /**\n     * Process a remote offer if we are not the caller. This is necessary because we don't process the offer until\n     * the callee has answered the call.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.processOffer\n     * @param {RTCSessionDescriptor}\n     * @returns {Promise}\n     */\n    that.processOffer = function (oOffer) {\n        if (!pc) {\n            return;\n        }\n        log.debug('processOffer', oOffer);\n\n        that.report.sdpsReceived.push(oOffer);\n        that.report.lastSDPString = oOffer.sdp;\n\n        //set flags for audio / video being offered\n        that.sdpExpectedStreamCount = respoke.sdpStreamCount(oOffer.sdp);\n        that.call.hasDataChannel = respoke.sdpHasDataChannel(oOffer.sdp);\n\n        try {\n            pc.setRemoteDescription(new RTCSessionDescription(oOffer),\n                function successHandler() {\n                    if (!pc) {\n                        return;\n                    }\n\n                    processReceivingQueue();\n                    log.debug('set remote desc of offer succeeded');\n                    pc.createAnswer(function successHandler(oSession) {\n                        that.state.processedRemoteSDP = true;\n                        saveAnswerAndSend(oSession);\n                    }, function errorHandler(err) {\n                        err = new Error(\"Error creating SDP answer.\" + err.message);\n                        that.report.callStoppedReason = err.message;\n                        /**\n                         * This event is fired on errors that occur during call setup or media negotiation.\n                         * @event respoke.Call#error\n                         * @type {respoke.Event}\n                         * @property {string} reason - A human readable description about the error.\n                         * @property {respoke.Call} target\n                         * @property {string} name - the event name.\n                         */\n                        that.call.fire('error', {\n                            message: err.message\n                        });\n                        log.error('create answer failed');\n                        that.report.callStoppedReason = 'setRemoteDescription failed at answer.';\n                        that.close();\n                    });\n                }, function errorHandler(err) {\n                    err = new Error('Error calling setRemoteDescription on offer I received.' + err.message);\n                    that.report.callStoppedReason = err.message;\n                    /**\n                     * This event is fired on errors that occur during call setup or media negotiation.\n                     * @event respoke.Call#error\n                     * @type {respoke.Event}\n                     * @property {string} reason - A human readable description about the error.\n                     * @property {respoke.Call} target\n                     * @property {string} name - the event name.\n                     */\n                    that.call.fire('error', {\n                        message: err.message\n                    });\n                }\n            );\n        } catch (err) {\n            var newErr = new Error(\"Exception calling setRemoteDescription on offer I received.\" + err.message);\n            that.report.callStoppedReason = newErr.message;\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.call.fire('error', {\n                message: newErr.message\n            });\n        }\n    };\n\n    /**\n     * Return media stats. Since we have to wait for both the answer and offer to be available before starting\n     * statistics, we'll return a promise for the stats object.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.getStats\n     * @returns {Promise<{respoke.MediaStatsParser}>|undefined}\n     * @param {object} params\n     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onSuccess] - Success handler for this\n     * invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @fires respoke.PeerConnection#stats\n     */\n    function getStats(params) {\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n        if (!respoke.MediaStats) {\n            deferred.reject(new Error(\"Statistics module is not loaded.\"));\n            return retVal;\n        }\n\n        function onConnect() {\n            var stats = respoke.MediaStatsParser({\n                peerConnection: pc,\n                interval: params.interval,\n                onStats: function statsHandler(stats) {\n                    if (!pc) {\n                        return;\n                    }\n\n                    /**\n                     * This event is fired every 5 seconds by default, configurable by the 'interval' property to\n                     * `call.startStats` and reports the current state of media statistics.\n                     * @event respoke.PeerConnection#stats\n                     * @type {respoke.Event}\n                     * @property {object} stats - an object with stats in it.\n                     * @property {string} name - the event name.\n                     * @property {respoke.PeerConnection}\n                     */\n                    that.fire('stats', {\n                        stats: stats\n                    });\n                }\n            });\n            that.listen('close', function closeHandler(evt) {\n\n                stats.stopStats();\n            }, true);\n            deferred.resolve();\n        }\n\n        if (!pc) {\n            that.once('stream-received', onConnect);\n        } else {\n            onConnect();\n        }\n\n        return retVal;\n    }\n\n    if (respoke.MediaStats) {\n        that.getStats = getStats;\n    }\n\n    /**\n     * Create the RTCPeerConnection and add handlers. Process any offer we have already received.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.init\n     */\n    that.init = function init() {\n        log.debug('PC.init');\n\n        if (pc) {\n            return;\n        }\n\n        that.report.callStarted = new Date().getTime();\n\n        pc = new RTCPeerConnection(that.servers, pcOptions);\n        pc.onicecandidate = onIceCandidate;\n        pc.onnegotiationneeded = onNegotiationNeeded;\n        pc.oniceconnectionstatechange = onIceConnectionStateChange;\n        pc.onaddstream = function onaddstream(evt) {\n            /**\n             * Indicate the RTCPeerConnection has received remote media.\n             * @event respoke.PeerConnection#remote-stream-received\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('remote-stream-received', {\n                stream: evt.stream\n            });\n        };\n        pc.onremovestream = function onremovestream(evt) {\n            /**\n             * Indicate the remote side has stopped sending media.\n             * @event respoke.PeerConnection#remote-stream-removed\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('remote-stream-removed', {\n                stream: evt.stream\n            });\n        };\n        pc.ondatachannel = function ondatachannel(evt) {\n            /**\n             * CAUTION: This event is only called for the callee because RTCPeerConnection#ondatachannel\n             * is only called for the callee.\n             * @event respoke.PeerConnection#direct-connection\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('direct-connection', {\n                channel: evt.channel\n            });\n        };\n\n        that.state.listen('offering:entry', function (evt) {\n            if (that.state.caller) {\n                initOffer();\n            }\n        });\n    };\n\n    /**\n     * Return an array of remote media streams.\n     * @muremberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.getRemoteStreams\n     */\n    that.getRemoteStreams = function () {\n        if (!pc) {\n            return [];\n        }\n        return pc.getRemoteStreams.apply(pc, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Return an array of local media streams.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.getLocalStreams\n     */\n    that.getLocalStreams = function () {\n        if (!pc) {\n            return [];\n        }\n        return pc.getLocalStreams.apply(pc, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Create a data channel.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.createDataChannel\n     */\n    that.createDataChannel = function () {\n        if (!pc) {\n            return;\n        }\n        return pc.createDataChannel.apply(pc, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.addStream\n     * Expose addStream.\n     * @param {RTCMediaStream}\n     */\n    that.addStream = function (stream) {\n        if (!pc) {\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.call.fire('error', {\n                message: \"Got local stream in a precall state.\"\n            });\n            return;\n        }\n        pc.addStream(stream);\n    };\n\n    /**\n     * Process a local ICE Candidate\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.onIceCandidate\n     * @private\n     * @param {RTCIceCandidate}\n     */\n    function onIceCandidate(oCan) {\n        var candidate = oCan.candidate; // {candidate: ..., sdpMLineIndex: ... }\n        if (!pc || !candidate || !candidate.candidate) {\n            return;\n        }\n\n        if (that.forceTurn === true && candidate.candidate.indexOf(\"typ relay\") === -1) {\n            log.debug(\"Dropping candidate because forceTurn is on.\");\n            return;\n        } else if (that.disableTurn === true && candidate.candidate.indexOf(\"typ relay\") !== -1) {\n            log.debug(\"Dropping candidate because disableTurn is on.\");\n            return;\n        }\n\n        candidateSendingQueue.push(candidate);\n    }\n\n    /**\n     * Handle ICE state change\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.onIceConnectionStateChange\n     * @private\n     */\n    function onIceConnectionStateChange(evt) {\n        if (!pc) {\n            return;\n        }\n\n        if (pc.iceConnectionState === 'connected') {\n            /**\n             * Indicate that we've successfully connected to the remote side. This is only helpful for the\n             * outgoing connection.\n             * @event respoke.PeerConnection#connect\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('connect');\n        }\n    }\n\n    /**\n     * Handle renegotiation\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.onNegotiationNeeded\n     * @private\n     */\n    function onNegotiationNeeded() {\n        log.warn(\"Negotiation needed.\");\n    }\n\n    /**\n     * Process any ICE candidates that we received from our browser before we were able to send\n     * our SDP to the other side.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.processSendingQueue\n     * @private\n     */\n    function processSendingQueue() {\n        candidateSendingQueue.trigger(function sendIce(can) {\n            if (!pc) {\n                return;\n            }\n\n            signalCandidate({\n                candidate: can,\n                call: that.call\n            });\n        });\n    }\n\n    /**\n     * Process any ICE candidates that we received from the other side while we were waiting on the other\n     * party's SDP to arrive and be processed.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.processReceivingQueue\n     * @private\n     */\n    function processReceivingQueue() {\n        candidateReceivingQueue.trigger(function processIce(can) {\n            if (!pc) {\n                return;\n            }\n\n            pc.addIceCandidate(new RTCIceCandidate(can.candidate), function onSuccess() {\n                log.debug((that.state.caller ? 'caller' : 'callee'), 'got a remote candidate.', can.candidate);\n                that.report.candidatesReceived.push(can.candidate);\n            }, function onError(e) {\n                log.error(\"Couldn't add ICE candidate: \" + e.message, can.candidate);\n            });\n        });\n    }\n\n    /**\n     * Save an SDP we've gotten from the browser which will be an offer and send it to the other\n     * side.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.saveOfferAndSend\n     * @param {RTCSessionDescription}\n     * @private\n     */\n    function saveOfferAndSend(oSession) {\n        oSession.type = 'offer';\n        if (!pc) {\n            return;\n        }\n        log.debug('setting and sending offer', oSession);\n        that.report.sdpsSent.push(oSession);\n\n        pc.setLocalDescription(oSession, function successHandler(p) {\n            oSession.type = 'offer';\n            signalOffer({\n                call: that.call,\n                sessionDescription: oSession,\n                onSuccess: function () {\n                    that.state.sentSDP = true;\n                    processSendingQueue();\n                },\n                onError: function (err) {\n                    log.error('offer could not be sent', err);\n                    that.call.hangup({signal: false});\n                }\n            });\n        }, function errorHandler(p) {\n            var err = new Error('Error calling setLocalDescription on offer I created.');\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.call.fire('error', {\n                message: err.message\n            });\n        });\n    }\n\n    /**\n     * Save our SDP we've gotten from the browser which will be an answer and send it to the\n     * other side.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.saveAnswerAndSend\n     * @param {RTCSessionDescription}\n     * @private\n     */\n    function saveAnswerAndSend(oSession) {\n        if (!pc) {\n            return;\n        }\n\n        if (!that.state.caller) {\n            that.report.callerconnection = that.call.connectionId;\n        }\n\n        oSession.type = 'answer';\n        log.debug('setting and sending answer', oSession);\n        that.report.sdpsSent.push(oSession);\n\n        pc.setLocalDescription(oSession, function successHandler(p) {\n            oSession.type = 'answer';\n            signalAnswer({\n                sessionDescription: oSession,\n                call: that.call,\n                onSuccess: processSendingQueue\n            });\n            that.state.sentSDP = true;\n        }, function errorHandler(p) {\n            var err = new Error('Error calling setLocalDescription on answer I created.');\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.call.fire('error', {\n                message: err.message\n            });\n        });\n    }\n\n    /**\n     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n     * signal is not false and we have not received a hangup signal from the remote party.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.close\n     * @fires respoke.PeerConnection#destoy\n     * @param {object} param\n     * @param {boolean} [param.signal] - Optional flag to indicate whether to send or suppress sending\n     * a hangup signal to the remote side. This is set to false by the library if we're responding to a\n     * hangup signal.\n     * @fires respoke.PeerConnection#close\n     */\n    that.close = function (params) {\n        params = params || {};\n        toSendHangup = true;\n\n        if (that.state.caller === true) {\n            if (!that.state.sentSDP) {\n                // Never send hangup if we are the caller but we haven't sent any other signal yet.\n                toSendHangup = false;\n            }\n        }\n\n        toSendHangup = (typeof params.signal === 'boolean' ? params.signal : toSendHangup);\n        if (toSendHangup) {\n            log.info('sending hangup');\n            signalHangup({\n                call: that.call\n            });\n        }\n\n        that.report.callStopped = new Date().getTime();\n\n        /**\n         * Indicate that the RTCPeerConnection is closed.\n         * @event respoke.PeerConnection#close\n         * @type {respoke.Event}\n         * @property {boolean} sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n         * @property {string} name - the event name.\n         * @property {respoke.PeerConnection}\n         */\n        that.fire('close', {\n            sentSignal: toSendHangup\n        });\n        that.ignore();\n\n        if (pc && that.report) {\n            pc.close();\n        }\n        pc = null;\n\n        if (that.call.enableCallDebugReport) {\n            signalReport({\n                report: that.report\n            });\n        }\n        that.report = null;\n    };\n    that.close = respoke.callOnce(that.close);\n\n    /**\n     * Indicate whether a call is being setup or is in progress.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.isActive\n     * @returns {boolean}\n     */\n    that.isActive = function () {\n        return !!(pc && ['completed', 'connected', 'new', 'checking'].indexOf(pc.iceConnectionState) > -1);\n    };\n\n    /**\n     * Save the answer and tell the browser about it.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.listenAnswer\n     * @param {object} evt\n     * @param {object} evt.signal - The signal, including the remote SDP and the connectionId of the endpoint who\n     * answered the call.\n     * @private\n     */\n    function listenAnswer(evt) {\n        if (!pc) {\n            return;\n        }\n        log.debug('got answer', evt.signal);\n\n        that.report.sdpsReceived.push(evt.signal.sessionDescription);\n        that.state.sendOnly = respoke.sdpHasReceiveOnly(evt.signal.sessionDescription.sdp);\n        that.sdpExpectedStreamCount = respoke.sdpStreamCount(evt.signal.sessionDescription.sdp);\n        that.report.lastSDPString = evt.signal.sessionDescription.sdp;\n\n        if (that.state.caller) {\n            that.report.calleeconnection = evt.signal.fromConnection;\n        }\n\n        that.call.connectionId = evt.signal.fromConnection;\n        // TODO don't signal connected more than once.\n        signalConnected({\n            call: that.call\n        });\n\n        pc.setRemoteDescription(\n            new RTCSessionDescription(evt.signal.sessionDescription),\n            function successHandler() {\n                processReceivingQueue();\n                that.state.dispatch('receiveAnswer');\n            }, function errorHandler(p) {\n                var newErr = new Error(\"Exception calling setRemoteDescription on answer I received.\");\n                that.report.callStoppedReason = newErr.message;\n                /**\n                 * This event is fired on errors that occur during call setup or media negotiation.\n                 * @event respoke.Call#error\n                 * @type {respoke.Event}\n                 * @property {string} reason - A human readable description about the error.\n                 * @property {respoke.Call} target\n                 * @property {string} name - the event name.\n                 */\n                that.call.fire('error', {\n                    message: newErr.message\n                });\n                log.error('set remote desc of answer failed', evt.signal.sessionDescription, p);\n                that.report.callStoppedReason = 'setRemoteDescription failed at answer.';\n                that.close();\n            }\n        );\n    }\n\n    /**\n     * Figure out who won the call. This necessary to prevent two connections of the same endpoint from thinking\n     * they are both on the same call.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.listenConnected\n     * @private\n     */\n    function listenConnected(evt) {\n        if (evt.signal.connectionId !== client.connectionId) {\n            log.debug(\"Hanging up because I didn't win the call.\", evt.signal, client);\n            that.call.hangup({signal: false});\n        }\n    }\n\n    /**\n     * Send the initiate signal to start the modify process. This method is only called by the caller of the\n     * renegotiation.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.startModify\n     * @param {object} params\n     * @param {object} [params.constraints] - Indicate this is a request for media and what type of media.\n     * @param {boolean} [params.directConnection] - Indicate this is a request for a direct connection.\n     */\n    that.startModify = function (params) {\n        defModify = Q.defer();\n        signalModify({\n            action: 'initiate',\n            call: that.call,\n            constraints: params.constraints,\n            directConnection: params.directConnection\n        });\n    };\n\n    /**\n     * Indicate a desire from the other side to renegotiate media.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.listenModify\n     * @param {object} evt\n     * @param {object} evt.signal\n     * @private\n     */\n    function listenModify(evt) {\n        var err;\n        log.debug('PC.listenModify', evt.signal);\n\n        if (evt.signal.action === 'accept') {\n            if (defModify.promise.isPending()) {\n                defModify.resolve();\n                /**\n                 * Indicate that the remote party has accepted our invitation to begin renegotiating media.\n                 * @event respoke.PeerConnection#modify-accept\n                 * @type {respoke.Event}\n                 * @property {string} name - the event name.\n                 * @property {respoke.PeerConnection}\n                 */\n                that.fire('modify-accept', {signal: evt.signal});\n            }\n            return;\n        } else if (evt.signal.action === 'reject') {\n            if (defModify.promise.isPending()) {\n                err = new Error(\"Remote party cannot negotiate.\");\n                log.debug(err.message);\n                defModify.reject(err);\n                /**\n                 * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n                 * @event respoke.PeerConnection#modify-reject\n                 * @type {respoke.Event}\n                 * @property {Error} err\n                 * @property {string} name - the event name.\n                 * @property {respoke.PeerConnection}\n                 */\n                that.fire('modify-reject', {err: err});\n            }\n            return;\n        }\n\n        // This code only gets executed if signal.action === 'initiate'\n        if (defModify && defModify.promise.isPending()) {\n            // TODO compare signal request ID and accept if we have the higher request ID,\n            // reject if we have the lower request ID.\n            err = new Error(\"Got modify in a negotiating state.\");\n            log.debug(err.message);\n            defModify.reject(err);\n            /**\n             * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n             * @event respoke.PeerConnection#modify-reject\n             * @type {respoke.Event}\n             * @property {Error} err\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('modify-reject', {err: err});\n            signalModify({\n                action: 'reject',\n                call: that.call\n            });\n            return;\n        }\n\n        defModify = Q.defer();\n\n        if (!that.state.sentSDP || that.state.isState('idle')) {\n            err = new Error(\"Got modify in a precall state.\");\n            /**\n             * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n             * @event respoke.PeerConnection#modify-reject\n             * @type {respoke.Event}\n             * @property {Error} err\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('modify-reject', {err: err});\n            signalModify({\n                action: 'reject',\n                call: that.call\n            });\n            defModify.reject(err);\n            return;\n        }\n\n        /**\n         * Indicate that the remote party has accepted our invitation to begin renegotiating media.\n         * @event respoke.PeerConnection#modify-accept\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.PeerConnection}\n         */\n        that.fire('modify-accept', {signal: evt.signal});\n        signalModify({\n            action: 'accept',\n            call: that.call\n        });\n        defModify.resolve();\n    }\n\n    /**\n     * Save the candidate. If we initiated the call, place the candidate into the queue so\n     * we can process them after we receive the answer.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.addRemoteCandidate\n     * @param {object} params\n     * @param {RTCIceCandidate} params.candidate\n     */\n    that.addRemoteCandidate = function (params) {\n        if (!pc && (that.state.sentSDP || that.state.receivedSDP)) { // we hung up.\n            return;\n        }\n\n        if (!params || !params.candidate || !params.candidate.hasOwnProperty('sdpMLineIndex')) {\n            log.warn(\"addRemoteCandidate got wrong format!\", params);\n            return;\n        }\n\n        candidateReceivingQueue.push(params);\n    };\n\n    that.call.listen('signal-answer', listenAnswer, true);\n    that.call.listen('signal-connected', listenConnected, true);\n    that.call.listen('signal-modify', listenModify, true);\n\n    return that;\n}; // End respoke.PeerConnection\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/peerConnection.js\n ** module id = 14\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar respoke = require('./respoke');\nvar log = respoke.log;\nvar Statechart = require('statechart');\nvar Q = require('q');\n\n/**\n * State machine for WebRTC calling, data channels, and screen sharing.\n * NOTE: All state transitions are synchronous! However, listeners to the events this class fires will be called\n * asynchronously.\n * @class respoke.CallState\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {respoke.Call} call\n * @link https://cdn.respoke.io/respoke.min.js\n * @returns {respoke.CallState}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var fsm;\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    that.className = 'respoke.CallState';\n    delete that.instanceId;\n\n    var client = respoke.getClient(instanceId);\n    var allTimers = [];\n    var answerTimer;\n    var answerTimeout = params.answerTimeout || 10000;\n    var receiveAnswerTimer;\n    var receiveAnswerTimeout = params.receiveAnswerTimeout || 60000;\n    var connectionTimer;\n    var connectionTimeout = params.connectionTimeout || 10000;\n    var modifyTimer;\n    var modifyTimeout = params.modifyTimeout || 60000;\n    var oldRole;\n\n    /*!\n     * These can quite often result in a condition in which they do not cause a transition to occur.\n     * There is at least one \"universal\" (air quotes) event which probably? shouldn't? but may\n     * result in a non-transition error when it's OK, and that is the 'reject' event.\n     */\n    var nontransitionEvents = ['receiveLocalMedia', 'receiveRemoteMedia', 'approve', 'answer', 'sentOffer',\n        'receiveAnswer'];\n\n    function assert(condition) {\n        if (!condition) {\n            throw new Error(\"Assertion failed.\");\n        }\n    }\n\n    that.hasLocalMediaApproval = false;\n    that.hasLocalMedia = false;\n    that.receivedBye = false;\n    that.isAnswered = false;\n    that.sentSDP = false;\n    that.receivedSDP = false;\n    that.processedRemoteSDP = false;\n    that.needDirectConnection = !!that.needDirectConnection;\n    that.sendOnly = !!that.sendOnly;\n    that.receiveOnly = !!that.receiveOnly;\n\n    // Event\n    var rejectEvent = [{\n        target: 'connected',\n        guard: function (params) {\n            // we have any media flowing or data channel open\n            if (typeof oldRole === 'boolean') {\n                // Reset the role if we have aborted a modify.\n                that.caller = oldRole;\n            }\n\n            if (modifyTimer) {\n                modifyTimer.clear();\n            }\n\n            return that.hasMedia();\n        }\n    }, {\n        target: 'terminated',\n        guard: function (params) {\n            params = params || {};\n            // we have no media flowing or data channel open\n            that.hangupReason = params.reason || \"no media\";\n            return !that.hasMedia();\n        }\n    }];\n\n    // Event\n    function rejectModify() {\n        // reject modification\n        if (modifyTimer) {\n            modifyTimer.clear();\n        }\n    }\n\n    // Event\n    function clearReceiveAnswerTimer() {\n        that.processedRemoteSDP = true;\n        if (receiveAnswerTimer) {\n            receiveAnswerTimer.clear();\n        }\n    }\n\n    // Event\n    var hangupEvent = {\n        target: 'terminated',\n        action: function (params) {\n            params = params || {};\n            that.signalBye = params.signal;\n            that.hangupReason = that.hangupReason || params.reason || \"none\";\n        }\n    };\n\n    function needToObtainMedia() {\n        return (\n            that.needDirectConnection !== true &&\n            that.receiveOnly !== true &&\n            that.hasLocalMedia !== true\n        );\n    }\n\n    function needToApproveDirectConnection(params) {\n        return (that.needDirectConnection === true && typeof params.previewLocalMedia === 'function');\n    }\n\n    function automaticOffering(params) {\n        if (that.caller !== true) {\n            return false;\n        }\n\n        // TODO: this will need to be change with media negotiation\n        if ((!that.needDirectConnection && that.receiveOnly) || that.hasLocalMedia) {\n            return true;\n        }\n        return (that.needDirectConnection === true && typeof params.previewLocalMedia !== 'function');\n    }\n\n    function hasListener() {\n        if ((client.hasListeners('call') && !that.needDirectConnection) ||\n                (client.hasListeners('direct-connection') && that.needDirectConnection)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function createTimer(func, name, time) {\n        var id = setTimeout(function () {\n            id = null;\n            log.error((that.caller ? \"caller's\" : \"callee's\"), name, \"timer expired.\");\n            func();\n        }, time);\n        log.debug('setting timer', name, 'for', time / 1000, 'secs');\n        var timer  = {\n            name: name,\n            clear: function () {\n                if (id === null) {\n                    return;\n                }\n                log.debug('clearing', (that.caller ? \"caller's\" : \"callee's\"), 'timer', name);\n                clearTimeout(id);\n                id = null;\n            }\n        };\n        allTimers.push(timer);\n        return timer;\n    }\n\n    var stateParams = {\n        initialState: 'idle',\n        states: {\n            // State\n            idle: {\n                // Event\n                exit: function () {\n                    that.fire('idle:exit');\n                },\n                // Event\n                initiate: [{\n                    target: 'negotiatingContainer',\n                    guard: function (params) {\n                        assert(typeof params.caller === 'boolean');\n                        return (params.caller === true || hasListener());\n                    }\n                }, {\n                    target: 'terminated',\n                    guard: function (params) {\n                        return (params.caller !== true && !hasListener());\n                    }\n                }],\n                receiveLocalMedia: function () {\n                    that.hasLocalMedia = true;\n                },\n                // Event\n                receiveOffer: {\n                    action: function (params) {\n                        that.receivedSDP = true;\n                    }\n                },\n                // Event\n                hangup: hangupEvent\n            },\n            // State\n            negotiatingContainer: {\n                init: \"preparing\",\n                // Event\n                hangup: hangupEvent,\n                // Event\n                modify: rejectModify,\n                // Event\n                receiveLocalMedia: function () {\n                    that.hasLocalMedia = true;\n                },\n                states: {\n                    preparing: {\n                        // Event\n                        entry: {\n                            action: function () {\n                                that.hasLocalMediaApproval = false;\n                                that.hasLocalMedia = false;\n                                that.sentSDP = false;\n                                that.receivedSDP = false;\n                                that.processedRemoteSDP = false;\n                                that.isAnswered = false;\n                                if (!that.isModifying()) {\n                                    answerTimer = createTimer(function () {\n                                        that.dispatch('reject', {reason: \"answer own call timer \" + that.caller});\n                                    }, 'answer own call', answerTimeout);\n                                }\n                                that.fire('preparing:entry');\n                            }\n                        },\n                        // Event\n                        exit: function () {\n                            that.fire('preparing:exit');\n                            if (answerTimer) {\n                                answerTimer.clear();\n                            }\n                        },\n                        // Event\n                        reject: rejectEvent,\n                        // Event\n                        receiveOffer: {\n                            action: function (params) {\n                                that.receivedSDP = true;\n                                if (that.isAnswered) {\n                                    // If we get here, we are the callee and we've answered the call before the call\n                                    // creation/receive offer promise chain completed.\n                                    setTimeout(function () {\n                                        that.dispatch('answer', params);\n                                    });\n                                }\n                            }\n                        },\n                        // Event\n                        answer: [{\n                            action: function (params) {\n                                assert(!params.previewLocalMedia || typeof params.previewLocalMedia === 'function');\n                                that.isAnswered = true;\n                                if (typeof params.previewLocalMedia !== 'function') {\n                                    that.hasLocalMediaApproval = true;\n                                }\n                            }\n                        }, {\n                            // we are going to send media\n                            target: 'approvingDeviceAccess',\n                            guard: needToObtainMedia\n                        }, {\n                            // we are sending a direct connection & developer wants to approve\n                            target: 'approvingContent',\n                            guard: needToApproveDirectConnection\n                        }, {\n                            target: 'offering',\n                            guard: automaticOffering\n                        }, {\n                            // we are not sending anything or developer does not want to approve media.\n                            target: 'connecting',\n                            guard: function (params) {\n                                // caller will always answer before sending offer.\n                                // callee will usually answer after receiving offer if media is requested.\n                                if (!that.receivedSDP) {\n                                    return false;\n                                }\n\n                                if (needToObtainMedia() || needToApproveDirectConnection(params) ||\n                                        automaticOffering(params)) {\n                                    return false;\n                                }\n\n                                if (!params.previewLocalMedia || that.receiveOnly) {\n                                    setTimeout(function () {\n                                        params.approve();\n                                    });\n                                }\n                                return (that.receiveOnly === true || that.needDirectConnection === true);\n                            }\n                        }]\n                    },\n                    // State\n                    gettingMedia: {\n                        reject: rejectEvent,\n                        // Event\n                        receiveLocalMedia: [{\n                            action: function () {\n                                that.hasLocalMedia = true;\n                            }\n                        }, {\n                            target: 'offering',\n                            guard: function (params) {\n                                return (that.caller === true && that.hasLocalMediaApproval === true &&\n                                    that.hasLocalMedia === true);\n                            }\n                        }, {\n                            target: 'connecting',\n                            guard: function (params) {\n                                return (that.caller === false && that.hasLocalMediaApproval === true &&\n                                    that.hasLocalMedia === true);\n                            }\n                        }],\n                        states: {\n                            // State\n                            approvingDeviceAccess: {\n                                // Event\n                                entry: function () {\n                                    that.fire('approving-device-access:entry');\n                                },\n                                // Event\n                                approve: [{\n                                    target: 'approvingContent',\n                                    guard: function (params) {\n                                        return (typeof params.previewLocalMedia === 'function');\n                                    }\n                                }, {\n                                    target: 'connecting',\n                                    guard: function (params) {\n                                        return (that.caller === false &&\n                                            (that.hasLocalMedia === true || that.needDirectConnection === true) &&\n                                            typeof params.previewLocalMedia !== 'function');\n                                    }\n                                }, {\n                                    target: 'offering',\n                                    guard: function (params) {\n                                        return (that.caller === true && that.hasLocalMedia === true &&\n                                            typeof params.previewLocalMedia !== 'function');\n                                    }\n                                }]\n                            },\n                            // State\n                            approvingContent: {\n                                // Event\n                                entry: function () {\n                                    that.fire('approving-content:entry');\n                                },\n                                // Event\n                                exit: function () {\n                                    that.fire('approving-content:exit');\n                                },\n                                // Event\n                                approve: [function (params) {\n                                    that.hasLocalMediaApproval = true;\n                                }, {\n                                    target: 'offering',\n                                    guard: function (params) {\n                                        return (that.caller === true && that.hasLocalMedia === true);\n                                    }\n                                }, {\n                                    target: 'connecting',\n                                    guard: function (params) {\n                                        return (that.caller === false && that.hasLocalMedia === true);\n                                    }\n                                }]\n                            }\n                        }\n                    },\n                    // State\n                    offeringContainer: {\n                        init: 'offering',\n                        reject: rejectEvent,\n                        sentOffer: function () {\n                            // start answer timer\n                            receiveAnswerTimer = createTimer(function () {\n                                that.dispatch('reject', {reason: \"receive answer timer\"});\n                            }, 'receive answer', receiveAnswerTimeout);\n                        },\n                        states: {\n                            offering: {\n                                // Event\n                                entry: function () {\n                                    that.fire('offering:entry');\n                                },\n                                // Event\n                                exit: function () {\n                                    that.fire('offering:exit');\n                                },\n                                // Event\n                                receiveLocalMedia: [function () {\n                                    that.hasLocalMedia = true;\n                                }, {\n                                    target: 'connected',\n                                    guard: function (params) {\n                                        // for direct connection, local media is the same as remote media\n                                        return (that.needDirectConnection === true);\n                                    }\n                                }],\n                                // Event\n                                receiveRemoteMedia: {\n                                    target: 'connected'\n                                },\n                                // Event\n                                receiveAnswer: [clearReceiveAnswerTimer, {\n                                    target: 'connecting'\n                                }]\n                            }\n                        }\n                    },\n                    // State\n                    connectingContainer: {\n                        init: 'connecting',\n                        reject: rejectEvent,\n                        receiveAnswer: clearReceiveAnswerTimer,\n                        states: {\n                            connecting: {\n                                // Event\n                                entry: function () {\n                                    that.fire('connecting:entry');\n\n                                    // set connection timer\n                                    connectionTimer = createTimer(function () {\n                                        that.dispatch('reject', {reason: \"connection timer\"});\n                                    }, 'connection', connectionTimeout);\n                                },\n                                // Event\n                                exit: function () {\n                                    if (connectionTimer) {\n                                        connectionTimer.clear();\n                                    }\n                                    if (modifyTimer) {\n                                        modifyTimer.clear();\n                                    }\n                                    that.fire('connecting:exit');\n                                },\n                                // Event\n                                receiveLocalMedia: [{\n                                    action: function () {\n                                        that.hasLocalMedia = true;\n                                    }\n                                }, {\n                                    target: 'connected',\n                                    guard: function (params) {\n                                        // for direct connection, local media is the same as remote media\n                                        return (that.needDirectConnection === true && that.caller === false);\n                                    }\n                                }],\n                                // Event\n                                receiveRemoteMedia: {\n                                    target: 'connected'\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            // State\n            // This state is for when we are in limbo between connected and negotiating and we are\n            // trying to figure out if the other side will allow us to modify. If we receive modify in\n            // this state, we will reject it. If the other party is in connected, we will be able to modify.\n            modifyingContainer: {\n                init: 'modifying',\n                reject: rejectEvent,\n                // Event\n                modify: rejectModify,\n                // Event\n                hangup: hangupEvent,\n                states: {\n                    modifying: {\n                        // Event\n                        entry: function () {\n                            modifyTimer = createTimer(function () {\n                                that.dispatch('reject', {reason: \"modify timer\"});\n                            }, 'modify for caller', modifyTimeout);\n                            that.fire('modifying:entry');\n                        },\n                        // Event\n                        accept: [function () {\n                            that.caller = true;\n                        }, {\n                            target: 'preparing'\n                        }],\n                        // Event\n                        exit: function () {\n                            that.fire('modifying:exit');\n                        }\n                    }\n                }\n            },\n            // State\n            connectedContainer: {\n                init: 'connected',\n                reject: {\n                    target: 'terminated',\n                    action: function (params) {\n                        that.hangupReason = params.reason || \"got reject while connected\";\n                    }\n                },\n                receiveAnswer: clearReceiveAnswerTimer,\n                // Event\n                hangup: hangupEvent,\n                states: {\n                    connected: {\n                        // Event\n                        entry: function () {\n                            oldRole = that.caller;\n                            that.needDirectConnection = false;\n                            that.fire('connected:entry');\n                        },\n                        // Event\n                        exit: function () {\n                            that.fire('connected:exit');\n                        },\n                        // Event\n                        modify: [{\n                            // be notified that the other side would like modification\n                            target: 'preparing',\n                            guard: function (params) {\n                                params = params || {};\n                                if (params.receive === true) {\n                                    that.caller = false;\n                                    modifyTimer = createTimer(function () {\n                                        // If modify gets interrupted, go back to previous roles.\n                                        that.dispatch('reject', {reason: \"modify timer\"});\n                                    }, 'modify', modifyTimeout);\n                                    return true;\n                                }\n                            }\n                        }, {\n                            // request to begin modification\n                            target: 'modifying',\n                            guard: function (params) {\n                                params = params || {};\n                                return (params.receive !== true);\n                            }\n                        }]\n                    }\n                }\n            },\n            // State\n            terminatedContainer: {\n                init: 'terminated',\n                states: {\n                    terminated: {\n                        // Event\n                        entry: {\n                            action: function () {\n                                that.fire('terminated:entry');\n                                allTimers.forEach(function (timer) {\n                                    timer.clear();\n                                });\n                                setTimeout(function () {\n                                    fsm = null;\n                                    that.ignore();\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    stateParams.that = Object.create(Statechart);\n    fsm = respoke.Class(stateParams);\n    fsm.run({\n        // rename to 'debug' to enable\n        debugOff: function () {\n            // So we can print the caller. Debug most often used when testing & tests run in the same tab.\n            var args = Array.prototype.slice.call(arguments);\n            args.splice(0, 0, that.caller);\n            log.debug.apply(log, args);\n        }\n    });\n\n    /**\n     * Return the name of the current state.\n     * @memberof! respoke.CallState\n     * @method respoke.Call.getState\n     * @returns {string}\n     */\n    that.getState = function () {\n        if (!fsm) {\n            return 'terminated';\n        }\n        return fsm.currentState().name;\n    };\n\n    /**\n     * Synchronously dispatch an event, which may or may not change the state.\n     * @memberof! respoke.CallState\n     * @method respoke.Call.dispatch\n     */\n    that.dispatch = function (evt, args) {\n        var oldState;\n        var newState;\n\n        if (!fsm) {\n            return;\n        }\n\n        oldState = that.getState();\n        try {\n            fsm.dispatch(evt, args);\n        } catch (err) {\n            log.debug('error dispatching', evt, 'from', oldState, \"with\", args, err);\n            throw err;\n        }\n        newState = that.getState();\n        if (oldState === newState && nontransitionEvents.indexOf(evt) === -1) {\n            log.debug(that.caller, \"Possible bad event \" + evt + \", no transition occured.\");\n        }\n        log.debug(that.caller, 'dispatching', evt, 'moving from ', oldState, 'to', newState, args);\n    };\n\n    /**\n     * Determine whether or not we are in the middle of a call modification.\n     * @memberof! respoke.CallState\n     * @method respoke.Call.isModifying\n     * @returns {boolean}\n     */\n    that.isModifying = function () {\n        var modifyingStates = ['preparing', 'modifying', 'approvingDeviceAccess', 'approvingMedia', 'offering'];\n        return (modifyingStates.indexOf(that.getState()) > -1 && that.hasMedia());\n    };\n\n    /**\n     * Helper for testing state name\n     * @memberof! respoke.CallState\n     * @method respoke.Call.isState\n     * @param {string} name\n     * @returns {boolean}\n     */\n    that.isState = function (name) {\n        return (that.getState() === name);\n    };\n\n    assert(typeof that.hasMedia === 'function');\n    assert(typeof that.caller === 'boolean');\n    return that;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/callState.js\n ** module id = 15\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\nvar log = respoke.log;\n\n/**\n * A `respoke.Call` is Respoke's interface into a WebRTC call, including getUserMedia,\n * path and codec negotation, and call state.\n * There are several methods on an instance of `respoke.Client` which return a `respoke.Call`.\n *\n * ```\n * var jim = client.getEndpoint({ id: 'jim' });\n * var call = jim.startAudioCall();\n * ```\n *\n * @class respoke.Call\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.instanceId - client id\n * @param {boolean} params.caller - whether or not we initiated the call\n * @param {boolean} [params.receiveOnly] - whether or not we accept media\n * @param {boolean} [params.sendOnly] - whether or not we send media\n * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n * relay servers. If it cannot flow through relay servers, the call will fail.\n * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n * required to flow peer-to-peer. If it cannot, the call will fail.\n * @param {respoke.Endpoint} params.remoteEndpoint - The endpoint who is being called.\n * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint.\n * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n * wants to perform an action between local media becoming available and calling approve().\n * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n * @param {function} params.signalReport - Signaling action from SignalingChannel.\n * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n * @param {Array<RTCConstraints>} params.constraints - Array of WebRTC constraints. This is ignored when\n * `params.outgoingMedia` is passed into the Call object.\n * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n * media renegotiation.\n * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n * element with the local audio and/or video attached.\n * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n * This callback will be called when media is muted or unmuted.\n * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n * for the user to give permission to start getting audio or video.\n * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n * the approval was automatic.\n * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n * granted by the browser without asking the user to approve it.\n * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n * video attached to it.\n * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n * @param {respoke.LocalMedia} params.outgoingMedia - Pass in an optional LocalMedia object to override the one that is\n * built automatically when establishing the call. When this is defined then any constraints passed to the\n * call are ignored since the media object already exists.\n * video attached to it.\n * @returns {respoke.Call}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Call\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n    delete that.outgoingMedia;\n\n    /**\n     * A name to identify the type of object.\n     * @memberof! respoke.Call\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Call';\n\n    /**\n     * Whether or not the client is the caller of the call.\n     * @memberof! respoke.Call\n     * @name caller\n     * @type {boolean}\n     */\n    that.caller = !!that.caller;\n    Object.defineProperty(that, \"initiator\", {\n        configurable: true,\n        enumerable: true,\n        get: function () {\n            log.warn(\"The call.initiator flag is deprecated. Please use call.caller instead.\");\n            return that.caller;\n        },\n        set: function () {\n            // ignore\n        }\n    });\n\n    if (!that.caller) {\n        // Don't let Respoke.js pass any default constraints if we're accepting the call. We have no freaking clue\n        // what kind of media we are expected to provide at this point.\n        delete params.constraints;\n        that.constraints = [];\n    }\n\n    /**\n     * The call ID.\n     * @memberof! respoke.Call\n     * @name id\n     * @type {string}\n     */\n    that.id = that.caller ? respoke.makeGUID() : that.id;\n\n    // log the call id to the console for debugging purposes. Do not change this to `respoke.log`!\n    console.log(\"[Respoke] Creating call. id='\" + that.id + \"'\");\n\n    if (!that.id) {\n        throw new Error(\"Can't start a new call without a call id.\");\n    }\n\n    /**\n     * Promise used to trigger actions dependant upon having received media or a datachannel.\n     * @memberof! respoke.Call\n     * @name defMedia\n     * @private\n     * @type {Promise}\n     */\n    var defMedia = Q.defer();\n    /**\n     * Promise used to trigger notification of a request for renegotiating media. For the caller of the\n     * renegotiation (which doesn't have to be the same as the caller of the call), this is resolved\n     * or rejected as soon as the 'accept' or 'reject' signal is received. For the callee, it is\n     * resolved or rejected only after the developer or user approves or rejects the modify.\n     * @memberof! respoke.Call\n     * @name defModify\n     * @private\n     * @type {Promise}\n     */\n    var defModify;\n    /**\n     * @memberof! respoke.Call\n     * @name previewLocalMedia\n     * @private\n     * @type {respoke.Call.previewLocalMedia}\n     */\n    var previewLocalMedia = params.previewLocalMedia;\n    /**\n     * @memberof! respoke.Call\n     * @name client\n     * @private\n     * @type {respoke.getClient}\n     */\n    var client = respoke.getClient(instanceId);\n    /**\n     * @memberof! respoke.Call\n     * @name signalingChannel\n     * @private\n     * @type {respoke.signalingChannel}\n     */\n    var signalingChannel = params.signalingChannel;\n\n    /**\n     * Informational property. Whether call debugs were enabled on the client during creation.\n     * Changing this value will do nothing.\n     * @name enableCallDebugReport\n     * @type {boolean}\n     */\n    that.enableCallDebugReport = params.signalingChannel.isSendingReport();\n\n    /**\n     * @memberof! respoke.Call\n     * @name pc\n     * @private\n     * @type {respoke.PeerConnection}\n     */\n    var pc = respoke.PeerConnection({\n        instanceId: instanceId,\n        state: respoke.CallState({\n            instanceId: instanceId,\n            caller: that.caller,\n            needDirectConnection: params.needDirectConnection,\n            sendOnly: params.sendOnly,\n            receiveOnly: params.receiveOnly,\n            // hasMedia is not defined yet.\n            hasMedia: function () {\n                return that.hasMedia();\n            }\n        }),\n        forceTurn: !!params.forceTurn,\n        call: that,\n        pcOptions: {\n            optional: [\n                { DtlsSrtpKeyAgreement: true },\n                { RtpDataChannels: false }\n            ]\n        },\n        offerOptions: params.offerOptions || null,\n        signalOffer: function (args) {\n            if (!pc) {\n                return;\n            }\n\n            params.signalOffer(args);\n            pc.state.dispatch('sentOffer');\n        },\n        signalConnected: params.signalConnected,\n        signalAnswer: params.signalAnswer,\n        signalModify: params.signalModify,\n        signalHangup: params.signalHangup,\n        signalReport: params.signalReport,\n        signalCandidate: params.signalCandidate\n    });\n\n    /**\n     * Array of streams of local media that we are sending to the remote party.\n     * @name outgoingMediaStreams\n     * @type {Array<respoke.LocalMedia>}\n     */\n    that.outgoingMediaStreams = [];\n    that.outgoingMediaStreams.hasAudio = function () {\n        if (that.outgoingMediaStreams.length === 0) {\n            return false;\n        }\n\n        return !that.outgoingMediaStreams.every(function (stream) {\n            return stream.getAudioTracks().length === 0;\n        });\n    };\n    that.outgoingMediaStreams.hasVideo = function () {\n        if (that.outgoingMediaStreams.length === 0) {\n            return false;\n        }\n\n        return !that.outgoingMediaStreams.every(function (stream) {\n            return stream.getVideoTracks().length === 0;\n        });\n    };\n\n    if (params.outgoingMedia) {\n        that.outgoingMediaStreams.push(params.outgoingMedia);\n    }\n\n    /**\n     * Local media that we are sending to the remote party. This will be undefined if we are sending no media.\n     * This property is just the first item in the `outgoingMediaStreams` array. If multiple streams are present,\n     * use that array to find the stream you need instead of relying on this property.\n     * @name outgoingMedia\n     * @type {respoke.LocalMedia}\n     */\n    Object.defineProperty(that, \"outgoingMedia\", {\n        configurable: false,\n        enumerable: true,\n        get: function () {\n            return that.outgoingMediaStreams[0];\n        },\n        set: function () {\n            // ignore\n        }\n    });\n\n    /**\n     * Array of streams of remote media that we are receiving from the remote party.\n     * @name incomingMediaStreams\n     * @type {Array<respoke.RemoteMedia>}\n     */\n    that.incomingMediaStreams = [];\n    that.incomingMediaStreams.hasAudio = function () {\n        if (that.incomingMediaStreams.length === 0) {\n            return false;\n        }\n\n        return !that.incomingMediaStreams.every(function (stream) {\n            return stream.getAudioTracks().length === 0;\n        });\n    };\n    that.incomingMediaStreams.hasVideo = function () {\n        if (that.incomingMediaStreams.length === 0) {\n            return false;\n        }\n\n        return !that.incomingMediaStreams.every(function (stream) {\n            return stream.getVideoTracks().length === 0;\n        });\n    };\n\n    /**\n     * Remote media that we are receiving from the remote party.  This will be undefined if we\n     * are receiving no media. This property is just the first item in the `incomingMediaStreams` array. If multiple\n     * streams are present, use that array to find the stream you need instead of relying on this property.\n     * @name incomingMedia\n     * @type {respoke.RemoteMedia}\n     */\n    Object.defineProperty(that, \"incomingMedia\", {\n        configurable: false,\n        enumerable: true,\n        get: function () {\n            return that.incomingMediaStreams[0];\n        },\n        set: function () {\n            // ignore\n        }\n    });\n\n    /**\n     * A flag indicating whether this call has audio or is expected to have audio coming in from the other side.\n     *\n     * @name hasAudio\n     * @type {boolean}\n     */\n    Object.defineProperty(that, \"hasAudio\", {\n        configurable: false,\n        enumerable: true,\n        get: that.incomingMediaStreams.hasAudio,\n        set: function () {\n            // ignore\n        }\n    });\n\n    /**\n     * A flag indicating whether this call has video or is expected to have video coming in from the other side.\n     *\n     * @name hasVideo\n     * @type {boolean}\n     */\n    Object.defineProperty(that, \"hasVideo\", {\n        configurable: false,\n        enumerable: true,\n        get: that.incomingMediaStreams.hasVideo,\n        set: function () {\n            // ignore\n        }\n    });\n\n    delete params.signalingChannel;\n    delete that.signalingChannel;\n\n    /**\n     * @memberof! respoke.Call\n     * @name videoIsMuted\n     * @private\n     * @type {boolean}\n     */\n    var videoIsMuted = false;\n    /**\n     * @memberof! respoke.Call\n     * @name audioIsMuted\n     * @private\n     * @type {boolean}\n     */\n    var audioIsMuted = false;\n    /**\n     * @memberof! respoke.Call\n     * @name directConnection\n     * @private\n     * @type {respoke.DirectConnection}\n     */\n    var directConnection = null;\n    /**\n     * @memberof! respoke.Call\n     * @name toSendHangup\n     * @private\n     * @type {boolean}\n     */\n    var toSendHangup = null;\n\n    /**\n     * Set up promises. If we're not the caller, we need to listen for approval AND the remote SDP to come in\n     * before we can act on the call. Save parameters sent in with the constructor, then delete them off the call.\n     * If this call was initiated with a DirectConnection, set it up so answer() will be the approval mechanism.\n     * @method respoke.Call.init\n     * @memberof! respoke.Call\n     * @fires respoke.Client#call\n     * @private\n     */\n    function init() {\n        log.debug('Call.init');\n\n        if (defModify !== undefined) {\n            defMedia = Q.defer();\n        }\n\n        pc.init(); // instantiates RTCPeerConnection, can't call on modify\n        if (defModify === undefined && pc.state.needDirectConnection === true) {\n            actuallyAddDirectConnection(params);\n        }\n    }\n\n    /**\n     * Register any event listeners passed in as callbacks, save other params to answer() and accept().\n     * @memberof! respoke.Call\n     * @method respoke.Call.saveParameters\n     * @param {object} params\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n     * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will fire even if\n     * the approval was automatic.\n     * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n     * user's media.  This event gets fired even if the allow process is automatic, i. e., permission and media is\n     * granted by the browser without asking the user to approve it.\n     * @param {Array<RTCConstraints>} [params.constraints]\n     * @param {boolean} [params.forceTurn]\n     * @param {boolean} [params.receiveOnly]\n     * @param {boolean} [params.sendOnly]\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n     * video attached to it.\n     * @private\n     * @fires respoke.Call#stats\n     */\n    function saveParameters(params) {\n        var isNewConstraint;\n\n        /* This happens when the call is hung up automatically, for instance due to the lack of an onCall\n         * handler. In this case, pc has been set to null in hangup. The call has already failed, and the\n         * invocation of this function is an artifact of async code not being finished yet, so we can just\n         * skip all of this setup.\n         */\n        if (!pc) {\n            return;\n        }\n\n        that.listen('local-stream-received', params.onLocalMedia);\n        that.listen('connect', params.onConnect);\n        that.listen('hangup', params.onHangup);\n        that.listen('allow', params.onAllow);\n        that.listen('answer', params.onAnswer);\n        that.listen('approve', params.onApprove);\n        that.listen('mute', params.onMute);\n        that.listen('requesting-media', params.onRequestingMedia);\n\n        previewLocalMedia = typeof params.previewLocalMedia === 'function' ?\n            params.previewLocalMedia : previewLocalMedia;\n\n        pc.state.receiveOnly = typeof params.receiveOnly === 'boolean' ? params.receiveOnly : pc.state.receiveOnly;\n        pc.state.sendOnly = typeof params.sendOnly === 'boolean' ? params.sendOnly : pc.state.sendOnly;\n        pc.state.needDirectConnection = typeof params.needDirectConnection === 'boolean' ?\n            params.needDirectConnection : pc.state.needDirectConnection;\n        pc.disableTurn = typeof params.disableTurn === 'boolean' ? params.disableTurn : !!pc.disableTurn;\n        pc.forceTurn = typeof params.forceTurn === 'boolean' ? params.forceTurn : !!pc.forceTurn;\n\n        that.videoLocalElement = params.videoLocalElement ? params.videoLocalElement : that.videoLocalElement;\n        that.videoRemoteElement = params.videoRemoteElement ? params.videoRemoteElement : that.videoRemoteElement;\n\n        if (that.toType === 'did' && !that.caller) {\n            params.callerId = params.callerId || {};\n            that.callerId = {\n                name: params.callerId.name || null,\n                number: params.callerId.number || null\n            };\n        }\n\n        if (pc.state.receiveOnly) {\n            that.outgoingMediaStreams.length = 0;\n            that.constraints = [];\n        } else if (params.constraints) {\n            that.constraints = respoke.convertConstraints(params.constraints);\n            updateOutgoingMediaEstimate({constraints: that.constraints[0], source: params.source});\n        }\n\n        if (pc.state.sendOnly) {\n            that.incomingMediaStreams.length = 0;\n        } else if (params.constraints && pc.state.caller === true && that.incomingMediaStreams.length === 0) {\n            // TODO above condition is not good enough for media renegotiation.\n            // Only the person who initiated this round of media negotiation needs to estimate remote\n            // media based on what constraints local media is using.\n            // Also don't try to guess what media they'll send back if we're sending more than one stream.\n            that.constraints = respoke.convertConstraints(params.constraints);\n            updateIncomingMediaEstimate({constraints: params.constraints[0]});\n        }\n\n        pc.listen('stats', function fireStats(evt) {\n            /**\n             * This event is fired every time statistical information about audio and/or video on a call\n             * becomes available.\n             * @event respoke.Call#stats\n             * @type {respoke.Event}\n             * @property {respoke.MediaStats} stats - an object with stats in it.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.fire('stats', {stats: evt.stats});\n        }, true);\n\n        delete that.signalOffer;\n        delete that.signalConnected;\n        delete that.signalAnswer;\n        delete that.signalHangup;\n        delete that.signalReport;\n        delete that.signalCandidate;\n    }\n\n    /**\n     * Build respoke.LocalMedia after the call is answered.\n     * @memberof! respoke.Call\n     * @method respoke.Call.buildLocalMedia\n     * @param {RTCConstraint} constraint\n     * @private\n     */\n    function buildLocalMedia(constraint) {\n        var localMedia;\n\n        if (pc.state.receiveOnly) {\n            return Q.reject(new Error(\"Shouldn't have requested local media when receiveOnly is true.\"));\n        }\n\n        if (constraint.className === 'respoke.LocalMedia') {\n            localMedia = constraint;\n        } else {\n            localMedia = respoke.LocalMedia({\n                hasScreenShare: respoke.constraintsHasScreenShare(constraint),\n                constraints: constraint,\n                source: params.source\n            });\n            that.outgoingMediaStreams.push(localMedia);\n        }\n\n        // Use the element for only one set of constraints, and make sure it's one that has video.\n        if (respoke.constraintsHasVideo(localMedia.constraints) &&\n                that.videoLocalElement && !that.videoLocalElement.used) {\n            that.videoLocalElement.used = true;\n            localMedia.element = that.videoLocalElement;\n        }\n\n        localMedia.listen('requesting-media', function waitAllowHandler(evt) {\n            if (!pc) {\n                return;\n            }\n\n            /**\n             * The browser is asking for permission to access the User's media. This would be an ideal time\n             * to modify the UI of the application so that the user notices the request for permissions\n             * and approves it.\n             * @event respoke.Call#requesting-media\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.Call} target\n             */\n            that.fire('requesting-media');\n        }, true);\n\n        localMedia.listen('allow', function allowHandler(evt) {\n            if (!pc) {\n                return;\n            }\n\n            /**\n             * The user has approved the request for media. Any UI changes made to remind the user to click Allow\n             * should be canceled now. This event is the same as the `onAllow` callback.  This event gets fired\n             * even if the allow process is automatic, i. e., permission and media is granted by the browser\n             * without asking the user to approve it.\n             * @event respoke.Call#allow\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.Call} target\n             */\n            that.fire('allow');\n            pc.state.dispatch('approve', {\n                previewLocalMedia: previewLocalMedia\n            });\n        }, true);\n\n        return localMedia.start().then(function () {\n            streamReceivedHandler(localMedia);\n        });\n    }\n\n    /**\n     * Answer the call and start the process of obtaining media. This method is called automatically on the caller's\n     * side. This method must be called on the callee's side to indicate that the endpoint does wish to accept the\n     * call. The app will have a later opportunity, by passing a callback named previewLocalMedia, to approve or\n     * reject the call based on whether audio and/or video is working and is working at an acceptable level.\n     *\n     *     client.listen('call', function (evt) {\n     *         if (!evt.call.caller) {\n     *             evt.call.answer();\n     *         }\n     *     });\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.answer\n     * @fires respoke.Call#answer\n     * @param {object} [params]\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n     * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n     * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n     * granted by the browser without asking the user to approve it.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {boolean} [params.receiveOnly] - Whether or not we accept media.\n     * @param {boolean} [params.sendOnly] - Whether or not we send media.\n     * @param {Array<RTCConstraints>} [params.constraints] - Information about the media for this call.\n     * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n     * video attached to it.\n     */\n    that.answer = function (params) {\n        params = params || {};\n        log.debug('Call.answer', params);\n\n        saveParameters(params);\n\n        pc.listen('remote-stream-received', onRemoteStreamAdded, true);\n        pc.listen('remote-stream-removed', onRemoteStreamRemoved, true);\n\n        pc.state.once('approving-device-access:entry', function (evt) {\n            doAddVideo(params);\n        });\n        pc.state.dispatch('answer', {\n            previewLocalMedia: previewLocalMedia,\n            approve: that.approve\n        });\n        /**\n         * The call was answered.\n         * @event respoke.Call#answer\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('answer');\n    };\n\n    /**\n     * Accept a request to modify the media on the call. This method should be called within the Call#modify\n     * event listener, which gives the developer or website user a chance to see what changes are proposed and\n     * to accept or reject them.\n     *\n     *     call.listen('modify', function (evt) {\n     *         evt.call.accept();\n     *     });\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.accept\n     * @fires respoke.Call#accept\n     * @private\n     * @param {object} [params]\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the developer to receive the\n     * remote video element.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for the developer to be notified about hangup.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {boolean} [params.receiveOnly] - Whether or not we accept media.\n     * @param {boolean} [params.sendOnly] - Whether or not we send media.\n     * @param {Array<RTCConstraints>} [params.constraints] - Information about the media for this call.\n     */\n    that.accept = that.answer;\n\n    /**\n     * Start the process of network and media negotiation. If the app passes in a callback named previewLocalMedia\n     * in order to allow the logged-in person a chance to base their decision to continue the call on whether\n     * audio and/or video is working correctly,\n     * this method must be called on both sides in order to begin the call. If call.approve() is called, the call\n     * will progress as expected. If call.reject() is called, the call will be aborted.\n     *\n     *     call.listen('local-stream-received', function (evt) {\n     *         if (userLikesVideo()) {\n     *             evt.call.approve();\n     *         }\n     *     });\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.approve\n     * @fires respoke.Call#approve\n     */\n    that.approve = function () {\n        log.debug('Call.approve');\n        /**\n         * Fired when the local media access is approved.\n         * @event respoke.Call#approve\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('approve');\n        pc.state.dispatch('approve', {\n            previewLocalMedia: previewLocalMedia\n        });\n\n        if (defModify && defModify.promise.isPending()) {\n            defModify.resolve(true);\n            defModify = undefined;\n        }\n    };\n\n    /**\n     * Listen for the remote side to remove media in the middle of the call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.onRemoteStreamRemoved\n     * @private\n     * @param {object}\n     */\n    function onRemoteStreamRemoved(evt) {\n        log.debug('pc event: remote stream removed');\n    }\n\n    /**\n     * Listen for the remote side to add additional media in the middle of the call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.onRemoteStreamAdded\n     * @private\n     * @param {object}\n     * @fires respoke.Call#connect\n     */\n    function onRemoteStreamAdded(evt) {\n        var hasAudio = false;\n        var hasVideo = false;\n        var hasScreenShare = false;\n        var remoteMedia;\n        var useEl;\n\n        if (!pc) {\n            return;\n        }\n        log.debug('received remote media', evt);\n\n        // This is the first remote media we have received. The one we currently have is a guess. Rip it\n        // out and replace it with reality.\n        if (that.incomingMediaStreams.length === 1 && that.incomingMediaStreams[0].temporary === true) {\n            // have to do it this way because assigning a blank array to that.incomingMediaStreams will\n            // clobber the methods like hasAudio that we have added to the array.\n            that.incomingMediaStreams.length = 0;\n        }\n\n        hasAudio = evt.stream.getAudioTracks().length > 0;\n        hasVideo = evt.stream.getVideoTracks().length > 0;\n        // TODO this is not good enough long term.\n        hasScreenShare = hasVideo && that.target === 'screenshare';\n\n        if (that.videoRemoteElement && !that.videoRemoteElement.used) {\n            that.videoRemoteElement.used = true;\n            useEl = that.videoRemoteElement;\n        }\n\n        remoteMedia = respoke.RemoteMedia({\n            element: useEl,\n            stream: evt.stream,\n            hasScreenShare: hasScreenShare,\n            constraints: {\n                audio: hasAudio,\n                video: hasVideo\n            }\n        });\n        that.incomingMediaStreams.push(remoteMedia);\n\n        /**\n         * Indicates that remote media stream has been added to the call.\n         * @event respoke.Call#remote-stream-received\n         * @type {respoke.Event}\n         * @property {Element} element - The HTML5 Video element with the remote stream attached.\n         * @property {respoke.RemoteMedia} stream - The incomingMedia property on the call.\n         * @property {string} name - The event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('remote-stream-received', {\n            stream: remoteMedia\n        });\n\n        if (that.incomingMediaStreams.length < pc.sdpExpectedStreamCount) {\n            // there are more streams left to receive before we can dispatch the event to the state machine.\n            return;\n        }\n\n        /**\n         * Indicates that either remote media stream has been added to the call or if no\n         * media is expected, the other side is receiving our media.\n         * @event respoke.Call#connect\n         * @type {respoke.Event}\n         * @property {Element} element - The HTML5 Video element with the remote stream attached.\n         * @property {respoke.RemoteMedia} stream - The incomingMedia property on the call.\n         * @property {string} name - The event name.\n         * @property {respoke.Call} target\n         */\n        pc.state.dispatch('receiveRemoteMedia');\n        that.fire('connect', {\n            stream: remoteMedia.stream,\n            element: remoteMedia.element\n        });\n    }\n\n    /**\n     * ## The plugin `respoke.MediaStats` must be loaded before using this method.\n     *\n     * Start the process of listening for a continuous stream of statistics about the flow of audio and/or video.\n     * Since we have to wait for both the answer and offer to be available before starting\n     * statistics, the library returns a promise for the stats object. The statistics object does not contain the\n     * statistics; rather it contains methods of interacting with the actions of obtaining statistics. To obtain\n     * the actual statistics one time, use stats.getStats(); use the onStats callback to obtain a continuous\n     * stream of statistics every `interval` seconds.  Returns null if stats module is not loaded.\n     *\n     *     call.getStats({\n     *         onStats: function (evt) {\n     *             console.log('Stats', evt.stats);\n     *         }\n     *     }).done(function () {\n     *         console.log('Stats started');\n     *     }, function (err) {\n     *         console.log('Call is already hung up.');\n     *     });\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.getStats\n     * @param {object} params\n     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive\n     * the stats. If no callback is provided, the call's report will contain stats but the developer will not\n     * receive them on the client-side.\n     * @param {respoke.Call.statsSuccessHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Call.errorHandler} [params.onError] - Error handler for this invocation of this method only.\n     * @returns {Promise<object>|null}\n     */\n    function getStats(params) {\n        if (pc && pc.getStats) {\n            that.listen('stats', params.onStats);\n            return pc.getStats(params);\n        }\n        return null;\n    }\n    if (respoke.MediaStats) {\n        that.getStats = getStats;\n    }\n\n    /**\n     * Return local video element with the logged-in endpoint's audio and/or video streams attached to it.\n     *\n     *     var el = call.getLocalElement();\n     *     container.append(el);\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.getLocalElement\n     * @returns {Video} An HTML5 video element.\n     */\n    that.getLocalElement = function () {\n        return that.outgoingMediaStreams[0] ? that.outgoingMediaStreams[0].element : undefined;\n    };\n\n    /**\n     * Return remote video element with the remote endpoint's audio and/or video streams attached to it.\n     *\n     *     var el = call.getRemoteElement();\n     *     container.append(el);\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.getRemoteElement\n     * @returns {Video} An HTML5 video element.\n     */\n    that.getRemoteElement = function () {\n        return that.incomingMediaStreams[0] ? that.incomingMediaStreams[0].element : undefined;\n    };\n\n    /**\n     * Set up the local media.\n     * @memberof! respoke.Call\n     * @method respoke.Call.streamReceivedHandler\n     * @param {respoke.LocalMedia} The local media.\n     * @private\n     */\n    function streamReceivedHandler(localMedia) {\n        if (!pc) {\n            return;\n        }\n\n        pc.addStream(localMedia.stream);\n        if (typeof previewLocalMedia === 'function' && localMedia.element) {\n            previewLocalMedia(localMedia.element, that);\n        }\n\n        localMedia.listen('stop', function stopHandler(/* evt */) {\n            // if the local media has stopped, it has already been removed from respoke.streams.\n            // just need to remove it from the call's streams, and hangup if no streams left.\n\n            var idx = that.outgoingMediaStreams.indexOf(localMedia);\n            if (idx > -1) {\n                that.outgoingMediaStreams.splice(idx, 1);\n            }\n\n            if (!that.outgoingMediaStreams.length && !that.incomingMediaStreams.length) {\n                that.hangup({ reason: 'last stream ended' });\n            }\n        });\n\n        /**\n         * Indicate that the call has received local media from the browser.\n         * @event respoke.Call#local-stream-received\n         * @type {respoke.Event}\n         * @property {Element} element\n         * @property {respoke.LocalMedia} stream\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('local-stream-received', {\n            element: localMedia.element,\n            stream: localMedia\n        });\n\n        /**\n         * This event indicates that local video has been unmuted.\n         * @event respoke.Call#mute\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        localMedia.listen('mute', function (evt) {\n            that.fire('mute', {\n                type: evt.type,\n                muted: evt.muted\n            });\n        });\n    }\n\n    /**\n     * Create the RTCPeerConnection and add handlers. Process any offer we have already received. This method is called\n     * after answer() so we cannot use this method to set up the DirectConnection.\n     * @memberof! respoke.Call\n     * @method respoke.Call.doAddVideo\n     * @private\n     * @param {object} params\n     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect]\n     * @param {respoke.Call.onHangup} [params.onHangup]\n     * @fires respoke.Call#requesting-media\n     * @fires respoke.Call#allow\n     * @fires respoke.Call#local-stream-received\n     */\n    function doAddVideo(params) {\n        log.debug('Call.doAddVideo');\n        saveParameters(params);\n    }\n\n    /**\n     * Add a video and audio stream to the existing call. By default, this method adds both video AND audio.\n     * If audio is not desired, pass {audio: false}.\n     * @memberof! respoke.Call\n     * @method respoke.Call.addVideo\n     * @private\n     * @param {object} params\n     * @param {boolean} [params.audio=true]\n     * @param {boolean} [params.video=true]\n     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints, indicating the media\n     * being requested is\n     * an audio and/or video stream.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect]\n     * @param {respoke.Call.onHangup} [params.onHangup]\n     * @param {respoke.Call.mediaSuccessHandler} [params.onSuccess]\n     * @param {respoke.Client.errorHandler} [params.onError]\n     * @returns {Promise<respoke.LocalMedia>}\n     */\n    that.addVideo = function (params) {\n        log.debug('Call.addVideo');\n        params = params || {};\n        if (!params.constraints || !params.constraints.length) {\n            params.constraints = [{video: true, audio: true}];\n        }\n        params.instanceId = instanceId;\n\n        if (!defMedia.promise.isFulfilled()) { // we're the callee & have just accepted to modify\n            doAddVideo(params);\n        } else { // we're the caller and need to see if we can modify\n            pc.startModify({\n                constraints: params.constraints\n            });\n            defModify = Q.defer();\n            defModify.promise.then(function modifyAccepted() {\n                doAddVideo(params);\n            });\n        }\n        return defModify.promise;\n    };\n\n    /**\n     * Add an audio stream to the existing call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.addAudio\n     * @private\n     * @param {object} params\n     * @param {boolean} [params.audio=true]\n     * @param {boolean} [params.video=false]\n     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints, indicating the media\n     * being requested is an audio and/or video stream.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect]\n     * @param {respoke.Call.onHangup} [params.onHangup]\n     * @param {respoke.Call.mediaSuccessHandler} [params.onSuccess]\n     * @param {respoke.Client.errorHandler} [params.onError]\n     * @returns {Promise<respoke.LocalMedia>}\n     */\n    that.addAudio = function (params) {\n        params = params || {};\n        if (!params.constraints || !params.constraints.length) {\n            params.constraints = [{video: false, audio: true}];\n        }\n\n        return that.addVideo(params);\n    };\n\n    /**\n     * Get the direct connection on this call, if it exists.\n     *\n     *     var dc = call.getDirectConnection();\n     *     if (!dc) {\n     *         console.log(\"No direct connection has been started.\");\n     *     } else {\n     *         dc.sendMessage({message: 'hi'});\n     *     }\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.getDirectConnection\n     * @returns {respoke.DirectConnection}\n     */\n    that.getDirectConnection = function () {\n        return directConnection || null;\n    };\n\n    /**\n     * Remove a direct connection from the existing call. If there is no other media, this will hang up the call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.removeDirectConnection\n     * @private\n     * @param {object} params\n     * @arg {boolean} [params.skipModify] Do not restart media negotiation.\n     */\n    that.removeDirectConnection = function (params) {\n        params = params || {};\n        log.debug('Call.removeDirectConnection');\n\n        if (directConnection) {\n            directConnection.close({skipRemove: true});\n        }\n\n        if (!that.hasMedia()) {\n            log.debug('Hanging up because there are no local streams.');\n            that.hangup();\n            return;\n        }\n\n        if (params.skipModify === true) {\n            return;\n        }\n\n        pc.startModify({\n            directConnection: false\n        });\n        defModify = Q.defer();\n        defModify.promise.done(function onModifySuccess() {\n            defMedia.resolve();\n            defModify = undefined;\n        });\n    };\n\n    /**\n     * Add a direct connection to the existing call.\n     *\n     *     call.addDirectConnection({\n     *         onOpen: function (evt) {\n     *             console.log(\"Direct connection open!\");\n     *         }\n     *     });\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.addDirectConnection\n     * @private\n     * @param {object} params\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for the developer to be notified about\n     * closing the connection.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for the developer to be notified about\n     * opening the connection.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for the developer to be notified\n     * about incoming messages. Not usually necessary to listen to this event if you are already listening to\n     * respoke.Endpoint#message.\n     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess]\n     * @param {respoke.Client.errorHandler} [params.onError]\n     * @returns {Promise<respoke.DirectConnection>}\n     */\n    that.addDirectConnection = function (params) {\n        log.debug('Call.addDirectConnection');\n        pc.startModify({\n            directConnection: true\n        });\n        defModify = Q.defer();\n        return defModify.promise.then(function onModifySuccess() {\n            return actuallyAddDirectConnection(params);\n        }, function onModifyError(err) {\n            throw err;\n        });\n    };\n\n    /**\n     * Add a direct connection to the existing call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.actuallyAddDirectConnection\n     * @private\n     * @param {object} params\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for the developer to be notified about\n     * closing the connection.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for the developer to be notified about\n     * opening the connection.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for the developer to be notified\n     * about incoming messages. Not usually necessary to listen to this event if you are already listening to\n     * respoke.Endpoint#message.\n     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess]\n     * @param {respoke.Client.errorHandler} [params.onError]\n     * @returns {Promise<respoke.DirectConnection>}\n     * @fires respoke.Client#direct-connection\n     * @fires respoke.Call#direct-connection\n     */\n    function actuallyAddDirectConnection(params) {\n        log.debug('Call.actuallyAddDirectConnection', params);\n        params = params || {};\n        defMedia.promise.then(params.onSuccess, params.onError);\n\n        if (directConnection && directConnection.isActive()) {\n            if (defMedia.promise.isPending()) {\n                defMedia.resolve(directConnection);\n            } else {\n                log.warn(\"Not creating a new direct connection.\");\n            }\n            return defMedia.promise;\n        }\n\n        params.instanceId = instanceId;\n        params.pc = pc;\n        params.call = that;\n\n        directConnection = respoke.DirectConnection(params);\n\n        directConnection.listen('close', function closeHandler() {\n            if (!that.hasMedia()) {\n                log.debug('Hanging up because there are no local streams.');\n                that.hangup();\n            } else {\n                that.removeDirectConnection({skipModify: true});\n            }\n        }, true);\n\n        directConnection.listen('accept', function acceptHandler() {\n            if (pc.state.caller === false) {\n                log.debug('Answering as a result of approval.');\n            } else {\n                defMedia.resolve(directConnection);\n            }\n        }, true);\n\n        directConnection.listen('open', function openHandler() {\n            pc.state.dispatch('receiveRemoteMedia');\n        }, true);\n\n        directConnection.listen('error', function errorHandler(err) {\n            defMedia.reject(new Error(err));\n        }, true);\n\n        that.remoteEndpoint.directConnection = directConnection;\n\n        /**\n         * This event is fired when the local end of the directConnection is available. It still will not be\n         * ready to send and receive messages until the 'open' event fires.\n         * @event respoke.Call#direct-connection\n         * @type {respoke.Event}\n         * @property {respoke.DirectConnection} directConnection\n         * @property {respoke.Endpoint} endpoint\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('direct-connection', {\n            directConnection: directConnection,\n            endpoint: that.remoteEndpoint\n        });\n\n        /**\n         * This event is fired when the logged-in endpoint is receiving a request to open a direct connection\n         * to another endpoint.  If the user wishes to allow the direct connection, calling\n         * evt.directConnection.accept() will allow the connection to be set up.\n         * @event respoke.Client#direct-connection\n         * @type {respoke.Event}\n         * @property {respoke.DirectConnection} directConnection\n         * @property {respoke.Endpoint} endpoint\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         * @private\n         */\n        client.fire('direct-connection', {\n            directConnection: directConnection,\n            endpoint: that.remoteEndpoint\n        });\n\n        if (pc.state.caller === true) {\n            directConnection.accept();\n        }\n\n        return defMedia.promise;\n    }\n\n    /**\n     * Close the direct connection.\n     * @memberof! respoke.Call\n     * @method respoke.Call.closeDirectConnection\n     */\n    that.closeDirectConnection = function () {\n        if (directConnection) {\n            directConnection.close();\n            directConnection = null;\n        }\n    };\n\n    /**\n     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n     * signal is not false and we have not received a hangup signal from the remote party.\n     * @memberof! respoke.Call\n     * @method respoke.Call.hangup\n     * @fires respoke.Call#hangup\n     * @param {object} params\n     * @arg {boolean} params.signal Optional flag to indicate whether to send or suppress sending\n     * a hangup signal to the remote side.\n     */\n    that.hangup = function (params) {\n        if (!pc) {\n            return;\n        }\n        params = params || {};\n        params.reason = params.reason || \"hangup method called.\";\n        pc.state.dispatch('hangup', params);\n    };\n    that.hangup = respoke.callOnce(that.hangup);\n\n    /**\n     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n     * signal is not false and we have not received a hangup signal from the remote party. This is an event\n     * handler added to the state machine via `once`.\n     * @memberof! respoke.Call\n     * @method respoke.Call.hangup\n     * @fires respoke.Call#hangup\n     * @private\n     */\n    var doHangup = function () {\n        log.debug('hangup', that.caller);\n\n        that.outgoingMediaStreams.forEach(function (stream) {\n            // only call stop on the stream if it was constructed explicitly for the call\n            if (stream !== params.outgoingMedia) {\n                stream.stop();\n            }\n        });\n\n        if (directConnection) {\n            directConnection.close();\n            directConnection = null;\n        }\n\n        if (pc) {\n            pc.close({signal: (pc.state.receivedBye ? false : pc.state.signalBye)});\n        }\n\n        /**\n         * This event is fired when the call has hung up.\n         * @event respoke.Call#hangup\n         * @type {respoke.Event}\n         * @property {boolean} sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('hangup', {\n            reason: pc.state.hangupReason || \"No reason specified.\"\n        });\n\n        pc.state.ignore();\n        pc.ignore();\n        that.ignore();\n        pc = null;\n    };\n    doHangup = respoke.callOnce(doHangup);\n\n    /**\n     * Expose hangup as reject for approve/reject workflow.\n     * @memberof! respoke.Call\n     * @method respoke.Call.reject\n     * @param {object} params\n     */\n    that.reject = function () {\n        if (!pc) {\n            return;\n        }\n        pc.state.dispatch('reject', {reason: 'call.reject() called'});\n    };\n\n    /**\n     * Indicate whether a call is being setup or is in progress.\n     * @memberof! respoke.Call\n     * @method respoke.Call.isActive\n     * @returns {boolean}\n     */\n    that.isActive = function () {\n        return !!(pc && pc.isActive() && (\n            that.outgoingMediaStreams.length > 0 ||\n            that.incomingMediaStreams.length > 0 ||\n            (directConnection && directConnection.isActive())\n        ));\n    };\n\n    /**\n     * Set the estimated media status on incoming media.\n     * @memberof! respoke.Call\n     * @method respoke.Call.listenAnswer\n     * @param {object} evt\n     * @param {object} evt.signal - The offer signal including the sdp\n     * @private\n     */\n    function listenAnswer(evt) {\n        log.debug('listenAnswer', evt.signal);\n\n        that.hasDataChannel = respoke.sdpHasDataChannel(evt.signal.sessionDescription.sdp);\n        updateIncomingMediaEstimate({sdp: evt.signal.sessionDescription});\n    }\n\n    /**\n     * Set the estimated media status on incoming media.\n     * @memberof! respoke.Call\n     * @method respoke.Call.updateIncomingMediaEstimate\n     * @param {object} params\n     * @param {RTCSessionDescriptor} [params.sdp] - optional sdp to use to estimate media\n     * @param {RTCConstraints} [params.constraints] - optional constraints to use to estimate media\n     * @private\n     */\n    function updateIncomingMediaEstimate(params) {\n        if (pc.state.sendOnly) {\n            that.incomingMediaStreams.length = 0;\n            return;\n        }\n\n        if (!params.sdp && !params.constraints) {\n            throw new Error(\"Can't estimate incoming media without sdp or constraints\");\n        }\n\n        if (that.incomingMediaStreams.length === 0) {\n            that.incomingMediaStreams.push(respoke.RemoteMedia({\n                hasScreenShare: (that.target === 'screenshare'),\n                temporary: true\n            }));\n        }\n\n        if (params.sdp) {\n            if (that.incomingMediaStreams[0] && that.incomingMediaStreams[0].temporary) {\n                that.incomingMediaStreams[0].setSDP(params.sdp);\n            }\n        }\n\n        if (params.constraints) {\n            if (that.incomingMediaStreams[0] && that.incomingMediaStreams[0].temporary) {\n                that.incomingMediaStreams[0].setConstraints(params.constraints);\n            }\n        }\n    }\n\n    /**\n     * Set the estimated media status on outgoing media. For this method, by the time we have constraints, we're\n     * already calling getUserMedia so we will have exactly the right information. No need to use constraints\n     * to estimate.\n     * @memberof! respoke.Call\n     * @method respoke.Call.updateOutgoingMediaEstimate\n     * @param {object} params\n     * @param {RTCSessionDescriptor} [params.sdp] - optional sdp to use to estimate media\n     * @param {RTCConstraints} [params.constraints] - optional constraints to use to estimate media\n     * @private\n     */\n    function updateOutgoingMediaEstimate(params) {\n        if (pc.state.receiveOnly) {\n            that.outgoingMediaStreams.length = 0;\n            that.constraints = [];\n            return;\n        }\n\n        if (!params.sdp && !params.constraints) {\n            throw new Error(\"Can't estimate outgoing media without sdp or constraints\");\n        }\n\n        if (that.outgoingMediaStreams.length === 0) {\n            that.outgoingMediaStreams.push(respoke.LocalMedia({\n                instanceId: instanceId,\n                temporary: true,\n                source: params.source\n            }));\n        }\n\n        if (params.sdp) {\n            if (that.outgoingMediaStreams[0] && that.outgoingMediaStreams[0].temporary) {\n                that.outgoingMediaStreams[0].setSDP(params.sdp);\n            }\n        }\n\n        if (params.constraints) {\n            if (that.outgoingMediaStreams[0] && that.outgoingMediaStreams[0].temporary) {\n                that.outgoingMediaStreams[0].setConstraints(params.constraints);\n            }\n        }\n    }\n\n    /**\n     * Save the offer so we can tell the browser about it after the PeerConnection is ready.\n     * Set the estimated media status on incoming and outgoing media.\n     * @memberof! respoke.Call\n     * @method respoke.Call.listenOffer\n     * @param {object} evt\n     * @param {object} evt.signal - The offer signal including the sdp\n     * @private\n     * @fires respoke.Call#modify\n     */\n    function listenOffer(evt) {\n        log.debug('listenOffer', evt.signal);\n        var info = {};\n\n        that.sessionId = evt.signal.sessionId;\n        pc.state.receiveOnly = respoke.sdpHasSendOnly(evt.signal.sessionDescription.sdp);\n        pc.state.sendOnly = respoke.sdpHasReceiveOnly(evt.signal.sessionDescription.sdp);\n        pc.state.listen('connecting:entry', function () {\n            if (!pc.state.caller) {\n                pc.processOffer(evt.signal.sessionDescription);\n            }\n        });\n\n        // Only do this if we're still trying to guess what media is coming in.\n        // TODO not good enough for media renegotiation\n        updateIncomingMediaEstimate({sdp: evt.signal.sessionDescription});\n\n        /*!\n         * Always overwrite constraints for callee on every offer, since answer() and accept() will\n         * always be called after parsing the SDP. However, if the caller isn't sending any media,\n         * use audio & video as our estimate.\n         * TODO not good enough for media renegotiation\n         */\n        // If sendOnly, we can't rely on the offer for media estimate. It doesn't have any media in it!\n        if (pc.state.sendOnly) {\n            updateOutgoingMediaEstimate({constraints: {\n                audio: true,\n                video: true\n            }});\n        } else {\n            updateOutgoingMediaEstimate({sdp: evt.signal.sessionDescription});\n        }\n\n        if (that.outgoingMedia) {\n            log.info(\"Default outgoingMedia constraints\", that.outgoingMedia.constraints);\n        }\n\n        if (pc.state.isModifying()) {\n            if (pc.state.needDirectConnection === true) {\n                info.directConnection = directConnection;\n            } else if (pc.state.needDirectConnection === false) {\n                // Nothing\n            } else {\n                info.call = that;\n            }\n            /**\n             * Indicates a request to add something to an existing call. If 'constraints' is set, evt.constraints\n             * describes the media the other side has added. In this case, call.approve() must be called in order\n             * to approve the new media and send the same type of media.  If directConnection exists, the other side\n             * wishes to to open a direct connection. In order to approve, call directConnection.accept(). In either\n             * case, call.reject() and directConnection.reject() can be called to decline the request to add to the\n             * call.\n             * @event respoke.Call#modify\n             * @type {respoke.Event}\n             * @property {object} [constraints]\n             * @property {boolean} [directConnection]\n             * @property {string} name - the event name.\n             * @property {respoke.Call} target\n             */\n            that.fire('modify', info);\n        }\n\n        pc.state.dispatch('receiveOffer', {\n            previewLocalMedia: previewLocalMedia,\n            approve: that.approve\n        });\n    }\n\n    /**\n     * Save the answer and tell the browser about it.\n     * @memberof! respoke.Call\n     * @method respoke.Call.listenModify\n     * @private\n     */\n    function listenModify(evt) {\n        log.debug('Call.listenModify', evt);\n        if (evt.signal.action === 'initiate') {\n            defModify = Q.defer();\n            pc.state.dispatch('modify', {receive: true});\n        }\n    }\n\n    /**\n     * Set up state and media for the modify.\n     * @memberof! respoke.Call\n     * @method respoke.Call.onModifyAccept\n     * @param {respoke.Event} evt\n     * @private\n     */\n    function onModifyAccept(evt) {\n        pc.state.dispatch('accept');\n\n        if (evt.signal.action !== 'initiate') {\n            defModify.resolve(); // resolved later for callee\n            defModify = undefined;\n            return;\n        }\n\n        // callee only from here down\n\n        // init the directConnection if necessary. We don't need to do anything with\n        // audio or video right now.\n        if (evt.signal.directConnection === true) {\n            actuallyAddDirectConnection().done(function successHandler(dc) {\n                directConnection = dc;\n                directConnection.accept();\n            });\n        } else if (evt.signal.directConnection === false) {\n            if (directConnection) {\n                that.removeDirectConnection({skipModify: true});\n                defMedia.resolve(false);\n            }\n        }\n        pc.state.needDirectConnection = typeof evt.signal.directConnection === 'boolean' ?\n            evt.signal.directConnection : null;\n        that.outgoingMedia.constraints = evt.signal.constraints || that.outgoingMedia.constraints;\n    }\n\n    /**\n     * Ignore the modify.\n     * @memberof! respoke.Call\n     * @method respoke.Call.onModifyReject\n     * @param {respoke.Event} evt\n     * @param {Error} evt.err\n     * @private\n     */\n    function onModifyReject(evt) {\n        if (evt.signal.action !== 'initiate') {\n            defMedia.reject(evt.err);\n            defModify.reject(evt.err);\n            defModify = undefined;\n        }\n    }\n\n    /**\n     * If video is muted, unmute. If not muted, mute.\n     * @deprecated\n     * @memberof! respoke.Call\n     * @method respoke.Call.toggleVideo\n     */\n    that.toggleVideo = function () {\n        if (that.isActive()) {\n            if (!videoIsMuted) {\n                that.muteVideo();\n            } else {\n                that.unmuteVideo();\n            }\n        }\n    };\n\n    /**\n     * If audio is muted, unmute. If not muted, mute.\n     * @deprecated\n     * @memberof! respoke.Call\n     * @method respoke.Call.toggleAudio\n     */\n    that.toggleAudio = function () {\n        if (that.isActive()) {\n            if (!audioIsMuted) {\n                that.muteAudio();\n            } else {\n                that.unmuteAudio();\n            }\n        }\n    };\n\n    /**\n     * Indicate whether the call has media of any type flowing in either direction.\n     * @memberof! respoke.Call\n     * @method respoke.Call.hasMedia\n     * @returns {boolean}\n     */\n    that.hasMedia = function () {\n        var local;\n        var remote;\n\n        if (!pc || !pc.getLocalStreams) {\n            // PeerConnection.init() has not been called yet\n            return false;\n        }\n\n        local = pc.getLocalStreams();\n        remote = pc.getRemoteStreams();\n\n        if (directConnection && directConnection.isActive()) {\n            return true;\n        }\n\n        return (local.length > 0 || remote.length > 0);\n    };\n\n    /**\n     * Mute all local video streams.\n     * @memberof! respoke.Call\n     * @method respoke.Call.muteVideo\n     * @fires respoke.Call#mute\n     */\n    that.muteVideo = function () {\n        if (videoIsMuted) {\n            return;\n        }\n        that.outgoingMedia.muteVideo();\n        videoIsMuted = true;\n    };\n\n    /**\n     * Unmute all local video streams.\n     * @memberof! respoke.Call\n     * @method respoke.Call.unmuteVideo\n     * @fires respoke.Call#mute\n     */\n    that.unmuteVideo = function () {\n        if (!videoIsMuted) {\n            return;\n        }\n        that.outgoingMedia.unmuteVideo();\n        videoIsMuted = false;\n    };\n\n    /**\n     * Mute all local audio streams.\n     * @memberof! respoke.Call\n     * @method respoke.Call.muteAudio\n     * @fires respoke.Call#mute\n     */\n    that.muteAudio = function () {\n        if (audioIsMuted) {\n            return;\n        }\n        that.outgoingMedia.muteAudio();\n        audioIsMuted = true;\n    };\n\n    /**\n     * Unmute all local audio streams.\n     * @memberof! respoke.Call\n     * @method respoke.Call.unmuteAudio\n     * @fires respoke.Call#mute\n     */\n    that.unmuteAudio = function () {\n        if (!audioIsMuted) {\n            return;\n        }\n\n        that.outgoingMedia.unmuteAudio();\n        audioIsMuted = false;\n    };\n\n    /**\n     * Save the hangup reason and hang up.\n     * @memberof! respoke.Call\n     * @method respoke.Call.listenHangup\n     * @params {object} evt\n     * @params {object} evt.signal - The hangup signal, including an optional hangup reason.\n     * @private\n     */\n    function listenHangup(evt) {\n        if (!pc) {\n            return;\n        }\n        pc.report.callStoppedReason = evt.signal.reason || \"Remote side hung up\";\n        pc.state.receivedBye = true;\n        pc.state.dispatch('hangup', {signal: false, reason: pc.report.callStoppedReason});\n    }\n\n    pc.state.once('terminated:entry', function (evt) {\n        doHangup();\n    }, true);\n\n    that.listen('signal-answer', listenAnswer);\n    that.listen('signal-offer', function (evt) {\n        if (pc.state.getState() === 'idle') {\n            pc.state.once('preparing:entry', function () {\n                listenOffer(evt);\n            });\n        } else {\n            listenOffer(evt);\n        }\n    }, true);\n    that.listen('signal-hangup', listenHangup, true);\n    that.listen('signal-modify', listenModify, true);\n    pc.listen('modify-reject', onModifyReject, true);\n    pc.listen('modify-accept', onModifyAccept, true);\n    that.listen('signal-icecandidates', function onCandidateSignal(evt) {\n        if (!pc || !evt.signal.iceCandidates || !evt.signal.iceCandidates.length) {\n            return;\n        }\n        evt.signal.iceCandidates.forEach(function processCandidate(candidate) {\n            if (!pc) {\n                return;\n            }\n            pc.addRemoteCandidate({candidate: candidate});\n        });\n    }, true);\n\n    that.listen('answer', function (evt) {\n        var mediaPromises = [];\n\n        if (pc.state.receiveOnly || pc.state.needDirectConnection) {\n            that.outgoingMediaStreams.length = 0;\n            return;\n        }\n\n        /*!\n         * By the time we get to here, we could be in a couple of states.\n         *\n         * If receiveOnly is set to true, we could possibly have constraints (if the developer used the API wrong)\n         * but we will not have any media in that.outgoingMediaStreams. We should unset that.constraints and skip\n         * building any local media.\n         *\n         * If we have never received any constraints, and receiveOnly is NOT set to true, we will have an estimate\n         * at that.outgoingMediaStreams[0] with temporary set to true. This estimate was set by parsing the SDP.\n         *\n         * If we have received one or more constraints, that.constraints array will contain the most recent set\n         * AND we will have an estimate at that.outgoingMediaStreams[0] with temporary set to true. We must completely\n         * rebuild that.outgoingMediaStreams from that.constraints.\n         */\n        if (pc.state.receiveOnly) {\n            that.outgoingMediaStreams.length = 0;\n            that.constraints = [];\n            return;\n        }\n\n        if (that.constraints.length === 0) {\n            // We didn't get told what to do by constraints; use our guess.\n            that.outgoingMediaStreams[0].temporary = undefined;\n        } else if (that.outgoingMediaStreams.length > 0 && that.outgoingMediaStreams[0].temporary) {\n            // We got told what to do. Discard our guess. It's OK for that.outgoingMediaStreams to be empty now.\n            that.outgoingMediaStreams.shift();\n        }\n\n        // If outgoingMedia is passed into the Call then there is no need to build the LocalMedia here\n        if (params.outgoingMedia) {\n            return;\n        }\n\n        if (that.constraints.length > 0) {\n            that.outgoingMediaStreams.length = 0;\n            that.constraints.forEach(function (constraint) {\n                mediaPromises.push(buildLocalMedia(constraint));\n            });\n        } else if (that.outgoingMediaStreams.length > 0) {\n            that.outgoingMediaStreams.forEach(function (stream) {\n                mediaPromises.push(buildLocalMedia(stream));\n            });\n        } else {\n            throw new Error(\"I have no idea what type of media I am supposed to build.\");\n        }\n\n        // These errors are handled elsewhere.\n        Q.all(mediaPromises).done(function () {\n            pc.state.dispatch('receiveLocalMedia');\n        }, function (err) {\n            pc.state.dispatch('reject', {reason: 'media stream error'});\n            pc.report.callStoppedReason = err.message;\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.fire('error', {\n                reason: err.message\n            });\n        });\n    }, true);\n\n    if (pc.state.needDirectConnection !== true) {\n        pc.state.once('preparing:entry', function () {\n            /**\n             * This event provides notification for when an incoming call is being received.  If the user wishes\n             * to allow the call, the app should call evt.call.answer() to answer the call.\n             * @event respoke.Client#call\n             * @type {respoke.Event}\n             * @property {respoke.Call} call\n             * @property {respoke.Endpoint} endpoint\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n            client.fire('call', {\n                endpoint: that.remoteEndpoint,\n                call: that\n            });\n        }, true);\n    }\n\n    pc.state.listen('idle:exit', function (evt) {\n        saveParameters(params);\n    });\n\n    pc.state.listen('preparing:entry', function (evt) {\n        init();\n\n        if (params.outgoingMedia) {\n            streamReceivedHandler(params.outgoingMedia);\n            pc.state.dispatch('receiveLocalMedia');\n        }\n\n        if (pc.state.caller === true) {\n            that.answer();\n        }\n    }, true);\n\n    /*!\n     *  If we are sending media and the other side is not, we have to fire Call#connect manually,\n     *  because the RTCPeerConnection will never reach an ICE connection state of \"connected.\"\n     *  This will need to be moved when we start handling media renegotiation.\n     */\n    pc.state.listen('connecting:entry', function connectNoMedia() {\n        if (pc.state.sendOnly) {\n            /**\n             * Indicates that either remote media stream has been added to the call or if no\n             * media is expected, the other side is receiving our media.\n             * @event respoke.Call#connect\n             * @type {respoke.Event}\n             * @property {string} name - The event name.\n             * @property {respoke.Call} target\n             */\n            that.fire('connect');\n            pc.state.dispatch('receiveRemoteMedia');\n        }\n    });\n\n    signalingChannel.getTurnCredentials().then(function (result) {\n        if (!pc) {\n            throw new Error(\"Already hung up.\");\n        }\n        if (!result) {\n            log.warn(\"Relay service not available.\");\n            pc.servers = {iceServers: []};\n        } else {\n            pc.servers = {iceServers: result};\n        }\n    }).fin(function () {\n        if (!pc) {\n            throw new Error(\"Already hung up.\");\n        }\n        pc.state.dispatch('initiate', {\n            caller: that.caller\n        });\n    }).done(null, function (err) {\n        if (err.message !== \"Already hung up.\") {\n            log.debug('Unexpected exception', err);\n        }\n    });\n\n    return that;\n}; // End respoke.Call\n\n/**\n * Handle an error that resulted from a method call.\n * @callback respoke.Call.errorHandler\n * @param {Error} err\n */\n/**\n * Handle the successful kick-off of stats on a call.\n * @callback respoke.Call.statsSuccessHandler\n * @param {respoke.MediaStatsParser} statsParser\n */\n/**\n * Handle obtaining media successfully.\n * @callback respoke.Call.mediaSuccessHandler\n * @param {respoke.LocalMedia} localMedia\n */\n/**\n * When on a call, receive local media when it becomes available. This is what you will need to provide if you want\n * to show the user their own video during a call. This callback is called every time\n * respoke.Call#local-stream-received is fired.\n * @callback respoke.Call.onLocalMedia Callback for receiving an HTML5 Video\n * element with the local audio and/or video attached.\n * @param {respoke.Event} evt\n * @param {Element} evt.element\n * @param {respoke.LocalMedia} - The outgoingMedia property on the call.\n * @param {string} evt.name - The event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * When on a call, receive remote media when it becomes available. This is what you will need to provide if you want\n * to show the user the other party's video during a call. This callback is called every time\n * respoke.Call#connect is fired.\n * @callback respoke.Call.onConnect\n * @param {respoke.Event} evt\n * @param {Element} evt.element - the HTML5 Video element with the new stream attached.\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * When a call is in setup or media renegotiation happens. This callback will be called every time\n * respoke.Call#error.\n * @callback respoke.Call.onError\n * @param {respoke.Event} evt\n * @param {boolean} evt.reason - A human-readable description of the error.\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * When on a call, receive notification the call has been hung up. This callback is called every time\n * respoke.Call#hangup is fired.\n * @callback respoke.Call.onHangup\n * @param {respoke.Event} evt\n * @param {boolean} evt.sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * Called when changing the mute state on any type of media. This callback will be called when media is muted or\n * unmuted. This callback is called every time respoke.Call#mute is fired.\n * @callback respoke.Call.onMute\n * @param {respoke.Event} evt\n * @param {respoke.Call} evt.target\n */\n/**\n * Called when the callee answers the call. This callback is called every time respoke.Call#answer is fired.\n * @callback respoke.Call.onAnswer\n * @param {respoke.Event} evt\n * @param {respoke.Call} evt.target\n */\n/**\n * Called when the user approves local media. This callback will be called whether or not the approval was based\n * on user feedback. I. e., it will be called even if the approval was automatic. This callback is called every time\n * respoke.Call#approve is fired.\n * @callback respoke.Call.onApprove\n * @param {respoke.Event} evt\n * @param {respoke.Call} evt.target\n */\n/**\n * When setting up a call, receive notification that the browser has granted access to media.  This callback is\n * called every time respoke.Call#allow is fired.\n * @callback respoke.Call.onAllow\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * When setting up a call, receive notification that the app has asked the browser for permission to get audio or\n * video and is waiting on the browser to grant or reject permission. This callback will be called every time\n * respoke.Call#requesting-media is fired.\n * @callback respoke.Call.onRequestingMedia\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * The use of stats requires an additional module to Respoke. When on a call, receive periodic statistical\n * information about the call, including the codec, lost packets, and bandwidth being consumed. This callback is\n * called every time respoke.Call#stats is fired.\n * @callback respoke.MediaStatsParser.statsHandler\n * @param {respoke.Event} evt\n * @param {respoke.MediaStats} evt.stats - an object with stats in it.\n * @param {respoke.Call} evt.target\n * @param {string} evt.name - the event name.\n */\n/**\n * When on a call, receive local media when it becomes available. This is what you will need to provide if you want\n * to allow the user to preview and approve or reject their own video before a call. If this callback is provided,\n * Respoke will wait for call.answer() to be called before proceeding. If this callback is not provided,\n * Respoke will proceed without waiting for user input. This callback is called every time\n * respoke.Call#local-stream-received is fired.\n * @callback respoke.Call.previewLocalMedia\n * @param {object} element - the HTML5 Video element with the new stream attached.\n * @param {respoke.Call} call\n */\n/**\n * Receive the DirectConnection.\n * @callback respoke.Call.directConnectionSuccessHandler\n * @param {respoke.DirectConnection} directConnection\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/call.js\n ** module id = 16\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar respoke = require('./respoke');\nvar log = respoke.log;\nvar Q = respoke.Q;\n\n/**\n * A wrapper around the stream from `getUserMedia`,\n * which is attached to a call at `call.outgoingMedia`.\n *\n * @class respoke.LocalMedia\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {object} [params.constraints]\n * @param {HTMLVideoElement} params.element - Pass in an optional html video element to have local\n * video attached to it.\n * @returns {respoke.LocalMedia}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = respoke.EventEmitter(params);\n\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.LocalMedia';\n    /**\n     * Respoke media ID (different from a `MediaStream.id`).\n     * @memberof! respoke.LocalMedia\n     * @name id\n     * @type {string}\n     */\n    that.id = respoke.makeGUID();\n    /**\n     * The HTML element with video attached.\n     * @memberof! respoke.LocalMedia\n     * @name element\n     * @type {HTMLVideoElement}\n     */\n    that.element = params.element;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name hasScreenShare\n     * @private\n     * @type {boolean}\n     */\n    var hasScreenShare = params.hasScreenShare;\n    delete params.hasScreenShare;\n\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name screenShareSource\n     * @private\n     * @type {string}\n     */\n    var screenShareSource = params.source;\n    delete params.source;\n\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name sdpHasAudio\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasAudio = false;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name sdpHasVideo\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasVideo = false;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name sdpHasDataChannel\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasDataChannel = false;\n    /**\n     * A timer to make sure we only fire {respoke.LocalMedia#requesting-media} if the browser doesn't\n     * automatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.\n     * @memberof! respoke.LocalMedia\n     * @name allowTimer\n     * @private\n     * @type {number}\n     */\n    var allowTimer = 0;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name mediaOptions\n     * @private\n     * @type {object}\n     */\n    var mediaOptions = {\n        optional: [\n            { DtlsSrtpKeyAgreement: true },\n            { RtpDataChannels: false }\n        ]\n    };\n\n    /**\n     * The local `MediaStream` from `getUserMedia()`.\n     * @memberof! respoke.LocalMedia\n     * @name stream\n     * @type {RTCMediaStream}\n     */\n    that.stream = null;\n\n    /**\n     * The media deferred whose promise is returned from localMedia.start and resolved with the stream.\n     * @memberof! respoke.LocalMedia\n     * @name deferred\n     * @type {object}\n     * @private\n     */\n    var deferred = Q.defer();\n\n    function getStream(theConstraints) {\n        for (var i = 0; i < respoke.streams.length; i++) {\n            var s = respoke.streams[i];\n\n            var sConstraints = respoke.clone(s.constraints);\n            if (sConstraints.video && sConstraints.video.mandatory &&\n                sConstraints.video.mandatory.chromeMediaSourceId) {\n                delete sConstraints.video.mandatory.chromeMediaSourceId;\n            }\n\n            if (respoke.isEqual(sConstraints, theConstraints)) {\n                return s.stream;\n            }\n        }\n        return null;\n    }\n\n    function removeStream(theConstraints) {\n        var toRemoveIndex;\n        for (var i = 0; i < respoke.streams.length; i++) {\n            var s = respoke.streams[i];\n            if (respoke.isEqual(s.constraints, theConstraints)) {\n                toRemoveIndex = i;\n                break;\n            }\n        }\n        if (toRemoveIndex !== undefined) {\n            respoke.streams.splice(toRemoveIndex, 1);\n        }\n    }\n\n    /**\n     * Save the local stream. Kick off SDP creation.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.onReceiveUserMedia\n     * @private\n     * @param {RTCMediaStream} theStream\n     */\n    function onReceiveUserMedia(theStream) {\n        that.stream = theStream;\n        clearTimeout(allowTimer);\n        /**\n         * The user has approved the request for media. Any UI changes made to remind the user to click Allow\n         * should be canceled now. This event is the same as the `onAllow` callback.  This event gets fired\n         * even if the allow process is automatic, i. e., permission and media is granted by the browser\n         * without asking the user to approve it.\n         * @event respoke.LocalMedia#allow\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         */\n        that.fire('allow');\n        log.debug('User gave permission to use media.');\n        log.debug('onReceiveUserMedia');\n\n        that.element = that.element || document.createElement('video');\n\n        // This still needs some work. Using cached streams causes an unused video element to be passed\n        // back to the App. This is because we assume at the moment that only one local media video element\n        // will be needed. The first one passed back will contain media and the others will fake it. Media\n        // will still be sent with every peer connection. Also need to study the use of getLocalElement\n        // and the implications of passing back a video element with no media attached.\n        var aStream = getStream(that.constraints);\n        if (aStream) {\n            aStream.numPc += 1;\n\n            attachMediaStream(that.element, that.stream);\n            // We won't want our local video outputting audio.\n            that.element.muted = true;\n            that.element.autoplay = true;\n\n            // perform cleanup on the LocalMedia instance if the underlying stream has ended\n            aStream.addEventListener('ended', that.stop, false);\n\n            deferred.resolve();\n        } else {\n            that.stream.numPc = 1;\n            respoke.streams.push({stream: that.stream, constraints: that.constraints});\n\n            attachMediaStream(that.element, that.stream);\n            // We won't want our local video outputting audio.\n            that.element.muted = true;\n            that.element.autoplay = true;\n\n            // perform cleanup on the LocalMedia instance if the underlying stream has ended\n            that.stream.addEventListener('ended', that.stop, false);\n            deferred.resolve();\n        }\n    }\n\n    /**\n     * Expose getAudioTracks.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.getAudioTracks\n     */\n    that.getAudioTracks = function () {\n        if (that.stream) {\n            return that.stream.getAudioTracks();\n        }\n        return [];\n    };\n\n    /**\n     * Expose getVideoTracks.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.getVideoTracks\n     */\n    that.getVideoTracks = function () {\n        if (that.stream) {\n            return that.stream.getVideoTracks();\n        }\n        return [];\n    };\n\n    /**\n     * Create the RTCPeerConnection and add handlers. Process any offer we have already received.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.requestMedia\n     * @private\n     */\n    function requestMedia() {\n        var theStream;\n        var requestingScreenShare;\n\n        if (!that.constraints) {\n            deferred.reject(new Error('No constraints.'));\n            return;\n        }\n\n        if (respoke.useFakeMedia === true) {\n            that.constraints.fake = true;\n        }\n\n        theStream = getStream(that.constraints);\n        if (theStream) {\n            log.debug('using old stream');\n            onReceiveUserMedia(theStream);\n            return;\n        }\n\n        // TODO set getStream(that.constraints) = true as a flag that we are already\n        // attempting to obtain this media so the race condition where gUM is called twice with\n        // the same constraints when calls are placed too quickly together doesn't occur.\n        allowTimer = setTimeout(function delayPermissionsRequest() {\n            /**\n             * The browser is asking for permission to access the User's media. This would be an ideal time\n             * to modify the UI of the application so that the user notices the request for permissions\n             * and approves it.\n             * @event respoke.LocalMedia#requesting-media\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.LocalMedia} target\n             */\n            that.fire('requesting-media');\n        }, 500);\n\n        requestingScreenShare =\n            (that.constraints.video.mandatory && that.constraints.video.mandatory.chromeMediaSource) ||\n            (that.constraints.video.chromeMediaSource) || (that.constraints.video.mediaSource);\n\n        if (requestingScreenShare) {\n            if (respoke.isNwjs || (respoke.needsChromeExtension && respoke.hasChromeExtension)) {\n                respoke.chooseDesktopMedia({source: screenShareSource}, function (params) {\n                    if (!params.sourceId) {\n                        deferred.reject(new Error(\"Error trying to get screensharing source: \" + params.error));\n                        return;\n                    }\n                    that.constraints.video.mandatory.chromeMediaSourceId = params.sourceId;\n                    log.debug(\"Running getUserMedia with constraints\", that.constraints);\n                    getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n                });\n                return;\n            } else if (respoke.needsFirefoxExtension && respoke.hasFirefoxExtension) {\n                log.debug(\"Running getUserMedia with constraints\", that.constraints);\n                getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n                return;\n            } else {\n                deferred.reject(new Error(\"Screen sharing not implemented on this platform yet.\"));\n                return;\n            }\n        }\n        log.debug(\"Running getUserMedia with constraints\", that.constraints);\n        getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n    }\n\n    /**\n     * Handle any error that comes up during the process of getting user media.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.onUserMediaError\n     * @private\n     * @param {object}\n     */\n    function onUserMediaError(p) {\n        var errorMessage = p.code === 1 ? \"Permission denied.\" : \"Unknown.\";\n        deferred.reject(new Error(\"Error getting user media: \" + errorMessage));\n    }\n\n    /**\n     * Whether the video stream is muted, or undefined if no stream of this type exists.\n     *\n     * All video tracks must be muted for this to return `false`.\n     * @returns boolean\n     */\n    that.isVideoMuted = function () {\n        if (!that.stream || !that.stream.getVideoTracks().length) {\n            return undefined;\n        }\n\n        return that.stream.getVideoTracks().every(function (track) {\n            return !track.enabled;\n        });\n    };\n\n    /**\n     * Mute local video stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.muteVideo\n     * @fires respoke.LocalMedia#mute\n     */\n    that.muteVideo = function () {\n        if (that.isVideoMuted()) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });\n        /**\n         * Indicate that the mute status of local audio or video has changed.\n         * @event respoke.LocalMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'video',\n            muted: true\n        });\n    };\n\n    /**\n     * Unmute local video stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.unmuteVideo\n     * @fires respoke.LocalMedia#mute\n     */\n    that.unmuteVideo = function () {\n        if (!that.isVideoMuted()) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });\n        /**\n         * Indicate that the mute status of local audio or video has changed.\n         * @event respoke.LocalMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'video',\n            muted: false\n        });\n    };\n\n    /**\n     * Whether the audio stream is muted, or undefined if no track of this type exists.\n     *\n     * All audio tracks must be muted for this to return `false`.\n     * @returns boolean\n     */\n    that.isAudioMuted = function () {\n        if (!that.stream || !that.stream.getAudioTracks().length) {\n            return undefined;\n        }\n        return that.stream.getAudioTracks().every(function (track) {\n            return !track.enabled;\n        });\n    };\n\n    /**\n     * Mute local audio stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.muteAudio\n     * @fires respoke.LocalMedia#mute\n     */\n    that.muteAudio = function () {\n        if (that.isAudioMuted()) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });\n        /**\n         * Indicate that the mute status of local audio or video has changed.\n         * @event respoke.LocalMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'audio',\n            muted: true\n        });\n    };\n\n    /**\n     * Unmute local audio stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.unmuteAudio\n     * @fires respoke.LocalMedia#mute\n     */\n    that.unmuteAudio = function () {\n        if (!that.isAudioMuted()) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });\n        /**\n         * Indicate that the mute status of local audio or video has changed.\n         * @event respoke.LocalMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'audio',\n            muted: false\n        });\n    };\n\n    /**\n     * Stop the stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.stop\n     * @fires respoke.LocalMedia#stop\n     */\n    that.stop = function () {\n        if (!that.stream) {\n            return;\n        }\n\n        that.stream.numPc -= 1;\n        if (that.stream.numPc === 0) {\n            that.stream.stop();\n            removeStream(that.constraints);\n        }\n        that.stream = null;\n        /**\n         * Indicate that local media has stopped.\n         * @event respoke.LocalMedia#stop\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         */\n        that.fire('stop');\n    };\n\n    /**\n     * Indicate whether we are sending a screenshare.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.hasScreenShare\n     * @return {boolean}\n     */\n    that.hasScreenShare = function () {\n        if (that.stream) {\n            return (that.stream.getVideoTracks().length > 0 && hasScreenShare);\n        }\n        return hasScreenShare;\n    };\n\n    /**\n     * Indicate whether we are sending video.\n     *\n     * Note: This method will return true when the video is a screenshare.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.hasVideo\n     * @return {boolean}\n     */\n    that.hasVideo = function () {\n        if (that.stream) {\n            return (that.stream.getVideoTracks().length > 0);\n        }\n        return sdpHasVideo;\n    };\n\n    /**\n     * Indicate whether we are sending audio.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.hasAudio\n     * @return {boolean}\n     */\n    that.hasAudio = function () {\n        if (that.stream) {\n            return (that.stream.getAudioTracks().length > 0);\n        }\n        return sdpHasAudio;\n    };\n\n    /**\n     * Indicate whether we have media yet.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.hasMedia\n     * @return {boolean}\n     */\n    that.hasMedia = function () {\n        return !!that.stream;\n    };\n\n    /**\n     * Save and parse the SDP.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.setSDP\n     * @param {RTCSessionDescription} oSession\n     * @private\n     */\n    that.setSDP = function (oSession) {\n        sdpHasVideo = respoke.sdpHasVideo(oSession.sdp);\n        sdpHasAudio = respoke.sdpHasAudio(oSession.sdp);\n        sdpHasDataChannel = respoke.sdpHasDataChannel(oSession.sdp);\n\n        // We don't have media yet & this can still be changed so create the defaults based on what the sdp says.\n        if (that.temporary) {\n            that.constraints = {\n                video: sdpHasVideo,\n                audio: sdpHasAudio,\n                mandatory: {},\n                optional: []\n            };\n        }\n    };\n\n    /**\n     * Parse the constraints.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.setConstraints\n     * @param {MediaConstraints} constraints\n     * @private\n     */\n    that.setConstraints = function (constraints) {\n        that.constraints = constraints;\n        sdpHasVideo = respoke.constraintsHasVideo(that.constraints);\n        sdpHasAudio = respoke.constraintsHasAudio(that.constraints);\n    };\n\n    /**\n     * Start the stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.start\n     * @fires respoke.LocalMedia#start\n     * @param {object} [params]\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    that.start = function (params) {\n        var retVal;\n        params = params || {};\n\n        if (that.temporary) {\n            deferred.reject(new Error(\"Temporary local media started!\"));\n        } else {\n            requestMedia();\n        }\n\n        retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n        return retVal;\n    };\n\n    return that;\n}; // End respoke.LocalMedia\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/localMedia.js\n ** module id = 17\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar respoke = require('./respoke');\n\n/**\n * Class for managing the remote media stream,\n * which is attached to a call at `call.outgoingMedia`.\n *\n * @class respoke.RemoteMedia\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {object} params.constraints\n * @param {boolean} params.temporary - whether this instance represents our best guess of future media. If so,\n * this object will be deleted when real media comes in. It will be replaced by different instance of\n * respoke.RemoteMedia representing the actual state of media.\n * @param {HTMLVideoElement} params.element - Pass in an optional html video element to have remote\n * video attached to it.\n * @returns {respoke.RemoteMedia}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var that = respoke.EventEmitter(params);\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.RemoteMedia';\n    /**\n     * Respoke media ID (different from a `MediaStream.id`).\n     * @memberof! respoke.RemoteMedia\n     * @name id\n     * @type {string}\n     */\n    that.id = respoke.makeGUID();\n    /**\n     * The HTML element with attached video.\n     * @memberof! respoke.RemoteMedia\n     * @name element\n     * @type {HTMLVideoElement}\n     */\n    that.element = params.element || document.createElement('video');\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name hasScreenShare\n     * @private\n     * @type {boolean}\n     */\n    var hasScreenShare = params.hasScreenShare;\n    delete params.hasScreenShare;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name sdpHasAudio\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasAudio = false;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name sdpHasVideo\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasVideo = false;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name sdpHasDataChannel\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasDataChannel = false;\n    /**\n     * A timer to make sure we only fire {respoke.RemoteMedia#requesting-media} if the browser doesn't\n     * automatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.\n     * @memberof! respoke.RemoteMedia\n     * @name allowTimer\n     * @private\n     * @type {number}\n     */\n    var allowTimer = 0;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name mediaOptions\n     * @private\n     * @type {object}\n     */\n    var mediaOptions = {\n        optional: [\n            { DtlsSrtpKeyAgreement: true },\n            { RtpDataChannels: false }\n        ]\n    };\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name pc\n     * @private\n     * @type {respoke.PeerConnection}\n     */\n    var pc = params.pc;\n    delete that.pc;\n    /**\n     * The remote `MediaStream`.\n     * @memberof! respoke.RemoteMedia\n     * @name stream\n     * @type {RTCMediaStream}\n     */\n    that.stream = params.stream;\n\n    if (!that.temporary) {\n        attachMediaStream(that.element, that.stream);\n        that.element.autoplay = true;\n        setTimeout(that.element.play.bind(that.element)); // stupid Firefox requires this.\n    }\n\n    /**\n     * Indicate whether we are receiving a screenshare.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.hasScreenShare\n     * @return {boolean}\n     */\n    that.hasScreenShare = function () {\n        if (that.stream) {\n            return (that.stream.getVideoTracks().length > 0 && hasScreenShare);\n        }\n        return hasScreenShare;\n    };\n\n    /**\n     * Indicate whether we are receiving video.\n     *\n     * Note: This method will return true when the video is a screenshare.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.hasVideo\n     * @return {boolean}\n     */\n    that.hasVideo = function () {\n        if (that.stream) {\n            return (that.stream.getVideoTracks().length > 0);\n        }\n        return sdpHasVideo;\n    };\n\n    /**\n     * Indicate whether we are receiving audio.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.hasAudio\n     * @return {boolean}\n     */\n    that.hasAudio = function () {\n        if (that.stream) {\n            return (that.stream.getAudioTracks().length > 0);\n        }\n        return sdpHasAudio;\n    };\n\n    /**\n     * Indicate whether we have media yet.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.hasMedia\n     * @return {boolean}\n     */\n    that.hasMedia = function () {\n        return !!that.stream;\n    };\n\n    /**\n     * Save and parse the SDP\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.setSDP\n     * @param {RTCSessionDescription} oSession\n     * @private\n     */\n    that.setSDP = function (oSession) {\n        sdpHasVideo = respoke.sdpHasVideo(oSession.sdp);\n        sdpHasAudio = respoke.sdpHasAudio(oSession.sdp);\n        sdpHasDataChannel = respoke.sdpHasDataChannel(oSession.sdp);\n    };\n\n    /**\n     * Parse the constraints.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.setConstraints\n     * @param {MediaConstraints} constraints\n     * @private\n     */\n    that.setConstraints = function (constraints) {\n        that.constraints = constraints;\n        sdpHasVideo = respoke.constraintsHasVideo(that.constraints);\n        sdpHasAudio = respoke.constraintsHasAudio(that.constraints);\n    };\n\n    /**\n     * Expose getAudioTracks.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.getAudioTracks\n     */\n    that.getAudioTracks = function () {\n        if (that.stream) {\n            return that.stream.getAudioTracks();\n        }\n        return [];\n    };\n\n    /**\n     * Expose getVideoTracks.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.getVideoTracks\n     */\n    that.getVideoTracks = function () {\n        if (that.stream) {\n            return that.stream.getVideoTracks();\n        }\n        return [];\n    };\n\n    /**\n     * Stop the stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.stop\n     * @fires respoke.RemoteMedia#stop\n     */\n    that.stop = function () {\n        if (!that.stream) {\n            return;\n        }\n\n        that.stream.numPc -= 1;\n        if (that.stream.numPc === 0) {\n            that.stream.stop();\n        }\n        that.stream = null;\n        /**\n         * Indicate that remote media has stopped.\n         * @event respoke.RemoteMedia#stop\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         */\n        that.fire('stop');\n    };\n\n    /**\n     * Whether the video stream is muted.\n     *\n     * All video tracks must be muted for this to return `false`.\n     * @returns boolean\n     */\n    that.isVideoMuted = function () {\n        if (!that.stream) {\n            return false;\n        }\n        return that.stream.getVideoTracks().every(function (track) {\n            return !track.enabled;\n        });\n    };\n\n    /**\n     * Mute remote video stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.muteVideo\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.muteVideo = function () {\n        if (that.isVideoMuted()) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });\n        /**\n         * Indicate that the muted status of remote video or audio has changed.\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'video',\n            muted: true\n        });\n    };\n\n    /**\n     * Unmute remote video stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.unmuteVideo\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.unmuteVideo = function () {\n        if (!that.isVideoMuted()) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });\n        /**\n         * Indicate that the muted status of remote video or audio has changed.\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'video',\n            muted: false\n        });\n    };\n\n    /**\n     * Whether the audio stream is muted.\n     *\n     * All audio tracks must be muted for this to return `false`.\n     * @returns boolean\n     */\n    that.isAudioMuted = function () {\n        if (!that.stream) {\n            return false;\n        }\n        return that.stream.getAudioTracks().every(function (track) {\n            return !track.enabled;\n        });\n    };\n\n    /**\n     * Mute remote audio stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.muteAudio\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.muteAudio = function () {\n        if (that.isAudioMuted()) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });\n        /**\n         * Indicate that the muted status of remote video or audio has changed.\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'audio',\n            muted: true\n        });\n    };\n\n    /**\n     * Unmute remote audio stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.unmuteAudio\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.unmuteAudio = function () {\n        if (!that.isAudioMuted()) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });\n        /**\n         * Indicate that the muted status of remote video or audio has changed.\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'audio',\n            muted: false\n        });\n    };\n\n    return that;\n}; // End respoke.RemoteMedia\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/remoteMedia.js\n ** module id = 18\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\n\n/**\n * A conference call to one or more people with audio. Eventually this will handle video, too.\n * @class respoke.Conference\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.conferenceId - The id that should be used to create the conference call or the ID\n * of the call to join.\n * @param {string} params.instanceId - client id\n * @param {string} params.key - The key that indicates an endpoint can join.\n * @param {boolean} params.open - whether endpoints can join this conference without a key.\n * @param {boolean} params.caller - whether or not we initiated the call\n * @param {boolean} [params.receiveOnly] - whether or not we accept media\n * @param {boolean} [params.sendOnly] - whether or not we send media\n * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n * relay servers. If it cannot flow through relay servers, the call will fail.\n * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n * required to flow peer-to-peer. If it cannot, the call will fail.\n * @param {respoke.Endpoint} params.remoteEndpoint - The endpoint who is being called.\n * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint.\n * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n * wants to perform an action between local media becoming available and calling approve().\n * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n * @param {function} params.signalReport - Signaling action from SignalingChannel.\n * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n * @param {Array<RTCConstraints>} params.constraints - Array of WebRTC constraints.\n * @param {respoke.Conference.onJoin} [params.onJoin] - Callback for when a participant joins the conference.\n * @param {respoke.Conference.onLeave} [params.onLeave] - Callback for when a participant leaves the conference.\n * @param {respoke.Conference.onMessage} [params.onMessage] - Callback for when a message is sent to the conference.\n * @param {respoke.Conference.onMute} [params.onMute] - Callback for when local or remote media is muted or unmuted.\n * @param {respoke.Conference.onTopic} [params.onTopic] - Callback for the conference topic changes.\n * @param {respoke.Conference.onPresenter} [params.onPresenter] - Callback for when the presenter changes.\n * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n * media renegotiation.\n * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n * element with the local audio and/or video attached.\n * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n * it was ended in a graceful manner.\n * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n * This callback will be called when media is muted or unmuted.\n * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n * for the user to give permission to start getting audio or video.\n * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n * the approval was automatic.\n * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n * granted by the browser without asking the user to approve it.\n * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n * video attached to it.\n * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n * video attached to it.\n * @returns {respoke.Conference}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Client\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var signalingChannel = params.signalingChannel;\n    var that = respoke.EventEmitter({\n        open: params.open,\n        key: params.key,\n        id: params.conferenceId\n    });\n\n    that.listen('join', params.onJoin);\n    that.listen('leave', params.onLeave);\n    that.listen('message', params.onMessage);\n    that.listen('mute', params.onMute);\n    that.listen('topic', params.onTopic);\n    that.listen('presenter', params.onPresenter);\n    delete params.onJoin;\n    delete params.onLeave;\n    delete params.onMessage;\n    delete params.onMute;\n    delete params.onTopic;\n    delete params.onPresenter;\n\n    params.caller = true;\n    delete params.conferenceId;\n    delete params.key;\n    params.remoteEndpoint = that;\n    that.call = respoke.Call(params);\n\n    // Redirect a bunch of events.\n    ['mute', 'hangup', 'connect'].forEach(function (eventName) {\n        that.call.listen(eventName, function (evt) {\n            evt.call = that.call; // target will be updated to point to this conference object.\n            that.fire(eventName, evt);\n        });\n    });\n\n    delete that.instanceId;\n\n    /**\n     * A name to identify this class\n     * @memberof! respoke.Conference\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Conference';\n\n    /**\n     * @memberof! respoke.Conference\n     * @name client\n     * @type {respoke.Client}\n     * @private\n     */\n    var client = respoke.getClient(instanceId);\n\n    /**\n     * Hang up on the conference call.\n     * @memberof! respoke.Conference\n     * @method respoke.Conference.hangup\n     */\n    that.hangup = that.call.hangup;\n\n    /**\n     * Mute local user's audio.\n     * @memberof! respoke.Conference\n     * @method respoke.Conference.muteAudio\n     */\n    that.muteAudio = that.call.muteAudio;\n\n    return that;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/conference.js\n ** module id = 19\n ** module chunks = 0\n **/","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}(g.airbrakeJs || (g.airbrakeJs = {})).Client = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global){\nvar Client, merge;\n\nrequire('./internal/compat');\n\nmerge = require('./internal/merge');\n\nClient = (function() {\n  function Client(opts) {\n    var reporter;\n    if (opts == null) {\n      opts = {};\n    }\n    this._projectId = opts.projectId || 0;\n    this._projectKey = opts.projectKey || '';\n    this._host = 'https://api.airbrake.io';\n    this._context = {};\n    this._params = {};\n    this._env = {};\n    this._session = {};\n    this._processor = null;\n    this._reporters = [];\n    this._filters = [];\n    if (opts.processor !== void 0) {\n      this._processor = opts.processor;\n    } else {\n      this._processor = require('./processors/stack');\n    }\n    if (opts.reporter !== void 0) {\n      this.addReporter(opts.reporter);\n    } else {\n      if ('withCredentials' in new global.XMLHttpRequest()) {\n        reporter = require('./reporters/xhr');\n      } else {\n        reporter = require('./reporters/jsonp');\n      }\n      this.addReporter(reporter);\n    }\n  }\n\n  Client.prototype.setProject = function(id, key) {\n    this._projectId = id;\n    return this._projectKey = key;\n  };\n\n  Client.prototype.setHost = function(host) {\n    return this._host = host;\n  };\n\n  Client.prototype.addContext = function(context) {\n    return merge(this._context, context);\n  };\n\n  Client.prototype.setEnvironmentName = function(envName) {\n    return this._context.environment = envName;\n  };\n\n  Client.prototype.addParams = function(params) {\n    return merge(this._params, params);\n  };\n\n  Client.prototype.addEnvironment = function(env) {\n    return merge(this._env, env);\n  };\n\n  Client.prototype.addSession = function(session) {\n    return merge(this._session, session);\n  };\n\n  Client.prototype.addReporter = function(reporter) {\n    return this._reporters.push(reporter);\n  };\n\n  Client.prototype.addFilter = function(filter) {\n    return this._filters.push(filter);\n  };\n\n  Client.prototype.push = function(err) {\n    var defContext, ref;\n    defContext = {\n      language: 'JavaScript',\n      sourceMapEnabled: true\n    };\n    if ((ref = global.navigator) != null ? ref.userAgent : void 0) {\n      defContext.userAgent = global.navigator.userAgent;\n    }\n    if (global.location) {\n      defContext.url = String(global.location);\n    }\n    return this._processor(err.error || err, (function(_this) {\n      return function(name, errInfo) {\n        var filterFn, j, k, len, len1, notice, ref1, ref2, reporterFn;\n        notice = {\n          notifier: {\n            name: 'airbrake-js-' + name,\n            version: '0.4.0-alpha.1',\n            url: 'https://github.com/airbrake/airbrake-js'\n          },\n          errors: [errInfo],\n          context: merge(defContext, _this._context, err.context),\n          params: merge({}, _this._params, err.params),\n          environment: merge({}, _this._env, err.environment),\n          session: merge({}, _this._session, err.session)\n        };\n        ref1 = _this._filters;\n        for (j = 0, len = ref1.length; j < len; j++) {\n          filterFn = ref1[j];\n          if (!filterFn(notice)) {\n            return;\n          }\n        }\n        ref2 = _this._reporters;\n        for (k = 0, len1 = ref2.length; k < len1; k++) {\n          reporterFn = ref2[k];\n          reporterFn(notice, {\n            projectId: _this._projectId,\n            projectKey: _this._projectKey,\n            host: _this._host\n          });\n        }\n      };\n    })(this));\n  };\n\n  Client.prototype._wrapArguments = function(args) {\n    var arg, i, j, len;\n    for (i = j = 0, len = args.length; j < len; i = ++j) {\n      arg = args[i];\n      if (typeof arg === 'function') {\n        args[i] = this.wrap(arg);\n      }\n    }\n    return args;\n  };\n\n  Client.prototype.wrap = function(fn) {\n    var airbrakeWrapper, prop, self;\n    if (fn.__airbrake__) {\n      return fn;\n    }\n    self = this;\n    airbrakeWrapper = function() {\n      var args, exc;\n      args = self._wrapArguments(arguments);\n      try {\n        return fn.apply(this, args);\n      } catch (_error) {\n        exc = _error;\n        args = Array.prototype.slice.call(arguments);\n        self.push({\n          error: exc,\n          params: {\n            \"arguments\": args\n          }\n        });\n        return null;\n      }\n    };\n    for (prop in fn) {\n      if (fn.hasOwnProperty(prop)) {\n        airbrakeWrapper[prop] = fn[prop];\n      }\n    }\n    airbrakeWrapper.__airbrake__ = true;\n    airbrakeWrapper.__inner__ = fn;\n    return airbrakeWrapper;\n  };\n\n  return Client;\n\n})();\n\nmodule.exports = Client;\n\n\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./internal/compat\":2,\"./internal/merge\":4,\"./processors/stack\":6,\"./reporters/jsonp\":7,\"./reporters/xhr\":8}],2:[function(require,module,exports){\nvar base;\n\nif ((base = Array.prototype).indexOf == null) {\n  base.indexOf = function(obj, start) {\n    var i, j, ref, ref1;\n    start = start || 0;\n    for (i = j = ref = start, ref1 = this.length; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {\n      if (this[i] === obj) {\n        return i;\n      }\n    }\n    return -1;\n  };\n}\n\n\n\n},{}],3:[function(require,module,exports){\nvar jsonifyNotice, truncate, truncateObj;\n\ntruncate = require('./truncate');\n\ntruncateObj = function(obj, n) {\n  var dst, key;\n  if (n == null) {\n    n = 1000;\n  }\n  dst = {};\n  for (key in obj) {\n    dst[key] = truncate(obj[key], n = n);\n  }\n  return dst;\n};\n\njsonifyNotice = function(notice, n, maxLength) {\n  var err, s;\n  if (n == null) {\n    n = 1000;\n  }\n  if (maxLength == null) {\n    maxLength = 64000;\n  }\n  while (true) {\n    notice.params = truncateObj(notice.params, n = n);\n    notice.environment = truncateObj(notice.environment, n = n);\n    notice.session = truncateObj(notice.session, n = n);\n    s = JSON.stringify(notice);\n    if (s.length < maxLength) {\n      return s;\n    }\n    if (n === 0) {\n      break;\n    }\n    n = Math.floor(n / 2);\n  }\n  err = new Error(\"airbrake-js: cannot jsonify notice (length=\" + s.length + \" maxLength=\" + maxLength + \")\");\n  err.params = {\n    json: s.slice(0, +Math.floor(n / 2) + 1 || 9e9) + '...'\n  };\n  throw err;\n};\n\nmodule.exports = jsonifyNotice;\n\n\n\n},{\"./truncate\":5}],4:[function(require,module,exports){\nvar merge;\n\nmerge = function() {\n  var dst, i, key, len, obj, objs;\n  objs = Array.prototype.slice.call(arguments);\n  dst = objs.shift() || {};\n  for (i = 0, len = objs.length; i < len; i++) {\n    obj = objs[i];\n    for (key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        dst[key] = obj[key];\n      }\n    }\n  }\n  return dst;\n};\n\nmodule.exports = merge;\n\n\n\n},{}],5:[function(require,module,exports){\nvar getAttr, truncate;\n\ngetAttr = function(obj, attr) {\n  var exc;\n  try {\n    return obj[attr];\n  } catch (_error) {\n    exc = _error;\n    return void 0;\n  }\n};\n\ntruncate = function(value, n, depth) {\n  var fn, getPath, keys, nn, seen;\n  if (n == null) {\n    n = 1000;\n  }\n  if (depth == null) {\n    depth = 5;\n  }\n  nn = 0;\n  keys = [];\n  seen = [];\n  getPath = function(value) {\n    var i, index, j, path, ref;\n    index = seen.indexOf(value);\n    path = [keys[index]];\n    for (i = j = ref = index; ref <= 0 ? j <= 0 : j >= 0; i = ref <= 0 ? ++j : --j) {\n      if (seen[i] && getAttr(seen[i], path[0]) === value) {\n        value = seen[i];\n        path.unshift(keys[i]);\n      }\n    }\n    return '~' + path.join('.');\n  };\n  fn = function(value, key, dd) {\n    var dst, el, i, j, len, val;\n    if (key == null) {\n      key = '';\n    }\n    if (dd == null) {\n      dd = 0;\n    }\n    nn++;\n    if (nn > n) {\n      return '[Truncated]';\n    }\n    if (value === null || value === void 0) {\n      return value;\n    }\n    switch (typeof value) {\n      case 'boolean':\n      case 'number':\n      case 'string':\n      case 'function':\n        return value;\n      case 'object':\n        break;\n      default:\n        return String(value);\n    }\n    if (value instanceof Boolean || value instanceof Number || value instanceof String || value instanceof Date || value instanceof RegExp) {\n      return value;\n    }\n    if (seen.indexOf(value) >= 0) {\n      return \"[Circular \" + (getPath(value)) + \"]\";\n    }\n    dd++;\n    if (dd > depth) {\n      return '[Truncated]';\n    }\n    keys.push(key);\n    seen.push(value);\n    nn--;\n    if (Object.prototype.toString.apply(value) === '[object Array]') {\n      dst = [];\n      for (i = j = 0, len = value.length; j < len; i = ++j) {\n        el = value[i];\n        nn++;\n        if (nn >= n) {\n          break;\n        }\n        dst.push(fn(el, key = i, dd));\n      }\n      return dst;\n    }\n    dst = {};\n    for (key in value) {\n      if (!Object.prototype.hasOwnProperty.call(value, key)) {\n        continue;\n      }\n      nn++;\n      if (nn >= n) {\n        break;\n      }\n      val = getAttr(value, key);\n      if (val !== void 0) {\n        dst[key] = fn(val, key = key, dd);\n      }\n    }\n    return dst;\n  };\n  return fn(value);\n};\n\nmodule.exports = truncate;\n\n\n\n},{}],6:[function(require,module,exports){\nvar processor, rules, typeMessageRe;\n\nrules = [\n  {\n    name: 'v8',\n    re: /^\\s*at\\s(.+?)\\s\\((?:(?:(.+):(\\d+):(\\d+))|(.+))\\)$/,\n    fn: function(m) {\n      return {\n        \"function\": m[1],\n        file: m[2] || m[5],\n        line: m[3] && parseInt(m[3], 10) || 0,\n        column: m[4] && parseInt(m[4], 10) || 0\n      };\n    }\n  }, {\n    name: 'firefox30',\n    re: /^(.*)@(.+):(\\d+):(\\d+)$/,\n    fn: function(m) {\n      var evaledRe, file, func, mm;\n      func = m[1];\n      file = m[2];\n      evaledRe = /^(\\S+)\\s(line\\s\\d+\\s>\\seval.*)$/;\n      if (mm = file.match(evaledRe)) {\n        if (func.length > 0) {\n          func = func + ' ' + mm[2];\n        } else {\n          func = mm[2];\n        }\n        file = mm[1];\n      }\n      return {\n        \"function\": func,\n        file: file,\n        line: parseInt(m[3], 10),\n        column: parseInt(m[4], 10)\n      };\n    }\n  }, {\n    name: 'firefox14',\n    re: /^(.*)@(.+):(\\d+)$/,\n    fn: function(m, i, e) {\n      var column;\n      if (i === 0) {\n        column = e.columnNumber || 0;\n      } else {\n        column = 0;\n      }\n      return {\n        \"function\": m[1],\n        file: m[2],\n        line: parseInt(m[3], 10),\n        column: column\n      };\n    }\n  }, {\n    name: 'v8-short',\n    re: /^\\s*at\\s(.+):(\\d+):(\\d+)$/,\n    fn: function(m) {\n      return {\n        \"function\": '',\n        file: m[1],\n        line: parseInt(m[2], 10),\n        column: parseInt(m[3], 10)\n      };\n    }\n  }, {\n    name: 'default',\n    re: /.+/,\n    fn: function(m) {\n      return {\n        \"function\": m[0],\n        file: '',\n        line: 0,\n        column: 0\n      };\n    }\n  }\n];\n\ntypeMessageRe = /^\\S+:\\s.+$/;\n\nprocessor = function(e, cb) {\n  var backtrace, i, j, k, len, len1, line, lines, m, msg, processorName, rule, stack, type, uncaughtExcRe;\n  processorName = 'nostack';\n  stack = e.stack || '';\n  lines = stack.split('\\n');\n  backtrace = [];\n  for (i = j = 0, len = lines.length; j < len; i = ++j) {\n    line = lines[i];\n    if (line === '') {\n      continue;\n    }\n    for (k = 0, len1 = rules.length; k < len1; k++) {\n      rule = rules[k];\n      m = line.match(rule.re);\n      if (!m) {\n        continue;\n      }\n      processorName = rule.name;\n      backtrace.push(rule.fn(m, i, e));\n      break;\n    }\n  }\n  if ((processorName === 'v8' || processorName === 'v8-short') && backtrace.length > 0 && backtrace[0][\"function\"].match(typeMessageRe)) {\n    backtrace = backtrace.slice(1);\n  }\n  if (backtrace.length === 0 && ((e.fileName != null) || (e.lineNumber != null) || (e.columnNumber != null))) {\n    backtrace.push({\n      \"function\": '',\n      file: e.fileName || '',\n      line: parseInt(e.lineNumber, 10) || 0,\n      column: parseInt(e.columnNumber, 10) || 0\n    });\n  }\n  if (backtrace.length === 0 && ((e.filename != null) || (e.lineno != null) || (e.column != null) || (e.colno != null))) {\n    backtrace.push({\n      \"function\": '',\n      file: e.filename || '',\n      line: parseInt(e.lineno, 10) || 0,\n      column: parseInt(e.column || e.colno, 10) || 0\n    });\n  }\n  if (e.message != null) {\n    msg = e.message;\n  } else {\n    msg = String(e);\n  }\n  if (e.name != null) {\n    type = e.name;\n    msg = type + ': ' + msg;\n  } else {\n    uncaughtExcRe = /^Uncaught\\s(.+?):\\s.+$/;\n    m = msg.match(uncaughtExcRe);\n    if (m) {\n      type = m[1];\n    } else {\n      type = '';\n    }\n  }\n  return cb(processorName, {\n    'type': type,\n    'message': msg,\n    'backtrace': backtrace\n  });\n};\n\nmodule.exports = processor;\n\n\n\n},{}],7:[function(require,module,exports){\n(function (global){\nvar cbCount, jsonifyNotice, report;\n\njsonifyNotice = require('../internal/jsonify_notice');\n\ncbCount = 0;\n\nreport = function(notice, opts) {\n  var cbName, document, head, payload, removeScript, script, url;\n  cbCount++;\n  cbName = \"airbrakeCb\" + String(cbCount);\n  global[cbName] = function(resp) {\n    var _;\n    if (typeof console !== \"undefined\" && console !== null) {\n      if (typeof console.debug === \"function\") {\n        console.debug(\"airbrake-js: error #%s was reported: %s\", resp.id, resp.url);\n      }\n    }\n    try {\n      return delete global[cbName];\n    } catch (_error) {\n      _ = _error;\n      return global[cbName] = void 0;\n    }\n  };\n  payload = encodeURIComponent(jsonifyNotice(notice));\n  url = opts.host + \"/api/v3/projects/\" + opts.projectId + \"/create-notice?key=\" + opts.projectKey + \"&callback=\" + cbName + \"&body=\" + payload;\n  document = global.document;\n  head = document.getElementsByTagName('head')[0];\n  script = document.createElement('script');\n  script.src = url;\n  removeScript = function() {\n    return head.removeChild(script);\n  };\n  script.onload = removeScript;\n  script.onerror = removeScript;\n  return head.appendChild(script);\n};\n\nmodule.exports = report;\n\n\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../internal/jsonify_notice\":3}],8:[function(require,module,exports){\n(function (global){\nvar jsonifyNotice, report;\n\njsonifyNotice = require('../internal/jsonify_notice');\n\nreport = function(notice, opts) {\n  var payload, req, url;\n  url = opts.host + \"/api/v3/projects/\" + opts.projectId + \"/notices?key=\" + opts.projectKey;\n  payload = jsonifyNotice(notice);\n  req = new global.XMLHttpRequest();\n  req.open('POST', url, true);\n  req.setRequestHeader('Content-Type', 'application/json');\n  req.send(payload);\n  return req.onreadystatechange = function() {\n    var resp;\n    if (req.readyState === 4 && req.status === 201 && ((typeof console !== \"undefined\" && console !== null ? console.debug : void 0) != null)) {\n      resp = JSON.parse(req.responseText);\n      return console.debug(\"airbrake: error #%s was reported: %s\", resp.id, resp.url);\n    }\n  };\n};\n\nmodule.exports = report;\n\n\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../internal/jsonify_notice\":3}]},{},[1])(1)\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/airbrake-js/dist/client.js\n ** module id = 20\n ** module chunks = 0\n **/","// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    \"use strict\";\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\" && typeof module === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else if (typeof self !== \"undefined\") {\n        self.Q = definition();\n\n    } else {\n        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n    // queue for late tasks, used by unhandled rejection tracking\n    var laterQueue = [];\n\n    function flush() {\n        /* jshint loopfunc: true */\n        var task, domain;\n\n        while (head.next) {\n            head = head.next;\n            task = head.task;\n            head.task = void 0;\n            domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n            runSingle(task, domain);\n\n        }\n        while (laterQueue.length) {\n            task = laterQueue.pop();\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    // runs a single function in the async queue\n    function runSingle(task, domain) {\n        try {\n            task();\n\n        } catch (e) {\n            if (isNodeJS) {\n                // In node, uncaught exceptions are considered fatal errors.\n                // Re-throw them synchronously to interrupt flushing!\n\n                // Ensure continuation if the uncaught exception is suppressed\n                // listening \"uncaughtException\" events (as domains does).\n                // Continue in next event to avoid tick recursion.\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n\n                throw e;\n\n            } else {\n                // In browsers, uncaught exceptions are not fatal.\n                // Re-throw them asynchronously to avoid slow-downs.\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n\n        if (domain) {\n            domain.exit();\n        }\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process === \"object\" &&\n        process.toString() === \"[object process]\" && process.nextTick) {\n        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n        // To see through fake Node environments:\n        // * Mocha test runner - exposes a `process` global without a `nextTick`\n        // * Browserify - exposes a `process.nexTick` function that uses\n        //   `setTimeout`. In this case `setImmediate` is preferred because\n        //    it is faster. Browserify's `process.toString()` yields\n        //   \"[object Object]\", while in a real Node environment\n        //   `process.nextTick()` yields \"[object process]\".\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n    nextTick.runAfter = function (task) {\n        laterQueue.push(task);\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack &&\n        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack) {\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        error.stack = filterStackString(concatedStacks);\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n// enable long stacks if Q_DEBUG is set\nif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n}\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            Q.nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n        promise.source = newPromise;\n\n        array_reduce(messages, function (undefined, message) {\n            Q.nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            Q.nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become settled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be settled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function (resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function (answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\nQ.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n};\n\n/**\n * Works almost like \"finally\", but not called for rejections.\n * Original resolution value is passed through callback unaffected.\n * Callback may return a promise that will be awaited for.\n * @param {Function} callback\n * @returns {Q.Promise}\n * @example\n * doSomething()\n *   .then(...)\n *   .tap(console.log)\n *   .then(...);\n */\nPromise.prototype.tap = function (callback) {\n    callback = Q(callback);\n\n    return this.then(function (value) {\n        return callback.fcall(value).thenResolve(value);\n    });\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return object instanceof Promise;\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar reportedUnhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n            if (array_indexOf(unhandledRejections, promise) !== -1) {\n                process.emit(\"unhandledRejection\", reason, promise);\n                reportedUnhandledRejections.push(promise);\n            }\n        });\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n            Q.nextTick.runAfter(function () {\n                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n                if (atReport !== -1) {\n                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n                    reportedUnhandledRejections.splice(atReport, 1);\n                }\n            });\n        }\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return Q(result.value);\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return Q(exception.value);\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var pendingCount = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++pendingCount;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--pendingCount === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (pendingCount === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Returns the first resolved promise of an array. Prior rejected promises are\n * ignored.  Rejects only if all promises are rejected.\n * @param {Array*} an array containing values or promises for values\n * @returns a promise fulfilled with the value of the first resolved promise,\n * or a rejected promise if all promises are rejected.\n */\nQ.any = any;\n\nfunction any(promises) {\n    if (promises.length === 0) {\n        return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n        var promise = promises[index];\n\n        pendingCount++;\n\n        when(promise, onFulfilled, onRejected, onProgress);\n        function onFulfilled(result) {\n            deferred.resolve(result);\n        }\n        function onRejected() {\n            pendingCount--;\n            if (pendingCount === 0) {\n                deferred.reject(new Error(\n                    \"Can't get fulfillment value from any promise, all \" +\n                    \"promises were rejected.\"\n                ));\n            }\n        }\n        function onProgress(progress) {\n            deferred.notify({\n                index: index,\n                value: progress\n            });\n        }\n    }, undefined);\n\n    return deferred.promise;\n}\n\nPromise.prototype.any = function () {\n    return any(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        Q.nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {Any*} custom error message or Error object (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n};\n\nPromise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        if (!error || \"string\" === typeof error) {\n            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n            error.code = \"ETIMEDOUT\";\n        }\n        deferred.reject(error);\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            Q.nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            Q.nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/q/q.js\n ** module id = 21\n ** module chunks = 0\n **/","/*\r\n* loglevel - https://github.com/pimterry/loglevel\r\n*\r\n* Copyright (c) 2013 Tim Perry\r\n* Licensed under the MIT license.\r\n*/\r\n(function (root, definition) {\r\n    if (typeof module === 'object' && module.exports && typeof require === 'function') {\r\n        module.exports = definition();\r\n    } else if (typeof define === 'function' && typeof define.amd === 'object') {\r\n        define(definition);\r\n    } else {\r\n        root.log = definition();\r\n    }\r\n}(this, function () {\r\n    var self = {};\r\n    var noop = function() {};\r\n    var undefinedType = \"undefined\";\r\n\r\n    function realMethod(methodName) {\r\n        if (typeof console === undefinedType) {\r\n            return false; // We can't build a real method without a console to log to\r\n        } else if (console[methodName] !== undefined) {\r\n            return bindMethod(console, methodName);\r\n        } else if (console.log !== undefined) {\r\n            return bindMethod(console, 'log');\r\n        } else {\r\n            return noop;\r\n        }\r\n    }\r\n\r\n    function bindMethod(obj, methodName) {\r\n        var method = obj[methodName];\r\n        if (typeof method.bind === 'function') {\r\n            return method.bind(obj);\r\n        } else {\r\n            try {\r\n                return Function.prototype.bind.call(method, obj);\r\n            } catch (e) {\r\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\r\n                return function() {\r\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    function enableLoggingWhenConsoleArrives(methodName, level) {\r\n        return function () {\r\n            if (typeof console !== undefinedType) {\r\n                replaceLoggingMethods(level);\r\n                self[methodName].apply(self, arguments);\r\n            }\r\n        };\r\n    }\r\n\r\n    var logMethods = [\r\n        \"trace\",\r\n        \"debug\",\r\n        \"info\",\r\n        \"warn\",\r\n        \"error\"\r\n    ];\r\n\r\n    function replaceLoggingMethods(level) {\r\n        for (var i = 0; i < logMethods.length; i++) {\r\n            var methodName = logMethods[i];\r\n            self[methodName] = (i < level) ? noop : self.methodFactory(methodName, level);\r\n        }\r\n    }\r\n\r\n    function persistLevelIfPossible(levelNum) {\r\n        var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\r\n\r\n        // Use localStorage if available\r\n        try {\r\n            window.localStorage['loglevel'] = levelName;\r\n            return;\r\n        } catch (ignore) {}\r\n\r\n        // Use session cookie as fallback\r\n        try {\r\n            window.document.cookie = \"loglevel=\" + levelName + \";\";\r\n        } catch (ignore) {}\r\n    }\r\n\r\n    function loadPersistedLevel() {\r\n        var storedLevel;\r\n\r\n        try {\r\n            storedLevel = window.localStorage['loglevel'];\r\n        } catch (ignore) {}\r\n\r\n        if (typeof storedLevel === undefinedType) {\r\n            try {\r\n                storedLevel = /loglevel=([^;]+)/.exec(window.document.cookie)[1];\r\n            } catch (ignore) {}\r\n        }\r\n        \r\n        if (self.levels[storedLevel] === undefined) {\r\n            storedLevel = \"WARN\";\r\n        }\r\n\r\n        self.setLevel(self.levels[storedLevel]);\r\n    }\r\n\r\n    /*\r\n     *\r\n     * Public API\r\n     *\r\n     */\r\n\r\n    self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\r\n        \"ERROR\": 4, \"SILENT\": 5};\r\n\r\n    self.methodFactory = function (methodName, level) {\r\n        return realMethod(methodName) ||\r\n               enableLoggingWhenConsoleArrives(methodName, level);\r\n    };\r\n\r\n    self.setLevel = function (level) {\r\n        if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\r\n            level = self.levels[level.toUpperCase()];\r\n        }\r\n        if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\r\n            persistLevelIfPossible(level);\r\n            replaceLoggingMethods(level);\r\n            if (typeof console === undefinedType && level < self.levels.SILENT) {\r\n                return \"No console available for logging\";\r\n            }\r\n        } else {\r\n            throw \"log.setLevel() called with invalid level: \" + level;\r\n        }\r\n    };\r\n\r\n    self.enableAll = function() {\r\n        self.setLevel(self.levels.TRACE);\r\n    };\r\n\r\n    self.disableAll = function() {\r\n        self.setLevel(self.levels.SILENT);\r\n    };\r\n\r\n    // Grab the current global log variable in case of overwrite\r\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\r\n    self.noConflict = function() {\r\n        if (typeof window !== undefinedType &&\r\n               window.log === self) {\r\n            window.log = _log;\r\n        }\r\n\r\n        return self;\r\n    };\r\n\r\n    loadPersistedLevel();\r\n    return self;\r\n}));\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/loglevel/lib/loglevel.js\n ** module id = 22\n ** module chunks = 0\n **/","// Copyright (c) 2010 David Durman\n//\n// The contents of this file are subject to the MIT License (the \"License\");\n// you may not use this file except in compliance with the License. You may obtain a copy of the License at\n// http://opensource.org/licenses/MIT.\n//\n// This hierarchical state machine implementation has been inspired\n// by the QP active object framework, see http://www.state-machine.com/\n\n\n(function(root, factory){\n    \"use strict\";\n\n    if (typeof exports === 'object') {\n\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like enviroments that support module.exports,\n        // like Node.\n        module.exports = factory();\n\n    } else if (typeof define === 'function' && define.amd) {\n\n        // AMD. Register as an anonymous module.\n        define(factory);\n\n    } else {\n\n        // Browser globals (root is window)\n        root.Statechart = factory();\n    }\n\n}(this, function(){\n\n    \"use strict\";\n\n    var assert = function(assertion){\n        if (!assertion) {\n            throw new Error(\"Assertion failed.\");\n        }\n    };\n\n\n    // Statechart.\n    // -----------\n\n    // `myState` - the current state\n    // `mySource` - the source of the current transition\n\n    var Statechart = {\n\n        run: function(opt){\n            opt = opt || {};\n            this.debug = opt.debug ? opt.debug : function(){};\n            this.construct(this.initialState);\n            this.init(null);\n        },\n\n        construct: function(initialState){\n            this.myState = this.top();\n            this.mySource = this.state(\"Initial\");\n\n            // Initial pseudo-state\n            this.states.Initial = {\n                empty: function(){\n                    this.newInitialState(initialState);\n                }\n            };\n            var handled = function(){ return null; };\n\n            // TOP state\n            this.states.TOP = {\n                entry: handled,\n                exit:  handled,\n                init:  handled,\n                empty: handled\n            };\n            this.flatten();\n        },\n\n        // Trigger the initial transition and recursively enter the submachine of the top state.\n        // Must be called only once for a given Statechart before dispatching any events to it.\n        init: function(anEventOrNull){\n            assert(this.myState === this.top() && this.mySource !== null);\n            var s = this.myState;    // save top in temp\n            this.mySource.trigger(anEventOrNull);    // topmost initial transition\n            assert(s.equals(this.myState.superstate()));    // verify that we only went one level deep\n            s = this.myState;\n            s.enter();\n            while (s.init() === null) {    // while init is handled (i.e. till we reach a leaf node)\n                assert(s.equals(this.myState.superstate()));    // verify that we only went one level deep\n                s = this.myState;\n                s.enter();\n            }\n        },\n\n        state: function(stateOrName){\n            return (stateOrName && stateOrName instanceof QState) ? stateOrName : new QState(this, stateOrName);\n        },\n\n        top: function(stateOrName){\n            // create the top state only once and store it to an auxiliary property\n            return (this._topState || (this._topState = new QState(this, \"TOP\")));\n        },\n\n        currentState: function(){\n            return this.myState;\n        },\n\n        flatten: function(){\n            this.statesTable = this.statesTable || {};\n            this._flatten(this.states, this.top().name);\n        },\n\n        _flatten: function(states, parent){\n            if (!states) {\n                return;\n            }\n\n            for (var state in states) {\n                if (states.hasOwnProperty(state)) {\n                    this.statesTable[state] = states[state];\n                    this.statesTable[state].parent = parent;\n                    this._flatten(states[state].states, state);\n                }\n            }\n        },\n\n        selectState: function(stateName){\n            return this.statesTable[stateName];\n        },\n\n        dispatchEvent: function(anEvent, state, act){\n            act = act || state[anEvent.type];\n\n            // Action might also be an array in which case it is assumed that evaluating guards decides\n            // which target to enter.\n            if (act instanceof Array) {\n                for (var i = 0; i < act.length; i++) {\n                    this.dispatchEvent(anEvent, state, act[i]);\n                }\n            }\n\n            // @todo This is terrible edge case used just for more fancy Statechart representation\n            // It allows using \"MyState\": { init: \"MySubState\", ... } intead of\n            // \"MyState\": { init: function(){ this.newInitialState(\"MySubState\"); }, ... }\n            // In some cases the latter form can be useful for better control of the Statechart\n            if (anEvent.type === \"init\" && typeof act === \"string\") {\n                this.newInitialState(act);\n                return null; // handled\n            }\n\n            if (act instanceof Function){\n                act.call(this, anEvent.args);\n                return null;  // handled\n            } else if (act) {\n                // no guard at all or the guard condition is met\n                if (!act.guard || (act.guard && act.guard.call(this, anEvent.args))){\n                    if (act.action) {\n                        act.action.call(this, anEvent.args);\n                    }\n                    if (act.target) {\n                        this.newState(act.target);\n                    }\n                    return null;  // handled\n                }\n            } else {        // act is undefined (no handler in state for anEvent)\n                if (state === this.selectState(\"TOP\")) {\n                    this.handleUnhandledEvent(anEvent); // not-handled\n                    return null;    // handled (TOP state handles all events)\n                }\n            }\n            return this.state(state.parent); // not-handled\n        },\n\n        // Override this when needed.\n        handleUnhandledEvent: function(anEvent){\n            this.debug(\"Unhandled event: \" + anEvent.type);\n            return null;\n        },\n\n        // Traverse the state hierarchy starting from the currently active state myState.\n        // Advance up the state hierarchy (i.e., from substates to superstates), invoking all\n        // the state handlers in succession. At each level of state nesting, it intercepts the value\n        // returned from a state handler to obtain the superstate needed to advance to the next level.\n        dispatch: function(anEvent, args){\n            if (!anEvent || !(anEvent instanceof QEvent)) {\n                anEvent = new QEvent(anEvent, args);\n            }\n            this.mySource = this.myState;\n            while (this.mySource) {\n                this.mySource = this.mySource.trigger(anEvent);\n            }\n        },\n\n        // Performs dynamic transition. (macro Q_TRAN_DYN())\n        newState: function(aStateName){\n            this.transition(this.state(aStateName));\n        },\n\n        // Used by handlers only in response to the #init event. (macro Q_INIT())\n        // USAGE: return this.newInitialState(\"whatever\");\n        // @return null for convenience\n\n        newInitialState: function(aStateOrName){\n            this.myState = this.state(aStateOrName);\n            return null;\n        },\n\n        // Dynamic transition. (Q_TRAN_DYN())\n        transition: function(target){\n            assert(!target.equals(this.top()));\n\n            var entry = [];\n            var mySource = this.mySource;\n            var s = this.myState;\n\n            // exit all the nested states between myState and mySource\n            assert(s !== null);\n            assert(mySource !== null);\n            while (!s.equals(mySource)) {\n                s = s.exit() || s.superstate();\n            }\n\n            // check all seven possible source/target state combinations\n\n\t    entry.push(target);\n\n            // (a) mySource == target (self transition)\n            if (mySource.equals(target)) {\n                mySource.exit();\n                return this.enterVia(target, entry);\n            }\n\n            // (b) mySource == target.superstate (one level deep)\n            var p = target.superstate();\n            if (mySource.equals(p)) {\n                return this.enterVia(target, entry);\n            }\n\n            assert(mySource !== null);\n\n            // (c) mySource.superstate == target.superstate (most common - fsa)\n            var q = mySource.superstate();\n            if (q.equals(p)) {\n                mySource.exit();\n                return this.enterVia(target, entry);\n            }\n\n            // (d) mySource.superstate == target (one level up)\n            if (q.equals(target)) {\n                mySource.exit();\n                entry.pop();    // do not enter the LCA\n                return this.enterVia(target, entry);\n            }\n\n            // (e) mySource == target.superstate.superstate... hierarchy (many levels deep)\n\t    entry.push(p);\n            s = p.superstate();\n            while (s !== null) {\n                if (mySource.equals(s)) {\n                    return this.enterVia(target, entry);\n                }\n\n\t\tentry.push(s);\n                s = s.superstate();\n            }\n\n            // otherwise we're definitely exiting mySource\n            mySource.exit();\n\n            // entry array is complete, save its length to avoid computing it repeatedly\n            var entryLength = entry.length;\n\n            // (f) mySource.superstate == target.superstate.superstate... hierarchy\n            var lca;\n            for (lca = entryLength - 1; lca >= 0; lca -= 1) {\n                if (q.equals(entry[lca])) {\n                    return this.enterVia(target, entry.slice(0, lca)); // do not enter lca\n                }\n            }\n\n            // (g) each mySource.superstate.superstate... for each target.superstate.superstate...\n            s = q;\n            while (s !== null) {\n                for (lca = entryLength - 1; lca >= 0; lca -= 1) {\n                    if (s.equals(entry[lca])) {\n                        return this.enterVia(target, entry.slice(0, lca)); // do not enter lca\n                    }\n                }\n                s.exit();\n                s = s.superstate();\n            }\n        },\n\n        // tail of transition()\n        // We are in the LCA of mySource and target.\n        enterVia: function(target, entry){\n\n            // retrace the entry path in reverse order\n            var idx = entry.length;\n            while (idx > 0) {\n                idx--;\n                entry[idx].enter();\n            }\n\n            this.myState = target;\n            while (target.init() === null) {\n                // initial transition must go one level deep\n                assert(target.equals(this.myState.superstate()));\n                target = this.myState;\n                target.enter();\n            }\n        }\n    };\n\n    // QState.\n    // -------\n\n    function QState(fsm, name){\n        this.fsm = fsm;\n        this.name = name;\n    }\n\n    QState.prototype = {\n        equals: function(state){\n            return (this.name === state.name && this.fsm === state.fsm);\n        },\n\n        dispatchEvent: function(anEvent, state){\n            return this.fsm.dispatchEvent(anEvent, state);\n        },\n\n        trigger: function(anEvent){\n            var evt = anEvent || QEventEmpty;\n            var state = this.fsm.selectState(this.name);\n            return this.dispatchEvent(evt, state);\n        },\n\n        enter: function(){\n            this.fsm.debug(\"[\" + this.name + \"] enter\");\n            return this.trigger(QEventEntry);\n        },\n\n        exit: function(){\n            this.fsm.debug(\"[\" + this.name + \"] exit\");\n            return this.trigger(QEventExit);\n        },\n\n        init: function(){\n            this.fsm.debug(\"[\" + this.name + \"] init\");\n            return this.trigger(QEventInit);\n        },\n\n        // Answer my superstate. Default is to return fsm top state.\n        superstate: function(){\n            var superstate = this.trigger(QEventEmpty);\n            if (superstate && superstate instanceof QState) {\n                return superstate;\n            }\n            superstate = this.fsm.top();\n            if (this.name === superstate.name) {\n                return null;\n            }\n            return superstate;\n        }\n    };\n\n    // QEvent\n    // ------\n\n    function QEvent(type, args){\n        this.type = type;\n        this.args = args;\n    }\n\n    // these events are static, they do not carry any arguments\n    // -> create them only once\n    // moreover, they don't have to be exposed to the outer world\n    var QEventEntry = new QEvent(\"entry\");\n    var QEventExit = new QEvent(\"exit\");\n    var QEventInit = new QEvent(\"init\");\n    var QEventEmpty = new QEvent(\"empty\");\n\n\n    return Statechart;\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/statechart/lib/statechart.js\n ** module id = 23\n ** module chunks = 0\n **/","/*! Socket.IO.js build:0.9.17, development. Copyright(c) 2011 LearnBoost <dev@learnboost.com> MIT Licensed */\n\nvar io = ('undefined' === typeof module ? {} : module.exports);\n(function() {\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, global) {\n\n  /**\n   * IO namespace.\n   *\n   * @namespace\n   */\n\n  var io = exports;\n\n  /**\n   * Socket.IO version\n   *\n   * @api public\n   */\n\n  io.version = '0.9.17';\n\n  /**\n   * Protocol implemented.\n   *\n   * @api public\n   */\n\n  io.protocol = 1;\n\n  /**\n   * Available transports, these will be populated with the available transports\n   *\n   * @api public\n   */\n\n  io.transports = [];\n\n  /**\n   * Keep track of jsonp callbacks.\n   *\n   * @api private\n   */\n\n  io.j = [];\n\n  /**\n   * Keep track of our io.Sockets\n   *\n   * @api private\n   */\n  io.sockets = {};\n\n\n  /**\n   * Manages connections to hosts.\n   *\n   * @param {String} uri\n   * @Param {Boolean} force creation of new socket (defaults to false)\n   * @api public\n   */\n\n  io.connect = function (host, details) {\n    var uri = io.util.parseUri(host)\n      , uuri\n      , socket;\n\n    if (global && global.location) {\n      uri.protocol = uri.protocol || global.location.protocol.slice(0, -1);\n      uri.host = uri.host || (global.document\n        ? global.document.domain : global.location.hostname);\n      uri.port = uri.port || global.location.port;\n    }\n\n    uuri = io.util.uniqueUri(uri);\n\n    var options = {\n        host: uri.host\n      , secure: 'https' == uri.protocol\n      , port: uri.port || ('https' == uri.protocol ? 443 : 80)\n      , query: uri.query || ''\n    };\n\n    io.util.merge(options, details);\n\n    if (options['force new connection'] || !io.sockets[uuri]) {\n      socket = new io.Socket(options);\n    }\n\n    if (!options['force new connection'] && socket) {\n      io.sockets[uuri] = socket;\n    }\n\n    socket = socket || io.sockets[uuri];\n\n    // if path is different from '' or /\n    return socket.of(uri.path.length > 1 ? uri.path : '');\n  };\n\n})('object' === typeof module ? module.exports : (this.io = {}), this);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, global) {\n\n  /**\n   * Utilities namespace.\n   *\n   * @namespace\n   */\n\n  var util = exports.util = {};\n\n  /**\n   * Parses an URI\n   *\n   * @author Steven Levithan <stevenlevithan.com> (MIT license)\n   * @api public\n   */\n\n  var re = /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\n  var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password',\n               'host', 'port', 'relative', 'path', 'directory', 'file', 'query',\n               'anchor'];\n\n  util.parseUri = function (str) {\n    var m = re.exec(str || '')\n      , uri = {}\n      , i = 14;\n\n    while (i--) {\n      uri[parts[i]] = m[i] || '';\n    }\n\n    return uri;\n  };\n\n  /**\n   * Produces a unique url that identifies a Socket.IO connection.\n   *\n   * @param {Object} uri\n   * @api public\n   */\n\n  util.uniqueUri = function (uri) {\n    var protocol = uri.protocol\n      , host = uri.host\n      , port = uri.port;\n\n    if ('document' in global) {\n      host = host || document.domain;\n      port = port || (protocol == 'https'\n        && document.location.protocol !== 'https:' ? 443 : document.location.port);\n    } else {\n      host = host || 'localhost';\n\n      if (!port && protocol == 'https') {\n        port = 443;\n      }\n    }\n\n    return (protocol || 'http') + '://' + host + ':' + (port || 80);\n  };\n\n  /**\n   * Mergest 2 query strings in to once unique query string\n   *\n   * @param {String} base\n   * @param {String} addition\n   * @api public\n   */\n\n  util.query = function (base, addition) {\n    var query = util.chunkQuery(base || '')\n      , components = [];\n\n    util.merge(query, util.chunkQuery(addition || ''));\n    for (var part in query) {\n      if (query.hasOwnProperty(part)) {\n        components.push(part + '=' + query[part]);\n      }\n    }\n\n    return components.length ? '?' + components.join('&') : '';\n  };\n\n  /**\n   * Transforms a querystring in to an object\n   *\n   * @param {String} qs\n   * @api public\n   */\n\n  util.chunkQuery = function (qs) {\n    var query = {}\n      , params = qs.split('&')\n      , i = 0\n      , l = params.length\n      , kv;\n\n    for (; i < l; ++i) {\n      kv = params[i].split('=');\n      if (kv[0]) {\n        query[kv[0]] = kv[1];\n      }\n    }\n\n    return query;\n  };\n\n  /**\n   * Executes the given function when the page is loaded.\n   *\n   *     io.util.load(function () { console.log('page loaded'); });\n   *\n   * @param {Function} fn\n   * @api public\n   */\n\n  var pageLoaded = false;\n\n  util.load = function (fn) {\n    if ('document' in global && document.readyState === 'complete' || pageLoaded) {\n      return fn();\n    }\n\n    util.on(global, 'load', fn, false);\n  };\n\n  /**\n   * Adds an event.\n   *\n   * @api private\n   */\n\n  util.on = function (element, event, fn, capture) {\n    if (element.attachEvent) {\n      element.attachEvent('on' + event, fn);\n    } else if (element.addEventListener) {\n      element.addEventListener(event, fn, capture);\n    }\n  };\n\n  /**\n   * Generates the correct `XMLHttpRequest` for regular and cross domain requests.\n   *\n   * @param {Boolean} [xdomain] Create a request that can be used cross domain.\n   * @returns {XMLHttpRequest|false} If we can create a XMLHttpRequest.\n   * @api private\n   */\n\n  util.request = function (xdomain) {\n\n    if (xdomain && 'undefined' != typeof XDomainRequest && !util.ua.hasCORS) {\n      return new XDomainRequest();\n    }\n\n    if ('undefined' != typeof XMLHttpRequest && (!xdomain || util.ua.hasCORS)) {\n      return new XMLHttpRequest();\n    }\n\n    if (!xdomain) {\n      try {\n        return new window[(['Active'].concat('Object').join('X'))]('Microsoft.XMLHTTP');\n      } catch(e) { }\n    }\n\n    return null;\n  };\n\n  /**\n   * XHR based transport constructor.\n   *\n   * @constructor\n   * @api public\n   */\n\n  /**\n   * Change the internal pageLoaded value.\n   */\n\n  if ('undefined' != typeof window) {\n    util.load(function () {\n      pageLoaded = true;\n    });\n  }\n\n  /**\n   * Defers a function to ensure a spinner is not displayed by the browser\n   *\n   * @param {Function} fn\n   * @api public\n   */\n\n  util.defer = function (fn) {\n    if (!util.ua.webkit || 'undefined' != typeof importScripts) {\n      return fn();\n    }\n\n    util.load(function () {\n      setTimeout(fn, 100);\n    });\n  };\n\n  /**\n   * Merges two objects.\n   *\n   * @api public\n   */\n\n  util.merge = function merge (target, additional, deep, lastseen) {\n    var seen = lastseen || []\n      , depth = typeof deep == 'undefined' ? 2 : deep\n      , prop;\n\n    for (prop in additional) {\n      if (additional.hasOwnProperty(prop) && util.indexOf(seen, prop) < 0) {\n        if (typeof target[prop] !== 'object' || !depth) {\n          target[prop] = additional[prop];\n          seen.push(additional[prop]);\n        } else {\n          util.merge(target[prop], additional[prop], depth - 1, seen);\n        }\n      }\n    }\n\n    return target;\n  };\n\n  /**\n   * Merges prototypes from objects\n   *\n   * @api public\n   */\n\n  util.mixin = function (ctor, ctor2) {\n    util.merge(ctor.prototype, ctor2.prototype);\n  };\n\n  /**\n   * Shortcut for prototypical and static inheritance.\n   *\n   * @api private\n   */\n\n  util.inherit = function (ctor, ctor2) {\n    function f() {};\n    f.prototype = ctor2.prototype;\n    ctor.prototype = new f;\n  };\n\n  /**\n   * Checks if the given object is an Array.\n   *\n   *     io.util.isArray([]); // true\n   *     io.util.isArray({}); // false\n   *\n   * @param Object obj\n   * @api public\n   */\n\n  util.isArray = Array.isArray || function (obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  };\n\n  /**\n   * Intersects values of two arrays into a third\n   *\n   * @api public\n   */\n\n  util.intersect = function (arr, arr2) {\n    var ret = []\n      , longest = arr.length > arr2.length ? arr : arr2\n      , shortest = arr.length > arr2.length ? arr2 : arr;\n\n    for (var i = 0, l = shortest.length; i < l; i++) {\n      if (~util.indexOf(longest, shortest[i]))\n        ret.push(shortest[i]);\n    }\n\n    return ret;\n  };\n\n  /**\n   * Array indexOf compatibility.\n   *\n   * @see bit.ly/a5Dxa2\n   * @api public\n   */\n\n  util.indexOf = function (arr, o, i) {\n\n    for (var j = arr.length, i = i < 0 ? i + j < 0 ? 0 : i + j : i || 0;\n         i < j && arr[i] !== o; i++) {}\n\n    return j <= i ? -1 : i;\n  };\n\n  /**\n   * Converts enumerables to array.\n   *\n   * @api public\n   */\n\n  util.toArray = function (enu) {\n    var arr = [];\n\n    for (var i = 0, l = enu.length; i < l; i++)\n      arr.push(enu[i]);\n\n    return arr;\n  };\n\n  /**\n   * UA / engines detection namespace.\n   *\n   * @namespace\n   */\n\n  util.ua = {};\n\n  /**\n   * Whether the UA supports CORS for XHR.\n   *\n   * @api public\n   */\n\n  util.ua.hasCORS = 'undefined' != typeof XMLHttpRequest && (function () {\n    try {\n      var a = new XMLHttpRequest();\n    } catch (e) {\n      return false;\n    }\n\n    return a.withCredentials != undefined;\n  })();\n\n  /**\n   * Detect webkit.\n   *\n   * @api public\n   */\n\n  util.ua.webkit = 'undefined' != typeof navigator\n    && /webkit/i.test(navigator.userAgent);\n\n   /**\n   * Detect iPad/iPhone/iPod.\n   *\n   * @api public\n   */\n\n  util.ua.iDevice = 'undefined' != typeof navigator\n      && /iPad|iPhone|iPod/i.test(navigator.userAgent);\n\n})('undefined' != typeof io ? io : module.exports, this);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.EventEmitter = EventEmitter;\n\n  /**\n   * Event emitter constructor.\n   *\n   * @api public.\n   */\n\n  function EventEmitter () {};\n\n  /**\n   * Adds a listener\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.on = function (name, fn) {\n    if (!this.$events) {\n      this.$events = {};\n    }\n\n    if (!this.$events[name]) {\n      this.$events[name] = fn;\n    } else if (io.util.isArray(this.$events[name])) {\n      this.$events[name].push(fn);\n    } else {\n      this.$events[name] = [this.$events[name], fn];\n    }\n\n    return this;\n  };\n\n  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n  /**\n   * Adds a volatile listener.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.once = function (name, fn) {\n    var self = this;\n\n    function on () {\n      self.removeListener(name, on);\n      fn.apply(this, arguments);\n    };\n\n    on.listener = fn;\n    this.on(name, on);\n\n    return this;\n  };\n\n  /**\n   * Removes a listener.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.removeListener = function (name, fn) {\n    if (this.$events && this.$events[name]) {\n      var list = this.$events[name];\n\n      if (io.util.isArray(list)) {\n        var pos = -1;\n\n        for (var i = 0, l = list.length; i < l; i++) {\n          if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {\n            pos = i;\n            break;\n          }\n        }\n\n        if (pos < 0) {\n          return this;\n        }\n\n        list.splice(pos, 1);\n\n        if (!list.length) {\n          delete this.$events[name];\n        }\n      } else if (list === fn || (list.listener && list.listener === fn)) {\n        delete this.$events[name];\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Removes all listeners for an event.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.removeAllListeners = function (name) {\n    if (name === undefined) {\n      this.$events = {};\n      return this;\n    }\n\n    if (this.$events && this.$events[name]) {\n      this.$events[name] = null;\n    }\n\n    return this;\n  };\n\n  /**\n   * Gets all listeners for a certain event.\n   *\n   * @api publci\n   */\n\n  EventEmitter.prototype.listeners = function (name) {\n    if (!this.$events) {\n      this.$events = {};\n    }\n\n    if (!this.$events[name]) {\n      this.$events[name] = [];\n    }\n\n    if (!io.util.isArray(this.$events[name])) {\n      this.$events[name] = [this.$events[name]];\n    }\n\n    return this.$events[name];\n  };\n\n  /**\n   * Emits an event.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.emit = function (name) {\n    if (!this.$events) {\n      return false;\n    }\n\n    var handler = this.$events[name];\n\n    if (!handler) {\n      return false;\n    }\n\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    if ('function' == typeof handler) {\n      handler.apply(this, args);\n    } else if (io.util.isArray(handler)) {\n      var listeners = handler.slice();\n\n      for (var i = 0, l = listeners.length; i < l; i++) {\n        listeners[i].apply(this, args);\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Based on JSON2 (http://www.JSON.org/js.html).\n */\n\n(function (exports, nativeJSON) {\n  \"use strict\";\n\n  // use native JSON if it's available\n  if (nativeJSON && nativeJSON.parse){\n    return exports.JSON = {\n      parse: nativeJSON.parse\n    , stringify: nativeJSON.stringify\n    };\n  }\n\n  var JSON = exports.JSON = {};\n\n  function f(n) {\n      // Format integers to have at least two digits.\n      return n < 10 ? '0' + n : n;\n  }\n\n  function date(d, key) {\n    return isFinite(d.valueOf()) ?\n        d.getUTCFullYear()     + '-' +\n        f(d.getUTCMonth() + 1) + '-' +\n        f(d.getUTCDate())      + 'T' +\n        f(d.getUTCHours())     + ':' +\n        f(d.getUTCMinutes())   + ':' +\n        f(d.getUTCSeconds())   + 'Z' : null;\n  };\n\n  var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n      escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n      gap,\n      indent,\n      meta = {    // table of character substitutions\n          '\\b': '\\\\b',\n          '\\t': '\\\\t',\n          '\\n': '\\\\n',\n          '\\f': '\\\\f',\n          '\\r': '\\\\r',\n          '\"' : '\\\\\"',\n          '\\\\': '\\\\\\\\'\n      },\n      rep;\n\n\n  function quote(string) {\n\n// If the string contains no control characters, no quote characters, and no\n// backslash characters, then we can safely slap some quotes around it.\n// Otherwise we must also replace the offending characters with safe escape\n// sequences.\n\n      escapable.lastIndex = 0;\n      return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n          var c = meta[a];\n          return typeof c === 'string' ? c :\n              '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n      }) + '\"' : '\"' + string + '\"';\n  }\n\n\n  function str(key, holder) {\n\n// Produce a string from holder[key].\n\n      var i,          // The loop counter.\n          k,          // The member key.\n          v,          // The member value.\n          length,\n          mind = gap,\n          partial,\n          value = holder[key];\n\n// If the value has a toJSON method, call it to obtain a replacement value.\n\n      if (value instanceof Date) {\n          value = date(key);\n      }\n\n// If we were called with a replacer function, then call the replacer to\n// obtain a replacement value.\n\n      if (typeof rep === 'function') {\n          value = rep.call(holder, key, value);\n      }\n\n// What happens next depends on the value's type.\n\n      switch (typeof value) {\n      case 'string':\n          return quote(value);\n\n      case 'number':\n\n// JSON numbers must be finite. Encode non-finite numbers as null.\n\n          return isFinite(value) ? String(value) : 'null';\n\n      case 'boolean':\n      case 'null':\n\n// If the value is a boolean or null, convert it to a string. Note:\n// typeof null does not produce 'null'. The case is included here in\n// the remote chance that this gets fixed someday.\n\n          return String(value);\n\n// If the type is 'object', we might be dealing with an object or an array or\n// null.\n\n      case 'object':\n\n// Due to a specification blunder in ECMAScript, typeof null is 'object',\n// so watch out for that case.\n\n          if (!value) {\n              return 'null';\n          }\n\n// Make an array to hold the partial results of stringifying this object value.\n\n          gap += indent;\n          partial = [];\n\n// Is the value an array?\n\n          if (Object.prototype.toString.apply(value) === '[object Array]') {\n\n// The value is an array. Stringify every element. Use null as a placeholder\n// for non-JSON values.\n\n              length = value.length;\n              for (i = 0; i < length; i += 1) {\n                  partial[i] = str(i, value) || 'null';\n              }\n\n// Join all of the elements together, separated with commas, and wrap them in\n// brackets.\n\n              v = partial.length === 0 ? '[]' : gap ?\n                  '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n                  '[' + partial.join(',') + ']';\n              gap = mind;\n              return v;\n          }\n\n// If the replacer is an array, use it to select the members to be stringified.\n\n          if (rep && typeof rep === 'object') {\n              length = rep.length;\n              for (i = 0; i < length; i += 1) {\n                  if (typeof rep[i] === 'string') {\n                      k = rep[i];\n                      v = str(k, value);\n                      if (v) {\n                          partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                      }\n                  }\n              }\n          } else {\n\n// Otherwise, iterate through all of the keys in the object.\n\n              for (k in value) {\n                  if (Object.prototype.hasOwnProperty.call(value, k)) {\n                      v = str(k, value);\n                      if (v) {\n                          partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                      }\n                  }\n              }\n          }\n\n// Join all of the member texts together, separated with commas,\n// and wrap them in braces.\n\n          v = partial.length === 0 ? '{}' : gap ?\n              '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n              '{' + partial.join(',') + '}';\n          gap = mind;\n          return v;\n      }\n  }\n\n// If the JSON object does not yet have a stringify method, give it one.\n\n  JSON.stringify = function (value, replacer, space) {\n\n// The stringify method takes a value and an optional replacer, and an optional\n// space parameter, and returns a JSON text. The replacer can be a function\n// that can replace values, or an array of strings that will select the keys.\n// A default replacer method can be provided. Use of the space parameter can\n// produce text that is more easily readable.\n\n      var i;\n      gap = '';\n      indent = '';\n\n// If the space parameter is a number, make an indent string containing that\n// many spaces.\n\n      if (typeof space === 'number') {\n          for (i = 0; i < space; i += 1) {\n              indent += ' ';\n          }\n\n// If the space parameter is a string, it will be used as the indent string.\n\n      } else if (typeof space === 'string') {\n          indent = space;\n      }\n\n// If there is a replacer, it must be a function or an array.\n// Otherwise, throw an error.\n\n      rep = replacer;\n      if (replacer && typeof replacer !== 'function' &&\n              (typeof replacer !== 'object' ||\n              typeof replacer.length !== 'number')) {\n          throw new Error('JSON.stringify');\n      }\n\n// Make a fake root object containing our value under the key of ''.\n// Return the result of stringifying the value.\n\n      return str('', {'': value});\n  };\n\n// If the JSON object does not yet have a parse method, give it one.\n\n  JSON.parse = function (text, reviver) {\n  // The parse method takes a text and an optional reviver function, and returns\n  // a JavaScript value if the text is a valid JSON text.\n\n      var j;\n\n      function walk(holder, key) {\n\n  // The walk method is used to recursively walk the resulting structure so\n  // that modifications can be made.\n\n          var k, v, value = holder[key];\n          if (value && typeof value === 'object') {\n              for (k in value) {\n                  if (Object.prototype.hasOwnProperty.call(value, k)) {\n                      v = walk(value, k);\n                      if (v !== undefined) {\n                          value[k] = v;\n                      } else {\n                          delete value[k];\n                      }\n                  }\n              }\n          }\n          return reviver.call(holder, key, value);\n      }\n\n\n  // Parsing happens in four stages. In the first stage, we replace certain\n  // Unicode characters with escape sequences. JavaScript handles many characters\n  // incorrectly, either silently deleting them, or treating them as line endings.\n\n      text = String(text);\n      cx.lastIndex = 0;\n      if (cx.test(text)) {\n          text = text.replace(cx, function (a) {\n              return '\\\\u' +\n                  ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n          });\n      }\n\n  // In the second stage, we run the text against regular expressions that look\n  // for non-JSON patterns. We are especially concerned with '()' and 'new'\n  // because they can cause invocation, and '=' because it can cause mutation.\n  // But just to be safe, we want to reject all unexpected forms.\n\n  // We split the second stage into 4 regexp operations in order to work around\n  // crippling inefficiencies in IE's and Safari's regexp engines. First we\n  // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we\n  // replace all simple value tokens with ']' characters. Third, we delete all\n  // open brackets that follow a colon or comma or that begin the text. Finally,\n  // we look to see that the remaining characters are only whitespace or ']' or\n  // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.\n\n      if (/^[\\],:{}\\s]*$/\n              .test(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')\n                  .replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']')\n                  .replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))) {\n\n  // In the third stage we use the eval function to compile the text into a\n  // JavaScript structure. The '{' operator is subject to a syntactic ambiguity\n  // in JavaScript: it can begin a block or an object literal. We wrap the text\n  // in parens to eliminate the ambiguity.\n\n          j = eval('(' + text + ')');\n\n  // In the optional fourth stage, we recursively walk the new structure, passing\n  // each name/value pair to a reviver function for possible transformation.\n\n          return typeof reviver === 'function' ?\n              walk({'': j}, '') : j;\n      }\n\n  // If the text is not JSON parseable, then a SyntaxError is thrown.\n\n      throw new SyntaxError('JSON.parse');\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , typeof JSON !== 'undefined' ? JSON : undefined\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Parser namespace.\n   *\n   * @namespace\n   */\n\n  var parser = exports.parser = {};\n\n  /**\n   * Packet types.\n   */\n\n  var packets = parser.packets = [\n      'disconnect'\n    , 'connect'\n    , 'heartbeat'\n    , 'message'\n    , 'json'\n    , 'event'\n    , 'ack'\n    , 'error'\n    , 'noop'\n  ];\n\n  /**\n   * Errors reasons.\n   */\n\n  var reasons = parser.reasons = [\n      'transport not supported'\n    , 'client not handshaken'\n    , 'unauthorized'\n  ];\n\n  /**\n   * Errors advice.\n   */\n\n  var advice = parser.advice = [\n      'reconnect'\n  ];\n\n  /**\n   * Shortcuts.\n   */\n\n  var JSON = io.JSON\n    , indexOf = io.util.indexOf;\n\n  /**\n   * Encodes a packet.\n   *\n   * @api private\n   */\n\n  parser.encodePacket = function (packet) {\n    var type = indexOf(packets, packet.type)\n      , id = packet.id || ''\n      , endpoint = packet.endpoint || ''\n      , ack = packet.ack\n      , data = null;\n\n    switch (packet.type) {\n      case 'error':\n        var reason = packet.reason ? indexOf(reasons, packet.reason) : ''\n          , adv = packet.advice ? indexOf(advice, packet.advice) : '';\n\n        if (reason !== '' || adv !== '')\n          data = reason + (adv !== '' ? ('+' + adv) : '');\n\n        break;\n\n      case 'message':\n        if (packet.data !== '')\n          data = packet.data;\n        break;\n\n      case 'event':\n        var ev = { name: packet.name };\n\n        if (packet.args && packet.args.length) {\n          ev.args = packet.args;\n        }\n\n        data = JSON.stringify(ev);\n        break;\n\n      case 'json':\n        data = JSON.stringify(packet.data);\n        break;\n\n      case 'connect':\n        if (packet.qs)\n          data = packet.qs;\n        break;\n\n      case 'ack':\n        data = packet.ackId\n          + (packet.args && packet.args.length\n              ? '+' + JSON.stringify(packet.args) : '');\n        break;\n    }\n\n    // construct packet with required fragments\n    var encoded = [\n        type\n      , id + (ack == 'data' ? '+' : '')\n      , endpoint\n    ];\n\n    // data fragment is optional\n    if (data !== null && data !== undefined)\n      encoded.push(data);\n\n    return encoded.join(':');\n  };\n\n  /**\n   * Encodes multiple messages (payload).\n   *\n   * @param {Array} messages\n   * @api private\n   */\n\n  parser.encodePayload = function (packets) {\n    var decoded = '';\n\n    if (packets.length == 1)\n      return packets[0];\n\n    for (var i = 0, l = packets.length; i < l; i++) {\n      var packet = packets[i];\n      decoded += '\\ufffd' + packet.length + '\\ufffd' + packets[i];\n    }\n\n    return decoded;\n  };\n\n  /**\n   * Decodes a packet\n   *\n   * @api private\n   */\n\n  var regexp = /([^:]+):([0-9]+)?(\\+)?:([^:]+)?:?([\\s\\S]*)?/;\n\n  parser.decodePacket = function (data) {\n    var pieces = data.match(regexp);\n\n    if (!pieces) return {};\n\n    var id = pieces[2] || ''\n      , data = pieces[5] || ''\n      , packet = {\n            type: packets[pieces[1]]\n          , endpoint: pieces[4] || ''\n        };\n\n    // whether we need to acknowledge the packet\n    if (id) {\n      packet.id = id;\n      if (pieces[3])\n        packet.ack = 'data';\n      else\n        packet.ack = true;\n    }\n\n    // handle different packet types\n    switch (packet.type) {\n      case 'error':\n        var pieces = data.split('+');\n        packet.reason = reasons[pieces[0]] || '';\n        packet.advice = advice[pieces[1]] || '';\n        break;\n\n      case 'message':\n        packet.data = data || '';\n        break;\n\n      case 'event':\n        try {\n          var opts = JSON.parse(data);\n          packet.name = opts.name;\n          packet.args = opts.args;\n        } catch (e) { }\n\n        packet.args = packet.args || [];\n        break;\n\n      case 'json':\n        try {\n          packet.data = JSON.parse(data);\n        } catch (e) { }\n        break;\n\n      case 'connect':\n        packet.qs = data || '';\n        break;\n\n      case 'ack':\n        var pieces = data.match(/^([0-9]+)(\\+)?(.*)/);\n        if (pieces) {\n          packet.ackId = pieces[1];\n          packet.args = [];\n\n          if (pieces[3]) {\n            try {\n              packet.args = pieces[3] ? JSON.parse(pieces[3]) : [];\n            } catch (e) { }\n          }\n        }\n        break;\n\n      case 'disconnect':\n      case 'heartbeat':\n        break;\n    };\n\n    return packet;\n  };\n\n  /**\n   * Decodes data payload. Detects multiple messages\n   *\n   * @return {Array} messages\n   * @api public\n   */\n\n  parser.decodePayload = function (data) {\n    // IE doesn't like data[i] for unicode chars, charAt works fine\n    if (data.charAt(0) == '\\ufffd') {\n      var ret = [];\n\n      for (var i = 1, length = ''; i < data.length; i++) {\n        if (data.charAt(i) == '\\ufffd') {\n          ret.push(parser.decodePacket(data.substr(i + 1).substr(0, length)));\n          i += Number(length) + 1;\n          length = '';\n        } else {\n          length += data.charAt(i);\n        }\n      }\n\n      return ret;\n    } else {\n      return [parser.decodePacket(data)];\n    }\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.Transport = Transport;\n\n  /**\n   * This is the transport template for all supported transport methods.\n   *\n   * @constructor\n   * @api public\n   */\n\n  function Transport (socket, sessid) {\n    this.socket = socket;\n    this.sessid = sessid;\n  };\n\n  /**\n   * Apply EventEmitter mixin.\n   */\n\n  io.util.mixin(Transport, io.EventEmitter);\n\n\n  /**\n   * Indicates whether heartbeats is enabled for this transport\n   *\n   * @api private\n   */\n\n  Transport.prototype.heartbeats = function () {\n    return true;\n  };\n\n  /**\n   * Handles the response from the server. When a new response is received\n   * it will automatically update the timeout, decode the message and\n   * forwards the response to the onMessage function for further processing.\n   *\n   * @param {String} data Response from the server.\n   * @api private\n   */\n\n  Transport.prototype.onData = function (data) {\n    this.clearCloseTimeout();\n\n    // If the connection in currently open (or in a reopening state) reset the close\n    // timeout since we have just received data. This check is necessary so\n    // that we don't reset the timeout on an explicitly disconnected connection.\n    if (this.socket.connected || this.socket.connecting || this.socket.reconnecting) {\n      this.setCloseTimeout();\n    }\n\n    if (data !== '') {\n      // todo: we should only do decodePayload for xhr transports\n      var msgs = io.parser.decodePayload(data);\n\n      if (msgs && msgs.length) {\n        for (var i = 0, l = msgs.length; i < l; i++) {\n          this.onPacket(msgs[i]);\n        }\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Handles packets.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onPacket = function (packet) {\n    this.socket.setHeartbeatTimeout();\n\n    if (packet.type == 'heartbeat') {\n      return this.onHeartbeat();\n    }\n\n    if (packet.type == 'connect' && packet.endpoint == '') {\n      this.onConnect();\n    }\n\n    if (packet.type == 'error' && packet.advice == 'reconnect') {\n      this.isOpen = false;\n    }\n\n    this.socket.onPacket(packet);\n\n    return this;\n  };\n\n  /**\n   * Sets close timeout\n   *\n   * @api private\n   */\n\n  Transport.prototype.setCloseTimeout = function () {\n    if (!this.closeTimeout) {\n      var self = this;\n\n      this.closeTimeout = setTimeout(function () {\n        self.onDisconnect();\n      }, this.socket.closeTimeout);\n    }\n  };\n\n  /**\n   * Called when transport disconnects.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onDisconnect = function () {\n    if (this.isOpen) this.close();\n    this.clearTimeouts();\n    this.socket.onDisconnect();\n    return this;\n  };\n\n  /**\n   * Called when transport connects\n   *\n   * @api private\n   */\n\n  Transport.prototype.onConnect = function () {\n    this.socket.onConnect();\n    return this;\n  };\n\n  /**\n   * Clears close timeout\n   *\n   * @api private\n   */\n\n  Transport.prototype.clearCloseTimeout = function () {\n    if (this.closeTimeout) {\n      clearTimeout(this.closeTimeout);\n      this.closeTimeout = null;\n    }\n  };\n\n  /**\n   * Clear timeouts\n   *\n   * @api private\n   */\n\n  Transport.prototype.clearTimeouts = function () {\n    this.clearCloseTimeout();\n\n    if (this.reopenTimeout) {\n      clearTimeout(this.reopenTimeout);\n    }\n  };\n\n  /**\n   * Sends a packet\n   *\n   * @param {Object} packet object.\n   * @api private\n   */\n\n  Transport.prototype.packet = function (packet) {\n    this.send(io.parser.encodePacket(packet));\n  };\n\n  /**\n   * Send the received heartbeat message back to server. So the server\n   * knows we are still connected.\n   *\n   * @param {String} heartbeat Heartbeat response from the server.\n   * @api private\n   */\n\n  Transport.prototype.onHeartbeat = function (heartbeat) {\n    this.packet({ type: 'heartbeat' });\n  };\n\n  /**\n   * Called when the transport opens.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onOpen = function () {\n    this.isOpen = true;\n    this.clearCloseTimeout();\n    this.socket.onOpen();\n  };\n\n  /**\n   * Notifies the base when the connection with the Socket.IO server\n   * has been disconnected.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onClose = function () {\n    var self = this;\n\n    /* FIXME: reopen delay causing a infinit loop\n    this.reopenTimeout = setTimeout(function () {\n      self.open();\n    }, this.socket.options['reopen delay']);*/\n\n    this.isOpen = false;\n    this.socket.onClose();\n    this.onDisconnect();\n  };\n\n  /**\n   * Generates a connection url based on the Socket.IO URL Protocol.\n   * See <https://github.com/learnboost/socket.io-node/> for more details.\n   *\n   * @returns {String} Connection url\n   * @api private\n   */\n\n  Transport.prototype.prepareUrl = function () {\n    var options = this.socket.options;\n\n    return this.scheme() + '://'\n      + options.host + ':' + options.port + '/'\n      + options.resource + '/' + io.protocol\n      + '/' + this.name + '/' + this.sessid;\n  };\n\n  /**\n   * Checks if the transport is ready to start a connection.\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  Transport.prototype.ready = function (socket, fn) {\n    fn.call(this);\n  };\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.Socket = Socket;\n\n  /**\n   * Create a new `Socket.IO client` which can establish a persistent\n   * connection with a Socket.IO enabled server.\n   *\n   * @api public\n   */\n\n  function Socket (options) {\n    this.options = {\n        port: 80\n      , secure: false\n      , document: 'document' in global ? document : false\n      , resource: 'socket.io'\n      , transports: io.transports\n      , 'connect timeout': 10000\n      , 'try multiple transports': true\n      , 'reconnect': true\n      , 'reconnection delay': 500\n      , 'reconnection limit': Infinity\n      , 'reopen delay': 3000\n      , 'max reconnection attempts': 10\n      , 'sync disconnect on unload': false\n      , 'auto connect': true\n      , 'flash policy port': 10843\n      , 'manualFlush': false\n    };\n\n    io.util.merge(this.options, options);\n\n    this.connected = false;\n    this.open = false;\n    this.connecting = false;\n    this.reconnecting = false;\n    this.namespaces = {};\n    this.buffer = [];\n    this.doBuffer = false;\n\n    if (this.options['sync disconnect on unload'] &&\n        (!this.isXDomain() || io.util.ua.hasCORS)) {\n      var self = this;\n      io.util.on(global, 'beforeunload', function () {\n        self.disconnectSync();\n      }, false);\n    }\n\n    if (this.options['auto connect']) {\n      this.connect();\n    }\n};\n\n  /**\n   * Apply EventEmitter mixin.\n   */\n\n  io.util.mixin(Socket, io.EventEmitter);\n\n  /**\n   * Returns a namespace listener/emitter for this socket\n   *\n   * @api public\n   */\n\n  Socket.prototype.of = function (name) {\n    if (!this.namespaces[name]) {\n      this.namespaces[name] = new io.SocketNamespace(this, name);\n\n      if (name !== '') {\n        this.namespaces[name].packet({ type: 'connect' });\n      }\n    }\n\n    return this.namespaces[name];\n  };\n\n  /**\n   * Emits the given event to the Socket and all namespaces\n   *\n   * @api private\n   */\n\n  Socket.prototype.publish = function () {\n    this.emit.apply(this, arguments);\n\n    var nsp;\n\n    for (var i in this.namespaces) {\n      if (this.namespaces.hasOwnProperty(i)) {\n        nsp = this.of(i);\n        nsp.$emit.apply(nsp, arguments);\n      }\n    }\n  };\n\n  /**\n   * Performs the handshake\n   *\n   * @api private\n   */\n\n  function empty () { };\n\n  Socket.prototype.handshake = function (fn) {\n    var self = this\n      , options = this.options;\n\n    function complete (data) {\n      if (data instanceof Error) {\n        self.connecting = false;\n        self.onError(data.message);\n      } else {\n        fn.apply(null, data.split(':'));\n      }\n    };\n\n    var url = [\n          'http' + (options.secure ? 's' : '') + ':/'\n        , options.host + ':' + options.port\n        , options.resource\n        , io.protocol\n        , io.util.query(this.options.query, 't=' + +new Date)\n      ].join('/');\n\n    if (this.isXDomain() && !io.util.ua.hasCORS) {\n      var insertAt = document.getElementsByTagName('script')[0]\n        , script = document.createElement('script');\n\n      script.src = url + '&jsonp=' + io.j.length;\n      insertAt.parentNode.insertBefore(script, insertAt);\n\n      io.j.push(function (data) {\n        complete(data);\n        script.parentNode.removeChild(script);\n      });\n    } else {\n      var xhr = io.util.request();\n\n      xhr.open('GET', url, true);\n      if (this.isXDomain()) {\n        xhr.withCredentials = true;\n      }\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState == 4) {\n          xhr.onreadystatechange = empty;\n\n          if (xhr.status == 200) {\n            complete(xhr.responseText);\n          } else if (xhr.status == 403) {\n            self.onError(xhr.responseText);\n          } else {\n            self.connecting = false;            \n            !self.reconnecting && self.onError(xhr.responseText);\n          }\n        }\n      };\n      xhr.send(null);\n    }\n  };\n\n  /**\n   * Find an available transport based on the options supplied in the constructor.\n   *\n   * @api private\n   */\n\n  Socket.prototype.getTransport = function (override) {\n    var transports = override || this.transports, match;\n\n    for (var i = 0, transport; transport = transports[i]; i++) {\n      if (io.Transport[transport]\n        && io.Transport[transport].check(this)\n        && (!this.isXDomain() || io.Transport[transport].xdomainCheck(this))) {\n        return new io.Transport[transport](this, this.sessionid);\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * Connects to the server.\n   *\n   * @param {Function} [fn] Callback.\n   * @returns {io.Socket}\n   * @api public\n   */\n\n  Socket.prototype.connect = function (fn) {\n    if (this.connecting) {\n      return this;\n    }\n\n    var self = this;\n    self.connecting = true;\n    \n    this.handshake(function (sid, heartbeat, close, transports) {\n      self.sessionid = sid;\n      self.closeTimeout = close * 1000;\n      self.heartbeatTimeout = heartbeat * 1000;\n      if(!self.transports)\n          self.transports = self.origTransports = (transports ? io.util.intersect(\n              transports.split(',')\n            , self.options.transports\n          ) : self.options.transports);\n\n      self.setHeartbeatTimeout();\n\n      function connect (transports){\n        if (self.transport) self.transport.clearTimeouts();\n\n        self.transport = self.getTransport(transports);\n        if (!self.transport) return self.publish('connect_failed');\n\n        // once the transport is ready\n        self.transport.ready(self, function () {\n          self.connecting = true;\n          self.publish('connecting', self.transport.name);\n          self.transport.open();\n\n          if (self.options['connect timeout']) {\n            self.connectTimeoutTimer = setTimeout(function () {\n              if (!self.connected) {\n                self.connecting = false;\n\n                if (self.options['try multiple transports']) {\n                  var remaining = self.transports;\n\n                  while (remaining.length > 0 && remaining.splice(0,1)[0] !=\n                         self.transport.name) {}\n\n                    if (remaining.length){\n                      connect(remaining);\n                    } else {\n                      self.publish('connect_failed');\n                    }\n                }\n              }\n            }, self.options['connect timeout']);\n          }\n        });\n      }\n\n      connect(self.transports);\n\n      self.once('connect', function (){\n        clearTimeout(self.connectTimeoutTimer);\n\n        fn && typeof fn == 'function' && fn();\n      });\n    });\n\n    return this;\n  };\n\n  /**\n   * Clears and sets a new heartbeat timeout using the value given by the\n   * server during the handshake.\n   *\n   * @api private\n   */\n\n  Socket.prototype.setHeartbeatTimeout = function () {\n    clearTimeout(this.heartbeatTimeoutTimer);\n    if(this.transport && !this.transport.heartbeats()) return;\n\n    var self = this;\n    this.heartbeatTimeoutTimer = setTimeout(function () {\n      self.transport.onClose();\n    }, this.heartbeatTimeout);\n  };\n\n  /**\n   * Sends a message.\n   *\n   * @param {Object} data packet.\n   * @returns {io.Socket}\n   * @api public\n   */\n\n  Socket.prototype.packet = function (data) {\n    if (this.connected && !this.doBuffer) {\n      this.transport.packet(data);\n    } else {\n      this.buffer.push(data);\n    }\n\n    return this;\n  };\n\n  /**\n   * Sets buffer state\n   *\n   * @api private\n   */\n\n  Socket.prototype.setBuffer = function (v) {\n    this.doBuffer = v;\n\n    if (!v && this.connected && this.buffer.length) {\n      if (!this.options['manualFlush']) {\n        this.flushBuffer();\n      }\n    }\n  };\n\n  /**\n   * Flushes the buffer data over the wire.\n   * To be invoked manually when 'manualFlush' is set to true.\n   *\n   * @api public\n   */\n\n  Socket.prototype.flushBuffer = function() {\n    this.transport.payload(this.buffer);\n    this.buffer = [];\n  };\n  \n\n  /**\n   * Disconnect the established connect.\n   *\n   * @returns {io.Socket}\n   * @api public\n   */\n\n  Socket.prototype.disconnect = function () {\n    if (this.connected || this.connecting) {\n      if (this.open) {\n        this.of('').packet({ type: 'disconnect' });\n      }\n\n      // handle disconnection immediately\n      this.onDisconnect('booted');\n    }\n\n    return this;\n  };\n\n  /**\n   * Disconnects the socket with a sync XHR.\n   *\n   * @api private\n   */\n\n  Socket.prototype.disconnectSync = function () {\n    // ensure disconnection\n    var xhr = io.util.request();\n    var uri = [\n        'http' + (this.options.secure ? 's' : '') + ':/'\n      , this.options.host + ':' + this.options.port\n      , this.options.resource\n      , io.protocol\n      , ''\n      , this.sessionid\n    ].join('/') + '/?disconnect=1';\n\n    xhr.open('GET', uri, false);\n    xhr.send(null);\n\n    // handle disconnection immediately\n    this.onDisconnect('booted');\n  };\n\n  /**\n   * Check if we need to use cross domain enabled transports. Cross domain would\n   * be a different port or different domain name.\n   *\n   * @returns {Boolean}\n   * @api private\n   */\n\n  Socket.prototype.isXDomain = function () {\n\n    var port = global.location.port ||\n      ('https:' == global.location.protocol ? 443 : 80);\n\n    return this.options.host !== global.location.hostname \n      || this.options.port != port;\n  };\n\n  /**\n   * Called upon handshake.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onConnect = function () {\n    if (!this.connected) {\n      this.connected = true;\n      this.connecting = false;\n      if (!this.doBuffer) {\n        // make sure to flush the buffer\n        this.setBuffer(false);\n      }\n      this.emit('connect');\n    }\n  };\n\n  /**\n   * Called when the transport opens\n   *\n   * @api private\n   */\n\n  Socket.prototype.onOpen = function () {\n    this.open = true;\n  };\n\n  /**\n   * Called when the transport closes.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onClose = function () {\n    this.open = false;\n    clearTimeout(this.heartbeatTimeoutTimer);\n  };\n\n  /**\n   * Called when the transport first opens a connection\n   *\n   * @param text\n   */\n\n  Socket.prototype.onPacket = function (packet) {\n    this.of(packet.endpoint).onPacket(packet);\n  };\n\n  /**\n   * Handles an error.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onError = function (err) {\n    if (err && err.advice) {\n      if (err.advice === 'reconnect' && (this.connected || this.connecting)) {\n        this.disconnect();\n        if (this.options.reconnect) {\n          this.reconnect();\n        }\n      }\n    }\n\n    this.publish('error', err && err.reason ? err.reason : err);\n  };\n\n  /**\n   * Called when the transport disconnects.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onDisconnect = function (reason) {\n    var wasConnected = this.connected\n      , wasConnecting = this.connecting;\n\n    this.connected = false;\n    this.connecting = false;\n    this.open = false;\n\n    if (wasConnected || wasConnecting) {\n      this.transport.close();\n      this.transport.clearTimeouts();\n      if (wasConnected) {\n        this.publish('disconnect', reason);\n\n        if ('booted' != reason && this.options.reconnect && !this.reconnecting) {\n          this.reconnect();\n        }\n      }\n    }\n  };\n\n  /**\n   * Called upon reconnection.\n   *\n   * @api private\n   */\n\n  Socket.prototype.reconnect = function () {\n    this.reconnecting = true;\n    this.reconnectionAttempts = 0;\n    this.reconnectionDelay = this.options['reconnection delay'];\n\n    var self = this\n      , maxAttempts = this.options['max reconnection attempts']\n      , tryMultiple = this.options['try multiple transports']\n      , limit = this.options['reconnection limit'];\n\n    function reset () {\n      if (self.connected) {\n        for (var i in self.namespaces) {\n          if (self.namespaces.hasOwnProperty(i) && '' !== i) {\n              self.namespaces[i].packet({ type: 'connect' });\n          }\n        }\n        self.publish('reconnect', self.transport.name, self.reconnectionAttempts);\n      }\n\n      clearTimeout(self.reconnectionTimer);\n\n      self.removeListener('connect_failed', maybeReconnect);\n      self.removeListener('connect', maybeReconnect);\n\n      self.reconnecting = false;\n\n      delete self.reconnectionAttempts;\n      delete self.reconnectionDelay;\n      delete self.reconnectionTimer;\n      delete self.redoTransports;\n\n      self.options['try multiple transports'] = tryMultiple;\n    };\n\n    function maybeReconnect () {\n      if (!self.reconnecting) {\n        return;\n      }\n\n      if (self.connected) {\n        return reset();\n      };\n\n      if (self.connecting && self.reconnecting) {\n        return self.reconnectionTimer = setTimeout(maybeReconnect, 1000);\n      }\n\n      if (self.reconnectionAttempts++ >= maxAttempts) {\n        if (!self.redoTransports) {\n          self.on('connect_failed', maybeReconnect);\n          self.options['try multiple transports'] = true;\n          self.transports = self.origTransports;\n          self.transport = self.getTransport();\n          self.redoTransports = true;\n          self.connect();\n        } else {\n          self.publish('reconnect_failed');\n          reset();\n        }\n      } else {\n        if (self.reconnectionDelay < limit) {\n          self.reconnectionDelay *= 2; // exponential back off\n        }\n\n        self.connect();\n        self.publish('reconnecting', self.reconnectionDelay, self.reconnectionAttempts);\n        self.reconnectionTimer = setTimeout(maybeReconnect, self.reconnectionDelay);\n      }\n    };\n\n    this.options['try multiple transports'] = false;\n    this.reconnectionTimer = setTimeout(maybeReconnect, this.reconnectionDelay);\n\n    this.on('connect', maybeReconnect);\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.SocketNamespace = SocketNamespace;\n\n  /**\n   * Socket namespace constructor.\n   *\n   * @constructor\n   * @api public\n   */\n\n  function SocketNamespace (socket, name) {\n    this.socket = socket;\n    this.name = name || '';\n    this.flags = {};\n    this.json = new Flag(this, 'json');\n    this.ackPackets = 0;\n    this.acks = {};\n  };\n\n  /**\n   * Apply EventEmitter mixin.\n   */\n\n  io.util.mixin(SocketNamespace, io.EventEmitter);\n\n  /**\n   * Copies emit since we override it\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.$emit = io.EventEmitter.prototype.emit;\n\n  /**\n   * Creates a new namespace, by proxying the request to the socket. This\n   * allows us to use the synax as we do on the server.\n   *\n   * @api public\n   */\n\n  SocketNamespace.prototype.of = function () {\n    return this.socket.of.apply(this.socket, arguments);\n  };\n\n  /**\n   * Sends a packet.\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.packet = function (packet) {\n    packet.endpoint = this.name;\n    this.socket.packet(packet);\n    this.flags = {};\n    return this;\n  };\n\n  /**\n   * Sends a message\n   *\n   * @api public\n   */\n\n  SocketNamespace.prototype.send = function (data, fn) {\n    var packet = {\n        type: this.flags.json ? 'json' : 'message'\n      , data: data\n    };\n\n    if ('function' == typeof fn) {\n      packet.id = ++this.ackPackets;\n      packet.ack = true;\n      this.acks[packet.id] = fn;\n    }\n\n    return this.packet(packet);\n  };\n\n  /**\n   * Emits an event\n   *\n   * @api public\n   */\n  \n  SocketNamespace.prototype.emit = function (name) {\n    var args = Array.prototype.slice.call(arguments, 1)\n      , lastArg = args[args.length - 1]\n      , packet = {\n            type: 'event'\n          , name: name\n        };\n\n    if ('function' == typeof lastArg) {\n      packet.id = ++this.ackPackets;\n      packet.ack = 'data';\n      this.acks[packet.id] = lastArg;\n      args = args.slice(0, args.length - 1);\n    }\n\n    packet.args = args;\n\n    return this.packet(packet);\n  };\n\n  /**\n   * Disconnects the namespace\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.disconnect = function () {\n    if (this.name === '') {\n      this.socket.disconnect();\n    } else {\n      this.packet({ type: 'disconnect' });\n      this.$emit('disconnect');\n    }\n\n    return this;\n  };\n\n  /**\n   * Handles a packet\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.onPacket = function (packet) {\n    var self = this;\n\n    function ack () {\n      self.packet({\n          type: 'ack'\n        , args: io.util.toArray(arguments)\n        , ackId: packet.id\n      });\n    };\n\n    switch (packet.type) {\n      case 'connect':\n        this.$emit('connect');\n        break;\n\n      case 'disconnect':\n        if (this.name === '') {\n          this.socket.onDisconnect(packet.reason || 'booted');\n        } else {\n          this.$emit('disconnect', packet.reason);\n        }\n        break;\n\n      case 'message':\n      case 'json':\n        var params = ['message', packet.data];\n\n        if (packet.ack == 'data') {\n          params.push(ack);\n        } else if (packet.ack) {\n          this.packet({ type: 'ack', ackId: packet.id });\n        }\n\n        this.$emit.apply(this, params);\n        break;\n\n      case 'event':\n        var params = [packet.name].concat(packet.args);\n\n        if (packet.ack == 'data')\n          params.push(ack);\n\n        this.$emit.apply(this, params);\n        break;\n\n      case 'ack':\n        if (this.acks[packet.ackId]) {\n          this.acks[packet.ackId].apply(this, packet.args);\n          delete this.acks[packet.ackId];\n        }\n        break;\n\n      case 'error':\n        if (packet.advice){\n          this.socket.onError(packet);\n        } else {\n          if (packet.reason == 'unauthorized') {\n            this.$emit('connect_failed', packet.reason);\n          } else {\n            this.$emit('error', packet.reason);\n          }\n        }\n        break;\n    }\n  };\n\n  /**\n   * Flag interface.\n   *\n   * @api private\n   */\n\n  function Flag (nsp, name) {\n    this.namespace = nsp;\n    this.name = name;\n  };\n\n  /**\n   * Send a message\n   *\n   * @api public\n   */\n\n  Flag.prototype.send = function () {\n    this.namespace.flags[this.name] = true;\n    this.namespace.send.apply(this.namespace, arguments);\n  };\n\n  /**\n   * Emit an event\n   *\n   * @api public\n   */\n\n  Flag.prototype.emit = function () {\n    this.namespace.flags[this.name] = true;\n    this.namespace.emit.apply(this.namespace, arguments);\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.websocket = WS;\n\n  /**\n   * The WebSocket transport uses the HTML5 WebSocket API to establish an\n   * persistent connection with the Socket.IO server. This transport will also\n   * be inherited by the FlashSocket fallback as it provides a API compatible\n   * polyfill for the WebSockets.\n   *\n   * @constructor\n   * @extends {io.Transport}\n   * @api public\n   */\n\n  function WS (socket) {\n    io.Transport.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from Transport.\n   */\n\n  io.util.inherit(WS, io.Transport);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  WS.prototype.name = 'websocket';\n\n  /**\n   * Initializes a new `WebSocket` connection with the Socket.IO server. We attach\n   * all the appropriate listeners to handle the responses from the server.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  WS.prototype.open = function () {\n    var query = io.util.query(this.socket.options.query)\n      , self = this\n      , Socket\n\n\n    if (!Socket) {\n      Socket = global.MozWebSocket || global.WebSocket;\n    }\n\n    this.websocket = new Socket(this.prepareUrl() + query);\n\n    this.websocket.onopen = function () {\n      self.onOpen();\n      self.socket.setBuffer(false);\n    };\n    this.websocket.onmessage = function (ev) {\n      self.onData(ev.data);\n    };\n    this.websocket.onclose = function () {\n      self.onClose();\n      self.socket.setBuffer(true);\n    };\n    this.websocket.onerror = function (e) {\n      self.onError(e);\n    };\n\n    return this;\n  };\n\n  /**\n   * Send a message to the Socket.IO server. The message will automatically be\n   * encoded in the correct message format.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  // Do to a bug in the current IDevices browser, we need to wrap the send in a \n  // setTimeout, when they resume from sleeping the browser will crash if \n  // we don't allow the browser time to detect the socket has been closed\n  if (io.util.ua.iDevice) {\n    WS.prototype.send = function (data) {\n      var self = this;\n      setTimeout(function() {\n         self.websocket.send(data);\n      },0);\n      return this;\n    };\n  } else {\n    WS.prototype.send = function (data) {\n      this.websocket.send(data);\n      return this;\n    };\n  }\n\n  /**\n   * Payload\n   *\n   * @api private\n   */\n\n  WS.prototype.payload = function (arr) {\n    for (var i = 0, l = arr.length; i < l; i++) {\n      this.packet(arr[i]);\n    }\n    return this;\n  };\n\n  /**\n   * Disconnect the established `WebSocket` connection.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  WS.prototype.close = function () {\n    this.websocket.close();\n    return this;\n  };\n\n  /**\n   * Handle the errors that `WebSocket` might be giving when we\n   * are attempting to connect or send messages.\n   *\n   * @param {Error} e The error.\n   * @api private\n   */\n\n  WS.prototype.onError = function (e) {\n    this.socket.onError(e);\n  };\n\n  /**\n   * Returns the appropriate scheme for the URI generation.\n   *\n   * @api private\n   */\n  WS.prototype.scheme = function () {\n    return this.socket.options.secure ? 'wss' : 'ws';\n  };\n\n  /**\n   * Checks if the browser has support for native `WebSockets` and that\n   * it's not the polyfill created for the FlashSocket transport.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  WS.check = function () {\n    return ('WebSocket' in global && !('__addTask' in WebSocket))\n          || 'MozWebSocket' in global;\n  };\n\n  /**\n   * Check if the `WebSocket` transport support cross domain communications.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  WS.xdomainCheck = function () {\n    return true;\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('websocket');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.flashsocket = Flashsocket;\n\n  /**\n   * The FlashSocket transport. This is a API wrapper for the HTML5 WebSocket\n   * specification. It uses a .swf file to communicate with the server. If you want\n   * to serve the .swf file from a other server than where the Socket.IO script is\n   * coming from you need to use the insecure version of the .swf. More information\n   * about this can be found on the github page.\n   *\n   * @constructor\n   * @extends {io.Transport.websocket}\n   * @api public\n   */\n\n  function Flashsocket () {\n    io.Transport.websocket.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from Transport.\n   */\n\n  io.util.inherit(Flashsocket, io.Transport.websocket);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  Flashsocket.prototype.name = 'flashsocket';\n\n  /**\n   * Disconnect the established `FlashSocket` connection. This is done by adding a \n   * new task to the FlashSocket. The rest will be handled off by the `WebSocket` \n   * transport.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  Flashsocket.prototype.open = function () {\n    var self = this\n      , args = arguments;\n\n    WebSocket.__addTask(function () {\n      io.Transport.websocket.prototype.open.apply(self, args);\n    });\n    return this;\n  };\n  \n  /**\n   * Sends a message to the Socket.IO server. This is done by adding a new\n   * task to the FlashSocket. The rest will be handled off by the `WebSocket` \n   * transport.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  Flashsocket.prototype.send = function () {\n    var self = this, args = arguments;\n    WebSocket.__addTask(function () {\n      io.Transport.websocket.prototype.send.apply(self, args);\n    });\n    return this;\n  };\n\n  /**\n   * Disconnects the established `FlashSocket` connection.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  Flashsocket.prototype.close = function () {\n    WebSocket.__tasks.length = 0;\n    io.Transport.websocket.prototype.close.call(this);\n    return this;\n  };\n\n  /**\n   * The WebSocket fall back needs to append the flash container to the body\n   * element, so we need to make sure we have access to it. Or defer the call\n   * until we are sure there is a body element.\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  Flashsocket.prototype.ready = function (socket, fn) {\n    function init () {\n      var options = socket.options\n        , port = options['flash policy port']\n        , path = [\n              'http' + (options.secure ? 's' : '') + ':/'\n            , options.host + ':' + options.port\n            , options.resource\n            , 'static/flashsocket'\n            , 'WebSocketMain' + (socket.isXDomain() ? 'Insecure' : '') + '.swf'\n          ];\n\n      // Only start downloading the swf file when the checked that this browser\n      // actually supports it\n      if (!Flashsocket.loaded) {\n        if (typeof WEB_SOCKET_SWF_LOCATION === 'undefined') {\n          // Set the correct file based on the XDomain settings\n          WEB_SOCKET_SWF_LOCATION = path.join('/');\n        }\n\n        if (port !== 843) {\n          WebSocket.loadFlashPolicyFile('xmlsocket://' + options.host + ':' + port);\n        }\n\n        WebSocket.__initialize();\n        Flashsocket.loaded = true;\n      }\n\n      fn.call(self);\n    }\n\n    var self = this;\n    if (document.body) return init();\n\n    io.util.load(init);\n  };\n\n  /**\n   * Check if the FlashSocket transport is supported as it requires that the Adobe\n   * Flash Player plug-in version `10.0.0` or greater is installed. And also check if\n   * the polyfill is correctly loaded.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  Flashsocket.check = function () {\n    if (\n        typeof WebSocket == 'undefined'\n      || !('__initialize' in WebSocket) || !swfobject\n    ) return false;\n\n    return swfobject.getFlashPlayerVersion().major >= 10;\n  };\n\n  /**\n   * Check if the FlashSocket transport can be used as cross domain / cross origin \n   * transport. Because we can't see which type (secure or insecure) of .swf is used\n   * we will just return true.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  Flashsocket.xdomainCheck = function () {\n    return true;\n  };\n\n  /**\n   * Disable AUTO_INITIALIZATION\n   */\n\n  if (typeof window != 'undefined') {\n    WEB_SOCKET_DISABLE_AUTO_INITIALIZATION = true;\n  }\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('flashsocket');\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n/*\tSWFObject v2.2 <http://code.google.com/p/swfobject/> \n\tis released under the MIT License <http://www.opensource.org/licenses/mit-license.php> \n*/\nif ('undefined' != typeof window) {\nvar swfobject=function(){var D=\"undefined\",r=\"object\",S=\"Shockwave Flash\",W=\"ShockwaveFlash.ShockwaveFlash\",q=\"application/x-shockwave-flash\",R=\"SWFObjectExprInst\",x=\"onreadystatechange\",O=window,j=document,t=navigator,T=false,U=[h],o=[],N=[],I=[],l,Q,E,B,J=false,a=false,n,G,m=true,M=function(){var aa=typeof j.getElementById!=D&&typeof j.getElementsByTagName!=D&&typeof j.createElement!=D,ah=t.userAgent.toLowerCase(),Y=t.platform.toLowerCase(),ae=Y?/win/.test(Y):/win/.test(ah),ac=Y?/mac/.test(Y):/mac/.test(ah),af=/webkit/.test(ah)?parseFloat(ah.replace(/^.*webkit\\/(\\d+(\\.\\d+)?).*$/,\"$1\")):false,X=!+\"\\v1\",ag=[0,0,0],ab=null;if(typeof t.plugins!=D&&typeof t.plugins[S]==r){ab=t.plugins[S].description;if(ab&&!(typeof t.mimeTypes!=D&&t.mimeTypes[q]&&!t.mimeTypes[q].enabledPlugin)){T=true;X=false;ab=ab.replace(/^.*\\s+(\\S+\\s+\\S+$)/,\"$1\");ag[0]=parseInt(ab.replace(/^(.*)\\..*$/,\"$1\"),10);ag[1]=parseInt(ab.replace(/^.*\\.(.*)\\s.*$/,\"$1\"),10);ag[2]=/[a-zA-Z]/.test(ab)?parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/,\"$1\"),10):0}}else{if(typeof O[(['Active'].concat('Object').join('X'))]!=D){try{var ad=new window[(['Active'].concat('Object').join('X'))](W);if(ad){ab=ad.GetVariable(\"$version\");if(ab){X=true;ab=ab.split(\" \")[1].split(\",\");ag=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}}catch(Z){}}}return{w3:aa,pv:ag,wk:af,ie:X,win:ae,mac:ac}}(),k=function(){if(!M.w3){return}if((typeof j.readyState!=D&&j.readyState==\"complete\")||(typeof j.readyState==D&&(j.getElementsByTagName(\"body\")[0]||j.body))){f()}if(!J){if(typeof j.addEventListener!=D){j.addEventListener(\"DOMContentLoaded\",f,false)}if(M.ie&&M.win){j.attachEvent(x,function(){if(j.readyState==\"complete\"){j.detachEvent(x,arguments.callee);f()}});if(O==top){(function(){if(J){return}try{j.documentElement.doScroll(\"left\")}catch(X){setTimeout(arguments.callee,0);return}f()})()}}if(M.wk){(function(){if(J){return}if(!/loaded|complete/.test(j.readyState)){setTimeout(arguments.callee,0);return}f()})()}s(f)}}();function f(){if(J){return}try{var Z=j.getElementsByTagName(\"body\")[0].appendChild(C(\"span\"));Z.parentNode.removeChild(Z)}catch(aa){return}J=true;var X=U.length;for(var Y=0;Y<X;Y++){U[Y]()}}function K(X){if(J){X()}else{U[U.length]=X}}function s(Y){if(typeof O.addEventListener!=D){O.addEventListener(\"load\",Y,false)}else{if(typeof j.addEventListener!=D){j.addEventListener(\"load\",Y,false)}else{if(typeof O.attachEvent!=D){i(O,\"onload\",Y)}else{if(typeof O.onload==\"function\"){var X=O.onload;O.onload=function(){X();Y()}}else{O.onload=Y}}}}}function h(){if(T){V()}else{H()}}function V(){var X=j.getElementsByTagName(\"body\")[0];var aa=C(r);aa.setAttribute(\"type\",q);var Z=X.appendChild(aa);if(Z){var Y=0;(function(){if(typeof Z.GetVariable!=D){var ab=Z.GetVariable(\"$version\");if(ab){ab=ab.split(\" \")[1].split(\",\");M.pv=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}else{if(Y<10){Y++;setTimeout(arguments.callee,10);return}}X.removeChild(aa);Z=null;H()})()}else{H()}}function H(){var ag=o.length;if(ag>0){for(var af=0;af<ag;af++){var Y=o[af].id;var ab=o[af].callbackFn;var aa={success:false,id:Y};if(M.pv[0]>0){var ae=c(Y);if(ae){if(F(o[af].swfVersion)&&!(M.wk&&M.wk<312)){w(Y,true);if(ab){aa.success=true;aa.ref=z(Y);ab(aa)}}else{if(o[af].expressInstall&&A()){var ai={};ai.data=o[af].expressInstall;ai.width=ae.getAttribute(\"width\")||\"0\";ai.height=ae.getAttribute(\"height\")||\"0\";if(ae.getAttribute(\"class\")){ai.styleclass=ae.getAttribute(\"class\")}if(ae.getAttribute(\"align\")){ai.align=ae.getAttribute(\"align\")}var ah={};var X=ae.getElementsByTagName(\"param\");var ac=X.length;for(var ad=0;ad<ac;ad++){if(X[ad].getAttribute(\"name\").toLowerCase()!=\"movie\"){ah[X[ad].getAttribute(\"name\")]=X[ad].getAttribute(\"value\")}}P(ai,ah,Y,ab)}else{p(ae);if(ab){ab(aa)}}}}}else{w(Y,true);if(ab){var Z=z(Y);if(Z&&typeof Z.SetVariable!=D){aa.success=true;aa.ref=Z}ab(aa)}}}}}function z(aa){var X=null;var Y=c(aa);if(Y&&Y.nodeName==\"OBJECT\"){if(typeof Y.SetVariable!=D){X=Y}else{var Z=Y.getElementsByTagName(r)[0];if(Z){X=Z}}}return X}function A(){return !a&&F(\"6.0.65\")&&(M.win||M.mac)&&!(M.wk&&M.wk<312)}function P(aa,ab,X,Z){a=true;E=Z||null;B={success:false,id:X};var ae=c(X);if(ae){if(ae.nodeName==\"OBJECT\"){l=g(ae);Q=null}else{l=ae;Q=X}aa.id=R;if(typeof aa.width==D||(!/%$/.test(aa.width)&&parseInt(aa.width,10)<310)){aa.width=\"310\"}if(typeof aa.height==D||(!/%$/.test(aa.height)&&parseInt(aa.height,10)<137)){aa.height=\"137\"}j.title=j.title.slice(0,47)+\" - Flash Player Installation\";var ad=M.ie&&M.win?(['Active'].concat('').join('X')):\"PlugIn\",ac=\"MMredirectURL=\"+O.location.toString().replace(/&/g,\"%26\")+\"&MMplayerType=\"+ad+\"&MMdoctitle=\"+j.title;if(typeof ab.flashvars!=D){ab.flashvars+=\"&\"+ac}else{ab.flashvars=ac}if(M.ie&&M.win&&ae.readyState!=4){var Y=C(\"div\");X+=\"SWFObjectNew\";Y.setAttribute(\"id\",X);ae.parentNode.insertBefore(Y,ae);ae.style.display=\"none\";(function(){if(ae.readyState==4){ae.parentNode.removeChild(ae)}else{setTimeout(arguments.callee,10)}})()}u(aa,ab,X)}}function p(Y){if(M.ie&&M.win&&Y.readyState!=4){var X=C(\"div\");Y.parentNode.insertBefore(X,Y);X.parentNode.replaceChild(g(Y),X);Y.style.display=\"none\";(function(){if(Y.readyState==4){Y.parentNode.removeChild(Y)}else{setTimeout(arguments.callee,10)}})()}else{Y.parentNode.replaceChild(g(Y),Y)}}function g(ab){var aa=C(\"div\");if(M.win&&M.ie){aa.innerHTML=ab.innerHTML}else{var Y=ab.getElementsByTagName(r)[0];if(Y){var ad=Y.childNodes;if(ad){var X=ad.length;for(var Z=0;Z<X;Z++){if(!(ad[Z].nodeType==1&&ad[Z].nodeName==\"PARAM\")&&!(ad[Z].nodeType==8)){aa.appendChild(ad[Z].cloneNode(true))}}}}}return aa}function u(ai,ag,Y){var X,aa=c(Y);if(M.wk&&M.wk<312){return X}if(aa){if(typeof ai.id==D){ai.id=Y}if(M.ie&&M.win){var ah=\"\";for(var ae in ai){if(ai[ae]!=Object.prototype[ae]){if(ae.toLowerCase()==\"data\"){ag.movie=ai[ae]}else{if(ae.toLowerCase()==\"styleclass\"){ah+=' class=\"'+ai[ae]+'\"'}else{if(ae.toLowerCase()!=\"classid\"){ah+=\" \"+ae+'=\"'+ai[ae]+'\"'}}}}}var af=\"\";for(var ad in ag){if(ag[ad]!=Object.prototype[ad]){af+='<param name=\"'+ad+'\" value=\"'+ag[ad]+'\" />'}}aa.outerHTML='<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"'+ah+\">\"+af+\"</object>\";N[N.length]=ai.id;X=c(ai.id)}else{var Z=C(r);Z.setAttribute(\"type\",q);for(var ac in ai){if(ai[ac]!=Object.prototype[ac]){if(ac.toLowerCase()==\"styleclass\"){Z.setAttribute(\"class\",ai[ac])}else{if(ac.toLowerCase()!=\"classid\"){Z.setAttribute(ac,ai[ac])}}}}for(var ab in ag){if(ag[ab]!=Object.prototype[ab]&&ab.toLowerCase()!=\"movie\"){e(Z,ab,ag[ab])}}aa.parentNode.replaceChild(Z,aa);X=Z}}return X}function e(Z,X,Y){var aa=C(\"param\");aa.setAttribute(\"name\",X);aa.setAttribute(\"value\",Y);Z.appendChild(aa)}function y(Y){var X=c(Y);if(X&&X.nodeName==\"OBJECT\"){if(M.ie&&M.win){X.style.display=\"none\";(function(){if(X.readyState==4){b(Y)}else{setTimeout(arguments.callee,10)}})()}else{X.parentNode.removeChild(X)}}}function b(Z){var Y=c(Z);if(Y){for(var X in Y){if(typeof Y[X]==\"function\"){Y[X]=null}}Y.parentNode.removeChild(Y)}}function c(Z){var X=null;try{X=j.getElementById(Z)}catch(Y){}return X}function C(X){return j.createElement(X)}function i(Z,X,Y){Z.attachEvent(X,Y);I[I.length]=[Z,X,Y]}function F(Z){var Y=M.pv,X=Z.split(\".\");X[0]=parseInt(X[0],10);X[1]=parseInt(X[1],10)||0;X[2]=parseInt(X[2],10)||0;return(Y[0]>X[0]||(Y[0]==X[0]&&Y[1]>X[1])||(Y[0]==X[0]&&Y[1]==X[1]&&Y[2]>=X[2]))?true:false}function v(ac,Y,ad,ab){if(M.ie&&M.mac){return}var aa=j.getElementsByTagName(\"head\")[0];if(!aa){return}var X=(ad&&typeof ad==\"string\")?ad:\"screen\";if(ab){n=null;G=null}if(!n||G!=X){var Z=C(\"style\");Z.setAttribute(\"type\",\"text/css\");Z.setAttribute(\"media\",X);n=aa.appendChild(Z);if(M.ie&&M.win&&typeof j.styleSheets!=D&&j.styleSheets.length>0){n=j.styleSheets[j.styleSheets.length-1]}G=X}if(M.ie&&M.win){if(n&&typeof n.addRule==r){n.addRule(ac,Y)}}else{if(n&&typeof j.createTextNode!=D){n.appendChild(j.createTextNode(ac+\" {\"+Y+\"}\"))}}}function w(Z,X){if(!m){return}var Y=X?\"visible\":\"hidden\";if(J&&c(Z)){c(Z).style.visibility=Y}else{v(\"#\"+Z,\"visibility:\"+Y)}}function L(Y){var Z=/[\\\\\\\"<>\\.;]/;var X=Z.exec(Y)!=null;return X&&typeof encodeURIComponent!=D?encodeURIComponent(Y):Y}var d=function(){if(M.ie&&M.win){window.attachEvent(\"onunload\",function(){var ac=I.length;for(var ab=0;ab<ac;ab++){I[ab][0].detachEvent(I[ab][1],I[ab][2])}var Z=N.length;for(var aa=0;aa<Z;aa++){y(N[aa])}for(var Y in M){M[Y]=null}M=null;for(var X in swfobject){swfobject[X]=null}swfobject=null})}}();return{registerObject:function(ab,X,aa,Z){if(M.w3&&ab&&X){var Y={};Y.id=ab;Y.swfVersion=X;Y.expressInstall=aa;Y.callbackFn=Z;o[o.length]=Y;w(ab,false)}else{if(Z){Z({success:false,id:ab})}}},getObjectById:function(X){if(M.w3){return z(X)}},embedSWF:function(ab,ah,ae,ag,Y,aa,Z,ad,af,ac){var X={success:false,id:ah};if(M.w3&&!(M.wk&&M.wk<312)&&ab&&ah&&ae&&ag&&Y){w(ah,false);K(function(){ae+=\"\";ag+=\"\";var aj={};if(af&&typeof af===r){for(var al in af){aj[al]=af[al]}}aj.data=ab;aj.width=ae;aj.height=ag;var am={};if(ad&&typeof ad===r){for(var ak in ad){am[ak]=ad[ak]}}if(Z&&typeof Z===r){for(var ai in Z){if(typeof am.flashvars!=D){am.flashvars+=\"&\"+ai+\"=\"+Z[ai]}else{am.flashvars=ai+\"=\"+Z[ai]}}}if(F(Y)){var an=u(aj,am,ah);if(aj.id==ah){w(ah,true)}X.success=true;X.ref=an}else{if(aa&&A()){aj.data=aa;P(aj,am,ah,ac);return}else{w(ah,true)}}if(ac){ac(X)}})}else{if(ac){ac(X)}}},switchOffAutoHideShow:function(){m=false},ua:M,getFlashPlayerVersion:function(){return{major:M.pv[0],minor:M.pv[1],release:M.pv[2]}},hasFlashPlayerVersion:F,createSWF:function(Z,Y,X){if(M.w3){return u(Z,Y,X)}else{return undefined}},showExpressInstall:function(Z,aa,X,Y){if(M.w3&&A()){P(Z,aa,X,Y)}},removeSWF:function(X){if(M.w3){y(X)}},createCSS:function(aa,Z,Y,X){if(M.w3){v(aa,Z,Y,X)}},addDomLoadEvent:K,addLoadEvent:s,getQueryParamValue:function(aa){var Z=j.location.search||j.location.hash;if(Z){if(/\\?/.test(Z)){Z=Z.split(\"?\")[1]}if(aa==null){return L(Z)}var Y=Z.split(\"&\");for(var X=0;X<Y.length;X++){if(Y[X].substring(0,Y[X].indexOf(\"=\"))==aa){return L(Y[X].substring((Y[X].indexOf(\"=\")+1)))}}}return\"\"},expressInstallCallback:function(){if(a){var X=c(R);if(X&&l){X.parentNode.replaceChild(l,X);if(Q){w(Q,true);if(M.ie&&M.win){l.style.display=\"block\"}}if(E){E(B)}}a=false}}}}();\n}\n// Copyright: Hiroshi Ichikawa <http://gimite.net/en/>\n// License: New BSD License\n// Reference: http://dev.w3.org/html5/websockets/\n// Reference: http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol\n\n(function() {\n  \n  if ('undefined' == typeof window || window.WebSocket) return;\n\n  var console = window.console;\n  if (!console || !console.log || !console.error) {\n    console = {log: function(){ }, error: function(){ }};\n  }\n  \n  if (!swfobject.hasFlashPlayerVersion(\"10.0.0\")) {\n    console.error(\"Flash Player >= 10.0.0 is required.\");\n    return;\n  }\n  if (location.protocol == \"file:\") {\n    console.error(\n      \"WARNING: web-socket-js doesn't work in file:///... URL \" +\n      \"unless you set Flash Security Settings properly. \" +\n      \"Open the page via Web server i.e. http://...\");\n  }\n\n  /**\n   * This class represents a faux web socket.\n   * @param {string} url\n   * @param {array or string} protocols\n   * @param {string} proxyHost\n   * @param {int} proxyPort\n   * @param {string} headers\n   */\n  WebSocket = function(url, protocols, proxyHost, proxyPort, headers) {\n    var self = this;\n    self.__id = WebSocket.__nextId++;\n    WebSocket.__instances[self.__id] = self;\n    self.readyState = WebSocket.CONNECTING;\n    self.bufferedAmount = 0;\n    self.__events = {};\n    if (!protocols) {\n      protocols = [];\n    } else if (typeof protocols == \"string\") {\n      protocols = [protocols];\n    }\n    // Uses setTimeout() to make sure __createFlash() runs after the caller sets ws.onopen etc.\n    // Otherwise, when onopen fires immediately, onopen is called before it is set.\n    setTimeout(function() {\n      WebSocket.__addTask(function() {\n        WebSocket.__flash.create(\n            self.__id, url, protocols, proxyHost || null, proxyPort || 0, headers || null);\n      });\n    }, 0);\n  };\n\n  /**\n   * Send data to the web socket.\n   * @param {string} data  The data to send to the socket.\n   * @return {boolean}  True for success, false for failure.\n   */\n  WebSocket.prototype.send = function(data) {\n    if (this.readyState == WebSocket.CONNECTING) {\n      throw \"INVALID_STATE_ERR: Web Socket connection has not been established\";\n    }\n    // We use encodeURIComponent() here, because FABridge doesn't work if\n    // the argument includes some characters. We don't use escape() here\n    // because of this:\n    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Functions#escape_and_unescape_Functions\n    // But it looks decodeURIComponent(encodeURIComponent(s)) doesn't\n    // preserve all Unicode characters either e.g. \"\\uffff\" in Firefox.\n    // Note by wtritch: Hopefully this will not be necessary using ExternalInterface.  Will require\n    // additional testing.\n    var result = WebSocket.__flash.send(this.__id, encodeURIComponent(data));\n    if (result < 0) { // success\n      return true;\n    } else {\n      this.bufferedAmount += result;\n      return false;\n    }\n  };\n\n  /**\n   * Close this web socket gracefully.\n   */\n  WebSocket.prototype.close = function() {\n    if (this.readyState == WebSocket.CLOSED || this.readyState == WebSocket.CLOSING) {\n      return;\n    }\n    this.readyState = WebSocket.CLOSING;\n    WebSocket.__flash.close(this.__id);\n  };\n\n  /**\n   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n   *\n   * @param {string} type\n   * @param {function} listener\n   * @param {boolean} useCapture\n   * @return void\n   */\n  WebSocket.prototype.addEventListener = function(type, listener, useCapture) {\n    if (!(type in this.__events)) {\n      this.__events[type] = [];\n    }\n    this.__events[type].push(listener);\n  };\n\n  /**\n   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n   *\n   * @param {string} type\n   * @param {function} listener\n   * @param {boolean} useCapture\n   * @return void\n   */\n  WebSocket.prototype.removeEventListener = function(type, listener, useCapture) {\n    if (!(type in this.__events)) return;\n    var events = this.__events[type];\n    for (var i = events.length - 1; i >= 0; --i) {\n      if (events[i] === listener) {\n        events.splice(i, 1);\n        break;\n      }\n    }\n  };\n\n  /**\n   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n   *\n   * @param {Event} event\n   * @return void\n   */\n  WebSocket.prototype.dispatchEvent = function(event) {\n    var events = this.__events[event.type] || [];\n    for (var i = 0; i < events.length; ++i) {\n      events[i](event);\n    }\n    var handler = this[\"on\" + event.type];\n    if (handler) handler(event);\n  };\n\n  /**\n   * Handles an event from Flash.\n   * @param {Object} flashEvent\n   */\n  WebSocket.prototype.__handleEvent = function(flashEvent) {\n    if (\"readyState\" in flashEvent) {\n      this.readyState = flashEvent.readyState;\n    }\n    if (\"protocol\" in flashEvent) {\n      this.protocol = flashEvent.protocol;\n    }\n    \n    var jsEvent;\n    if (flashEvent.type == \"open\" || flashEvent.type == \"error\") {\n      jsEvent = this.__createSimpleEvent(flashEvent.type);\n    } else if (flashEvent.type == \"close\") {\n      // TODO implement jsEvent.wasClean\n      jsEvent = this.__createSimpleEvent(\"close\");\n    } else if (flashEvent.type == \"message\") {\n      var data = decodeURIComponent(flashEvent.message);\n      jsEvent = this.__createMessageEvent(\"message\", data);\n    } else {\n      throw \"unknown event type: \" + flashEvent.type;\n    }\n    \n    this.dispatchEvent(jsEvent);\n  };\n  \n  WebSocket.prototype.__createSimpleEvent = function(type) {\n    if (document.createEvent && window.Event) {\n      var event = document.createEvent(\"Event\");\n      event.initEvent(type, false, false);\n      return event;\n    } else {\n      return {type: type, bubbles: false, cancelable: false};\n    }\n  };\n  \n  WebSocket.prototype.__createMessageEvent = function(type, data) {\n    if (document.createEvent && window.MessageEvent && !window.opera) {\n      var event = document.createEvent(\"MessageEvent\");\n      event.initMessageEvent(\"message\", false, false, data, null, null, window, null);\n      return event;\n    } else {\n      // IE and Opera, the latter one truncates the data parameter after any 0x00 bytes.\n      return {type: type, data: data, bubbles: false, cancelable: false};\n    }\n  };\n  \n  /**\n   * Define the WebSocket readyState enumeration.\n   */\n  WebSocket.CONNECTING = 0;\n  WebSocket.OPEN = 1;\n  WebSocket.CLOSING = 2;\n  WebSocket.CLOSED = 3;\n\n  WebSocket.__flash = null;\n  WebSocket.__instances = {};\n  WebSocket.__tasks = [];\n  WebSocket.__nextId = 0;\n  \n  /**\n   * Load a new flash security policy file.\n   * @param {string} url\n   */\n  WebSocket.loadFlashPolicyFile = function(url){\n    WebSocket.__addTask(function() {\n      WebSocket.__flash.loadManualPolicyFile(url);\n    });\n  };\n\n  /**\n   * Loads WebSocketMain.swf and creates WebSocketMain object in Flash.\n   */\n  WebSocket.__initialize = function() {\n    if (WebSocket.__flash) return;\n    \n    if (WebSocket.__swfLocation) {\n      // For backword compatibility.\n      window.WEB_SOCKET_SWF_LOCATION = WebSocket.__swfLocation;\n    }\n    if (!window.WEB_SOCKET_SWF_LOCATION) {\n      console.error(\"[WebSocket] set WEB_SOCKET_SWF_LOCATION to location of WebSocketMain.swf\");\n      return;\n    }\n    var container = document.createElement(\"div\");\n    container.id = \"webSocketContainer\";\n    // Hides Flash box. We cannot use display: none or visibility: hidden because it prevents\n    // Flash from loading at least in IE. So we move it out of the screen at (-100, -100).\n    // But this even doesn't work with Flash Lite (e.g. in Droid Incredible). So with Flash\n    // Lite, we put it at (0, 0). This shows 1x1 box visible at left-top corner but this is\n    // the best we can do as far as we know now.\n    container.style.position = \"absolute\";\n    if (WebSocket.__isFlashLite()) {\n      container.style.left = \"0px\";\n      container.style.top = \"0px\";\n    } else {\n      container.style.left = \"-100px\";\n      container.style.top = \"-100px\";\n    }\n    var holder = document.createElement(\"div\");\n    holder.id = \"webSocketFlash\";\n    container.appendChild(holder);\n    document.body.appendChild(container);\n    // See this article for hasPriority:\n    // http://help.adobe.com/en_US/as3/mobile/WS4bebcd66a74275c36cfb8137124318eebc6-7ffd.html\n    swfobject.embedSWF(\n      WEB_SOCKET_SWF_LOCATION,\n      \"webSocketFlash\",\n      \"1\" /* width */,\n      \"1\" /* height */,\n      \"10.0.0\" /* SWF version */,\n      null,\n      null,\n      {hasPriority: true, swliveconnect : true, allowScriptAccess: \"always\"},\n      null,\n      function(e) {\n        if (!e.success) {\n          console.error(\"[WebSocket] swfobject.embedSWF failed\");\n        }\n      });\n  };\n  \n  /**\n   * Called by Flash to notify JS that it's fully loaded and ready\n   * for communication.\n   */\n  WebSocket.__onFlashInitialized = function() {\n    // We need to set a timeout here to avoid round-trip calls\n    // to flash during the initialization process.\n    setTimeout(function() {\n      WebSocket.__flash = document.getElementById(\"webSocketFlash\");\n      WebSocket.__flash.setCallerUrl(location.href);\n      WebSocket.__flash.setDebug(!!window.WEB_SOCKET_DEBUG);\n      for (var i = 0; i < WebSocket.__tasks.length; ++i) {\n        WebSocket.__tasks[i]();\n      }\n      WebSocket.__tasks = [];\n    }, 0);\n  };\n  \n  /**\n   * Called by Flash to notify WebSockets events are fired.\n   */\n  WebSocket.__onFlashEvent = function() {\n    setTimeout(function() {\n      try {\n        // Gets events using receiveEvents() instead of getting it from event object\n        // of Flash event. This is to make sure to keep message order.\n        // It seems sometimes Flash events don't arrive in the same order as they are sent.\n        var events = WebSocket.__flash.receiveEvents();\n        for (var i = 0; i < events.length; ++i) {\n          WebSocket.__instances[events[i].webSocketId].__handleEvent(events[i]);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }, 0);\n    return true;\n  };\n  \n  // Called by Flash.\n  WebSocket.__log = function(message) {\n    console.log(decodeURIComponent(message));\n  };\n  \n  // Called by Flash.\n  WebSocket.__error = function(message) {\n    console.error(decodeURIComponent(message));\n  };\n  \n  WebSocket.__addTask = function(task) {\n    if (WebSocket.__flash) {\n      task();\n    } else {\n      WebSocket.__tasks.push(task);\n    }\n  };\n  \n  /**\n   * Test if the browser is running flash lite.\n   * @return {boolean} True if flash lite is running, false otherwise.\n   */\n  WebSocket.__isFlashLite = function() {\n    if (!window.navigator || !window.navigator.mimeTypes) {\n      return false;\n    }\n    var mimeType = window.navigator.mimeTypes[\"application/x-shockwave-flash\"];\n    if (!mimeType || !mimeType.enabledPlugin || !mimeType.enabledPlugin.filename) {\n      return false;\n    }\n    return mimeType.enabledPlugin.filename.match(/flashlite/i) ? true : false;\n  };\n  \n  if (!window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION) {\n    if (window.addEventListener) {\n      window.addEventListener(\"load\", function(){\n        WebSocket.__initialize();\n      }, false);\n    } else {\n      window.attachEvent(\"onload\", function(){\n        WebSocket.__initialize();\n      });\n    }\n  }\n  \n})();\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   *\n   * @api public\n   */\n\n  exports.XHR = XHR;\n\n  /**\n   * XHR constructor\n   *\n   * @costructor\n   * @api public\n   */\n\n  function XHR (socket) {\n    if (!socket) return;\n\n    io.Transport.apply(this, arguments);\n    this.sendBuffer = [];\n  };\n\n  /**\n   * Inherits from Transport.\n   */\n\n  io.util.inherit(XHR, io.Transport);\n\n  /**\n   * Establish a connection\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  XHR.prototype.open = function () {\n    this.socket.setBuffer(false);\n    this.onOpen();\n    this.get();\n\n    // we need to make sure the request succeeds since we have no indication\n    // whether the request opened or not until it succeeded.\n    this.setCloseTimeout();\n\n    return this;\n  };\n\n  /**\n   * Check if we need to send data to the Socket.IO server, if we have data in our\n   * buffer we encode it and forward it to the `post` method.\n   *\n   * @api private\n   */\n\n  XHR.prototype.payload = function (payload) {\n    var msgs = [];\n\n    for (var i = 0, l = payload.length; i < l; i++) {\n      msgs.push(io.parser.encodePacket(payload[i]));\n    }\n\n    this.send(io.parser.encodePayload(msgs));\n  };\n\n  /**\n   * Send data to the Socket.IO server.\n   *\n   * @param data The message\n   * @returns {Transport}\n   * @api public\n   */\n\n  XHR.prototype.send = function (data) {\n    this.post(data);\n    return this;\n  };\n\n  /**\n   * Posts a encoded message to the Socket.IO server.\n   *\n   * @param {String} data A encoded message.\n   * @api private\n   */\n\n  function empty () { };\n\n  XHR.prototype.post = function (data) {\n    var self = this;\n    this.socket.setBuffer(true);\n\n    function stateChange () {\n      if (this.readyState == 4) {\n        this.onreadystatechange = empty;\n        self.posting = false;\n\n        if (this.status == 200){\n          self.socket.setBuffer(false);\n        } else {\n          self.onClose();\n        }\n      }\n    }\n\n    function onload () {\n      this.onload = empty;\n      self.socket.setBuffer(false);\n    };\n\n    this.sendXHR = this.request('POST');\n\n    if (global.XDomainRequest && this.sendXHR instanceof XDomainRequest) {\n      this.sendXHR.onload = this.sendXHR.onerror = onload;\n    } else {\n      this.sendXHR.onreadystatechange = stateChange;\n    }\n\n    this.sendXHR.send(data);\n  };\n\n  /**\n   * Disconnects the established `XHR` connection.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  XHR.prototype.close = function () {\n    this.onClose();\n    return this;\n  };\n\n  /**\n   * Generates a configured XHR request\n   *\n   * @param {String} url The url that needs to be requested.\n   * @param {String} method The method the request should use.\n   * @returns {XMLHttpRequest}\n   * @api private\n   */\n\n  XHR.prototype.request = function (method) {\n    var req = io.util.request(this.socket.isXDomain())\n      , query = io.util.query(this.socket.options.query, 't=' + +new Date);\n\n    req.open(method || 'GET', this.prepareUrl() + query, true);\n\n    if (method == 'POST') {\n      try {\n        if (req.setRequestHeader) {\n          req.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n        } else {\n          // XDomainRequest\n          req.contentType = 'text/plain';\n        }\n      } catch (e) {}\n    }\n\n    return req;\n  };\n\n  /**\n   * Returns the scheme to use for the transport URLs.\n   *\n   * @api private\n   */\n\n  XHR.prototype.scheme = function () {\n    return this.socket.options.secure ? 'https' : 'http';\n  };\n\n  /**\n   * Check if the XHR transports are supported\n   *\n   * @param {Boolean} xdomain Check if we support cross domain requests.\n   * @returns {Boolean}\n   * @api public\n   */\n\n  XHR.check = function (socket, xdomain) {\n    try {\n      var request = io.util.request(xdomain),\n          usesXDomReq = (global.XDomainRequest && request instanceof XDomainRequest),\n          socketProtocol = (socket && socket.options && socket.options.secure ? 'https:' : 'http:'),\n          isXProtocol = (global.location && socketProtocol != global.location.protocol);\n      if (request && !(usesXDomReq && isXProtocol)) {\n        return true;\n      }\n    } catch(e) {}\n\n    return false;\n  };\n\n  /**\n   * Check if the XHR transport supports cross domain requests.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  XHR.xdomainCheck = function (socket) {\n    return XHR.check(socket, true);\n  };\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.htmlfile = HTMLFile;\n\n  /**\n   * The HTMLFile transport creates a `forever iframe` based transport\n   * for Internet Explorer. Regular forever iframe implementations will \n   * continuously trigger the browsers buzy indicators. If the forever iframe\n   * is created inside a `htmlfile` these indicators will not be trigged.\n   *\n   * @constructor\n   * @extends {io.Transport.XHR}\n   * @api public\n   */\n\n  function HTMLFile (socket) {\n    io.Transport.XHR.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from XHR transport.\n   */\n\n  io.util.inherit(HTMLFile, io.Transport.XHR);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  HTMLFile.prototype.name = 'htmlfile';\n\n  /**\n   * Creates a new Ac...eX `htmlfile` with a forever loading iframe\n   * that can be used to listen to messages. Inside the generated\n   * `htmlfile` a reference will be made to the HTMLFile transport.\n   *\n   * @api private\n   */\n\n  HTMLFile.prototype.get = function () {\n    this.doc = new window[(['Active'].concat('Object').join('X'))]('htmlfile');\n    this.doc.open();\n    this.doc.write('<html></html>');\n    this.doc.close();\n    this.doc.parentWindow.s = this;\n\n    var iframeC = this.doc.createElement('div');\n    iframeC.className = 'socketio';\n\n    this.doc.body.appendChild(iframeC);\n    this.iframe = this.doc.createElement('iframe');\n\n    iframeC.appendChild(this.iframe);\n\n    var self = this\n      , query = io.util.query(this.socket.options.query, 't='+ +new Date);\n\n    this.iframe.src = this.prepareUrl() + query;\n\n    io.util.on(window, 'unload', function () {\n      self.destroy();\n    });\n  };\n\n  /**\n   * The Socket.IO server will write script tags inside the forever\n   * iframe, this function will be used as callback for the incoming\n   * information.\n   *\n   * @param {String} data The message\n   * @param {document} doc Reference to the context\n   * @api private\n   */\n\n  HTMLFile.prototype._ = function (data, doc) {\n    // unescape all forward slashes. see GH-1251\n    data = data.replace(/\\\\\\//g, '/');\n    this.onData(data);\n    try {\n      var script = doc.getElementsByTagName('script')[0];\n      script.parentNode.removeChild(script);\n    } catch (e) { }\n  };\n\n  /**\n   * Destroy the established connection, iframe and `htmlfile`.\n   * And calls the `CollectGarbage` function of Internet Explorer\n   * to release the memory.\n   *\n   * @api private\n   */\n\n  HTMLFile.prototype.destroy = function () {\n    if (this.iframe){\n      try {\n        this.iframe.src = 'about:blank';\n      } catch(e){}\n\n      this.doc = null;\n      this.iframe.parentNode.removeChild(this.iframe);\n      this.iframe = null;\n\n      CollectGarbage();\n    }\n  };\n\n  /**\n   * Disconnects the established connection.\n   *\n   * @returns {Transport} Chaining.\n   * @api public\n   */\n\n  HTMLFile.prototype.close = function () {\n    this.destroy();\n    return io.Transport.XHR.prototype.close.call(this);\n  };\n\n  /**\n   * Checks if the browser supports this transport. The browser\n   * must have an `Ac...eXObject` implementation.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  HTMLFile.check = function (socket) {\n    if (typeof window != \"undefined\" && (['Active'].concat('Object').join('X')) in window){\n      try {\n        var a = new window[(['Active'].concat('Object').join('X'))]('htmlfile');\n        return a && io.Transport.XHR.check(socket);\n      } catch(e){}\n    }\n    return false;\n  };\n\n  /**\n   * Check if cross domain requests are supported.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  HTMLFile.xdomainCheck = function () {\n    // we can probably do handling for sub-domains, we should\n    // test that it's cross domain but a subdomain here\n    return false;\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('htmlfile');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports['xhr-polling'] = XHRPolling;\n\n  /**\n   * The XHR-polling transport uses long polling XHR requests to create a\n   * \"persistent\" connection with the server.\n   *\n   * @constructor\n   * @api public\n   */\n\n  function XHRPolling () {\n    io.Transport.XHR.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from XHR transport.\n   */\n\n  io.util.inherit(XHRPolling, io.Transport.XHR);\n\n  /**\n   * Merge the properties from XHR transport\n   */\n\n  io.util.merge(XHRPolling, io.Transport.XHR);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  XHRPolling.prototype.name = 'xhr-polling';\n\n  /**\n   * Indicates whether heartbeats is enabled for this transport\n   *\n   * @api private\n   */\n\n  XHRPolling.prototype.heartbeats = function () {\n    return false;\n  };\n\n  /** \n   * Establish a connection, for iPhone and Android this will be done once the page\n   * is loaded.\n   *\n   * @returns {Transport} Chaining.\n   * @api public\n   */\n\n  XHRPolling.prototype.open = function () {\n    var self = this;\n\n    io.Transport.XHR.prototype.open.call(self);\n    return false;\n  };\n\n  /**\n   * Starts a XHR request to wait for incoming messages.\n   *\n   * @api private\n   */\n\n  function empty () {};\n\n  XHRPolling.prototype.get = function () {\n    if (!this.isOpen) return;\n\n    var self = this;\n\n    function stateChange () {\n      if (this.readyState == 4) {\n        this.onreadystatechange = empty;\n\n        if (this.status == 200) {\n          self.onData(this.responseText);\n          self.get();\n        } else {\n          self.onClose();\n        }\n      }\n    };\n\n    function onload () {\n      this.onload = empty;\n      this.onerror = empty;\n      self.retryCounter = 1;\n      self.onData(this.responseText);\n      self.get();\n    };\n\n    function onerror () {\n      self.retryCounter ++;\n      if(!self.retryCounter || self.retryCounter > 3) {\n        self.onClose();  \n      } else {\n        self.get();\n      }\n    };\n\n    this.xhr = this.request();\n\n    if (global.XDomainRequest && this.xhr instanceof XDomainRequest) {\n      this.xhr.onload = onload;\n      this.xhr.onerror = onerror;\n    } else {\n      this.xhr.onreadystatechange = stateChange;\n    }\n\n    this.xhr.send(null);\n  };\n\n  /**\n   * Handle the unclean close behavior.\n   *\n   * @api private\n   */\n\n  XHRPolling.prototype.onClose = function () {\n    io.Transport.XHR.prototype.onClose.call(this);\n\n    if (this.xhr) {\n      this.xhr.onreadystatechange = this.xhr.onload = this.xhr.onerror = empty;\n      try {\n        this.xhr.abort();\n      } catch(e){}\n      this.xhr = null;\n    }\n  };\n\n  /**\n   * Webkit based browsers show a infinit spinner when you start a XHR request\n   * before the browsers onload event is called so we need to defer opening of\n   * the transport until the onload event is called. Wrapping the cb in our\n   * defer method solve this.\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  XHRPolling.prototype.ready = function (socket, fn) {\n    var self = this;\n\n    io.util.defer(function () {\n      fn.call(self);\n    });\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('xhr-polling');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n  /**\n   * There is a way to hide the loading indicator in Firefox. If you create and\n   * remove a iframe it will stop showing the current loading indicator.\n   * Unfortunately we can't feature detect that and UA sniffing is evil.\n   *\n   * @api private\n   */\n\n  var indicator = global.document && \"MozAppearance\" in\n    global.document.documentElement.style;\n\n  /**\n   * Expose constructor.\n   */\n\n  exports['jsonp-polling'] = JSONPPolling;\n\n  /**\n   * The JSONP transport creates an persistent connection by dynamically\n   * inserting a script tag in the page. This script tag will receive the\n   * information of the Socket.IO server. When new information is received\n   * it creates a new script tag for the new data stream.\n   *\n   * @constructor\n   * @extends {io.Transport.xhr-polling}\n   * @api public\n   */\n\n  function JSONPPolling (socket) {\n    io.Transport['xhr-polling'].apply(this, arguments);\n\n    this.index = io.j.length;\n\n    var self = this;\n\n    io.j.push(function (msg) {\n      self._(msg);\n    });\n  };\n\n  /**\n   * Inherits from XHR polling transport.\n   */\n\n  io.util.inherit(JSONPPolling, io.Transport['xhr-polling']);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  JSONPPolling.prototype.name = 'jsonp-polling';\n\n  /**\n   * Posts a encoded message to the Socket.IO server using an iframe.\n   * The iframe is used because script tags can create POST based requests.\n   * The iframe is positioned outside of the view so the user does not\n   * notice it's existence.\n   *\n   * @param {String} data A encoded message.\n   * @api private\n   */\n\n  JSONPPolling.prototype.post = function (data) {\n    var self = this\n      , query = io.util.query(\n             this.socket.options.query\n          , 't='+ (+new Date) + '&i=' + this.index\n        );\n\n    if (!this.form) {\n      var form = document.createElement('form')\n        , area = document.createElement('textarea')\n        , id = this.iframeId = 'socketio_iframe_' + this.index\n        , iframe;\n\n      form.className = 'socketio';\n      form.style.position = 'absolute';\n      form.style.top = '0px';\n      form.style.left = '0px';\n      form.style.display = 'none';\n      form.target = id;\n      form.method = 'POST';\n      form.setAttribute('accept-charset', 'utf-8');\n      area.name = 'd';\n      form.appendChild(area);\n      document.body.appendChild(form);\n\n      this.form = form;\n      this.area = area;\n    }\n\n    this.form.action = this.prepareUrl() + query;\n\n    function complete () {\n      initIframe();\n      self.socket.setBuffer(false);\n    };\n\n    function initIframe () {\n      if (self.iframe) {\n        self.form.removeChild(self.iframe);\n      }\n\n      try {\n        // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n        iframe = document.createElement('<iframe name=\"'+ self.iframeId +'\">');\n      } catch (e) {\n        iframe = document.createElement('iframe');\n        iframe.name = self.iframeId;\n      }\n\n      iframe.id = self.iframeId;\n\n      self.form.appendChild(iframe);\n      self.iframe = iframe;\n    };\n\n    initIframe();\n\n    // we temporarily stringify until we figure out how to prevent\n    // browsers from turning `\\n` into `\\r\\n` in form inputs\n    this.area.value = io.JSON.stringify(data);\n\n    try {\n      this.form.submit();\n    } catch(e) {}\n\n    if (this.iframe.attachEvent) {\n      iframe.onreadystatechange = function () {\n        if (self.iframe.readyState == 'complete') {\n          complete();\n        }\n      };\n    } else {\n      this.iframe.onload = complete;\n    }\n\n    this.socket.setBuffer(true);\n  };\n\n  /**\n   * Creates a new JSONP poll that can be used to listen\n   * for messages from the Socket.IO server.\n   *\n   * @api private\n   */\n\n  JSONPPolling.prototype.get = function () {\n    var self = this\n      , script = document.createElement('script')\n      , query = io.util.query(\n             this.socket.options.query\n          , 't='+ (+new Date) + '&i=' + this.index\n        );\n\n    if (this.script) {\n      this.script.parentNode.removeChild(this.script);\n      this.script = null;\n    }\n\n    script.async = true;\n    script.src = this.prepareUrl() + query;\n    script.onerror = function () {\n      self.onClose();\n    };\n\n    var insertAt = document.getElementsByTagName('script')[0];\n    insertAt.parentNode.insertBefore(script, insertAt);\n    this.script = script;\n\n    if (indicator) {\n      setTimeout(function () {\n        var iframe = document.createElement('iframe');\n        document.body.appendChild(iframe);\n        document.body.removeChild(iframe);\n      }, 100);\n    }\n  };\n\n  /**\n   * Callback function for the incoming message stream from the Socket.IO server.\n   *\n   * @param {String} data The message\n   * @api private\n   */\n\n  JSONPPolling.prototype._ = function (msg) {\n    this.onData(msg);\n    if (this.isOpen) {\n      this.get();\n    }\n    return this;\n  };\n\n  /**\n   * The indicator hack only works after onload\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  JSONPPolling.prototype.ready = function (socket, fn) {\n    var self = this;\n    if (!indicator) return fn.call(this);\n\n    io.util.load(function () {\n      fn.call(self);\n    });\n  };\n\n  /**\n   * Checks if browser supports this transport.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  JSONPPolling.check = function () {\n    return 'document' in global;\n  };\n\n  /**\n   * Check if cross domain requests are supported\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  JSONPPolling.xdomainCheck = function () {\n    return true;\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('jsonp-polling');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n\nif (typeof define === \"function\" && define.amd) {\n  define([], function () { return io; });\n}\n})();\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/socket.io-client/dist/socket.io.js\n ** module id = 24\n ** module chunks = 0\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 25\n ** module chunks = 0\n **/"],"sourceRoot":""}
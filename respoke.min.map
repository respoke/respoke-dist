{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///build/respoke.min.js","webpack:///webpack/bootstrap a5d7abf450381a7b8463","webpack:///./index.js","webpack:///./respoke/respoke.js","webpack:///./~/loglevel/lib/loglevel.js","webpack:///./respoke/deps/adapter.js","webpack:///./respoke/event.js","webpack:///./respoke/class.js","webpack:///./~/q/q.js","webpack:///./respoke/client.js","webpack:///./respoke/connection.js","webpack:///./respoke/endpoint.js","webpack:///./respoke/textMessage.js","webpack:///./respoke/signalingMessage.js","webpack:///./respoke/group.js","webpack:///./respoke/signalingChannel.js","webpack:///./~/socket.io-client/dist/socket.io.js","webpack:///(webpack)/buildin/module.js","webpack:///./~/url-template/lib/url-template.js","webpack:///./respoke/directConnection.js","webpack:///./respoke/peerConnection.js","webpack:///./~/statechart/lib/statechart.js","webpack:///./respoke/callState.js","webpack:///./respoke/call.js","webpack:///./respoke/localMedia.js","webpack:///./respoke/remoteMedia.js","webpack:///./respoke/conference.js"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","global","log","setLevel","levels","WARN","originalFactory","methodFactory","logMethodFactory","methodName","logLevel","logMethod","errorReporter","message","args","Array","prototype","slice","arguments","reporterMessage","join","unshift","apply","EventEmitter","respoke","ridiculous","buildNumber","streams","Q","longStackSupport","stackJumpLimit","longStackJumpLimit","stopUnhandledRejectionTracking","instances","needsChromeExtension","window","chrome","opera","navigator","webkitGetUserMedia","needsFirefoxExtension","webrtcDetectedBrowser","hasChromeExtension","hasFirefoxExtension","chooseDesktopMedia","warn","isNwjs","gui","process","nwDispatcher","requireNwGui","Screen","Init","data","callback","mediaSources","source","sourceId","type","extEvent","evt","document","createEvent","initCustomEvent","version","Class","Client","Connection","Endpoint","TextMessage","SignalingMessage","Group","SignalingChannel","DirectConnection","PeerConnection","CallState","Call","LocalMedia","RemoteMedia","Conference","chromeScreenSharingExtensionReady","detail","available","params","Error","sourceIdListener","screenSourceId","removeEventListener","dispatchEvent","addEventListener","fire","info","connect","client","getClient","undefined","debug","stack","createClient","instanceId","callOnce","func","called","makeGUID","chars","split","uuid","rnd","r","i","Math","random","handlePromise","promise","onSuccess","onError","returnUndef","done","hasUserMedia","getUserMedia","mozGetUserMedia","Function","hasRTCPeerConnection","RTCPeerConnection","webkitRTCPeerConnection","mozRTCPeerConnection","hasWebsocket","WebSocket","webkitWebSocket","MozWebSocket","hasScreenShare","clone","JSON","parse","stringify","isEqual","a","b","aKeys","hasOwnProperty","splice","length","Object","keys","sdpStreamCount","sdp","matches","resolvedMatches","match","forEach","line","sdpHasAudio","indexOf","sdpHasVideo","sdpHasDataChannel","sdpHasSendOnly","sdpHasReceiveOnly","constraintsHasAudio","constraints","audio","constraintsHasVideo","video","constraintsHasScreenShare","mandatory","chromeMediaSource","mediaSource","convertConstraints","defaults","queueFactory","queue","trigger","action","safeAction","item","err","error","push","getScreenShareConstraints","screenConstraint","optional","isArray","maxWidth","maxHeight","thing","googTemporalLayeredScreencast","getScreenShareMedia","deferred","defer","criteria","localMedia","element","start","resolve","reject","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","definition","self","noop","undefinedType","realMethod","console","bindMethod","obj","method","bind","e","enableLoggingWhenConsoleArrives","level","replaceLoggingMethods","logMethods","persistLevelIfPossible","levelNum","levelName","toUpperCase","localStorage","ignore","cookie","loadPersistedLevel","storedLevel","exec","TRACE","DEBUG","INFO","ERROR","SILENT","enableAll","disableAll","_log","noConflict","attachMediaStream","reattachMediaStream","webrtcDetectedVersion","trace","text","substring","performance","now","toFixed","maybeFixConfiguration","pcConfig","iceServers","url","urls","parseInt","userAgent","pcConstraints","RTCSessionDescription","mozRTCSessionDescription","RTCIceCandidate","mozRTCIceCandidate","createIceServer","username","password","iceServer","urlParts","turnUrlParts","credential","createIceServers","stream","mozSrcObject","setTimeout","play","to","from","result","srcObject","src","URL","createObjectURL","respokeClass","that","className","eventList","once","eventType","listener","isInternal","string","toString","listen","invalidEventType","invalidListener","fn","isNotAlreadyAdded","map","count","toRemove","name","target","listenerBuilder","hasListeners","every","eachListener","copyParam","bootstrap","ses","ok","makeQ","hasStacks","qStartingLine","captureLine","qFileName","nextTick","head","task","next","tail","flushing","requestTick","isNodeJS","laterQueue","flush","domain","enter","runSingle","pop","exit","setImmediate","MessageChannel","channel","port1","onmessage","requestPortTick","port2","postMessage","runAfter","uncurryThis","f","array_slice","array_reduce","reduce","basis","index","TypeError","array_indexOf","value","array_map","thisp","collect","object_create","create","Type","object_hasOwnProperty","object_keys","object","key","object_toString","isObject","isStopIteration","exception","QReturnValue","ReturnValue","STACK_JUMP_SEPARATOR","makeStackTraceLong","stacks","concatedStacks","filterStackString","stackString","lines","desiredLines","isInternalFrame","isNodeFrame","stackLine","getFileNameAndLineNumber","attempt1","Number","attempt2","attempt3","fileNameAndLineNumber","fileName","lineNumber","qEndingLine","firstLine","deprecate","alternative","Promise","isPromiseAlike","coerce","fulfill","env","Q_DEBUG","messages","progressListeners","resolvedPromise","promiseDispatch","op","operands","valueOf","nearerValue","nearer","isPromise","inspect","state","become","newPromise","reason","notify","progress","progressListener","makeNodeResolver","resolver","race","all","passByCopy","x","y","spread","answerPs","len","then","makePromise","descriptor","fallback","inspected","fulfilled","rejected","progressed","_fulfilled","_rejected","newException","_progressed","newValue","threw","onerror","tap","fcall","thenResolve","when","thenReject","isPending","isFulfilled","isRejected","unhandledReasons","unhandledRejections","reportedUnhandledRejections","trackUnhandledRejections","resetUnhandledRejections","trackRejection","emit","untrackRejection","at","atReport","getUnhandledReasons","rejection","get","set","rhs","delete","post","master","isDef","dispatch","array","async","makeGenerator","continuer","verb","arg","StopIteration","generator","errback","spawn","_return","promised","del","mapply","send","mcall","invoke","fapply","fbind","fbound","concat","promises","pendingCount","snapshot","any","prev","current","onFulfilled","onRejected","onProgress","allResolved","allSettled","regardless","fail","fin","onUnhandledError","timeout","ms","timeoutId","code","clearTimeout","delay","nfapply","nodeArgs","nfcall","nfbind","denodeify","baseArgs","nbind","bound","nmapply","npost","nsend","nmcall","ninvoke","nodeify","nodeback","connectTries","host","location","hostname","port","clientSettings","appId","baseURL","developmentMode","token","resolveEndpointPresence","groups","endpoints","calls","signalingChannel","presence","getPresence","saveParameters","eachParam","enableCallDebugReport","connectTimeoutMillis","reconnect","retVal","endpointId","actuallyConnect","successHandler","open","authenticate","setPresence","onCall","onDirectConnection","onJoin","onLeave","onMessage","onConnect","onDisconnect","hangup","signal","onReconnect","errorHandler","disconnect","verifyConnected","leaveGroups","eachGroup","group","isJoined","leave","close","finallyHandler","sendPresence","getCall","methods","screenshare","did","web","sip","conference","callParams","fromType","switchType","findCall","one","remoteEndpoint","caller","callerId","conferenceId","toType","number","uri","addCall","removeCall","setOnline","setOffline","sendMessage","endpoint","getEndpoint","skipPresence","joinConference","recipient","signalOffer","signalParams","signalType","sendSDP","signalAnswer","sessionId","signalConnected","connectionId","sendConnected","signalModify","sendModify","signalCandidate","sendCandidate","signalHangup","sendHangup","signalReport","report","sendReport","startScreenShare","startCall","startAudioCall","startVideoCall","startPhoneCall","startSIPCall","trunk","user","isConnected","joinGroup","groupList","getGroup","addGroup","addMember","connection","getConnection","newGroup","leaveHandler","endpointThatLeft","groupConnectionCount","eachEndpoint","ept","getGroups","grp","skipCreate","registerPresence","endpointList","onPresence","endpointsToSearch","connections","getEndpoints","getConferenceParticipants","ccSelf","startDirectConnection","directConnection","disconnectHandler","resolvePresence","hasAudio","addAudio","sendOnly","screenConstraints","con","needDirectConnection","offerOptions","OfferToReceiveAudio","directConnectionHandler","closeHandler","presenceList","options","idList","sort","sorter","indexA","indexB","eachConnection","conn","joinedGroup","leftGroup","rawMessage","header","originalRecipient","toOriginal","fromConnection","timestamp","body","toConnection","requestConnectionReply","required","allowed","fromEndpoint","eachAttr","attr","cacheIsValid","clearConnections","validateConnection","validateMembership","leaveGroup","removeMember","absent","skipEvent","publish","getMembers","getGroupMembers","list","eachMember","io","template","sdkHeaderValue","billingSuspensionErrorMessage","suspensionErrorMessage","Date","getTime","PendingRequests","contents","counter","add","remove","reset","socket","presenceRegistered","pendingRequests","reconnectTimeout","maxReconnectTimeout","bodySizeLimit","appToken","xhr","XMLHttpRequest","routingMethods","handlerQueue","errors",400,401,403,404,409,429,500,"connected","isConnecting","connecting","isSendingReport","tokenPromise","getToken","newToken","doOpen","path","httpMethod","parameters","ttl","response","statusCode","tokenId","errorMessage","isBillingSuspensionUnauthorizedResponse","isSuspensionUnauthorizedResponse","buildResponseError","wsCall","urlParams","removeAllListeners","show","status","removeConferenceParticipant","destroyConference","participants","par","toRun","saveDeferred","actualJoinGroup","needsToRun","requestJoinsForGroupQueue","ep","eachId","sendACK","sendSignal","signalId","ackedSignalType","finalCandidates","iceCandidates","debugData","firstUpper","str","routeSignal","doOffer","doConnected","doModify","doAnswer","doIceCandidates","doBye","doUnknown","addHandler","on","handler","onPubSub","groupMessage","presenceMessage","generateConnectHandler","addEachHandlerType","category","addEachHandler","capabilities","iceFinalCandidates","res","doReconnect","iterGroups","catch","finHandler","errHandler","pieces","protocol","connectParams","connect timeout","force new connection","sync disconnect on unload","secure","query","connectFailedHandler","signalHandler","knownSignals","pendingRequest","getTurnCredentials","creds","uris","saveTurnUri","cred","logRequest","request","bodyLength","encodeURI","toLowerCase","expand","tries","durationMillis","handleResponse","thisHandler","sendWebsocketRequest","failWebsocketRequest","headers","App-Token","Respoke-SDK","paramString","makeParamString","setRequestHeader","onreadystatechange","limit","unit","readyState","getAllResponseHeaders","getResponseHeader","details","strings","formatParam","xhrResponse","pairs","pair","val","requestId","__WEBPACK_AMD_DEFINE_ARRAY__","transports","j","sockets","util","parseUri","uuri","uniqueUri","merge","Socket","of","re","parts","base","addition","chunkQuery","components","part","qs","l","kv","pageLoaded","load","event","capture","attachEvent","xdomain","XDomainRequest","ua","hasCORS","webkit","importScripts","additional","deep","lastseen","seen","depth","prop","mixin","ctor","ctor2","inherit","intersect","arr","arr2","ret","longest","shortest","o","toArray","enu","withCredentials","test","iDevice","$events","addListener","removeListener","pos","listeners","parent","nativeJSON","n","date","d","isFinite","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","cx","escapable","gap","indent","meta","\b","\t","\n","\f","\r","\"","\\","rep","quote","lastIndex","replace","charCodeAt","holder","k","v","mind","partial","String","replacer","space","reviver","walk","eval","SyntaxError","parser","packets","reasons","advice","encodePacket","packet","ack","adv","ev","ackId","encoded","encodePayload","decoded","regexp","decodePacket","opts","decodePayload","charAt","substr","Transport","sessid","heartbeats","onData","clearCloseTimeout","reconnecting","setCloseTimeout","msgs","onPacket","setHeartbeatTimeout","onHeartbeat","isOpen","closeTimeout","clearTimeouts","reopenTimeout","heartbeat","onOpen","onClose","prepareUrl","scheme","resource","ready","try multiple transports","reconnection delay","reconnection limit","Infinity","reopen delay","max reconnection attempts","auto connect","flash policy port","manualFlush","namespaces","buffer","doBuffer","isXDomain","disconnectSync","SocketNamespace","nsp","$emit","empty","handshake","complete","insertAt","getElementsByTagName","script","createElement","parentNode","insertBefore","removeChild","responseText","getTransport","override","transport","check","xdomainCheck","sessionid","sid","heartbeatTimeout","origTransports","connectTimeoutTimer","remaining","heartbeatTimeoutTimer","setBuffer","flushBuffer","payload","wasConnected","wasConnecting","reconnectionAttempts","reconnectionDelay","maxAttempts","tryMultiple","reconnectionTimer","maybeReconnect","redoTransports","flags","json","Flag","ackPackets","acks","lastArg","namespace","websocket","WS","onopen","onclose","flashsocket","Flashsocket","__addTask","__tasks","init","WEB_SOCKET_SWF_LOCATION","loadFlashPolicyFile","__initialize","swfobject","getFlashPlayerVersion","major","WEB_SOCKET_DISABLE_AUTO_INITIALIZATION","D","S","W","q","R","O","t","T","U","h","N","I","E","B","J","G","M","aa","getElementById","ah","Y","platform","ae","ac","af","parseFloat","X","ag","ab","plugins","description","mimeTypes","enabledPlugin","ad","GetVariable","Z","w3","pv","wk","ie","win","mac","detachEvent","callee","top","documentElement","doScroll","s","appendChild","C","K","onload","V","H","setAttribute","callbackFn","success","F","swfVersion","w","ref","z","expressInstall","A","ai","width","getAttribute","height","styleclass","align","P","SetVariable","nodeName","g","title","flashvars","style","display","u","replaceChild","innerHTML","childNodes","nodeType","cloneNode","movie","outerHTML","styleSheets","addRule","createTextNode","visibility","L","encodeURIComponent","registerObject","getObjectById","embedSWF","aj","al","am","ak","an","switchOffAutoHideShow","minor","release","hasFlashPlayerVersion","createSWF","showExpressInstall","removeSWF","createCSS","addDomLoadEvent","addLoadEvent","getQueryParamValue","search","hash","expressInstallCallback","protocols","proxyHost","proxyPort","__id","__nextId","__instances","CONNECTING","bufferedAmount","__events","__flash","CLOSED","CLOSING","useCapture","events","__handleEvent","flashEvent","jsEvent","__createSimpleEvent","decodeURIComponent","__createMessageEvent","Event","initEvent","bubbles","cancelable","MessageEvent","initMessageEvent","OPEN","loadManualPolicyFile","__swfLocation","container","position","__isFlashLite","left","hasPriority","swliveconnect","allowScriptAccess","__onFlashInitialized","setCallerUrl","href","setDebug","WEB_SOCKET_DEBUG","__onFlashEvent","receiveEvents","webSocketId","__log","__error","mimeType","filename","XHR","sendBuffer","stateChange","posting","sendXHR","req","contentType","usesXDomReq","socketProtocol","isXProtocol","htmlfile","HTMLFile","doc","write","parentWindow","iframeC","iframe","destroy","_","CollectGarbage","XHRPolling","retryCounter","abort","indicator","JSONPPolling","msg","form","area","iframeId","initIframe","submit","webpackPolyfill","paths","children","urltemplate","UrlTemplate","encodeReserved","encodeValue","operator","isDefined","isKeyOperator","getValues","context","modifier","filter","tmp","operators","expression","literal","values","variable","separator","dataChannel","pc","listenDataChannel","onDataChannelError","onDataChannelMessage","onDataChannelOpen","onStart","fireStats","stats","getStats","onStats","MediaStats","onDataChannelClose","createDataChannel","binaryType","accept","answer","skipRemove","removeDirectConnection","isActive","Statechart","toSendHangup","defModify","previewLocalMedia","candidateReceivingQueue","signalCandidateOrig","digitSender","cancellingTones","signalCandidates","candidatesSent","sdpExpectedStreamCount","pcOptions","DtlsSrtpKeyAgreement","RtpDataChannels","callStarted","callStopped","callerendpoint","callerconnection","calleeendpoint","calleeconnection","lastSDPString","sdpsSent","sdpsReceived","candidatesReceived","os","initOffer","receiveOnly","makeOptionsReceiveOnly","makeOptionsSendOnly","createOffer","saveOfferAndSend","OfferToReceiveVideo","OfferToSendVideo","OfferToSendAudio","offerToReceiveVideo","offerToReceiveAudio","offerToSendVideo","offerToSendAudio","localCandidates","localCandidatesComplete","localCandidatesSent","localCandidatesFSM","localCandidatesRemaining","collectLocalIceCandidate","candidate","sendRemainingCandidates","remainingCandidates","finally","initialState","states","buffering","localIceCandidate","sending","iceSent","guard","waiting","run","processOffer","oOffer","hasDataChannel","setRemoteDescription","processReceivingQueue","createAnswer","oSession","processedRemoteSDP","saveAnswerAndSend","callStoppedReason","newErr","MediaStatsParser","peerConnection","interval","statsHandler","stopStats","servers","onicecandidate","onIceCandidate","onnegotiationneeded","onNegotiationNeeded","oniceconnectionstatechange","onIceConnectionStateChange","onaddstream","onremovestream","ondatachannel","getRemoteStreams","getLocalStreams","addStream","oCan","iceGatheringState","forceTurn","disableTurn","iceConnectionState","processIce","can","addIceCandidate","setLocalDescription","sessionDescription","sentSDP","sendTones","duration","tones","createDTMFSender","audioTracks","outgoingMedia","getAudioTracks","ontonechange","onToneChange","eventData","tone","interToneGap","canInsertDTMF","insertDTMF","toneBuffer","cancelTones","tonesToCancel","cancelledTones","sentSignal","listenAnswer","listenConnected","startModify","listenModify","isState","addRemoteCandidate","receivedSDP","assert","assertion","opt","construct","myState","mySource","Initial","newInitialState","handled","TOP","entry","flatten","anEventOrNull","equals","superstate","stateOrName","QState","_topState","currentState","statesTable","_flatten","selectState","stateName","anEvent","act","newState","handleUnhandledEvent","QEvent","aStateName","transition","aStateOrName","enterVia","entryLength","lca","idx","fsm","QEventEmpty","QEventEntry","QEventExit","QEventInit","allTimers","answerTimer","answerTimeout","receiveAnswerTimer","receiveAnswerTimeout","connectionTimer","connectionTimeout","modifyTimer","modifyTimeout","oldRole","nontransitionEvents","condition","hasLocalMediaApproval","hasLocalMedia","receivedBye","isAnswered","rejectEvent","clear","hasMedia","hangupReason","timer","rejectModify","clearReceiveAnswerTimer","hangupEvent","signalBye","needToObtainMedia","needToApproveDirectConnection","automaticOffering","hasListener","createTimer","time","stateParams","idle","initiate","receiveLocalMedia","receiveOffer","negotiatingContainer","modify","preparing","isModifying","approve","gettingMedia","approvingDeviceAccess","approvingContent","offeringContainer","sentOffer","offering","receiveRemoteMedia","receiveAnswer","connectingContainer","modifyingContainer","modifying","connectedContainer","receive","terminatedContainer","terminated","debugOff","getState","oldState","modifyingStates","defineProperty","configurable","enumerable","defMedia","outgoingMediaStreams","hasVideo","getVideoTracks","incomingMediaStreams","videoIsMuted","audioIsMuted","actuallyAddDirectConnection","isNewConstraint","onLocalMedia","onHangup","onAllow","onAnswer","onApprove","onMute","onRequestingMedia","onToneSent","onToneSendingStarted","onToneSendingCancelled","videoLocalElement","videoRemoteElement","updateOutgoingMediaEstimate","updateIncomingMediaEstimate","buildLocalMedia","constraint","waitAllowHandler","allowHandler","streamReceivedHandler","onRemoteStreamAdded","onRemoteStreamRemoved","doAddVideo","remoteMedia","temporary","getLocalElement","getRemoteElement","stopHandler","muted","addVideo","modifyAccepted","getDirectConnection","skipModify","onModifySuccess","addDirectConnection","onModifyError","acceptHandler","openHandler","closeDirectConnection","doHangup","stop","setSDP","setConstraints","listenOffer","onModifyAccept","dc","onModifyReject","toggleVideo","muteVideo","unmuteVideo","toggleAudio","muteAudio","unmuteAudio","local","remote","listenHangup","onCandidateSignal","processCandidate","mediaPromises","shift","connectNoMedia","screenShareSource","allowTimer","mediaOptions","getStream","theConstraints","sConstraints","chromeMediaSourceId","removeStream","toRemoveIndex","onReceiveUserMedia","theStream","aStream","numPc","autoplay","requestMedia","useFakeMedia","fake","delayPermissionsRequest","onUserMediaError","isVideoMuted","track","enabled","eachTrack","isAudioMuted","getTracks","onTopic","onPresenter","eventName","getParticipants","removeParticipant"],"mappings":"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","file":"build/respoke.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"respoke\"] = factory();\n\telse\n\t\troot[\"respoke\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","/*! Copyright (c) 2014, Digium, Inc. All Rights Reserved. MIT Licensed.For details and documentation visit https://www.respoke.io */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"respoke\"] = factory();\n\telse\n\t\troot[\"respoke\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/*\n\t * Copyright 2015, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t */\n\t\"use strict\";\n\t/*jshint bitwise: false*/\n\t\n\t// var Airbrake = require('airbrake-js');\n\tvar log = __webpack_require__(2);\n\tlog.setLevel(log.levels.WARN);\n\t\n\tvar originalFactory = log.methodFactory;\n\tlog.methodFactory = function logMethodFactory(methodName, logLevel) {\n\t    var logMethod = originalFactory(methodName, logLevel);\n\t    var errorReporter;\n\t\n\t    // if (!window.skipErrorReporting && methodName === 'error') {\n\t    //     var airbrake = new Airbrake({\n\t    //         projectId: '98133',\n\t    //         projectKey: 'cd3e085acc5e554658ebcdabd112a6f4'\n\t    //     });\n\t    //     errorReporter = function (message) {\n\t    //         airbrake.push({ error: { message: message } });\n\t    //     };\n\t    // } else {\n\t    //     errorReporter = function () { };\n\t    // }\n\t    errorReporter = function () { };\n\t\n\t    return function (message) {\n\t        var args = Array.prototype.slice.call(arguments);\n\t        var reporterMessage = args.join(' ');\n\t\n\t        args.unshift('[Respoke]');\n\t        logMethod.apply(this, args);\n\t        errorReporter(reporterMessage);\n\t    };\n\t};\n\t\n\t__webpack_require__(3);\n\t\n\t/**\n\t * `respoke` is a global static class.\n\t *\n\t *\n\t * Include the [latest version](https://cdn.respoke.io/respoke.min.js) or\n\t * [choose a previous release](http://cdn.respoke.io/list.html).\n\t *\n\t * Or use `npm install --save respoke`.\n\t *\n\t * Interact with Respoke primarily via [`respoke.Client`](respoke.Client.html):\n\t *\n\t *      var client = respoke.createClient();\n\t *\n\t *\n\t * **Development mode without brokered auth**\n\t *\n\t *      var client = respoke.createClient({\n\t *          appId: \"XXXXXXX-my-app-id-XXXXXX\",\n\t *          developmentMode: true,\n\t *          endpointId: \"daveops\"\n\t *      });\n\t *\n\t *      client.connect({\n\t *          onSuccess: function () { ... },\n\t *          onError: function (err) { ... }\n\t *      });\n\t *\n\t *\n\t * **Production mode with brokered auth**\n\t *\n\t *      var client = respoke.createClient();\n\t *\n\t *      // Respoke auth token obtained by your server.\n\t *      // This is how you control who can connect to Respoke app.\n\t *      // See API docs for POST [base]/tokens\n\t *      var tokenId = \"XXXX-XXXX-brokered-auth-token-XXXXX\";\n\t *\n\t *      // connect to respoke with the token\n\t *      client.connect({\n\t *          token: tokenId\n\t *          onSuccess: function () { ... },\n\t *          onError: function (err) { ... }\n\t *      });\n\t *\n\t *      // fetch a new token from your server if it expires\n\t *      client.listen('disconnect', function (evt) {\n\t *          // fetch another token from your server.\n\t *          var newTokenId = \"XXXX-XXXX-brokered-auth-token2-XXXXX\";\n\t *          client.connect({\n\t *              token: newTokenId\n\t *          });\n\t *      });\n\t *\n\t *\n\t *\n\t * ### Event listeners vs callback handlers\n\t *\n\t * There are two ways to attach listeners. It is highly recommended that you choose one pattern\n\t * and stick to it throughout your app.\n\t *\n\t * For every `event-name`, there is a corresponding callback `onEventName`.\n\t *\n\t * **With a listener**\n\t *\n\t *      var client = respoke.createClient();\n\t *      client.listen('connect', function () { });\n\t *\n\t * **or with a callback**\n\t *\n\t *      var client = respoke.createClient({\n\t *          // other options go here\n\t *\n\t *          onConnect: function () { }\n\t *      });\n\t *\n\t *\n\t * @namespace respoke\n\t * @class respoke\n\t * @global\n\t * @link https://cdn.respoke.io/respoke.min.js\n\t */\n\t\n\tvar EventEmitter = __webpack_require__(4);\n\tvar respoke = module.exports = EventEmitter({\n\t    ridiculous: false, // print every websocket tx/rx\n\t    buildNumber: 'v1.51.0',\n\t    streams: [],\n\t    Q: __webpack_require__(6)\n\t});\n\t\n\trespoke.Q.longStackSupport = true;\n\trespoke.Q.stackJumpLimit = 5;\n\trespoke.Q.longStackJumpLimit = 20;\n\trespoke.Q.stopUnhandledRejectionTracking();\n\t\n\t/**\n\t * A map of respoke.Client instances available for use. This is useful if you would like to separate some\n\t * functionality of your app into a separate Respoke app which would require a separate appId.\n\t * @type {boolean}\n\t */\n\trespoke.instances = {};\n\t\n\t/**\n\t * Indicate whether the user's browser is Chrome and requires the Respoke Chrome extension to do screen sharing.\n\t * @type {boolean}\n\t * @private\n\t */\n\trespoke.needsChromeExtension = !!(window.chrome && !window.opera && navigator.webkitGetUserMedia);\n\t\n\t/**\n\t * Indicate whether the user's browser is Firefox and requires the Respoke Firefox extension to do screen sharing.\n\t * @type {boolean}\n\t * @private\n\t */\n\trespoke.needsFirefoxExtension = window.webrtcDetectedBrowser === 'firefox';\n\t\n\t/**\n\t * Indicate whether the user has a Respoke Chrome extension installed and running correcty on this domain.\n\t * @type {boolean}\n\t * @private\n\t */\n\trespoke.hasChromeExtension = false;\n\t\n\t/**\n\t * Indicate whether the user has a Respoke Firefox extension installed and running correcty on this domain.\n\t * @type {boolean}\n\t * @private\n\t */\n\trespoke.hasFirefoxExtension = false;\n\t\n\t/**\n\t * This method will be overridden in the case that an extension or plugin is available for screen sharing.\n\t *\n\t * @static\n\t * @private\n\t * @memberof respoke\n\t */\n\trespoke.chooseDesktopMedia = function () {\n\t    log.warn(\"Screen sharing is not implemented for this browser.\");\n\t};\n\t\n\t/**\n\t * Indicate whether we are dealing with node-webkit, and expose chooseDesktopMedia if so\n\t * @type {boolean}\n\t * @private\n\t */\n\trespoke.isNwjs = (function () {\n\t    var gui;\n\t    var isNwjs = !!((typeof process !== 'undefined') && (typeof global !== 'undefined') &&\n\t        global.window && global.window.nwDispatcher);\n\t\n\t    if (isNwjs) {\n\t        // expose native node-webkit chooseDesktopMedia (requires nw.js 0.12+)\n\t        gui = window.nwDispatcher.requireNwGui();\n\t        gui.Screen.Init();\n\t\t\t\n\t        respoke.chooseDesktopMedia = function (data, callback) {\n\t            // make data param optional\n\t            if (!callback && (typeof data === 'function')) {\n\t                callback = data;\n\t                data = null;\n\t            }\n\t\n\t            /*\n\t             * mediaSources can be one of 'window', 'screen', or 'tab', or an array with multiples\n\t             * https://developer.chrome.com/extensions/desktopCapture\n\t             */\n\t            var mediaSources = data && data.source ? [data.source] : ['window', 'screen'];\n\t\n\t            gui.Screen.chooseDesktopMedia(mediaSources, function (sourceId) {\n\t                callback({\n\t                    type: 'respoke-source-id',\n\t                    sourceId: sourceId\n\t                });\n\t            });\n\t        };\n\t    }\n\t\n\t    return isNwjs;\n\t})();\n\t\n\t/**\n\t * Create an Event. This is used in the Chrome/Firefox extensions to communicate between the library and extension.\n\t * @type {function}\n\t * @private\n\t */\n\trespoke.extEvent = function (type, data) {\n\t    var evt = document.createEvent(\"CustomEvent\");\n\t    evt.initCustomEvent(type, true, true, data);\n\t    return evt;\n\t};\n\t\n\t/**\n\t * `\"v0.0.0\"`\n\t *\n\t * The respoke.min.js version.\n\t *\n\t * Past versions can be found at [cdn.respoke.io/list.html](http://cdn.respoke.io/list.html)\n\t * @type {string}\n\t */\n\trespoke.version = respoke.buildNumber + \"\";\n\t\n\trespoke.log = log;\n\trespoke.Class = __webpack_require__(5);\n\trespoke.EventEmitter = EventEmitter;\n\trespoke.Client = __webpack_require__(7);\n\trespoke.Connection = __webpack_require__(8);\n\trespoke.Endpoint = __webpack_require__(9);\n\trespoke.TextMessage = __webpack_require__(10);\n\trespoke.SignalingMessage = __webpack_require__(11);\n\trespoke.Group = __webpack_require__(12);\n\trespoke.SignalingChannel = __webpack_require__(13);\n\trespoke.DirectConnection = __webpack_require__(17);\n\trespoke.PeerConnection = __webpack_require__(18);\n\trespoke.CallState = __webpack_require__(20);\n\trespoke.Call = __webpack_require__(21);\n\trespoke.LocalMedia = __webpack_require__(22);\n\trespoke.RemoteMedia = __webpack_require__(23);\n\trespoke.Conference = __webpack_require__(24);\n\t\n\t/**\n\t * Get information from the Respoke Screen Sharing Chrome extension if it is installed.\n\t * @private\n\t */\n\tfunction chromeScreenSharingExtensionReady(evt) {\n\t    var data = evt.detail;\n\t    if (data.available !== true) {\n\t        return;\n\t    }\n\t\n\t    respoke.hasChromeExtension = true;\n\t    respoke.chooseDesktopMedia = function (params, callback) {\n\t        if (!callback) {\n\t            throw new Error(\"Can't choose desktop media without callback parameter.\");\n\t        }\n\t\n\t        function sourceIdListener(evt) {\n\t            var data = evt.detail;\n\t\n\t            respoke.screenSourceId = data.sourceId;\n\t            callback(data);\n\t            document.removeEventListener(\"respoke-source-id\", sourceIdListener);\n\t        }\n\t\n\t        document.dispatchEvent(respoke.extEvent('ct-respoke-source-id', {\n\t            source: params.source ? [params.source] : ['screen', 'window']\n\t        }));\n\t\n\t        document.addEventListener(\"respoke-source-id\", sourceIdListener);\n\t    };\n\t\n\t    respoke.fire('extension-loaded', {\n\t        type: 'screen-sharing'\n\t    });\n\t\n\t    log.info(\"Respoke Screen Share Chrome extension available for use.\");\n\t}\n\t\n\t// TODO: remove 'respoke-available' event listener on next major version bump\n\tdocument.addEventListener('respoke-available', chromeScreenSharingExtensionReady);\n\tdocument.addEventListener('respoke-chrome-screen-sharing-available', chromeScreenSharingExtensionReady);\n\tdocument.addEventListener('respoke-firefox-screen-sharing-available', function (evt) {\n\t\n\t    var data = evt.detail;\n\t    if (data !== 'available') {\n\t        return;\n\t    }\n\t\n\t    respoke.hasFirefoxExtension = true;\n\t\n\t    respoke.fire('extension-loaded', {\n\t        type: 'screen-sharing'\n\t    });\n\t\n\t    log.info(\"Respoke Screen Share Firefox extension available for use.\");\n\t});\n\t\n\t/**\n\t * This is one of two possible entry points for interating with the library.\n\t *\n\t * This method creates a new Client object\n\t * which represents your user's connection to your Respoke app.\n\t *\n\t * This method **automatically calls client.connect(params)** after the client is created.\n\t *\n\t * @static\n\t * @memberof respoke\n\t * @param {object} params Parameters to the respoke.Client constructor.\n\t * @param {string} [params.appId]\n\t * @param {string} [params.baseURL]\n\t * @param {string} [params.token]\n\t * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n\t * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n\t * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t * operation and will limit the services you will be able to use.\n\t * @param {boolean} [params.reconnect=false] - Whether or not to automatically reconnect to the Respoke service\n\t * when a disconnect occurs.\n\t * @param {function} [params.onSuccess] - Success handler for this invocation of this method only.\n\t * @param {function} [params.onError] - Error handler for this invocation of this method only.\n\t * @param {function} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t * @param {function} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n\t * @param {function} [params.onMessage] - Callback for when any message is received from anywhere on the system.\n\t * @param {function} [params.onDisconnect] - Callback for Client disconnect.\n\t * @param {function} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n\t * @param {function} [params.onCall] - Callback for when this client's user receives a call.\n\t * @param {function} [params.onDirectConnection] - Callback for when this client's user receives a request for a\n\t * direct connection.\n\t * @param {boolean} [params.enableCallDebugReport=true] - Optional flag defaulting to true which allows sending\n\t * debugging information.\n\t * @returns {respoke.Client}\n\t */\n\trespoke.connect = function (params) {\n\t    var client = respoke.Client(params);\n\t    client.connect(params);\n\t    return client;\n\t};\n\t\n\t/**\n\t * Getter for the respoke client.\n\t *\n\t * You can have more than one active client, so this method provides a way to retrieve a specific instance.\n\t *\n\t * @static\n\t * @memberof respoke\n\t * @param {number} id The Client ID.\n\t * @returns {respoke.Client}\n\t */\n\trespoke.getClient = function (id) {\n\t    if (id === undefined) {\n\t        log.debug(\"Can't call getClient with no client ID.\", new Error().stack);\n\t    }\n\t    if (!respoke.instances[id]) {\n\t        log.debug(\"No client instance with id\", id);\n\t    }\n\t    return respoke.instances[id];\n\t};\n\t\n\t/**\n\t * This is one of two possible entry points for interating with the library.\n\t *\n\t * This method creates a new Client object which represents your user's connection to your Respoke app.\n\t *\n\t * It **does NOT automatically call the client.connect() method** after the client is created.\n\t *\n\t * The `params` argument is the same as `respoke.connect(params)`.\n\t *\n\t * @static\n\t * @memberof respoke\n\t * @param {object} params Parameters to respoke.Client - same as respoke.connect()\n\t * @returns {respoke.Client}\n\t */\n\trespoke.createClient = function (params) {\n\t    var client;\n\t    params = params || {};\n\t    if (params.instanceId) {\n\t        client = respoke.getClient(params.instanceId);\n\t        if (client) {\n\t            return client;\n\t        }\n\t    }\n\t    return respoke.Client(params);\n\t};\n\t\n\t/**\n\t * Build a closure from a listener that will ensure the listener can only be called once.\n\t * @static\n\t * @private\n\t * @memberof respoke\n\t * @param {function} func\n\t * @return {function}\n\t */\n\trespoke.callOnce = function (func) {\n\t    return (function () {\n\t        var called = false;\n\t        return function () {\n\t            if (called === false) {\n\t                func.apply(null, arguments);\n\t                called = true;\n\t            }\n\t        };\n\t    })();\n\t};\n\t\n\t/**\n\t * @static\n\t * @private\n\t * @memberof respoke\n\t * @returns {number}\n\t */\n\trespoke.makeGUID = function () {\n\t    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n\t    var uuid = new Array(36);\n\t    var rnd = 0;\n\t    var r;\n\t    for (var i = 0; i < 36; i += 1) {\n\t        if (i === 8 || i === 13 ||  i === 18 || i === 23) {\n\t            uuid[i] = '-';\n\t        } else if (i === 14) {\n\t            uuid[i] = '4';\n\t        } else {\n\t            if (rnd <= 0x02) {\n\t                rnd = 0x2000000 + (Math.random() * 0x1000000) | 0;\n\t            }\n\t            r = rnd & 0xf;\n\t            rnd = rnd >> 4;\n\t            uuid[i] = chars[(i === 19) ? (r & 0x3) | 0x8 : r];\n\t        }\n\t    }\n\t    return uuid.join('');\n\t};\n\t\n\t/**\n\t * This method is used internally to attach handlers to promises that are returned by many methods in the library.\n\t * It's not recommended that this method be used by developers and apps.\n\t * @private\n\t * @static\n\t * @memberof respoke\n\t * @param {Promise} promise\n\t * @param {function} onSuccess\n\t * @param {function} onError\n\t * @returns {Promise|undefined}\n\t */\n\trespoke.handlePromise = function (promise, onSuccess, onError) {\n\t    var returnUndef = false;\n\t    if (onSuccess || onError) {\n\t        returnUndef = true;\n\t    }\n\t\n\t    onSuccess = typeof onSuccess === 'function' ? onSuccess : function () {};\n\t    onError = typeof onError === 'function' ? onError : function () {};\n\t    promise.done(onSuccess, onError);\n\t    return (returnUndef ? undefined : promise);\n\t};\n\t\n\t/**\n\t * Does the browser support `UserMedia`?\n\t * @static\n\t * @memberof respoke\n\t * @returns {boolean}\n\t */\n\trespoke.hasUserMedia = function () {\n\t    return (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia) instanceof Function;\n\t};\n\t\n\t/**\n\t * Does the browser support `RTCPeerConnection`?\n\t * @static\n\t * @memberof respoke\n\t * @returns {boolean}\n\t */\n\trespoke.hasRTCPeerConnection = function () {\n\t    return (window.RTCPeerConnection || window.webkitRTCPeerConnection ||\n\t            window.mozRTCPeerConnection) instanceof Function;\n\t};\n\t\n\t/**\n\t * Does the browser support `WebSocket`?\n\t * @static\n\t * @memberof respoke\n\t * @returns {boolean}\n\t */\n\trespoke.hasWebsocket = function () {\n\t    return (window.WebSocket || window.webkitWebSocket || window.MozWebSocket) instanceof Function;\n\t};\n\t\n\t/**\n\t * Does the browser have Screen Sharing enabled via browser extensions?\n\t * @static\n\t * @memberof respoke\n\t * @returns {boolean}\n\t */\n\trespoke.hasScreenShare = function () {\n\t    return respoke.hasChromeExtension || respoke.hasFirefoxExtension;\n\t};\n\t\n\t/**\n\t * Clone an object.\n\t * @static\n\t * @memberof respoke\n\t * @private\n\t * @param {Object} source - The object to clone\n\t * @returns {Object}\n\t */\n\trespoke.clone = function (source) {\n\t    if (source) {\n\t        return JSON.parse(JSON.stringify(source));\n\t    }\n\t    return source;\n\t};\n\t\n\t/**\n\t * Compares two objects for equality\n\t * @static\n\t * @memberof respoke\n\t * @private\n\t * @param {Object} a\n\t * @param {Object} b\n\t * @returns {boolean}\n\t */\n\trespoke.isEqual = function (a, b) {\n\t    var aKeys;\n\t    var i;\n\t\n\t    //check if arrays\n\t    if (a && b && a.hasOwnProperty('length') && b.hasOwnProperty('length') && a.splice && b.splice) {\n\t        if (a.length !== b.length) {\n\t            //short circuit if arrays are different length\n\t            return false;\n\t        }\n\t\n\t        for (i = 0; i < a.length; i += 1) {\n\t            if (!respoke.isEqual(a[i], b[i])) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t\n\t    if (typeof a === 'object' && typeof b === 'object' && Object.keys(a).length === Object.keys(b).length) {\n\t        aKeys = Object.keys(a);\n\t        for (i = 0; i < aKeys.length; i += 1) {\n\t            if (!respoke.isEqual(a[aKeys[i]], b[aKeys[i]])) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t\n\t    return a === b;\n\t};\n\t\n\t/**\n\t * Count the number of MediaStreams indicated by the SDP\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {number}\n\t * @private\n\t */\n\trespoke.sdpStreamCount = function (sdp) {\n\t    var matches;\n\t    var resolvedMatches = {};\n\t\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasAudio called with no parameters.\");\n\t    }\n\t\n\t    matches = sdp.match(/mslabel:(.*)/gi);\n\t\n\t    if (!matches) {\n\t        return 0;\n\t    }\n\t\n\t    matches.forEach(function (line) {\n\t        resolvedMatches[line] = true;\n\t    });\n\t    return Object.keys(resolvedMatches).length;\n\t};\n\t\n\t/**\n\t * Does the sdp indicate an audio stream?\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.sdpHasAudio = function (sdp) {\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasAudio called with no parameters.\");\n\t    }\n\t    return (sdp.indexOf('m=audio') !== -1 && sdp.indexOf('a=recvonly') === -1);\n\t};\n\t\n\t/**\n\t * Does the sdp indicate a video stream?\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.sdpHasVideo = function (sdp) {\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasVideo called with no parameters.\");\n\t    }\n\t    return (sdp.indexOf('m=video') !== -1 && sdp.indexOf('a=recvonly') === -1);\n\t};\n\t\n\t/**\n\t * Does the sdp indicate a data channel?\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.sdpHasDataChannel = function (sdp) {\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasDataChannel called with no parameters.\");\n\t    }\n\t    return sdp.indexOf('m=application') !== -1;\n\t};\n\t\n\t/**\n\t * Does the sdp indicate the creator is sendOnly?\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.sdpHasSendOnly = function (sdp) {\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasSendOnly called with no parameters.\");\n\t    }\n\t    return sdp.indexOf('a=sendonly') !== -1;\n\t};\n\t\n\t/**\n\t * Does the sdp indicate the creator is receiveOnly?\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.sdpHasReceiveOnly = function (sdp) {\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasReceiveOnly called with no parameters.\");\n\t    }\n\t    return sdp.indexOf('a=recvonly') !== -1;\n\t};\n\t\n\t/**\n\t * Do the constraints indicate an audio stream?\n\t * @static\n\t * @memberof respoke\n\t * @params {RTCConstraints}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.constraintsHasAudio = function (constraints) {\n\t    if (!constraints) {\n\t        throw new Error(\"respoke.constraintsHasAudio called with no parameters.\");\n\t    }\n\t    return (constraints.audio === true);\n\t};\n\t\n\t/**\n\t * Does the constraints indicate a video stream?\n\t * @static\n\t * @memberof respoke\n\t * @params {RTCConstraints}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.constraintsHasVideo = function (constraints) {\n\t    if (!constraints) {\n\t        throw new Error(\"respoke.constraintsHasVideo called with no parameters.\");\n\t    }\n\t    return (constraints.video === true || typeof constraints.video === 'object');\n\t};\n\t\n\t/**\n\t * Does the constraints indicate a screenshare?\n\t * @static\n\t * @memberof respoke\n\t * @params {RTCConstraints}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.constraintsHasScreenShare = function (constraints) {\n\t    if (!constraints) {\n\t        throw new Error(\"respoke.constraintsHasScreenShare called with no parameters.\");\n\t    }\n\t\n\t    return (constraints.video && constraints.video.mandatory &&\n\t            (constraints.video.mandatory.chromeMediaSource || constraints.video.mediaSource));\n\t};\n\t\n\t/**\n\t * Convert old-style constraints parameter into a constraints array.\n\t * @static\n\t * @memberof respoke\n\t * @params {Array<RTCConstraints>|RTCConstraints} [constraints]\n\t * @params {Array<RTCConstraints>} [defaults]\n\t * @returns {Array<RTCConstraints>}\n\t * @private\n\t */\n\trespoke.convertConstraints = function (constraints, defaults) {\n\t    constraints = constraints || [];\n\t    defaults = defaults || [];\n\t\n\t    if (!constraints.splice) {\n\t        if (typeof constraints === 'object') {\n\t            constraints = [constraints];\n\t        } else {\n\t            constraints = [];\n\t        }\n\t    }\n\t\n\t    if (constraints.length === 0 && defaults.length > 0) {\n\t        return defaults;\n\t    }\n\t\n\t    return constraints;\n\t};\n\t\n\t/**\n\t * Queue items until a trigger is called, then process them all with an action. Before trigger, hold items for\n\t * processing. After trigger, process new items immediately.\n\t * @static\n\t * @memberof respoke\n\t * @returns {Array}\n\t * @private\n\t */\n\trespoke.queueFactory = function () {\n\t    var queue = [];\n\t    // action replaces Array.push when trigger is called. Thrown errors will be caught and logged.\n\t    queue.trigger = function (action) {\n\t        if (!action) {\n\t            throw new Error(\"Trigger function requires an action parameter.\");\n\t        }\n\t\n\t        function safeAction(item) {\n\t            try {\n\t                action(item);\n\t            } catch (err) {\n\t                log.error(\"Error calling queue action.\", err);\n\t            }\n\t        }\n\t        queue.forEach(safeAction);\n\t        queue.length = 0;\n\t        queue.push = safeAction;\n\t    };\n\t\n\t    return queue;\n\t};\n\t\n\t/**\n\t * Retrieve browser-specific WebRTC getUserMedia constraints needed to start a screen sharing call. Takes a set of\n\t * optional override constraints and amends them for screen sharing.\n\t *\n\t * @memberof respoke\n\t * @static\n\t * @param {object} [params]\n\t * @param {string} [params.source] The media source name to pass to firefox\n\t * @param {RTCConstraints} [params.constraints] constraints to use as a base\n\t * @returns {RTCConstraints}\n\t * @private\n\t */\n\trespoke.getScreenShareConstraints = function (params) {\n\t    params = params || {};\n\t\n\t    var screenConstraint = params.constraints || {\n\t        audio: false,\n\t        video: {\n\t            mandatory: {},\n\t            optional: []\n\t        }\n\t    };\n\t    screenConstraint.audio = false;\n\t    screenConstraint.video = typeof screenConstraint.video === 'object' ? screenConstraint.video : {};\n\t    screenConstraint.video.optional = Array.isArray(screenConstraint.video.optional) ?\n\t        screenConstraint.video.optional : [];\n\t    screenConstraint.video.mandatory = typeof screenConstraint.video.mandatory === 'object' ?\n\t        screenConstraint.video.mandatory : {};\n\t\n\t    if (respoke.needsChromeExtension || respoke.isNwjs) {\n\t        screenConstraint.audio = false;\n\t        screenConstraint.video.mandatory.chromeMediaSource = 'desktop';\n\t        screenConstraint.video.mandatory.maxWidth = typeof screenConstraint.video.mandatory.maxWidth === 'number' ?\n\t            screenConstraint.video.mandatory.maxWidth : 2000;\n\t        screenConstraint.video.mandatory.maxHeight = typeof screenConstraint.video.mandatory.maxHeight === 'number' ?\n\t            screenConstraint.video.mandatory.maxHeight : 2000;\n\t\n\t        if (screenConstraint.video.optional.length > 0) {\n\t            screenConstraint.video.optional.forEach(function (thing) {\n\t                thing.googTemporalLayeredScreencast = true;\n\t            });\n\t        } else {\n\t            screenConstraint.video.optional[0] = {\n\t                googTemporalLayeredScreencast: true\n\t            };\n\t        }\n\t    } else {\n\t        // firefox, et. al.\n\t        screenConstraint.video.mediaSource = params.source || 'screen';\n\t    }\n\t\n\t    return screenConstraint;\n\t};\n\t\n\t/**\n\t * Retrieve a started instance of `respoke.LocalMedia` containing a screen share stream. Useful if you\n\t * want to prepare the stream prior to starting a screen share.\n\t *\n\t *     respoke.getScreenShareMedia().then(function (localMedia) {\n\t *         document.getElementById('#video').appendChild(localMedia.element);\n\t *         group.listen('join', function (evt) {\n\t *             evt.connection.startScreenShare({\n\t *                 outgoingMedia: localMedia\n\t *             });\n\t *         });\n\t *     }).catch(function (err) {\n\t *         console.log(err);\n\t *     });\n\t *\n\t * @static\n\t * @memberof respoke\n\t * @param {object} params\n\t * @param {string} [params.source] - The source you would like to use for your screen share. Values vary by browser.\n\t *  In Chrome, acceptable values are one of 'screen', 'window', or 'tab'.\n\t *  In Firefox, acceptable values are one of 'screen', 'window', or 'application'.\n\t * @param {RTCConstraints|Array<RTCConstraints>} [params.constraints] - constraints to use as a base\n\t * @param {HTMLVideoElement} [params.element] - Pass in an optional html video element to have local\n\t *  video attached to it.\n\t * @param {function} [params.onSuccess] Upon success, called with instance of `respoke.LocalMedia`\n\t * @param {function} [params.onError] Upon failure, called with the error that occurred.\n\t * @returns {Promise|undefined}\n\t * @private\n\t */\n\trespoke.getScreenShareMedia = function (params) {\n\t    params = params || {};\n\t\n\t    var deferred = respoke.Q.defer();\n\t    var criteria = {\n\t        source: params.source,\n\t        constraints: respoke.clone(params.constraints)\n\t    };\n\t    var localMedia = respoke.LocalMedia({\n\t        hasScreenShare: true,\n\t        constraints: respoke.getScreenShareConstraints(criteria),\n\t        source: params.source,\n\t        element: params.element\n\t    });\n\t\n\t    localMedia.start().done(function () {\n\t        deferred.resolve(localMedia);\n\t    }, function (err) {\n\t        deferred.reject(err);\n\t    });\n\t\n\t    return respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t};\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\r\n\t* loglevel - https://github.com/pimterry/loglevel\r\n\t*\r\n\t* Copyright (c) 2013 Tim Perry\r\n\t* Licensed under the MIT license.\r\n\t*/\r\n\t(function (root, definition) {\r\n\t    if (typeof module === 'object' && module.exports && \"function\" === 'function') {\r\n\t        module.exports = definition();\r\n\t    } else if (true) {\r\n\t        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\t    } else {\r\n\t        root.log = definition();\r\n\t    }\r\n\t}(this, function () {\r\n\t    var self = {};\r\n\t    var noop = function() {};\r\n\t    var undefinedType = \"undefined\";\r\n\t\r\n\t    function realMethod(methodName) {\r\n\t        if (typeof console === undefinedType) {\r\n\t            return false; // We can't build a real method without a console to log to\r\n\t        } else if (console[methodName] !== undefined) {\r\n\t            return bindMethod(console, methodName);\r\n\t        } else if (console.log !== undefined) {\r\n\t            return bindMethod(console, 'log');\r\n\t        } else {\r\n\t            return noop;\r\n\t        }\r\n\t    }\r\n\t\r\n\t    function bindMethod(obj, methodName) {\r\n\t        var method = obj[methodName];\r\n\t        if (typeof method.bind === 'function') {\r\n\t            return method.bind(obj);\r\n\t        } else {\r\n\t            try {\r\n\t                return Function.prototype.bind.call(method, obj);\r\n\t            } catch (e) {\r\n\t                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\r\n\t                return function() {\r\n\t                    return Function.prototype.apply.apply(method, [obj, arguments]);\r\n\t                };\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t\r\n\t    function enableLoggingWhenConsoleArrives(methodName, level) {\r\n\t        return function () {\r\n\t            if (typeof console !== undefinedType) {\r\n\t                replaceLoggingMethods(level);\r\n\t                self[methodName].apply(self, arguments);\r\n\t            }\r\n\t        };\r\n\t    }\r\n\t\r\n\t    var logMethods = [\r\n\t        \"trace\",\r\n\t        \"debug\",\r\n\t        \"info\",\r\n\t        \"warn\",\r\n\t        \"error\"\r\n\t    ];\r\n\t\r\n\t    function replaceLoggingMethods(level) {\r\n\t        for (var i = 0; i < logMethods.length; i++) {\r\n\t            var methodName = logMethods[i];\r\n\t            self[methodName] = (i < level) ? noop : self.methodFactory(methodName, level);\r\n\t        }\r\n\t    }\r\n\t\r\n\t    function persistLevelIfPossible(levelNum) {\r\n\t        var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\r\n\t\r\n\t        // Use localStorage if available\r\n\t        try {\r\n\t            window.localStorage['loglevel'] = levelName;\r\n\t            return;\r\n\t        } catch (ignore) {}\r\n\t\r\n\t        // Use session cookie as fallback\r\n\t        try {\r\n\t            window.document.cookie = \"loglevel=\" + levelName + \";\";\r\n\t        } catch (ignore) {}\r\n\t    }\r\n\t\r\n\t    function loadPersistedLevel() {\r\n\t        var storedLevel;\r\n\t\r\n\t        try {\r\n\t            storedLevel = window.localStorage['loglevel'];\r\n\t        } catch (ignore) {}\r\n\t\r\n\t        if (typeof storedLevel === undefinedType) {\r\n\t            try {\r\n\t                storedLevel = /loglevel=([^;]+)/.exec(window.document.cookie)[1];\r\n\t            } catch (ignore) {}\r\n\t        }\r\n\t        \r\n\t        if (self.levels[storedLevel] === undefined) {\r\n\t            storedLevel = \"WARN\";\r\n\t        }\r\n\t\r\n\t        self.setLevel(self.levels[storedLevel]);\r\n\t    }\r\n\t\r\n\t    /*\r\n\t     *\r\n\t     * Public API\r\n\t     *\r\n\t     */\r\n\t\r\n\t    self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\r\n\t        \"ERROR\": 4, \"SILENT\": 5};\r\n\t\r\n\t    self.methodFactory = function (methodName, level) {\r\n\t        return realMethod(methodName) ||\r\n\t               enableLoggingWhenConsoleArrives(methodName, level);\r\n\t    };\r\n\t\r\n\t    self.setLevel = function (level) {\r\n\t        if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\r\n\t            level = self.levels[level.toUpperCase()];\r\n\t        }\r\n\t        if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\r\n\t            persistLevelIfPossible(level);\r\n\t            replaceLoggingMethods(level);\r\n\t            if (typeof console === undefinedType && level < self.levels.SILENT) {\r\n\t                return \"No console available for logging\";\r\n\t            }\r\n\t        } else {\r\n\t            throw \"log.setLevel() called with invalid level: \" + level;\r\n\t        }\r\n\t    };\r\n\t\r\n\t    self.enableAll = function() {\r\n\t        self.setLevel(self.levels.TRACE);\r\n\t    };\r\n\t\r\n\t    self.disableAll = function() {\r\n\t        self.setLevel(self.levels.SILENT);\r\n\t    };\r\n\t\r\n\t    // Grab the current global log variable in case of overwrite\r\n\t    var _log = (typeof window !== undefinedType) ? window.log : undefined;\r\n\t    self.noConflict = function() {\r\n\t        if (typeof window !== undefinedType &&\r\n\t               window.log === self) {\r\n\t            window.log = _log;\r\n\t        }\r\n\t\r\n\t        return self;\r\n\t    };\r\n\t\r\n\t    loadPersistedLevel();\r\n\t    return self;\r\n\t}));\r\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t/*!\n\t *  Copyright (c) 2014 The WebRTC project authors. All Rights Reserved.\n\t *\n\t *  Use of this source code is governed by a BSD-style license\n\t *  that can be found in the LICENSE file in the same directory as\n\t *  this source file.\n\t * @ignore\n\t */\n\t\n\t/* More information about these options at jshint.com/docs/options */\n\t\n\t/* jshint browser: true, camelcase: true, curly: true, devel: true,\n\teqeqeq: true, forin: false, globalstrict: true, quotmark: single,\n\tundef: true, unused: strict */\n\t\n\t/* global mozRTCIceCandidate, mozRTCPeerConnection,\n\tmozRTCSessionDescription, webkitRTCPeerConnection */\n\t\n\t/* exported trace */\n\t\n\t'use strict';\n\t\n\tvar RTCPeerConnection = null;\n\tvar getUserMedia = null;\n\tvar attachMediaStream = null;\n\tvar reattachMediaStream = null;\n\tvar webrtcDetectedBrowser = null;\n\tvar webrtcDetectedVersion = null;\n\t\n\tfunction trace(text) {\n\t  // This function is used for logging.\n\t  if (text[text.length - 1] === '\\n') {\n\t    text = text.substring(0, text.length - 1);\n\t  }\n\t  console.log((window.performance.now() / 1000).toFixed(3) + ': ' + text);\n\t}\n\t\n\tfunction maybeFixConfiguration(pcConfig) {\n\t  if (!pcConfig) {\n\t    return;\n\t  }\n\t  for (var i = 0; i < pcConfig.iceServers.length; i++) {\n\t    if (pcConfig.iceServers[i].hasOwnProperty('urls')) {\n\t      pcConfig.iceServers[i].url = pcConfig.iceServers[i].urls;\n\t      delete pcConfig.iceServers[i].urls;\n\t    }\n\t  }\n\t}\n\t\n\tif (navigator.mozGetUserMedia) {\n\t  console.log('This appears to be Firefox');\n\t\n\t  webrtcDetectedBrowser = 'firefox';\n\t\n\t  webrtcDetectedVersion =\n\t    parseInt(navigator.userAgent.match(/Firefox\\/([0-9]+)\\./)[1], 10);\n\t\n\t  // The RTCPeerConnection object.\n\t  RTCPeerConnection = function(pcConfig, pcConstraints) {\n\t    // .urls is not supported in FF yet.\n\t    maybeFixConfiguration(pcConfig);\n\t    return new mozRTCPeerConnection(pcConfig, pcConstraints);\n\t  };\n\t\n\t  // The RTCSessionDescription object.\n\t  window.RTCSessionDescription = mozRTCSessionDescription;\n\t\n\t  // The RTCIceCandidate object.\n\t  window.RTCIceCandidate = mozRTCIceCandidate;\n\t\n\t  // getUserMedia shim (only difference is the prefix).\n\t  // Code from Adam Barth.\n\t  getUserMedia = navigator.mozGetUserMedia.bind(navigator);\n\t  navigator.getUserMedia = getUserMedia;\n\t\n\t  // Creates ICE server from the URL for FF.\n\t  window.createIceServer = function(url, username, password) {\n\t    var iceServer = null;\n\t    var urlParts = url.split(':');\n\t    if (urlParts[0].indexOf('stun') === 0) {\n\t      // Create ICE server with STUN URL.\n\t      iceServer = {\n\t        'url': url\n\t      };\n\t    } else if (urlParts[0].indexOf('turn') === 0) {\n\t      if (webrtcDetectedVersion < 27) {\n\t        // Create iceServer with turn url.\n\t        // Ignore the transport parameter from TURN url for FF version <=27.\n\t        var turnUrlParts = url.split('?');\n\t        // Return null for createIceServer if transport=tcp.\n\t        if (turnUrlParts.length === 1 ||\n\t          turnUrlParts[1].indexOf('transport=udp') === 0) {\n\t          iceServer = {\n\t            'url': turnUrlParts[0],\n\t            'credential': password,\n\t            'username': username\n\t          };\n\t        }\n\t      } else {\n\t        // FF 27 and above supports transport parameters in TURN url,\n\t        // So passing in the full url to create iceServer.\n\t        iceServer = {\n\t          'url': url,\n\t          'credential': password,\n\t          'username': username\n\t        };\n\t      }\n\t    }\n\t    return iceServer;\n\t  };\n\t\n\t  window.createIceServers = function(urls, username, password) {\n\t    var iceServers = [];\n\t    // Use .url for FireFox.\n\t    for (var i = 0; i < urls.length; i++) {\n\t      var iceServer =\n\t        window.createIceServer(urls[i], username, password);\n\t      if (iceServer !== null) {\n\t        iceServers.push(iceServer);\n\t      }\n\t    }\n\t    return iceServers;\n\t  };\n\t\n\t  // Attach a media stream to an element.\n\t  attachMediaStream = function(element, stream) {\n\t    //console.log('Attaching media stream');\n\t    element.mozSrcObject = stream;\n\t    setTimeout(function () {\n\t      element.play();\n\t    }, 100);\n\t  };\n\t\n\t  reattachMediaStream = function(to, from) {\n\t    //console.log('Reattaching media stream');\n\t    to.mozSrcObject = from.mozSrcObject;\n\t  };\n\t\n\t} else if (navigator.webkitGetUserMedia) {\n\t  console.log('This appears to be Chrome');\n\t\n\t  webrtcDetectedBrowser = 'chrome';\n\t  // Temporary fix until crbug/374263 is fixed.\n\t  // Setting Chrome version to 999, if version is unavailable.\n\t  var result = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n\t  if (result !== null) {\n\t    webrtcDetectedVersion = parseInt(result[2], 10);\n\t  } else {\n\t    webrtcDetectedVersion = 999;\n\t  }\n\t\n\t  // Creates iceServer from the url for Chrome M33 and earlier.\n\t  window.createIceServer = function(url, username, password) {\n\t    var iceServer = null;\n\t    var urlParts = url.split(':');\n\t    if (urlParts[0].indexOf('stun') === 0) {\n\t      // Create iceServer with stun url.\n\t      iceServer = {\n\t        'url': url\n\t      };\n\t    } else if (urlParts[0].indexOf('turn') === 0) {\n\t      // Chrome M28 & above uses below TURN format.\n\t      iceServer = {\n\t        'url': url,\n\t        'credential': password,\n\t        'username': username\n\t      };\n\t    }\n\t    return iceServer;\n\t  };\n\t\n\t  // Creates iceServers from the urls for Chrome M34 and above.\n\t  window.createIceServers = function(urls, username, password) {\n\t    var iceServers = [];\n\t    if (webrtcDetectedVersion >= 34) {\n\t      // .urls is supported since Chrome M34.\n\t      iceServers = {\n\t        'urls': urls,\n\t        'credential': password,\n\t        'username': username\n\t      };\n\t    } else {\n\t      for (var i = 0; i < urls.length; i++) {\n\t        var iceServer =\n\t          window.createIceServer(urls[i], username, password);\n\t        if (iceServer !== null) {\n\t          iceServers.push(iceServer);\n\t        }\n\t      }\n\t    }\n\t    return iceServers;\n\t  };\n\t\n\t  // The RTCPeerConnection object.\n\t  RTCPeerConnection = function(pcConfig, pcConstraints) {\n\t    // .urls is supported since Chrome M34.\n\t    if (webrtcDetectedVersion < 34) {\n\t      maybeFixConfiguration(pcConfig);\n\t    }\n\t    return new webkitRTCPeerConnection(pcConfig, pcConstraints);\n\t  };\n\t\n\t  // Get UserMedia (only difference is the prefix).\n\t  // Code from Adam Barth.\n\t  getUserMedia = navigator.webkitGetUserMedia.bind(navigator);\n\t  navigator.getUserMedia = getUserMedia;\n\t\n\t  // Attach a media stream to an element.\n\t  attachMediaStream = function(element, stream) {\n\t    if (typeof element.srcObject !== 'undefined') {\n\t      element.srcObject = stream;\n\t    } else if (typeof element.mozSrcObject !== 'undefined') {\n\t      element.mozSrcObject = stream;\n\t    } else if (typeof element.src !== 'undefined') {\n\t      element.src = URL.createObjectURL(stream);\n\t    } else {\n\t      console.log('Error attaching stream to element.');\n\t    }\n\t  };\n\t\n\t  reattachMediaStream = function(to, from) {\n\t    to.src = from.src;\n\t  };\n\t} else {\n\t  console.log('Browser does not appear to be WebRTC-capable');\n\t}\n\t\n\t\n\twindow.RTCPeerConnection = RTCPeerConnection;\n\twindow.getUserMedia = getUserMedia;\n\twindow.attachMediaStream = attachMediaStream;\n\twindow.reattachMediaStream = reattachMediaStream;\n\twindow.webrtcDetectedBrowser = webrtcDetectedBrowser;\n\twindow.webrtcDetectedVersion = webrtcDetectedVersion;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Copyright 2015, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t */\n\t\n\tvar log = __webpack_require__(2);\n\tvar respokeClass = __webpack_require__(5);\n\t\n\t/**\n\t * Higher order function to wrap a passed in function. The returned function will only execute\n\t * the passed in function the first time it is called, then be a no-op any subsequent tries.\n\t *\n\t * @private\n\t */\n\tvar callOnce = function (func) {\n\t    \"use strict\";\n\t    return (function () {\n\t        var called = false;\n\t        return function () {\n\t            if (!called) {\n\t                func.apply(null, arguments);\n\t                called = true;\n\t            }\n\t        };\n\t    })();\n\t};\n\t\n\t/**\n\t * A generic class for emitting and listening to events. This is used internally by respoke.js\n\t * to provide evented behavior. You can add custom events and inherit your own objects from\n\t * the EventEmitter.\n\t *\n\t * ```\n\t * // Adding a custom event to a respoke.Client instance\n\t * client.listen('my-event', function (evt) { });\n\t * client.fire('my-event', { name: 'my-event', asdf: 'jkl' });\n\t * ```\n\t *\n\t * ```\n\t * // Custom EventEmitter\n\t * var MyCustomEmitter = respoke.EventEmitter();\n\t * var emitterInstance = MyCustomEmitter();\n\t * emitterInstance.fire('hi', { name: 'hi', message: 'hello' });\n\t * emitterInstance.listen('hi', function (evt) { });\n\t * ```\n\t *\n\t * @class respoke.EventEmitter\n\t * @inherits respoke.Class\n\t * @constructor\n\t * @param {object} params\n\t * @param {string} params.instanceId\n\t * @returns {respoke.EventEmitter}\n\t */\n\tvar EventEmitter = module.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = respokeClass(params);\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.EventEmitter\n\t     * @name className\n\t     * @type {string}\n\t     * @private\n\t     */\n\t    that.className = 'respoke.EventEmitter';\n\t\n\t    /**\n\t     * @memberof! respoke.EventEmitter\n\t     * @name eventList\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var eventList = {};\n\t\n\t    /**\n\t     * Add a listener that will only be called once to an object.  This method adds the given listener to the given\n\t     * event in the case that the same\n\t     * listener is not already registered to this event and the listener is a function.  The third argument 'isInternal'\n\t     * is used only internally by the library to indicate that this listener is a library-used listener and should not\n\t     * count when we are trying to determine if an event has listeners placed by the developer.\n\t     *\n\t     *     client.once('connect', function (evt) {\n\t     *         console.log(\"This is the first time we connected.\");\n\t     *     });\n\t     *\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.listen\n\t     * @param {string} eventType - A developer-specified string identifying the event.\n\t     * @param {respoke.EventEmitter.eventListener} listener - A function to call when the event is fire.\n\t     * @param {boolean} [isInternal] - A flag to indicate this listener was added by the library. This parameter should\n\t     * not be used by developers who are using the library, only by developers who are working on the library itself.\n\t     */\n\t    that.once = function (eventType, listener, isInternal) {\n\t        var string = listener.toString();\n\t        listener = callOnce(listener);\n\t        listener.toString = function () { return string; };\n\t        listener.once = true;\n\t        that.listen(eventType, listener, isInternal);\n\t    };\n\t\n\t    /**\n\t     * Add a `listener` function to an object.\n\t     *\n\t     * This method adds the `listener` to the event `eventName`.\n\t     *\n\t     * If an identical listener already registered to this event, it will **not** be added.\n\t     *\n\t     * ##### Example of adding an event listener.\n\t     *\n\t     *     client.listen('connect', function (evt) {\n\t     *         console.log(\"We've connected!\", evt);\n\t     *     });\n\t     *\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.listen\n\t     * @param {string} eventType - The name of the event.\n\t     * @param {respoke.EventEmitter.eventListener} listener - A function to call when the event is\n\t     * fired.\n\t     * @arg {boolean} isInternal - Internal use only. A flag to indicate this listener was\n\t     * added by the library. This parameter should not be used by developers who are using\n\t     * the library, only by developers who are working on the library itself.\n\t     */\n\t    that.listen = function (eventType, listener, isInternal) {\n\t        if (listener === undefined) {\n\t            return;\n\t        }\n\t        var invalidEventType = typeof eventType !== 'string' || !eventType;\n\t        var invalidListener = typeof listener !== 'function';\n\t        if (invalidEventType || invalidListener) {\n\t            log.error(\"Invalid request to add event listener to\", eventType, listener);\n\t            return;\n\t        }\n\t\n\t        eventList[eventType] = eventList[eventType] || [];\n\t        listener.isInternal = !!isInternal; // boolify\n\t\n\t        var toString = function (fn) {\n\t            return fn.toString();\n\t        };\n\t        var isNotAlreadyAdded = eventList[eventType].map(toString).indexOf(listener.toString()) === -1;\n\t\n\t        if (isNotAlreadyAdded) {\n\t            eventList[eventType].push(listener);\n\t        } else {\n\t            log.warn(\"Not adding duplicate listener to\", eventType, listener);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Remove a listener from an object. If no eventType is specified, all eventTypes will be\n\t     * cleared. If an eventType is specified but no listener is specified, all listeners will be\n\t     * removed from the specified eventType.  If a listener is also specified, only that listener\n\t     * will be removed.\n\t     *\n\t     *     client.ignore('connect', connectHandler);\n\t     *\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.ignore\n\t     * @param {string} [eventType] - An optional developer-specified string identifying the event.\n\t     * @param {function} [listener] - An optional function to remove from the specified event.\n\t     */\n\t    that.ignore = function (eventType, listener) {\n\t        // Remove all events from this object\n\t        if (eventType === undefined) {\n\t            eventList = {};\n\t            return;\n\t        }\n\t\n\t        // Remove all listeners from this event.\n\t        if (listener === undefined || !eventList[eventType]) {\n\t            eventList[eventType] = [];\n\t            return;\n\t        }\n\t\n\t        // Remove only one listener from this event.\n\t        for (var i = eventList[eventType].length - 1; i >= 0; i -= 1) {\n\t            if (listener === eventList[eventType][i]) {\n\t                eventList[eventType].splice(i, 1);\n\t                return;\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Trigger an event on an object. All listeners for the specified eventType will be called.\n\t     * Listeners will be bound to the object ('this' will refer to the object), and additional\n\t     * arguments to fire() will be passed into each listener.\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.fire\n\t     * @param {string} eventType - A developer-specified string identifying the event to fire.\n\t     * @param {string|number|object|array} evt - Any number of optional parameters to be passed to\n\t     * the listener\n\t     * @private\n\t     */\n\t    that.fire = function (eventType, evt) {\n\t        var args = null;\n\t        var count = 0;\n\t        var toRemove = [];\n\t        var i;\n\t\n\t        evt = evt || {};\n\t        evt.name = eventType;\n\t        evt.target = that;\n\t\n\t        if (!eventType) {\n\t            return;\n\t        }\n\t\n\t        if (!eventList[eventType]) {\n\t            log.debug(\"fired \" + that.className + \"#\" + eventType + \" 0 listeners called with params\", evt);\n\t            return;\n\t        }\n\t\n\t        for (i = 0; i < eventList[eventType].length; i += 1) {\n\t            var listener = eventList[eventType][i];\n\t            if (typeof listener === 'function') {\n\t                setTimeout(listenerBuilder(listener, evt, eventType));\n\t\n\t                count += 1;\n\t                if (listener.once === true) {\n\t                    toRemove.push(i);\n\t                }\n\t            }\n\t        }\n\t\n\t        for (i = (toRemove.length - 1); i >= 0; i -= 1) {\n\t            eventList[eventType].splice(toRemove[i], 1);\n\t        }\n\t\n\t        log.debug(\"fired \" + that.className + \"#\" + eventType + \" \" + count + \" listeners called with params\", evt);\n\t    };\n\t\n\t    function listenerBuilder(listener, evt, eventType) {\n\t        return function () {\n\t            try {\n\t                listener.call(that, evt);\n\t            } catch (e) {\n\t                log.error('Error in ' + that.className + \"#\" + eventType, e.message, e.stack);\n\t            }\n\t        };\n\t    }\n\t\n\t    /**\n\t     * Determine if an object has had any listeners registered for a given event outside the library. This method\n\t     * checks for the isInternal flag on each listener and doesn't count it toward an event being listened to. This\n\t     * method is used in the library to handle situations where an action is needed if an event won't be acted on.\n\t     * For instance, if a call comes in for the logged-in user, but the developer isn't listening to\n\t     * {respoke.Client#call}, we'll need to reject the call immediately.\n\t     *\n\t     *     if (client.hasListeners('call')) {\n\t     *         // already handled!\n\t     *     }\n\t     *\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.hasListeners\n\t     * @param {string} eventType - The name of the event\n\t     * @returns {boolean} Whether this event has any listeners that are external to this library.\n\t     */\n\t    that.hasListeners = function (eventType) {\n\t        if (eventType === undefined) {\n\t            throw new Error(\"Missing required parameter event type.\");\n\t        }\n\t\n\t        if (!eventList[eventType]) {\n\t            return false;\n\t        }\n\t\n\t        return !eventList[eventType].every(function eachListener(listener) {\n\t            return listener.isInternal;\n\t        });\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.EventEmitter\n\t/**\n\t * @callback respoke.EventEmitter.eventListener\n\t * @param {respoke.Event} evt\n\t */\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t/*\n\t * Copyright 2015, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t */\n\t\n\t/**\n\t * Empty base class. Use params.that (if exists) for the base object, but delete it from the instance.\n\t * Copy all params that were passed in onto the base object. Add the class name.\n\t * @class respoke.Class\n\t * @private\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = params.that || {};\n\t\n\t    that.className = 'respoke.Class';\n\t    delete params.that;\n\t    delete that.client;\n\t\n\t    Object.keys(params).forEach(function copyParam(name) {\n\t        that[name] = params[name];\n\t    });\n\t\n\t    return that;\n\t};\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// vim:ts=4:sts=4:sw=4:\n\t/*!\n\t *\n\t * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n\t * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n\t *\n\t * With parts by Tyler Close\n\t * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n\t * at http://www.opensource.org/licenses/mit-license.html\n\t * Forked at ref_send.js version: 2009-05-11\n\t *\n\t * With parts by Mark Miller\n\t * Copyright (C) 2011 Google Inc.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t *\n\t */\n\t\n\t(function (definition) {\n\t    \"use strict\";\n\t\n\t    // This file will function properly as a <script> tag, or a module\n\t    // using CommonJS and NodeJS or RequireJS module formats.  In\n\t    // Common/Node/RequireJS, the module exports the Q API and when\n\t    // executed as a simple <script>, it creates a Q global instead.\n\t\n\t    // Montage Require\n\t    if (typeof bootstrap === \"function\") {\n\t        bootstrap(\"promise\", definition);\n\t\n\t    // CommonJS\n\t    } else if (true) {\n\t        module.exports = definition();\n\t\n\t    // RequireJS\n\t    } else if (typeof define === \"function\" && define.amd) {\n\t        define(definition);\n\t\n\t    // SES (Secure EcmaScript)\n\t    } else if (typeof ses !== \"undefined\") {\n\t        if (!ses.ok()) {\n\t            return;\n\t        } else {\n\t            ses.makeQ = definition;\n\t        }\n\t\n\t    // <script>\n\t    } else if (typeof self !== \"undefined\") {\n\t        self.Q = definition();\n\t\n\t    } else {\n\t        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n\t    }\n\t\n\t})(function () {\n\t\"use strict\";\n\t\n\tvar hasStacks = false;\n\ttry {\n\t    throw new Error();\n\t} catch (e) {\n\t    hasStacks = !!e.stack;\n\t}\n\t\n\t// All code after this point will be filtered from stack traces reported\n\t// by Q.\n\tvar qStartingLine = captureLine();\n\tvar qFileName;\n\t\n\t// shims\n\t\n\t// used for fallback in \"allResolved\"\n\tvar noop = function () {};\n\t\n\t// Use the fastest possible means to execute a task in a future turn\n\t// of the event loop.\n\tvar nextTick =(function () {\n\t    // linked list of tasks (single, with head node)\n\t    var head = {task: void 0, next: null};\n\t    var tail = head;\n\t    var flushing = false;\n\t    var requestTick = void 0;\n\t    var isNodeJS = false;\n\t    // queue for late tasks, used by unhandled rejection tracking\n\t    var laterQueue = [];\n\t\n\t    function flush() {\n\t        /* jshint loopfunc: true */\n\t        var task, domain;\n\t\n\t        while (head.next) {\n\t            head = head.next;\n\t            task = head.task;\n\t            head.task = void 0;\n\t            domain = head.domain;\n\t\n\t            if (domain) {\n\t                head.domain = void 0;\n\t                domain.enter();\n\t            }\n\t            runSingle(task, domain);\n\t\n\t        }\n\t        while (laterQueue.length) {\n\t            task = laterQueue.pop();\n\t            runSingle(task);\n\t        }\n\t        flushing = false;\n\t    }\n\t    // runs a single function in the async queue\n\t    function runSingle(task, domain) {\n\t        try {\n\t            task();\n\t\n\t        } catch (e) {\n\t            if (isNodeJS) {\n\t                // In node, uncaught exceptions are considered fatal errors.\n\t                // Re-throw them synchronously to interrupt flushing!\n\t\n\t                // Ensure continuation if the uncaught exception is suppressed\n\t                // listening \"uncaughtException\" events (as domains does).\n\t                // Continue in next event to avoid tick recursion.\n\t                if (domain) {\n\t                    domain.exit();\n\t                }\n\t                setTimeout(flush, 0);\n\t                if (domain) {\n\t                    domain.enter();\n\t                }\n\t\n\t                throw e;\n\t\n\t            } else {\n\t                // In browsers, uncaught exceptions are not fatal.\n\t                // Re-throw them asynchronously to avoid slow-downs.\n\t                setTimeout(function () {\n\t                    throw e;\n\t                }, 0);\n\t            }\n\t        }\n\t\n\t        if (domain) {\n\t            domain.exit();\n\t        }\n\t    }\n\t\n\t    nextTick = function (task) {\n\t        tail = tail.next = {\n\t            task: task,\n\t            domain: isNodeJS && process.domain,\n\t            next: null\n\t        };\n\t\n\t        if (!flushing) {\n\t            flushing = true;\n\t            requestTick();\n\t        }\n\t    };\n\t\n\t    if (typeof process === \"object\" &&\n\t        process.toString() === \"[object process]\" && process.nextTick) {\n\t        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n\t        // To see through fake Node environments:\n\t        // * Mocha test runner - exposes a `process` global without a `nextTick`\n\t        // * Browserify - exposes a `process.nexTick` function that uses\n\t        //   `setTimeout`. In this case `setImmediate` is preferred because\n\t        //    it is faster. Browserify's `process.toString()` yields\n\t        //   \"[object Object]\", while in a real Node environment\n\t        //   `process.nextTick()` yields \"[object process]\".\n\t        isNodeJS = true;\n\t\n\t        requestTick = function () {\n\t            process.nextTick(flush);\n\t        };\n\t\n\t    } else if (typeof setImmediate === \"function\") {\n\t        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n\t        if (typeof window !== \"undefined\") {\n\t            requestTick = setImmediate.bind(window, flush);\n\t        } else {\n\t            requestTick = function () {\n\t                setImmediate(flush);\n\t            };\n\t        }\n\t\n\t    } else if (typeof MessageChannel !== \"undefined\") {\n\t        // modern browsers\n\t        // http://www.nonblocking.io/2011/06/windownexttick.html\n\t        var channel = new MessageChannel();\n\t        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n\t        // working message ports the first time a page loads.\n\t        channel.port1.onmessage = function () {\n\t            requestTick = requestPortTick;\n\t            channel.port1.onmessage = flush;\n\t            flush();\n\t        };\n\t        var requestPortTick = function () {\n\t            // Opera requires us to provide a message payload, regardless of\n\t            // whether we use it.\n\t            channel.port2.postMessage(0);\n\t        };\n\t        requestTick = function () {\n\t            setTimeout(flush, 0);\n\t            requestPortTick();\n\t        };\n\t\n\t    } else {\n\t        // old browsers\n\t        requestTick = function () {\n\t            setTimeout(flush, 0);\n\t        };\n\t    }\n\t    // runs a task after all other tasks have been run\n\t    // this is useful for unhandled rejection tracking that needs to happen\n\t    // after all `then`d tasks have been run.\n\t    nextTick.runAfter = function (task) {\n\t        laterQueue.push(task);\n\t        if (!flushing) {\n\t            flushing = true;\n\t            requestTick();\n\t        }\n\t    };\n\t    return nextTick;\n\t})();\n\t\n\t// Attempt to make generics safe in the face of downstream\n\t// modifications.\n\t// There is no situation where this is necessary.\n\t// If you need a security guarantee, these primordials need to be\n\t// deeply frozen anyway, and if you don’t need a security guarantee,\n\t// this is just plain paranoid.\n\t// However, this **might** have the nice side-effect of reducing the size of\n\t// the minified code by reducing x.call() to merely x()\n\t// See Mark Miller’s explanation of what this does.\n\t// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n\tvar call = Function.call;\n\tfunction uncurryThis(f) {\n\t    return function () {\n\t        return call.apply(f, arguments);\n\t    };\n\t}\n\t// This is equivalent, but slower:\n\t// uncurryThis = Function_bind.bind(Function_bind.call);\n\t// http://jsperf.com/uncurrythis\n\t\n\tvar array_slice = uncurryThis(Array.prototype.slice);\n\t\n\tvar array_reduce = uncurryThis(\n\t    Array.prototype.reduce || function (callback, basis) {\n\t        var index = 0,\n\t            length = this.length;\n\t        // concerning the initial value, if one is not provided\n\t        if (arguments.length === 1) {\n\t            // seek to the first value in the array, accounting\n\t            // for the possibility that is is a sparse array\n\t            do {\n\t                if (index in this) {\n\t                    basis = this[index++];\n\t                    break;\n\t                }\n\t                if (++index >= length) {\n\t                    throw new TypeError();\n\t                }\n\t            } while (1);\n\t        }\n\t        // reduce\n\t        for (; index < length; index++) {\n\t            // account for the possibility that the array is sparse\n\t            if (index in this) {\n\t                basis = callback(basis, this[index], index);\n\t            }\n\t        }\n\t        return basis;\n\t    }\n\t);\n\t\n\tvar array_indexOf = uncurryThis(\n\t    Array.prototype.indexOf || function (value) {\n\t        // not a very good shim, but good enough for our one use of it\n\t        for (var i = 0; i < this.length; i++) {\n\t            if (this[i] === value) {\n\t                return i;\n\t            }\n\t        }\n\t        return -1;\n\t    }\n\t);\n\t\n\tvar array_map = uncurryThis(\n\t    Array.prototype.map || function (callback, thisp) {\n\t        var self = this;\n\t        var collect = [];\n\t        array_reduce(self, function (undefined, value, index) {\n\t            collect.push(callback.call(thisp, value, index, self));\n\t        }, void 0);\n\t        return collect;\n\t    }\n\t);\n\t\n\tvar object_create = Object.create || function (prototype) {\n\t    function Type() { }\n\t    Type.prototype = prototype;\n\t    return new Type();\n\t};\n\t\n\tvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\t\n\tvar object_keys = Object.keys || function (object) {\n\t    var keys = [];\n\t    for (var key in object) {\n\t        if (object_hasOwnProperty(object, key)) {\n\t            keys.push(key);\n\t        }\n\t    }\n\t    return keys;\n\t};\n\t\n\tvar object_toString = uncurryThis(Object.prototype.toString);\n\t\n\tfunction isObject(value) {\n\t    return value === Object(value);\n\t}\n\t\n\t// generator related shims\n\t\n\t// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\n\tfunction isStopIteration(exception) {\n\t    return (\n\t        object_toString(exception) === \"[object StopIteration]\" ||\n\t        exception instanceof QReturnValue\n\t    );\n\t}\n\t\n\t// FIXME: Remove this helper and Q.return once ES6 generators are in\n\t// SpiderMonkey.\n\tvar QReturnValue;\n\tif (typeof ReturnValue !== \"undefined\") {\n\t    QReturnValue = ReturnValue;\n\t} else {\n\t    QReturnValue = function (value) {\n\t        this.value = value;\n\t    };\n\t}\n\t\n\t// long stack traces\n\t\n\tvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\t\n\tfunction makeStackTraceLong(error, promise) {\n\t    // If possible, transform the error stack trace by removing Node and Q\n\t    // cruft, then concatenating with the stack trace of `promise`. See #57.\n\t    if (hasStacks &&\n\t        promise.stack &&\n\t        typeof error === \"object\" &&\n\t        error !== null &&\n\t        error.stack &&\n\t        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n\t    ) {\n\t        var stacks = [];\n\t        for (var p = promise; !!p; p = p.source) {\n\t            if (p.stack) {\n\t                stacks.unshift(p.stack);\n\t            }\n\t        }\n\t        stacks.unshift(error.stack);\n\t\n\t        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n\t        error.stack = filterStackString(concatedStacks);\n\t    }\n\t}\n\t\n\tfunction filterStackString(stackString) {\n\t    var lines = stackString.split(\"\\n\");\n\t    var desiredLines = [];\n\t    for (var i = 0; i < lines.length; ++i) {\n\t        var line = lines[i];\n\t\n\t        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n\t            desiredLines.push(line);\n\t        }\n\t    }\n\t    return desiredLines.join(\"\\n\");\n\t}\n\t\n\tfunction isNodeFrame(stackLine) {\n\t    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n\t           stackLine.indexOf(\"(node.js:\") !== -1;\n\t}\n\t\n\tfunction getFileNameAndLineNumber(stackLine) {\n\t    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n\t    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n\t    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n\t    if (attempt1) {\n\t        return [attempt1[1], Number(attempt1[2])];\n\t    }\n\t\n\t    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n\t    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n\t    if (attempt2) {\n\t        return [attempt2[1], Number(attempt2[2])];\n\t    }\n\t\n\t    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n\t    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n\t    if (attempt3) {\n\t        return [attempt3[1], Number(attempt3[2])];\n\t    }\n\t}\n\t\n\tfunction isInternalFrame(stackLine) {\n\t    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\t\n\t    if (!fileNameAndLineNumber) {\n\t        return false;\n\t    }\n\t\n\t    var fileName = fileNameAndLineNumber[0];\n\t    var lineNumber = fileNameAndLineNumber[1];\n\t\n\t    return fileName === qFileName &&\n\t        lineNumber >= qStartingLine &&\n\t        lineNumber <= qEndingLine;\n\t}\n\t\n\t// discover own file name and line number range for filtering stack\n\t// traces\n\tfunction captureLine() {\n\t    if (!hasStacks) {\n\t        return;\n\t    }\n\t\n\t    try {\n\t        throw new Error();\n\t    } catch (e) {\n\t        var lines = e.stack.split(\"\\n\");\n\t        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n\t        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n\t        if (!fileNameAndLineNumber) {\n\t            return;\n\t        }\n\t\n\t        qFileName = fileNameAndLineNumber[0];\n\t        return fileNameAndLineNumber[1];\n\t    }\n\t}\n\t\n\tfunction deprecate(callback, name, alternative) {\n\t    return function () {\n\t        if (typeof console !== \"undefined\" &&\n\t            typeof console.warn === \"function\") {\n\t            console.warn(name + \" is deprecated, use \" + alternative +\n\t                         \" instead.\", new Error(\"\").stack);\n\t        }\n\t        return callback.apply(callback, arguments);\n\t    };\n\t}\n\t\n\t// end of shims\n\t// beginning of real work\n\t\n\t/**\n\t * Constructs a promise for an immediate reference, passes promises through, or\n\t * coerces promises from different systems.\n\t * @param value immediate reference or promise\n\t */\n\tfunction Q(value) {\n\t    // If the object is already a Promise, return it directly.  This enables\n\t    // the resolve function to both be used to created references from objects,\n\t    // but to tolerably coerce non-promises to promises.\n\t    if (value instanceof Promise) {\n\t        return value;\n\t    }\n\t\n\t    // assimilate thenables\n\t    if (isPromiseAlike(value)) {\n\t        return coerce(value);\n\t    } else {\n\t        return fulfill(value);\n\t    }\n\t}\n\tQ.resolve = Q;\n\t\n\t/**\n\t * Performs a task in a future turn of the event loop.\n\t * @param {Function} task\n\t */\n\tQ.nextTick = nextTick;\n\t\n\t/**\n\t * Controls whether or not long stack traces will be on\n\t */\n\tQ.longStackSupport = false;\n\t\n\t// enable long stacks if Q_DEBUG is set\n\tif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n\t    Q.longStackSupport = true;\n\t}\n\t\n\t/**\n\t * Constructs a {promise, resolve, reject} object.\n\t *\n\t * `resolve` is a callback to invoke with a more resolved value for the\n\t * promise. To fulfill the promise, invoke `resolve` with any value that is\n\t * not a thenable. To reject the promise, invoke `resolve` with a rejected\n\t * thenable, or invoke `reject` with the reason directly. To resolve the\n\t * promise to another thenable, thus putting it in the same state, invoke\n\t * `resolve` with that other thenable.\n\t */\n\tQ.defer = defer;\n\tfunction defer() {\n\t    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n\t    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n\t    // element of the messages array is itself an array of complete arguments to\n\t    // forward to the resolved promise.  We coerce the resolution value to a\n\t    // promise using the `resolve` function because it handles both fully\n\t    // non-thenable values and other thenables gracefully.\n\t    var messages = [], progressListeners = [], resolvedPromise;\n\t\n\t    var deferred = object_create(defer.prototype);\n\t    var promise = object_create(Promise.prototype);\n\t\n\t    promise.promiseDispatch = function (resolve, op, operands) {\n\t        var args = array_slice(arguments);\n\t        if (messages) {\n\t            messages.push(args);\n\t            if (op === \"when\" && operands[1]) { // progress operand\n\t                progressListeners.push(operands[1]);\n\t            }\n\t        } else {\n\t            Q.nextTick(function () {\n\t                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n\t            });\n\t        }\n\t    };\n\t\n\t    // XXX deprecated\n\t    promise.valueOf = function () {\n\t        if (messages) {\n\t            return promise;\n\t        }\n\t        var nearerValue = nearer(resolvedPromise);\n\t        if (isPromise(nearerValue)) {\n\t            resolvedPromise = nearerValue; // shorten chain\n\t        }\n\t        return nearerValue;\n\t    };\n\t\n\t    promise.inspect = function () {\n\t        if (!resolvedPromise) {\n\t            return { state: \"pending\" };\n\t        }\n\t        return resolvedPromise.inspect();\n\t    };\n\t\n\t    if (Q.longStackSupport && hasStacks) {\n\t        try {\n\t            throw new Error();\n\t        } catch (e) {\n\t            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n\t            // accessor around; that causes memory leaks as per GH-111. Just\n\t            // reify the stack trace as a string ASAP.\n\t            //\n\t            // At the same time, cut off the first line; it's always just\n\t            // \"[object Promise]\\n\", as per the `toString`.\n\t            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n\t        }\n\t    }\n\t\n\t    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n\t    // consolidating them into `become`, since otherwise we'd create new\n\t    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\t\n\t    function become(newPromise) {\n\t        resolvedPromise = newPromise;\n\t        promise.source = newPromise;\n\t\n\t        array_reduce(messages, function (undefined, message) {\n\t            Q.nextTick(function () {\n\t                newPromise.promiseDispatch.apply(newPromise, message);\n\t            });\n\t        }, void 0);\n\t\n\t        messages = void 0;\n\t        progressListeners = void 0;\n\t    }\n\t\n\t    deferred.promise = promise;\n\t    deferred.resolve = function (value) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\t\n\t        become(Q(value));\n\t    };\n\t\n\t    deferred.fulfill = function (value) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\t\n\t        become(fulfill(value));\n\t    };\n\t    deferred.reject = function (reason) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\t\n\t        become(reject(reason));\n\t    };\n\t    deferred.notify = function (progress) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\t\n\t        array_reduce(progressListeners, function (undefined, progressListener) {\n\t            Q.nextTick(function () {\n\t                progressListener(progress);\n\t            });\n\t        }, void 0);\n\t    };\n\t\n\t    return deferred;\n\t}\n\t\n\t/**\n\t * Creates a Node-style callback that will resolve or reject the deferred\n\t * promise.\n\t * @returns a nodeback\n\t */\n\tdefer.prototype.makeNodeResolver = function () {\n\t    var self = this;\n\t    return function (error, value) {\n\t        if (error) {\n\t            self.reject(error);\n\t        } else if (arguments.length > 2) {\n\t            self.resolve(array_slice(arguments, 1));\n\t        } else {\n\t            self.resolve(value);\n\t        }\n\t    };\n\t};\n\t\n\t/**\n\t * @param resolver {Function} a function that returns nothing and accepts\n\t * the resolve, reject, and notify functions for a deferred.\n\t * @returns a promise that may be resolved with the given resolve and reject\n\t * functions, or rejected by a thrown exception in resolver\n\t */\n\tQ.Promise = promise; // ES6\n\tQ.promise = promise;\n\tfunction promise(resolver) {\n\t    if (typeof resolver !== \"function\") {\n\t        throw new TypeError(\"resolver must be a function.\");\n\t    }\n\t    var deferred = defer();\n\t    try {\n\t        resolver(deferred.resolve, deferred.reject, deferred.notify);\n\t    } catch (reason) {\n\t        deferred.reject(reason);\n\t    }\n\t    return deferred.promise;\n\t}\n\t\n\tpromise.race = race; // ES6\n\tpromise.all = all; // ES6\n\tpromise.reject = reject; // ES6\n\tpromise.resolve = Q; // ES6\n\t\n\t// XXX experimental.  This method is a way to denote that a local value is\n\t// serializable and should be immediately dispatched to a remote upon request,\n\t// instead of passing a reference.\n\tQ.passByCopy = function (object) {\n\t    //freeze(object);\n\t    //passByCopies.set(object, true);\n\t    return object;\n\t};\n\t\n\tPromise.prototype.passByCopy = function () {\n\t    //freeze(object);\n\t    //passByCopies.set(object, true);\n\t    return this;\n\t};\n\t\n\t/**\n\t * If two promises eventually fulfill to the same value, promises that value,\n\t * but otherwise rejects.\n\t * @param x {Any*}\n\t * @param y {Any*}\n\t * @returns {Any*} a promise for x and y if they are the same, but a rejection\n\t * otherwise.\n\t *\n\t */\n\tQ.join = function (x, y) {\n\t    return Q(x).join(y);\n\t};\n\t\n\tPromise.prototype.join = function (that) {\n\t    return Q([this, that]).spread(function (x, y) {\n\t        if (x === y) {\n\t            // TODO: \"===\" should be Object.is or equiv\n\t            return x;\n\t        } else {\n\t            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n\t        }\n\t    });\n\t};\n\t\n\t/**\n\t * Returns a promise for the first of an array of promises to become settled.\n\t * @param answers {Array[Any*]} promises to race\n\t * @returns {Any*} the first promise to be settled\n\t */\n\tQ.race = race;\n\tfunction race(answerPs) {\n\t    return promise(function (resolve, reject) {\n\t        // Switch to this once we can assume at least ES5\n\t        // answerPs.forEach(function (answerP) {\n\t        //     Q(answerP).then(resolve, reject);\n\t        // });\n\t        // Use this in the meantime\n\t        for (var i = 0, len = answerPs.length; i < len; i++) {\n\t            Q(answerPs[i]).then(resolve, reject);\n\t        }\n\t    });\n\t}\n\t\n\tPromise.prototype.race = function () {\n\t    return this.then(Q.race);\n\t};\n\t\n\t/**\n\t * Constructs a Promise with a promise descriptor object and optional fallback\n\t * function.  The descriptor contains methods like when(rejected), get(name),\n\t * set(name, value), post(name, args), and delete(name), which all\n\t * return either a value, a promise for a value, or a rejection.  The fallback\n\t * accepts the operation name, a resolver, and any further arguments that would\n\t * have been forwarded to the appropriate method above had a method been\n\t * provided with the proper name.  The API makes no guarantees about the nature\n\t * of the returned object, apart from that it is usable whereever promises are\n\t * bought and sold.\n\t */\n\tQ.makePromise = Promise;\n\tfunction Promise(descriptor, fallback, inspect) {\n\t    if (fallback === void 0) {\n\t        fallback = function (op) {\n\t            return reject(new Error(\n\t                \"Promise does not support operation: \" + op\n\t            ));\n\t        };\n\t    }\n\t    if (inspect === void 0) {\n\t        inspect = function () {\n\t            return {state: \"unknown\"};\n\t        };\n\t    }\n\t\n\t    var promise = object_create(Promise.prototype);\n\t\n\t    promise.promiseDispatch = function (resolve, op, args) {\n\t        var result;\n\t        try {\n\t            if (descriptor[op]) {\n\t                result = descriptor[op].apply(promise, args);\n\t            } else {\n\t                result = fallback.call(promise, op, args);\n\t            }\n\t        } catch (exception) {\n\t            result = reject(exception);\n\t        }\n\t        if (resolve) {\n\t            resolve(result);\n\t        }\n\t    };\n\t\n\t    promise.inspect = inspect;\n\t\n\t    // XXX deprecated `valueOf` and `exception` support\n\t    if (inspect) {\n\t        var inspected = inspect();\n\t        if (inspected.state === \"rejected\") {\n\t            promise.exception = inspected.reason;\n\t        }\n\t\n\t        promise.valueOf = function () {\n\t            var inspected = inspect();\n\t            if (inspected.state === \"pending\" ||\n\t                inspected.state === \"rejected\") {\n\t                return promise;\n\t            }\n\t            return inspected.value;\n\t        };\n\t    }\n\t\n\t    return promise;\n\t}\n\t\n\tPromise.prototype.toString = function () {\n\t    return \"[object Promise]\";\n\t};\n\t\n\tPromise.prototype.then = function (fulfilled, rejected, progressed) {\n\t    var self = this;\n\t    var deferred = defer();\n\t    var done = false;   // ensure the untrusted promise makes at most a\n\t                        // single call to one of the callbacks\n\t\n\t    function _fulfilled(value) {\n\t        try {\n\t            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n\t        } catch (exception) {\n\t            return reject(exception);\n\t        }\n\t    }\n\t\n\t    function _rejected(exception) {\n\t        if (typeof rejected === \"function\") {\n\t            makeStackTraceLong(exception, self);\n\t            try {\n\t                return rejected(exception);\n\t            } catch (newException) {\n\t                return reject(newException);\n\t            }\n\t        }\n\t        return reject(exception);\n\t    }\n\t\n\t    function _progressed(value) {\n\t        return typeof progressed === \"function\" ? progressed(value) : value;\n\t    }\n\t\n\t    Q.nextTick(function () {\n\t        self.promiseDispatch(function (value) {\n\t            if (done) {\n\t                return;\n\t            }\n\t            done = true;\n\t\n\t            deferred.resolve(_fulfilled(value));\n\t        }, \"when\", [function (exception) {\n\t            if (done) {\n\t                return;\n\t            }\n\t            done = true;\n\t\n\t            deferred.resolve(_rejected(exception));\n\t        }]);\n\t    });\n\t\n\t    // Progress propagator need to be attached in the current tick.\n\t    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n\t        var newValue;\n\t        var threw = false;\n\t        try {\n\t            newValue = _progressed(value);\n\t        } catch (e) {\n\t            threw = true;\n\t            if (Q.onerror) {\n\t                Q.onerror(e);\n\t            } else {\n\t                throw e;\n\t            }\n\t        }\n\t\n\t        if (!threw) {\n\t            deferred.notify(newValue);\n\t        }\n\t    }]);\n\t\n\t    return deferred.promise;\n\t};\n\t\n\tQ.tap = function (promise, callback) {\n\t    return Q(promise).tap(callback);\n\t};\n\t\n\t/**\n\t * Works almost like \"finally\", but not called for rejections.\n\t * Original resolution value is passed through callback unaffected.\n\t * Callback may return a promise that will be awaited for.\n\t * @param {Function} callback\n\t * @returns {Q.Promise}\n\t * @example\n\t * doSomething()\n\t *   .then(...)\n\t *   .tap(console.log)\n\t *   .then(...);\n\t */\n\tPromise.prototype.tap = function (callback) {\n\t    callback = Q(callback);\n\t\n\t    return this.then(function (value) {\n\t        return callback.fcall(value).thenResolve(value);\n\t    });\n\t};\n\t\n\t/**\n\t * Registers an observer on a promise.\n\t *\n\t * Guarantees:\n\t *\n\t * 1. that fulfilled and rejected will be called only once.\n\t * 2. that either the fulfilled callback or the rejected callback will be\n\t *    called, but not both.\n\t * 3. that fulfilled and rejected will not be called in this turn.\n\t *\n\t * @param value      promise or immediate reference to observe\n\t * @param fulfilled  function to be called with the fulfilled value\n\t * @param rejected   function to be called with the rejection exception\n\t * @param progressed function to be called on any progress notifications\n\t * @return promise for the return value from the invoked callback\n\t */\n\tQ.when = when;\n\tfunction when(value, fulfilled, rejected, progressed) {\n\t    return Q(value).then(fulfilled, rejected, progressed);\n\t}\n\t\n\tPromise.prototype.thenResolve = function (value) {\n\t    return this.then(function () { return value; });\n\t};\n\t\n\tQ.thenResolve = function (promise, value) {\n\t    return Q(promise).thenResolve(value);\n\t};\n\t\n\tPromise.prototype.thenReject = function (reason) {\n\t    return this.then(function () { throw reason; });\n\t};\n\t\n\tQ.thenReject = function (promise, reason) {\n\t    return Q(promise).thenReject(reason);\n\t};\n\t\n\t/**\n\t * If an object is not a promise, it is as \"near\" as possible.\n\t * If a promise is rejected, it is as \"near\" as possible too.\n\t * If it’s a fulfilled promise, the fulfillment value is nearer.\n\t * If it’s a deferred promise and the deferred has been resolved, the\n\t * resolution is \"nearer\".\n\t * @param object\n\t * @returns most resolved (nearest) form of the object\n\t */\n\t\n\t// XXX should we re-do this?\n\tQ.nearer = nearer;\n\tfunction nearer(value) {\n\t    if (isPromise(value)) {\n\t        var inspected = value.inspect();\n\t        if (inspected.state === \"fulfilled\") {\n\t            return inspected.value;\n\t        }\n\t    }\n\t    return value;\n\t}\n\t\n\t/**\n\t * @returns whether the given object is a promise.\n\t * Otherwise it is a fulfilled value.\n\t */\n\tQ.isPromise = isPromise;\n\tfunction isPromise(object) {\n\t    return object instanceof Promise;\n\t}\n\t\n\tQ.isPromiseAlike = isPromiseAlike;\n\tfunction isPromiseAlike(object) {\n\t    return isObject(object) && typeof object.then === \"function\";\n\t}\n\t\n\t/**\n\t * @returns whether the given object is a pending promise, meaning not\n\t * fulfilled or rejected.\n\t */\n\tQ.isPending = isPending;\n\tfunction isPending(object) {\n\t    return isPromise(object) && object.inspect().state === \"pending\";\n\t}\n\t\n\tPromise.prototype.isPending = function () {\n\t    return this.inspect().state === \"pending\";\n\t};\n\t\n\t/**\n\t * @returns whether the given object is a value or fulfilled\n\t * promise.\n\t */\n\tQ.isFulfilled = isFulfilled;\n\tfunction isFulfilled(object) {\n\t    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n\t}\n\t\n\tPromise.prototype.isFulfilled = function () {\n\t    return this.inspect().state === \"fulfilled\";\n\t};\n\t\n\t/**\n\t * @returns whether the given object is a rejected promise.\n\t */\n\tQ.isRejected = isRejected;\n\tfunction isRejected(object) {\n\t    return isPromise(object) && object.inspect().state === \"rejected\";\n\t}\n\t\n\tPromise.prototype.isRejected = function () {\n\t    return this.inspect().state === \"rejected\";\n\t};\n\t\n\t//// BEGIN UNHANDLED REJECTION TRACKING\n\t\n\t// This promise library consumes exceptions thrown in handlers so they can be\n\t// handled by a subsequent promise.  The exceptions get added to this array when\n\t// they are created, and removed when they are handled.  Note that in ES6 or\n\t// shimmed environments, this would naturally be a `Set`.\n\tvar unhandledReasons = [];\n\tvar unhandledRejections = [];\n\tvar reportedUnhandledRejections = [];\n\tvar trackUnhandledRejections = true;\n\t\n\tfunction resetUnhandledRejections() {\n\t    unhandledReasons.length = 0;\n\t    unhandledRejections.length = 0;\n\t\n\t    if (!trackUnhandledRejections) {\n\t        trackUnhandledRejections = true;\n\t    }\n\t}\n\t\n\tfunction trackRejection(promise, reason) {\n\t    if (!trackUnhandledRejections) {\n\t        return;\n\t    }\n\t    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n\t        Q.nextTick.runAfter(function () {\n\t            if (array_indexOf(unhandledRejections, promise) !== -1) {\n\t                process.emit(\"unhandledRejection\", reason, promise);\n\t                reportedUnhandledRejections.push(promise);\n\t            }\n\t        });\n\t    }\n\t\n\t    unhandledRejections.push(promise);\n\t    if (reason && typeof reason.stack !== \"undefined\") {\n\t        unhandledReasons.push(reason.stack);\n\t    } else {\n\t        unhandledReasons.push(\"(no stack) \" + reason);\n\t    }\n\t}\n\t\n\tfunction untrackRejection(promise) {\n\t    if (!trackUnhandledRejections) {\n\t        return;\n\t    }\n\t\n\t    var at = array_indexOf(unhandledRejections, promise);\n\t    if (at !== -1) {\n\t        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n\t            Q.nextTick.runAfter(function () {\n\t                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n\t                if (atReport !== -1) {\n\t                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n\t                    reportedUnhandledRejections.splice(atReport, 1);\n\t                }\n\t            });\n\t        }\n\t        unhandledRejections.splice(at, 1);\n\t        unhandledReasons.splice(at, 1);\n\t    }\n\t}\n\t\n\tQ.resetUnhandledRejections = resetUnhandledRejections;\n\t\n\tQ.getUnhandledReasons = function () {\n\t    // Make a copy so that consumers can't interfere with our internal state.\n\t    return unhandledReasons.slice();\n\t};\n\t\n\tQ.stopUnhandledRejectionTracking = function () {\n\t    resetUnhandledRejections();\n\t    trackUnhandledRejections = false;\n\t};\n\t\n\tresetUnhandledRejections();\n\t\n\t//// END UNHANDLED REJECTION TRACKING\n\t\n\t/**\n\t * Constructs a rejected promise.\n\t * @param reason value describing the failure\n\t */\n\tQ.reject = reject;\n\tfunction reject(reason) {\n\t    var rejection = Promise({\n\t        \"when\": function (rejected) {\n\t            // note that the error has been handled\n\t            if (rejected) {\n\t                untrackRejection(this);\n\t            }\n\t            return rejected ? rejected(reason) : this;\n\t        }\n\t    }, function fallback() {\n\t        return this;\n\t    }, function inspect() {\n\t        return { state: \"rejected\", reason: reason };\n\t    });\n\t\n\t    // Note that the reason has not been handled.\n\t    trackRejection(rejection, reason);\n\t\n\t    return rejection;\n\t}\n\t\n\t/**\n\t * Constructs a fulfilled promise for an immediate reference.\n\t * @param value immediate reference\n\t */\n\tQ.fulfill = fulfill;\n\tfunction fulfill(value) {\n\t    return Promise({\n\t        \"when\": function () {\n\t            return value;\n\t        },\n\t        \"get\": function (name) {\n\t            return value[name];\n\t        },\n\t        \"set\": function (name, rhs) {\n\t            value[name] = rhs;\n\t        },\n\t        \"delete\": function (name) {\n\t            delete value[name];\n\t        },\n\t        \"post\": function (name, args) {\n\t            // Mark Miller proposes that post with no name should apply a\n\t            // promised function.\n\t            if (name === null || name === void 0) {\n\t                return value.apply(void 0, args);\n\t            } else {\n\t                return value[name].apply(value, args);\n\t            }\n\t        },\n\t        \"apply\": function (thisp, args) {\n\t            return value.apply(thisp, args);\n\t        },\n\t        \"keys\": function () {\n\t            return object_keys(value);\n\t        }\n\t    }, void 0, function inspect() {\n\t        return { state: \"fulfilled\", value: value };\n\t    });\n\t}\n\t\n\t/**\n\t * Converts thenables to Q promises.\n\t * @param promise thenable promise\n\t * @returns a Q promise\n\t */\n\tfunction coerce(promise) {\n\t    var deferred = defer();\n\t    Q.nextTick(function () {\n\t        try {\n\t            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n\t        } catch (exception) {\n\t            deferred.reject(exception);\n\t        }\n\t    });\n\t    return deferred.promise;\n\t}\n\t\n\t/**\n\t * Annotates an object such that it will never be\n\t * transferred away from this process over any promise\n\t * communication channel.\n\t * @param object\n\t * @returns promise a wrapping of that object that\n\t * additionally responds to the \"isDef\" message\n\t * without a rejection.\n\t */\n\tQ.master = master;\n\tfunction master(object) {\n\t    return Promise({\n\t        \"isDef\": function () {}\n\t    }, function fallback(op, args) {\n\t        return dispatch(object, op, args);\n\t    }, function () {\n\t        return Q(object).inspect();\n\t    });\n\t}\n\t\n\t/**\n\t * Spreads the values of a promised array of arguments into the\n\t * fulfillment callback.\n\t * @param fulfilled callback that receives variadic arguments from the\n\t * promised array\n\t * @param rejected callback that receives the exception if the promise\n\t * is rejected.\n\t * @returns a promise for the return value or thrown exception of\n\t * either callback.\n\t */\n\tQ.spread = spread;\n\tfunction spread(value, fulfilled, rejected) {\n\t    return Q(value).spread(fulfilled, rejected);\n\t}\n\t\n\tPromise.prototype.spread = function (fulfilled, rejected) {\n\t    return this.all().then(function (array) {\n\t        return fulfilled.apply(void 0, array);\n\t    }, rejected);\n\t};\n\t\n\t/**\n\t * The async function is a decorator for generator functions, turning\n\t * them into asynchronous generators.  Although generators are only part\n\t * of the newest ECMAScript 6 drafts, this code does not cause syntax\n\t * errors in older engines.  This code should continue to work and will\n\t * in fact improve over time as the language improves.\n\t *\n\t * ES6 generators are currently part of V8 version 3.19 with the\n\t * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n\t * for longer, but under an older Python-inspired form.  This function\n\t * works on both kinds of generators.\n\t *\n\t * Decorates a generator function such that:\n\t *  - it may yield promises\n\t *  - execution will continue when that promise is fulfilled\n\t *  - the value of the yield expression will be the fulfilled value\n\t *  - it returns a promise for the return value (when the generator\n\t *    stops iterating)\n\t *  - the decorated function returns a promise for the return value\n\t *    of the generator or the first rejected promise among those\n\t *    yielded.\n\t *  - if an error is thrown in the generator, it propagates through\n\t *    every following yield until it is caught, or until it escapes\n\t *    the generator function altogether, and is translated into a\n\t *    rejection for the promise returned by the decorated generator.\n\t */\n\tQ.async = async;\n\tfunction async(makeGenerator) {\n\t    return function () {\n\t        // when verb is \"send\", arg is a value\n\t        // when verb is \"throw\", arg is an exception\n\t        function continuer(verb, arg) {\n\t            var result;\n\t\n\t            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n\t            // engine that has a deployed base of browsers that support generators.\n\t            // However, SM's generators use the Python-inspired semantics of\n\t            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n\t            // like to make it possible to use generators in deployed browsers, so\n\t            // we also support Python-style generators.  At some point we can remove\n\t            // this block.\n\t\n\t            if (typeof StopIteration === \"undefined\") {\n\t                // ES6 Generators\n\t                try {\n\t                    result = generator[verb](arg);\n\t                } catch (exception) {\n\t                    return reject(exception);\n\t                }\n\t                if (result.done) {\n\t                    return Q(result.value);\n\t                } else {\n\t                    return when(result.value, callback, errback);\n\t                }\n\t            } else {\n\t                // SpiderMonkey Generators\n\t                // FIXME: Remove this case when SM does ES6 generators.\n\t                try {\n\t                    result = generator[verb](arg);\n\t                } catch (exception) {\n\t                    if (isStopIteration(exception)) {\n\t                        return Q(exception.value);\n\t                    } else {\n\t                        return reject(exception);\n\t                    }\n\t                }\n\t                return when(result, callback, errback);\n\t            }\n\t        }\n\t        var generator = makeGenerator.apply(this, arguments);\n\t        var callback = continuer.bind(continuer, \"next\");\n\t        var errback = continuer.bind(continuer, \"throw\");\n\t        return callback();\n\t    };\n\t}\n\t\n\t/**\n\t * The spawn function is a small wrapper around async that immediately\n\t * calls the generator and also ends the promise chain, so that any\n\t * unhandled errors are thrown instead of forwarded to the error\n\t * handler. This is useful because it's extremely common to run\n\t * generators at the top-level to work with libraries.\n\t */\n\tQ.spawn = spawn;\n\tfunction spawn(makeGenerator) {\n\t    Q.done(Q.async(makeGenerator)());\n\t}\n\t\n\t// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n\t/**\n\t * Throws a ReturnValue exception to stop an asynchronous generator.\n\t *\n\t * This interface is a stop-gap measure to support generator return\n\t * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n\t * generators like Chromium 29, just use \"return\" in your generator\n\t * functions.\n\t *\n\t * @param value the return value for the surrounding generator\n\t * @throws ReturnValue exception with the value.\n\t * @example\n\t * // ES6 style\n\t * Q.async(function* () {\n\t *      var foo = yield getFooPromise();\n\t *      var bar = yield getBarPromise();\n\t *      return foo + bar;\n\t * })\n\t * // Older SpiderMonkey style\n\t * Q.async(function () {\n\t *      var foo = yield getFooPromise();\n\t *      var bar = yield getBarPromise();\n\t *      Q.return(foo + bar);\n\t * })\n\t */\n\tQ[\"return\"] = _return;\n\tfunction _return(value) {\n\t    throw new QReturnValue(value);\n\t}\n\t\n\t/**\n\t * The promised function decorator ensures that any promise arguments\n\t * are settled and passed as values (`this` is also settled and passed\n\t * as a value).  It will also ensure that the result of a function is\n\t * always a promise.\n\t *\n\t * @example\n\t * var add = Q.promised(function (a, b) {\n\t *     return a + b;\n\t * });\n\t * add(Q(a), Q(B));\n\t *\n\t * @param {function} callback The function to decorate\n\t * @returns {function} a function that has been decorated.\n\t */\n\tQ.promised = promised;\n\tfunction promised(callback) {\n\t    return function () {\n\t        return spread([this, all(arguments)], function (self, args) {\n\t            return callback.apply(self, args);\n\t        });\n\t    };\n\t}\n\t\n\t/**\n\t * sends a message to a value in a future turn\n\t * @param object* the recipient\n\t * @param op the name of the message operation, e.g., \"when\",\n\t * @param args further arguments to be forwarded to the operation\n\t * @returns result {Promise} a promise for the result of the operation\n\t */\n\tQ.dispatch = dispatch;\n\tfunction dispatch(object, op, args) {\n\t    return Q(object).dispatch(op, args);\n\t}\n\t\n\tPromise.prototype.dispatch = function (op, args) {\n\t    var self = this;\n\t    var deferred = defer();\n\t    Q.nextTick(function () {\n\t        self.promiseDispatch(deferred.resolve, op, args);\n\t    });\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Gets the value of a property in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of property to get\n\t * @return promise for the property value\n\t */\n\tQ.get = function (object, key) {\n\t    return Q(object).dispatch(\"get\", [key]);\n\t};\n\t\n\tPromise.prototype.get = function (key) {\n\t    return this.dispatch(\"get\", [key]);\n\t};\n\t\n\t/**\n\t * Sets the value of a property in a future turn.\n\t * @param object    promise or immediate reference for object object\n\t * @param name      name of property to set\n\t * @param value     new value of property\n\t * @return promise for the return value\n\t */\n\tQ.set = function (object, key, value) {\n\t    return Q(object).dispatch(\"set\", [key, value]);\n\t};\n\t\n\tPromise.prototype.set = function (key, value) {\n\t    return this.dispatch(\"set\", [key, value]);\n\t};\n\t\n\t/**\n\t * Deletes a property in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of property to delete\n\t * @return promise for the return value\n\t */\n\tQ.del = // XXX legacy\n\tQ[\"delete\"] = function (object, key) {\n\t    return Q(object).dispatch(\"delete\", [key]);\n\t};\n\t\n\tPromise.prototype.del = // XXX legacy\n\tPromise.prototype[\"delete\"] = function (key) {\n\t    return this.dispatch(\"delete\", [key]);\n\t};\n\t\n\t/**\n\t * Invokes a method in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of method to invoke\n\t * @param value     a value to post, typically an array of\n\t *                  invocation arguments for promises that\n\t *                  are ultimately backed with `resolve` values,\n\t *                  as opposed to those backed with URLs\n\t *                  wherein the posted value can be any\n\t *                  JSON serializable object.\n\t * @return promise for the return value\n\t */\n\t// bound locally because it is used by other methods\n\tQ.mapply = // XXX As proposed by \"Redsandro\"\n\tQ.post = function (object, name, args) {\n\t    return Q(object).dispatch(\"post\", [name, args]);\n\t};\n\t\n\tPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\n\tPromise.prototype.post = function (name, args) {\n\t    return this.dispatch(\"post\", [name, args]);\n\t};\n\t\n\t/**\n\t * Invokes a method in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of method to invoke\n\t * @param ...args   array of invocation arguments\n\t * @return promise for the return value\n\t */\n\tQ.send = // XXX Mark Miller's proposed parlance\n\tQ.mcall = // XXX As proposed by \"Redsandro\"\n\tQ.invoke = function (object, name /*...args*/) {\n\t    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n\t};\n\t\n\tPromise.prototype.send = // XXX Mark Miller's proposed parlance\n\tPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\n\tPromise.prototype.invoke = function (name /*...args*/) {\n\t    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n\t};\n\t\n\t/**\n\t * Applies the promised function in a future turn.\n\t * @param object    promise or immediate reference for target function\n\t * @param args      array of application arguments\n\t */\n\tQ.fapply = function (object, args) {\n\t    return Q(object).dispatch(\"apply\", [void 0, args]);\n\t};\n\t\n\tPromise.prototype.fapply = function (args) {\n\t    return this.dispatch(\"apply\", [void 0, args]);\n\t};\n\t\n\t/**\n\t * Calls the promised function in a future turn.\n\t * @param object    promise or immediate reference for target function\n\t * @param ...args   array of application arguments\n\t */\n\tQ[\"try\"] =\n\tQ.fcall = function (object /* ...args*/) {\n\t    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n\t};\n\t\n\tPromise.prototype.fcall = function (/*...args*/) {\n\t    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n\t};\n\t\n\t/**\n\t * Binds the promised function, transforming return values into a fulfilled\n\t * promise and thrown errors into a rejected one.\n\t * @param object    promise or immediate reference for target function\n\t * @param ...args   array of application arguments\n\t */\n\tQ.fbind = function (object /*...args*/) {\n\t    var promise = Q(object);\n\t    var args = array_slice(arguments, 1);\n\t    return function fbound() {\n\t        return promise.dispatch(\"apply\", [\n\t            this,\n\t            args.concat(array_slice(arguments))\n\t        ]);\n\t    };\n\t};\n\tPromise.prototype.fbind = function (/*...args*/) {\n\t    var promise = this;\n\t    var args = array_slice(arguments);\n\t    return function fbound() {\n\t        return promise.dispatch(\"apply\", [\n\t            this,\n\t            args.concat(array_slice(arguments))\n\t        ]);\n\t    };\n\t};\n\t\n\t/**\n\t * Requests the names of the owned properties of a promised\n\t * object in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @return promise for the keys of the eventually settled object\n\t */\n\tQ.keys = function (object) {\n\t    return Q(object).dispatch(\"keys\", []);\n\t};\n\t\n\tPromise.prototype.keys = function () {\n\t    return this.dispatch(\"keys\", []);\n\t};\n\t\n\t/**\n\t * Turns an array of promises into a promise for an array.  If any of\n\t * the promises gets rejected, the whole array is rejected immediately.\n\t * @param {Array*} an array (or promise for an array) of values (or\n\t * promises for values)\n\t * @returns a promise for an array of the corresponding values\n\t */\n\t// By Mark Miller\n\t// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\n\tQ.all = all;\n\tfunction all(promises) {\n\t    return when(promises, function (promises) {\n\t        var pendingCount = 0;\n\t        var deferred = defer();\n\t        array_reduce(promises, function (undefined, promise, index) {\n\t            var snapshot;\n\t            if (\n\t                isPromise(promise) &&\n\t                (snapshot = promise.inspect()).state === \"fulfilled\"\n\t            ) {\n\t                promises[index] = snapshot.value;\n\t            } else {\n\t                ++pendingCount;\n\t                when(\n\t                    promise,\n\t                    function (value) {\n\t                        promises[index] = value;\n\t                        if (--pendingCount === 0) {\n\t                            deferred.resolve(promises);\n\t                        }\n\t                    },\n\t                    deferred.reject,\n\t                    function (progress) {\n\t                        deferred.notify({ index: index, value: progress });\n\t                    }\n\t                );\n\t            }\n\t        }, void 0);\n\t        if (pendingCount === 0) {\n\t            deferred.resolve(promises);\n\t        }\n\t        return deferred.promise;\n\t    });\n\t}\n\t\n\tPromise.prototype.all = function () {\n\t    return all(this);\n\t};\n\t\n\t/**\n\t * Returns the first resolved promise of an array. Prior rejected promises are\n\t * ignored.  Rejects only if all promises are rejected.\n\t * @param {Array*} an array containing values or promises for values\n\t * @returns a promise fulfilled with the value of the first resolved promise,\n\t * or a rejected promise if all promises are rejected.\n\t */\n\tQ.any = any;\n\t\n\tfunction any(promises) {\n\t    if (promises.length === 0) {\n\t        return Q.resolve();\n\t    }\n\t\n\t    var deferred = Q.defer();\n\t    var pendingCount = 0;\n\t    array_reduce(promises, function (prev, current, index) {\n\t        var promise = promises[index];\n\t\n\t        pendingCount++;\n\t\n\t        when(promise, onFulfilled, onRejected, onProgress);\n\t        function onFulfilled(result) {\n\t            deferred.resolve(result);\n\t        }\n\t        function onRejected() {\n\t            pendingCount--;\n\t            if (pendingCount === 0) {\n\t                deferred.reject(new Error(\n\t                    \"Can't get fulfillment value from any promise, all \" +\n\t                    \"promises were rejected.\"\n\t                ));\n\t            }\n\t        }\n\t        function onProgress(progress) {\n\t            deferred.notify({\n\t                index: index,\n\t                value: progress\n\t            });\n\t        }\n\t    }, undefined);\n\t\n\t    return deferred.promise;\n\t}\n\t\n\tPromise.prototype.any = function () {\n\t    return any(this);\n\t};\n\t\n\t/**\n\t * Waits for all promises to be settled, either fulfilled or\n\t * rejected.  This is distinct from `all` since that would stop\n\t * waiting at the first rejection.  The promise returned by\n\t * `allResolved` will never be rejected.\n\t * @param promises a promise for an array (or an array) of promises\n\t * (or values)\n\t * @return a promise for an array of promises\n\t */\n\tQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\n\tfunction allResolved(promises) {\n\t    return when(promises, function (promises) {\n\t        promises = array_map(promises, Q);\n\t        return when(all(array_map(promises, function (promise) {\n\t            return when(promise, noop, noop);\n\t        })), function () {\n\t            return promises;\n\t        });\n\t    });\n\t}\n\t\n\tPromise.prototype.allResolved = function () {\n\t    return allResolved(this);\n\t};\n\t\n\t/**\n\t * @see Promise#allSettled\n\t */\n\tQ.allSettled = allSettled;\n\tfunction allSettled(promises) {\n\t    return Q(promises).allSettled();\n\t}\n\t\n\t/**\n\t * Turns an array of promises into a promise for an array of their states (as\n\t * returned by `inspect`) when they have all settled.\n\t * @param {Array[Any*]} values an array (or promise for an array) of values (or\n\t * promises for values)\n\t * @returns {Array[State]} an array of states for the respective values.\n\t */\n\tPromise.prototype.allSettled = function () {\n\t    return this.then(function (promises) {\n\t        return all(array_map(promises, function (promise) {\n\t            promise = Q(promise);\n\t            function regardless() {\n\t                return promise.inspect();\n\t            }\n\t            return promise.then(regardless, regardless);\n\t        }));\n\t    });\n\t};\n\t\n\t/**\n\t * Captures the failure of a promise, giving an oportunity to recover\n\t * with a callback.  If the given promise is fulfilled, the returned\n\t * promise is fulfilled.\n\t * @param {Any*} promise for something\n\t * @param {Function} callback to fulfill the returned promise if the\n\t * given promise is rejected\n\t * @returns a promise for the return value of the callback\n\t */\n\tQ.fail = // XXX legacy\n\tQ[\"catch\"] = function (object, rejected) {\n\t    return Q(object).then(void 0, rejected);\n\t};\n\t\n\tPromise.prototype.fail = // XXX legacy\n\tPromise.prototype[\"catch\"] = function (rejected) {\n\t    return this.then(void 0, rejected);\n\t};\n\t\n\t/**\n\t * Attaches a listener that can respond to progress notifications from a\n\t * promise's originating deferred. This listener receives the exact arguments\n\t * passed to ``deferred.notify``.\n\t * @param {Any*} promise for something\n\t * @param {Function} callback to receive any progress notifications\n\t * @returns the given promise, unchanged\n\t */\n\tQ.progress = progress;\n\tfunction progress(object, progressed) {\n\t    return Q(object).then(void 0, void 0, progressed);\n\t}\n\t\n\tPromise.prototype.progress = function (progressed) {\n\t    return this.then(void 0, void 0, progressed);\n\t};\n\t\n\t/**\n\t * Provides an opportunity to observe the settling of a promise,\n\t * regardless of whether the promise is fulfilled or rejected.  Forwards\n\t * the resolution to the returned promise when the callback is done.\n\t * The callback can return a promise to defer completion.\n\t * @param {Any*} promise\n\t * @param {Function} callback to observe the resolution of the given\n\t * promise, takes no arguments.\n\t * @returns a promise for the resolution of the given promise when\n\t * ``fin`` is done.\n\t */\n\tQ.fin = // XXX legacy\n\tQ[\"finally\"] = function (object, callback) {\n\t    return Q(object)[\"finally\"](callback);\n\t};\n\t\n\tPromise.prototype.fin = // XXX legacy\n\tPromise.prototype[\"finally\"] = function (callback) {\n\t    callback = Q(callback);\n\t    return this.then(function (value) {\n\t        return callback.fcall().then(function () {\n\t            return value;\n\t        });\n\t    }, function (reason) {\n\t        // TODO attempt to recycle the rejection with \"this\".\n\t        return callback.fcall().then(function () {\n\t            throw reason;\n\t        });\n\t    });\n\t};\n\t\n\t/**\n\t * Terminates a chain of promises, forcing rejections to be\n\t * thrown as exceptions.\n\t * @param {Any*} promise at the end of a chain of promises\n\t * @returns nothing\n\t */\n\tQ.done = function (object, fulfilled, rejected, progress) {\n\t    return Q(object).done(fulfilled, rejected, progress);\n\t};\n\t\n\tPromise.prototype.done = function (fulfilled, rejected, progress) {\n\t    var onUnhandledError = function (error) {\n\t        // forward to a future turn so that ``when``\n\t        // does not catch it and turn it into a rejection.\n\t        Q.nextTick(function () {\n\t            makeStackTraceLong(error, promise);\n\t            if (Q.onerror) {\n\t                Q.onerror(error);\n\t            } else {\n\t                throw error;\n\t            }\n\t        });\n\t    };\n\t\n\t    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n\t    var promise = fulfilled || rejected || progress ?\n\t        this.then(fulfilled, rejected, progress) :\n\t        this;\n\t\n\t    if (typeof process === \"object\" && process && process.domain) {\n\t        onUnhandledError = process.domain.bind(onUnhandledError);\n\t    }\n\t\n\t    promise.then(void 0, onUnhandledError);\n\t};\n\t\n\t/**\n\t * Causes a promise to be rejected if it does not get fulfilled before\n\t * some milliseconds time out.\n\t * @param {Any*} promise\n\t * @param {Number} milliseconds timeout\n\t * @param {Any*} custom error message or Error object (optional)\n\t * @returns a promise for the resolution of the given promise if it is\n\t * fulfilled before the timeout, otherwise rejected.\n\t */\n\tQ.timeout = function (object, ms, error) {\n\t    return Q(object).timeout(ms, error);\n\t};\n\t\n\tPromise.prototype.timeout = function (ms, error) {\n\t    var deferred = defer();\n\t    var timeoutId = setTimeout(function () {\n\t        if (!error || \"string\" === typeof error) {\n\t            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n\t            error.code = \"ETIMEDOUT\";\n\t        }\n\t        deferred.reject(error);\n\t    }, ms);\n\t\n\t    this.then(function (value) {\n\t        clearTimeout(timeoutId);\n\t        deferred.resolve(value);\n\t    }, function (exception) {\n\t        clearTimeout(timeoutId);\n\t        deferred.reject(exception);\n\t    }, deferred.notify);\n\t\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Returns a promise for the given value (or promised value), some\n\t * milliseconds after it resolved. Passes rejections immediately.\n\t * @param {Any*} promise\n\t * @param {Number} milliseconds\n\t * @returns a promise for the resolution of the given promise after milliseconds\n\t * time has elapsed since the resolution of the given promise.\n\t * If the given promise rejects, that is passed immediately.\n\t */\n\tQ.delay = function (object, timeout) {\n\t    if (timeout === void 0) {\n\t        timeout = object;\n\t        object = void 0;\n\t    }\n\t    return Q(object).delay(timeout);\n\t};\n\t\n\tPromise.prototype.delay = function (timeout) {\n\t    return this.then(function (value) {\n\t        var deferred = defer();\n\t        setTimeout(function () {\n\t            deferred.resolve(value);\n\t        }, timeout);\n\t        return deferred.promise;\n\t    });\n\t};\n\t\n\t/**\n\t * Passes a continuation to a Node function, which is called with the given\n\t * arguments provided as an array, and returns a promise.\n\t *\n\t *      Q.nfapply(FS.readFile, [__filename])\n\t *      .then(function (content) {\n\t *      })\n\t *\n\t */\n\tQ.nfapply = function (callback, args) {\n\t    return Q(callback).nfapply(args);\n\t};\n\t\n\tPromise.prototype.nfapply = function (args) {\n\t    var deferred = defer();\n\t    var nodeArgs = array_slice(args);\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.fapply(nodeArgs).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Passes a continuation to a Node function, which is called with the given\n\t * arguments provided individually, and returns a promise.\n\t * @example\n\t * Q.nfcall(FS.readFile, __filename)\n\t * .then(function (content) {\n\t * })\n\t *\n\t */\n\tQ.nfcall = function (callback /*...args*/) {\n\t    var args = array_slice(arguments, 1);\n\t    return Q(callback).nfapply(args);\n\t};\n\t\n\tPromise.prototype.nfcall = function (/*...args*/) {\n\t    var nodeArgs = array_slice(arguments);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.fapply(nodeArgs).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Wraps a NodeJS continuation passing function and returns an equivalent\n\t * version that returns a promise.\n\t * @example\n\t * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n\t * .then(console.log)\n\t * .done()\n\t */\n\tQ.nfbind =\n\tQ.denodeify = function (callback /*...args*/) {\n\t    var baseArgs = array_slice(arguments, 1);\n\t    return function () {\n\t        var nodeArgs = baseArgs.concat(array_slice(arguments));\n\t        var deferred = defer();\n\t        nodeArgs.push(deferred.makeNodeResolver());\n\t        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n\t        return deferred.promise;\n\t    };\n\t};\n\t\n\tPromise.prototype.nfbind =\n\tPromise.prototype.denodeify = function (/*...args*/) {\n\t    var args = array_slice(arguments);\n\t    args.unshift(this);\n\t    return Q.denodeify.apply(void 0, args);\n\t};\n\t\n\tQ.nbind = function (callback, thisp /*...args*/) {\n\t    var baseArgs = array_slice(arguments, 2);\n\t    return function () {\n\t        var nodeArgs = baseArgs.concat(array_slice(arguments));\n\t        var deferred = defer();\n\t        nodeArgs.push(deferred.makeNodeResolver());\n\t        function bound() {\n\t            return callback.apply(thisp, arguments);\n\t        }\n\t        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n\t        return deferred.promise;\n\t    };\n\t};\n\t\n\tPromise.prototype.nbind = function (/*thisp, ...args*/) {\n\t    var args = array_slice(arguments, 0);\n\t    args.unshift(this);\n\t    return Q.nbind.apply(void 0, args);\n\t};\n\t\n\t/**\n\t * Calls a method of a Node-style object that accepts a Node-style\n\t * callback with a given array of arguments, plus a provided callback.\n\t * @param object an object that has the named method\n\t * @param {String} name name of the method of object\n\t * @param {Array} args arguments to pass to the method; the callback\n\t * will be provided by Q and appended to these arguments.\n\t * @returns a promise for the value or error\n\t */\n\tQ.nmapply = // XXX As proposed by \"Redsandro\"\n\tQ.npost = function (object, name, args) {\n\t    return Q(object).npost(name, args);\n\t};\n\t\n\tPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\n\tPromise.prototype.npost = function (name, args) {\n\t    var nodeArgs = array_slice(args || []);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Calls a method of a Node-style object that accepts a Node-style\n\t * callback, forwarding the given variadic arguments, plus a provided\n\t * callback argument.\n\t * @param object an object that has the named method\n\t * @param {String} name name of the method of object\n\t * @param ...args arguments to pass to the method; the callback will\n\t * be provided by Q and appended to these arguments.\n\t * @returns a promise for the value or error\n\t */\n\tQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\n\tQ.nmcall = // XXX Based on \"Redsandro's\" proposal\n\tQ.ninvoke = function (object, name /*...args*/) {\n\t    var nodeArgs = array_slice(arguments, 2);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\tPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\n\tPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\n\tPromise.prototype.ninvoke = function (name /*...args*/) {\n\t    var nodeArgs = array_slice(arguments, 1);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * If a function would like to support both Node continuation-passing-style and\n\t * promise-returning-style, it can end its internal promise chain with\n\t * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n\t * elects to use a nodeback, the result will be sent there.  If they do not\n\t * pass a nodeback, they will receive the result promise.\n\t * @param object a result (or a promise for a result)\n\t * @param {Function} nodeback a Node.js-style callback\n\t * @returns either the promise or nothing\n\t */\n\tQ.nodeify = nodeify;\n\tfunction nodeify(object, nodeback) {\n\t    return Q(object).nodeify(nodeback);\n\t}\n\t\n\tPromise.prototype.nodeify = function (nodeback) {\n\t    if (nodeback) {\n\t        this.then(function (value) {\n\t            Q.nextTick(function () {\n\t                nodeback(null, value);\n\t            });\n\t        }, function (error) {\n\t            Q.nextTick(function () {\n\t                nodeback(error);\n\t            });\n\t        });\n\t    } else {\n\t        return this;\n\t    }\n\t};\n\t\n\t// All code before this point will be filtered from stack traces.\n\tvar qEndingLine = captureLine();\n\t\n\treturn Q;\n\t\n\t});\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Copyright 2015, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t */\n\t\n\tvar Q = __webpack_require__(6);\n\tvar respoke = __webpack_require__(1);\n\tvar log = respoke.log;\n\t\n\t/**\n\t * `respoke.Client` is the top-level interface to the API. Interacting with Respoke should be done using\n\t * a `respoke.Client` instance.\n\t *\n\t * There are two ways to get a client:\n\t *\n\t *      var client = respoke.createClient(clientParams);\n\t *      // . . . set stuff up, then . . .\n\t *      client.connect(connectParams);\n\t *\n\t * or\n\t *\n\t *      // creates client and connects to Respoke all at once\n\t *      var client = respoke.connect(allParams);\n\t *\n\t * A client does the following things:\n\t *\n\t * 1. authentication with the Respoke API\n\t * 1. receives server-side app-specific information\n\t * 1. tracks connections and presence\n\t * 1. provides methods to get and interact with tracked entities (like groups and endpoints)\n\t * 1. stores default settings for calls and direct connections\n\t * 1. automatically reconnects to the API when network activity is lost*\n\t *\n\t * *If `developmentMode` is set to true. If not using `developmentMode`, disable automatic\n\t * reconnect by sending `reconnect: false` and listening to the Client's disconnect event\n\t * to fetch a new brokered auth token, then call `client.connect()` with the new token.\n\t *\n\t * @class respoke.Client\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n\t * respoke.connect, respoke.createClient, or to client.connect.\n\t * @param {string} [params.token] - The endpoint's authentication token.\n\t * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t * endpoint. This is only used when `developmentMode` is set to `true`.\n\t * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n\t * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t * operation and will limit the services you will be able to use.\n\t * @param {string|number|object|Array} [params.presence=unavailable] The initial presence to set once connected.\n\t * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n\t * when a disconnect occurs.\n\t * @proprety {number} [connectTimeoutMillis=10000] - Number of milliseconds before considering the connect operation timed out.\n\t * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n\t * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is received\n\t * from anywhere on the system.\n\t * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n\t * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n\t * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect.\n\t * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client's user receives a call.\n\t * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this client's user\n\t * receives a request for a direct connection.\n\t * @returns {respoke.Client}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId || respoke.makeGUID();\n\t    params.instanceId = instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    respoke.instances[instanceId] = that;\n\t    delete that.instanceId;\n\t    that.connectTries = 0;\n\t    /**\n\t     * A name to identify this class\n\t     * @memberof! respoke.Client\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Client';\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name host\n\t     * @type {string}\n\t     * @private\n\t     */\n\t    var host = window.location.hostname;\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name port\n\t     * @type {number}\n\t     * @private\n\t     */\n\t    var port = window.location.port;\n\t\n\t    /**\n\t     * A container for baseURL, token, and appId so they won't be accidentally viewable in any JavaScript debugger.\n\t     * @memberof! respoke.Client\n\t     * @name clientSettings\n\t     * @type {object}\n\t     * @private\n\t     * @property {string} [baseURL] - the URL of the cloud infrastructure's REST API.\n\t     * @property {string} [token] - The endpoint's authentication token.\n\t     * @property {string} [appId] - The id of your Respoke app.\n\t     * @property {string} [endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @property {boolean} [developmentMode=false] - Indication to obtain an authentication token from the service.\n\t     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t     * operation and will limit the services you will be able to use.\n\t     * @property {boolean} [reconnect=false] - Whether or not to automatically reconnect to the Respoke service\n\t     * when a disconnect occurs.\n\t     * @proprety {number} [connectTimeoutMillis=10000] - Number of milliseconds before considering the connect\n\t     * timed out.\n\t     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n\t     * @property {respoke.Client.onClientMessage} [onMessage] - Callback for when any message is received\n\t     * from anywhere on the system.\n\t     * @property {respoke.Client.onConnect} [onConnect] - Callback for Client connect.\n\t     * @property {respoke.Client.onDisconnect} [onDisconnect] - Callback for Client disconnect.\n\t     * @property {respoke.Client.onReconnect} [onReconnect] - Callback for Client reconnect. Not Implemented.\n\t     * @property {respoke.Client.onCall} [onCall] - Callback for when this client receives a call.\n\t     * @property {respoke.Client.onDirectConnection} [onDirectConnection] - Callback for when this client\n\t     * receives a request for a direct connection.\n\t     * @property {boolean} enableCallDebugReport=true - Upon finishing a call, should the client send debugging\n\t     * information to the API? Defaults to `true`.\n\t     */\n\t    var clientSettings = {};\n\t\n\t    delete that.appId;\n\t    delete that.baseURL;\n\t    delete that.developmentMode;\n\t    delete that.token;\n\t    delete that.resolveEndpointPresence;\n\t\n\t    /**\n\t     * Internal list of known groups.\n\t     * @memberof! respoke.Client\n\t     * @name groups\n\t     * @type {Array<respoke.Group>}\n\t     * @private\n\t     */\n\t    var groups = [];\n\t    /**\n\t     * Internal list of known endpoints.\n\t     * @memberof! respoke.Client\n\t     * @name endpoints\n\t     * @type {Array<respoke.Endpoint>}\n\t     * @private\n\t     */\n\t    var endpoints = [];\n\t    /**\n\t     * Array of calls in progress, made accessible for informational purposes only.\n\t     * **Never modify this array directly.**\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @name calls\n\t     * @type {array}\n\t     */\n\t    that.calls = [];\n\t    log.debug(\"Client ID is \", instanceId);\n\t\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name signalingChannel\n\t     * @type {respoke.SignalingChannel}\n\t     * @private\n\t     */\n\t    var signalingChannel = respoke.SignalingChannel({\n\t        instanceId: instanceId,\n\t        clientSettings: clientSettings\n\t    });\n\t\n\t    /**\n\t     * Represents the presence status. Typically a string, but other types are supported.\n\t     * Defaults to `'unavailable'`.\n\t     *\n\t     * **Do not modify this directly** - it won't update presence with Respoke. Use `setPresence()`.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @name presence\n\t     * @type {string|number|object|Array}\n\t     */\n\t    that.presence = params.presence || 'unavailable';\n\t\n\t    /**\n\t     * Deprecated: use endpoint.presence instead.\n\t     *\n\t     * Return the presence.\n\t     * @memberof! respoke.Client\n\t     * @deprecated\n\t     * @name presence\n\t     * @type {string|number|object|Array}\n\t     */\n\t    that.getPresence = function () {\n\t        return that.presence;\n\t    };\n\t\n\t    /**\n\t     * Save parameters of the constructor or client.connect() onto the clientSettings object\n\t     * @memberof! respoke.Client\n\t     * @method respoke.saveParameters\n\t     * @param {object} params\n\t     * @param {respoke.Client.connectSuccessHandler} [params.onSuccess] - Success handler for this invocation\n\t     * of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n\t     * respoke.connect, respoke.createClient, or to client.connect.\n\t     * @param {string} [params.token] - The endpoint's authentication token.\n\t     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n\t     * @param {respoke.client.resolveEndpointPresence} [params.resolveEndpointPresence] An optional function for\n\t     * resolving presence for an endpoint.  An endpoint can have multiple Connections this function will be used\n\t     * to decide which Connection's presence gets precedence for the Endpoint.\n\t     * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n\t     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t     * operation and will limit the services you will be able to use.\n\t     * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n\t     * when a disconnect occurs.\n\t     * @proprety {number} [paramsconnectTimeoutMillis=10000] - Number of milliseconds before considering the connect\n\t     * timed out.\n\t     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves\n\t     * a group.\n\t     * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is\n\t     * received from anywhere on the system.\n\t     * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n\t     * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n\t     * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n\t     * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client receives a call.\n\t     * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this\n\t     * client receives a request for a direct connection.\n\t     * @private\n\t     */\n\t    function saveParameters(params) {\n\t        Object.keys(params).forEach(function eachParam(key) {\n\t            if (['onSuccess', 'onError', 'reconnect', 'presence'].indexOf(key) === -1 && params[key] !== undefined) {\n\t                clientSettings[key] = params[key];\n\t            }\n\t        });\n\t\n\t        clientSettings.developmentMode = !!clientSettings.developmentMode;\n\t        clientSettings.enableCallDebugReport = typeof clientSettings.enableCallDebugReport === 'boolean' ?\n\t            clientSettings.enableCallDebugReport : true;\n\t\n\t        if (typeof clientSettings.connectTimeoutMillis !== 'number') {\n\t            clientSettings.connectTimeoutMillis = 10000;\n\t        }\n\t\n\t        if (typeof params.reconnect !== 'boolean') {\n\t            clientSettings.reconnect = typeof clientSettings.developmentMode === 'boolean' ?\n\t                clientSettings.developmentMode : false;\n\t        } else {\n\t            clientSettings.reconnect = !!params.reconnect;\n\t        }\n\t    }\n\t    saveParameters(params);\n\t\n\t    /**\n\t     * Connect to the Respoke infrastructure and authenticate using `params.token`.\n\t     *\n\t     * After `connect`, the app auth session token is stored so it can be used in API requests.\n\t     *\n\t     * This method attaches quite a few event listeners for things like group joining and connection status changes.\n\t     *\n\t     * #### Usage\n\t     *\n\t     *      client.connect({\n\t     *          appId: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\",\n\t     *          token: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\", // if not developmentMode\n\t     *          developmentMode: false || true,\n\t     *          // if developmentMode, otherwise your server will set endpointId\n\t     *          endpointId: \"daveops\"\n\t     *      });\n\t     *      client.listen(\"connect\", function () { } );\n\t     *\n\t     *\n\t     * If no `params.token` is given and `developmentMode` is set to true, it will attempt to obtain a token\n\t     * automatically. You must set an `endpointId`.\n\t     *\n\t     *\n\t     * #### App auth session token expiration\n\t     *\n\t     * If `params.reconnect` is set to true (which it is by default for `developmentMode`), the `client`\n\t     * will attempt to keep reconnecting each time the app auth session expires.\n\t     *\n\t     * If not using `developmentMode`, automatic reconnect will be disabled. You will need to\n\t     * listen to the Client's `disconnect` event to fetch a new brokered auth token and call\n\t     * `client.connect()` with the new token.\n\t     *\n\t     *      client.listen('disconnect', function () {\n\t     *\n\t     *          // example method you implemented to get a new token from your server\n\t     *          myServer.getNewRespokeAccessToken(function (newToken) {\n\t     *              // reconnect with respoke.Client\n\t     *              client.connect({ token: newToken });\n\t     *          });\n\t     *\n\t     *      });\n\t     *\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.connect\n\t     * @param {object} params\n\t     * @param {respoke.Client.connectSuccessHandler} [params.onSuccess] - Success handler for this invocation\n\t     * of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n\t     * respoke.connect, respoke.createClient, or to client.connect.\n\t     * @param {string} [params.token] - The endpoint's authentication token.\n\t     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n\t     * @param {respoke.client.resolveEndpointPresence} [params.resolveEndpointPresence] An optional function for\n\t     * resolving presence for an endpoint.  An endpoint can have multiple Connections this function will be used\n\t     * to decide which Connection's presence gets precedence for the Endpoint.\n\t     * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n\t     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t     * operation and will limit the services you will be able to use.\n\t     * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n\t     * when a disconnect occurs.\n\t     * @proprety {number} [connectTimeoutMillis=10000] - Number of milliseconds before considering the connect\n\t     * timed out.\n\t     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves\n\t     * a group.\n\t     * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is\n\t     * received from anywhere on the system.\n\t     * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n\t     * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n\t     * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n\t     * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client receives a call.\n\t     * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this\n\t     * client receives a request for a direct connection.\n\t     * @returns {Promise|undefined}\n\t     * @fires respoke.Client#connect\n\t     */\n\t    that.connect = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        params = params || {};\n\t        log.debug('Client.connect');\n\t        that.connectTries += 1;\n\t\n\t        saveParameters(params);\n\t        that.presence = params.presence || that.presence;\n\t        that.endpointId = clientSettings.endpointId;\n\t        promise = actuallyConnect(params);\n\t        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        promise.then(function successHandler() {\n\t            /**\n\t             * This event is fired the first time the library connects to the cloud infrastructure.\n\t             * @event respoke.Client#connect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.fire('connect');\n\t        });\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * This function contains the meat of the connection, the portions which can be repeated again on reconnect.\n\t     *\n\t     * When `reconnect` is true, this function will be added in an event listener to the Client#disconnect event.\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.actuallyConnect\n\t     * @private\n\t     * @param {object} params\n\t     * @param {connectSuccessHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    function actuallyConnect(params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t\n\t        if (!clientSettings.token &&\n\t                (!clientSettings.appId || !clientSettings.endpointId || clientSettings.developmentMode !== true)) {\n\t            deferred.reject(new Error(\"Must pass either endpointID & appId & developmentMode=true, or a token, \" +\n\t                \"to client.connect().\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        signalingChannel.open({\n\t            actuallyConnect: actuallyConnect,\n\t            endpointId: that.endpointId,\n\t            token: clientSettings.token\n\t        }).then(function successHandler() {\n\t            return signalingChannel.authenticate();\n\t        }).done(function successHandler() {\n\t            // set initial presence for the connection\n\t            if (that.presence) {\n\t                that.setPresence({presence: that.presence});\n\t            }\n\t\n\t            /*\n\t             * These rely on the EventEmitter checking for duplicate event listeners in order for these\n\t             * not to be duplicated on reconnect.\n\t             */\n\t\n\t            /**\n\t             * This event provides notification for when an incoming call is being received.  If the user wishes\n\t             * to allow the call, `evt.call.answer()`.\n\t             * @event respoke.Client#call\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Call} call\n\t             * @property {respoke.Endpoint} endpoint\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.listen('call', clientSettings.onCall);\n\t            /**\n\t             * This event is fired when the local end of the directConnection is available. It still will not be\n\t             * ready to send and receive messages until the 'open' event fires.\n\t             * @event respoke.Client#direct-connection\n\t             * @type {respoke.Event}\n\t             * @property {respoke.DirectConnection} directConnection\n\t             * @property {respoke.Endpoint} endpoint\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.listen('direct-connection', clientSettings.onDirectConnection);\n\t            that.listen('join', clientSettings.onJoin);\n\t            /**\n\t             * This event is fired every time the client leaves a group.\n\t             * @event respoke.Client#leave\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Group} group\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.listen('leave', clientSettings.onLeave);\n\t            /**\n\t             * A generic message handler when a message was received by the client.\n\t             *\n\t             * @event respoke.Client#message\n\t             * @type {respoke.Event}\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Endpoint} endpoint - If the message was private, this is the Endpoint who sent it.\n\t             * @property {respoke.Group} group - If the message was to a group, this is the group.\n\t             * @property {respoke.TextMessage} message - The generic message object.\n\t             * @property {string} message.connectionId\n\t             * @property {string} message.endpointId\n\t             * @property {string} message.message - Message body text.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.listen('message', clientSettings.onMessage);\n\t            that.listen('connect', clientSettings.onConnect);\n\t            /**\n\t             * Client has disconnected from Respoke.\n\t             *\n\t             * @event respoke.Client#disconnect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.listen('disconnect', clientSettings.onDisconnect);\n\t            that.listen('disconnect', function () {\n\t                that.calls.forEach(function (call) {\n\t                    call.hangup({signal: false});\n\t                });\n\t            }, true);\n\t            /**\n\t             * Client has reconnected to Respoke.\n\t             *\n\t             * @event respoke.Client#reconnect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.listen('reconnect', clientSettings.onReconnect);\n\t\n\t            log.info('logged in as ' + that.endpointId, that);\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t            if (err.message && err.message.match(/Connection limit exceeded/)) {\n\t                log.error(\n\t                    'You have reached the connection limit on the account associated with this appId. ' +\n\t                    'Please upgrade your account from the developer portal at https://portal.respoke.io ' +\n\t                    'if you need more concurrent connections.', err);\n\t            } else {\n\t                log.error(err.message, err.stack);\n\t            }\n\t        });\n\t\n\t        return deferred.promise;\n\t    }\n\t\n\t    /**\n\t     * Disconnect from the Respoke infrastructure, leave all groups, invalidate the token, and disconnect the websocket.\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.disconnect\n\t     * @returns {Promise|undefined}\n\t     * @param {object} params\n\t     * @param {disconnectSuccessHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @fires respoke.Client#disconnect\n\t     */\n\t    that.disconnect = function (params) {\n\t        // TODO: also call this on socket disconnect\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            deferred.reject(e);\n\t            return retVal;\n\t        }\n\t\n\t        var leaveGroups = groups.map(function eachGroup(group) {\n\t            if (group.isJoined()) {\n\t                return group.leave();\n\t            }\n\t        });\n\t\n\t        Q.all(leaveGroups).fin(function successHandler() {\n\t            return signalingChannel.close();\n\t        }).fin(function finallyHandler() {\n\t            that.presence = 'unavailable';\n\t            endpoints = [];\n\t            groups = [];\n\t            /**\n\t             * This event is fired when the library has disconnected from the cloud infrastructure.\n\t             * @event respoke.Client#disconnect\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.fire('disconnect');\n\t            deferred.resolve();\n\t        }).done();\n\t\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Set the presence for this client.\n\t     *\n\t     * The value of presence can be a string, number, object, or array - in any format -\n\t     * depending on the needs of your application. The only requirement is that\n\t     * `JSON.stringify()` must work (no circular references).\n\t     *\n\t     *      var myPresence = 'At lunch'\n\t     *                      || 4\n\t     *                      || { status: 'Away', message: 'At lunch' }\n\t     *                      || ['Away', 'At lunch'];\n\t     *\n\t     *      client.setPresence({\n\t     *          presence: myPresence,\n\t     *          onSuccess: function (evt) {\n\t     *              // successfully updated my presence\n\t     *          }\n\t     *      });\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.setPresence\n\t     * @param {object} params\n\t     * @param {string|number|object|array} params.presence\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @return {Promise|undefined}\n\t     */\n\t    that.setPresence = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        params = params || {};\n\t        params.presence = params.presence || 'available';\n\t\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        }\n\t\n\t        log.info('sending my presence update ' + params.presence);\n\t\n\t        promise = signalingChannel.sendPresence({\n\t            presence: params.presence\n\t        }).then(function successHandler(p) {\n\t            that.presence = params.presence;\n\t\n\t            /**\n\t             * This event indicates that the presence for this endpoint has been updated.\n\t             * @event respoke.Client#presence\n\t             * @type {respoke.Event}\n\t             * @property {string|number|object|Array} presence\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.fire('presence', {\n\t                presence: that.presence\n\t            });\n\t        });\n\t        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Get the Call with the endpoint specified.\n\t     *\n\t     *     // hang up on chad\n\t     *     var call = client.getCall({\n\t     *         endpointId: 'chad'\n\t     *     });\n\t     *\n\t     *     if (call) {\n\t     *         call.hangup()\n\t     *     }\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getCall\n\t     * @param {object} params\n\t     * @param {string} [params.id] - Call ID.\n\t     * @param {string} [params.endpointId] - Endpoint ID. Warning: If you pass only the endpointId, this method\n\t     * will just return the first call that matches. If you are placing multiple calls to the same endpoint,\n\t     * pass in the call ID, too.\n\t     * @arg {boolean} [params.create] - whether or not to create a new call if the specified endpointId isn't found\n\t     * @arg {string} [params.fromType] - fromType from the signal, tells us if this is a SIP or DID call.\n\t     * @arg {string} [params.target] - target from the signal, tells us if this is a screenshare or conference call.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.getCall = function (params) {\n\t        var call = null;\n\t        var methods = {\n\t            screenshare: \"startScreenShare\",\n\t            did: \"startPhoneCall\",\n\t            web: \"startCall\",\n\t            sip: \"startSIPCall\",\n\t            conference: \"joinConference\"\n\t        };\n\t        var callParams = {};\n\t        params.fromType = params.type || \"web\";\n\t        var switchType = params.type;\n\t\n\t        that.calls.every(function findCall(one) {\n\t            if (params.id && one.id === params.id) {\n\t                call = one;\n\t                return false;\n\t            }\n\t\n\t            if (!params.id && params.endpointId && one.remoteEndpoint.id === params.endpointId) {\n\t                call = one;\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t\n\t        if (call || params.create !== true) {\n\t            return call;\n\t        }\n\t\n\t        callParams.id = params.id;\n\t        callParams.caller = false;\n\t        callParams.fromType = \"web\";\n\t        callParams.callerId = params.callerId;\n\t        callParams.target = params.target;\n\t\n\t        if (params.target === \"conference\") {\n\t            callParams.id = params.conferenceId;\n\t            switchType = params.target;\n\t        } else if (params.target === \"screenshare\") {\n\t            switchType = params.target;\n\t        }\n\t\n\t        switch (switchType) {\n\t            case \"screenshare\":\n\t            case \"web\":\n\t                callParams.toType = \"web\"; // overwrite \"screenshare\"\n\t                callParams.endpointId = params.endpointId;\n\t                break;\n\t            case \"did\":\n\t                callParams.number = params.endpointId;\n\t                callParams.toType = \"did\";\n\t                break;\n\t            case \"sip\":\n\t                callParams.uri = params.endpointId;\n\t                callParams.toType = \"sip\";\n\t                break;\n\t        }\n\t\n\t        try {\n\t            call = that[methods[params.type]](callParams);\n\t        } catch (e) {\n\t            log.error(\"Couldn't create Call.\", e.message, e.stack);\n\t        }\n\t        return call;\n\t    };\n\t\n\t    /**\n\t     * Add the call to internal record-keeping.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.addCall\n\t     * @param {object} evt\n\t     * @param {respoke.Call} evt.call\n\t     * @param {respoke.Endpoint} evt.endpoint\n\t     * @private\n\t     */\n\t    function addCall(evt) {\n\t        log.debug('addCall');\n\t        if (!evt.call) {\n\t            throw new Error(\"Can't add call without a call parameter.\");\n\t        }\n\t        if (that.calls.indexOf(evt.call) === -1) {\n\t            that.calls.push(evt.call);\n\t        }\n\t\n\t        evt.call.listen('hangup', function () {\n\t            removeCall({call: evt.call});\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Remove the call or direct connection from internal record-keeping.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.removeCall\n\t     * @param {object} evt\n\t     * @param {respoke.Call} evt.target\n\t     * @private\n\t     */\n\t    function removeCall(evt) {\n\t        var match = 0;\n\t        if (!evt.call) {\n\t            throw new Error(\"Can't remove call without a call parameter.\");\n\t        }\n\t\n\t        // Loop backward since we're modifying the array in place.\n\t        for (var i = that.calls.length - 1; i >= 0; i -= 1) {\n\t            if (that.calls[i].id === evt.call.id) {\n\t                that.calls.splice(i, 1);\n\t                match += 1;\n\t            }\n\t        }\n\t\n\t        if (match !== 1) {\n\t            log.warn(\"Something went wrong.\", match, \"calls were removed!\");\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Convenience method for setting presence to `\"available\"`.\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.setOnline\n\t     * @param {object} params\n\t     * @param {string|number|object|Array} [params.presence=available] - The presence to set.\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.setOnline = function (params) {\n\t        var promise;\n\t\n\t        params = params || {};\n\t        params.presence = params.presence || 'available';\n\t\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        }\n\t\n\t        return that.setPresence(params);\n\t    };\n\t\n\t    /**\n\t     * Convenience method for setting presence to `\"unavailable\"`.\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.setOffline\n\t     * @param {object} params\n\t     * @param {string|number|object|Array} [params.presence=unavailable] - The presence to set.\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.setOffline = function (params) {\n\t        var promise;\n\t\n\t        params = params || {};\n\t        params.presence = params.presence || 'unavailable';\n\t\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        }\n\t\n\t        return that.setPresence(params);\n\t    };\n\t\n\t    /**\n\t     * Send a message to an endpoint.\n\t     *\n\t     *     client.sendMessage({\n\t     *         endpointId: 'dan',\n\t     *         message: \"Jolly good.\"\n\t     *     });\n\t     *\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.sendMessage\n\t     * @param {object} params\n\t     * @param {string} params.endpointId - The endpoint id of the recipient.\n\t     * @param {string} [params.connectionId] - The optional connection id of the receipient. If not set, message will be\n\t     * broadcast to all connections for this endpoint.\n\t     * @param {string} params.message - a string message.\n\t     * @param {sendHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        var endpoint;\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t            return retVal;\n\t        }\n\t        endpoint = that.getEndpoint({\n\t            skipPresence: true,\n\t            id: params.endpointId\n\t        });\n\t        delete params.endpointId;\n\t        return endpoint.sendMessage(params);\n\t    };\n\t\n\t    /**\n\t     * Experimental. Create a new conference call with the specified id.\n\t     *\n\t     *     client.joinConference({\n\t     *         id: \"javascript-meetup\",\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.joinConference\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} params.id - The id that should be used to create the conference call or the ID\n\t     * of the call to join.\n\t     * @param {string|boolean} params.audio - Whether participant should send and receive audio. Boolean `true`\n\t     * indicates send and receive. Boolean `false` indicates neither send nor receive. Strings `send` and `receive`\n\t     * indicate send only and receive only respectively.\n\t     * @param {string|boolean} params.video - Whether participant should send and receive audio. Boolean `true`\n\t     * indicates send and receive. Boolean `false` indicates neither send nor receive. Strings `send` and `receive`\n\t     * indicate send only and receive only respectively.\n\t     * @param {boolean} params.mixAudio - Whether Respoke should mix all the audio streams together to save bandwidth\n\t     * for this one participant.\n\t     * @param {Array<RTCConstraints>} [params.constraints]\n\t     * @arg {respoke.Conference.onJoin} [params.onJoin] - Callback for when a participant joins the conference.\n\t     * @arg {respoke.Conference.onLeave} [params.onLeave] - Callback for when a participant leaves the conference.\n\t     * @arg {respoke.Conference.onMessage} [params.onMessage] - Callback for when a message is sent to the conference.\n\t     * @param {respoke.Conference.onMute} [params.onMute] - Callback for when local or remote media is muted or unmuted.\n\t     * @arg {respoke.Conference.onTopic} [params.onTopic] - Callback for the conference topic changes.\n\t     * @arg {respoke.Conference.onPresenter} [params.onPresenter] - Callback for when the presenter changes.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n\t     * and the remote party has received the video.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @returns {respoke.Conference}\n\t     */\n\t    that.joinConference = function (params) {\n\t        var conference = null;\n\t        var recipient;\n\t\n\t        params = params || {};\n\t        params.open = !!params.open;\n\t\n\t        that.verifyConnected();\n\t\n\t        if (!params.id) {\n\t            params.id = respoke.makeGUID();\n\t        }\n\t\n\t        recipient = {id: params.id};\n\t\n\t        if (params.open) {\n\t            params.key = undefined;\n\t        } else if (!params.key) {\n\t            params.key = respoke.makeGUID();\n\t        }\n\t\n\t        params.instanceId = instanceId;\n\t        params.target = \"conference\";\n\t        params.constraints = respoke.convertConstraints(params.constraints, [{\n\t            video: false,\n\t            audio: true,\n\t            mandatory: {},\n\t            optional: []\n\t        }]);\n\t\n\t        params.signalOffer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'offer';\n\t            signalParams.target = params.target;\n\t            signalParams.id = params.id;\n\t            signalParams.key = params.key;\n\t            signalParams.open = params.open;\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = \"conference\";\n\t\n\t            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n\t        };\n\t        params.signalAnswer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'answer';\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = recipient;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalParams.toType = \"conference\";\n\t            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n\t                signalParams.call.hangup({signal: false});\n\t            });\n\t        };\n\t        params.signalConnected = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.connectionId = signalParams.call.connectionId;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = \"conference\";\n\t            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n\t                signalParams.call.hangup();\n\t            });\n\t        };\n\t        params.signalModify = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = recipient;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalParams.toType = \"conference\";\n\t            signalingChannel.sendModify(signalParams).done();\n\t        };\n\t        params.signalCandidate = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = recipient;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalParams.toType = \"conference\";\n\t            return signalingChannel.sendCandidate(signalParams);\n\t        };\n\t        params.signalHangup = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = recipient;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalParams.toType = \"conference\";\n\t            signalingChannel.sendHangup(signalParams).done();\n\t        };\n\t        params.signalReport = function (signalParams) {\n\t            log.debug(\"Sending debug report\", signalParams.report);\n\t            signalingChannel.sendReport(signalParams).done();\n\t        };\n\t\n\t        params.signalingChannel = signalingChannel;\n\t        conference = respoke.Conference(params);\n\t        addCall({call: conference.call});\n\t        return conference;\n\t    };\n\t\n\t    /**\n\t     * Create a new screen sharing call. Screenshares are inherently unidirectional video only. This may change\n\t     * in the future when Chrome adds the ability to obtain screen video and microphone audio at the same time. For\n\t     * now, if you also need audio, place a second audio only call.\n\t     *\n\t     * The endpoint who calls `client.startScreenShare` will be the one whose screen is shared. If you'd like to\n\t     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n\t     * not the sharer, it is recommened that you use `endpoint.sendMessage` to send a control message to the user\n\t     * whose screenshare is being requested so that user's app can call `client.startScreenShare`.\n\t     *\n\t     * NOTE: At this time, screen sharing only works with Chrome, and Chrome requires a Chrome extension to\n\t     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension.\n\t     * Support for additional browsers will be added in the future.\n\t     *\n\t     *     client.startScreenShare({\n\t     *         endpointId: 'tian',\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startScreenShare\n\t     * @param {object} params\n\t     * @param {string} params.endpointId - The id of the endpoint that should be called.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n\t     * and the remote party has received the video.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {string} [params.source] - Pass in what type of mediaSource you want. If omitted, you'll have access\n\t     * to both the screen and windows. In firefox, you'll have access to the screen only.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startScreenShare = function (params) {\n\t        that.verifyConnected();\n\t        var endpoint = that.getEndpoint({\n\t            skipPresence: true,\n\t            id: params.endpointId\n\t        });\n\t        delete params.endpointId;\n\t        return endpoint.startScreenShare(params);\n\t    };\n\t\n\t    /**\n\t     * Place an audio and/or video call to an endpoint.\n\t     *\n\t     *     // defaults to video when no constraints are supplied\n\t     *     client.startCall({\n\t     *         endpointId: 'erin',\n\t     *         onConnect: function (evt) { },\n\t     *         onLocalMedia: function (evt) { }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startCall\n\t     * @param {object} params\n\t     * @param {string} params.endpointId - The id of the endpoint that should be called.\n\t     * @param {Array<RTCConstraints>} [params.constraints]\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n\t     * with the local audio and/or video attached.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n\t     * with the remote audio and/or video attached.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n\t     * up.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have\n\t     * local video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have\n\t     * remote video attached to it.\n\t     * @return {respoke.Call}\n\t     */\n\t    that.startCall = function (params) {\n\t        that.verifyConnected();\n\t        var endpoint = that.getEndpoint({\n\t            skipPresence: true,\n\t            id: params.endpointId\n\t        });\n\t        delete params.endpointId;\n\t        return endpoint.startCall(params);\n\t    };\n\t\n\t    /**\n\t     * Place an audio only call to an endpoint.\n\t     *\n\t     *     client.startAudioCall({\n\t     *         endpointId: 'erin',\n\t     *         onConnect: function (evt) { },\n\t     *         onLocalMedia: function (evt) { }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startAudioCall\n\t     * @param {object} params\n\t     * @param {string} params.endpointId - The id of the endpoint that should be called.\n\t     * @param {string} [params.connectionId]\n\t     * @param {Array<RTCConstraints>} [params.constraints]\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 element\n\t     * with the local audio and/or video attached.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 element\n\t     * with the remote audio and/or video attached.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n\t     * up.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     * @return {respoke.Call}\n\t     */\n\t    that.startAudioCall = function (params) {\n\t        that.verifyConnected();\n\t        var endpoint = that.getEndpoint({\n\t            skipPresence: true,\n\t            id: params.endpointId\n\t        });\n\t        delete params.endpointId;\n\t        return endpoint.startAudioCall(params);\n\t    };\n\t\n\t    /**\n\t     * Place a video call to an endpoint.\n\t     *\n\t     *     client.startVideoCall({\n\t     *         endpointId: 'erin',\n\t     *         onConnect: function (evt) { },\n\t     *         onLocalMedia: function (evt) { }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startVideoCall\n\t     * @param {object} params\n\t     * @param {string} params.endpointId - The id of the endpoint that should be called.\n\t     * @param {Array<RTCConstraints>} [params.constraints]\n\t     * @param {string} [params.connectionId]\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n\t     * with the local audio and/or video attached.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n\t     * with the remote audio and/or video attached.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n\t     * up.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     * @return {respoke.Call}\n\t     */\n\t    that.startVideoCall = function (params) {\n\t        that.verifyConnected();\n\t        var endpoint = that.getEndpoint({\n\t            skipPresence: true,\n\t            id: params.endpointId\n\t        });\n\t        delete params.endpointId;\n\t        return endpoint.startVideoCall(params);\n\t    };\n\t\n\t    /**\n\t     * Place an audio call with a phone number.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startPhoneCall\n\t     * @param {object} params\n\t     * @param {string} params.number - The phone number that should be called.\n\t     * @param {string} params.callerId - The phone number to use as the caller ID for this phone call. This must\n\t     * be a phone number listed in your Respoke account, associated with your app, and allowed by the role\n\t     * that this client is authenticated with. If the role contains a list of numbers and the token does not contain\n\t     * callerId, this field must be used to set caller ID selected from the list of numbers or no caller ID will be set.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n\t     * with the local audio and/or video attached.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n\t     * with the remote audio and/or video attached.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n\t     * up.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @return {respoke.Call}\n\t     */\n\t    that.startPhoneCall = function (params) {\n\t        var promise;\n\t        var call = null;\n\t        var recipient = {};\n\t        params = params || {};\n\t        params.constraints = [{\n\t            video: false,\n\t            audio: true,\n\t            mandatory: {},\n\t            optional: []\n\t        }];\n\t\n\t        that.verifyConnected();\n\t\n\t        if (!params.number) {\n\t            throw new Error(\"Can't start a phone call without a number.\");\n\t        }\n\t\n\t        if (typeof params.caller !== 'boolean') {\n\t            params.caller = true;\n\t        }\n\t\n\t        recipient.id = params.number;\n\t\n\t        params.instanceId = instanceId;\n\t        params.remoteEndpoint = recipient;\n\t\n\t        params.toType = params.toType || 'did';\n\t        params.fromType = params.fromType || 'web';\n\t\n\t        params.signalOffer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'offer';\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t\n\t            // using hasOwnProperty here because callerId could be explicitly set to null or empty string\n\t            if (params.hasOwnProperty('callerId')) {\n\t                signalParams.callerId = {number: params.callerId};\n\t            }\n\t            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n\t        };\n\t        params.signalAnswer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'answer';\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't answer the call.\", err.message, err.stack);\n\t                signalParams.call.hangup({signal: false});\n\t            });\n\t        };\n\t        params.signalConnected = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.connectionId = signalParams.connectionId;\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send connected.\", err.message, err.stack);\n\t                signalParams.call.hangup();\n\t            });\n\t        };\n\t        params.signalModify = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendModify(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send modify.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalCandidate = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            return signalingChannel.sendCandidate(signalParams);\n\t        };\n\t        params.signalHangup = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendHangup(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send hangup.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalReport = function (signalParams) {\n\t            log.debug(\"Sending debug report\", signalParams.report);\n\t            signalingChannel.sendReport(signalParams);\n\t        };\n\t\n\t        params.signalingChannel = signalingChannel;\n\t        call = respoke.Call(params);\n\t        addCall({call: call});\n\t        return call;\n\t    };\n\t\n\t    /**\n\t     * Place an audio call to a SIP URI.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startSIPCall\n\t     * @param {object} params\n\t     * @param {string} [params.uri] - The fully qualified SIP URI to call.\n\t     * @param {string} [params.trunk] - The SIP trunk to call. This is not necessary if `uri` is set. If `uri` is not\n\t     * set, both `trunk` and `user` are required, and `trunk` must be the ID of a Respoke SIP trunk. `user` is a\n\t     * SIP username or extension.\n\t     * @param {string} [params.user] - The SIP user to call. This is not necessary if `uri` is set. If `uri` is not\n\t     * set, both `trunk` and `user` are required, and `trunk` must be the ID of a Respoke SIP trunk. `user` is a\n\t     * SIP username or extension.\n\t     * @param {object} [params.callerId] - Caller ID information for this call.\n\t     * @param {string} [params.callerId.name] - Caller ID name.\n\t     * @param {string} [params.callerId.number] - Caller ID number, extension, or SIP username.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n\t     * with the local audio and/or video attached.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n\t     * with the remote audio and/or video attached.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n\t     * up.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @return {respoke.Call}\n\t     */\n\t    that.startSIPCall = function (params) {\n\t        var promise;\n\t        var call = null;\n\t        var recipient = {};\n\t        params = params || {};\n\t        params.constraints = [{\n\t            video: false,\n\t            audio: true,\n\t            mandatory: {},\n\t            optional: []\n\t        }];\n\t\n\t        that.verifyConnected();\n\t\n\t        if (!params.uri && !(params.trunk && params.user)) {\n\t            throw new Error(\"Can't start a phone call without a SIP URI or a SIP trunk and user.\");\n\t        }\n\t\n\t        if (typeof params.caller !== 'boolean') {\n\t            params.caller = true;\n\t        }\n\t\n\t        params.uri = params.uri || (params.trunk + \"/\" + params.user);\n\t        recipient.id = params.uri;\n\t\n\t        params.instanceId = instanceId;\n\t        params.remoteEndpoint = recipient;\n\t\n\t        params.toType = params.toType || 'sip';\n\t        params.fromType = params.fromType || 'web';\n\t\n\t        params.signalOffer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'offer';\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t\n\t            // using hasOwnProperty here because callerId could be explicitly set to null or empty string\n\t            if (params.hasOwnProperty('callerId')) {\n\t                signalParams.callerId = params.callerId;\n\t            }\n\t            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n\t        };\n\t        params.signalAnswer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'answer';\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't answer the call.\", err.message, err.stack);\n\t                signalParams.call.hangup({signal: false});\n\t            });\n\t        };\n\t        params.signalConnected = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.connectionId = signalParams.connectionId;\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send connected.\", err.message, err.stack);\n\t                signalParams.call.hangup();\n\t            });\n\t        };\n\t        params.signalModify = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendModify(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send modify.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalCandidate = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            return signalingChannel.sendCandidate(signalParams);\n\t        };\n\t        params.signalHangup = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendHangup(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send hangup.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalReport = function (signalParams) {\n\t            log.debug(\"Sending debug report\", signalParams.report);\n\t            signalingChannel.sendReport(signalParams);\n\t        };\n\t\n\t        params.signalingChannel = signalingChannel;\n\t        call = respoke.Call(params);\n\t        addCall({call: call});\n\t        return call;\n\t    };\n\t\n\t    /**\n\t     * Assert that we are connected to the backend infrastructure.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.verifyConnected\n\t     * @throws {Error}\n\t     * @private\n\t     */\n\t    that.verifyConnected = function () {\n\t        if (!signalingChannel.isConnected()) {\n\t            throw new Error(\"Can't complete request when not connected. Please reconnect!\");\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Check whether this client is connected to the Respoke API.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.isConnected\n\t     * @returns boolean\n\t     */\n\t    that.isConnected = function () {\n\t        return signalingChannel.isConnected();\n\t    };\n\t\n\t    /**\n\t     * Join a group and begin keeping track of it. If this method is called multiple times synchronously, it will\n\t     * batch requests and only make one API call to Respoke.\n\t     *\n\t     * You can leave the group by calling `group.leave()`;\n\t     *\n\t     * ##### Joining and leaving a group\n\t     *\n\t     *      var group;\n\t     *\n\t     *      client.join({\n\t     *          id: \"book-club\",\n\t     *          onSuccess: function (evt) {\n\t     *              console.log('I joined', evt.group.id);\n\t     *              // \"I joined book-club\"\n\t     *              group = evt.group;\n\t     *              group.sendMessage({\n\t     *                  message: 'sup'\n\t     *              });\n\t     *          }\n\t     *      });\n\t     *\n\t     *      // . . .\n\t     *      // Some time later, leave the group.\n\t     *      // . . .\n\t     *      group.leave({\n\t     *          onSuccess: function (evt) {\n\t     *              console.log('I left', evt.group.id);\n\t     *              // \"I left book-club\"\n\t     *          }\n\t     *      });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.join\n\t     * @param {object} params\n\t     * @param {string} params.id - The name of the group.\n\t     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {respoke.Group.onMessage} [params.onMessage] - Message handler for messages from this group only.\n\t     * @param {respoke.Group.onJoin} [params.onJoin] - Join event listener for endpoints who join this group only.\n\t     * @param {respoke.Group.onLeave} [params.onLeave] - Leave event listener for endpoints who leave\n\t     * this group only.\n\t     * @returns {Promise<respoke.Group>|undefined} The instance of the respoke.Group which the client joined.\n\t     * @fires respoke.Client#join\n\t     */\n\t    that.join = function (params) {\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            deferred.reject(e);\n\t            return retVal;\n\t        }\n\t\n\t        if (!params.id) {\n\t            deferred.reject(new Error(\"Can't join a group with no group id.\"));\n\t            return retVal;\n\t        }\n\t\n\t        log.trace('requested to join group', params.id);\n\t\n\t        signalingChannel.joinGroup({\n\t            groupList: [params.id]\n\t        }).done(function successHandler() {\n\t            var group;\n\t            params.signalingChannel = signalingChannel;\n\t            params.instanceId = instanceId;\n\t\n\t            group = that.getGroup({id: params.id});\n\t\n\t            if (!group) {\n\t                group = respoke.Group(params);\n\t                that.addGroup(group);\n\t            }\n\t\n\t            group.listen('join', params.onJoin);\n\t            group.listen('leave', params.onLeave);\n\t            group.listen('message', params.onMessage);\n\t\n\t            group.addMember({\n\t                connection: that.getConnection({\n\t                    endpointId: that.endpointId,\n\t                    connectionId: that.connectionId\n\t                })\n\t            });\n\t\n\t            /**\n\t             * This event is fired every time the client joins a group. If the client leaves\n\t             * a group, this event will be fired again on the next time the client joins the group.\n\t             * @event respoke.Client#join\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Group} group\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.fire('join', {\n\t                group: group\n\t            });\n\t            deferred.resolve(group);\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Add a Group. This is called when we join a group and need to begin keeping track of it.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.addGroup\n\t     * @param {respoke.Group}\n\t     * @private\n\t     */\n\t    that.addGroup = function (newGroup) {\n\t        if (!newGroup || newGroup.className !== 'respoke.Group') {\n\t            throw new Error(\"Can't add group to internal tracking without a group.\");\n\t        }\n\t\n\t        newGroup.listen('leave', function leaveHandler(evt) {\n\t            var endpointThatLeft = evt.connection.getEndpoint();\n\t\n\t            if (!endpointThatLeft.hasListeners('presence') && endpointThatLeft.groupConnectionCount === 0) {\n\t                // No one is listening, and it's not in any more groups.\n\t                endpoints.every(function eachEndpoint(ept, index) {\n\t                    if (ept.id === endpointThatLeft.id) {\n\t                        endpoints.splice(index, 1);\n\t                        return false;\n\t                    }\n\t                    return true;\n\t                });\n\t            }\n\t        }, true);\n\t\n\t        groups.push(newGroup);\n\t    };\n\t\n\t    /**\n\t     * Get a list of all the groups the client is currently a member of.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getGroups\n\t     * @returns {Array<respoke.Group>} All of the groups the library is aware of.\n\t     */\n\t    that.getGroups = function () {\n\t        return groups;\n\t    };\n\t\n\t    /**\n\t     * Find a group by id and return it.\n\t     *\n\t     *     var group = client.getGroup({\n\t     *         id: \"resistance\"\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getGroup\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     * @param {respoke.Group.onJoin} [params.onJoin] - Receive notification that an endpoint has joined this group.\n\t     * @param {respoke.Group.onLeave} [params.onLeave] - Receive notification that an endpoint has left this group.\n\t     * @param {respoke.Group.onMessage} [params.onMessage] - Receive notification that a message has been\n\t     * received to a group.\n\t     * @returns {respoke.Group|undefined} The group whose ID was specified.\n\t     */\n\t    that.getGroup = function (params) {\n\t        var group;\n\t        if (!params || !params.id) {\n\t            throw new Error(\"Can't get a group without group id.\");\n\t        }\n\t\n\t        groups.every(function eachGroup(grp) {\n\t            if (grp.id === params.id) {\n\t                group = grp;\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t\n\t        if (group) {\n\t            group.listen('join', params.onJoin);\n\t            group.listen('leave', params.onLeave);\n\t            group.listen('message', params.onMessage);\n\t        }\n\t\n\t        return group;\n\t    };\n\t\n\t    /**\n\t     * Find an endpoint by id and return the `respoke.Endpoint` object.\n\t     *\n\t     * If it is not already cached locally, will be added to the local cache of tracked endpoints,\n\t     * its presence will be determined, and will be available in `client.getEndpoints()`.\n\t     *\n\t     *     var endpoint = client.getEndpoint({\n\t     *         id: \"dlee\"\n\t     *     });\n\t     *\n\t     * @ignore If the endpoint is not found in the local cache of endpoint objects (see `client.getEndpoints()`),\n\t     * it will be created. This is useful, for example, in the case of dynamic endpoints where groups are\n\t     * not in use. Override dynamic endpoint creation by setting `params.skipCreate = true`.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getEndpoint\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     * @param {respoke.Endpoint.onMessage} [params.onMessage] - Handle messages sent to the logged-in user\n\t     * from this one Endpoint.\n\t     * @param {respoke.Endpoint.onPresence} [params.onPresence] - Handle presence notifications from this one\n\t     * Endpoint.\n\t     * @arg {boolean} [params.skipCreate] - Skip the creation step and return undefined if we don't yet\n\t     * @arg {boolean} [params.skipPresence] - Skip registering for this endpoint's presence.\n\t     * @returns {respoke.Endpoint} The endpoint whose ID was specified.\n\t     */\n\t    that.getEndpoint = function (params) {\n\t        var endpoint;\n\t        if (!params || !params.id) {\n\t            throw new Error(\"Can't get an endpoint without endpoint id.\");\n\t        }\n\t\n\t        endpoints.every(function eachEndpoint(ept) {\n\t            if (ept.id === params.id) {\n\t                endpoint = ept;\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t\n\t        if (!endpoint && params && !params.skipCreate) {\n\t            params.instanceId = instanceId;\n\t            params.signalingChannel = signalingChannel;\n\t            params.resolveEndpointPresence = clientSettings.resolveEndpointPresence;\n\t            params.addCall = addCall;\n\t\n\t            endpoint = respoke.Endpoint(params);\n\t            endpoints.push(endpoint);\n\t        }\n\t\n\t        if (!endpoint) {\n\t            return;\n\t        }\n\t\n\t        if (params.skipPresence !== true) {\n\t            signalingChannel.registerPresence({\n\t                endpointList: [endpoint.id]\n\t            }).done(null, function (err) {\n\t                log.error(\"Couldn't register for presence on\", endpoint.id, err.message);\n\t            });\n\t        }\n\t        endpoint.listen('presence', params.onPresence);\n\t        endpoint.listen('message', params.onMessage);\n\t\n\t        return endpoint;\n\t    };\n\t\n\t    /**\n\t     * Find a Connection by id and return it.\n\t     *\n\t     *     var connection = client.getConnection({\n\t     *         id: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\"\n\t     *     });\n\t     *\n\t     * @ignore In most cases, if we don't find it we will create it. This is useful\n\t     * in the case of dynamic endpoints where groups are not in use. Set skipCreate=true\n\t     * to return undefined if the Connection is not already known.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getConnection\n\t     * @param {object} params\n\t     * @param {string} params.connectionId\n\t     * @param {string} [params.endpointId] - An endpointId to use in the creation of this connection.\n\t     * @param {respoke.Endpoint.onMessage} [params.onMessage] - Handle messages sent to the logged-in user\n\t     * from this one Connection.\n\t     * @param {respoke.Endpoint.onPresence} [params.onPresence] - Handle presence notifications from this one\n\t     * Connection.\n\t     * @returns {respoke.Connection} The connection whose ID was specified.\n\t     */\n\t    that.getConnection = function (params) {\n\t        var connection;\n\t        var endpoint;\n\t        var endpointsToSearch = endpoints;\n\t\n\t        params = params || {};\n\t        if (!params.connectionId) {\n\t            throw new Error(\"Can't get a connection without connection id.\");\n\t        }\n\t        if (!params.endpointId && !params.skipCreate) {\n\t            throw new Error(\"Can't create a connection without endpoint id.\");\n\t        }\n\t\n\t        if (params.endpointId) {\n\t            endpoint = that.getEndpoint({\n\t                id: params.endpointId,\n\t                skipPresence: true,\n\t                skipCreate: params.skipCreate\n\t            });\n\t\n\t            endpointsToSearch = [];\n\t            if (endpoint) {\n\t                endpointsToSearch = [endpoint];\n\t            }\n\t        }\n\t\n\t        endpointsToSearch.every(function eachEndpoint(ept) {\n\t            connection = ept.getConnection(params);\n\t            return !connection;\n\t        });\n\t\n\t        if (!connection && !params.skipCreate) {\n\t            params.instanceId = instanceId;\n\t            connection = respoke.Connection(params);\n\t            endpoint.connections.push(connection);\n\t        }\n\t\n\t        return connection;\n\t    };\n\t\n\t    /**\n\t     * Get the list of **all endpoints** that the library has knowledge of.\n\t     * These are `respoke.Endpoint` objects, not just the endpointIds.\n\t     *\n\t     * The library gains knowledge of an endpoint in two ways:\n\t     * 1. when an endpoint joins a group that the user (currently logged-in endpoint) is a member of (if group presence is enabled)\n\t     * 2. when an endpoint that the user (currently logged-in endpoint) is watching*\n\t     *\n\t     * *If an endpoint that the library does not know about sends a message to the client, you\n\t     * can immediately call the `client.getEndpoint()` method on the sender of the message to enable\n\t     * watching of the sender's endpoint.\n\t     *\n\t     *      client.on('message', function (data) {\n\t     *          if (data.endpoint) {\n\t     *              // start tracking this endpoint.\n\t     *              client.getEndpoint({ id: data.endpoint.id });\n\t     *          }\n\t     *      });\n\t     *\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getEndpoints\n\t     * @returns {Array<respoke.Endpoint>}\n\t     */\n\t    that.getEndpoints = function () {\n\t        return endpoints;\n\t    };\n\t\n\t    /**\n\t     * Get conference participants by conference id.\n\t     *\n\t     * ```\n\t     * client.getConferenceParticipants({ id: 'mygroup' }).done(function (participants) {\n\t     *     var ids = participants.map(function (p) { return p.endpointId; });\n\t     *     console.log(ids); // ['person1', 'person2']\n\t     * });\n\t     * ```\n\t     * @memberof respoke.Client\n\t     * @method respoke.Client.getConferenceParticipants\n\t     * @param object {params}\n\t     * @param string {params.id}\n\t     * @returns {Promise}\n\t     */\n\t    that.getConferenceParticipants = signalingChannel.getConferenceParticipants;\n\t\n\t    return that;\n\t}; // End respoke.Client\n\t\n\t/**\n\t * Handle sending successfully.\n\t * @callback respoke.Client.successHandler\n\t */\n\t/**\n\t * Handle joining a group successfully. This callback is called only once when Client.join() is called.\n\t * @callback respoke.Client.joinHandler\n\t * @param {respoke.Group} group\n\t */\n\t/**\n\t * Receive notification that the client has joined a group. This callback is called everytime\n\t * respoke.Client#join is fired.\n\t * @callback respoke.Client.onJoin\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Group} evt.group\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * Receive notification that the client has left a group. This callback is called everytime\n\t * respoke.Client#leave is fired.\n\t * @callback respoke.Client.onLeave\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Group} evt.group\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * Receive notification that a message has been received. This callback is called every time\n\t * respoke.Client#message is fired.\n\t * @callback respoke.Client.onClientMessage\n\t * @param {respoke.Event} evt\n\t * @param {respoke.TextMessage} evt.message\n\t * @param {respoke.Group} [evt.group] - If the message is to a group we already know about,\n\t * this will be set. If null, the developer can use client.join({id: evt.message.header.channel}) to join\n\t * the group. From that point forward, Group#message will fire when a message is received as well. If\n\t * group is undefined instead of null, the message is not a group message at all.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Client} evt.target\n\t */\n\t/**\n\t * Receive notification that the client is receiving a call from a remote party. This callback is called every\n\t * time respoke.Client#call is fired.\n\t * @callback respoke.Client.onCall\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Call} evt.call\n\t * @param {respoke.Endpoint} evt.endpoint\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * Receive notification that the client is receiving a request for a direct connection from a remote party.\n\t * This callback is called every time respoke.Client#direct-connection is fired.\n\t * @callback respoke.Client.onDirectConnection\n\t * @param {respoke.Event} evt\n\t * @param {respoke.DirectConnection} evt.directConnection\n\t * @param {respoke.Endpoint} evt.endpoint\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * Receive notification Respoke has successfully connected to the cloud. This callback is called every time\n\t * respoke.Client#connect is fired.\n\t * @callback respoke.Client.onConnect\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Client} evt.target\n\t */\n\t/**\n\t * Receive notification Respoke has successfully disconnected from the cloud. This callback is called every time\n\t * respoke.Client#disconnect is fired.\n\t * @callback respoke.Client.onDisconnect\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Client} evt.target\n\t */\n\t/**\n\t * Receive notification Respoke has successfully reconnected to the cloud. This callback is called every time\n\t * respoke.Client#reconnect is fired.\n\t * @callback respoke.Client.onReconnect\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Client} evt.target\n\t */\n\t/**\n\t * Handle disconnection to the cloud successfully.\n\t * @callback respoke.Client.disconnectSuccessHandler\n\t */\n\t/**\n\t * Handle an error that resulted from a method call.\n\t * @callback respoke.Client.errorHandler\n\t * @params {Error} err\n\t */\n\t/**\n\t * Handle connection to the cloud successfully.\n\t * @callback respoke.Client.connectSuccessHandler\n\t */\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Copyright 2015, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t */\n\t\n\tvar respoke = __webpack_require__(1);\n\t\n\t/**\n\t * A `respoke.Connection` always belongs to an Endpoint.\n\t *\n\t * There is a distinction between Endpoint and Connection because an Endpoint can be authenticated\n\t * from multiple devices, browsers, or browser tabs. Each of these separate authentications is a Connection.\n\t * A Client can choose to interact with connections of the same endpoint in different ways.\n\t *\n\t * @constructor\n\t * @class respoke.Connection\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.id\n\t * @returns {respoke.Connection}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Connection\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name client\n\t     * @type {respoke.Client}\n\t     * @private\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t\n\t    /**\n\t     * The connection id.\n\t     * @memberof! respoke.Connection\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = that.id || that.connectionId;\n\t    if (!that.id) {\n\t        throw new Error(\"Can't make a connection without an id.\");\n\t    }\n\t    delete that.instanceId;\n\t    delete that.connectionId;\n\t\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.Connection\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Connection';\n\t\n\t    /**\n\t     * Represents the presence status. Typically a string, but other types are supported.\n\t     * Defaults to `'unavailable'`.\n\t     *\n\t     * **Do not modify this directly** - it won't update presence with Respoke. Presence must be updated\n\t     * by the remote endpoint.\n\t     *\n\t     * @memberof! respoke.Connection\n\t     * @name presence\n\t     * @type {string|number|object|Array}\n\t     */\n\t    that.presence = 'unavailable';\n\t\n\t    /**\n\t     * Deprecated: use endpoint.presence instead.\n\t     *\n\t     * Return the presence.\n\t     * @memberof! respoke.Connection\n\t     * @deprecated\n\t     * @name presence\n\t     * @type {string|number|object|Array}\n\t     */\n\t    that.getPresence = function () {\n\t        return that.presence;\n\t    };\n\t\n\t    /**\n\t     * Send a message to this connection of an endpoint. If the endpoint has multiple connections,\n\t     * it will only receive the message at this connection.\n\t     *\n\t     *     connection.sendMessage({\n\t     *         message: \"PJ, put that PBR down!\"\n\t     *     });\n\t     *\n\t     * **Using callbacks** will disable promises.\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.sendMessage\n\t     * @param {object} params\n\t     * @param {string} params.message\n\t     * @param {boolean} [params.ccSelf=false] Copy this client's own endpoint on this message so that they arrive\n\t     * at other devices it might be logged into elsewhere.\n\t     * @param {boolean} [params.push=false] Whether or not the message should be considered for push notifications to\n\t     * mobile devices.\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation\n\t     * of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        params = params || {};\n\t        params.connectionId = that.id;\n\t        params.ccSelf = (typeof params.ccSelf === \"boolean\" ? params.ccSelf : false);\n\t        return that.getEndpoint().sendMessage(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new screen sharing call. Screenshares are inherently unidirectional video only. This may change\n\t     * in the future when Chrome adds the ability to obtain screen video and microphone audio at the same time. For\n\t     * now, if you also need audio, place a second audio only call.\n\t     *\n\t     * The endpoint who calls `connection.startScreenShare` will be the one whose screen is shared. If you'd like to\n\t     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n\t     * not the sharer, it is recommened that you use `endpoint.sendMessage` to send a control message to the user\n\t     * whose screenshare is being requested so that user's app can call `connection.startScreenShare`.\n\t     *\n\t     * NOTE: At this time, screen sharing only works with Chrome, and Chrome requires a Chrome extension to\n\t     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension.\n\t     * Support for additional browsers will be added in the future.\n\t     *\n\t     *     connection.startScreenShare({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startScreenShare\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n\t     * and the remote party has received the video.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startScreenShare = function (params) {\n\t        client.verifyConnected();\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().startScreenShare(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new Call for a voice and/or video call this particular connection, only. The Call cannot be answered\n\t     * by another connection of this Endpoint.\n\t     *\n\t     *     connection.startCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {RTCConstraints} [params.constraints]\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startCall = function (params) {\n\t        params = params || {};\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().startCall(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new audio-only call.\n\t     *\n\t     *     connection.startAudioCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startAudioCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startAudioCall = function (params) {\n\t        client.verifyConnected();\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().startAudioCall(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new call with audio and video.\n\t     *\n\t     *     connection.startVideoCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startVideoCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has\n\t     * been hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startVideoCall = function (params) {\n\t        client.verifyConnected();\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().startVideoCall(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new DirectConnection with this particular connection, only. The DirectConnection cannot be answered\n\t     * by another connection of this Endpoint.  This method creates a new Call as well, attaching this\n\t     * DirectConnection to it for the purposes of creating a peer-to-peer link for sending data such as messages to\n\t     * the other endpoint. Information sent through a DirectConnection is not handled by the cloud infrastructure.\n\t     *\n\t     *     connection.startDirectConnection({\n\t     *         onOpen: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startDirectConnection\n\t     * @param {object} params\n\t     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess] - Success handler for this\n\t     * invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {respoke.DirectConnection.onStart} [params.onStart] - A callback for when setup of the direct\n\t     * connection begins. The direct connection will not be open yet.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - A callback for receiving notification of when\n\t     * the DirectConnection is open and ready to be used.\n\t     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n\t     * connection.\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - A callback for receiving notification of\n\t     * when the DirectConnection is closed and the two Endpoints are disconnected.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - A callback for receiving messages sent\n\t     * through the DirectConnection.\n\t     * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the\n\t     * request for a direct connection and setup begins.\n\t     * @returns {respoke.DirectConnection} The DirectConnection which can be used to send data and messages\n\t     * directly to the other endpoint.\n\t     */\n\t    that.startDirectConnection = function (params) {\n\t        var retVal;\n\t        var deferred;\n\t        params = params || {};\n\t\n\t        try {\n\t            client.verifyConnected();\n\t        } catch (err) {\n\t            deferred = respoke.Q.defer();\n\t            retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().startDirectConnection(params);\n\t    };\n\t\n\t    /**\n\t     * Get the Endpoint that this Connection belongs to.\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.getEndpoint\n\t     * @returns {respoke.Endpoint}\n\t     */\n\t    that.getEndpoint = function () {\n\t        return client.getEndpoint({\n\t            id: that.endpointId,\n\t            skipPresence: true\n\t        });\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.Connection\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Copyright 2015, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t */\n\t\n\tvar Q = __webpack_require__(6);\n\tvar respoke = __webpack_require__(1);\n\tvar log = respoke.log;\n\t\n\t/**\n\t * `respoke.Endpoint`s are users of a Respoke app.\n\t * An Endpoint can be a person in a browser or device, or an app using Respoke APIs from a server.\n\t * A Client can interact with endpoints through messages, audio or video calls, or direct connections.\n\t * An Endpoint may be authenticated from multiple devices to the same app (each of which is\n\t * represented by a Connection).\n\t *\n\t * ```\n\t * var jim = client.getEndpoint({ id: 'jim' });\n\t * ```\n\t *\n\t * @constructor\n\t * @class respoke.Endpoint\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.id\n\t * @param {string} params.instanceId\n\t * @param {respoke.client.resolvePresence} [params.resolvePresence] An optional function for resolving presence\n\t * for an endpoint.\n\t * @returns {respoke.Endpoint}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Endpoint\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name client\n\t     * @type {respoke.Client}\n\t     * @private\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name signalingChannel\n\t     * @type {respoke.SignalingChannel}\n\t     * @private\n\t     */\n\t    var signalingChannel = params.signalingChannel;\n\t    /**\n\t     * The number this endpoint's connections that are joined to groups. So if\n\t     * an endpoint has 3 connections in the same group, the\n\t     * `groupConnectionCount` for that endpoint would be 3.\n\t     *\n\t     * @memberof! respoke.DirectConnection\n\t     * @name groupConnectionCount\n\t     * @type {number}\n\t     */\n\t    that.groupConnectionCount = 0;\n\t\n\t    var addCall = params.addCall;\n\t\n\t    delete that.signalingChannel;\n\t    delete that.instanceId;\n\t    delete that.connectionId;\n\t    delete that.addCall;\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.Endpoint\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Endpoint';\n\t    /**\n\t     * A direct connection to this endpoint. This can be used to send direct messages.\n\t     * @memberof! respoke.Endpoint\n\t     * @name directConnection\n\t     * @type {respoke.DirectConnection}\n\t     */\n\t    that.directConnection = null;\n\t\n\t    /**\n\t     * Array of connections for this endpoint.\n\t     * @memberof! respoke.Endpoint\n\t     * @name connections\n\t     * @type {Array<respoke.Connection>}\n\t     */\n\t    that.connections = [];\n\t    client.listen('disconnect', function disconnectHandler() {\n\t        that.connections = [];\n\t    });\n\t\n\t    var resolveEndpointPresence = params.resolveEndpointPresence;\n\t    delete that.resolveEndpointPresence;\n\t\n\t    /**\n\t     * Represents the presence status. Typically a string, but other types are supported.\n\t     * Defaults to `'unavailable'`.\n\t     *\n\t     * **Do not modify this directly** - it won't update presence with Respoke. Presence must be updated\n\t     * by the remote endpoint.\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @name presence\n\t     * @type {string|number|object|Array}\n\t     */\n\t    that.presence = 'unavailable';\n\t\n\t    /**\n\t     * Deprecated: use endpoint.presence instead.\n\t     *\n\t     * Return the presence.\n\t     * @memberof! respoke.Endpoint\n\t     * @deprecated\n\t     * @name presence\n\t     * @type {string|number|object|Array}\n\t     */\n\t    that.getPresence = function () {\n\t        return that.presence;\n\t    };\n\t\n\t    /**\n\t     * Internally set the presence on the object for this session upon receipt of a presence notification from\n\t     * the backend. Respoke developers shouldn't use this.\n\t     *\n\t     * ```\n\t     * client.setPresence({ presence: 'busy' });\n\t     * ```\n\t     *\n\t     * While technically available on an Endpoint or Connection, this will not trigger\n\t     * any API changes. The changes will only be reflected locally.\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.setPresence\n\t     * @param {object} params\n\t     * @param {string|number|object|Array} [params.presence=available]\n\t     * @param {string} params.connectionId\n\t     * @fires respoke.Endpoint#presence\n\t     * @private\n\t     */\n\t    that.setPresence = function (params) {\n\t        var connection;\n\t        params = params || {};\n\t        params.presence = params.presence || 'available';\n\t        params.connectionId = params.connectionId || that.connectionId;\n\t\n\t        if (!params.connectionId) {\n\t            throw new Error(\"Can't set Endpoint presence without a connectionId.\");\n\t        }\n\t\n\t        connection = that.getConnection({connectionId: params.connectionId}) || client.getConnection({\n\t            connectionId: params.connectionId,\n\t            skipCreate: false,\n\t            endpointId: that.id\n\t        });\n\t\n\t        connection.presence = params.presence;\n\t        that.resolvePresence();\n\t\n\t        /**\n\t         * This event indicates that the presence for this endpoint has been updated.\n\t         * @event respoke.Endpoint#presence\n\t         * @type {respoke.Event}\n\t         * @property {string|number|object|Array} presence\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Endpoint} target\n\t         */\n\t        that.fire('presence', {\n\t            presence: that.presence\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Send a message to the endpoint through the infrastructure.\n\t     *\n\t     * ```\n\t     * endpoint.sendMessage({\n\t     *     message: \"wassuuuuup\"\n\t     * });\n\t     * ```\n\t     *\n\t     * **Using callbacks** will disable promises.\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.sendMessage\n\t     * @param {object} params\n\t     * @param {string} params.message\n\t     * @param {string} [params.connectionId]\n\t     * @param {boolean} [params.ccSelf=true] Copy this client's own endpoint on this message so that they arrive\n\t     * at other devices it might be logged into elsewhere.\n\t     * @param {boolean} [params.push=false] Whether or not to consider the message for push notifications to mobile\n\t     * devices.\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of this\n\t     * method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this method\n\t     * only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        params = params || {};\n\t        params.ccSelf = (typeof params.ccSelf === \"boolean\" ? params.ccSelf : true);\n\t\n\t        promise = signalingChannel.sendMessage({\n\t            ccSelf: params.ccSelf,\n\t            connectionId: params.connectionId,\n\t            message: params.message,\n\t            push: !!params.push,\n\t            recipient: that\n\t        });\n\t\n\t        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Create a new audio-only call.\n\t     *\n\t     *     endpoint.startAudioCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startAudioCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startAudioCall = function (params) {\n\t        params = params || {};\n\t\n\t        params.constraints = respoke.convertConstraints(params.constraints, [{\n\t            video: false,\n\t            audio: true,\n\t            optional: [],\n\t            mandatory: {}\n\t        }]);\n\t\n\t        return that.startCall(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new call with audio and video.\n\t     *\n\t     *     endpoint.startVideoCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startVideoCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startVideoCall = function (params) {\n\t        params = params || {};\n\t\n\t        params.constraints = respoke.convertConstraints(params.constraints, [{\n\t            video: true,\n\t            audio: true,\n\t            optional: [],\n\t            mandatory: {}\n\t        }]);\n\t\n\t        return that.startCall(params);\n\t    };\n\t\n\t    /**\n\t     * The endpoint who calls `endpoint.startScreenShare` will be the one whose screen is shared. If you'd like to\n\t     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n\t     * not the sharer, it is recommended that you use `endpoint.sendMessage` to send a control message to the user\n\t     * whose screenshare is being requested so that user's app can call `endpoint.startScreenShare`.\n\t     *\n\t     * By default, the call will be one-way screen share only, with the recipient sending nothing. To turn it into\n\t     * a bidirectional call with the recipient sending video and both parties sending audio, set `params.sendOnly`\n\t     * to false.\n\t     *\n\t     * NOTE: At this time, screen sharing only works with Chrome and Firefox, and both require browser extensions to\n\t     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension\n\t     * and https://github.com/respoke/respoke-firefox-screen-sharing-extension.\n\t     *\n\t     *     endpoint.startScreenShare({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startScreenShare\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n\t     * and the remote party has received the video.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {Array<RTCConstraints>} [params.constraints] - Additional media to add to the call.\n\t     * @param {RTCConstraints} [params.screenConstraints] - Overrides for the screen media.\n\t     * @param {boolean} [params.sendOnly=true] - Whether the call should be unidirectional.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {string} [params.source] - Pass in what type of mediaSource you want. If omitted, you'll have access\n\t     * to both the screen and windows. In firefox, you'll have access to the screen only.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startScreenShare = function (params) {\n\t        params = params || {};\n\t        var hasAudio;\n\t        var addAudio;\n\t        params.target = 'screenshare';\n\t\n\t        if (typeof params.caller !== 'boolean') {\n\t            params.caller = true;\n\t        }\n\t\n\t        // true and undefined -> true\n\t        // receiveOnly will be set in call.js by respoke.sdpHasSendOnly\n\t        params.sendOnly = (params.caller && (params.sendOnly || (params.sendOnly === undefined)));\n\t        addAudio = (!params.sendOnly && (!params.screenConstraints ||\n\t            (params.screenConstraints && params.screenConstraints.audio)));\n\t\n\t        if (params.caller) {\n\t            params.constraints = respoke.convertConstraints(params.constraints);\n\t            params.constraints.push(respoke.getScreenShareConstraints({\n\t                constraints: params.screenConstraints\n\t            }));\n\t            delete params.screenConstraints;\n\t\n\t            params.constraints.forEach(function (con) {\n\t                if (con.audio) {\n\t                    hasAudio = true;\n\t                }\n\t            });\n\t\n\t            /* If they didn't override screensharing constraints and no constraints so far have included audio,\n\t             * add audio to the call. If they overrode the default screensharing constraints, we'll assume they\n\t             * know what they are doing and didn't want audio.\n\t             */\n\t            if (addAudio && !hasAudio) {\n\t                params.constraints.push({\n\t                    audio: true,\n\t                    video: false\n\t                });\n\t            }\n\t        }\n\t\n\t        return that.startCall(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new call.\n\t     *\n\t     *     endpoint.startCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {Array<RTCConstraints>} [params.constraints]\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startCall = function (params) {\n\t        var call = null;\n\t        params = params || {};\n\t\n\t        params.constraints = respoke.convertConstraints(params.constraints, [{\n\t            video: true,\n\t            audio: true,\n\t            mandatory: {},\n\t            optional: []\n\t        }]);\n\t\n\t        // If they are requesting a screen share by constraints without having called startScreenShare\n\t        if (params.target !== 'screenshare' && params.constraints[0] &&\n\t                respoke.constraintsHasScreenShare(params.constraints[0])) {\n\t            return that.startScreenShare(params);\n\t        }\n\t\n\t        params.target = params.target || \"call\";\n\t\n\t        log.debug('Endpoint.call', params);\n\t        client.verifyConnected();\n\t        if (typeof params.caller !== 'boolean') {\n\t            params.caller = true;\n\t        }\n\t\n\t        if (!that.id) {\n\t            log.error(\"Can't start a call without endpoint ID!\");\n\t            return;\n\t        }\n\t\n\t        params.instanceId = instanceId;\n\t        params.remoteEndpoint = that;\n\t\n\t        params.signalOffer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'offer';\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = that;\n\t\n\t            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n\t        };\n\t        params.signalAnswer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'answer';\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = that;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n\t                signalParams.call.hangup({signal: false});\n\t            });\n\t        };\n\t        params.signalConnected = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.connectionId = signalParams.call.connectionId;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalParams.recipient = that;\n\t            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n\t                signalParams.call.hangup();\n\t            });\n\t        };\n\t        params.signalModify = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = that;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalingChannel.sendModify(signalParams).done();\n\t        };\n\t        params.signalCandidate = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = that;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            return signalingChannel.sendCandidate(signalParams);\n\t        };\n\t        params.signalHangup = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = that;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalingChannel.sendHangup(signalParams).done();\n\t        };\n\t        params.signalReport = function (signalParams) {\n\t            log.debug(\"Sending debug report\", signalParams.report);\n\t            signalingChannel.sendReport(signalParams).done();\n\t        };\n\t\n\t        params.signalingChannel = signalingChannel;\n\t        call = respoke.Call(params);\n\t        addCall({call: call});\n\t        return call;\n\t    };\n\t\n\t    /**\n\t     * Create a new DirectConnection.  This method creates a new Call as well, attaching this DirectConnection to\n\t     * it for the purposes of creating a peer-to-peer link for sending data such as messages to the other endpoint.\n\t     * Information sent through a DirectConnection is not handled by the cloud infrastructure.  If there is already\n\t     * a direct connection open, this method will resolve the promise with that direct connection instead of\n\t     * attempting to create a new one.\n\t     *\n\t     *     endpoint.startDirectConnection({\n\t     *         onOpen: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startDirectConnection\n\t     * @param {object} params\n\t     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess] - Success handler for this\n\t     * invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {respoke.DirectConnection.onStart} [params.onStart] - A callback for when setup of the direct\n\t     * connection begins. The direct connection will not be open yet.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - A callback for receiving notification of when\n\t     * the DirectConnection is open and ready to be used.\n\t     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n\t     * connection.\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - A callback for receiving notification of\n\t     * when the DirectConnection is closed and the two Endpoints are disconnected.\n\t     * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the\n\t     * request for a direct connection and setup begins.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - A callback for receiving messages sent\n\t     * through the DirectConnection.\n\t     * @param {string} [params.connectionId] - An optional connection ID to use for this connection. This allows\n\t     * the connection to be made to a specific instance of an endpoint in the case that the same endpoint is logged\n\t     * in from multiple locations.\n\t     * @returns {Promise<respoke.DirectConnection>} The DirectConnection which can be used to send data and messages\n\t     * directly to the other endpoint.\n\t     */\n\t    that.startDirectConnection = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t        var call;\n\t\n\t        try {\n\t            client.verifyConnected();\n\t        } catch (err) {\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        if (that.directConnection || params.create === false) {\n\t            deferred.resolve(that.directConnection);\n\t            return retVal;\n\t        }\n\t\n\t        if (typeof params.caller !== 'boolean') {\n\t            params.caller = true;\n\t        }\n\t\n\t        if (!that.id) {\n\t            deferred.reject(new Error(\"Can't start a direct connection without endpoint ID!\"));\n\t            return retVal;\n\t        }\n\t\n\t        params.instanceId = instanceId;\n\t        params.remoteEndpoint = that;\n\t\n\t        params.signalOffer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'offer';\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t\n\t            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n\t        };\n\t        params.signalConnected = function (signalParams) {\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n\t                signalParams.call.hangup();\n\t            });\n\t        };\n\t        params.signalAnswer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t            signalParams.signalType = 'answer';\n\t            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n\t                signalParams.call.hangup({signal: false});\n\t            });\n\t        };\n\t        params.signalCandidate = function (signalParams) {\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t            return signalingChannel.sendCandidate(signalParams);\n\t        };\n\t        params.signalHangup = function (signalParams) {\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t            signalingChannel.sendHangup(signalParams).done();\n\t        };\n\t        params.signalReport = function (signalParams) {\n\t            signalParams.report.target = 'directConnection';\n\t            log.debug(\"Not sending report\");\n\t            log.debug(signalParams.report);\n\t        };\n\t        params.needDirectConnection = true;\n\t        // Don't include audio in the offer SDP\n\t        params.offerOptions = {\n\t            mandatory: {\n\t                OfferToReceiveAudio: false\n\t            }\n\t        };\n\t\n\t        params.signalingChannel = signalingChannel;\n\t        call = respoke.Call(params);\n\t        addCall({call: call});\n\t        call.listen('direct-connection', function directConnectionHandler(evt) {\n\t            that.directConnection = evt.directConnection;\n\t            if (params.caller !== true) {\n\t                if (!client.hasListeners('direct-connection') &&\n\t                        !client.hasListeners('direct-connection') &&\n\t                        !call.hasListeners('direct-connection')) {\n\t                    that.directConnection.reject();\n\t                    deferred.reject(new Error(\"Got an incoming direct connection with no handlers to accept it!\"));\n\t                    return;\n\t                }\n\t\n\t                deferred.resolve(that.directConnection);\n\t                that.directConnection.listen('close', function closeHandler(evt) {\n\t                    that.directConnection = undefined;\n\t                }, true);\n\t            }\n\t        }, true);\n\t\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Find the presence out of all known connections with the highest priority (most availability)\n\t     * and set it as the endpoint's resolved presence.\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.resolvePresence\n\t     * @private\n\t     */\n\t    that.resolvePresence = function () {\n\t\n\t        var presenceList = that.connections.map(function (connection) {\n\t            return connection.presence;\n\t        });\n\t\n\t        if (resolveEndpointPresence !== undefined) {\n\t            that.presence = resolveEndpointPresence(presenceList);\n\t        } else {\n\t            var options = ['chat', 'available', 'away', 'dnd', 'xa', 'unavailable'];\n\t            var idList;\n\t\n\t            /*\n\t             * Sort the connections array by the priority of the value of the presence of that\n\t             * connectionId. This will cause the first element in the list to be the id of the\n\t             * session with the highest priority presence so we can access it by the 0 index.\n\t             * TODO: If we don't really care about the sorting and only about the highest priority\n\t             * we could use Array.prototype.every to improve this algorithm.\n\t             */\n\t            idList = that.connections.sort(function sorter(a, b) {\n\t                var indexA = options.indexOf(a.presence);\n\t                var indexB = options.indexOf(b.presence);\n\t                // Move it to the end of the list if it isn't one of our accepted presence values\n\t                indexA = indexA === -1 ? 1000 : indexA;\n\t                indexB = indexB === -1 ? 1000 : indexB;\n\t                return indexA < indexB ? -1 : (indexB < indexA ? 1 : 0);\n\t            });\n\t\n\t            if (idList[0]) {\n\t                that.presence = idList[0].presence;\n\t            } else {\n\t                that.presence = 'unavailable';\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Get the Connection with the specified id. The connection ID is optional if only one connection exists.\n\t     *\n\t     *     var connection = endpoint.getConnection({\n\t     *         connectionId: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\"\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.getConnection\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} [params.connectionId]\n\t     * @return {respoke.Connection}\n\t     */\n\t    that.getConnection = function (params) {\n\t        var connection = null;\n\t        params = params || {};\n\t        if (that.connections.length === 1 &&\n\t                (!params.connectionId || that.connections[0] === params.connectionId)) {\n\t            return that.connections[0];\n\t        }\n\t\n\t        if (!params || !params.connectionId) {\n\t            throw new Error(\"Can't find a connection without the connectionId.\");\n\t        }\n\t\n\t        that.connections.every(function eachConnection(conn) {\n\t            if (conn.id === params.connectionId) {\n\t                connection = conn;\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t\n\t        return connection;\n\t    };\n\t\n\t    /**\n\t     * Called to indicate that a connection for this endpoint has joined a\n\t     * group.\n\t     *\n\t     * @private\n\t     * @returns {number} Number of groups this endpoint is a member of.\n\t     */\n\t    that.joinedGroup = function () {\n\t        ++that.groupConnectionCount;\n\t    };\n\t\n\t    /**\n\t     * Called to indicate that a connection for this endpoint has left a\n\t     * group.\n\t     *\n\t     * @private\n\t     * @returns {number} Number of groups this endpoint is a member of.\n\t     */\n\t    that.leftGroup = function () {\n\t        --that.groupConnectionCount;\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.Endpoint\n\t/**\n\t * Handle messages sent to the logged-in user from this one Endpoint.  This callback is called every time\n\t * respoke.Endpoint#message fires.\n\t * @callback respoke.Endpoint.onMessage\n\t * @param {respoke.Event} evt\n\t * @param {respoke.TextMessage} evt.message - the message\n\t * @param {respoke.Endpoint} evt.target\n\t * @param {string} evt.name - the event name\n\t */\n\t/**\n\t * Handle presence notifications from this one Endpoint.  This callback is called every time\n\t * respoke.Endpoint#message fires.\n\t * @callback respoke.Endpoint.onPresence\n\t * @param {respoke.Event} evt\n\t * @param {string|number|object|Array} evt.presence - the Endpoint's presence\n\t * @param {respoke.Endpoint} evt.target\n\t * @param {string} evt.name - the event name\n\t */\n\t /**\n\t * Handle resolving presence for this endpoint\n\t * @callback respoke.Client.resolveEndpointPresence\n\t * @param {Array<object>} connectionPresence\n\t * @returns {object|string|number}\n\t */\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t/*\n\t * Copyright 2015, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t */\n\t\n\t/**\n\t * A text message and the information needed to route it.\n\t * @class respoke.TextMessage\n\t * @constructor\n\t * @param {object} params\n\t * @param {string} [params.endpointId] - If sending, endpoint ID of the thing we're sending a message to.\n\t * @param {string} [params.cSelf] - Copy this client's own endpoint on this message so that they arrive\n\t * at other devices it might be logged into elsewhere.\n\t * @param {string} [params.connectionId] - If sending, connection ID of the thing we're sending a message to.\n\t * @param {string} [params.message] - If sending, a message to send\n\t * @param {object} [params.rawMessage] - If receiving, the parsed JSON we got from the server\n\t * @private\n\t * @returns {respoke.TextMessage}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = {};\n\t\n\t    /**\n\t     * Parse rawMessage and set attributes required for message delivery.\n\t     * @memberof! respoke.TextMessage\n\t     * @method respoke.TextMessage.parse\n\t     * @private\n\t     */\n\t    function parse() {\n\t        if (params.rawMessage) {\n\t            try {\n\t                that.endpointId = params.rawMessage.header.from;\n\t                that.originalRecipient = params.rawMessage.header.toOriginal;\n\t                that.connectionId = params.rawMessage.header.fromConnection;\n\t                that.timestamp = params.rawMessage.header.timestamp;\n\t            } catch (e) {\n\t                throw new Error(e);\n\t            }\n\t            that.message = params.rawMessage.message || params.rawMessage.body;\n\t            if (params.rawMessage.header.channel) {\n\t                that.recipient = params.rawMessage.header.channel;\n\t            }\n\t        } else {\n\t            try {\n\t                that.to = params.endpointId;\n\t                that.ccSelf = params.ccSelf;\n\t                that.toConnection = params.connectionId;\n\t                that.requestConnectionReply = (params.requestConnectionReply === true);\n\t                that.push = (params.push === true);\n\t            } catch (e) {\n\t                throw new Error(e);\n\t            }\n\t            that.message = params.message;\n\t        }\n\t    }\n\t\n\t    parse();\n\t    return that;\n\t}; // End respoke.TextMessage\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t/*\n\t * Copyright 2015, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t */\n\t\n\t/**\n\t * A signaling message and the information needed to route it.\n\t * @class respoke.SignalingMessage\n\t * @constructor\n\t * @param {object} params\n\t * @param {string} [params.fromEndpoint] - If sending, the endpoint ID of the recipient\n\t * @param {string} [params.fromConnection] - If sending, the connection ID of the recipient\n\t * @param {string} [params.connectionId] - The connectionId of the endpoint whose answer signal has been accepted.\n\t * @param {string} [params.signal] - If sending, a message to send\n\t * @param {respoke.Endpoint} [params.recipient]\n\t * @param {string} [params.signalType]\n\t * @param {string} [params.sessionId] - A globally unique ID to identify this call.\n\t * @param {string} [params.target] - Either 'call' or 'directConnection', TODO remove the need for this.\n\t * @param {string} [params.callerId] - Human readable caller ID. Not implemented.\n\t * @param {RTCSessionDescription} [params.sdp]\n\t * @param {Array<RTCIceCandidate>} [params.iceCandidates]\n\t * @param {object} [params.offering] - Object describing the media we're offering to send the remote party in a more\n\t * usable way than SDP. Not implemented.\n\t * @param {object} [params.requesting] - Object describing the media we're requesting from the remote party in a more\n\t * usable way than SDP. Not implemented.\n\t * @param {string} [params.reason] - Human readable reason for hanging up.\n\t * @param {string} [params.error] - String indicating that a previous signal was malformed or received in the wrong\n\t * state. Not implemented.\n\t * @param {string} [params.status] - \"Ringing\". Not implemented.\n\t * @param {object} [params.rawMessage] - If receiving, the parsed JSON we got from the server\n\t * @private\n\t * @returns {respoke.SignalingMessage}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = {};\n\t    /**\n\t     * Attributes without which we cannot build a signaling message.\n\t     * @memberof! respoke.SignalingMessage\n\t     * @name required\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var required = ['recipient', 'signalType', 'sessionId', 'target', 'signalId'];\n\t    /**\n\t     * Attributes which we will copy onto the signal if defined.\n\t     * @memberof! respoke.SignalingMessage\n\t     * @name required\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var allowed = [\n\t        'signalType', 'sessionId', 'sessionDescription', 'iceCandidates', 'offering', 'target', 'signalId', 'callerId',\n\t        'requesting', 'reason', 'error', 'status', 'connectionId', 'version', 'finalCandidates'\n\t    ];\n\t\n\t    params.version = '1.0';\n\t\n\t    /**\n\t     * Parse rawMessage and set attributes required for message delivery.\n\t     * @memberof! respoke.SignalingMessage\n\t     * @method respoke.SignalingMessage.parse\n\t     * @private\n\t     */\n\t    function parse() {\n\t        if (params.rawMessage) {\n\t            try {\n\t                that = JSON.parse(params.rawMessage.body); // Incoming message\n\t            } catch (e) {\n\t                that = params.rawMessage.body;\n\t            }\n\t            that.fromType = params.rawMessage.header.fromType;\n\t            that.fromEndpoint = params.rawMessage.header.from;\n\t            that.fromConnection = params.rawMessage.header.fromConnection;\n\t            that.timestamp = params.rawMessage.header.timestamp;\n\t\n\t            if (!that.target) {\n\t                that.target = 'call';\n\t            }\n\t        } else {\n\t            required.forEach(function eachAttr(attr) {\n\t                if (params[attr] === 0 || !params[attr]) {\n\t                    throw new Error(\"Can't build a signaling without \" + attr);\n\t                }\n\t            });\n\t\n\t            allowed.forEach(function eachAttr(attr) {\n\t                if (params[attr] === 0 || params[attr]) {\n\t                    that[attr] = params[attr];\n\t                }\n\t            });\n\t        }\n\t    }\n\t\n\t    parse();\n\t    return that;\n\t}; // End respoke.SignalingMessage\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Copyright 2015, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t */\n\t\n\tvar Q = __webpack_require__(6);\n\tvar respoke = __webpack_require__(1);\n\t\n\t/**\n\t * A `respoke.Group` represents a collection of endpoints.\n\t *\n\t * There are methods to communicate with the endpoints at the group level and track\n\t * their presence in the group.\n\t *\n\t * @class respoke.Group\n\t * @augments respoke.EventEmitter\n\t * @constructor\n\t * @param {object} params\n\t * @param {string} params.instanceId\n\t * @param {respoke.Group.onJoin} params.onJoin - A callback to receive notifications every time a new\n\t * endpoint has joined the group. This callback does not get called when the client joins the group.\n\t * @param {respoke.Group.onMessage} params.onMessage - A callback to receive messages sent to the group from\n\t * remote endpoints.\n\t * @param {respoke.Group.onLeave} params.onLeave - A callback to receive notifications every time a new\n\t * endpoint has left the group. This callback does not get called when the client leaves the group.\n\t * @returns {respoke.Group}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t\n\t    var that = respoke.EventEmitter(params);\n\t    /**\n\t     * @memberof! respoke.Group\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var client = respoke.getClient(instanceId);\n\t\n\t    if (!that.id) {\n\t        throw new Error(\"Can't create a group without an ID.\");\n\t    }\n\t\n\t    /**\n\t     * Indicates whether there have been group membership changes since the last time we performed\n\t     * a network request to list group members.\n\t     * @memberof! respoke.Group\n\t     * @name cacheIsValid\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var cacheIsValid = false;\n\t\n\t    /**\n\t     * Internal reference to the api signaling channel.\n\t     * @memberof! respoke.Group\n\t     * @name signalingChannel\n\t     * @type respoke.SignalingChannel\n\t     * @private\n\t     */\n\t    var signalingChannel = params.signalingChannel;\n\t    delete params.signalingChannel;\n\t\n\t    /**\n\t     * The connections to members of this group.\n\t     * @memberof! respoke.Group\n\t     * @name endpoints\n\t     * @type {array<respoke.Connection>}\n\t     */\n\t    that.connections = [];\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.Group\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Group';\n\t    that.listen('join', params.onJoin);\n\t    /**\n\t     * Indicates that a message has been sent to this group.\n\t     * @event respoke.Group#message\n\t     * @type {respoke.Event}\n\t     * @property {respoke.TextMessage} message\n\t     * @property {string} name - The event name.\n\t     * @property {respoke.Group} target\n\t     */\n\t    that.listen('message', params.onMessage);\n\t    that.listen('leave', params.onLeave);\n\t\n\t    /**\n\t     * Clear out the connections within this group. Called when we're no longer\n\t     * connected to the group.\n\t     * @private\n\t     */\n\t    function clearConnections() {\n\t        that.connections.forEach(function (connection) {\n\t            connection.getEndpoint().leftGroup();\n\t        });\n\t        that.connections = [];\n\t    }\n\t\n\t    client.listen('disconnect', function disconnectHandler() {\n\t        cacheIsValid = false;\n\t        clearConnections();\n\t    }, true);\n\t\n\t    delete that.instanceId;\n\t    delete that.onMessage;\n\t    delete that.onPresence;\n\t    delete that.onJoin;\n\t    delete that.onLeave;\n\t\n\t    /**\n\t     * Join this group.\n\t     *\n\t     *     group.join().done(function () {\n\t     *         group.sendMessage({\n\t     *             message: \"Hey, ppl! I'm here!\"\n\t     *         });\n\t     *     }, function (err) {\n\t     *         // Couldn't join the group, possibly permissions error\n\t     *     });\n\t     *\n\t     * **Using callbacks** will disable promises.\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.join\n\t     * @return {Promise|undefined}\n\t     * @param {object} params\n\t     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @fires respoke.Client#join\n\t     */\n\t    that.join = function () {\n\t        var params = {\n\t            id: that.id\n\t        };\n\t        var promise;\n\t        var deferred;\n\t        var retVal;\n\t        cacheIsValid = false;\n\t\n\t        try {\n\t            validateConnection();\n\t        } catch (err) {\n\t            deferred = Q.defer();\n\t            retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        promise = client.join(params);\n\t        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Leave this group. If this method is called multiple times synchronously, it will batch requests and\n\t     * only make one API call to Respoke.\n\t     *\n\t     *     group.leave({\n\t     *         onSuccess: function () {\n\t     *             // good riddance\n\t     *         },\n\t     *         onError: function (err) {\n\t     *             // Couldn't leave the group, possibly a permissions error\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.leave\n\t     * @param {object} params\n\t     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @return {Promise|undefined}\n\t     * @fires respoke.Client#leave\n\t     */\n\t    that.leave = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t\n\t        try {\n\t            validateConnection();\n\t            validateMembership();\n\t        } catch (err) {\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        signalingChannel.leaveGroup({\n\t            groupList: [that.id]\n\t        }).done(function successHandler() {\n\t            clearConnections();\n\t            deferred.resolve();\n\t            cacheIsValid = false;\n\t\n\t            /**\n\t             * This event is fired when the client leaves a group.\n\t             * @event respoke.Client#leave\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Group} group\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             * @private\n\t             */\n\t            client.fire('leave', {\n\t                group: that\n\t            });\n\t        }, function errorHandler(err) {\n\t            deferred.reject();\n\t        });\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Remove a Connection from a Group. This does not change the status of the remote Endpoint, it only changes the\n\t     * internal representation of the Group membership. This method should only be used internally.\n\t     * @private\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.removeMember\n\t     * @param {object} params\n\t     * @param {string} [params.connectionId] - Endpoint's connection id\n\t     * @fires respoke.Group#leave\n\t     */\n\t    that.removeMember = function (params) {\n\t        params = params || {};\n\t\n\t        try {\n\t            validateConnection();\n\t            validateMembership();\n\t        } catch (err) {\n\t            return;\n\t        }\n\t\n\t        if (!params.connectionId) {\n\t            throw new Error(\"Can't remove a member to the group without it's Connection id.\");\n\t        }\n\t\n\t        cacheIsValid = false;\n\t\n\t        that.connections.every(function eachConnection(conn, index) {\n\t            if (conn.id === params.connectionId) {\n\t                that.connections.splice(index, 1);\n\t                conn.getEndpoint().leftGroup();\n\t\n\t                /**\n\t                 * This event is fired when a member leaves a group the client is a member of.\n\t                 * @event respoke.Group#leave\n\t                 * @type {respoke.Event}\n\t                 * @property {respoke.Connection} connection - The connection that left the group.\n\t                 * @property {string} name - The event name.\n\t                 * @property {respoke.Group} target\n\t                 */\n\t                that.fire('leave', {\n\t                    connection: conn\n\t                });\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Return true if the logged-in user is a member of this group and false if not.\n\t     *\n\t     *     if (group.isJoined()) {\n\t     *         // I'm a member!\n\t     *     } else {\n\t     *         // Maybe join here\n\t     *     }\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.isJoined\n\t     * @returns {boolean}\n\t     */\n\t    that.isJoined = function () {\n\t        // connections array contains some connections and ours is among them.\n\t        return (that.connections.length > 0 && !that.connections.every(function (conn) {\n\t            return conn.id !== client.connectionId;\n\t        }));\n\t    };\n\t\n\t    /**\n\t     * Add a Connection to a group. This does not change the status of the remote Endpoint, it only changes the\n\t     * internal representation of the Group membership. This method should only be used internally.\n\t     * @memberof! respoke.Group\n\t     * @private\n\t     * @method respoke.Group.addMember\n\t     * @param {object} params\n\t     * @param {respoke.Connection} params.connection\n\t     * @fires respoke.Group#join\n\t     */\n\t    that.addMember = function (params) {\n\t        params = params || {};\n\t        var absent;\n\t\n\t        validateConnection();\n\t\n\t        if (!params.connection) {\n\t            throw new Error(\"Can't add a member to the group without it's Connection object.\");\n\t        }\n\t\n\t        cacheIsValid = false;\n\t\n\t        absent = that.connections.every(function eachConnection(conn) {\n\t            return (conn.id !== params.connection.id);\n\t        });\n\t\n\t        if (absent) {\n\t            that.connections.push(params.connection);\n\t            params.connection.getEndpoint().joinedGroup();\n\t            if (params.skipEvent) {\n\t                return;\n\t            }\n\t\n\t            /**\n\t             * This event is fired when a member joins a Group that the currently logged-in endpoint is a member\n\t             * of.\n\t             * @event respoke.Group#join\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Connection} connection - The connection that joined the group.\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Group} target\n\t             */\n\t            that.fire('join', {\n\t                connection: params.connection\n\t            });\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Validate that the client is connected to the Respoke infrastructure.\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.validateConnection\n\t     * @private\n\t     */\n\t    function validateConnection() {\n\t        if (!signalingChannel || !signalingChannel.isConnected()) {\n\t            throw new Error(\"Can't complete request when not connected. Please reconnect!\");\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Validate that the client is a member of this group.\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.validateMembership\n\t     * @private\n\t     */\n\t    function validateMembership() {\n\t        if (!that.isJoined()) {\n\t            throw new Error(\"Not a member of this group anymore.\");\n\t        }\n\t    }\n\t\n\t    /**\n\t     *\n\t     * Send a message to all of the endpoints in the group.\n\t     *\n\t     *      var group = client.getGroup({ id: 'js-enthusiasts'});\n\t     *\n\t     *      group.sendMessage({\n\t     *          message: \"Cat on keyboard\",\n\t     *          onSuccess: function (evt) {\n\t     *              console.log('Message was sent');\n\t     *          }\n\t     *      });\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.sendMessage\n\t     * @param {object} params\n\t     * @param {string} params.message - The message.\n\t     * @param {boolean} [params.push=false] - Whether or not the message should be considered for push notifications to\n\t     * mobile devices.\n\t     * @param {function} params.onSuccess - Success handler indicating that the message was delivered.\n\t     * @param {function} params.onError - Error handler indicating that the message was not delivered.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        params = params || {};\n\t        params.id = that.id;\n\t        var promise;\n\t\n\t        try {\n\t            validateConnection();\n\t            validateMembership();\n\t        } catch (err) {\n\t            promise = Q.reject(err);\n\t        }\n\t\n\t        return respoke.handlePromise(promise ? promise : signalingChannel.publish(params),\n\t                params.onSuccess, params.onError);\n\t    };\n\t\n\t    /**\n\t     * Get group members\n\t     *\n\t     * Get an array containing all connections subscribed to the group. Accepts onSuccess or onError parameters,\n\t     * or it returns a promise that you can observe. An endpoint may have more than one connection subscribed to\n\t\t * a group, so if you're interested in unique endpoints, you may want to filter the connections by endpointId.\n\t     *\n\t     *     group.getMembers({\n\t     *         onSuccess: function (connections) {\n\t     *             connections.forEach(function (connection) {\n\t     *                 console.log(connection.endpointId);\n\t     *             });\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.getMembers\n\t     * @param {object} params\n\t     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Success handler for this invocation of this method only.\n\t     * @returns {Promise<Array>} A promise to an array of Connections.\n\t     */\n\t    that.getMembers = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t\n\t        try {\n\t            validateConnection();\n\t            validateMembership();\n\t        } catch (err) {\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        if (that.connections.length > 0 && cacheIsValid) {\n\t            deferred.resolve(that.connections);\n\t            return retVal;\n\t        }\n\t\n\t        signalingChannel.getGroupMembers({\n\t            id: that.id\n\t        }).done(function successHandler(list) {\n\t            var endpointList = [];\n\t            list.forEach(function eachMember(params) {\n\t                var connection = client.getConnection({\n\t                    endpointId: params.endpointId,\n\t                    connectionId: params.connectionId,\n\t                    skipCreate: true\n\t                });\n\t\n\t                if (!connection) {\n\t                    // Create the connection\n\t                    connection = client.getConnection({\n\t                        endpointId: params.endpointId,\n\t                        connectionId: params.connectionId\n\t                    });\n\t                }\n\t\n\t                if (endpointList.indexOf(params.endpointId) === -1) {\n\t                    endpointList.push(params.endpointId);\n\t                }\n\t                that.addMember({\n\t                    connection: connection,\n\t                    skipEvent: true\n\t                });\n\t            });\n\t\n\t            cacheIsValid = true;\n\t\n\t            deferred.resolve(that.connections);\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Experimental. Create a new conference call. The ID will be the group name. Only members of this group will\n\t     * be permitted to participate in the conference call.\n\t     *\n\t     *     group.joinConference({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.joinConference\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string|boolean} params.audio - Whether participant should send and receive audio. Boolean `true`\n\t     * indicates send and receive. Boolean `false` indicates neither send nor receive. Strings `send` and `receive`\n\t     * indicate send only and receive only respectively.\n\t     * @param {string|boolean} params.video - Whether participant should send and receive audio. Boolean `true`\n\t     * indicates send and receive. Boolean `false` indicates neither send nor receive. Strings `send` and `receive`\n\t     * indicate send only and receive only respectively.\n\t     * @param {boolean} params.mixAudio - Whether Respoke should mix all the audio streams together to save bandwidth\n\t     * for this one participant.\n\t     * @arg {respoke.Conference.onJoin} [params.onJoin] - Callback for when a participant joins the conference.\n\t     * @arg {respoke.Conference.onLeave} [params.onLeave] - Callback for when a participant leaves the conference.\n\t     * @arg {respoke.Conference.onMessage} [params.onMessage] - Callback for when a message is sent to the conference.\n\t     * @param {respoke.Conference.onMute} [params.onMute] - Callback for when local or remote media is muted or unmuted.\n\t     * @arg {respoke.Conference.onTopic} [params.onTopic] - Callback for the conference topic changes.\n\t     * @arg {respoke.Conference.onPresenter} [params.onPresenter] - Callback for when the presenter changes.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n\t     * and the remote party has received the video.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @returns {respoke.Conference}\n\t     */\n\t    that.joinConference = function (params) {\n\t        var conference = null;\n\t        params = params || {};\n\t        params.id = that.id;\n\t\n\t        conference = client.joinConference(params);\n\t        return conference;\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.Group\n\t/**\n\t * Receive notification that an endpoint has joined this group. This callback is called everytime\n\t * respoke.Group#join is fired.\n\t * @callback respoke.Group.onJoin\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Connection} evt.connection\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Group} evt.target\n\t */\n\t/**\n\t * Receive notification that an endpoint has left this group. This callback is called everytime\n\t * respoke.Group#leave is fired.\n\t * @callback respoke.Group.onLeave\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Connection} evt.connection\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Group} evt.target\n\t */\n\t/**\n\t * Receive notification that a message has been received to a group. This callback is called every time\n\t * respoke.Group#message is fired.\n\t * @callback respoke.Group.onMessage\n\t * @param {respoke.Event} evt\n\t * @param {respoke.TextMessage} evt.message\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Group} evt.target\n\t */\n\t/**\n\t * Get a list of the Connections which are members of this Group.\n\t * @callback respoke.Group.connectionsHandler\n\t * @param {Array<respoke.Connection>} connections\n\t */\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Copyright 2015, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t */\n\t'use strict';\n\t\n\tvar Q = __webpack_require__(6);\n\tvar io = __webpack_require__(14);\n\tvar respoke = __webpack_require__(1);\n\tvar template = __webpack_require__(16);\n\tvar log = respoke.log;\n\t\n\tvar sdkHeaderValue = 'Respoke.js/' + respoke.version;\n\t\n\tvar billingSuspensionErrorMessage = \"Can't perform this action: Not Authorized. Your account is suspended due to a \" +\n\t    \"billing issue. Please visit the Respoke Developer Portal (https://www.respoke.io) or contact customer support \" +\n\t    \"(support@respoke.io) to address this issue.\";\n\t\n\tvar suspensionErrorMessage = \"Canot perform this action: Not Authorized. Your account is suspended. Please visit \" +\n\t    \"the Respoke Developer Portal (https://www.respoke.io) or contact customer support (support@respoke.io) to \" +\n\t    \"address this issue.\";\n\t\n\t/**\n\t * Returns a timestamp, measured in milliseconds.\n\t *\n\t * This method will use high resolution time, if available. Otherwise it falls back to just\n\t * using the wall clock.\n\t *\n\t * @return {number} Number of milliseconds that have passed since some point in the past.\n\t * @private\n\t */\n\tvar now;\n\tif (window.performance && window.performance.now) {\n\t    now = window.performance.now.bind(window.performance);\n\t} else if (Date.now) {\n\t    now = Date.now.bind(Date);\n\t} else {\n\t    now = function () {\n\t        return new Date().getTime();\n\t    };\n\t}\n\t\n\t/**\n\t * Container for holding requests that are currently waiting on responses.\n\t * @returns {PendingRequests}\n\t * @private\n\t * @constructor\n\t */\n\tvar PendingRequests = function () {\n\t    /**\n\t     * Pending requests.\n\t     * @private\n\t     * @type {Array}\n\t     */\n\t    var contents = [];\n\t    /**\n\t     * Counter to provide the next id.\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var counter = 0;\n\t    var that = {};\n\t\n\t    /**\n\t     * Add a new pending request.\n\t     *\n\t     * @memberof PendingRequests\n\t     * @param obj\n\t     * @returns {*} The key to use for the `remove` method.\n\t     */\n\t    that.add = function (obj) {\n\t        contents[counter] = obj;\n\t        counter++;\n\t        return counter;\n\t    };\n\t\n\t    /**\n\t     * Remove a pending request.\n\t     *\n\t     * @param {*} key Key returned from `add` method.\n\t     */\n\t    that.remove = function (key) {\n\t        delete contents[key];\n\t    };\n\t\n\t    /**\n\t     * Disposes of any currently pending requests, synchronously invoking the provided function on\n\t     * each.\n\t     *\n\t     * @param {function} [fn] Callback for pending requests.\n\t     */\n\t    that.reset = function (fn) {\n\t        if (fn) {\n\t            contents.forEach(fn);\n\t        }\n\t        contents = [];\n\t    };\n\t\n\t    return that;\n\t};\n\t\n\t/**\n\t * The purpose of this class is to make a method call for each API call\n\t * to the backend REST interface.  This class takes care of App authentication, websocket connection,\n\t * Endpoint authentication, and all App interactions thereafter.  Almost all methods return a Promise.\n\t * @class respoke.SignalingChannel\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.instanceId - client id\n\t * @private\n\t * @returns {respoke.SignalingChannel}\n\t */\n\tmodule.exports = function (params) {\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name className\n\t     * @type {string}\n\t     * @private\n\t     */\n\t    that.className = 'respoke.SignalingChannel';\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name client\n\t     * @private\n\t     * @type {respoke.Client}\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name socket\n\t     * @private\n\t     * @type {Socket.io.Socket}\n\t     */\n\t    var socket = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name clientSettings\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var clientSettings = params.clientSettings;\n\t    delete that.clientSettings;\n\t    clientSettings.baseURL = clientSettings.baseURL || 'https://api.respoke.io';\n\t    /**\n\t     * A map to avoid duplicate endpoint presence registrations.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name presenceRegistered\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var presenceRegistered = {};\n\t    /**\n\t     * A reference to the private function Client.actuallyConnect that gets set in SignalingChannel.open() so we\n\t     * don't have to make it public.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name actuallyConnect\n\t     * @private\n\t     * @type {function}\n\t     */\n\t    var actuallyConnect = null;\n\t    /**\n\t     * Set of promises for any pending requests on the WebSocket.\n\t     * @private\n\t     * @type {PendingRequests}\n\t     */\n\t    var pendingRequests = PendingRequests();\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name reconnectTimeout\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var reconnectTimeout = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name maxReconnectTimeout\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var maxReconnectTimeout = 5 * 60 * 1000;\n\t    /**\n\t     * Rejects a message if the body size is greater than this. It is enforced servcer side, so changing this\n\t     * won't make the bodySizeLimit any bigger, this just gives you a senseable error if it's too big.\n\t     * @memberof! respoke.signalingChannel\n\t     * @name bodySizeLimit\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var bodySizeLimit = 20000;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name appId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var appId = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name endpointId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var endpointId = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name token\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var token = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name appToken\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var appToken = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name xhr\n\t     * @private\n\t     * @type {XMLHttpRequest}\n\t     */\n\t    var xhr = new XMLHttpRequest();\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name routingMethods\n\t     * @private\n\t     * @type {object}\n\t     * @desc The methods contained in this object are statically defined methods that are called by constructing\n\t     * their names dynamically. 'do' + $className + $signalType == 'doCallOffer', et. al.\n\t     */\n\t    var routingMethods = {};\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name handlerQueue\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var handlerQueue = {\n\t        'message': [],\n\t        'signal': [],\n\t        'presence': []\n\t    };\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name errors\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var errors = {\n\t        400: \"Can't perform this action: missing or invalid parameters.\",\n\t        401: \"Can't perform this action: not authenticated.\",\n\t        403: \"Can't perform this action: not authorized.\",\n\t        404: \"Item not found.\",\n\t        409: \"Can't perform this action: item in the wrong state.\",\n\t        429: \"API rate limit was exceeded.\",\n\t        500: \"Can't perform this action: server problem.\"\n\t    };\n\t\n\t    /**\n\t     * Indicate whether the signaling channel has a valid connection to Respoke.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.isConnected\n\t     * @return {boolean}\n\t     */\n\t    that.isConnected = function () {\n\t        return !!(socket && socket.socket.connected);\n\t    };\n\t\n\t    /**\n\t     * Indicate whether the signaling channel is currently waiting on a websocket to connect.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.isConnecting\n\t     * @private\n\t     * @return {boolean}\n\t     */\n\t    function isConnecting() {\n\t        return !!(socket && socket.socket.connecting);\n\t    }\n\t\n\t    /**\n\t     * Get the call debug preference.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.isSendingReport\n\t     * @private\n\t     * @return {boolean}\n\t     */\n\t    that.isSendingReport = function (params) {\n\t        return clientSettings.enableCallDebugReport;\n\t    };\n\t\n\t    /**\n\t     * Open a connection to the REST API and validate the app, creating a session token.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.open\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} [params.token] - The Endpoint's auth token\n\t     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @return {Promise}\n\t     */\n\t    that.open = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug('SignalingChannel.open', params, clientSettings);\n\t        token = params.token || token;\n\t        actuallyConnect = typeof params.actuallyConnect === 'function' ? params.actuallyConnect : actuallyConnect;\n\t\n\t        Q.fcall(function tokenPromise() {\n\t            if (clientSettings.developmentMode === true && clientSettings.appId && params.endpointId) {\n\t                return that.getToken({\n\t                    appId: clientSettings.appId,\n\t                    endpointId: params.endpointId\n\t                });\n\t            }\n\t            return null;\n\t        }).then(function successHandler(newToken) {\n\t            token = newToken || token;\n\t            return doOpen({token: token});\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t            log.debug('client', client);\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Get a developer mode token for an endpoint. App must be in developer mode.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getToken\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @return {Promise<String>}\n\t     */\n\t    that.getToken = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug('SignalingChannel.getToken', params);\n\t\n\t        var callParams = {\n\t            path: '/v1/tokens',\n\t            httpMethod: 'POST',\n\t            parameters: {\n\t                appId: clientSettings.appId,\n\t                endpointId: params.endpointId,\n\t                ttl: 60 * 60 * 6\n\t            }\n\t        };\n\t\n\t        call(callParams).done(function (response) {\n\t            if (response.statusCode === 200 && response.body && response.body.tokenId) {\n\t                token = response.body.tokenId;\n\t                deferred.resolve(response.body.tokenId);\n\t                return;\n\t            }\n\t\n\t            var errorMessage = \"Couldn't get a developer mode token. \";\n\t            if (isBillingSuspensionUnauthorizedResponse(response)) {\n\t                errorMessage += billingSuspensionErrorMessage;\n\t            } else if (isSuspensionUnauthorizedResponse(response)) {\n\t                errorMessage += suspensionErrorMessage;\n\t            } else {\n\t                errorMessage += response.error;\n\t            }\n\t\n\t            deferred.reject(buildResponseError(response, errorMessage));\n\t        }, function (err) {\n\t            deferred.reject(new Error(\"Couldn't get a developer mode token. \" + err.message));\n\t        });\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Open a connection to the REST API and validate the app, creating a session token.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.doOpen\n\t     * @param {object} params\n\t     * @param {string} params.token - The Endpoint's auth token\n\t     * @return {Promise}\n\t     * @private\n\t     */\n\t    function doOpen(params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug('SignalingChannel.doOpen', params);\n\t\n\t        if (!params.token) {\n\t            deferred.reject(new Error(\"Can't open connection to Respoke without a token.\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        call({\n\t            path: '/v1/session-tokens',\n\t            httpMethod: 'POST',\n\t            parameters: {\n\t                tokenId: params.token\n\t            }\n\t        }).done(function (response) {\n\t            if (response.statusCode === 200) {\n\t                appToken = response.body.token;\n\t                deferred.resolve();\n\t                log.debug(\"Signaling connection open to\", clientSettings.baseURL);\n\t                return;\n\t            }\n\t\n\t            var errorMessage = \"Couldn't authenticate app. \";\n\t            if (isBillingSuspensionUnauthorizedResponse(response)) {\n\t                errorMessage += billingSuspensionErrorMessage;\n\t            } else if (isSuspensionUnauthorizedResponse(response)) {\n\t                errorMessage += suspensionErrorMessage;\n\t            } else {\n\t                errorMessage += response.error;\n\t            }\n\t\n\t            deferred.reject(buildResponseError(response, errorMessage));\n\t        }, function (err) {\n\t            log.error(\"Network call failed:\", err.message);\n\t            deferred.reject(new Error(\"Couldn't authenticate app. \" + err.message));\n\t        });\n\t\n\t        return deferred.promise;\n\t    }\n\t\n\t    /**\n\t     * Close a connection to the REST API. Invalidate the session token.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.close\n\t     * @private\n\t     * @return {Promise}\n\t     */\n\t    that.close = function () {\n\t        var deferred = Q.defer();\n\t\n\t        wsCall({\n\t            path: '/v1/connections/{id}/',\n\t            httpMethod: 'DELETE',\n\t            urlParams: {\n\t                id: client.endpointId\n\t            }\n\t        }).fin(function finallyHandler() {\n\t            return call({\n\t                path: '/v1/session-tokens',\n\t                httpMethod: 'DELETE'\n\t            });\n\t        }).fin(function finallyHandler() {\n\t            if (socket) {\n\t                socket.removeAllListeners();\n\t                socket.disconnect();\n\t            }\n\t            socket = null;\n\t            deferred.resolve();\n\t        }).done();\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Generate and send a presence message representing the client's current status. This triggers\n\t     * the server to send the client's endpoint's presence.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendPresence\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string|number|object|Array} [params.presence=available]\n\t     * @param {string} [params.status] - Non-enumeration human-readable status.\n\t     * @param {string} [params.show] - I can't remember what this is.\n\t     * @returns {Promise}\n\t     */\n\t    that.sendPresence = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug(\"Signaling sendPresence\");\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            path: '/v1/presence',\n\t            httpMethod: 'POST',\n\t            parameters: {\n\t                'presence': {\n\t                    show: params.show,\n\t                    'status': params.status,\n\t                    type: params.presence || \"available\"\n\t                }\n\t            }\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * If the logged-in endpoint has permission through its Respoke role, forcibly remove another participant\n\t     * from the conference, ending its conference call.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.removeConferenceParticipant\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} [endpointId] - The endpoint id of the endpoint to be removed\n\t     * @param {string} [connectionId] - The connection id of the connection to be removed\n\t     * @returns {Promise}\n\t     */\n\t    that.removeConferenceParticipant = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var endpointId = params.endpointId;\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (!endpointId && params.connectionId) {\n\t            try {\n\t                endpointId = client.getConnection({\n\t                    connectionId: params.connectionId\n\t                }).getEndpoint().id;\n\t            } catch (err) {}\n\t\n\t            if (!endpointId) {\n\t                deferred.reject(new Error(\"conference.removeParticipant can't figure out what endpoint to remove!\"));\n\t                return deferred.promise;\n\t            }\n\t        }\n\t\n\t        wsCall({\n\t            httpMethod: 'DELETE',\n\t            path: '/v1/conferences/{id}/participants/{endpointId}',\n\t            urlParams: {\n\t                id: params.conferenceId,\n\t                endpointId: endpointId\n\t            },\n\t            parameters: {\n\t                connectionId: params.connectionId // Optional; It's OK if it's undefined here.\n\t            }\n\t        }).then(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * If the logged-in endpoint has permission through its Respoke role, close down the conference, removing all\n\t     * participants.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.destroyConference\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     * @private\n\t     * @returns {Promise}\n\t     */\n\t    that.destroyConference = function (params) {\n\t        var deferred = Q.defer();\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            httpMethod: 'DELETE',\n\t            path: '/v1/conferences/{id}/',\n\t            urlParams: { id: params.conferenceId }\n\t        }).then(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Retrieve the list of participants in the specified conference.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getConferenceParticipants\n\t     * @private\n\t     * @returns {Promise<respoke.Connection>}\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     */\n\t    that.getConferenceParticipants = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            httpMethod: 'GET',\n\t            path: '/v1/conferences/{id}/participants/',\n\t            urlParams: { id: params.id }\n\t        }).then(function successHandler(participants) {\n\t            deferred.resolve(participants.map(function (par) {\n\t                return client.getConnection({\n\t                    connectionId: par.connectionId,\n\t                    endpointId: par.endpointId\n\t                });\n\t            }));\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Get or create a group in the infrastructure.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getGroup\n\t     * @private\n\t     * @returns {Promise<respoke.Group>}\n\t     * @param {object} params\n\t     * @param {string} params.name\n\t     */\n\t    that.getGroup = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            httpMethod: 'POST',\n\t            path: '/v1/channels/',\n\t            parameters: {\n\t                name: params.name\n\t            }\n\t        }).then(function successHandler(group) {\n\t            deferred.resolve(group);\n\t        }, function errorHandler(err) {\n\t            // Group was already created, just return back the same params we were given.\n\t            deferred.resolve({id: params.name});\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Leave a group. In order to aggregate subsequent repeated requests, this function, when called synchronously,\n\t     * will continue to accumulate group ids until the next tick of the event loop, when the request will be\n\t     * issued. The same instance of Promise is returned each time.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @private\n\t     * @method respoke.SignalingChannel.leaveGroup\n\t     * @returns {Promise}\n\t     * @param {object} params\n\t     * @param {array} params.groupList\n\t     */\n\t    that.leaveGroup = (function () {\n\t        var groups = {};\n\t        var deferred = Q.defer();\n\t\n\t        return function (params) {\n\t            params = params || {};\n\t            params.groupList = params.groupList || [];\n\t\n\t            var toRun = (Object.keys(groups).length === 0);\n\t\n\t            if (!that.isConnected()) {\n\t                deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t                return deferred.promise;\n\t            }\n\t\n\t            params.groupList.forEach(function (id) {\n\t                if (typeof id === 'string') {\n\t                    groups[id] = true;\n\t                }\n\t            });\n\t\n\t            if (!toRun) {\n\t                return deferred.promise;\n\t            }\n\t\n\t            setTimeout(function () {\n\t                // restart accumulation\n\t                var groupList = Object.keys(groups);\n\t                groups = {};\n\t                var saveDeferred = deferred;\n\t                deferred = Q.defer();\n\t\n\t                if (groupList.length === 0) {\n\t                    saveDeferred.resolve();\n\t                    return;\n\t                }\n\t\n\t                wsCall({\n\t                    path: '/v1/groups/',\n\t                    parameters: {\n\t                        groups: groupList\n\t                    },\n\t                    httpMethod: 'DELETE'\n\t                }).done(function successHandler() {\n\t                    saveDeferred.resolve();\n\t                }, function errorHandler(err) {\n\t                    saveDeferred.reject(err);\n\t                });\n\t            });\n\t            return deferred.promise;\n\t        };\n\t    })();\n\t\n\t    /**\n\t     * Join a group. In order to aggregate subsequent repeated requests, this function, when called synchronously,\n\t     * will continue to accumulate group ids until the next tick of the event loop, when the request will be\n\t     * issued. The same instance of Promise is returned each time.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.joinGroup\n\t     * @private\n\t     * @returns {Promise}\n\t     * @param {object} params\n\t     * @param {array} params.groupList\n\t     */\n\t    that.joinGroup = (function () {\n\t        var groups = {};\n\t        var deferred = Q.defer();//i think this needs to go in actualJoinGroup\n\t\n\t        return function actualJoinGroup(params) {\n\t            params = params || {};\n\t            params.groupList = params.groupList || [];\n\t\n\t            log.trace('been asked to join groups', params.groupList);\n\t\n\t            var needsToRun = (Object.keys(groups).length === 0);\n\t\n\t            if (!that.isConnected()) {\n\t                deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t                return deferred.promise;\n\t            }\n\t\n\t            params.groupList.forEach(function (id) {\n\t                if (typeof id === 'string') {\n\t                    log.trace('put group', id, 'in the join queue');\n\t                    groups[id] = true;\n\t                }\n\t            });\n\t\n\t            if (!needsToRun) {\n\t                return deferred.promise;\n\t            }\n\t\n\t            setTimeout(function requestJoinsForGroupQueue() {\n\t                // restart accumulation\n\t                var groupList = Object.keys(groups);\n\t                log.trace('list of groups to be requested', groupList);\n\t                //reset the groups object\n\t                groups = {};\n\t                var saveDeferred = deferred;\n\t                deferred = Q.defer();\n\t\n\t                if (groupList.length === 0) {\n\t                    log.trace('list of groups was empty so not sending queue');\n\t                    saveDeferred.resolve();\n\t                    return;\n\t                }\n\t\n\t                wsCall({\n\t                    path: '/v1/groups/',\n\t                    parameters: {\n\t                        groups: groupList\n\t                    },\n\t                    httpMethod: 'POST'\n\t                }).done(function successHandler() {\n\t                    saveDeferred.resolve();\n\t                }, function errorHandler(err) {\n\t                    saveDeferred.reject(err);\n\t                });\n\t            });\n\t            return deferred.promise;\n\t        };\n\t    })();\n\t\n\t    /**\n\t     * Publish a message to a group.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @private\n\t     * @method respoke.SignalingChannel.publish\n\t     * @returns {Promise}\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     * @param {string} params.message\n\t     * @param {boolean} [params.push=false]\n\t     */\n\t    that.publish = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var message = respoke.TextMessage({\n\t            endpointId: params.id,\n\t            message: params.message,\n\t            push: !!params.push\n\t        });\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            path: '/v1/channels/{id}/publish/',\n\t            urlParams: { id: params.id },\n\t            httpMethod: 'POST',\n\t            parameters: message\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Register as an observer of presence for the specified endpoint ids. In order to aggregate subsequent repeated\n\t     * requests, this function, when called synchronously, will continue to accumulate endpoint ids until the next\n\t     * tick of the event loop, when the request will be issued. The same instance of Promise is returned each time.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.registerPresence\n\t     * @private\n\t     * @param {object} params\n\t     * @param {Array<string>} params.endpointList\n\t     * @returns {Promise}\n\t     */\n\t    that.registerPresence = (function () {\n\t        var endpoints = {};\n\t        var deferred = Q.defer();\n\t\n\t        return function (params) {\n\t            params = params || {};\n\t            params.endpointList = params.endpointList || [];\n\t            var toRun = (Object.keys(endpoints).length === 0);\n\t\n\t            if (!that.isConnected()) {\n\t                return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            }\n\t\n\t            params.endpointList.forEach(function (ep) {\n\t                if (typeof ep === 'string' && presenceRegistered[ep] !== true) {\n\t                    endpoints[ep] = true;\n\t                }\n\t            });\n\t\n\t            if (!toRun) {\n\t                return deferred.promise;\n\t            }\n\t\n\t            setTimeout(function () {\n\t                // restart accumulation\n\t                var endpointList = Object.keys(endpoints);\n\t                endpoints = {};\n\t                var saveDeferred = deferred;\n\t                deferred = Q.defer();\n\t\n\t                if (endpointList.length === 0) {\n\t                    saveDeferred.resolve();\n\t                    return;\n\t                }\n\t\n\t                wsCall({\n\t                    httpMethod: 'POST',\n\t                    path: '/v1/presenceobservers',\n\t                    parameters: {\n\t                        endpointList: endpointList\n\t                    }\n\t                }).done(function successHandler() {\n\t                    params.endpointList.forEach(function eachId(id) {\n\t                        presenceRegistered[id] = true;\n\t                    });\n\t                    saveDeferred.resolve();\n\t                }, function (err) {\n\t                    saveDeferred.reject(err);\n\t                });\n\t                // We could even add a tiny delay like 10ms if we want to get more conservative and\n\t                // catch asychronous calls to client.getEndpoint() and other methods which call\n\t                // this method.\n\t            });\n\t\n\t            return deferred.promise;\n\t        };\n\t    })();\n\t\n\t    /**\n\t     * Join a group.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getGroupMembers\n\t     * @private\n\t     * @returns {Promise<Array>}\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     */\n\t    that.getGroupMembers = function (params) {\n\t        var deferred = Q.defer();\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (!params.id) {\n\t            deferred.reject(new Error(\"Can't get group's endpoints without group ID.\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        return wsCall({\n\t            path: '/v1/channels/{id}/subscribers/',\n\t            urlParams: { id: params.id },\n\t            httpMethod: 'GET'\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Send a chat message.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendMessage\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.SignalingMessage} params.message - The string text message to send.\n\t     * @param {respoke.Endpoint} params.recipient\n\t     * @param {string} [params.connectionId]\n\t     * @param {boolean} [params.push=false]\n\t     * @returns {Promise}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var message = respoke.TextMessage({\n\t            endpointId: params.recipient.id,\n\t            ccSelf: params.ccSelf,\n\t            connectionId: params.connectionId,\n\t            message: params.message,\n\t            push: !!params.push\n\t        });\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            path: '/v1/messages',\n\t            httpMethod: 'POST',\n\t            parameters: message\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Send an ACK signal to acknowlege reception of a signal.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendACK\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.SignalingMessage} params.signal\n\t     * @return {Promise}\n\t     */\n\t    that.sendACK = function (params) {\n\t        var endpoint;\n\t        params = params || {};\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        if (!params.signal) {\n\t            return Q.reject(new Error(\"Can't send ACK, no signal was given.\"));\n\t        }\n\t\n\t        endpoint = client.getEndpoint({\n\t            id: params.signal.fromEndpoint,\n\t            skipPresence: true\n\t        });\n\t        if (!endpoint) {\n\t            return Q.reject(new Error(\"Can't send ACK, can't get endpoint.\"));\n\t        }\n\t\n\t        return that.sendSignal({\n\t            recipient: endpoint,\n\t            signalType: 'ack',\n\t            signalId: params.signal.signalId,\n\t            sessionId: params.signal.sessionId,\n\t            target: params.signal.target,\n\t            ackedSignalType: params.signal.signalType\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Send a signaling message.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendSignal\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Call} [params.call] - For getting the sessionId & connectionId. Not required for 'ack'.\n\t     * @return {Promise}\n\t     */\n\t    that.sendSignal = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var signal;\n\t        var to;\n\t        var toConnection;\n\t        var toType;\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (params.call) {\n\t            params.sessionId = params.call.id;\n\t            if (params.call.connectionId) { // the recipient's connectionId\n\t                params.connectionId = params.call.connectionId;\n\t            }\n\t        }\n\t\n\t        to = params.recipient.id;\n\t        toConnection = params.connectionId;\n\t        toType = params.toType || 'web';\n\t\n\t        try {\n\t            params.signalId = respoke.makeGUID();\n\t            // This will strip off non-signaling attributes.\n\t            signal = respoke.SignalingMessage(params);\n\t        } catch (e) {\n\t            deferred.reject(e);\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            path: '/v1/signaling',\n\t            httpMethod: 'POST',\n\t            parameters: {\n\t                ccSelf: params.ccSelf,\n\t                signal: JSON.stringify(signal),\n\t                to: to,\n\t                toConnection: toConnection,\n\t                toType: toType\n\t            }\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Send an ICE candidate.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendCandidate\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @param {string} [params.connectionId]\n\t     * @param {Array<RTCIceCandidate>} params.iceCandidates - An array of ICE candidate.\n\t     * @return {Promise}\n\t     */\n\t    that.sendCandidate = function (params) {\n\t        params = params || {};\n\t        params.signalType = 'iceCandidates';\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        if (typeof params.finalCandidates !== 'undefined') {\n\t            log.debug('Sending final', params.iceCandidates.length, 'of', params.finalCandidates.length, 'ice candidates');\n\t        } else {\n\t            log.debug('Sending', params.iceCandidates.length, 'ice candidates');\n\t        }\n\t\n\t        return that.sendSignal(params);\n\t    };\n\t\n\t    /**\n\t     * Send an SDP.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendSDP\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @param {string} [params.connectionId]\n\t     * @param {RTCSessionDescription} params.sessionDescription - An SDP to JSONify and send.\n\t     * @return {Promise}\n\t     */\n\t    that.sendSDP = function (params) {\n\t        params = params || {};\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        if (['offer', 'answer'].indexOf(params.signalType) === -1) {\n\t            return Q.reject(\"Not an SDP type signal.\");\n\t        }\n\t\n\t        return that.sendSignal(params);\n\t    };\n\t\n\t    /**\n\t     * Send a call report to the cloud infrastructure.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendReport\n\t     * @private\n\t     * @param {object} params\n\t     * @todo TODO document the params.\n\t     * @return {Promise}\n\t     */\n\t    that.sendReport = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var message = {\n\t            debugData: params\n\t        };\n\t\n\t        if (!clientSettings.enableCallDebugReport) {\n\t            log.debug('not sending call debugs - disabled');\n\t            deferred.resolve();\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            path: '/v1/call-debugs',\n\t            httpMethod: 'POST',\n\t            parameters: message\n\t        }).done(function () {\n\t            deferred.resolve();\n\t        }, function (err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Send a message hanging up the WebRTC session.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendHangup\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @param {string} [params.connectionId]\n\t     * @param {string} params.reason - The reason the session is being hung up.\n\t     * @return {Promise}\n\t     */\n\t    that.sendHangup = function (params) {\n\t        params = params || {};\n\t        params.signalType = 'bye';\n\t        params.ccSelf = true;\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        return that.sendSignal(params);\n\t    };\n\t\n\t    /**\n\t     * Send a message to all connection ids indicating we have negotiated a call with one connection.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendConnected\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @return {Promise}\n\t     */\n\t    that.sendConnected = function (params) {\n\t        params = params || {};\n\t        params.signalType = 'connected';\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        return that.sendSignal(params);\n\t    };\n\t\n\t    /**\n\t     * Send a message to the remote party indicating a desire to renegotiate media.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendModify\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @param {string} params.action - The state of the modify request, one of: 'initiate', 'accept', 'reject'\n\t     * @return {Promise}\n\t     */\n\t    that.sendModify = function (params) {\n\t        params = params || {};\n\t        params.signalType = 'modify';\n\t\n\t        if (['initiate', 'accept', 'reject'].indexOf(params.action) === -1) {\n\t            return Q.reject(\"No valid action in modify signal.\");\n\t        }\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        return that.sendSignal(params);\n\t    };\n\t\n\t    /**\n\t     * Uppercase the first letter of the word.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.firstUpper\n\t     * @private\n\t     */\n\t    function firstUpper(str) {\n\t        return str[0].toUpperCase() + str.slice(1);\n\t    }\n\t\n\t    /**\n\t     * Route different types of signaling messages via events.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routeSignal\n\t     * @private\n\t     * @param {respoke.SignalingMessage} message - A message to route\n\t     * @fires respoke.Call#offer\n\t     * @fires respoke.Call#connected\n\t     * @fires respoke.Call#answer\n\t     * @fires respoke.Call#iceCandidates\n\t     * @fires respoke.Call#hangup\n\t     * @fires respoke.DirectConnection#offer\n\t     * @fires respoke.DirectConnection#connected\n\t     * @fires respoke.DirectConnection#answer\n\t     * @fires respoke.DirectConnection#iceCandidates\n\t     * @fires respoke.DirectConnection#hangup\n\t     */\n\t    that.routeSignal = function (signal) {\n\t        var target = null;\n\t        var method = 'do';\n\t\n\t        if (signal.signalType !== 'iceCandidates' || respoke.ridiculous) { // Too many of these!\n\t            log.debug(signal.signalType, signal);\n\t        }\n\t\n\t        if (signal.target === undefined) {\n\t            throw new Error(\"target undefined\");\n\t        }\n\t\n\t        // Only create if this signal is an offer.\n\t        Q.fcall(function makePromise() {\n\t            var endpoint;\n\t            /*\n\t             * This will return calls regardless of whether they are associated\n\t             * with a direct connection or not, and it will create a call if no\n\t             * call is found and this signal is an offer. Direct connections get\n\t             * created in the next step.\n\t             *\n\t             * signal.toOriginal will be undefined except in the case that another connection\n\t             * with our same endpointId has just hung up on the call.\n\t             */\n\t            target = client.getCall({\n\t                id: signal.sessionId,\n\t                endpointId: signal.toOriginal || signal.fromEndpoint,\n\t                target: signal.target,\n\t                conferenceId: signal.conferenceId,\n\t                type: signal.fromType,\n\t                create: (signal.target !== 'directConnection' && signal.signalType === 'offer'),\n\t                callerId: signal.callerId\n\t            });\n\t            if (target) {\n\t                return target;\n\t            }\n\t\n\t            if (signal.target === 'directConnection') {\n\t                // return a promise\n\t                endpoint = client.getEndpoint({\n\t                    id: signal.fromEndpoint,\n\t                    skipPresence: true\n\t                });\n\t\n\t                if (endpoint.directConnection && endpoint.directConnection.call.id === signal.sessionId) {\n\t                    return endpoint.directConnection;\n\t                }\n\t\n\t                return endpoint.startDirectConnection({\n\t                    id: signal.sessionId,\n\t                    create: (signal.signalType === 'offer'),\n\t                    caller: (signal.signalType !== 'offer')\n\t                });\n\t            }\n\t        }).done(function successHandler(target) {\n\t            // target might be null, a Call, or a DirectConnection.\n\t            if (target) {\n\t                target = target.call || target;\n\t            }\n\t            if (!target || target.id !== signal.sessionId) {\n\t                // orphaned signal\n\t                log.warn(\"Couldn't associate signal with a call. This is usually OK.\", signal);\n\t                return;\n\t            }\n\t\n\t            method += firstUpper(signal.signalType);\n\t            routingMethods[method]({\n\t                call: target,\n\t                signal: signal\n\t            });\n\t        }, null);\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doOffer\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-offer\n\t     */\n\t    routingMethods.doOffer = function (params) {\n\t        params.call.connectionId = params.signal.fromConnection;\n\t        /**\n\t         * Send the `offer` signal into the Call.\n\t         * @event respoke.Call#signal-offer\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-offer', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doConnected\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-connected\n\t     */\n\t    routingMethods.doConnected = function (params) {\n\t        /**\n\t         * Send the `connected` signal into the Call.\n\t         * @event respoke.Call#signal-connected\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-connected', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.dModify\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-modify\n\t     */\n\t    routingMethods.doModify = function (params) {\n\t        /**\n\t         * Send the `modify` signal into the Call.\n\t         * @event respoke.Call#signal-modify\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-modify', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doAnswer\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-answer\n\t     */\n\t    routingMethods.doAnswer = function (params) {\n\t        params.call.connectionId = params.signal.fromConnection;\n\t        /**\n\t         * Send the `answer` signal into the Call.\n\t         * @event respoke.Call#signal-answer\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-answer', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doIceCandidates\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-icecandidates\n\t     */\n\t    routingMethods.doIceCandidates = function (params) {\n\t        /**\n\t         * Send the `icecandidates` signal into the Call.\n\t         * @event respoke.Call#signal-icecandidates\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-icecandidates', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doBye\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-hangup\n\t     */\n\t    routingMethods.doBye = function (params) {\n\t        /**\n\t         *  The caller may receive hangup from one or more parties after connectionId is set if the call is rejected\n\t         *  by a connection that didn't win the call. In this case, we have to ignore the signal since\n\t         *  we are already on a call.\n\t         *\n\t         *  The callee's connectionId is always set.\n\t         */\n\t        if (params.call.caller && params.call.connectionId &&\n\t                params.call.connectionId !== params.signal.fromConnection) {\n\t            return;\n\t        }\n\t        /**\n\t         * Send the `hangup` signal into the Call.\n\t         * @event respoke.Call#signal-hangup\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-hangup', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doUnknown\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     */\n\t    routingMethods.doUnknown = function (params) {\n\t        log.error(\"Don't know what to do with\", params.signal.target, \"msg of unknown type\", params.signal.signalType);\n\t    };\n\t\n\t    /**\n\t     * Add a handler to the connection for messages of different types.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.addHandler\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} params.type - The type of socket message, i. e., 'message', 'presence', 'join'\n\t     * @param {function} params.handler - A function to which to pass the message\n\t     * @todo TODO See if this is necessary anymore\n\t     */\n\t    that.addHandler = function (params) {\n\t        if (socket.socket && socket.socket.open) {\n\t            socket.on(params.type, params.handler);\n\t        } else {\n\t            handlerQueue[params.type].push(params.handler);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Socket handler for pub-sub messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onPubSub\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     * @fires respoke.Group#message\n\t     * @fires respoke.Client#message\n\t     */\n\t    var onPubSub = function onPubSub(message) {\n\t        var group;\n\t        var groupMessage = respoke.TextMessage({\n\t            rawMessage: message\n\t        });\n\t\n\t        group = client.getGroup({id: message.header.channel});\n\t        if (group) {\n\t            /**\n\t             * Indicate that a message has been received to a group.\n\t             * @event respoke.Group#message\n\t             * @type {respoke.Event}\n\t             * @property {respoke.TextMessage} message\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Group} target\n\t             */\n\t            group.fire('message', {\n\t                message: groupMessage\n\t            });\n\t        }\n\t        /**\n\t         * Indicate that a message has been received.\n\t         * @event respoke.Client#message\n\t         * @type {respoke.Event}\n\t         * @property {respoke.TextMessage} message\n\t         * @property {respoke.Group} [group] - If the message is to a group we already know about,\n\t         * this will be set. If null, the developer can use client.join({id: evt.message.header.channel}) to join\n\t         * the group. From that point forward, Group#message will fire when a message is received as well. If\n\t         * group is undefined instead of null, the message is not a group message at all.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Client} target\n\t         */\n\t        client.fire('message', {\n\t            message: groupMessage,\n\t            group: group || null\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Socket handler for join messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onJoin\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     */\n\t    var onJoin = function onJoin(message) {\n\t        var group;\n\t        var presenceMessage;\n\t        var endpoint;\n\t        var connection;\n\t\n\t        if (message.connectionId === client.connectionId) {\n\t            connection = client.getConnection({connectionId: message.connectionId, endpointId: message.endpointId});\n\t            group = client.getGroup({id: message.header.channel});\n\t            if (!group) {\n\t                group = respoke.Group({\n\t                    id: message.header.channel,\n\t                    instanceId: instanceId,\n\t                    signalingChannel: that\n\t                });\n\t                client.addGroup(group);\n\t            }\n\t            if (!group.isJoined()) {\n\t                group.addMember({connection: connection});\n\t                client.fire('join', {\n\t                    group: group\n\t                });\n\t            }\n\t        } else {\n\t\n\t            endpoint = client.getEndpoint({\n\t                skipPresence: true,\n\t                id: message.endpointId,\n\t                instanceId: instanceId,\n\t                name: message.endpointId\n\t            });\n\t\n\t            // Handle presence not associated with a channel\n\t            if (!connection) {\n\t                endpoint.setPresence({\n\t                    connectionId: message.connectionId\n\t                });\n\t                connection = client.getConnection({\n\t                    connectionId: message.connectionId,\n\t                    endpointId: message.endpointId\n\t                });\n\t            }\n\t\n\t            group = client.getGroup({id: message.header.channel});\n\t\n\t            if (group && connection) {\n\t                group.addMember({connection: connection});\n\t            } else {\n\t                log.error(\"Can't add endpoint to group:\", message, group, endpoint, connection);\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Socket handler for leave messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onLeave\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     */\n\t    var onLeave = function onLeave(message) {\n\t        var group;\n\t        var presenceMessage;\n\t        var endpoint;\n\t        if (message.connectionId === client.connectionId) {\n\t            group = client.getGroup({id: message.header.channel});\n\t            client.fire('leave', {\n\t                group: group\n\t            });\n\t        } else {\n\t\n\t            endpoint = client.getEndpoint({\n\t                skipPresence: true,\n\t                id: message.endpointId\n\t            });\n\t\n\t            endpoint.connections.every(function eachConnection(conn, index) {\n\t                if (conn.id === message.connectionId) {\n\t                    endpoint.connections.splice(index, 1);\n\t                    return false;\n\t                }\n\t                return true;\n\t            });\n\t\n\t            group = client.getGroup({id: message.header.channel});\n\t            if (group) {\n\t                group.removeMember({connectionId: message.connectionId});\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Socket handler for presence messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onMessage\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     * @fires respoke.Endpoint#message\n\t     * @fires respoke.Client#message\n\t     */\n\t    var onMessage = function onMessage(message) {\n\t        var endpoint;\n\t        message = respoke.TextMessage({rawMessage: message});\n\t        if (message.originalRecipient || message.endpointId) {\n\t            endpoint = client.getEndpoint({\n\t                id: message.originalRecipient || message.endpointId,\n\t                skipCreate: true\n\t            });\n\t        }\n\t        if (endpoint) {\n\t            /**\n\t             * Indicate that a message has been received.\n\t             * @event respoke.Endpoint#message\n\t             * @type {respoke.Event}\n\t             * @property {respoke.TextMessage} message\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Endpoint} target\n\t             */\n\t            endpoint.fire('message', {\n\t                message: message\n\t            });\n\t        }\n\t        /**\n\t         * Indicate that a message has been received.\n\t         * @event respoke.Client#message\n\t         * @type {respoke.Event}\n\t         * @property {respoke.TextMessage} message\n\t         * @property {respoke.Endpoint} [endpoint] - If the message is from an endpoint we already know about,\n\t         * this will be set. If null, the developer can use client.getEndpoint({id: evt.message.endpointId}) to get\n\t         * the Endpoint. From that point forward, Endpoint#message will fire when a message is received as well.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Client} target\n\t         */\n\t        client.fire('message', {\n\t            endpoint: endpoint || null,\n\t            message: message\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Create a socket handler for the onConnect event with all the right things in scope.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.generateConnectHandler\n\t     * @param {respoke.Client.successHandler} [onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @private\n\t     */\n\t    var generateConnectHandler = function generateConnectHandler(onSuccess, onError) {\n\t        onSuccess = onSuccess || function () {};\n\t        onError = onError || function () {};\n\t        return function onConnect() {\n\t            Object.keys(handlerQueue).forEach(function addEachHandlerType(category) {\n\t                if (!handlerQueue[category]) {\n\t                    return;\n\t                }\n\t\n\t                handlerQueue[category].forEach(function addEachHandler(handler) {\n\t                    socket.on(category, handler);\n\t                });\n\t                handlerQueue[category] = [];\n\t            });\n\t\n\t            wsCall({\n\t                path: '/v1/connections',\n\t                httpMethod: 'POST',\n\t                parameters: {\n\t                    capabilities: {\n\t                        iceFinalCandidates: true\n\t                    }\n\t                }\n\t            }).done(function successHandler(res) {\n\t                log.debug('connections result', res);\n\t                client.endpointId = res.endpointId;\n\t                client.connectionId = res.id;\n\t                onSuccess();\n\t            }, onError);\n\t        };\n\t    };\n\t\n\t    /**\n\t     * Socket handler for presence messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onPresence\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     */\n\t    function onPresence(message) {\n\t        var endpoint;\n\t        var groups;\n\t\n\t        if (message.header.from === client.endpointId) {\n\t            // Skip ourselves\n\t            return;\n\t        }\n\t        log.debug('socket.on presence', message);\n\t\n\t        endpoint = client.getEndpoint({\n\t            skipPresence: true,\n\t            id: message.header.from,\n\t            instanceId: instanceId,\n\t            name: message.header.from,\n\t            connection: message.header.fromConnection\n\t        });\n\t\n\t        endpoint.setPresence({\n\t            connectionId: message.header.fromConnection,\n\t            presence: message.type\n\t        });\n\t\n\t        if (endpoint.presence === 'unavailable') {\n\t            groups = client.getGroups();\n\t            if (groups) {\n\t                groups.forEach(function eachGroup(group) {\n\t                    group.removeMember({connectionId: message.header.fromConnection});\n\t                });\n\t            }\n\t        }\n\t    }\n\t\n\t    /**\n\t     * On reconnect, start with a reconnect interval of 2000ms. Every time reconnect fails, the interval\n\t     * is doubled up to a maximum of 5 minutes. From then on, it will attempt to reconnect every 5 minutes forever.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.reconnect\n\t     * @private\n\t     */\n\t    function reconnect() {\n\t        if (clientSettings.reconnect !== true) {\n\t            return;\n\t        }\n\t        // Reconnects within reconnects is ungood\n\t        clientSettings.reconnect = false;\n\t\n\t        appToken = null;\n\t        token = null;\n\t\n\t        if (socket) {\n\t            socket.removeAllListeners();\n\t            socket.disconnect();\n\t            socket = null;\n\t        }\n\t\n\t        reconnectTimeout = (reconnectTimeout === null) ? 2500 : 2 * reconnectTimeout;\n\t\n\t        if (reconnectTimeout > (maxReconnectTimeout)) {\n\t            reconnectTimeout = maxReconnectTimeout;\n\t        }\n\t\n\t        setTimeout(function doReconnect() {\n\t            log.debug('Reconnecting...');\n\t\n\t            actuallyConnect().then(function successHandler() {\n\t                reconnectTimeout = null;\n\t                log.debug('socket reconnected');\n\t                return Q.all(client.getGroups().map(function iterGroups(group) {\n\t                    client.join({\n\t                        id: group.id,\n\t                        onMessage: clientSettings.onMessage,\n\t                        onJoin: clientSettings.onJoin,\n\t                        onLeave: clientSettings.onLeave\n\t                    }).catch(function (err) {\n\t                        log.error(\"Couldn't rejoin previous group.\", { id: group.id, message: err.message, stack: err.stack });\n\t                        throw err;\n\t                    });\n\t                }));\n\t            }).then(function successHandler() {\n\t                log.debug('groups rejoined after reconnect');\n\t                /**\n\t                 * Indicate that a reconnect has succeeded.\n\t                 * @event respoke.Client#reconnect\n\t                 * @property {string} name - the event name.\n\t                 * @property {respoke.Client}\n\t                 */\n\t                client.fire('reconnect');\n\t            }).fin(function finHandler() {\n\t                // re-enable reconnects\n\t                clientSettings.reconnect = true;\n\t            }).done(null, function errHandler(err) {\n\t                log.error(\"Couldn't reconnect. Retrying...\", { message: err.message, stack: err.stack });\n\t                reconnect();\n\t            });\n\t        }, reconnectTimeout);\n\t    }\n\t\n\t    /**\n\t     * Authenticate to the cloud and call the handler on state change.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.authenticate\n\t     * @private\n\t     * @param {object} params\n\t     * @return {Promise}\n\t     */\n\t    that.authenticate = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var pieces = [];\n\t        var protocol = null;\n\t        var host = null;\n\t        var port = null;\n\t\n\t        if (!appToken) {\n\t            deferred.reject(new Error(\"Can't open a websocket without an app token.\"));\n\t        }\n\t\n\t        pieces = clientSettings.baseURL.split(/:\\/\\//);\n\t        protocol = pieces[0];\n\t        pieces = pieces[1].split(/:/);\n\t        host = pieces[0];\n\t        port = pieces[1];\n\t\n\t        var connectParams = {\n\t            'connect timeout': clientSettings.connectTimeoutMillis,\n\t            'force new connection': true, // Don't try to reuse old connection.\n\t            'sync disconnect on unload': true, // have Socket.io call disconnect() on the browser unload event.\n\t            reconnect: false,\n\t            host: host,\n\t            port: port || '443',\n\t            protocol: protocol,\n\t            secure: (protocol === 'https'),\n\t            query: '__sails_io_sdk_version=0.10.0&app-token=' + appToken + '&Respoke-SDK=' + sdkHeaderValue\n\t        };\n\t\n\t        if (that.isConnected() || isConnecting()) {\n\t            return;\n\t        }\n\t        socket = io.connect(clientSettings.baseURL, connectParams);\n\t\n\t        socket.on('connect', generateConnectHandler(function onSuccess() {\n\t            deferred.resolve();\n\t        }, function onError(err) {\n\t            deferred.reject(err);\n\t        }));\n\t\n\t        socket.on('join', onJoin);\n\t        socket.on('leave', onLeave);\n\t        socket.on('pubsub', onPubSub);\n\t        socket.on('message', onMessage);\n\t        socket.on('presence', onPresence);\n\t\n\t        // connection timeout\n\t        socket.on('connect_failed', function connectFailedHandler(res) {\n\t            deferred.reject(new Error(\"WebSocket connection failed.\"));\n\t            log.error('Socket.io connect timeout.', res || \"\");\n\t            reconnect();\n\t        });\n\t\n\t        // handshake error, 403, socket disconnects on FireFox\n\t        socket.on('error', function errorHandler(res) {\n\t            log.error('Socket.io error.', res || \"\");\n\t            reconnect();\n\t        });\n\t\n\t        that.addHandler({\n\t            type: 'signal',\n\t            handler: function signalHandler(message) {\n\t                var knownSignals = ['offer', 'answer', 'connected', 'modify', 'iceCandidates', 'bye'];\n\t                var signal = respoke.SignalingMessage({\n\t                    rawMessage: message\n\t                });\n\t\n\t                if (signal.signalType === 'ack') {\n\t                    return;\n\t                }\n\t\n\t                if (!signal.target || !signal.signalType || knownSignals.indexOf(signal.signalType) === -1) {\n\t                    log.error(\"Got malformed signal.\", signal);\n\t                    throw new Error(\"Can't route signal without target or type.\");\n\t                }\n\t\n\t                that.routeSignal(signal);\n\t            }\n\t        });\n\t\n\t        socket.on('disconnect', function onDisconnect() {\n\t            log.debug('Socket.io disconnect.');\n\t            pendingRequests.reset(function (pendingRequest) {\n\t                log.debug('Failing pending requests');\n\t                pendingRequest.reject(new Error(\"WebSocket disconnected\"));\n\t            });\n\t\n\t            /**\n\t             * Indicate that this client has been disconnected from the Respoke service.\n\t             * @event respoke.Client#disconnect\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            client.fire('disconnect');\n\t\n\t            reconnect();\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Get ephemeral TURN credentials.  This method is called whenever a call is either\n\t     * sent or received, prior to creating a PeerConnection\n\t     *\n\t     * @memberof! respoke.SignalingChannel\n\t     * @private\n\t     * @method respoke.SignalingChannel.getTurnCredentials\n\t     * @return {Promise<Array>}\n\t     */\n\t    that.getTurnCredentials = function () {\n\t        var deferred = Q.defer();\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            httpMethod: 'GET',\n\t            path: '/v1/turn'\n\t        }).done(function successHandler(creds) {\n\t            var result = [];\n\t\n\t            if (!creds || !creds.uris) {\n\t                deferred.reject(new Error(\"Turn credentials empty.\"));\n\t                return;\n\t            }\n\t\n\t            creds.uris.forEach(function saveTurnUri(uri) {\n\t                var cred = null;\n\t\n\t                if (!uri) {\n\t                    return;\n\t                }\n\t\n\t                cred = createIceServer(uri, creds.username, creds.password);\n\t                result.push(cred);\n\t            });\n\t\n\t            if (result.length === 0) {\n\t                deferred.reject(new Error(\"Got no TURN credentials.\"));\n\t            }\n\t\n\t            log.debug('TURN creds', result);\n\t            deferred.resolve(result);\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Construct a websocket API call and return the formatted response and errors. The 'success'\n\t     * attribute indicates the success or failure of the API call. The 'response' attribute\n\t     * is an associative array constructed by json.decode. The 'error' attriute is a message.\n\t     * If the API call is successful but the server returns invalid JSON, error will be\n\t     * \"Invalid JSON.\" and response will be the unchanged content of the response body.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.wsCall\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} params.httpMethod\n\t     * @param {string} params.path\n\t     * @param {string} params.objectId\n\t     * @param {object} params.parameters - These are request body parameters that get converted to JSON before\n\t     * being sent over the websocket. Undefined parameters and functions are removed by JSON.stringify.\n\t     * @return {Promise<object>}\n\t     */\n\t    function wsCall(params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var start = now();\n\t        // Too many of these!\n\t        var logRequest = (params.path.indexOf('messages') === -1 && params.path.indexOf('signaling') === -1) ||\n\t            respoke.ridiculous;\n\t        var request;\n\t        var bodyLength = 0;\n\t        if (params.parameters) {\n\t            bodyLength = encodeURI(JSON.stringify(params.parameters)).split(/%..|./).length - 1;\n\t        }\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (!params) {\n\t            deferred.reject(new Error('No params.'));\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (!params.path) {\n\t            deferred.reject(new Error('No request path.'));\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (bodyLength > bodySizeLimit) {\n\t            deferred.reject(new Error('Request body exceeds maximum size of ' + bodySizeLimit + ' bytes'));\n\t            return deferred.promise;\n\t        }\n\t\n\t        params.httpMethod = (params.httpMethod || 'get').toLowerCase();\n\t\n\t        if (params.urlParams) {\n\t            params.path = template.parse(params.path).expand(params.urlParams);\n\t        }\n\t\n\t        if (logRequest) {\n\t            log.debug('socket request', {\n\t                method: params.httpMethod,\n\t                path: params.path,\n\t                parameters: params.parameters\n\t            });\n\t        }\n\t\n\t        request = {\n\t            method: params.httpMethod,\n\t            path: params.path,\n\t            parameters: params.parameters,\n\t            tries: 0,\n\t            durationMillis: 0\n\t        };\n\t\n\t        request.id = pendingRequests.add(deferred);\n\t\n\t        function handleResponse(response) {\n\t            var thisHandler = this; // jshint ignore:line\n\t            /*\n\t             * Response:\n\t             *  {\n\t             *      body: {},\n\t             *      headers: {},\n\t             *      statusCode: 200\n\t             *  }\n\t             */\n\t            try {\n\t                response.body = JSON.parse(response.body);\n\t            } catch (e) {\n\t                if (typeof response.body !== 'object') {\n\t                    deferred.reject(new Error(\"Server response could not be parsed!\" + response.body));\n\t                    return;\n\t                }\n\t            }\n\t\n\t            if (response.statusCode === 429) {\n\t                if (request.tries < 3 && deferred.promise.isPending()) {\n\t                    setTimeout(function () {\n\t                        start = now();\n\t                        sendWebsocketRequest(request, handleResponse);\n\t                    }, 1000); // one day this will be response.interval or something\n\t                } else {\n\t                    request.durationMillis = now() - start;\n\t                    pendingRequests.remove(request.id);\n\t                    failWebsocketRequest(request, response,\n\t                            \"Too many retries after rate limit exceeded.\", deferred);\n\t                }\n\t                return;\n\t            }\n\t\n\t            request.durationMillis = now() - start;\n\t            pendingRequests.remove(request.id);\n\t\n\t            if (logRequest) {\n\t                log.debug('socket response', {\n\t                    method: request.method,\n\t                    path: request.path,\n\t                    durationMillis: request.durationMillis,\n\t                    response: response\n\t                });\n\t            }\n\t\n\t            if (isBillingSuspensionUnauthorizedResponse(response)) {\n\t                failWebsocketRequest(request, response, billingSuspensionErrorMessage, deferred);\n\t                return;\n\t            }\n\t\n\t            if (isSuspensionUnauthorizedResponse(response)) {\n\t                failWebsocketRequest(request, response, suspensionErrorMessage, deferred);\n\t                return;\n\t            }\n\t\n\t            if ([200, 204, 205, 302, 401, 403, 404, 418].indexOf(thisHandler.status) === -1) {\n\t                failWebsocketRequest(request, response,\n\t                        response.body.error || errors[thisHandler.status] || \"Unknown error\", deferred);\n\t                return;\n\t            }\n\t\n\t            deferred.resolve(response.body);\n\t        }\n\t\n\t        start = now();\n\t        sendWebsocketRequest(request, handleResponse);\n\t        return deferred.promise;\n\t    }\n\t\n\t    function failWebsocketRequest(request, response, error, deferred) {\n\t        if (response && response.body && response.body.error) {\n\t            deferred.reject(buildResponseError(response, error + ' (' + request.method + ' ' + request.path + ')'));\n\t        } else {\n\t            deferred.resolve(response.body);\n\t        }\n\t    }\n\t\n\t    function sendWebsocketRequest(request, handleResponse) {\n\t        request.tries += 1;\n\t        socket.emit(request.method, JSON.stringify({\n\t            url: request.path,\n\t            data: request.parameters,\n\t            headers: {\n\t                'App-Token': appToken,\n\t                'Respoke-SDK': sdkHeaderValue }\n\t        }), handleResponse);\n\t    }\n\t\n\t    /**\n\t     * Construct an API call and return the formatted response and errors. The 'success'\n\t     * attribute indicates the success or failure of the API call. The 'response' attribute\n\t     * is an associative array constructed by json.decode. The 'error' attribute is a message.\n\t     * If the API call is successful but the server returns invalid JSON, error will be\n\t     * \"Invalid JSON.\" and response will be the unchanged content of the response body.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.call\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} params.httpMethod\n\t     * @param {string} params.objectId\n\t     * @param {string} params.path\n\t     * @param {object} params.parameters\n\t     * @returns {Promise}\n\t     */\n\t    function call(params) {\n\t        /* Params go in the URI for GET, DELETE, same format for\n\t         * POST and PUT, but they must be sent separately after the\n\t         * request is opened. */\n\t        var deferred = Q.defer();\n\t        var paramString = null;\n\t        var uri = null;\n\t        var response = {\n\t            body: null,\n\t            statusCode: null\n\t        };\n\t        var start = now();\n\t\n\t        uri = clientSettings.baseURL + params.path;\n\t\n\t        if (!params) {\n\t            deferred.reject(new Error('No params.'));\n\t            return;\n\t        }\n\t\n\t        if (!params.httpMethod) {\n\t            deferred.reject(new Error('No HTTP method.'));\n\t            return;\n\t        }\n\t\n\t        if (!params.path) {\n\t            deferred.reject(new Error('No request path.'));\n\t            return;\n\t        }\n\t\n\t        if (params.urlParams) {\n\t            uri = template.parse(uri).expand(params.urlParams);\n\t        }\n\t\n\t        if (['GET', 'DELETE'].indexOf(params.httpMethod) > -1) {\n\t            uri += makeParamString(params.parameters);\n\t        }\n\t\n\t        xhr.open(params.httpMethod, uri);\n\t        xhr.setRequestHeader('Respoke-SDK', sdkHeaderValue);\n\t        if (appToken) {\n\t            xhr.setRequestHeader(\"App-Token\", appToken);\n\t        }\n\t        if (['POST', 'PUT'].indexOf(params.httpMethod) > -1) {\n\t            paramString = JSON.stringify(params.parameters);\n\t            if (paramString.length > bodySizeLimit) {\n\t                deferred.reject(new Error('Request body exceeds maximum size of ' + bodySizeLimit + ' bytes'));\n\t                return;\n\t            }\n\t            xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n\t        } else if (['GET', 'DELETE'].indexOf(params.httpMethod) === -1) {\n\t            deferred.reject(new Error('Illegal HTTP request method ' + params.httpMethod));\n\t            return;\n\t        }\n\t        log.debug('request', {\n\t            method: params.httpMethod,\n\t            uri: uri,\n\t            params: paramString\n\t        });\n\t\n\t        try {\n\t            xhr.send(paramString);\n\t        } catch (err) {\n\t            deferred.reject(err);\n\t            return;\n\t        }\n\t\n\t        xhr.onreadystatechange = function () {\n\t            var durationMillis = now() - start;\n\t            var limit;\n\t            var unit;\n\t\n\t            if (this.readyState !== 4) {\n\t                return;\n\t            }\n\t\n\t            if (this.status === 0) {\n\t                deferred.reject(new Error(\"Status is 0: Incomplete request, SSL error, or CORS error.\"));\n\t                return;\n\t            }\n\t\n\t            response.statusCode = this.status;\n\t            response.headers = getAllResponseHeaders(this);\n\t            response.uri = uri;\n\t            response.params = params.parameters;\n\t            response.error = errors[this.status];\n\t\n\t            if (this.response) {\n\t                try {\n\t                    response.body = JSON.parse(this.response);\n\t                } catch (e) {\n\t                    response.body = this.response;\n\t                    response.error = \"Invalid JSON.\";\n\t                }\n\t            }\n\t\n\t            log.debug('response', {\n\t                method: params.httpMethod,\n\t                durationMillis: durationMillis,\n\t                response: response\n\t            });\n\t\n\t            if ([200, 204, 205, 302, 401, 403, 404, 418].indexOf(this.status) > -1) {\n\t                deferred.resolve(response);\n\t            } else if (this.status === 429) {\n\t                unit = getResponseHeader(this, 'RateLimit-Time-Units');\n\t                limit = getResponseHeader(this, 'RateLimit-Limit');\n\t                deferred.reject(buildResponseError(response, \"Rate limit of \" + limit + \"/\" + unit +\n\t                    \" exceeded. Try again in 1 \" + unit + \".\"));\n\t            } else {\n\t                deferred.reject(buildResponseError(response, 'unexpected response code ' + this.status));\n\t            }\n\t        };\n\t\n\t        return deferred.promise;\n\t    }\n\t\n\t    function isSuspensionUnauthorizedResponse(response) {\n\t        return (response.statusCode === 401) && response.body && response.body.details &&\n\t            (typeof response.body.details.message === 'string') &&\n\t            (response.body.details.message.indexOf('suspended') > -1);\n\t    }\n\t\n\t    function isBillingSuspensionUnauthorizedResponse(response) {\n\t        return isSuspensionUnauthorizedResponse(response) &&\n\t            (typeof response.body.details.reason === 'string') &&\n\t            (response.body.details.reason.indexOf('billing suspension') > -1);\n\t    }\n\t\n\t    /**\n\t     * Turn key/value and key/list pairs into an HTTP URL parameter string.\n\t     * var1=value1&var2=value2,value3,value4\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.makeParamString\n\t     * @private\n\t     * @param {object} params - Arbitrary collection of strings and arrays to serialize.\n\t     * @returns {string}\n\t     */\n\t    function makeParamString(params) {\n\t        var strings = [];\n\t        if (!params) {\n\t            return '';\n\t        }\n\t\n\t        Object.keys(params).forEach(function formatParam(name) {\n\t            var value = params[name];\n\t            /* Skip objects -- We won't know how to name these. */\n\t            if (value instanceof Array) {\n\t                strings.push([name, value.join(',')].join('='));\n\t            } else if (typeof value !== 'object' && typeof value !== 'function') {\n\t                strings.push([name, value].join('='));\n\t            }\n\t        });\n\t\n\t        if (strings.length > 0) {\n\t            return '?' + strings.join('&');\n\t        } else {\n\t            return '';\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Tries to retrieve a single header value from an XHR response. If the header is disallowed,\n\t     * or does not exist, will return null. Otherwise returns the value of the header.\n\t     *\n\t     * The CORS spec does not define what the browser should do in the case of a request for a\n\t     * disallowed header, but at least Chrome throws an exception.\n\t     *\n\t     * @param {object} xhrResponse The response of an XMLHttpRequest\n\t     * @param {string} header The name of the header to retrieve the value for\n\t     * @returns {string|null} The value(s) of the header, or null if disallowed or unavailable.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getResponseHeader\n\t     * @private\n\t     */\n\t    function getResponseHeader(xhrResponse, header) {\n\t        try {\n\t            return xhrResponse.getResponseHeader(header);\n\t        } catch (e) {\n\t            return null;\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Retrieves all headers from an XHR response as key/val pairs\n\t     *\n\t     * @param {object} xhrResponse The response of an XMLHttpRequest\n\t     * @returns {*} the key/val pairs of the response headers\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getAllResponseHeaders\n\t     * @private\n\t     */\n\t    function getAllResponseHeaders(xhrResponse) {\n\t        var result = {};\n\t        var headers;\n\t        var pairs;\n\t\n\t        headers = xhrResponse.getAllResponseHeaders();\n\t        if (!headers) {\n\t            return result;\n\t        }\n\t\n\t        // 1 header per line (cr+lf)\n\t        pairs = headers.split('\\u000d\\u000a');\n\t        pairs.forEach(function (pair) {\n\t            var key;\n\t            var val;\n\t\n\t            // key separated from value by ': '\n\t            // value may contain ': ', so using indexOf instead of split\n\t            var index = pair.indexOf('\\u003a\\u0020');\n\t            if (index > 0) {\n\t                key = pair.substring(0, index);\n\t                val = pair.substring(index + 2);\n\t                result[key] = val;\n\t            }\n\t        });\n\t\n\t        return result;\n\t    }\n\t\n\t    /**\n\t     * Creates an Error with the supplied `message` and, if available, the `Request-Id` header\n\t     * from the supplied `response`.\n\t     *\n\t     * @param {object} res\n\t     * @param {object} [res.headers]\n\t     * @param {string} [res.headers.Request-Id] The requestId to append to the Error message\n\t     * @param {string} message The message the Error should be constructed with\n\t     * @returns {Error} the constructed Error object\n\t     * @memberof respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.buildResponseError\n\t     * @api private\n\t     */\n\t    function buildResponseError(res, message) {\n\t        var requestId = res && res.headers && res.headers['Request-Id'];\n\t        if (requestId) {\n\t            message += ' [Request-Id: ' + requestId + ']';\n\t        }\n\t\n\t        return new Error(message);\n\t    }\n\t\n\t    return that;\n\t}; // End respoke.SignalingChannel\n\t/**\n\t * Handle an error that resulted from a method call.\n\t * @callback respoke.SignalingChannel.errorHandler\n\t * @params {Error} err\n\t */\n\t/**\n\t * Handle sending successfully.\n\t * @callback respoke.SignalingChannel.sendHandler\n\t */\n\t/**\n\t * Receive a group.\n\t * @callback respoke.SignalingChannel.groupHandler\n\t * @param {respoke.Group}\n\t */\n\t/**\n\t * Receive a list of groups.\n\t * @callback respoke.SignalingChannel.groupListHandler\n\t * @param {Array}\n\t */\n\t/**\n\t * Receive a list of TURN credentials.\n\t * @callback respoke.SignalingChannel.turnSuccessHandler\n\t * @param {Array}\n\t */\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/*! Socket.IO.js build:0.9.17, development. Copyright(c) 2011 LearnBoost <dev@learnboost.com> MIT Licensed */\n\t\n\tvar io = ( false ? {} : module.exports);\n\t(function() {\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, global) {\n\t\n\t  /**\n\t   * IO namespace.\n\t   *\n\t   * @namespace\n\t   */\n\t\n\t  var io = exports;\n\t\n\t  /**\n\t   * Socket.IO version\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  io.version = '0.9.17';\n\t\n\t  /**\n\t   * Protocol implemented.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  io.protocol = 1;\n\t\n\t  /**\n\t   * Available transports, these will be populated with the available transports\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  io.transports = [];\n\t\n\t  /**\n\t   * Keep track of jsonp callbacks.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.j = [];\n\t\n\t  /**\n\t   * Keep track of our io.Sockets\n\t   *\n\t   * @api private\n\t   */\n\t  io.sockets = {};\n\t\n\t\n\t  /**\n\t   * Manages connections to hosts.\n\t   *\n\t   * @param {String} uri\n\t   * @Param {Boolean} force creation of new socket (defaults to false)\n\t   * @api public\n\t   */\n\t\n\t  io.connect = function (host, details) {\n\t    var uri = io.util.parseUri(host)\n\t      , uuri\n\t      , socket;\n\t\n\t    if (global && global.location) {\n\t      uri.protocol = uri.protocol || global.location.protocol.slice(0, -1);\n\t      uri.host = uri.host || (global.document\n\t        ? global.document.domain : global.location.hostname);\n\t      uri.port = uri.port || global.location.port;\n\t    }\n\t\n\t    uuri = io.util.uniqueUri(uri);\n\t\n\t    var options = {\n\t        host: uri.host\n\t      , secure: 'https' == uri.protocol\n\t      , port: uri.port || ('https' == uri.protocol ? 443 : 80)\n\t      , query: uri.query || ''\n\t    };\n\t\n\t    io.util.merge(options, details);\n\t\n\t    if (options['force new connection'] || !io.sockets[uuri]) {\n\t      socket = new io.Socket(options);\n\t    }\n\t\n\t    if (!options['force new connection'] && socket) {\n\t      io.sockets[uuri] = socket;\n\t    }\n\t\n\t    socket = socket || io.sockets[uuri];\n\t\n\t    // if path is different from '' or /\n\t    return socket.of(uri.path.length > 1 ? uri.path : '');\n\t  };\n\t\n\t})( true ? module.exports : (this.io = {}), this);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, global) {\n\t\n\t  /**\n\t   * Utilities namespace.\n\t   *\n\t   * @namespace\n\t   */\n\t\n\t  var util = exports.util = {};\n\t\n\t  /**\n\t   * Parses an URI\n\t   *\n\t   * @author Steven Levithan <stevenlevithan.com> (MIT license)\n\t   * @api public\n\t   */\n\t\n\t  var re = /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\t\n\t  var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password',\n\t               'host', 'port', 'relative', 'path', 'directory', 'file', 'query',\n\t               'anchor'];\n\t\n\t  util.parseUri = function (str) {\n\t    var m = re.exec(str || '')\n\t      , uri = {}\n\t      , i = 14;\n\t\n\t    while (i--) {\n\t      uri[parts[i]] = m[i] || '';\n\t    }\n\t\n\t    return uri;\n\t  };\n\t\n\t  /**\n\t   * Produces a unique url that identifies a Socket.IO connection.\n\t   *\n\t   * @param {Object} uri\n\t   * @api public\n\t   */\n\t\n\t  util.uniqueUri = function (uri) {\n\t    var protocol = uri.protocol\n\t      , host = uri.host\n\t      , port = uri.port;\n\t\n\t    if ('document' in global) {\n\t      host = host || document.domain;\n\t      port = port || (protocol == 'https'\n\t        && document.location.protocol !== 'https:' ? 443 : document.location.port);\n\t    } else {\n\t      host = host || 'localhost';\n\t\n\t      if (!port && protocol == 'https') {\n\t        port = 443;\n\t      }\n\t    }\n\t\n\t    return (protocol || 'http') + '://' + host + ':' + (port || 80);\n\t  };\n\t\n\t  /**\n\t   * Mergest 2 query strings in to once unique query string\n\t   *\n\t   * @param {String} base\n\t   * @param {String} addition\n\t   * @api public\n\t   */\n\t\n\t  util.query = function (base, addition) {\n\t    var query = util.chunkQuery(base || '')\n\t      , components = [];\n\t\n\t    util.merge(query, util.chunkQuery(addition || ''));\n\t    for (var part in query) {\n\t      if (query.hasOwnProperty(part)) {\n\t        components.push(part + '=' + query[part]);\n\t      }\n\t    }\n\t\n\t    return components.length ? '?' + components.join('&') : '';\n\t  };\n\t\n\t  /**\n\t   * Transforms a querystring in to an object\n\t   *\n\t   * @param {String} qs\n\t   * @api public\n\t   */\n\t\n\t  util.chunkQuery = function (qs) {\n\t    var query = {}\n\t      , params = qs.split('&')\n\t      , i = 0\n\t      , l = params.length\n\t      , kv;\n\t\n\t    for (; i < l; ++i) {\n\t      kv = params[i].split('=');\n\t      if (kv[0]) {\n\t        query[kv[0]] = kv[1];\n\t      }\n\t    }\n\t\n\t    return query;\n\t  };\n\t\n\t  /**\n\t   * Executes the given function when the page is loaded.\n\t   *\n\t   *     io.util.load(function () { console.log('page loaded'); });\n\t   *\n\t   * @param {Function} fn\n\t   * @api public\n\t   */\n\t\n\t  var pageLoaded = false;\n\t\n\t  util.load = function (fn) {\n\t    if ('document' in global && document.readyState === 'complete' || pageLoaded) {\n\t      return fn();\n\t    }\n\t\n\t    util.on(global, 'load', fn, false);\n\t  };\n\t\n\t  /**\n\t   * Adds an event.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  util.on = function (element, event, fn, capture) {\n\t    if (element.attachEvent) {\n\t      element.attachEvent('on' + event, fn);\n\t    } else if (element.addEventListener) {\n\t      element.addEventListener(event, fn, capture);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Generates the correct `XMLHttpRequest` for regular and cross domain requests.\n\t   *\n\t   * @param {Boolean} [xdomain] Create a request that can be used cross domain.\n\t   * @returns {XMLHttpRequest|false} If we can create a XMLHttpRequest.\n\t   * @api private\n\t   */\n\t\n\t  util.request = function (xdomain) {\n\t\n\t    if (xdomain && 'undefined' != typeof XDomainRequest && !util.ua.hasCORS) {\n\t      return new XDomainRequest();\n\t    }\n\t\n\t    if ('undefined' != typeof XMLHttpRequest && (!xdomain || util.ua.hasCORS)) {\n\t      return new XMLHttpRequest();\n\t    }\n\t\n\t    if (!xdomain) {\n\t      try {\n\t        return new window[(['Active'].concat('Object').join('X'))]('Microsoft.XMLHTTP');\n\t      } catch(e) { }\n\t    }\n\t\n\t    return null;\n\t  };\n\t\n\t  /**\n\t   * XHR based transport constructor.\n\t   *\n\t   * @constructor\n\t   * @api public\n\t   */\n\t\n\t  /**\n\t   * Change the internal pageLoaded value.\n\t   */\n\t\n\t  if ('undefined' != typeof window) {\n\t    util.load(function () {\n\t      pageLoaded = true;\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Defers a function to ensure a spinner is not displayed by the browser\n\t   *\n\t   * @param {Function} fn\n\t   * @api public\n\t   */\n\t\n\t  util.defer = function (fn) {\n\t    if (!util.ua.webkit || 'undefined' != typeof importScripts) {\n\t      return fn();\n\t    }\n\t\n\t    util.load(function () {\n\t      setTimeout(fn, 100);\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Merges two objects.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.merge = function merge (target, additional, deep, lastseen) {\n\t    var seen = lastseen || []\n\t      , depth = typeof deep == 'undefined' ? 2 : deep\n\t      , prop;\n\t\n\t    for (prop in additional) {\n\t      if (additional.hasOwnProperty(prop) && util.indexOf(seen, prop) < 0) {\n\t        if (typeof target[prop] !== 'object' || !depth) {\n\t          target[prop] = additional[prop];\n\t          seen.push(additional[prop]);\n\t        } else {\n\t          util.merge(target[prop], additional[prop], depth - 1, seen);\n\t        }\n\t      }\n\t    }\n\t\n\t    return target;\n\t  };\n\t\n\t  /**\n\t   * Merges prototypes from objects\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.mixin = function (ctor, ctor2) {\n\t    util.merge(ctor.prototype, ctor2.prototype);\n\t  };\n\t\n\t  /**\n\t   * Shortcut for prototypical and static inheritance.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  util.inherit = function (ctor, ctor2) {\n\t    function f() {};\n\t    f.prototype = ctor2.prototype;\n\t    ctor.prototype = new f;\n\t  };\n\t\n\t  /**\n\t   * Checks if the given object is an Array.\n\t   *\n\t   *     io.util.isArray([]); // true\n\t   *     io.util.isArray({}); // false\n\t   *\n\t   * @param Object obj\n\t   * @api public\n\t   */\n\t\n\t  util.isArray = Array.isArray || function (obj) {\n\t    return Object.prototype.toString.call(obj) === '[object Array]';\n\t  };\n\t\n\t  /**\n\t   * Intersects values of two arrays into a third\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.intersect = function (arr, arr2) {\n\t    var ret = []\n\t      , longest = arr.length > arr2.length ? arr : arr2\n\t      , shortest = arr.length > arr2.length ? arr2 : arr;\n\t\n\t    for (var i = 0, l = shortest.length; i < l; i++) {\n\t      if (~util.indexOf(longest, shortest[i]))\n\t        ret.push(shortest[i]);\n\t    }\n\t\n\t    return ret;\n\t  };\n\t\n\t  /**\n\t   * Array indexOf compatibility.\n\t   *\n\t   * @see bit.ly/a5Dxa2\n\t   * @api public\n\t   */\n\t\n\t  util.indexOf = function (arr, o, i) {\n\t\n\t    for (var j = arr.length, i = i < 0 ? i + j < 0 ? 0 : i + j : i || 0;\n\t         i < j && arr[i] !== o; i++) {}\n\t\n\t    return j <= i ? -1 : i;\n\t  };\n\t\n\t  /**\n\t   * Converts enumerables to array.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.toArray = function (enu) {\n\t    var arr = [];\n\t\n\t    for (var i = 0, l = enu.length; i < l; i++)\n\t      arr.push(enu[i]);\n\t\n\t    return arr;\n\t  };\n\t\n\t  /**\n\t   * UA / engines detection namespace.\n\t   *\n\t   * @namespace\n\t   */\n\t\n\t  util.ua = {};\n\t\n\t  /**\n\t   * Whether the UA supports CORS for XHR.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.ua.hasCORS = 'undefined' != typeof XMLHttpRequest && (function () {\n\t    try {\n\t      var a = new XMLHttpRequest();\n\t    } catch (e) {\n\t      return false;\n\t    }\n\t\n\t    return a.withCredentials != undefined;\n\t  })();\n\t\n\t  /**\n\t   * Detect webkit.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.ua.webkit = 'undefined' != typeof navigator\n\t    && /webkit/i.test(navigator.userAgent);\n\t\n\t   /**\n\t   * Detect iPad/iPhone/iPod.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.ua.iDevice = 'undefined' != typeof navigator\n\t      && /iPad|iPhone|iPod/i.test(navigator.userAgent);\n\t\n\t})('undefined' != typeof io ? io : module.exports, this);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.EventEmitter = EventEmitter;\n\t\n\t  /**\n\t   * Event emitter constructor.\n\t   *\n\t   * @api public.\n\t   */\n\t\n\t  function EventEmitter () {};\n\t\n\t  /**\n\t   * Adds a listener\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  EventEmitter.prototype.on = function (name, fn) {\n\t    if (!this.$events) {\n\t      this.$events = {};\n\t    }\n\t\n\t    if (!this.$events[name]) {\n\t      this.$events[name] = fn;\n\t    } else if (io.util.isArray(this.$events[name])) {\n\t      this.$events[name].push(fn);\n\t    } else {\n\t      this.$events[name] = [this.$events[name], fn];\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\t\n\t  /**\n\t   * Adds a volatile listener.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  EventEmitter.prototype.once = function (name, fn) {\n\t    var self = this;\n\t\n\t    function on () {\n\t      self.removeListener(name, on);\n\t      fn.apply(this, arguments);\n\t    };\n\t\n\t    on.listener = fn;\n\t    this.on(name, on);\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Removes a listener.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  EventEmitter.prototype.removeListener = function (name, fn) {\n\t    if (this.$events && this.$events[name]) {\n\t      var list = this.$events[name];\n\t\n\t      if (io.util.isArray(list)) {\n\t        var pos = -1;\n\t\n\t        for (var i = 0, l = list.length; i < l; i++) {\n\t          if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {\n\t            pos = i;\n\t            break;\n\t          }\n\t        }\n\t\n\t        if (pos < 0) {\n\t          return this;\n\t        }\n\t\n\t        list.splice(pos, 1);\n\t\n\t        if (!list.length) {\n\t          delete this.$events[name];\n\t        }\n\t      } else if (list === fn || (list.listener && list.listener === fn)) {\n\t        delete this.$events[name];\n\t      }\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Removes all listeners for an event.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  EventEmitter.prototype.removeAllListeners = function (name) {\n\t    if (name === undefined) {\n\t      this.$events = {};\n\t      return this;\n\t    }\n\t\n\t    if (this.$events && this.$events[name]) {\n\t      this.$events[name] = null;\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Gets all listeners for a certain event.\n\t   *\n\t   * @api publci\n\t   */\n\t\n\t  EventEmitter.prototype.listeners = function (name) {\n\t    if (!this.$events) {\n\t      this.$events = {};\n\t    }\n\t\n\t    if (!this.$events[name]) {\n\t      this.$events[name] = [];\n\t    }\n\t\n\t    if (!io.util.isArray(this.$events[name])) {\n\t      this.$events[name] = [this.$events[name]];\n\t    }\n\t\n\t    return this.$events[name];\n\t  };\n\t\n\t  /**\n\t   * Emits an event.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  EventEmitter.prototype.emit = function (name) {\n\t    if (!this.$events) {\n\t      return false;\n\t    }\n\t\n\t    var handler = this.$events[name];\n\t\n\t    if (!handler) {\n\t      return false;\n\t    }\n\t\n\t    var args = Array.prototype.slice.call(arguments, 1);\n\t\n\t    if ('function' == typeof handler) {\n\t      handler.apply(this, args);\n\t    } else if (io.util.isArray(handler)) {\n\t      var listeners = handler.slice();\n\t\n\t      for (var i = 0, l = listeners.length; i < l; i++) {\n\t        listeners[i].apply(this, args);\n\t      }\n\t    } else {\n\t      return false;\n\t    }\n\t\n\t    return true;\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * Based on JSON2 (http://www.JSON.org/js.html).\n\t */\n\t\n\t(function (exports, nativeJSON) {\n\t  \"use strict\";\n\t\n\t  // use native JSON if it's available\n\t  if (nativeJSON && nativeJSON.parse){\n\t    return exports.JSON = {\n\t      parse: nativeJSON.parse\n\t    , stringify: nativeJSON.stringify\n\t    };\n\t  }\n\t\n\t  var JSON = exports.JSON = {};\n\t\n\t  function f(n) {\n\t      // Format integers to have at least two digits.\n\t      return n < 10 ? '0' + n : n;\n\t  }\n\t\n\t  function date(d, key) {\n\t    return isFinite(d.valueOf()) ?\n\t        d.getUTCFullYear()     + '-' +\n\t        f(d.getUTCMonth() + 1) + '-' +\n\t        f(d.getUTCDate())      + 'T' +\n\t        f(d.getUTCHours())     + ':' +\n\t        f(d.getUTCMinutes())   + ':' +\n\t        f(d.getUTCSeconds())   + 'Z' : null;\n\t  };\n\t\n\t  var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n\t      escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n\t      gap,\n\t      indent,\n\t      meta = {    // table of character substitutions\n\t          '\\b': '\\\\b',\n\t          '\\t': '\\\\t',\n\t          '\\n': '\\\\n',\n\t          '\\f': '\\\\f',\n\t          '\\r': '\\\\r',\n\t          '\"' : '\\\\\"',\n\t          '\\\\': '\\\\\\\\'\n\t      },\n\t      rep;\n\t\n\t\n\t  function quote(string) {\n\t\n\t// If the string contains no control characters, no quote characters, and no\n\t// backslash characters, then we can safely slap some quotes around it.\n\t// Otherwise we must also replace the offending characters with safe escape\n\t// sequences.\n\t\n\t      escapable.lastIndex = 0;\n\t      return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n\t          var c = meta[a];\n\t          return typeof c === 'string' ? c :\n\t              '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n\t      }) + '\"' : '\"' + string + '\"';\n\t  }\n\t\n\t\n\t  function str(key, holder) {\n\t\n\t// Produce a string from holder[key].\n\t\n\t      var i,          // The loop counter.\n\t          k,          // The member key.\n\t          v,          // The member value.\n\t          length,\n\t          mind = gap,\n\t          partial,\n\t          value = holder[key];\n\t\n\t// If the value has a toJSON method, call it to obtain a replacement value.\n\t\n\t      if (value instanceof Date) {\n\t          value = date(key);\n\t      }\n\t\n\t// If we were called with a replacer function, then call the replacer to\n\t// obtain a replacement value.\n\t\n\t      if (typeof rep === 'function') {\n\t          value = rep.call(holder, key, value);\n\t      }\n\t\n\t// What happens next depends on the value's type.\n\t\n\t      switch (typeof value) {\n\t      case 'string':\n\t          return quote(value);\n\t\n\t      case 'number':\n\t\n\t// JSON numbers must be finite. Encode non-finite numbers as null.\n\t\n\t          return isFinite(value) ? String(value) : 'null';\n\t\n\t      case 'boolean':\n\t      case 'null':\n\t\n\t// If the value is a boolean or null, convert it to a string. Note:\n\t// typeof null does not produce 'null'. The case is included here in\n\t// the remote chance that this gets fixed someday.\n\t\n\t          return String(value);\n\t\n\t// If the type is 'object', we might be dealing with an object or an array or\n\t// null.\n\t\n\t      case 'object':\n\t\n\t// Due to a specification blunder in ECMAScript, typeof null is 'object',\n\t// so watch out for that case.\n\t\n\t          if (!value) {\n\t              return 'null';\n\t          }\n\t\n\t// Make an array to hold the partial results of stringifying this object value.\n\t\n\t          gap += indent;\n\t          partial = [];\n\t\n\t// Is the value an array?\n\t\n\t          if (Object.prototype.toString.apply(value) === '[object Array]') {\n\t\n\t// The value is an array. Stringify every element. Use null as a placeholder\n\t// for non-JSON values.\n\t\n\t              length = value.length;\n\t              for (i = 0; i < length; i += 1) {\n\t                  partial[i] = str(i, value) || 'null';\n\t              }\n\t\n\t// Join all of the elements together, separated with commas, and wrap them in\n\t// brackets.\n\t\n\t              v = partial.length === 0 ? '[]' : gap ?\n\t                  '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n\t                  '[' + partial.join(',') + ']';\n\t              gap = mind;\n\t              return v;\n\t          }\n\t\n\t// If the replacer is an array, use it to select the members to be stringified.\n\t\n\t          if (rep && typeof rep === 'object') {\n\t              length = rep.length;\n\t              for (i = 0; i < length; i += 1) {\n\t                  if (typeof rep[i] === 'string') {\n\t                      k = rep[i];\n\t                      v = str(k, value);\n\t                      if (v) {\n\t                          partial.push(quote(k) + (gap ? ': ' : ':') + v);\n\t                      }\n\t                  }\n\t              }\n\t          } else {\n\t\n\t// Otherwise, iterate through all of the keys in the object.\n\t\n\t              for (k in value) {\n\t                  if (Object.prototype.hasOwnProperty.call(value, k)) {\n\t                      v = str(k, value);\n\t                      if (v) {\n\t                          partial.push(quote(k) + (gap ? ': ' : ':') + v);\n\t                      }\n\t                  }\n\t              }\n\t          }\n\t\n\t// Join all of the member texts together, separated with commas,\n\t// and wrap them in braces.\n\t\n\t          v = partial.length === 0 ? '{}' : gap ?\n\t              '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n\t              '{' + partial.join(',') + '}';\n\t          gap = mind;\n\t          return v;\n\t      }\n\t  }\n\t\n\t// If the JSON object does not yet have a stringify method, give it one.\n\t\n\t  JSON.stringify = function (value, replacer, space) {\n\t\n\t// The stringify method takes a value and an optional replacer, and an optional\n\t// space parameter, and returns a JSON text. The replacer can be a function\n\t// that can replace values, or an array of strings that will select the keys.\n\t// A default replacer method can be provided. Use of the space parameter can\n\t// produce text that is more easily readable.\n\t\n\t      var i;\n\t      gap = '';\n\t      indent = '';\n\t\n\t// If the space parameter is a number, make an indent string containing that\n\t// many spaces.\n\t\n\t      if (typeof space === 'number') {\n\t          for (i = 0; i < space; i += 1) {\n\t              indent += ' ';\n\t          }\n\t\n\t// If the space parameter is a string, it will be used as the indent string.\n\t\n\t      } else if (typeof space === 'string') {\n\t          indent = space;\n\t      }\n\t\n\t// If there is a replacer, it must be a function or an array.\n\t// Otherwise, throw an error.\n\t\n\t      rep = replacer;\n\t      if (replacer && typeof replacer !== 'function' &&\n\t              (typeof replacer !== 'object' ||\n\t              typeof replacer.length !== 'number')) {\n\t          throw new Error('JSON.stringify');\n\t      }\n\t\n\t// Make a fake root object containing our value under the key of ''.\n\t// Return the result of stringifying the value.\n\t\n\t      return str('', {'': value});\n\t  };\n\t\n\t// If the JSON object does not yet have a parse method, give it one.\n\t\n\t  JSON.parse = function (text, reviver) {\n\t  // The parse method takes a text and an optional reviver function, and returns\n\t  // a JavaScript value if the text is a valid JSON text.\n\t\n\t      var j;\n\t\n\t      function walk(holder, key) {\n\t\n\t  // The walk method is used to recursively walk the resulting structure so\n\t  // that modifications can be made.\n\t\n\t          var k, v, value = holder[key];\n\t          if (value && typeof value === 'object') {\n\t              for (k in value) {\n\t                  if (Object.prototype.hasOwnProperty.call(value, k)) {\n\t                      v = walk(value, k);\n\t                      if (v !== undefined) {\n\t                          value[k] = v;\n\t                      } else {\n\t                          delete value[k];\n\t                      }\n\t                  }\n\t              }\n\t          }\n\t          return reviver.call(holder, key, value);\n\t      }\n\t\n\t\n\t  // Parsing happens in four stages. In the first stage, we replace certain\n\t  // Unicode characters with escape sequences. JavaScript handles many characters\n\t  // incorrectly, either silently deleting them, or treating them as line endings.\n\t\n\t      text = String(text);\n\t      cx.lastIndex = 0;\n\t      if (cx.test(text)) {\n\t          text = text.replace(cx, function (a) {\n\t              return '\\\\u' +\n\t                  ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n\t          });\n\t      }\n\t\n\t  // In the second stage, we run the text against regular expressions that look\n\t  // for non-JSON patterns. We are especially concerned with '()' and 'new'\n\t  // because they can cause invocation, and '=' because it can cause mutation.\n\t  // But just to be safe, we want to reject all unexpected forms.\n\t\n\t  // We split the second stage into 4 regexp operations in order to work around\n\t  // crippling inefficiencies in IE's and Safari's regexp engines. First we\n\t  // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we\n\t  // replace all simple value tokens with ']' characters. Third, we delete all\n\t  // open brackets that follow a colon or comma or that begin the text. Finally,\n\t  // we look to see that the remaining characters are only whitespace or ']' or\n\t  // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.\n\t\n\t      if (/^[\\],:{}\\s]*$/\n\t              .test(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')\n\t                  .replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']')\n\t                  .replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))) {\n\t\n\t  // In the third stage we use the eval function to compile the text into a\n\t  // JavaScript structure. The '{' operator is subject to a syntactic ambiguity\n\t  // in JavaScript: it can begin a block or an object literal. We wrap the text\n\t  // in parens to eliminate the ambiguity.\n\t\n\t          j = eval('(' + text + ')');\n\t\n\t  // In the optional fourth stage, we recursively walk the new structure, passing\n\t  // each name/value pair to a reviver function for possible transformation.\n\t\n\t          return typeof reviver === 'function' ?\n\t              walk({'': j}, '') : j;\n\t      }\n\t\n\t  // If the text is not JSON parseable, then a SyntaxError is thrown.\n\t\n\t      throw new SyntaxError('JSON.parse');\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , typeof JSON !== 'undefined' ? JSON : undefined\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Parser namespace.\n\t   *\n\t   * @namespace\n\t   */\n\t\n\t  var parser = exports.parser = {};\n\t\n\t  /**\n\t   * Packet types.\n\t   */\n\t\n\t  var packets = parser.packets = [\n\t      'disconnect'\n\t    , 'connect'\n\t    , 'heartbeat'\n\t    , 'message'\n\t    , 'json'\n\t    , 'event'\n\t    , 'ack'\n\t    , 'error'\n\t    , 'noop'\n\t  ];\n\t\n\t  /**\n\t   * Errors reasons.\n\t   */\n\t\n\t  var reasons = parser.reasons = [\n\t      'transport not supported'\n\t    , 'client not handshaken'\n\t    , 'unauthorized'\n\t  ];\n\t\n\t  /**\n\t   * Errors advice.\n\t   */\n\t\n\t  var advice = parser.advice = [\n\t      'reconnect'\n\t  ];\n\t\n\t  /**\n\t   * Shortcuts.\n\t   */\n\t\n\t  var JSON = io.JSON\n\t    , indexOf = io.util.indexOf;\n\t\n\t  /**\n\t   * Encodes a packet.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  parser.encodePacket = function (packet) {\n\t    var type = indexOf(packets, packet.type)\n\t      , id = packet.id || ''\n\t      , endpoint = packet.endpoint || ''\n\t      , ack = packet.ack\n\t      , data = null;\n\t\n\t    switch (packet.type) {\n\t      case 'error':\n\t        var reason = packet.reason ? indexOf(reasons, packet.reason) : ''\n\t          , adv = packet.advice ? indexOf(advice, packet.advice) : '';\n\t\n\t        if (reason !== '' || adv !== '')\n\t          data = reason + (adv !== '' ? ('+' + adv) : '');\n\t\n\t        break;\n\t\n\t      case 'message':\n\t        if (packet.data !== '')\n\t          data = packet.data;\n\t        break;\n\t\n\t      case 'event':\n\t        var ev = { name: packet.name };\n\t\n\t        if (packet.args && packet.args.length) {\n\t          ev.args = packet.args;\n\t        }\n\t\n\t        data = JSON.stringify(ev);\n\t        break;\n\t\n\t      case 'json':\n\t        data = JSON.stringify(packet.data);\n\t        break;\n\t\n\t      case 'connect':\n\t        if (packet.qs)\n\t          data = packet.qs;\n\t        break;\n\t\n\t      case 'ack':\n\t        data = packet.ackId\n\t          + (packet.args && packet.args.length\n\t              ? '+' + JSON.stringify(packet.args) : '');\n\t        break;\n\t    }\n\t\n\t    // construct packet with required fragments\n\t    var encoded = [\n\t        type\n\t      , id + (ack == 'data' ? '+' : '')\n\t      , endpoint\n\t    ];\n\t\n\t    // data fragment is optional\n\t    if (data !== null && data !== undefined)\n\t      encoded.push(data);\n\t\n\t    return encoded.join(':');\n\t  };\n\t\n\t  /**\n\t   * Encodes multiple messages (payload).\n\t   *\n\t   * @param {Array} messages\n\t   * @api private\n\t   */\n\t\n\t  parser.encodePayload = function (packets) {\n\t    var decoded = '';\n\t\n\t    if (packets.length == 1)\n\t      return packets[0];\n\t\n\t    for (var i = 0, l = packets.length; i < l; i++) {\n\t      var packet = packets[i];\n\t      decoded += '\\ufffd' + packet.length + '\\ufffd' + packets[i];\n\t    }\n\t\n\t    return decoded;\n\t  };\n\t\n\t  /**\n\t   * Decodes a packet\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  var regexp = /([^:]+):([0-9]+)?(\\+)?:([^:]+)?:?([\\s\\S]*)?/;\n\t\n\t  parser.decodePacket = function (data) {\n\t    var pieces = data.match(regexp);\n\t\n\t    if (!pieces) return {};\n\t\n\t    var id = pieces[2] || ''\n\t      , data = pieces[5] || ''\n\t      , packet = {\n\t            type: packets[pieces[1]]\n\t          , endpoint: pieces[4] || ''\n\t        };\n\t\n\t    // whether we need to acknowledge the packet\n\t    if (id) {\n\t      packet.id = id;\n\t      if (pieces[3])\n\t        packet.ack = 'data';\n\t      else\n\t        packet.ack = true;\n\t    }\n\t\n\t    // handle different packet types\n\t    switch (packet.type) {\n\t      case 'error':\n\t        var pieces = data.split('+');\n\t        packet.reason = reasons[pieces[0]] || '';\n\t        packet.advice = advice[pieces[1]] || '';\n\t        break;\n\t\n\t      case 'message':\n\t        packet.data = data || '';\n\t        break;\n\t\n\t      case 'event':\n\t        try {\n\t          var opts = JSON.parse(data);\n\t          packet.name = opts.name;\n\t          packet.args = opts.args;\n\t        } catch (e) { }\n\t\n\t        packet.args = packet.args || [];\n\t        break;\n\t\n\t      case 'json':\n\t        try {\n\t          packet.data = JSON.parse(data);\n\t        } catch (e) { }\n\t        break;\n\t\n\t      case 'connect':\n\t        packet.qs = data || '';\n\t        break;\n\t\n\t      case 'ack':\n\t        var pieces = data.match(/^([0-9]+)(\\+)?(.*)/);\n\t        if (pieces) {\n\t          packet.ackId = pieces[1];\n\t          packet.args = [];\n\t\n\t          if (pieces[3]) {\n\t            try {\n\t              packet.args = pieces[3] ? JSON.parse(pieces[3]) : [];\n\t            } catch (e) { }\n\t          }\n\t        }\n\t        break;\n\t\n\t      case 'disconnect':\n\t      case 'heartbeat':\n\t        break;\n\t    };\n\t\n\t    return packet;\n\t  };\n\t\n\t  /**\n\t   * Decodes data payload. Detects multiple messages\n\t   *\n\t   * @return {Array} messages\n\t   * @api public\n\t   */\n\t\n\t  parser.decodePayload = function (data) {\n\t    // IE doesn't like data[i] for unicode chars, charAt works fine\n\t    if (data.charAt(0) == '\\ufffd') {\n\t      var ret = [];\n\t\n\t      for (var i = 1, length = ''; i < data.length; i++) {\n\t        if (data.charAt(i) == '\\ufffd') {\n\t          ret.push(parser.decodePacket(data.substr(i + 1).substr(0, length)));\n\t          i += Number(length) + 1;\n\t          length = '';\n\t        } else {\n\t          length += data.charAt(i);\n\t        }\n\t      }\n\t\n\t      return ret;\n\t    } else {\n\t      return [parser.decodePacket(data)];\n\t    }\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.Transport = Transport;\n\t\n\t  /**\n\t   * This is the transport template for all supported transport methods.\n\t   *\n\t   * @constructor\n\t   * @api public\n\t   */\n\t\n\t  function Transport (socket, sessid) {\n\t    this.socket = socket;\n\t    this.sessid = sessid;\n\t  };\n\t\n\t  /**\n\t   * Apply EventEmitter mixin.\n\t   */\n\t\n\t  io.util.mixin(Transport, io.EventEmitter);\n\t\n\t\n\t  /**\n\t   * Indicates whether heartbeats is enabled for this transport\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.heartbeats = function () {\n\t    return true;\n\t  };\n\t\n\t  /**\n\t   * Handles the response from the server. When a new response is received\n\t   * it will automatically update the timeout, decode the message and\n\t   * forwards the response to the onMessage function for further processing.\n\t   *\n\t   * @param {String} data Response from the server.\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onData = function (data) {\n\t    this.clearCloseTimeout();\n\t\n\t    // If the connection in currently open (or in a reopening state) reset the close\n\t    // timeout since we have just received data. This check is necessary so\n\t    // that we don't reset the timeout on an explicitly disconnected connection.\n\t    if (this.socket.connected || this.socket.connecting || this.socket.reconnecting) {\n\t      this.setCloseTimeout();\n\t    }\n\t\n\t    if (data !== '') {\n\t      // todo: we should only do decodePayload for xhr transports\n\t      var msgs = io.parser.decodePayload(data);\n\t\n\t      if (msgs && msgs.length) {\n\t        for (var i = 0, l = msgs.length; i < l; i++) {\n\t          this.onPacket(msgs[i]);\n\t        }\n\t      }\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Handles packets.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onPacket = function (packet) {\n\t    this.socket.setHeartbeatTimeout();\n\t\n\t    if (packet.type == 'heartbeat') {\n\t      return this.onHeartbeat();\n\t    }\n\t\n\t    if (packet.type == 'connect' && packet.endpoint == '') {\n\t      this.onConnect();\n\t    }\n\t\n\t    if (packet.type == 'error' && packet.advice == 'reconnect') {\n\t      this.isOpen = false;\n\t    }\n\t\n\t    this.socket.onPacket(packet);\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Sets close timeout\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.setCloseTimeout = function () {\n\t    if (!this.closeTimeout) {\n\t      var self = this;\n\t\n\t      this.closeTimeout = setTimeout(function () {\n\t        self.onDisconnect();\n\t      }, this.socket.closeTimeout);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Called when transport disconnects.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onDisconnect = function () {\n\t    if (this.isOpen) this.close();\n\t    this.clearTimeouts();\n\t    this.socket.onDisconnect();\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Called when transport connects\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onConnect = function () {\n\t    this.socket.onConnect();\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Clears close timeout\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.clearCloseTimeout = function () {\n\t    if (this.closeTimeout) {\n\t      clearTimeout(this.closeTimeout);\n\t      this.closeTimeout = null;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Clear timeouts\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.clearTimeouts = function () {\n\t    this.clearCloseTimeout();\n\t\n\t    if (this.reopenTimeout) {\n\t      clearTimeout(this.reopenTimeout);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Sends a packet\n\t   *\n\t   * @param {Object} packet object.\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.packet = function (packet) {\n\t    this.send(io.parser.encodePacket(packet));\n\t  };\n\t\n\t  /**\n\t   * Send the received heartbeat message back to server. So the server\n\t   * knows we are still connected.\n\t   *\n\t   * @param {String} heartbeat Heartbeat response from the server.\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onHeartbeat = function (heartbeat) {\n\t    this.packet({ type: 'heartbeat' });\n\t  };\n\t\n\t  /**\n\t   * Called when the transport opens.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onOpen = function () {\n\t    this.isOpen = true;\n\t    this.clearCloseTimeout();\n\t    this.socket.onOpen();\n\t  };\n\t\n\t  /**\n\t   * Notifies the base when the connection with the Socket.IO server\n\t   * has been disconnected.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onClose = function () {\n\t    var self = this;\n\t\n\t    /* FIXME: reopen delay causing a infinit loop\n\t    this.reopenTimeout = setTimeout(function () {\n\t      self.open();\n\t    }, this.socket.options['reopen delay']);*/\n\t\n\t    this.isOpen = false;\n\t    this.socket.onClose();\n\t    this.onDisconnect();\n\t  };\n\t\n\t  /**\n\t   * Generates a connection url based on the Socket.IO URL Protocol.\n\t   * See <https://github.com/learnboost/socket.io-node/> for more details.\n\t   *\n\t   * @returns {String} Connection url\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.prepareUrl = function () {\n\t    var options = this.socket.options;\n\t\n\t    return this.scheme() + '://'\n\t      + options.host + ':' + options.port + '/'\n\t      + options.resource + '/' + io.protocol\n\t      + '/' + this.name + '/' + this.sessid;\n\t  };\n\t\n\t  /**\n\t   * Checks if the transport is ready to start a connection.\n\t   *\n\t   * @param {Socket} socket The socket instance that needs a transport\n\t   * @param {Function} fn The callback\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.ready = function (socket, fn) {\n\t    fn.call(this);\n\t  };\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io, global) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.Socket = Socket;\n\t\n\t  /**\n\t   * Create a new `Socket.IO client` which can establish a persistent\n\t   * connection with a Socket.IO enabled server.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  function Socket (options) {\n\t    this.options = {\n\t        port: 80\n\t      , secure: false\n\t      , document: 'document' in global ? document : false\n\t      , resource: 'socket.io'\n\t      , transports: io.transports\n\t      , 'connect timeout': 10000\n\t      , 'try multiple transports': true\n\t      , 'reconnect': true\n\t      , 'reconnection delay': 500\n\t      , 'reconnection limit': Infinity\n\t      , 'reopen delay': 3000\n\t      , 'max reconnection attempts': 10\n\t      , 'sync disconnect on unload': false\n\t      , 'auto connect': true\n\t      , 'flash policy port': 10843\n\t      , 'manualFlush': false\n\t    };\n\t\n\t    io.util.merge(this.options, options);\n\t\n\t    this.connected = false;\n\t    this.open = false;\n\t    this.connecting = false;\n\t    this.reconnecting = false;\n\t    this.namespaces = {};\n\t    this.buffer = [];\n\t    this.doBuffer = false;\n\t\n\t    if (this.options['sync disconnect on unload'] &&\n\t        (!this.isXDomain() || io.util.ua.hasCORS)) {\n\t      var self = this;\n\t      io.util.on(global, 'beforeunload', function () {\n\t        self.disconnectSync();\n\t      }, false);\n\t    }\n\t\n\t    if (this.options['auto connect']) {\n\t      this.connect();\n\t    }\n\t};\n\t\n\t  /**\n\t   * Apply EventEmitter mixin.\n\t   */\n\t\n\t  io.util.mixin(Socket, io.EventEmitter);\n\t\n\t  /**\n\t   * Returns a namespace listener/emitter for this socket\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  Socket.prototype.of = function (name) {\n\t    if (!this.namespaces[name]) {\n\t      this.namespaces[name] = new io.SocketNamespace(this, name);\n\t\n\t      if (name !== '') {\n\t        this.namespaces[name].packet({ type: 'connect' });\n\t      }\n\t    }\n\t\n\t    return this.namespaces[name];\n\t  };\n\t\n\t  /**\n\t   * Emits the given event to the Socket and all namespaces\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.publish = function () {\n\t    this.emit.apply(this, arguments);\n\t\n\t    var nsp;\n\t\n\t    for (var i in this.namespaces) {\n\t      if (this.namespaces.hasOwnProperty(i)) {\n\t        nsp = this.of(i);\n\t        nsp.$emit.apply(nsp, arguments);\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Performs the handshake\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  function empty () { };\n\t\n\t  Socket.prototype.handshake = function (fn) {\n\t    var self = this\n\t      , options = this.options;\n\t\n\t    function complete (data) {\n\t      if (data instanceof Error) {\n\t        self.connecting = false;\n\t        self.onError(data.message);\n\t      } else {\n\t        fn.apply(null, data.split(':'));\n\t      }\n\t    };\n\t\n\t    var url = [\n\t          'http' + (options.secure ? 's' : '') + ':/'\n\t        , options.host + ':' + options.port\n\t        , options.resource\n\t        , io.protocol\n\t        , io.util.query(this.options.query, 't=' + +new Date)\n\t      ].join('/');\n\t\n\t    if (this.isXDomain() && !io.util.ua.hasCORS) {\n\t      var insertAt = document.getElementsByTagName('script')[0]\n\t        , script = document.createElement('script');\n\t\n\t      script.src = url + '&jsonp=' + io.j.length;\n\t      insertAt.parentNode.insertBefore(script, insertAt);\n\t\n\t      io.j.push(function (data) {\n\t        complete(data);\n\t        script.parentNode.removeChild(script);\n\t      });\n\t    } else {\n\t      var xhr = io.util.request();\n\t\n\t      xhr.open('GET', url, true);\n\t      if (this.isXDomain()) {\n\t        xhr.withCredentials = true;\n\t      }\n\t      xhr.onreadystatechange = function () {\n\t        if (xhr.readyState == 4) {\n\t          xhr.onreadystatechange = empty;\n\t\n\t          if (xhr.status == 200) {\n\t            complete(xhr.responseText);\n\t          } else if (xhr.status == 403) {\n\t            self.onError(xhr.responseText);\n\t          } else {\n\t            self.connecting = false;            \n\t            !self.reconnecting && self.onError(xhr.responseText);\n\t          }\n\t        }\n\t      };\n\t      xhr.send(null);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Find an available transport based on the options supplied in the constructor.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.getTransport = function (override) {\n\t    var transports = override || this.transports, match;\n\t\n\t    for (var i = 0, transport; transport = transports[i]; i++) {\n\t      if (io.Transport[transport]\n\t        && io.Transport[transport].check(this)\n\t        && (!this.isXDomain() || io.Transport[transport].xdomainCheck(this))) {\n\t        return new io.Transport[transport](this, this.sessionid);\n\t      }\n\t    }\n\t\n\t    return null;\n\t  };\n\t\n\t  /**\n\t   * Connects to the server.\n\t   *\n\t   * @param {Function} [fn] Callback.\n\t   * @returns {io.Socket}\n\t   * @api public\n\t   */\n\t\n\t  Socket.prototype.connect = function (fn) {\n\t    if (this.connecting) {\n\t      return this;\n\t    }\n\t\n\t    var self = this;\n\t    self.connecting = true;\n\t    \n\t    this.handshake(function (sid, heartbeat, close, transports) {\n\t      self.sessionid = sid;\n\t      self.closeTimeout = close * 1000;\n\t      self.heartbeatTimeout = heartbeat * 1000;\n\t      if(!self.transports)\n\t          self.transports = self.origTransports = (transports ? io.util.intersect(\n\t              transports.split(',')\n\t            , self.options.transports\n\t          ) : self.options.transports);\n\t\n\t      self.setHeartbeatTimeout();\n\t\n\t      function connect (transports){\n\t        if (self.transport) self.transport.clearTimeouts();\n\t\n\t        self.transport = self.getTransport(transports);\n\t        if (!self.transport) return self.publish('connect_failed');\n\t\n\t        // once the transport is ready\n\t        self.transport.ready(self, function () {\n\t          self.connecting = true;\n\t          self.publish('connecting', self.transport.name);\n\t          self.transport.open();\n\t\n\t          if (self.options['connect timeout']) {\n\t            self.connectTimeoutTimer = setTimeout(function () {\n\t              if (!self.connected) {\n\t                self.connecting = false;\n\t\n\t                if (self.options['try multiple transports']) {\n\t                  var remaining = self.transports;\n\t\n\t                  while (remaining.length > 0 && remaining.splice(0,1)[0] !=\n\t                         self.transport.name) {}\n\t\n\t                    if (remaining.length){\n\t                      connect(remaining);\n\t                    } else {\n\t                      self.publish('connect_failed');\n\t                    }\n\t                }\n\t              }\n\t            }, self.options['connect timeout']);\n\t          }\n\t        });\n\t      }\n\t\n\t      connect(self.transports);\n\t\n\t      self.once('connect', function (){\n\t        clearTimeout(self.connectTimeoutTimer);\n\t\n\t        fn && typeof fn == 'function' && fn();\n\t      });\n\t    });\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Clears and sets a new heartbeat timeout using the value given by the\n\t   * server during the handshake.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.setHeartbeatTimeout = function () {\n\t    clearTimeout(this.heartbeatTimeoutTimer);\n\t    if(this.transport && !this.transport.heartbeats()) return;\n\t\n\t    var self = this;\n\t    this.heartbeatTimeoutTimer = setTimeout(function () {\n\t      self.transport.onClose();\n\t    }, this.heartbeatTimeout);\n\t  };\n\t\n\t  /**\n\t   * Sends a message.\n\t   *\n\t   * @param {Object} data packet.\n\t   * @returns {io.Socket}\n\t   * @api public\n\t   */\n\t\n\t  Socket.prototype.packet = function (data) {\n\t    if (this.connected && !this.doBuffer) {\n\t      this.transport.packet(data);\n\t    } else {\n\t      this.buffer.push(data);\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Sets buffer state\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.setBuffer = function (v) {\n\t    this.doBuffer = v;\n\t\n\t    if (!v && this.connected && this.buffer.length) {\n\t      if (!this.options['manualFlush']) {\n\t        this.flushBuffer();\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Flushes the buffer data over the wire.\n\t   * To be invoked manually when 'manualFlush' is set to true.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  Socket.prototype.flushBuffer = function() {\n\t    this.transport.payload(this.buffer);\n\t    this.buffer = [];\n\t  };\n\t  \n\t\n\t  /**\n\t   * Disconnect the established connect.\n\t   *\n\t   * @returns {io.Socket}\n\t   * @api public\n\t   */\n\t\n\t  Socket.prototype.disconnect = function () {\n\t    if (this.connected || this.connecting) {\n\t      if (this.open) {\n\t        this.of('').packet({ type: 'disconnect' });\n\t      }\n\t\n\t      // handle disconnection immediately\n\t      this.onDisconnect('booted');\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Disconnects the socket with a sync XHR.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.disconnectSync = function () {\n\t    // ensure disconnection\n\t    var xhr = io.util.request();\n\t    var uri = [\n\t        'http' + (this.options.secure ? 's' : '') + ':/'\n\t      , this.options.host + ':' + this.options.port\n\t      , this.options.resource\n\t      , io.protocol\n\t      , ''\n\t      , this.sessionid\n\t    ].join('/') + '/?disconnect=1';\n\t\n\t    xhr.open('GET', uri, false);\n\t    xhr.send(null);\n\t\n\t    // handle disconnection immediately\n\t    this.onDisconnect('booted');\n\t  };\n\t\n\t  /**\n\t   * Check if we need to use cross domain enabled transports. Cross domain would\n\t   * be a different port or different domain name.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.isXDomain = function () {\n\t\n\t    var port = global.location.port ||\n\t      ('https:' == global.location.protocol ? 443 : 80);\n\t\n\t    return this.options.host !== global.location.hostname \n\t      || this.options.port != port;\n\t  };\n\t\n\t  /**\n\t   * Called upon handshake.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.onConnect = function () {\n\t    if (!this.connected) {\n\t      this.connected = true;\n\t      this.connecting = false;\n\t      if (!this.doBuffer) {\n\t        // make sure to flush the buffer\n\t        this.setBuffer(false);\n\t      }\n\t      this.emit('connect');\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Called when the transport opens\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.onOpen = function () {\n\t    this.open = true;\n\t  };\n\t\n\t  /**\n\t   * Called when the transport closes.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.onClose = function () {\n\t    this.open = false;\n\t    clearTimeout(this.heartbeatTimeoutTimer);\n\t  };\n\t\n\t  /**\n\t   * Called when the transport first opens a connection\n\t   *\n\t   * @param text\n\t   */\n\t\n\t  Socket.prototype.onPacket = function (packet) {\n\t    this.of(packet.endpoint).onPacket(packet);\n\t  };\n\t\n\t  /**\n\t   * Handles an error.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.onError = function (err) {\n\t    if (err && err.advice) {\n\t      if (err.advice === 'reconnect' && (this.connected || this.connecting)) {\n\t        this.disconnect();\n\t        if (this.options.reconnect) {\n\t          this.reconnect();\n\t        }\n\t      }\n\t    }\n\t\n\t    this.publish('error', err && err.reason ? err.reason : err);\n\t  };\n\t\n\t  /**\n\t   * Called when the transport disconnects.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.onDisconnect = function (reason) {\n\t    var wasConnected = this.connected\n\t      , wasConnecting = this.connecting;\n\t\n\t    this.connected = false;\n\t    this.connecting = false;\n\t    this.open = false;\n\t\n\t    if (wasConnected || wasConnecting) {\n\t      this.transport.close();\n\t      this.transport.clearTimeouts();\n\t      if (wasConnected) {\n\t        this.publish('disconnect', reason);\n\t\n\t        if ('booted' != reason && this.options.reconnect && !this.reconnecting) {\n\t          this.reconnect();\n\t        }\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Called upon reconnection.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.reconnect = function () {\n\t    this.reconnecting = true;\n\t    this.reconnectionAttempts = 0;\n\t    this.reconnectionDelay = this.options['reconnection delay'];\n\t\n\t    var self = this\n\t      , maxAttempts = this.options['max reconnection attempts']\n\t      , tryMultiple = this.options['try multiple transports']\n\t      , limit = this.options['reconnection limit'];\n\t\n\t    function reset () {\n\t      if (self.connected) {\n\t        for (var i in self.namespaces) {\n\t          if (self.namespaces.hasOwnProperty(i) && '' !== i) {\n\t              self.namespaces[i].packet({ type: 'connect' });\n\t          }\n\t        }\n\t        self.publish('reconnect', self.transport.name, self.reconnectionAttempts);\n\t      }\n\t\n\t      clearTimeout(self.reconnectionTimer);\n\t\n\t      self.removeListener('connect_failed', maybeReconnect);\n\t      self.removeListener('connect', maybeReconnect);\n\t\n\t      self.reconnecting = false;\n\t\n\t      delete self.reconnectionAttempts;\n\t      delete self.reconnectionDelay;\n\t      delete self.reconnectionTimer;\n\t      delete self.redoTransports;\n\t\n\t      self.options['try multiple transports'] = tryMultiple;\n\t    };\n\t\n\t    function maybeReconnect () {\n\t      if (!self.reconnecting) {\n\t        return;\n\t      }\n\t\n\t      if (self.connected) {\n\t        return reset();\n\t      };\n\t\n\t      if (self.connecting && self.reconnecting) {\n\t        return self.reconnectionTimer = setTimeout(maybeReconnect, 1000);\n\t      }\n\t\n\t      if (self.reconnectionAttempts++ >= maxAttempts) {\n\t        if (!self.redoTransports) {\n\t          self.on('connect_failed', maybeReconnect);\n\t          self.options['try multiple transports'] = true;\n\t          self.transports = self.origTransports;\n\t          self.transport = self.getTransport();\n\t          self.redoTransports = true;\n\t          self.connect();\n\t        } else {\n\t          self.publish('reconnect_failed');\n\t          reset();\n\t        }\n\t      } else {\n\t        if (self.reconnectionDelay < limit) {\n\t          self.reconnectionDelay *= 2; // exponential back off\n\t        }\n\t\n\t        self.connect();\n\t        self.publish('reconnecting', self.reconnectionDelay, self.reconnectionAttempts);\n\t        self.reconnectionTimer = setTimeout(maybeReconnect, self.reconnectionDelay);\n\t      }\n\t    };\n\t\n\t    this.options['try multiple transports'] = false;\n\t    this.reconnectionTimer = setTimeout(maybeReconnect, this.reconnectionDelay);\n\t\n\t    this.on('connect', maybeReconnect);\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.SocketNamespace = SocketNamespace;\n\t\n\t  /**\n\t   * Socket namespace constructor.\n\t   *\n\t   * @constructor\n\t   * @api public\n\t   */\n\t\n\t  function SocketNamespace (socket, name) {\n\t    this.socket = socket;\n\t    this.name = name || '';\n\t    this.flags = {};\n\t    this.json = new Flag(this, 'json');\n\t    this.ackPackets = 0;\n\t    this.acks = {};\n\t  };\n\t\n\t  /**\n\t   * Apply EventEmitter mixin.\n\t   */\n\t\n\t  io.util.mixin(SocketNamespace, io.EventEmitter);\n\t\n\t  /**\n\t   * Copies emit since we override it\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  SocketNamespace.prototype.$emit = io.EventEmitter.prototype.emit;\n\t\n\t  /**\n\t   * Creates a new namespace, by proxying the request to the socket. This\n\t   * allows us to use the synax as we do on the server.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  SocketNamespace.prototype.of = function () {\n\t    return this.socket.of.apply(this.socket, arguments);\n\t  };\n\t\n\t  /**\n\t   * Sends a packet.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  SocketNamespace.prototype.packet = function (packet) {\n\t    packet.endpoint = this.name;\n\t    this.socket.packet(packet);\n\t    this.flags = {};\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Sends a message\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  SocketNamespace.prototype.send = function (data, fn) {\n\t    var packet = {\n\t        type: this.flags.json ? 'json' : 'message'\n\t      , data: data\n\t    };\n\t\n\t    if ('function' == typeof fn) {\n\t      packet.id = ++this.ackPackets;\n\t      packet.ack = true;\n\t      this.acks[packet.id] = fn;\n\t    }\n\t\n\t    return this.packet(packet);\n\t  };\n\t\n\t  /**\n\t   * Emits an event\n\t   *\n\t   * @api public\n\t   */\n\t  \n\t  SocketNamespace.prototype.emit = function (name) {\n\t    var args = Array.prototype.slice.call(arguments, 1)\n\t      , lastArg = args[args.length - 1]\n\t      , packet = {\n\t            type: 'event'\n\t          , name: name\n\t        };\n\t\n\t    if ('function' == typeof lastArg) {\n\t      packet.id = ++this.ackPackets;\n\t      packet.ack = 'data';\n\t      this.acks[packet.id] = lastArg;\n\t      args = args.slice(0, args.length - 1);\n\t    }\n\t\n\t    packet.args = args;\n\t\n\t    return this.packet(packet);\n\t  };\n\t\n\t  /**\n\t   * Disconnects the namespace\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  SocketNamespace.prototype.disconnect = function () {\n\t    if (this.name === '') {\n\t      this.socket.disconnect();\n\t    } else {\n\t      this.packet({ type: 'disconnect' });\n\t      this.$emit('disconnect');\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Handles a packet\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  SocketNamespace.prototype.onPacket = function (packet) {\n\t    var self = this;\n\t\n\t    function ack () {\n\t      self.packet({\n\t          type: 'ack'\n\t        , args: io.util.toArray(arguments)\n\t        , ackId: packet.id\n\t      });\n\t    };\n\t\n\t    switch (packet.type) {\n\t      case 'connect':\n\t        this.$emit('connect');\n\t        break;\n\t\n\t      case 'disconnect':\n\t        if (this.name === '') {\n\t          this.socket.onDisconnect(packet.reason || 'booted');\n\t        } else {\n\t          this.$emit('disconnect', packet.reason);\n\t        }\n\t        break;\n\t\n\t      case 'message':\n\t      case 'json':\n\t        var params = ['message', packet.data];\n\t\n\t        if (packet.ack == 'data') {\n\t          params.push(ack);\n\t        } else if (packet.ack) {\n\t          this.packet({ type: 'ack', ackId: packet.id });\n\t        }\n\t\n\t        this.$emit.apply(this, params);\n\t        break;\n\t\n\t      case 'event':\n\t        var params = [packet.name].concat(packet.args);\n\t\n\t        if (packet.ack == 'data')\n\t          params.push(ack);\n\t\n\t        this.$emit.apply(this, params);\n\t        break;\n\t\n\t      case 'ack':\n\t        if (this.acks[packet.ackId]) {\n\t          this.acks[packet.ackId].apply(this, packet.args);\n\t          delete this.acks[packet.ackId];\n\t        }\n\t        break;\n\t\n\t      case 'error':\n\t        if (packet.advice){\n\t          this.socket.onError(packet);\n\t        } else {\n\t          if (packet.reason == 'unauthorized') {\n\t            this.$emit('connect_failed', packet.reason);\n\t          } else {\n\t            this.$emit('error', packet.reason);\n\t          }\n\t        }\n\t        break;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Flag interface.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  function Flag (nsp, name) {\n\t    this.namespace = nsp;\n\t    this.name = name;\n\t  };\n\t\n\t  /**\n\t   * Send a message\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  Flag.prototype.send = function () {\n\t    this.namespace.flags[this.name] = true;\n\t    this.namespace.send.apply(this.namespace, arguments);\n\t  };\n\t\n\t  /**\n\t   * Emit an event\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  Flag.prototype.emit = function () {\n\t    this.namespace.flags[this.name] = true;\n\t    this.namespace.emit.apply(this.namespace, arguments);\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io, global) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.websocket = WS;\n\t\n\t  /**\n\t   * The WebSocket transport uses the HTML5 WebSocket API to establish an\n\t   * persistent connection with the Socket.IO server. This transport will also\n\t   * be inherited by the FlashSocket fallback as it provides a API compatible\n\t   * polyfill for the WebSockets.\n\t   *\n\t   * @constructor\n\t   * @extends {io.Transport}\n\t   * @api public\n\t   */\n\t\n\t  function WS (socket) {\n\t    io.Transport.apply(this, arguments);\n\t  };\n\t\n\t  /**\n\t   * Inherits from Transport.\n\t   */\n\t\n\t  io.util.inherit(WS, io.Transport);\n\t\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  WS.prototype.name = 'websocket';\n\t\n\t  /**\n\t   * Initializes a new `WebSocket` connection with the Socket.IO server. We attach\n\t   * all the appropriate listeners to handle the responses from the server.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  WS.prototype.open = function () {\n\t    var query = io.util.query(this.socket.options.query)\n\t      , self = this\n\t      , Socket\n\t\n\t\n\t    if (!Socket) {\n\t      Socket = global.MozWebSocket || global.WebSocket;\n\t    }\n\t\n\t    this.websocket = new Socket(this.prepareUrl() + query);\n\t\n\t    this.websocket.onopen = function () {\n\t      self.onOpen();\n\t      self.socket.setBuffer(false);\n\t    };\n\t    this.websocket.onmessage = function (ev) {\n\t      self.onData(ev.data);\n\t    };\n\t    this.websocket.onclose = function () {\n\t      self.onClose();\n\t      self.socket.setBuffer(true);\n\t    };\n\t    this.websocket.onerror = function (e) {\n\t      self.onError(e);\n\t    };\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Send a message to the Socket.IO server. The message will automatically be\n\t   * encoded in the correct message format.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  // Do to a bug in the current IDevices browser, we need to wrap the send in a \n\t  // setTimeout, when they resume from sleeping the browser will crash if \n\t  // we don't allow the browser time to detect the socket has been closed\n\t  if (io.util.ua.iDevice) {\n\t    WS.prototype.send = function (data) {\n\t      var self = this;\n\t      setTimeout(function() {\n\t         self.websocket.send(data);\n\t      },0);\n\t      return this;\n\t    };\n\t  } else {\n\t    WS.prototype.send = function (data) {\n\t      this.websocket.send(data);\n\t      return this;\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Payload\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  WS.prototype.payload = function (arr) {\n\t    for (var i = 0, l = arr.length; i < l; i++) {\n\t      this.packet(arr[i]);\n\t    }\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Disconnect the established `WebSocket` connection.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  WS.prototype.close = function () {\n\t    this.websocket.close();\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Handle the errors that `WebSocket` might be giving when we\n\t   * are attempting to connect or send messages.\n\t   *\n\t   * @param {Error} e The error.\n\t   * @api private\n\t   */\n\t\n\t  WS.prototype.onError = function (e) {\n\t    this.socket.onError(e);\n\t  };\n\t\n\t  /**\n\t   * Returns the appropriate scheme for the URI generation.\n\t   *\n\t   * @api private\n\t   */\n\t  WS.prototype.scheme = function () {\n\t    return this.socket.options.secure ? 'wss' : 'ws';\n\t  };\n\t\n\t  /**\n\t   * Checks if the browser has support for native `WebSockets` and that\n\t   * it's not the polyfill created for the FlashSocket transport.\n\t   *\n\t   * @return {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  WS.check = function () {\n\t    return ('WebSocket' in global && !('__addTask' in WebSocket))\n\t          || 'MozWebSocket' in global;\n\t  };\n\t\n\t  /**\n\t   * Check if the `WebSocket` transport support cross domain communications.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  WS.xdomainCheck = function () {\n\t    return true;\n\t  };\n\t\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.transports.push('websocket');\n\t\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.flashsocket = Flashsocket;\n\t\n\t  /**\n\t   * The FlashSocket transport. This is a API wrapper for the HTML5 WebSocket\n\t   * specification. It uses a .swf file to communicate with the server. If you want\n\t   * to serve the .swf file from a other server than where the Socket.IO script is\n\t   * coming from you need to use the insecure version of the .swf. More information\n\t   * about this can be found on the github page.\n\t   *\n\t   * @constructor\n\t   * @extends {io.Transport.websocket}\n\t   * @api public\n\t   */\n\t\n\t  function Flashsocket () {\n\t    io.Transport.websocket.apply(this, arguments);\n\t  };\n\t\n\t  /**\n\t   * Inherits from Transport.\n\t   */\n\t\n\t  io.util.inherit(Flashsocket, io.Transport.websocket);\n\t\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.prototype.name = 'flashsocket';\n\t\n\t  /**\n\t   * Disconnect the established `FlashSocket` connection. This is done by adding a \n\t   * new task to the FlashSocket. The rest will be handled off by the `WebSocket` \n\t   * transport.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.prototype.open = function () {\n\t    var self = this\n\t      , args = arguments;\n\t\n\t    WebSocket.__addTask(function () {\n\t      io.Transport.websocket.prototype.open.apply(self, args);\n\t    });\n\t    return this;\n\t  };\n\t  \n\t  /**\n\t   * Sends a message to the Socket.IO server. This is done by adding a new\n\t   * task to the FlashSocket. The rest will be handled off by the `WebSocket` \n\t   * transport.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.prototype.send = function () {\n\t    var self = this, args = arguments;\n\t    WebSocket.__addTask(function () {\n\t      io.Transport.websocket.prototype.send.apply(self, args);\n\t    });\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Disconnects the established `FlashSocket` connection.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.prototype.close = function () {\n\t    WebSocket.__tasks.length = 0;\n\t    io.Transport.websocket.prototype.close.call(this);\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * The WebSocket fall back needs to append the flash container to the body\n\t   * element, so we need to make sure we have access to it. Or defer the call\n\t   * until we are sure there is a body element.\n\t   *\n\t   * @param {Socket} socket The socket instance that needs a transport\n\t   * @param {Function} fn The callback\n\t   * @api private\n\t   */\n\t\n\t  Flashsocket.prototype.ready = function (socket, fn) {\n\t    function init () {\n\t      var options = socket.options\n\t        , port = options['flash policy port']\n\t        , path = [\n\t              'http' + (options.secure ? 's' : '') + ':/'\n\t            , options.host + ':' + options.port\n\t            , options.resource\n\t            , 'static/flashsocket'\n\t            , 'WebSocketMain' + (socket.isXDomain() ? 'Insecure' : '') + '.swf'\n\t          ];\n\t\n\t      // Only start downloading the swf file when the checked that this browser\n\t      // actually supports it\n\t      if (!Flashsocket.loaded) {\n\t        if (typeof WEB_SOCKET_SWF_LOCATION === 'undefined') {\n\t          // Set the correct file based on the XDomain settings\n\t          WEB_SOCKET_SWF_LOCATION = path.join('/');\n\t        }\n\t\n\t        if (port !== 843) {\n\t          WebSocket.loadFlashPolicyFile('xmlsocket://' + options.host + ':' + port);\n\t        }\n\t\n\t        WebSocket.__initialize();\n\t        Flashsocket.loaded = true;\n\t      }\n\t\n\t      fn.call(self);\n\t    }\n\t\n\t    var self = this;\n\t    if (document.body) return init();\n\t\n\t    io.util.load(init);\n\t  };\n\t\n\t  /**\n\t   * Check if the FlashSocket transport is supported as it requires that the Adobe\n\t   * Flash Player plug-in version `10.0.0` or greater is installed. And also check if\n\t   * the polyfill is correctly loaded.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.check = function () {\n\t    if (\n\t        typeof WebSocket == 'undefined'\n\t      || !('__initialize' in WebSocket) || !swfobject\n\t    ) return false;\n\t\n\t    return swfobject.getFlashPlayerVersion().major >= 10;\n\t  };\n\t\n\t  /**\n\t   * Check if the FlashSocket transport can be used as cross domain / cross origin \n\t   * transport. Because we can't see which type (secure or insecure) of .swf is used\n\t   * we will just return true.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.xdomainCheck = function () {\n\t    return true;\n\t  };\n\t\n\t  /**\n\t   * Disable AUTO_INITIALIZATION\n\t   */\n\t\n\t  if (typeof window != 'undefined') {\n\t    WEB_SOCKET_DISABLE_AUTO_INITIALIZATION = true;\n\t  }\n\t\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.transports.push('flashsocket');\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t/*\tSWFObject v2.2 <http://code.google.com/p/swfobject/> \n\t\tis released under the MIT License <http://www.opensource.org/licenses/mit-license.php> \n\t*/\n\tif ('undefined' != typeof window) {\n\tvar swfobject=function(){var D=\"undefined\",r=\"object\",S=\"Shockwave Flash\",W=\"ShockwaveFlash.ShockwaveFlash\",q=\"application/x-shockwave-flash\",R=\"SWFObjectExprInst\",x=\"onreadystatechange\",O=window,j=document,t=navigator,T=false,U=[h],o=[],N=[],I=[],l,Q,E,B,J=false,a=false,n,G,m=true,M=function(){var aa=typeof j.getElementById!=D&&typeof j.getElementsByTagName!=D&&typeof j.createElement!=D,ah=t.userAgent.toLowerCase(),Y=t.platform.toLowerCase(),ae=Y?/win/.test(Y):/win/.test(ah),ac=Y?/mac/.test(Y):/mac/.test(ah),af=/webkit/.test(ah)?parseFloat(ah.replace(/^.*webkit\\/(\\d+(\\.\\d+)?).*$/,\"$1\")):false,X=!+\"\\v1\",ag=[0,0,0],ab=null;if(typeof t.plugins!=D&&typeof t.plugins[S]==r){ab=t.plugins[S].description;if(ab&&!(typeof t.mimeTypes!=D&&t.mimeTypes[q]&&!t.mimeTypes[q].enabledPlugin)){T=true;X=false;ab=ab.replace(/^.*\\s+(\\S+\\s+\\S+$)/,\"$1\");ag[0]=parseInt(ab.replace(/^(.*)\\..*$/,\"$1\"),10);ag[1]=parseInt(ab.replace(/^.*\\.(.*)\\s.*$/,\"$1\"),10);ag[2]=/[a-zA-Z]/.test(ab)?parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/,\"$1\"),10):0}}else{if(typeof O[(['Active'].concat('Object').join('X'))]!=D){try{var ad=new window[(['Active'].concat('Object').join('X'))](W);if(ad){ab=ad.GetVariable(\"$version\");if(ab){X=true;ab=ab.split(\" \")[1].split(\",\");ag=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}}catch(Z){}}}return{w3:aa,pv:ag,wk:af,ie:X,win:ae,mac:ac}}(),k=function(){if(!M.w3){return}if((typeof j.readyState!=D&&j.readyState==\"complete\")||(typeof j.readyState==D&&(j.getElementsByTagName(\"body\")[0]||j.body))){f()}if(!J){if(typeof j.addEventListener!=D){j.addEventListener(\"DOMContentLoaded\",f,false)}if(M.ie&&M.win){j.attachEvent(x,function(){if(j.readyState==\"complete\"){j.detachEvent(x,arguments.callee);f()}});if(O==top){(function(){if(J){return}try{j.documentElement.doScroll(\"left\")}catch(X){setTimeout(arguments.callee,0);return}f()})()}}if(M.wk){(function(){if(J){return}if(!/loaded|complete/.test(j.readyState)){setTimeout(arguments.callee,0);return}f()})()}s(f)}}();function f(){if(J){return}try{var Z=j.getElementsByTagName(\"body\")[0].appendChild(C(\"span\"));Z.parentNode.removeChild(Z)}catch(aa){return}J=true;var X=U.length;for(var Y=0;Y<X;Y++){U[Y]()}}function K(X){if(J){X()}else{U[U.length]=X}}function s(Y){if(typeof O.addEventListener!=D){O.addEventListener(\"load\",Y,false)}else{if(typeof j.addEventListener!=D){j.addEventListener(\"load\",Y,false)}else{if(typeof O.attachEvent!=D){i(O,\"onload\",Y)}else{if(typeof O.onload==\"function\"){var X=O.onload;O.onload=function(){X();Y()}}else{O.onload=Y}}}}}function h(){if(T){V()}else{H()}}function V(){var X=j.getElementsByTagName(\"body\")[0];var aa=C(r);aa.setAttribute(\"type\",q);var Z=X.appendChild(aa);if(Z){var Y=0;(function(){if(typeof Z.GetVariable!=D){var ab=Z.GetVariable(\"$version\");if(ab){ab=ab.split(\" \")[1].split(\",\");M.pv=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}else{if(Y<10){Y++;setTimeout(arguments.callee,10);return}}X.removeChild(aa);Z=null;H()})()}else{H()}}function H(){var ag=o.length;if(ag>0){for(var af=0;af<ag;af++){var Y=o[af].id;var ab=o[af].callbackFn;var aa={success:false,id:Y};if(M.pv[0]>0){var ae=c(Y);if(ae){if(F(o[af].swfVersion)&&!(M.wk&&M.wk<312)){w(Y,true);if(ab){aa.success=true;aa.ref=z(Y);ab(aa)}}else{if(o[af].expressInstall&&A()){var ai={};ai.data=o[af].expressInstall;ai.width=ae.getAttribute(\"width\")||\"0\";ai.height=ae.getAttribute(\"height\")||\"0\";if(ae.getAttribute(\"class\")){ai.styleclass=ae.getAttribute(\"class\")}if(ae.getAttribute(\"align\")){ai.align=ae.getAttribute(\"align\")}var ah={};var X=ae.getElementsByTagName(\"param\");var ac=X.length;for(var ad=0;ad<ac;ad++){if(X[ad].getAttribute(\"name\").toLowerCase()!=\"movie\"){ah[X[ad].getAttribute(\"name\")]=X[ad].getAttribute(\"value\")}}P(ai,ah,Y,ab)}else{p(ae);if(ab){ab(aa)}}}}}else{w(Y,true);if(ab){var Z=z(Y);if(Z&&typeof Z.SetVariable!=D){aa.success=true;aa.ref=Z}ab(aa)}}}}}function z(aa){var X=null;var Y=c(aa);if(Y&&Y.nodeName==\"OBJECT\"){if(typeof Y.SetVariable!=D){X=Y}else{var Z=Y.getElementsByTagName(r)[0];if(Z){X=Z}}}return X}function A(){return !a&&F(\"6.0.65\")&&(M.win||M.mac)&&!(M.wk&&M.wk<312)}function P(aa,ab,X,Z){a=true;E=Z||null;B={success:false,id:X};var ae=c(X);if(ae){if(ae.nodeName==\"OBJECT\"){l=g(ae);Q=null}else{l=ae;Q=X}aa.id=R;if(typeof aa.width==D||(!/%$/.test(aa.width)&&parseInt(aa.width,10)<310)){aa.width=\"310\"}if(typeof aa.height==D||(!/%$/.test(aa.height)&&parseInt(aa.height,10)<137)){aa.height=\"137\"}j.title=j.title.slice(0,47)+\" - Flash Player Installation\";var ad=M.ie&&M.win?(['Active'].concat('').join('X')):\"PlugIn\",ac=\"MMredirectURL=\"+O.location.toString().replace(/&/g,\"%26\")+\"&MMplayerType=\"+ad+\"&MMdoctitle=\"+j.title;if(typeof ab.flashvars!=D){ab.flashvars+=\"&\"+ac}else{ab.flashvars=ac}if(M.ie&&M.win&&ae.readyState!=4){var Y=C(\"div\");X+=\"SWFObjectNew\";Y.setAttribute(\"id\",X);ae.parentNode.insertBefore(Y,ae);ae.style.display=\"none\";(function(){if(ae.readyState==4){ae.parentNode.removeChild(ae)}else{setTimeout(arguments.callee,10)}})()}u(aa,ab,X)}}function p(Y){if(M.ie&&M.win&&Y.readyState!=4){var X=C(\"div\");Y.parentNode.insertBefore(X,Y);X.parentNode.replaceChild(g(Y),X);Y.style.display=\"none\";(function(){if(Y.readyState==4){Y.parentNode.removeChild(Y)}else{setTimeout(arguments.callee,10)}})()}else{Y.parentNode.replaceChild(g(Y),Y)}}function g(ab){var aa=C(\"div\");if(M.win&&M.ie){aa.innerHTML=ab.innerHTML}else{var Y=ab.getElementsByTagName(r)[0];if(Y){var ad=Y.childNodes;if(ad){var X=ad.length;for(var Z=0;Z<X;Z++){if(!(ad[Z].nodeType==1&&ad[Z].nodeName==\"PARAM\")&&!(ad[Z].nodeType==8)){aa.appendChild(ad[Z].cloneNode(true))}}}}}return aa}function u(ai,ag,Y){var X,aa=c(Y);if(M.wk&&M.wk<312){return X}if(aa){if(typeof ai.id==D){ai.id=Y}if(M.ie&&M.win){var ah=\"\";for(var ae in ai){if(ai[ae]!=Object.prototype[ae]){if(ae.toLowerCase()==\"data\"){ag.movie=ai[ae]}else{if(ae.toLowerCase()==\"styleclass\"){ah+=' class=\"'+ai[ae]+'\"'}else{if(ae.toLowerCase()!=\"classid\"){ah+=\" \"+ae+'=\"'+ai[ae]+'\"'}}}}}var af=\"\";for(var ad in ag){if(ag[ad]!=Object.prototype[ad]){af+='<param name=\"'+ad+'\" value=\"'+ag[ad]+'\" />'}}aa.outerHTML='<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"'+ah+\">\"+af+\"</object>\";N[N.length]=ai.id;X=c(ai.id)}else{var Z=C(r);Z.setAttribute(\"type\",q);for(var ac in ai){if(ai[ac]!=Object.prototype[ac]){if(ac.toLowerCase()==\"styleclass\"){Z.setAttribute(\"class\",ai[ac])}else{if(ac.toLowerCase()!=\"classid\"){Z.setAttribute(ac,ai[ac])}}}}for(var ab in ag){if(ag[ab]!=Object.prototype[ab]&&ab.toLowerCase()!=\"movie\"){e(Z,ab,ag[ab])}}aa.parentNode.replaceChild(Z,aa);X=Z}}return X}function e(Z,X,Y){var aa=C(\"param\");aa.setAttribute(\"name\",X);aa.setAttribute(\"value\",Y);Z.appendChild(aa)}function y(Y){var X=c(Y);if(X&&X.nodeName==\"OBJECT\"){if(M.ie&&M.win){X.style.display=\"none\";(function(){if(X.readyState==4){b(Y)}else{setTimeout(arguments.callee,10)}})()}else{X.parentNode.removeChild(X)}}}function b(Z){var Y=c(Z);if(Y){for(var X in Y){if(typeof Y[X]==\"function\"){Y[X]=null}}Y.parentNode.removeChild(Y)}}function c(Z){var X=null;try{X=j.getElementById(Z)}catch(Y){}return X}function C(X){return j.createElement(X)}function i(Z,X,Y){Z.attachEvent(X,Y);I[I.length]=[Z,X,Y]}function F(Z){var Y=M.pv,X=Z.split(\".\");X[0]=parseInt(X[0],10);X[1]=parseInt(X[1],10)||0;X[2]=parseInt(X[2],10)||0;return(Y[0]>X[0]||(Y[0]==X[0]&&Y[1]>X[1])||(Y[0]==X[0]&&Y[1]==X[1]&&Y[2]>=X[2]))?true:false}function v(ac,Y,ad,ab){if(M.ie&&M.mac){return}var aa=j.getElementsByTagName(\"head\")[0];if(!aa){return}var X=(ad&&typeof ad==\"string\")?ad:\"screen\";if(ab){n=null;G=null}if(!n||G!=X){var Z=C(\"style\");Z.setAttribute(\"type\",\"text/css\");Z.setAttribute(\"media\",X);n=aa.appendChild(Z);if(M.ie&&M.win&&typeof j.styleSheets!=D&&j.styleSheets.length>0){n=j.styleSheets[j.styleSheets.length-1]}G=X}if(M.ie&&M.win){if(n&&typeof n.addRule==r){n.addRule(ac,Y)}}else{if(n&&typeof j.createTextNode!=D){n.appendChild(j.createTextNode(ac+\" {\"+Y+\"}\"))}}}function w(Z,X){if(!m){return}var Y=X?\"visible\":\"hidden\";if(J&&c(Z)){c(Z).style.visibility=Y}else{v(\"#\"+Z,\"visibility:\"+Y)}}function L(Y){var Z=/[\\\\\\\"<>\\.;]/;var X=Z.exec(Y)!=null;return X&&typeof encodeURIComponent!=D?encodeURIComponent(Y):Y}var d=function(){if(M.ie&&M.win){window.attachEvent(\"onunload\",function(){var ac=I.length;for(var ab=0;ab<ac;ab++){I[ab][0].detachEvent(I[ab][1],I[ab][2])}var Z=N.length;for(var aa=0;aa<Z;aa++){y(N[aa])}for(var Y in M){M[Y]=null}M=null;for(var X in swfobject){swfobject[X]=null}swfobject=null})}}();return{registerObject:function(ab,X,aa,Z){if(M.w3&&ab&&X){var Y={};Y.id=ab;Y.swfVersion=X;Y.expressInstall=aa;Y.callbackFn=Z;o[o.length]=Y;w(ab,false)}else{if(Z){Z({success:false,id:ab})}}},getObjectById:function(X){if(M.w3){return z(X)}},embedSWF:function(ab,ah,ae,ag,Y,aa,Z,ad,af,ac){var X={success:false,id:ah};if(M.w3&&!(M.wk&&M.wk<312)&&ab&&ah&&ae&&ag&&Y){w(ah,false);K(function(){ae+=\"\";ag+=\"\";var aj={};if(af&&typeof af===r){for(var al in af){aj[al]=af[al]}}aj.data=ab;aj.width=ae;aj.height=ag;var am={};if(ad&&typeof ad===r){for(var ak in ad){am[ak]=ad[ak]}}if(Z&&typeof Z===r){for(var ai in Z){if(typeof am.flashvars!=D){am.flashvars+=\"&\"+ai+\"=\"+Z[ai]}else{am.flashvars=ai+\"=\"+Z[ai]}}}if(F(Y)){var an=u(aj,am,ah);if(aj.id==ah){w(ah,true)}X.success=true;X.ref=an}else{if(aa&&A()){aj.data=aa;P(aj,am,ah,ac);return}else{w(ah,true)}}if(ac){ac(X)}})}else{if(ac){ac(X)}}},switchOffAutoHideShow:function(){m=false},ua:M,getFlashPlayerVersion:function(){return{major:M.pv[0],minor:M.pv[1],release:M.pv[2]}},hasFlashPlayerVersion:F,createSWF:function(Z,Y,X){if(M.w3){return u(Z,Y,X)}else{return undefined}},showExpressInstall:function(Z,aa,X,Y){if(M.w3&&A()){P(Z,aa,X,Y)}},removeSWF:function(X){if(M.w3){y(X)}},createCSS:function(aa,Z,Y,X){if(M.w3){v(aa,Z,Y,X)}},addDomLoadEvent:K,addLoadEvent:s,getQueryParamValue:function(aa){var Z=j.location.search||j.location.hash;if(Z){if(/\\?/.test(Z)){Z=Z.split(\"?\")[1]}if(aa==null){return L(Z)}var Y=Z.split(\"&\");for(var X=0;X<Y.length;X++){if(Y[X].substring(0,Y[X].indexOf(\"=\"))==aa){return L(Y[X].substring((Y[X].indexOf(\"=\")+1)))}}}return\"\"},expressInstallCallback:function(){if(a){var X=c(R);if(X&&l){X.parentNode.replaceChild(l,X);if(Q){w(Q,true);if(M.ie&&M.win){l.style.display=\"block\"}}if(E){E(B)}}a=false}}}}();\n\t}\n\t// Copyright: Hiroshi Ichikawa <http://gimite.net/en/>\n\t// License: New BSD License\n\t// Reference: http://dev.w3.org/html5/websockets/\n\t// Reference: http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol\n\t\n\t(function() {\n\t  \n\t  if ('undefined' == typeof window || window.WebSocket) return;\n\t\n\t  var console = window.console;\n\t  if (!console || !console.log || !console.error) {\n\t    console = {log: function(){ }, error: function(){ }};\n\t  }\n\t  \n\t  if (!swfobject.hasFlashPlayerVersion(\"10.0.0\")) {\n\t    console.error(\"Flash Player >= 10.0.0 is required.\");\n\t    return;\n\t  }\n\t  if (location.protocol == \"file:\") {\n\t    console.error(\n\t      \"WARNING: web-socket-js doesn't work in file:///... URL \" +\n\t      \"unless you set Flash Security Settings properly. \" +\n\t      \"Open the page via Web server i.e. http://...\");\n\t  }\n\t\n\t  /**\n\t   * This class represents a faux web socket.\n\t   * @param {string} url\n\t   * @param {array or string} protocols\n\t   * @param {string} proxyHost\n\t   * @param {int} proxyPort\n\t   * @param {string} headers\n\t   */\n\t  WebSocket = function(url, protocols, proxyHost, proxyPort, headers) {\n\t    var self = this;\n\t    self.__id = WebSocket.__nextId++;\n\t    WebSocket.__instances[self.__id] = self;\n\t    self.readyState = WebSocket.CONNECTING;\n\t    self.bufferedAmount = 0;\n\t    self.__events = {};\n\t    if (!protocols) {\n\t      protocols = [];\n\t    } else if (typeof protocols == \"string\") {\n\t      protocols = [protocols];\n\t    }\n\t    // Uses setTimeout() to make sure __createFlash() runs after the caller sets ws.onopen etc.\n\t    // Otherwise, when onopen fires immediately, onopen is called before it is set.\n\t    setTimeout(function() {\n\t      WebSocket.__addTask(function() {\n\t        WebSocket.__flash.create(\n\t            self.__id, url, protocols, proxyHost || null, proxyPort || 0, headers || null);\n\t      });\n\t    }, 0);\n\t  };\n\t\n\t  /**\n\t   * Send data to the web socket.\n\t   * @param {string} data  The data to send to the socket.\n\t   * @return {boolean}  True for success, false for failure.\n\t   */\n\t  WebSocket.prototype.send = function(data) {\n\t    if (this.readyState == WebSocket.CONNECTING) {\n\t      throw \"INVALID_STATE_ERR: Web Socket connection has not been established\";\n\t    }\n\t    // We use encodeURIComponent() here, because FABridge doesn't work if\n\t    // the argument includes some characters. We don't use escape() here\n\t    // because of this:\n\t    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Functions#escape_and_unescape_Functions\n\t    // But it looks decodeURIComponent(encodeURIComponent(s)) doesn't\n\t    // preserve all Unicode characters either e.g. \"\\uffff\" in Firefox.\n\t    // Note by wtritch: Hopefully this will not be necessary using ExternalInterface.  Will require\n\t    // additional testing.\n\t    var result = WebSocket.__flash.send(this.__id, encodeURIComponent(data));\n\t    if (result < 0) { // success\n\t      return true;\n\t    } else {\n\t      this.bufferedAmount += result;\n\t      return false;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Close this web socket gracefully.\n\t   */\n\t  WebSocket.prototype.close = function() {\n\t    if (this.readyState == WebSocket.CLOSED || this.readyState == WebSocket.CLOSING) {\n\t      return;\n\t    }\n\t    this.readyState = WebSocket.CLOSING;\n\t    WebSocket.__flash.close(this.__id);\n\t  };\n\t\n\t  /**\n\t   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n\t   *\n\t   * @param {string} type\n\t   * @param {function} listener\n\t   * @param {boolean} useCapture\n\t   * @return void\n\t   */\n\t  WebSocket.prototype.addEventListener = function(type, listener, useCapture) {\n\t    if (!(type in this.__events)) {\n\t      this.__events[type] = [];\n\t    }\n\t    this.__events[type].push(listener);\n\t  };\n\t\n\t  /**\n\t   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n\t   *\n\t   * @param {string} type\n\t   * @param {function} listener\n\t   * @param {boolean} useCapture\n\t   * @return void\n\t   */\n\t  WebSocket.prototype.removeEventListener = function(type, listener, useCapture) {\n\t    if (!(type in this.__events)) return;\n\t    var events = this.__events[type];\n\t    for (var i = events.length - 1; i >= 0; --i) {\n\t      if (events[i] === listener) {\n\t        events.splice(i, 1);\n\t        break;\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n\t   *\n\t   * @param {Event} event\n\t   * @return void\n\t   */\n\t  WebSocket.prototype.dispatchEvent = function(event) {\n\t    var events = this.__events[event.type] || [];\n\t    for (var i = 0; i < events.length; ++i) {\n\t      events[i](event);\n\t    }\n\t    var handler = this[\"on\" + event.type];\n\t    if (handler) handler(event);\n\t  };\n\t\n\t  /**\n\t   * Handles an event from Flash.\n\t   * @param {Object} flashEvent\n\t   */\n\t  WebSocket.prototype.__handleEvent = function(flashEvent) {\n\t    if (\"readyState\" in flashEvent) {\n\t      this.readyState = flashEvent.readyState;\n\t    }\n\t    if (\"protocol\" in flashEvent) {\n\t      this.protocol = flashEvent.protocol;\n\t    }\n\t    \n\t    var jsEvent;\n\t    if (flashEvent.type == \"open\" || flashEvent.type == \"error\") {\n\t      jsEvent = this.__createSimpleEvent(flashEvent.type);\n\t    } else if (flashEvent.type == \"close\") {\n\t      // TODO implement jsEvent.wasClean\n\t      jsEvent = this.__createSimpleEvent(\"close\");\n\t    } else if (flashEvent.type == \"message\") {\n\t      var data = decodeURIComponent(flashEvent.message);\n\t      jsEvent = this.__createMessageEvent(\"message\", data);\n\t    } else {\n\t      throw \"unknown event type: \" + flashEvent.type;\n\t    }\n\t    \n\t    this.dispatchEvent(jsEvent);\n\t  };\n\t  \n\t  WebSocket.prototype.__createSimpleEvent = function(type) {\n\t    if (document.createEvent && window.Event) {\n\t      var event = document.createEvent(\"Event\");\n\t      event.initEvent(type, false, false);\n\t      return event;\n\t    } else {\n\t      return {type: type, bubbles: false, cancelable: false};\n\t    }\n\t  };\n\t  \n\t  WebSocket.prototype.__createMessageEvent = function(type, data) {\n\t    if (document.createEvent && window.MessageEvent && !window.opera) {\n\t      var event = document.createEvent(\"MessageEvent\");\n\t      event.initMessageEvent(\"message\", false, false, data, null, null, window, null);\n\t      return event;\n\t    } else {\n\t      // IE and Opera, the latter one truncates the data parameter after any 0x00 bytes.\n\t      return {type: type, data: data, bubbles: false, cancelable: false};\n\t    }\n\t  };\n\t  \n\t  /**\n\t   * Define the WebSocket readyState enumeration.\n\t   */\n\t  WebSocket.CONNECTING = 0;\n\t  WebSocket.OPEN = 1;\n\t  WebSocket.CLOSING = 2;\n\t  WebSocket.CLOSED = 3;\n\t\n\t  WebSocket.__flash = null;\n\t  WebSocket.__instances = {};\n\t  WebSocket.__tasks = [];\n\t  WebSocket.__nextId = 0;\n\t  \n\t  /**\n\t   * Load a new flash security policy file.\n\t   * @param {string} url\n\t   */\n\t  WebSocket.loadFlashPolicyFile = function(url){\n\t    WebSocket.__addTask(function() {\n\t      WebSocket.__flash.loadManualPolicyFile(url);\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Loads WebSocketMain.swf and creates WebSocketMain object in Flash.\n\t   */\n\t  WebSocket.__initialize = function() {\n\t    if (WebSocket.__flash) return;\n\t    \n\t    if (WebSocket.__swfLocation) {\n\t      // For backword compatibility.\n\t      window.WEB_SOCKET_SWF_LOCATION = WebSocket.__swfLocation;\n\t    }\n\t    if (!window.WEB_SOCKET_SWF_LOCATION) {\n\t      console.error(\"[WebSocket] set WEB_SOCKET_SWF_LOCATION to location of WebSocketMain.swf\");\n\t      return;\n\t    }\n\t    var container = document.createElement(\"div\");\n\t    container.id = \"webSocketContainer\";\n\t    // Hides Flash box. We cannot use display: none or visibility: hidden because it prevents\n\t    // Flash from loading at least in IE. So we move it out of the screen at (-100, -100).\n\t    // But this even doesn't work with Flash Lite (e.g. in Droid Incredible). So with Flash\n\t    // Lite, we put it at (0, 0). This shows 1x1 box visible at left-top corner but this is\n\t    // the best we can do as far as we know now.\n\t    container.style.position = \"absolute\";\n\t    if (WebSocket.__isFlashLite()) {\n\t      container.style.left = \"0px\";\n\t      container.style.top = \"0px\";\n\t    } else {\n\t      container.style.left = \"-100px\";\n\t      container.style.top = \"-100px\";\n\t    }\n\t    var holder = document.createElement(\"div\");\n\t    holder.id = \"webSocketFlash\";\n\t    container.appendChild(holder);\n\t    document.body.appendChild(container);\n\t    // See this article for hasPriority:\n\t    // http://help.adobe.com/en_US/as3/mobile/WS4bebcd66a74275c36cfb8137124318eebc6-7ffd.html\n\t    swfobject.embedSWF(\n\t      WEB_SOCKET_SWF_LOCATION,\n\t      \"webSocketFlash\",\n\t      \"1\" /* width */,\n\t      \"1\" /* height */,\n\t      \"10.0.0\" /* SWF version */,\n\t      null,\n\t      null,\n\t      {hasPriority: true, swliveconnect : true, allowScriptAccess: \"always\"},\n\t      null,\n\t      function(e) {\n\t        if (!e.success) {\n\t          console.error(\"[WebSocket] swfobject.embedSWF failed\");\n\t        }\n\t      });\n\t  };\n\t  \n\t  /**\n\t   * Called by Flash to notify JS that it's fully loaded and ready\n\t   * for communication.\n\t   */\n\t  WebSocket.__onFlashInitialized = function() {\n\t    // We need to set a timeout here to avoid round-trip calls\n\t    // to flash during the initialization process.\n\t    setTimeout(function() {\n\t      WebSocket.__flash = document.getElementById(\"webSocketFlash\");\n\t      WebSocket.__flash.setCallerUrl(location.href);\n\t      WebSocket.__flash.setDebug(!!window.WEB_SOCKET_DEBUG);\n\t      for (var i = 0; i < WebSocket.__tasks.length; ++i) {\n\t        WebSocket.__tasks[i]();\n\t      }\n\t      WebSocket.__tasks = [];\n\t    }, 0);\n\t  };\n\t  \n\t  /**\n\t   * Called by Flash to notify WebSockets events are fired.\n\t   */\n\t  WebSocket.__onFlashEvent = function() {\n\t    setTimeout(function() {\n\t      try {\n\t        // Gets events using receiveEvents() instead of getting it from event object\n\t        // of Flash event. This is to make sure to keep message order.\n\t        // It seems sometimes Flash events don't arrive in the same order as they are sent.\n\t        var events = WebSocket.__flash.receiveEvents();\n\t        for (var i = 0; i < events.length; ++i) {\n\t          WebSocket.__instances[events[i].webSocketId].__handleEvent(events[i]);\n\t        }\n\t      } catch (e) {\n\t        console.error(e);\n\t      }\n\t    }, 0);\n\t    return true;\n\t  };\n\t  \n\t  // Called by Flash.\n\t  WebSocket.__log = function(message) {\n\t    console.log(decodeURIComponent(message));\n\t  };\n\t  \n\t  // Called by Flash.\n\t  WebSocket.__error = function(message) {\n\t    console.error(decodeURIComponent(message));\n\t  };\n\t  \n\t  WebSocket.__addTask = function(task) {\n\t    if (WebSocket.__flash) {\n\t      task();\n\t    } else {\n\t      WebSocket.__tasks.push(task);\n\t    }\n\t  };\n\t  \n\t  /**\n\t   * Test if the browser is running flash lite.\n\t   * @return {boolean} True if flash lite is running, false otherwise.\n\t   */\n\t  WebSocket.__isFlashLite = function() {\n\t    if (!window.navigator || !window.navigator.mimeTypes) {\n\t      return false;\n\t    }\n\t    var mimeType = window.navigator.mimeTypes[\"application/x-shockwave-flash\"];\n\t    if (!mimeType || !mimeType.enabledPlugin || !mimeType.enabledPlugin.filename) {\n\t      return false;\n\t    }\n\t    return mimeType.enabledPlugin.filename.match(/flashlite/i) ? true : false;\n\t  };\n\t  \n\t  if (!window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION) {\n\t    if (window.addEventListener) {\n\t      window.addEventListener(\"load\", function(){\n\t        WebSocket.__initialize();\n\t      }, false);\n\t    } else {\n\t      window.attachEvent(\"onload\", function(){\n\t        WebSocket.__initialize();\n\t      });\n\t    }\n\t  }\n\t  \n\t})();\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io, global) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  exports.XHR = XHR;\n\t\n\t  /**\n\t   * XHR constructor\n\t   *\n\t   * @costructor\n\t   * @api public\n\t   */\n\t\n\t  function XHR (socket) {\n\t    if (!socket) return;\n\t\n\t    io.Transport.apply(this, arguments);\n\t    this.sendBuffer = [];\n\t  };\n\t\n\t  /**\n\t   * Inherits from Transport.\n\t   */\n\t\n\t  io.util.inherit(XHR, io.Transport);\n\t\n\t  /**\n\t   * Establish a connection\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  XHR.prototype.open = function () {\n\t    this.socket.setBuffer(false);\n\t    this.onOpen();\n\t    this.get();\n\t\n\t    // we need to make sure the request succeeds since we have no indication\n\t    // whether the request opened or not until it succeeded.\n\t    this.setCloseTimeout();\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Check if we need to send data to the Socket.IO server, if we have data in our\n\t   * buffer we encode it and forward it to the `post` method.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  XHR.prototype.payload = function (payload) {\n\t    var msgs = [];\n\t\n\t    for (var i = 0, l = payload.length; i < l; i++) {\n\t      msgs.push(io.parser.encodePacket(payload[i]));\n\t    }\n\t\n\t    this.send(io.parser.encodePayload(msgs));\n\t  };\n\t\n\t  /**\n\t   * Send data to the Socket.IO server.\n\t   *\n\t   * @param data The message\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  XHR.prototype.send = function (data) {\n\t    this.post(data);\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Posts a encoded message to the Socket.IO server.\n\t   *\n\t   * @param {String} data A encoded message.\n\t   * @api private\n\t   */\n\t\n\t  function empty () { };\n\t\n\t  XHR.prototype.post = function (data) {\n\t    var self = this;\n\t    this.socket.setBuffer(true);\n\t\n\t    function stateChange () {\n\t      if (this.readyState == 4) {\n\t        this.onreadystatechange = empty;\n\t        self.posting = false;\n\t\n\t        if (this.status == 200){\n\t          self.socket.setBuffer(false);\n\t        } else {\n\t          self.onClose();\n\t        }\n\t      }\n\t    }\n\t\n\t    function onload () {\n\t      this.onload = empty;\n\t      self.socket.setBuffer(false);\n\t    };\n\t\n\t    this.sendXHR = this.request('POST');\n\t\n\t    if (global.XDomainRequest && this.sendXHR instanceof XDomainRequest) {\n\t      this.sendXHR.onload = this.sendXHR.onerror = onload;\n\t    } else {\n\t      this.sendXHR.onreadystatechange = stateChange;\n\t    }\n\t\n\t    this.sendXHR.send(data);\n\t  };\n\t\n\t  /**\n\t   * Disconnects the established `XHR` connection.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  XHR.prototype.close = function () {\n\t    this.onClose();\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Generates a configured XHR request\n\t   *\n\t   * @param {String} url The url that needs to be requested.\n\t   * @param {String} method The method the request should use.\n\t   * @returns {XMLHttpRequest}\n\t   * @api private\n\t   */\n\t\n\t  XHR.prototype.request = function (method) {\n\t    var req = io.util.request(this.socket.isXDomain())\n\t      , query = io.util.query(this.socket.options.query, 't=' + +new Date);\n\t\n\t    req.open(method || 'GET', this.prepareUrl() + query, true);\n\t\n\t    if (method == 'POST') {\n\t      try {\n\t        if (req.setRequestHeader) {\n\t          req.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n\t        } else {\n\t          // XDomainRequest\n\t          req.contentType = 'text/plain';\n\t        }\n\t      } catch (e) {}\n\t    }\n\t\n\t    return req;\n\t  };\n\t\n\t  /**\n\t   * Returns the scheme to use for the transport URLs.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  XHR.prototype.scheme = function () {\n\t    return this.socket.options.secure ? 'https' : 'http';\n\t  };\n\t\n\t  /**\n\t   * Check if the XHR transports are supported\n\t   *\n\t   * @param {Boolean} xdomain Check if we support cross domain requests.\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  XHR.check = function (socket, xdomain) {\n\t    try {\n\t      var request = io.util.request(xdomain),\n\t          usesXDomReq = (global.XDomainRequest && request instanceof XDomainRequest),\n\t          socketProtocol = (socket && socket.options && socket.options.secure ? 'https:' : 'http:'),\n\t          isXProtocol = (global.location && socketProtocol != global.location.protocol);\n\t      if (request && !(usesXDomReq && isXProtocol)) {\n\t        return true;\n\t      }\n\t    } catch(e) {}\n\t\n\t    return false;\n\t  };\n\t\n\t  /**\n\t   * Check if the XHR transport supports cross domain requests.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  XHR.xdomainCheck = function (socket) {\n\t    return XHR.check(socket, true);\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.htmlfile = HTMLFile;\n\t\n\t  /**\n\t   * The HTMLFile transport creates a `forever iframe` based transport\n\t   * for Internet Explorer. Regular forever iframe implementations will \n\t   * continuously trigger the browsers buzy indicators. If the forever iframe\n\t   * is created inside a `htmlfile` these indicators will not be trigged.\n\t   *\n\t   * @constructor\n\t   * @extends {io.Transport.XHR}\n\t   * @api public\n\t   */\n\t\n\t  function HTMLFile (socket) {\n\t    io.Transport.XHR.apply(this, arguments);\n\t  };\n\t\n\t  /**\n\t   * Inherits from XHR transport.\n\t   */\n\t\n\t  io.util.inherit(HTMLFile, io.Transport.XHR);\n\t\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  HTMLFile.prototype.name = 'htmlfile';\n\t\n\t  /**\n\t   * Creates a new Ac...eX `htmlfile` with a forever loading iframe\n\t   * that can be used to listen to messages. Inside the generated\n\t   * `htmlfile` a reference will be made to the HTMLFile transport.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  HTMLFile.prototype.get = function () {\n\t    this.doc = new window[(['Active'].concat('Object').join('X'))]('htmlfile');\n\t    this.doc.open();\n\t    this.doc.write('<html></html>');\n\t    this.doc.close();\n\t    this.doc.parentWindow.s = this;\n\t\n\t    var iframeC = this.doc.createElement('div');\n\t    iframeC.className = 'socketio';\n\t\n\t    this.doc.body.appendChild(iframeC);\n\t    this.iframe = this.doc.createElement('iframe');\n\t\n\t    iframeC.appendChild(this.iframe);\n\t\n\t    var self = this\n\t      , query = io.util.query(this.socket.options.query, 't='+ +new Date);\n\t\n\t    this.iframe.src = this.prepareUrl() + query;\n\t\n\t    io.util.on(window, 'unload', function () {\n\t      self.destroy();\n\t    });\n\t  };\n\t\n\t  /**\n\t   * The Socket.IO server will write script tags inside the forever\n\t   * iframe, this function will be used as callback for the incoming\n\t   * information.\n\t   *\n\t   * @param {String} data The message\n\t   * @param {document} doc Reference to the context\n\t   * @api private\n\t   */\n\t\n\t  HTMLFile.prototype._ = function (data, doc) {\n\t    // unescape all forward slashes. see GH-1251\n\t    data = data.replace(/\\\\\\//g, '/');\n\t    this.onData(data);\n\t    try {\n\t      var script = doc.getElementsByTagName('script')[0];\n\t      script.parentNode.removeChild(script);\n\t    } catch (e) { }\n\t  };\n\t\n\t  /**\n\t   * Destroy the established connection, iframe and `htmlfile`.\n\t   * And calls the `CollectGarbage` function of Internet Explorer\n\t   * to release the memory.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  HTMLFile.prototype.destroy = function () {\n\t    if (this.iframe){\n\t      try {\n\t        this.iframe.src = 'about:blank';\n\t      } catch(e){}\n\t\n\t      this.doc = null;\n\t      this.iframe.parentNode.removeChild(this.iframe);\n\t      this.iframe = null;\n\t\n\t      CollectGarbage();\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Disconnects the established connection.\n\t   *\n\t   * @returns {Transport} Chaining.\n\t   * @api public\n\t   */\n\t\n\t  HTMLFile.prototype.close = function () {\n\t    this.destroy();\n\t    return io.Transport.XHR.prototype.close.call(this);\n\t  };\n\t\n\t  /**\n\t   * Checks if the browser supports this transport. The browser\n\t   * must have an `Ac...eXObject` implementation.\n\t   *\n\t   * @return {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  HTMLFile.check = function (socket) {\n\t    if (typeof window != \"undefined\" && (['Active'].concat('Object').join('X')) in window){\n\t      try {\n\t        var a = new window[(['Active'].concat('Object').join('X'))]('htmlfile');\n\t        return a && io.Transport.XHR.check(socket);\n\t      } catch(e){}\n\t    }\n\t    return false;\n\t  };\n\t\n\t  /**\n\t   * Check if cross domain requests are supported.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  HTMLFile.xdomainCheck = function () {\n\t    // we can probably do handling for sub-domains, we should\n\t    // test that it's cross domain but a subdomain here\n\t    return false;\n\t  };\n\t\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.transports.push('htmlfile');\n\t\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io, global) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports['xhr-polling'] = XHRPolling;\n\t\n\t  /**\n\t   * The XHR-polling transport uses long polling XHR requests to create a\n\t   * \"persistent\" connection with the server.\n\t   *\n\t   * @constructor\n\t   * @api public\n\t   */\n\t\n\t  function XHRPolling () {\n\t    io.Transport.XHR.apply(this, arguments);\n\t  };\n\t\n\t  /**\n\t   * Inherits from XHR transport.\n\t   */\n\t\n\t  io.util.inherit(XHRPolling, io.Transport.XHR);\n\t\n\t  /**\n\t   * Merge the properties from XHR transport\n\t   */\n\t\n\t  io.util.merge(XHRPolling, io.Transport.XHR);\n\t\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  XHRPolling.prototype.name = 'xhr-polling';\n\t\n\t  /**\n\t   * Indicates whether heartbeats is enabled for this transport\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  XHRPolling.prototype.heartbeats = function () {\n\t    return false;\n\t  };\n\t\n\t  /** \n\t   * Establish a connection, for iPhone and Android this will be done once the page\n\t   * is loaded.\n\t   *\n\t   * @returns {Transport} Chaining.\n\t   * @api public\n\t   */\n\t\n\t  XHRPolling.prototype.open = function () {\n\t    var self = this;\n\t\n\t    io.Transport.XHR.prototype.open.call(self);\n\t    return false;\n\t  };\n\t\n\t  /**\n\t   * Starts a XHR request to wait for incoming messages.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  function empty () {};\n\t\n\t  XHRPolling.prototype.get = function () {\n\t    if (!this.isOpen) return;\n\t\n\t    var self = this;\n\t\n\t    function stateChange () {\n\t      if (this.readyState == 4) {\n\t        this.onreadystatechange = empty;\n\t\n\t        if (this.status == 200) {\n\t          self.onData(this.responseText);\n\t          self.get();\n\t        } else {\n\t          self.onClose();\n\t        }\n\t      }\n\t    };\n\t\n\t    function onload () {\n\t      this.onload = empty;\n\t      this.onerror = empty;\n\t      self.retryCounter = 1;\n\t      self.onData(this.responseText);\n\t      self.get();\n\t    };\n\t\n\t    function onerror () {\n\t      self.retryCounter ++;\n\t      if(!self.retryCounter || self.retryCounter > 3) {\n\t        self.onClose();  \n\t      } else {\n\t        self.get();\n\t      }\n\t    };\n\t\n\t    this.xhr = this.request();\n\t\n\t    if (global.XDomainRequest && this.xhr instanceof XDomainRequest) {\n\t      this.xhr.onload = onload;\n\t      this.xhr.onerror = onerror;\n\t    } else {\n\t      this.xhr.onreadystatechange = stateChange;\n\t    }\n\t\n\t    this.xhr.send(null);\n\t  };\n\t\n\t  /**\n\t   * Handle the unclean close behavior.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  XHRPolling.prototype.onClose = function () {\n\t    io.Transport.XHR.prototype.onClose.call(this);\n\t\n\t    if (this.xhr) {\n\t      this.xhr.onreadystatechange = this.xhr.onload = this.xhr.onerror = empty;\n\t      try {\n\t        this.xhr.abort();\n\t      } catch(e){}\n\t      this.xhr = null;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Webkit based browsers show a infinit spinner when you start a XHR request\n\t   * before the browsers onload event is called so we need to defer opening of\n\t   * the transport until the onload event is called. Wrapping the cb in our\n\t   * defer method solve this.\n\t   *\n\t   * @param {Socket} socket The socket instance that needs a transport\n\t   * @param {Function} fn The callback\n\t   * @api private\n\t   */\n\t\n\t  XHRPolling.prototype.ready = function (socket, fn) {\n\t    var self = this;\n\t\n\t    io.util.defer(function () {\n\t      fn.call(self);\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.transports.push('xhr-polling');\n\t\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io, global) {\n\t  /**\n\t   * There is a way to hide the loading indicator in Firefox. If you create and\n\t   * remove a iframe it will stop showing the current loading indicator.\n\t   * Unfortunately we can't feature detect that and UA sniffing is evil.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  var indicator = global.document && \"MozAppearance\" in\n\t    global.document.documentElement.style;\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports['jsonp-polling'] = JSONPPolling;\n\t\n\t  /**\n\t   * The JSONP transport creates an persistent connection by dynamically\n\t   * inserting a script tag in the page. This script tag will receive the\n\t   * information of the Socket.IO server. When new information is received\n\t   * it creates a new script tag for the new data stream.\n\t   *\n\t   * @constructor\n\t   * @extends {io.Transport.xhr-polling}\n\t   * @api public\n\t   */\n\t\n\t  function JSONPPolling (socket) {\n\t    io.Transport['xhr-polling'].apply(this, arguments);\n\t\n\t    this.index = io.j.length;\n\t\n\t    var self = this;\n\t\n\t    io.j.push(function (msg) {\n\t      self._(msg);\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Inherits from XHR polling transport.\n\t   */\n\t\n\t  io.util.inherit(JSONPPolling, io.Transport['xhr-polling']);\n\t\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  JSONPPolling.prototype.name = 'jsonp-polling';\n\t\n\t  /**\n\t   * Posts a encoded message to the Socket.IO server using an iframe.\n\t   * The iframe is used because script tags can create POST based requests.\n\t   * The iframe is positioned outside of the view so the user does not\n\t   * notice it's existence.\n\t   *\n\t   * @param {String} data A encoded message.\n\t   * @api private\n\t   */\n\t\n\t  JSONPPolling.prototype.post = function (data) {\n\t    var self = this\n\t      , query = io.util.query(\n\t             this.socket.options.query\n\t          , 't='+ (+new Date) + '&i=' + this.index\n\t        );\n\t\n\t    if (!this.form) {\n\t      var form = document.createElement('form')\n\t        , area = document.createElement('textarea')\n\t        , id = this.iframeId = 'socketio_iframe_' + this.index\n\t        , iframe;\n\t\n\t      form.className = 'socketio';\n\t      form.style.position = 'absolute';\n\t      form.style.top = '0px';\n\t      form.style.left = '0px';\n\t      form.style.display = 'none';\n\t      form.target = id;\n\t      form.method = 'POST';\n\t      form.setAttribute('accept-charset', 'utf-8');\n\t      area.name = 'd';\n\t      form.appendChild(area);\n\t      document.body.appendChild(form);\n\t\n\t      this.form = form;\n\t      this.area = area;\n\t    }\n\t\n\t    this.form.action = this.prepareUrl() + query;\n\t\n\t    function complete () {\n\t      initIframe();\n\t      self.socket.setBuffer(false);\n\t    };\n\t\n\t    function initIframe () {\n\t      if (self.iframe) {\n\t        self.form.removeChild(self.iframe);\n\t      }\n\t\n\t      try {\n\t        // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n\t        iframe = document.createElement('<iframe name=\"'+ self.iframeId +'\">');\n\t      } catch (e) {\n\t        iframe = document.createElement('iframe');\n\t        iframe.name = self.iframeId;\n\t      }\n\t\n\t      iframe.id = self.iframeId;\n\t\n\t      self.form.appendChild(iframe);\n\t      self.iframe = iframe;\n\t    };\n\t\n\t    initIframe();\n\t\n\t    // we temporarily stringify until we figure out how to prevent\n\t    // browsers from turning `\\n` into `\\r\\n` in form inputs\n\t    this.area.value = io.JSON.stringify(data);\n\t\n\t    try {\n\t      this.form.submit();\n\t    } catch(e) {}\n\t\n\t    if (this.iframe.attachEvent) {\n\t      iframe.onreadystatechange = function () {\n\t        if (self.iframe.readyState == 'complete') {\n\t          complete();\n\t        }\n\t      };\n\t    } else {\n\t      this.iframe.onload = complete;\n\t    }\n\t\n\t    this.socket.setBuffer(true);\n\t  };\n\t\n\t  /**\n\t   * Creates a new JSONP poll that can be used to listen\n\t   * for messages from the Socket.IO server.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  JSONPPolling.prototype.get = function () {\n\t    var self = this\n\t      , script = document.createElement('script')\n\t      , query = io.util.query(\n\t             this.socket.options.query\n\t          , 't='+ (+new Date) + '&i=' + this.index\n\t        );\n\t\n\t    if (this.script) {\n\t      this.script.parentNode.removeChild(this.script);\n\t      this.script = null;\n\t    }\n\t\n\t    script.async = true;\n\t    script.src = this.prepareUrl() + query;\n\t    script.onerror = function () {\n\t      self.onClose();\n\t    };\n\t\n\t    var insertAt = document.getElementsByTagName('script')[0];\n\t    insertAt.parentNode.insertBefore(script, insertAt);\n\t    this.script = script;\n\t\n\t    if (indicator) {\n\t      setTimeout(function () {\n\t        var iframe = document.createElement('iframe');\n\t        document.body.appendChild(iframe);\n\t        document.body.removeChild(iframe);\n\t      }, 100);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Callback function for the incoming message stream from the Socket.IO server.\n\t   *\n\t   * @param {String} data The message\n\t   * @api private\n\t   */\n\t\n\t  JSONPPolling.prototype._ = function (msg) {\n\t    this.onData(msg);\n\t    if (this.isOpen) {\n\t      this.get();\n\t    }\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * The indicator hack only works after onload\n\t   *\n\t   * @param {Socket} socket The socket instance that needs a transport\n\t   * @param {Function} fn The callback\n\t   * @api private\n\t   */\n\t\n\t  JSONPPolling.prototype.ready = function (socket, fn) {\n\t    var self = this;\n\t    if (!indicator) return fn.call(this);\n\t\n\t    io.util.load(function () {\n\t      fn.call(self);\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Checks if browser supports this transport.\n\t   *\n\t   * @return {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  JSONPPolling.check = function () {\n\t    return 'document' in global;\n\t  };\n\t\n\t  /**\n\t   * Check if cross domain requests are supported\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  JSONPPolling.xdomainCheck = function () {\n\t    return true;\n\t  };\n\t\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.transports.push('jsonp-polling');\n\t\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\t\n\tif (true) {\n\t  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () { return io; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}\n\t})();\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)(module)))\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function (root, factory) {\n\t    if (true) {\n\t        module.exports = factory();\n\t    } else if (typeof define === 'function' && define.amd) {\n\t        define([], factory);\n\t    } else {\n\t        root.urltemplate = factory();\n\t    }\n\t}(this, function () {\n\t  /**\n\t   * @constructor\n\t   */\n\t  function UrlTemplate() {\n\t  }\n\t\n\t  /**\n\t   * @private\n\t   * @param {string} str\n\t   * @return {string}\n\t   */\n\t  UrlTemplate.prototype.encodeReserved = function (str) {\n\t    return str.split(/(%[0-9A-Fa-f]{2})/g).map(function (part) {\n\t      if (!/%[0-9A-Fa-f]/.test(part)) {\n\t        part = encodeURI(part);\n\t      }\n\t      return part;\n\t    }).join('');\n\t  };\n\t\n\t  /**\n\t   * @private\n\t   * @param {string} operator\n\t   * @param {string} value\n\t   * @param {string} key\n\t   * @return {string}\n\t   */\n\t  UrlTemplate.prototype.encodeValue = function (operator, value, key) {\n\t    value = (operator === '+' || operator === '#') ? this.encodeReserved(value) : encodeURIComponent(value);\n\t\n\t    if (key) {\n\t      return encodeURIComponent(key) + '=' + value;\n\t    } else {\n\t      return value;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * @private\n\t   * @param {*} value\n\t   * @return {boolean}\n\t   */\n\t  UrlTemplate.prototype.isDefined = function (value) {\n\t    return value !== undefined && value !== null;\n\t  };\n\t\n\t  /**\n\t   * @private\n\t   * @param {string}\n\t   * @return {boolean}\n\t   */\n\t  UrlTemplate.prototype.isKeyOperator = function (operator) {\n\t    return operator === ';' || operator === '&' || operator === '?';\n\t  };\n\t\n\t  /**\n\t   * @private\n\t   * @param {Object} context\n\t   * @param {string} operator\n\t   * @param {string} key\n\t   * @param {string} modifier\n\t   */\n\t  UrlTemplate.prototype.getValues = function (context, operator, key, modifier) {\n\t    var value = context[key],\n\t        result = [];\n\t\n\t    if (this.isDefined(value) && value !== '') {\n\t      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n\t        value = value.toString();\n\t\n\t        if (modifier && modifier !== '*') {\n\t          value = value.substring(0, parseInt(modifier, 10));\n\t        }\n\t\n\t        result.push(this.encodeValue(operator, value, this.isKeyOperator(operator) ? key : null));\n\t      } else {\n\t        if (modifier === '*') {\n\t          if (Array.isArray(value)) {\n\t            value.filter(this.isDefined).forEach(function (value) {\n\t              result.push(this.encodeValue(operator, value, this.isKeyOperator(operator) ? key : null));\n\t            }, this);\n\t          } else {\n\t            Object.keys(value).forEach(function (k) {\n\t              if (this.isDefined(value[k])) {\n\t                result.push(this.encodeValue(operator, value[k], k));\n\t              }\n\t            }, this);\n\t          }\n\t        } else {\n\t          var tmp = [];\n\t\n\t          if (Array.isArray(value)) {\n\t            value.filter(this.isDefined).forEach(function (value) {\n\t              tmp.push(this.encodeValue(operator, value));\n\t            }, this);\n\t          } else {\n\t            Object.keys(value).forEach(function (k) {\n\t              if (this.isDefined(value[k])) {\n\t                tmp.push(encodeURIComponent(k));\n\t                tmp.push(this.encodeValue(operator, value[k].toString()));\n\t              }\n\t            }, this);\n\t          }\n\t\n\t          if (this.isKeyOperator(operator)) {\n\t            result.push(encodeURIComponent(key) + '=' + tmp.join(','));\n\t          } else if (tmp.length !== 0) {\n\t            result.push(tmp.join(','));\n\t          }\n\t        }\n\t      }\n\t    } else {\n\t      if (operator === ';') {\n\t        result.push(encodeURIComponent(key));\n\t      } else if (value === '' && (operator === '&' || operator === '?')) {\n\t        result.push(encodeURIComponent(key) + '=');\n\t      } else if (value === '') {\n\t        result.push('');\n\t      }\n\t    }\n\t    return result;\n\t  };\n\t\n\t  /**\n\t   * @param {string} template\n\t   * @return {function(Object):string}\n\t   */\n\t  UrlTemplate.prototype.parse = function (template) {\n\t    var that = this;\n\t    var operators = ['+', '#', '.', '/', ';', '?', '&'];\n\t\n\t    return {\n\t      expand: function (context) {\n\t        return template.replace(/\\{([^\\{\\}]+)\\}|([^\\{\\}]+)/g, function (_, expression, literal) {\n\t          if (expression) {\n\t            var operator = null,\n\t                values = [];\n\t\n\t            if (operators.indexOf(expression.charAt(0)) !== -1) {\n\t              operator = expression.charAt(0);\n\t              expression = expression.substr(1);\n\t            }\n\t\n\t            expression.split(/,/g).forEach(function (variable) {\n\t              var tmp = /([^:\\*]*)(?::(\\d+)|(\\*))?/.exec(variable);\n\t              values.push.apply(values, that.getValues(context, operator, tmp[1], tmp[2] || tmp[3]));\n\t            });\n\t\n\t            if (operator && operator !== '+') {\n\t              var separator = ',';\n\t\n\t              if (operator === '?') {\n\t                separator = '&';\n\t              } else if (operator !== '#') {\n\t                separator = operator;\n\t              }\n\t              return (values.length !== 0 ? operator : '') + values.join(separator);\n\t            } else {\n\t              return values.join(',');\n\t            }\n\t          } else {\n\t            return that.encodeReserved(literal);\n\t          }\n\t        });\n\t      }\n\t    };\n\t  };\n\t\n\t  return new UrlTemplate();\n\t}));\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Copyright 2015, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t */\n\t\n\tvar Q = __webpack_require__(6);\n\tvar respoke = __webpack_require__(1);\n\tvar log = respoke.log;\n\t\n\t/**\n\t * A direct connection via RTCDataChannel, including state and path negotation.\n\t * @class respoke.DirectConnection\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {string} params\n\t * @param {string} params.instanceId - client id\n\t * @param {respoke.Call} params.call - The call that is handling state for this direct connection.\n\t * @param {boolean} [params.forceTurn] - If true, force the data to flow through relay servers instead of allowing\n\t * it to flow peer-to-peer. The relay acts like a blind proxy.\n\t * @param {string} params.connectionId - The connection ID of the remoteEndpoint.\n\t * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n\t * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n\t * @param {function} params.signalReport - Signaling action from SignalingChannel.\n\t * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n\t * @param {respoke.DirectConnection.onStart} [params.onStart] - Callback for when setup of the direct connection\n\t * begins. The direct connection will not be open yet.\n\t * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors that happen during\n\t * direct connection setup or media renegotiation.\n\t * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for closing the direct connection.\n\t * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for opening the direct connection.\n\t * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the request\n\t * for a direct connection and setup is about to begin.\n\t * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for incoming messages. Not usually\n\t * necessary to listen to this event if you are already listening to respoke.Endpoint#message.\n\t * @returns {respoke.DirectConnection}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t\n\t    /**\n\t     * A name to identify this class\n\t     * @memberof! respoke.DirectConnection\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.DirectConnection';\n\t    /**\n\t     * The unique identifier of the direct connection.\n\t     *\n\t     * @memberof! respoke.DirectConnection\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = respoke.makeGUID();\n\t\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name call\n\t     * @type {respoke.Call}\n\t     */\n\t    if (!that.call.caller) {\n\t        that.call.caller = false;\n\t    }\n\t\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name dataChannel\n\t     * @type {RTCDataChannel}\n\t     * @private\n\t     */\n\t    var dataChannel = null;\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name client\n\t     * @type {respoke.Client}\n\t     * @private\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name pc\n\t     * @type {RTCPeerConnection}\n\t     * @private\n\t     */\n\t    var pc = params.pc;\n\t    delete params.pc;\n\t\n\t    /**\n\t     * When the datachannel is availble, we need to attach the callbacks. The event this function is attached to\n\t     * only fires for the callee.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.listenDataChannel\n\t     * @param {respoke.Event} evt\n\t     * @private\n\t     */\n\t    function listenDataChannel(evt) {\n\t        dataChannel = evt.channel;\n\t        dataChannel.onerror = onDataChannelError;\n\t        dataChannel.onmessage = onDataChannelMessage;\n\t        if (dataChannel.readyState === 'open') {\n\t            dataChannel.onopen = null;\n\t            onDataChannelOpen();\n\t        } else {\n\t            dataChannel.onopen = onDataChannelOpen;\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Register any event listeners passed in as callbacks\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.saveParameters\n\t     * @param {object} params\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for when the direct connection\n\t     * is closed.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for when the direct connection\n\t     * is open.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for incoming messages.\n\t     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n\t     * connection.\n\t     * @param {respoke.DirectConnection.onStart} [params.onStart] - Callback for when the direct connection\n\t     * is being set up. The direct connection will not be open yet.\n\t     * @param {boolean} [params.forceTurn] - If true, force the data to flow through relay servers instead of allowing\n\t     * it to flow peer-to-peer. The relay acts like a blind proxy.\n\t     * @private\n\t     */\n\t    function saveParameters(params) {\n\t        /**\n\t         * The direct connection is open.\n\t         * @event respoke.DirectConnection#open\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.listen('open', params.onOpen);\n\t        /**\n\t         * The direct connection is closed.\n\t         * @event respoke.DirectConnection#close\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.listen('close', params.onClose);\n\t        /**\n\t         * Incoming message on this direct connection.\n\t         * @event respoke.DirectConnection#message\n\t         * @type {respoke.Event}\n\t         * @property {respoke.TextMessage} message\n\t         * @property {respoke.Endpoint} endpoint\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.listen('message', params.onMessage);\n\t        // documented elsewhere\n\t        that.listen('start', params.onStart);\n\t        /**\n\t         * An error occurred while setting up the direct connection.\n\t         * @event respoke.DirectConnection#error\n\t         * @type {respoke.Event}\n\t         * @property {string} reason - A human-readable description of the error.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.listen('error', params.onError);\n\t        pc.listen('direct-connection', listenDataChannel, true);\n\t        pc.listen('stats', function fireStats(evt) {\n\t            /**\n\t             * This event is fired every time statistical information about the direct connection\n\t             * becomes available.\n\t             * @event respoke.DirectConnection#stats\n\t             * @type {respoke.Event}\n\t             * @property {object} stats - an object with stats in it.\n\t             * @property {respoke.DirectConnection} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.fire('stats', {stats: evt.stats});\n\t        }, true);\n\t\n\t    }\n\t    saveParameters(params);\n\t\n\t    delete that.onOpen;\n\t    delete that.onClose;\n\t    delete that.onMessage;\n\t\n\t    /**\n\t     * Return media stats. Since we have to wait for both the answer and offer to be available before starting\n\t     * statistics, we'll return a promise for the stats object.\n\t     *\n\t     *     directConnection.getStats({\n\t     *         onStats: function (evt) {\n\t     *             console.log('Stats', evt.stats);\n\t     *         }\n\t     *     }).done(function () {\n\t     *         console.log('Stats started.');\n\t     *     }, function (err) {\n\t     *         console.log('Direct connection is already closed.');\n\t     *     });\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.getStats\n\t     * @returns {Promise<object>|undefined}\n\t     * @param {object} params\n\t     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive the\n\t     * stats if the Respoke stats module is loaded. If no callback is provided, the connection's report will\n\t     * contain stats but the developer will not receive them on the client-side.\n\t     * @param {respoke.DirectConnection.statsSuccessHandler} [params.onSuccess] - Success handler for this\n\t     * invocation of this method only.\n\t     * @param {respoke.DirectConnection.errorHandler} [params.onError] - Error handler for this invocation of\n\t     * this method only.\n\t     */\n\t    that.getStats = function (params) {\n\t        if (pc && pc.getStats) {\n\t            that.listen('stats', params.onStats);\n\t            delete params.onStats;\n\t            return pc.getStats(params);\n\t        }\n\t        return null;\n\t    };\n\t\n\t    if (!respoke.MediaStats) {\n\t        delete that.getStats;\n\t    }\n\t\n\t    /**\n\t     * Detect datachannel errors for internal state.\n\t     * @memberof! respoke.DirectConnection\n\t     * @private\n\t     * @method respoke.DirectConnection.onDataChannelError\n\t     */\n\t    function onDataChannelError(error) {\n\t        /**\n\t         * Indicate that an error has occurred setting up the direct connection.\n\t         * @event respoke.DirectConnection#error\n\t         * @type {respoke.Event}\n\t         * @property {object} error\n\t         * @property {respoke.DirectConnection} directConnection\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('error', {\n\t            error: error\n\t        });\n\t        that.close();\n\t    }\n\t\n\t    /**\n\t     * Receive and route messages to the Endpoint.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.onDataChannelMessage\n\t     * @private\n\t     * @param {MessageEvent}\n\t     * @fires respoke.DirectConnection#message\n\t     */\n\t    function onDataChannelMessage(evt) {\n\t        var message;\n\t        try {\n\t            message = JSON.parse(evt.data);\n\t        } catch (e) {\n\t            message = evt.data;\n\t        }\n\t        /**\n\t         * A message has been received over the direct connection.\n\t         * @event respoke.Endpoint#message\n\t         * @type {respoke.Event}\n\t         * @property {object} message\n\t         * @property {respoke.DirectConnection} directConnection\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.call.remoteEndpoint.fire('message', {\n\t            message: message,\n\t            directConnection: that\n\t        });\n\t        /**\n\t         * A message has been received over the direct connection.\n\t         * @event respoke.DirectConnection#message\n\t         * @type {respoke.Event}\n\t         * @property {object} message\n\t         * @property {respoke.Endpoint} endpoint\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('message', {\n\t            message: message,\n\t            endpoint: that.call.remoteEndpoint\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Detect when the channel is open.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.onDataChannelOpen\n\t     * @private\n\t     * @param {MessageEvent}\n\t     * @fires respoke.DirectConnection#open\n\t     */\n\t    function onDataChannelOpen(evt) {\n\t        //dataChannel = evt.target || evt.channel;\n\t        /**\n\t         * The direct connection is open.\n\t         * @event respoke.DirectConnection#open\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('open');\n\t    }\n\t\n\t    /**\n\t     * Detect when the channel is closed.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.onDataChannelClose\n\t     * @private\n\t     * @param {MessageEvent}\n\t     * @fires respoke.DirectConnection#close\n\t     */\n\t    function onDataChannelClose(evt) {\n\t        //dataChannel = evt.target || evt.channel;\n\t        /**\n\t         * The direct connection is closed.\n\t         * @event respoke.DirectConnection#close\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('close');\n\t    }\n\t\n\t    /**\n\t     * Create the datachannel. For the caller, set up all the handlers we'll need to keep track of the\n\t     * datachannel's state and to receive messages.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.createDataChannel\n\t     * @private\n\t     */\n\t    function createDataChannel() {\n\t        dataChannel = pc.createDataChannel(\"respokeDataChannel\");\n\t        dataChannel.binaryType = 'arraybuffer';\n\t        dataChannel.onerror = onDataChannelError;\n\t        dataChannel.onmessage = onDataChannelMessage;\n\t        dataChannel.onopen = onDataChannelOpen;\n\t\n\t        /**\n\t         * The direct connection setup has begun. This does NOT mean it's ready to send messages yet. Listen to\n\t         * DirectConnection#open for that notification.\n\t         * @event respoke.DirectConnection#start\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('start');\n\t    }\n\t\n\t    /**\n\t     * Start the process of obtaining media. saveParameters will only be meaningful for the callee,\n\t     * since the library calls this method for the caller. Developers will use this method to pass in\n\t     * callbacks for the callee.\n\t     *\n\t     *     directConnection.accept({\n\t     *         onOpen: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.accept\n\t     * @fires respoke.DirectConnection#accept\n\t     * @param {object} params\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen]\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose]\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage]\n\t     */\n\t    that.accept = function (params) {\n\t        params = params || {};\n\t        log.debug('DirectConnection.accept');\n\t        saveParameters(params);\n\t\n\t        log.debug(\"I am \" + (pc.state.caller ? '' : 'not ') + \"the caller.\");\n\t\n\t        if (pc.state.caller === true) {\n\t            createDataChannel();\n\t        }\n\t        that.call.answer();\n\t\n\t        /**\n\t         * The request to open a direct connection has been accepted.\n\t         * @event respoke.DirectConnection#accept\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('accept');\n\t    };\n\t\n\t    /**\n\t     * Tear down the connection.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.close\n\t     * @fires respoke.DirectConnection#close\n\t     */\n\t    that.close = function (params) {\n\t        params = params || {};\n\t        log.debug(\"DirectConnection.close\");\n\t\n\t        if (that.call && that.call.remoteEndpoint) {\n\t            that.call.remoteEndpoint.directConnection = null;\n\t        }\n\t\n\t        if (dataChannel) {\n\t            dataChannel.close();\n\t        }\n\t\n\t        /**\n\t         * The direct connection has been closed.\n\t         * @event respoke.DirectConnection#close\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('close');\n\t\n\t        that.ignore();\n\t\n\t        if (that.call && params.skipRemove !== true) {\n\t            that.call.removeDirectConnection();\n\t        }\n\t\n\t        dataChannel = null;\n\t        that.call = null;\n\t        pc = null;\n\t    };\n\t\n\t    /**\n\t     * Send a message over the datachannel in the form of a JSON-encoded plain old JavaScript object. Only one\n\t     * attribute may be given: either a string 'message' or an object 'object'.\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     *\n\t     *     directConnection.sendMessage({\n\t     *         message: \"And they say HTTP is stateless!\"\n\t     *     });\n\t     *\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.sendMessage\n\t     * @param {object} params\n\t     * @param {string} [params.message] - The message to send.\n\t     * @param {object} [params.object] - An object to send.\n\t     * @param {respoke.DirectConnection.sendHandler} [params.onSuccess] - Success handler for this invocation\n\t     * of this method only.\n\t     * @param {respoke.DirectConnection.errorHandler} [params.onError] - Error handler for this invocation\n\t     * of this method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t        if (that.isActive()) {\n\t            dataChannel.send(JSON.stringify(params.object || {\n\t                message: params.message\n\t            }));\n\t            deferred.resolve();\n\t        } else {\n\t            deferred.reject(new Error(\"dataChannel not in an open state.\"));\n\t        }\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Expose close as reject for approve/reject workflow.\n\t     *\n\t     *     client.listen('direct-connection, function (evt) {\n\t     *         if (iDontLikeThisPerson()) {\n\t     *             evt.directConnection.reject();\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.reject\n\t     * @param {boolean} signal - Optional flag to indicate whether to send or suppress sending\n\t     * a hangup signal to the remote side.\n\t     */\n\t    that.reject = that.close;\n\t\n\t    /**\n\t     * Indicate whether a datachannel is being setup or is in progress.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.isActive\n\t     * @returns {boolean}\n\t     */\n\t    that.isActive = function () {\n\t        // Why does pc.iceConnectionState not transition into 'connected' even though media is flowing?\n\t        //return (pc && pc.isActive() && dataChannel && dataChannel.readyState === 'open');\n\t        return (dataChannel && dataChannel.readyState === 'open');\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.DirectConnection\n\t\n\t/**\n\t * Called when the direct connection is closed.  This callback is called every time respoke.DirectConnection#close\n\t * fires.\n\t * @callback respoke.DirectConnection.onClose\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Called when the setup of the direct connection has begun. The direct connection will not be open yet. This\n\t * callback is called every time respoke.DirectConnection#start fires.\n\t * @callback respoke.DirectConnection.onStart\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Called when the direct connection is opened.  This callback is called every time respoke.DirectConnection#open\n\t * fires.\n\t * @callback respoke.DirectConnection.onOpen\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Called when a message is received over the direct connection.  This callback is called every time\n\t * respoke.DirectConnection#message fires.\n\t * @callback respoke.DirectConnection.onMessage\n\t * @param {respoke.Event} evt\n\t * @param {object} evt.message\n\t * @param {respoke.Endpoint} evt.endpoint\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Handle an error that resulted from a specific method call. This handler will not fire more than once.\n\t * @callback respoke.DirectConnection.errorHandler\n\t * @param {Error} err\n\t */\n\t/**\n\t * When a call is in setup or media renegotiation happens. This callback will be called every time\n\t * respoke.DirectConnection#error.\n\t * @callback respoke.DirectConnection.onError\n\t * @param {respoke.Event} evt\n\t * @param {boolean} evt.reason - A human-readable description of the error.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Called when the callee accepts the direct connection. This callback is called every time\n\t * respoke.DirectConnection#accept is fired.\n\t * @callback respoke.DirectConnection.onAccept\n\t * @param {respoke.Event} evt\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Handle the successful kick-off of stats on a call.\n\t * @callback respoke.DirectConnection.statsSuccessHandler\n\t * @param {respoke.Event} evt\n\t * @param {object} evt.stats - an object with stats in it.\n\t * @param {respoke.DirectConnection} evt.target\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * Handle sending successfully.\n\t * @callback respoke.DirectConnection.sendHandler\n\t */\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Copyright 2015, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t */\n\t\n\tvar Q = __webpack_require__(6);\n\tvar respoke = __webpack_require__(1);\n\tvar log = respoke.log;\n\tvar Statechart = __webpack_require__(19);\n\t\n\t/**\n\t * WebRTC PeerConnection. This class handles all the state and connectivity for Call and DirectConnection.\n\t * This class cannot be used alone, but is instantiated by and must be given media by either Call, DirectConnection,\n\t * or the not-yet-implemented ScreenShare.\n\t * @class respoke.PeerConnection\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.instanceId - client id\n\t * @param {boolean} [params.forceTurn] - If true, delete all 'host' and 'srvflx' candidates and send only 'relay'\n\t * candidates.\n\t * @param {boolean} [params.disableTurn] - If true, delete all 'relay' candidates and send only 'host' and 'srvflx'\n\t * candidates.\n\t * @param {respoke.Call} params.call\n\t * @param {string} params.connectionId - The connection ID of the remoteEndpoint.\n\t * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n\t * @param {function} params.signalModify - Signaling action from SignalingChannel.\n\t * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n\t * @param {function} params.signalReport - Signaling action from SignalingChannel.\n\t * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n\t * @param {respoke.Call.onHangup} [params.onHangup] - Callback for the developer to be notified about hangup.\n\t * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for the developer to receive\n\t * statistics about the call. This is only used if call.getStats() is called and the stats module is loaded.\n\t * @param {object} [params.pcOptions]\n\t * @param {object} [params.offerOptions]\n\t * @returns {respoke.PeerConnection}\n\t */\n\t\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.PeerConnection';\n\t\n\t    /**\n\t     * Whether or not we will send a 'hangup' signal to the other side during hangup.\n\t     * @memberof! respoke.PeerConnection\n\t     * @name toSendHangup\n\t     * @type {respoke.Endpoint}\n\t     */\n\t    var toSendHangup;\n\t\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @private\n\t     * @name pc\n\t     * @type RTCPeerConnection\n\t     * @desc The RTCPeerConnection as provided by the browser API. All internal state, networking functionality, and\n\t     * raw data transfer occurs within the PeerConnection.\n\t     */\n\t    var pc = null;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name defModify\n\t     * @private\n\t     * @type {Promise}\n\t     * @desc Used in the state machine to trigger methods or functions whose execution depends on the reception,\n\t     * handling, or sending of some information.\n\t     */\n\t    var defModify;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name previewLocalMedia\n\t     * @private\n\t     * @type {respoke.Call.previewLocalMedia}\n\t     * @desc A callback provided by the developer that we'll call after receiving local media and before\n\t     * approve() is called.\n\t     */\n\t    var previewLocalMedia = typeof params.previewLocalMedia === 'function' ? params.previewLocalMedia : undefined;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name candidateReceivingQueue\n\t     * @private\n\t     * @type {array}\n\t     * @desc An array to save candidates between offer and answer so that both parties can process them simultaneously.\n\t     */\n\t    var candidateReceivingQueue = respoke.queueFactory();\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name client\n\t     * @private\n\t     * @type {respoke.Client}\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalOffer\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalOffer = params.signalOffer;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalConnected\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalConnected = params.signalConnected;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalModify\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalModify = params.signalModify;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalAnswer\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalAnswer = params.signalAnswer;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalHangup\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalHangup = respoke.callOnce(params.signalHangup);\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalReport\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalReport = params.signalReport;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalCandidateOrig\n\t     * @private\n\t     * @type {function}\n\t     * @desc A temporary function saved from params in order to construct the candidate signaling function.\n\t     */\n\t    var signalCandidateOrig = params.signalCandidate;\n\t\n\t    /**\n\t     * The RTCDTMFSender as provided by the browser API.\n\t     * @memberof! respoke.PeerConnection\n\t     * @private\n\t     * @name digitSender\n\t     * @type RTCDigitSender\n\t     */\n\t\n\t    var digitSender = null;\n\t\n\t    /**\n\t     * A temporary variable to define if we're in the middle of cancelling any tones on a peer connection\n\t     * @memberof! respoke.PeerConnection\n\t     * @private\n\t     * @name cancellingTones\n\t     * @type boolean\n\t     */\n\t\n\t    var cancellingTones = false;\n\t\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalCandidates\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed from the one passed to us by the signaling channel with additions\n\t     * to facilitate candidate logging.\n\t     */\n\t\n\t    function signalCandidates(params) {\n\t        if (!pc) {\n\t            return Q.resolve();\n\t        }\n\t\n\t        params.call = that.call;\n\t        that.report.candidatesSent = that.report.candidatesSent.concat(params.iceCandidates);\n\t\n\t        return signalCandidateOrig(params);\n\t    }\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name sdpExpectedStreamCount\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    that.sdpExpectedStreamCount = 0;\n\t\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name offerOptions\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var offerOptions = params.offerOptions || {};\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name pcOptions\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var pcOptions = params.pcOptions || {\n\t        optional: [\n\t            { DtlsSrtpKeyAgreement: true },\n\t            { RtpDataChannels: false }\n\t        ]\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name report\n\t     * @type {object}\n\t     */\n\t    that.report = {\n\t        callStarted: 0,\n\t        callStopped: 0,\n\t        callerendpoint: that.call.caller ? client.name : that.call.remoteEndpoint.id,\n\t        callerconnection: that.call.caller ? client.id : that.call.connectionId,\n\t        calleeendpoint: that.call.caller ? that.call.remoteEndpoint.id : client.id,\n\t        calleeconnection: that.call.caller ? that.call.connectionId : client.connectionId,\n\t        sessionId: that.call.id,\n\t        lastSDPString: '',\n\t        sdpsSent: [],\n\t        sdpsReceived: [],\n\t        candidatesSent: [],\n\t        candidatesReceived: [],\n\t        userAgent: navigator.userAgent,\n\t        os: navigator.platform\n\t    };\n\t\n\t    /**\n\t     * Start the process of network and media negotiation. Called after local video approved.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.initOffer\n\t     * @fires respoke.PeerConnection#initOffer\n\t     * @private\n\t     */\n\t    function initOffer() {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t\n\t        if (that.state.receiveOnly) {\n\t            makeOptionsReceiveOnly(offerOptions);\n\t        }\n\t\n\t        if (that.state.sendOnly) {\n\t            makeOptionsSendOnly(offerOptions);\n\t        }\n\t\n\t        log.info('creating offer', offerOptions);\n\t        pc.createOffer(saveOfferAndSend, function errorHandler(p) {\n\t            log.error('createOffer failed');\n\t        }, offerOptions);\n\t    }\n\t\n\t    function makeOptionsReceiveOnly(options) {\n\t        if (navigator.webkitGetUserMedia) {\n\t            options.mandatory = {\n\t                OfferToReceiveVideo: true,\n\t                OfferToReceiveAudio: true,\n\t                OfferToSendVideo: false,\n\t                OfferToSendAudio: false\n\t            };\n\t        } else {\n\t            options.offerToReceiveVideo = true;\n\t            options.offerToReceiveAudio = true;\n\t            options.offerToSendVideo = false;\n\t            options.offerToSendAudio = false;\n\t        }\n\t    }\n\t\n\t    function makeOptionsSendOnly(options) {\n\t        if (navigator.webkitGetUserMedia) {\n\t            options.mandatory = {\n\t                OfferToSendVideo: true,\n\t                OfferToSendAudio: true,\n\t                OfferToReceiveVideo: false,\n\t                OfferToReceiveAudio: false\n\t            };\n\t        } else {\n\t            options.offerToSendVideo = true;\n\t            options.offerToSendAudio = true;\n\t            options.offerToReceiveVideo = false;\n\t            options.offerToReceiveAudio = false;\n\t        }\n\t    }\n\t\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name localCandidates\n\t     * @private\n\t     * @type {array}\n\t     * @desc An array to save local candidates, to retransmit for peers that\n\t     *       don't support trickle ice.\n\t     */\n\t    var localCandidates = [];\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name localCandidatesComplete\n\t     * @private\n\t     * @type {boolean}\n\t     * @desc Whether all the local candidates have been received.\n\t     */\n\t    var localCandidatesComplete = false;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name localCandidatesSent\n\t     * @private\n\t     * @type {number}\n\t     * @desc The number of local candidates that have been sent to the remote.\n\t     */\n\t    var localCandidatesSent = 0;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name localCandidatesSent\n\t     * @private\n\t     * @type {Statechart}\n\t     * @desc FSM for managing local ICE candidates.\n\t     */\n\t    var localCandidatesFSM;\n\t\n\t    /**\n\t     * The number of local candidates that have not yet been sent.\n\t     * @returns {number}\n\t     * @private\n\t     */\n\t    function localCandidatesRemaining() {\n\t        return localCandidates.length - localCandidatesSent;\n\t    }\n\t\n\t    /**\n\t     * Throw another local ICE candidate on the pile\n\t     * @param params\n\t     * @param params.candidate ICE candidate\n\t     * @private\n\t     */\n\t    function collectLocalIceCandidate(params) {\n\t        if (params && params.candidate) {\n\t            localCandidates.push(params.candidate);\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Send the remaining local candidates that have not yet been sent.\n\t     * @private\n\t     */\n\t    function sendRemainingCandidates() {\n\t        var remainingCandidates = localCandidates.slice(localCandidatesSent);\n\t        var params = {iceCandidates: remainingCandidates};\n\t\n\t        localCandidatesSent += remainingCandidates.length;\n\t\n\t        if (localCandidatesComplete) {\n\t            params.finalCandidates = localCandidates;\n\t        }\n\t\n\t        signalCandidates(params)\n\t            .finally(function () {\n\t                localCandidatesFSM.dispatch('iceSent');\n\t            }).done();\n\t    }\n\t\n\t    localCandidatesFSM = respoke.Class({\n\t        that: Object.create(Statechart),\n\t        initialState: 'buffering',\n\t        states: {\n\t            buffering: {\n\t                localIceCandidate: {action: collectLocalIceCandidate},\n\t                ready: {\n\t                    target: 'sending',\n\t                    action: sendRemainingCandidates\n\t                }\n\t            },\n\t            sending: {\n\t                localIceCandidate: {action: collectLocalIceCandidate},\n\t                iceSent: [{\n\t                    guard: function () {\n\t                        return localCandidatesRemaining() === 0;\n\t                    },\n\t                    target: 'waiting'\n\t                }, {\n\t                    guard: function () {\n\t                        return localCandidatesRemaining() !== 0;\n\t                    },\n\t                    action: sendRemainingCandidates\n\t                }]\n\t            },\n\t            waiting: {\n\t                localIceCandidate: {\n\t                    action: function (params) {\n\t                        collectLocalIceCandidate(params);\n\t                        sendRemainingCandidates();\n\t                    },\n\t                    target: 'sending'\n\t                }\n\t            }\n\t        }\n\t    });\n\t\n\t    localCandidatesFSM.run();\n\t\n\t    /**\n\t     * Process a remote offer if we are not the caller. This is necessary because we don't process the offer until\n\t     * the callee has answered the call.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.processOffer\n\t     * @param {RTCSessionDescriptor}\n\t     * @returns {Promise}\n\t     */\n\t    that.processOffer = function (oOffer) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        log.debug('processOffer', oOffer);\n\t\n\t        that.report.sdpsReceived.push(oOffer);\n\t        that.report.lastSDPString = oOffer.sdp;\n\t\n\t        //set flags for audio / video being offered\n\t        that.sdpExpectedStreamCount = respoke.sdpStreamCount(oOffer.sdp);\n\t        that.call.hasDataChannel = respoke.sdpHasDataChannel(oOffer.sdp);\n\t\n\t        try {\n\t            pc.setRemoteDescription(new RTCSessionDescription(oOffer),\n\t                function successHandler() {\n\t                    if (!pc) {\n\t                        return;\n\t                    }\n\t\n\t                    processReceivingQueue();\n\t                    log.debug('set remote desc of offer succeeded');\n\t                    pc.createAnswer(function successHandler(oSession) {\n\t                        that.state.processedRemoteSDP = true;\n\t                        saveAnswerAndSend(oSession);\n\t                    }, function errorHandler(err) {\n\t                        err = new Error(\"Error creating SDP answer.\" + err.message);\n\t                        that.report.callStoppedReason = err.message;\n\t                        /**\n\t                         * This event is fired on errors that occur during call setup or media negotiation.\n\t                         * @event respoke.Call#error\n\t                         * @type {respoke.Event}\n\t                         * @property {string} reason - A human readable description about the error.\n\t                         * @property {respoke.Call} target\n\t                         * @property {string} name - the event name.\n\t                         */\n\t                        that.call.fire('error', {\n\t                            message: err.message\n\t                        });\n\t                        log.error('create answer failed');\n\t                        that.report.callStoppedReason = 'setRemoteDescription failed at answer.';\n\t                        that.close();\n\t                    });\n\t                }, function errorHandler(err) {\n\t                    err = new Error('Error calling setRemoteDescription on offer I received.' + err.message);\n\t                    that.report.callStoppedReason = err.message;\n\t                    /**\n\t                     * This event is fired on errors that occur during call setup or media negotiation.\n\t                     * @event respoke.Call#error\n\t                     * @type {respoke.Event}\n\t                     * @property {string} reason - A human readable description about the error.\n\t                     * @property {respoke.Call} target\n\t                     * @property {string} name - the event name.\n\t                     */\n\t                    that.call.fire('error', {\n\t                        message: err.message\n\t                    });\n\t                }\n\t            );\n\t        } catch (err) {\n\t            var newErr = new Error(\"Exception calling setRemoteDescription on offer I received.\" + err.message);\n\t            that.report.callStoppedReason = newErr.message;\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.call.fire('error', {\n\t                message: newErr.message\n\t            });\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Return media stats. Since we have to wait for both the answer and offer to be available before starting\n\t     * statistics, we'll return a promise for the stats object.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.getStats\n\t     * @returns {Promise<{respoke.MediaStatsParser}>|undefined}\n\t     * @param {object} params\n\t     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onSuccess] - Success handler for this\n\t     * invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @fires respoke.PeerConnection#stats\n\t     */\n\t    function getStats(params) {\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t\n\t        if (!respoke.MediaStats) {\n\t            deferred.reject(new Error(\"Statistics module is not loaded.\"));\n\t            return retVal;\n\t        }\n\t\n\t        function onConnect() {\n\t            var stats = respoke.MediaStatsParser({\n\t                peerConnection: pc,\n\t                interval: params.interval,\n\t                onStats: function statsHandler(stats) {\n\t                    if (!pc) {\n\t                        return;\n\t                    }\n\t\n\t                    /**\n\t                     * This event is fired every 5 seconds by default, configurable by the 'interval' property to\n\t                     * `call.startStats` and reports the current state of media statistics.\n\t                     * @event respoke.PeerConnection#stats\n\t                     * @type {respoke.Event}\n\t                     * @property {object} stats - an object with stats in it.\n\t                     * @property {string} name - the event name.\n\t                     * @property {respoke.PeerConnection}\n\t                     */\n\t                    that.fire('stats', {\n\t                        stats: stats\n\t                    });\n\t                }\n\t            });\n\t            that.listen('close', function closeHandler(evt) {\n\t\n\t                stats.stopStats();\n\t            }, true);\n\t            deferred.resolve();\n\t        }\n\t\n\t        if (!pc) {\n\t            that.once('stream-received', onConnect);\n\t        } else {\n\t            onConnect();\n\t        }\n\t\n\t        return retVal;\n\t    }\n\t\n\t    if (respoke.MediaStats) {\n\t        that.getStats = getStats;\n\t    }\n\t\n\t    /**\n\t     * Create the RTCPeerConnection and add handlers. Process any offer we have already received.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.init\n\t     */\n\t    that.init = function init() {\n\t        log.debug('PC.init');\n\t\n\t        if (pc) {\n\t            return;\n\t        }\n\t\n\t        that.report.callStarted = new Date().getTime();\n\t\n\t        pc = new RTCPeerConnection(that.servers, pcOptions);\n\t        pc.onicecandidate = onIceCandidate;\n\t        pc.onnegotiationneeded = onNegotiationNeeded;\n\t        pc.oniceconnectionstatechange = onIceConnectionStateChange;\n\t        pc.onaddstream = function onaddstream(evt) {\n\t            /**\n\t             * Indicate the RTCPeerConnection has received remote media.\n\t             * @event respoke.PeerConnection#remote-stream-received\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('remote-stream-received', {\n\t                stream: evt.stream\n\t            });\n\t        };\n\t        pc.onremovestream = function onremovestream(evt) {\n\t            /**\n\t             * Indicate the remote side has stopped sending media.\n\t             * @event respoke.PeerConnection#remote-stream-removed\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('remote-stream-removed', {\n\t                stream: evt.stream\n\t            });\n\t        };\n\t        pc.ondatachannel = function ondatachannel(evt) {\n\t            /**\n\t             * CAUTION: This event is only called for the callee because RTCPeerConnection#ondatachannel\n\t             * is only called for the callee.\n\t             * @event respoke.PeerConnection#direct-connection\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('direct-connection', {\n\t                channel: evt.channel\n\t            });\n\t        };\n\t\n\t        that.state.listen('offering:entry', function (evt) {\n\t            if (that.state.caller) {\n\t                initOffer();\n\t            }\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Return an array of remote media streams.\n\t     * @muremberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.getRemoteStreams\n\t     */\n\t    that.getRemoteStreams = function () {\n\t        if (!pc) {\n\t            return [];\n\t        }\n\t        return pc.getRemoteStreams.apply(pc, Array.prototype.slice.call(arguments));\n\t    };\n\t\n\t    /**\n\t     * Return an array of local media streams.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.getLocalStreams\n\t     */\n\t    that.getLocalStreams = function () {\n\t        if (!pc) {\n\t            return [];\n\t        }\n\t        return pc.getLocalStreams.apply(pc, Array.prototype.slice.call(arguments));\n\t    };\n\t\n\t    /**\n\t     * Create a data channel.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.createDataChannel\n\t     */\n\t    that.createDataChannel = function () {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        return pc.createDataChannel.apply(pc, Array.prototype.slice.call(arguments));\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.addStream\n\t     * Expose addStream.\n\t     * @param {RTCMediaStream}\n\t     */\n\t    that.addStream = function (stream) {\n\t        if (!pc) {\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.call.fire('error', {\n\t                message: \"Got local stream in a precall state.\"\n\t            });\n\t            return;\n\t        }\n\t        pc.addStream(stream);\n\t    };\n\t\n\t    /**\n\t     * Process a local ICE Candidate\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.onIceCandidate\n\t     * @private\n\t     * @param {RTCIceCandidate}\n\t     */\n\t    function onIceCandidate(oCan) {\n\t        var candidate = oCan.candidate; // {candidate: ..., sdpMLineIndex: ... }\n\t        if (!pc) {\n\t            return;\n\t        }\n\t\n\t        // From http://www.w3.org/TR/webrtc/#operation\n\t        // If the intent of the ICE Agent is to notify the script that:\n\t        //  [snip]\n\t        //  * The gathering process is done.\n\t        //    Set connection's ice gathering state to completed and let newCandidate be null.\n\t        if (!candidate || !candidate.candidate) {\n\t            if (pc.iceGatheringState === 'complete') {\n\t                localCandidatesComplete = true;\n\t                localCandidatesFSM.dispatch('localIceCandidate');\n\t            }\n\t            return;\n\t        }\n\t\n\t        if (that.forceTurn === true && candidate.candidate.indexOf(\"typ relay\") === -1) {\n\t            log.debug(\"Dropping candidate because forceTurn is on.\");\n\t            return;\n\t        } else if (that.disableTurn === true && candidate.candidate.indexOf(\"typ relay\") !== -1) {\n\t            log.debug(\"Dropping candidate because disableTurn is on.\");\n\t            return;\n\t        }\n\t\n\t        localCandidatesFSM.dispatch('localIceCandidate', {candidate: candidate});\n\t    }\n\t\n\t    /**\n\t     * Handle ICE state change\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.onIceConnectionStateChange\n\t     * @private\n\t     */\n\t    function onIceConnectionStateChange(evt) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t\n\t        if (pc.iceConnectionState === 'connected') {\n\t            /**\n\t             * Indicate that we've successfully connected to the remote side. This is only helpful for the\n\t             * outgoing connection.\n\t             * @event respoke.PeerConnection#connect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('connect');\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Handle renegotiation\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.onNegotiationNeeded\n\t     * @private\n\t     */\n\t    function onNegotiationNeeded() {\n\t        log.warn(\"Negotiation needed.\");\n\t    }\n\t\n\t    /**\n\t     * Process any ICE candidates that we received from the other side while we were waiting on the other\n\t     * party's SDP to arrive and be processed.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.processReceivingQueue\n\t     * @private\n\t     */\n\t    function processReceivingQueue() {\n\t        candidateReceivingQueue.trigger(function processIce(can) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t\n\t            pc.addIceCandidate(new RTCIceCandidate(can.candidate), function onSuccess() {\n\t                log.debug((that.state.caller ? 'caller' : 'callee'), 'got a remote candidate.', can.candidate);\n\t                that.report.candidatesReceived.push(can.candidate);\n\t            }, function onError(e) {\n\t                log.error(\"Couldn't add ICE candidate: \" + e.message, can.candidate);\n\t            });\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Save an SDP we've gotten from the browser which will be an offer and send it to the other\n\t     * side.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.saveOfferAndSend\n\t     * @param {RTCSessionDescription}\n\t     * @private\n\t     */\n\t    function saveOfferAndSend(oSession) {\n\t        oSession.type = 'offer';\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        log.debug('setting and sending offer', oSession);\n\t        that.report.sdpsSent.push(oSession);\n\t\n\t        pc.setLocalDescription(oSession, function successHandler(p) {\n\t            oSession.type = 'offer';\n\t            signalOffer({\n\t                call: that.call,\n\t                sessionDescription: oSession,\n\t                onSuccess: function () {\n\t                    that.state.sentSDP = true;\n\t                    localCandidatesFSM.dispatch('ready');\n\t                },\n\t                onError: function (err) {\n\t                    log.error('offer could not be sent', err);\n\t                    that.call.hangup({signal: false});\n\t                }\n\t            });\n\t        }, function errorHandler(p) {\n\t            var err = new Error('Error calling setLocalDescription on offer I created.');\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.call.fire('error', {\n\t                message: err.message\n\t            });\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Save our SDP we've gotten from the browser which will be an answer and send it to the\n\t     * other side.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.saveAnswerAndSend\n\t     * @param {RTCSessionDescription}\n\t     * @private\n\t     */\n\t    function saveAnswerAndSend(oSession) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t\n\t        if (!that.state.caller) {\n\t            that.report.callerconnection = that.call.connectionId;\n\t        }\n\t\n\t        oSession.type = 'answer';\n\t        log.debug('setting and sending answer', oSession);\n\t        that.report.sdpsSent.push(oSession);\n\t\n\t        pc.setLocalDescription(oSession, function successHandler(p) {\n\t            oSession.type = 'answer';\n\t            signalAnswer({\n\t                sessionDescription: oSession,\n\t                call: that.call,\n\t                onSuccess: function () {\n\t                    localCandidatesFSM.dispatch('ready');\n\t                }\n\t            });\n\t            that.state.sentSDP = true;\n\t        }, function errorHandler(p) {\n\t            var err = new Error('Error calling setLocalDescription on answer I created.');\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.call.fire('error', {\n\t                message: err.message\n\t            });\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Send what are known in telecom world as DTMF tones to the other party. This allows the user to interact with\n\t     * IVRs when connected to a PSTN phone call for example.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.sendTones\n\t     * @param {object} param\n\t     * @param {string} [param.tones] - This string can be made up of the characters `0 through to 9`, `A through\n\t     to D`, a `#` or a `*` and are case insensitive. These characters form tones of different frequencies.\n\t     You can also include the character `,` to insert a delay of 2 seconds before sending the next tone.\n\t     * @param {number} [param.duration] - Optional number in milliseconds to indicate how long to play the individual\n\t     tone for. This value needs to be between 40 and 6000 and defaults to 100.\n\t     * @param {number} [param.gap] - Optional number in mlliseconds to indicate the gap between playing the tones.\n\t     This value needs to be larger than 30 and defaults to 70.\n\t     * @param {function} [params.onSuccess] - Success handler for this invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @fires respoke.PeerConnection#tone-sent\n\t     * @fires respoke.PeerConnection#tone-sending-complete\n\t     */\n\t\n\t    that.sendTones = function (params) {\n\t        var deferred = Q.defer();\n\t\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t\n\t        params = typeof params === 'object' ? params  : {};\n\t\n\t        params.duration = params.duration || 100;\n\t        params.gap = params.gap || 50;//chrome says minimum is 50 not 30 like the spec\n\t\n\t        var err;\n\t\n\t        if (!pc) {\n\t            err = new Error('No Peer Connection available');\n\t        }\n\t        if (!params.tones) {\n\t            err = new Error('Unable to send tones as none passed in');\n\t        }\n\t\n\t        if (params.duration > 6000 || params.duration < 40) {\n\t            err = new Error('Unable to send tones as duration needs to be between 40 and 6000 milliseconds');\n\t        }\n\t\n\t        if (params.gap < 50 ) {\n\t            err = new Error('Unable to send tones as gap needs to be greater than 50 milliseconds');\n\t        }\n\t\n\t        if (params.tones && !params.tones.match(/^([A-D0-9,#*])+$/ig)) {\n\t            err = new Error('Unable to send tones as tones passed in were not in correct format');\n\t        }\n\t\n\t        if (pc && !pc.createDTMFSender) {\n\t            err = new Error('Unable to send tones in this browser');\n\t        }\n\t\n\t        if (err) {\n\t            log.warn(err);\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        if (digitSender) {\n\t            err = new Error('Unable to queue tones on audio track as a digitSender already exists');\n\t            log.warn(err);\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        var audioTracks = that.call.outgoingMedia.getAudioTracks();\n\t        if (!audioTracks || audioTracks.length < 1) {\n\t            err = new Error('Could not send tones \"' + params.tones + '\" because not audio sent yet');\n\t            log.warn(err);\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        digitSender = pc.createDTMFSender(audioTracks[0]);\n\t\n\t        digitSender.ontonechange = function onToneChange(evt) {\n\t            /**\n\t             * Indicate the RTCPeerConnection has sent a tone.\n\t             * @event respoke.PeerConnection#tone-sent\n\t             * @type {respoke.Event}\n\t             * @property {string} evt.tone\n\t             * @property {number} evt.duration\n\t             * @property {number} evt.gap\n\t             */\n\t\n\t            var eventData = {\n\t                tone: evt.tone,\n\t                duration: digitSender.duration,\n\t                gap: digitSender.interToneGap\n\t            };\n\t\n\t            if (evt.tone !== '') {\n\t                that.call.fire('tone-sent', eventData);\n\t            }\n\t\n\t            //empty string in evt.tone represents end of the queue so do tidy up here for sendTones & cancelTones\n\t            if (evt.tone === '') {\n\t\n\t                digitSender = null;\n\t\n\t                if (!cancellingTones) {\n\t\n\t                    /**\n\t                     * Indicate the RTCPeerConnection has finished sending tones, unless they were cancelled.\n\t                     * @event respoke.PeerConnection#tone-sending-complete\n\t                     * @type {respoke.Event}\n\t                     * @property {string} name - the event name.\n\t                     */\n\t                    deferred.resolve();\n\t                    that.call.fire('tone-sending-complete');\n\t                } else {\n\t                    cancellingTones = false;\n\t                    deferred.reject(new Error('Tone playback cancelled'));\n\t                }\n\t\n\t            }\n\t\n\t        };\n\t\n\t        if (!digitSender.canInsertDTMF) {\n\t            err = new Error('Unable to insert tones into audio track');\n\t            log.warn(err);\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        try {\n\t            digitSender.insertDTMF(params.tones, params.duration, params.gap);\n\t        } catch (e) {\n\t            err = new Error('Unable to queue tones on audio track due to an error');\n\t            log.warn(err, params, e);\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t        log.debug('successfully queued playback of tones', {\n\t            tones: digitSender.toneBuffer,\n\t            duration: digitSender.duration,\n\t            gap: digitSender.interToneGap\n\t        });\n\t\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Cancel any tones still being sent via sendTones.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.cancelTones\n\t     * @param {object} param\n\t     * @param {function} [params.onSuccess] - Success handler for this invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @fires respoke.PeerConnection\n\t     * @fires respoke.PeerConnection#tone-sending-cancelled\n\t     */\n\t\n\t    that.cancelTones = function (params) {\n\t\n\t        var deferred = Q.defer();\n\t\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t        var err;\n\t\n\t        if (!pc) {\n\t            err = new Error('No Peer Connection available');\n\t            log.warn(err);\n\t            deferred.reject(err);\n\t            return retVal;\n\t\n\t        }\n\t\n\t        if (!digitSender) {\n\t            err = new Error('Unable to queue tones on audio track as a digitSender does not exist');\n\t            log.warn(err);\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        if (!digitSender.canInsertDTMF) {\n\t            err = new Error('Unable to cancel playback of tones as cannot change tones on audio track');\n\t            log.warn(err);\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        cancellingTones = true;\n\t        var tonesToCancel = digitSender.toneBuffer;\n\t\n\t        try {\n\t            digitSender.insertDTMF('');\n\t        } catch (e) {\n\t            err = new Error('Unable to cancel playback of tones');\n\t            log.warn(err, e);\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        /**\n\t         * Indicate the RTCPeerConnection has finished cancelling tones.\n\t         * @event respoke.PeerConnection#tone-sending-cancelled\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         */\n\t        deferred.resolve();\n\t        that.call.fire('tone-sending-cancelled', {\n\t            cancelledTones: tonesToCancel\n\t        });\n\t\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n\t     * signal is not false and we have not received a hangup signal from the remote party.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.close\n\t     * @fires respoke.PeerConnection#destoy\n\t     * @param {object} param\n\t     * @param {boolean} [param.signal] - Optional flag to indicate whether to send or suppress sending\n\t     * a hangup signal to the remote side. This is set to false by the library if we're responding to a\n\t     * hangup signal.\n\t     * @fires respoke.PeerConnection#close\n\t     */\n\t    that.close = function (params) {\n\t        params = params || {};\n\t        toSendHangup = true;\n\t\n\t        if (that.state.caller === true) {\n\t            if (!that.state.sentSDP) {\n\t                // Never send hangup if we are the caller but we haven't sent any other signal yet.\n\t                toSendHangup = false;\n\t            }\n\t        }\n\t\n\t        toSendHangup = (typeof params.signal === 'boolean' ? params.signal : toSendHangup);\n\t        if (toSendHangup) {\n\t            log.info('sending hangup');\n\t            signalHangup({\n\t                call: that.call\n\t            });\n\t        }\n\t\n\t        that.report.callStopped = new Date().getTime();\n\t\n\t        /**\n\t         * Indicate that the RTCPeerConnection is closed.\n\t         * @event respoke.PeerConnection#close\n\t         * @type {respoke.Event}\n\t         * @property {boolean} sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.PeerConnection}\n\t         */\n\t        that.fire('close', {\n\t            sentSignal: toSendHangup\n\t        });\n\t        that.ignore();\n\t\n\t        if (pc && that.report) {\n\t            pc.close();\n\t        }\n\t        pc = null;\n\t\n\t        if (that.call.enableCallDebugReport) {\n\t            signalReport({\n\t                report: that.report\n\t            });\n\t        }\n\t        that.report = null;\n\t    };\n\t    that.close = respoke.callOnce(that.close);\n\t\n\t    /**\n\t     * Indicate whether a call is being setup or is in progress.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.isActive\n\t     * @returns {boolean}\n\t     */\n\t    that.isActive = function () {\n\t        return !!(pc && ['completed', 'connected', 'new', 'checking'].indexOf(pc.iceConnectionState) > -1);\n\t    };\n\t\n\t    /**\n\t     * Save the answer and tell the browser about it.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.listenAnswer\n\t     * @param {object} evt\n\t     * @param {object} evt.signal - The signal, including the remote SDP and the connectionId of the endpoint who\n\t     * answered the call.\n\t     * @private\n\t     */\n\t    function listenAnswer(evt) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        log.debug('got answer', evt.signal);\n\t\n\t        that.report.sdpsReceived.push(evt.signal.sessionDescription);\n\t        that.state.sendOnly = respoke.sdpHasReceiveOnly(evt.signal.sessionDescription.sdp);\n\t        that.sdpExpectedStreamCount = respoke.sdpStreamCount(evt.signal.sessionDescription.sdp);\n\t        that.report.lastSDPString = evt.signal.sessionDescription.sdp;\n\t\n\t        if (that.state.caller) {\n\t            that.report.calleeconnection = evt.signal.fromConnection;\n\t        }\n\t\n\t        that.call.connectionId = evt.signal.fromConnection;\n\t        // TODO don't signal connected more than once.\n\t        signalConnected({\n\t            call: that.call\n\t        });\n\t\n\t        pc.setRemoteDescription(\n\t            new RTCSessionDescription(evt.signal.sessionDescription),\n\t            function successHandler() {\n\t                processReceivingQueue();\n\t                that.state.dispatch('receiveAnswer');\n\t            }, function errorHandler(p) {\n\t                var newErr = new Error(\"Exception calling setRemoteDescription on answer I received.\");\n\t                that.report.callStoppedReason = newErr.message;\n\t                /**\n\t                 * This event is fired on errors that occur during call setup or media negotiation.\n\t                 * @event respoke.Call#error\n\t                 * @type {respoke.Event}\n\t                 * @property {string} reason - A human readable description about the error.\n\t                 * @property {respoke.Call} target\n\t                 * @property {string} name - the event name.\n\t                 */\n\t                that.call.fire('error', {\n\t                    message: newErr.message\n\t                });\n\t                log.error('set remote desc of answer failed', evt.signal.sessionDescription, p);\n\t                that.report.callStoppedReason = 'setRemoteDescription failed at answer.';\n\t                that.close();\n\t            }\n\t        );\n\t    }\n\t\n\t    /**\n\t     * Figure out who won the call. This necessary to prevent two connections of the same endpoint from thinking\n\t     * they are both on the same call.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.listenConnected\n\t     * @private\n\t     */\n\t    function listenConnected(evt) {\n\t        if (evt.signal.connectionId !== client.connectionId) {\n\t            log.debug(\"Hanging up because I didn't win the call.\", evt.signal, client);\n\t            that.call.hangup({signal: false});\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Send the initiate signal to start the modify process. This method is only called by the caller of the\n\t     * renegotiation.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.startModify\n\t     * @param {object} params\n\t     * @param {object} [params.constraints] - Indicate this is a request for media and what type of media.\n\t     * @param {boolean} [params.directConnection] - Indicate this is a request for a direct connection.\n\t     */\n\t    that.startModify = function (params) {\n\t        defModify = Q.defer();\n\t        signalModify({\n\t            action: 'initiate',\n\t            call: that.call,\n\t            constraints: params.constraints,\n\t            directConnection: params.directConnection\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Indicate a desire from the other side to renegotiate media.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.listenModify\n\t     * @param {object} evt\n\t     * @param {object} evt.signal\n\t     * @private\n\t     */\n\t    function listenModify(evt) {\n\t        var err;\n\t        log.debug('PC.listenModify', evt.signal);\n\t\n\t        if (evt.signal.action === 'accept') {\n\t            if (defModify.promise.isPending()) {\n\t                defModify.resolve();\n\t                /**\n\t                 * Indicate that the remote party has accepted our invitation to begin renegotiating media.\n\t                 * @event respoke.PeerConnection#modify-accept\n\t                 * @type {respoke.Event}\n\t                 * @property {string} name - the event name.\n\t                 * @property {respoke.PeerConnection}\n\t                 */\n\t                that.fire('modify-accept', {signal: evt.signal});\n\t            }\n\t            return;\n\t        } else if (evt.signal.action === 'reject') {\n\t            if (defModify.promise.isPending()) {\n\t                err = new Error(\"Remote party cannot negotiate.\");\n\t                log.debug(err.message);\n\t                defModify.reject(err);\n\t                /**\n\t                 * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n\t                 * @event respoke.PeerConnection#modify-reject\n\t                 * @type {respoke.Event}\n\t                 * @property {Error} err\n\t                 * @property {string} name - the event name.\n\t                 * @property {respoke.PeerConnection}\n\t                 */\n\t                that.fire('modify-reject', {err: err});\n\t            }\n\t            return;\n\t        }\n\t\n\t        // This code only gets executed if signal.action === 'initiate'\n\t        if (defModify && defModify.promise.isPending()) {\n\t            // TODO compare signal request ID and accept if we have the higher request ID,\n\t            // reject if we have the lower request ID.\n\t            err = new Error(\"Got modify in a negotiating state.\");\n\t            log.debug(err.message);\n\t            defModify.reject(err);\n\t            /**\n\t             * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n\t             * @event respoke.PeerConnection#modify-reject\n\t             * @type {respoke.Event}\n\t             * @property {Error} err\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('modify-reject', {err: err});\n\t            signalModify({\n\t                action: 'reject',\n\t                call: that.call\n\t            });\n\t            return;\n\t        }\n\t\n\t        defModify = Q.defer();\n\t\n\t        if (!that.state.sentSDP || that.state.isState('idle')) {\n\t            err = new Error(\"Got modify in a precall state.\");\n\t            /**\n\t             * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n\t             * @event respoke.PeerConnection#modify-reject\n\t             * @type {respoke.Event}\n\t             * @property {Error} err\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('modify-reject', {err: err});\n\t            signalModify({\n\t                action: 'reject',\n\t                call: that.call\n\t            });\n\t            defModify.reject(err);\n\t            return;\n\t        }\n\t\n\t        /**\n\t         * Indicate that the remote party has accepted our invitation to begin renegotiating media.\n\t         * @event respoke.PeerConnection#modify-accept\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.PeerConnection}\n\t         */\n\t        that.fire('modify-accept', {signal: evt.signal});\n\t        signalModify({\n\t            action: 'accept',\n\t            call: that.call\n\t        });\n\t        defModify.resolve();\n\t    }\n\t\n\t    /**\n\t     * Save the candidate. If we initiated the call, place the candidate into the queue so\n\t     * we can process them after we receive the answer.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.addRemoteCandidate\n\t     * @param {object} params\n\t     * @param {RTCIceCandidate} params.candidate\n\t     */\n\t    that.addRemoteCandidate = function (params) {\n\t        if (!pc && (that.state.sentSDP || that.state.receivedSDP)) { // we hung up.\n\t            return;\n\t        }\n\t\n\t        if (!params || !params.candidate || !params.candidate.hasOwnProperty('sdpMLineIndex')) {\n\t            log.warn(\"addRemoteCandidate got wrong format!\", params);\n\t            return;\n\t        }\n\t\n\t        candidateReceivingQueue.push(params);\n\t    };\n\t\n\t    that.call.listen('signal-answer', listenAnswer, true);\n\t    that.call.listen('signal-connected', listenConnected, true);\n\t    that.call.listen('signal-modify', listenModify, true);\n\t\n\t    return that;\n\t}; // End respoke.PeerConnection\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Copyright (c) 2010 David Durman\n\t//\n\t// The contents of this file are subject to the MIT License (the \"License\");\n\t// you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\t// http://opensource.org/licenses/MIT.\n\t//\n\t// This hierarchical state machine implementation has been inspired\n\t// by the QP active object framework, see http://www.state-machine.com/\n\t\n\t\n\t(function(root, factory){\n\t    \"use strict\";\n\t\n\t    if (true) {\n\t\n\t        // Node. Does not work with strict CommonJS, but\n\t        // only CommonJS-like enviroments that support module.exports,\n\t        // like Node.\n\t        module.exports = factory();\n\t\n\t    } else if (typeof define === 'function' && define.amd) {\n\t\n\t        // AMD. Register as an anonymous module.\n\t        define(factory);\n\t\n\t    } else {\n\t\n\t        // Browser globals (root is window)\n\t        root.Statechart = factory();\n\t    }\n\t\n\t}(this, function(){\n\t\n\t    \"use strict\";\n\t\n\t    var assert = function(assertion){\n\t        if (!assertion) {\n\t            throw new Error(\"Assertion failed.\");\n\t        }\n\t    };\n\t\n\t\n\t    // Statechart.\n\t    // -----------\n\t\n\t    // `myState` - the current state\n\t    // `mySource` - the source of the current transition\n\t\n\t    var Statechart = {\n\t\n\t        run: function(opt){\n\t            opt = opt || {};\n\t            this.debug = opt.debug ? opt.debug : function(){};\n\t            this.construct(this.initialState);\n\t            this.init(null);\n\t        },\n\t\n\t        construct: function(initialState){\n\t            this.myState = this.top();\n\t            this.mySource = this.state(\"Initial\");\n\t\n\t            // Initial pseudo-state\n\t            this.states.Initial = {\n\t                empty: function(){\n\t                    this.newInitialState(initialState);\n\t                }\n\t            };\n\t            var handled = function(){ return null; };\n\t\n\t            // TOP state\n\t            this.states.TOP = {\n\t                entry: handled,\n\t                exit:  handled,\n\t                init:  handled,\n\t                empty: handled\n\t            };\n\t            this.flatten();\n\t        },\n\t\n\t        // Trigger the initial transition and recursively enter the submachine of the top state.\n\t        // Must be called only once for a given Statechart before dispatching any events to it.\n\t        init: function(anEventOrNull){\n\t            assert(this.myState === this.top() && this.mySource !== null);\n\t            var s = this.myState;    // save top in temp\n\t            this.mySource.trigger(anEventOrNull);    // topmost initial transition\n\t            assert(s.equals(this.myState.superstate()));    // verify that we only went one level deep\n\t            s = this.myState;\n\t            s.enter();\n\t            while (s.init() === null) {    // while init is handled (i.e. till we reach a leaf node)\n\t                assert(s.equals(this.myState.superstate()));    // verify that we only went one level deep\n\t                s = this.myState;\n\t                s.enter();\n\t            }\n\t        },\n\t\n\t        state: function(stateOrName){\n\t            return (stateOrName && stateOrName instanceof QState) ? stateOrName : new QState(this, stateOrName);\n\t        },\n\t\n\t        top: function(stateOrName){\n\t            // create the top state only once and store it to an auxiliary property\n\t            return (this._topState || (this._topState = new QState(this, \"TOP\")));\n\t        },\n\t\n\t        currentState: function(){\n\t            return this.myState;\n\t        },\n\t\n\t        flatten: function(){\n\t            this.statesTable = this.statesTable || {};\n\t            this._flatten(this.states, this.top().name);\n\t        },\n\t\n\t        _flatten: function(states, parent){\n\t            if (!states) {\n\t                return;\n\t            }\n\t\n\t            for (var state in states) {\n\t                if (states.hasOwnProperty(state)) {\n\t                    this.statesTable[state] = states[state];\n\t                    this.statesTable[state].parent = parent;\n\t                    this._flatten(states[state].states, state);\n\t                }\n\t            }\n\t        },\n\t\n\t        selectState: function(stateName){\n\t            return this.statesTable[stateName];\n\t        },\n\t\n\t        dispatchEvent: function(anEvent, state, act){\n\t            act = act || state[anEvent.type];\n\t\n\t            // Action might also be an array in which case it is assumed that evaluating guards decides\n\t            // which target to enter.\n\t            if (act instanceof Array) {\n\t                for (var i = 0; i < act.length; i++) {\n\t                    this.dispatchEvent(anEvent, state, act[i]);\n\t                }\n\t            }\n\t\n\t            // @todo This is terrible edge case used just for more fancy Statechart representation\n\t            // It allows using \"MyState\": { init: \"MySubState\", ... } intead of\n\t            // \"MyState\": { init: function(){ this.newInitialState(\"MySubState\"); }, ... }\n\t            // In some cases the latter form can be useful for better control of the Statechart\n\t            if (anEvent.type === \"init\" && typeof act === \"string\") {\n\t                this.newInitialState(act);\n\t                return null; // handled\n\t            }\n\t\n\t            if (act instanceof Function){\n\t                act.call(this, anEvent.args);\n\t                return null;  // handled\n\t            } else if (act) {\n\t                // no guard at all or the guard condition is met\n\t                if (!act.guard || (act.guard && act.guard.call(this, anEvent.args))){\n\t                    if (act.action) {\n\t                        act.action.call(this, anEvent.args);\n\t                    }\n\t                    if (act.target) {\n\t                        this.newState(act.target);\n\t                    }\n\t                    return null;  // handled\n\t                }\n\t            } else {        // act is undefined (no handler in state for anEvent)\n\t                if (state === this.selectState(\"TOP\")) {\n\t                    this.handleUnhandledEvent(anEvent); // not-handled\n\t                    return null;    // handled (TOP state handles all events)\n\t                }\n\t            }\n\t            return this.state(state.parent); // not-handled\n\t        },\n\t\n\t        // Override this when needed.\n\t        handleUnhandledEvent: function(anEvent){\n\t            this.debug(\"Unhandled event: \" + anEvent.type);\n\t            return null;\n\t        },\n\t\n\t        // Traverse the state hierarchy starting from the currently active state myState.\n\t        // Advance up the state hierarchy (i.e., from substates to superstates), invoking all\n\t        // the state handlers in succession. At each level of state nesting, it intercepts the value\n\t        // returned from a state handler to obtain the superstate needed to advance to the next level.\n\t        dispatch: function(anEvent, args){\n\t            if (!anEvent || !(anEvent instanceof QEvent)) {\n\t                anEvent = new QEvent(anEvent, args);\n\t            }\n\t            this.mySource = this.myState;\n\t            while (this.mySource) {\n\t                this.mySource = this.mySource.trigger(anEvent);\n\t            }\n\t        },\n\t\n\t        // Performs dynamic transition. (macro Q_TRAN_DYN())\n\t        newState: function(aStateName){\n\t            this.transition(this.state(aStateName));\n\t        },\n\t\n\t        // Used by handlers only in response to the #init event. (macro Q_INIT())\n\t        // USAGE: return this.newInitialState(\"whatever\");\n\t        // @return null for convenience\n\t\n\t        newInitialState: function(aStateOrName){\n\t            this.myState = this.state(aStateOrName);\n\t            return null;\n\t        },\n\t\n\t        // Dynamic transition. (Q_TRAN_DYN())\n\t        transition: function(target){\n\t            assert(!target.equals(this.top()));\n\t\n\t            var entry = [];\n\t            var mySource = this.mySource;\n\t            var s = this.myState;\n\t\n\t            // exit all the nested states between myState and mySource\n\t            assert(s !== null);\n\t            assert(mySource !== null);\n\t            while (!s.equals(mySource)) {\n\t                s = s.exit() || s.superstate();\n\t            }\n\t\n\t            // check all seven possible source/target state combinations\n\t\n\t\t    entry.push(target);\n\t\n\t            // (a) mySource == target (self transition)\n\t            if (mySource.equals(target)) {\n\t                mySource.exit();\n\t                return this.enterVia(target, entry);\n\t            }\n\t\n\t            // (b) mySource == target.superstate (one level deep)\n\t            var p = target.superstate();\n\t            if (mySource.equals(p)) {\n\t                return this.enterVia(target, entry);\n\t            }\n\t\n\t            assert(mySource !== null);\n\t\n\t            // (c) mySource.superstate == target.superstate (most common - fsa)\n\t            var q = mySource.superstate();\n\t            if (q.equals(p)) {\n\t                mySource.exit();\n\t                return this.enterVia(target, entry);\n\t            }\n\t\n\t            // (d) mySource.superstate == target (one level up)\n\t            if (q.equals(target)) {\n\t                mySource.exit();\n\t                entry.pop();    // do not enter the LCA\n\t                return this.enterVia(target, entry);\n\t            }\n\t\n\t            // (e) mySource == target.superstate.superstate... hierarchy (many levels deep)\n\t\t    entry.push(p);\n\t            s = p.superstate();\n\t            while (s !== null) {\n\t                if (mySource.equals(s)) {\n\t                    return this.enterVia(target, entry);\n\t                }\n\t\n\t\t\tentry.push(s);\n\t                s = s.superstate();\n\t            }\n\t\n\t            // otherwise we're definitely exiting mySource\n\t            mySource.exit();\n\t\n\t            // entry array is complete, save its length to avoid computing it repeatedly\n\t            var entryLength = entry.length;\n\t\n\t            // (f) mySource.superstate == target.superstate.superstate... hierarchy\n\t            var lca;\n\t            for (lca = entryLength - 1; lca >= 0; lca -= 1) {\n\t                if (q.equals(entry[lca])) {\n\t                    return this.enterVia(target, entry.slice(0, lca)); // do not enter lca\n\t                }\n\t            }\n\t\n\t            // (g) each mySource.superstate.superstate... for each target.superstate.superstate...\n\t            s = q;\n\t            while (s !== null) {\n\t                for (lca = entryLength - 1; lca >= 0; lca -= 1) {\n\t                    if (s.equals(entry[lca])) {\n\t                        return this.enterVia(target, entry.slice(0, lca)); // do not enter lca\n\t                    }\n\t                }\n\t                s.exit();\n\t                s = s.superstate();\n\t            }\n\t        },\n\t\n\t        // tail of transition()\n\t        // We are in the LCA of mySource and target.\n\t        enterVia: function(target, entry){\n\t\n\t            // retrace the entry path in reverse order\n\t            var idx = entry.length;\n\t            while (idx > 0) {\n\t                idx--;\n\t                entry[idx].enter();\n\t            }\n\t\n\t            this.myState = target;\n\t            while (target.init() === null) {\n\t                // initial transition must go one level deep\n\t                assert(target.equals(this.myState.superstate()));\n\t                target = this.myState;\n\t                target.enter();\n\t            }\n\t        }\n\t    };\n\t\n\t    // QState.\n\t    // -------\n\t\n\t    function QState(fsm, name){\n\t        this.fsm = fsm;\n\t        this.name = name;\n\t    }\n\t\n\t    QState.prototype = {\n\t        equals: function(state){\n\t            return (this.name === state.name && this.fsm === state.fsm);\n\t        },\n\t\n\t        dispatchEvent: function(anEvent, state){\n\t            return this.fsm.dispatchEvent(anEvent, state);\n\t        },\n\t\n\t        trigger: function(anEvent){\n\t            var evt = anEvent || QEventEmpty;\n\t            var state = this.fsm.selectState(this.name);\n\t            return this.dispatchEvent(evt, state);\n\t        },\n\t\n\t        enter: function(){\n\t            this.fsm.debug(\"[\" + this.name + \"] enter\");\n\t            return this.trigger(QEventEntry);\n\t        },\n\t\n\t        exit: function(){\n\t            this.fsm.debug(\"[\" + this.name + \"] exit\");\n\t            return this.trigger(QEventExit);\n\t        },\n\t\n\t        init: function(){\n\t            this.fsm.debug(\"[\" + this.name + \"] init\");\n\t            return this.trigger(QEventInit);\n\t        },\n\t\n\t        // Answer my superstate. Default is to return fsm top state.\n\t        superstate: function(){\n\t            var superstate = this.trigger(QEventEmpty);\n\t            if (superstate && superstate instanceof QState) {\n\t                return superstate;\n\t            }\n\t            superstate = this.fsm.top();\n\t            if (this.name === superstate.name) {\n\t                return null;\n\t            }\n\t            return superstate;\n\t        }\n\t    };\n\t\n\t    // QEvent\n\t    // ------\n\t\n\t    function QEvent(type, args){\n\t        this.type = type;\n\t        this.args = args;\n\t    }\n\t\n\t    // these events are static, they do not carry any arguments\n\t    // -> create them only once\n\t    // moreover, they don't have to be exposed to the outer world\n\t    var QEventEntry = new QEvent(\"entry\");\n\t    var QEventExit = new QEvent(\"exit\");\n\t    var QEventInit = new QEvent(\"init\");\n\t    var QEventEmpty = new QEvent(\"empty\");\n\t\n\t\n\t    return Statechart;\n\t}));\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Copyright 2015, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t */\n\t\n\tvar respoke = __webpack_require__(1);\n\tvar log = respoke.log;\n\tvar Statechart = __webpack_require__(19);\n\tvar Q = __webpack_require__(6);\n\t\n\t/**\n\t * State machine for WebRTC calling, data channels, and screen sharing.\n\t * NOTE: All state transitions are synchronous! However, listeners to the events this class fires will be called\n\t * asynchronously.\n\t * @class respoke.CallState\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {respoke.Call} call\n\t * @link https://cdn.respoke.io/respoke.min.js\n\t * @returns {respoke.CallState}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var fsm;\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    that.className = 'respoke.CallState';\n\t    delete that.instanceId;\n\t\n\t    var client = respoke.getClient(instanceId);\n\t    var allTimers = [];\n\t    var answerTimer;\n\t    var answerTimeout = params.answerTimeout || 10000;\n\t    var receiveAnswerTimer;\n\t    var receiveAnswerTimeout = params.receiveAnswerTimeout || 60000;\n\t    var connectionTimer;\n\t    var connectionTimeout = params.connectionTimeout || 10000;\n\t    var modifyTimer;\n\t    var modifyTimeout = params.modifyTimeout || 60000;\n\t    var oldRole;\n\t\n\t    /*\n\t     * These can quite often result in a condition in which they do not cause a transition to occur.\n\t     * There is at least one \"universal\" (air quotes) event which probably? shouldn't? but may\n\t     * result in a non-transition error when it's OK, and that is the 'reject' event.\n\t     */\n\t    var nontransitionEvents = ['receiveLocalMedia', 'receiveRemoteMedia', 'approve', 'answer', 'sentOffer',\n\t        'receiveAnswer'];\n\t\n\t    function assert(condition) {\n\t        if (!condition) {\n\t            throw new Error(\"Assertion failed.\");\n\t        }\n\t    }\n\t\n\t    that.hasLocalMediaApproval = false;\n\t    that.hasLocalMedia = false;\n\t    that.receivedBye = false;\n\t    that.isAnswered = false;\n\t    that.sentSDP = false;\n\t    that.receivedSDP = false;\n\t    that.processedRemoteSDP = false;\n\t    that.needDirectConnection = !!that.needDirectConnection;\n\t    that.sendOnly = !!that.sendOnly;\n\t    that.receiveOnly = !!that.receiveOnly;\n\t\n\t    // Event\n\t    var rejectEvent = [{\n\t        target: 'connected',\n\t        guard: function (params) {\n\t            // we have any media flowing or data channel open\n\t            if (typeof oldRole === 'boolean') {\n\t                // Reset the role if we have aborted a modify.\n\t                that.caller = oldRole;\n\t            }\n\t\n\t            if (modifyTimer) {\n\t                modifyTimer.clear();\n\t            }\n\t\n\t            return that.hasMedia();\n\t        }\n\t    }, {\n\t        target: 'terminated',\n\t        guard: function (params) {\n\t            params = params || {};\n\t            // we have no media flowing or data channel open\n\t            that.hangupReason = params.reason || \"no media\";\n\t            [answerTimer, receiveAnswerTimer, connectionTimer, modifyTimer].forEach(function (timer) {\n\t                if (timer) {\n\t                    timer.clear();\n\t                }\n\t            });\n\t            return !that.hasMedia();\n\t        }\n\t    }];\n\t\n\t    // Event\n\t    function rejectModify() {\n\t        // reject modification\n\t        if (modifyTimer) {\n\t            modifyTimer.clear();\n\t        }\n\t    }\n\t\n\t    // Event\n\t    function clearReceiveAnswerTimer() {\n\t        that.processedRemoteSDP = true;\n\t        if (receiveAnswerTimer) {\n\t            receiveAnswerTimer.clear();\n\t        }\n\t    }\n\t\n\t    // Event\n\t    var hangupEvent = {\n\t        target: 'terminated',\n\t        action: function (params) {\n\t            params = params || {};\n\t            that.signalBye = params.signal;\n\t            that.hangupReason = that.hangupReason || params.reason || \"none\";\n\t        }\n\t    };\n\t\n\t    function needToObtainMedia() {\n\t        return (\n\t            that.needDirectConnection !== true &&\n\t            that.receiveOnly !== true &&\n\t            that.hasLocalMedia !== true\n\t        );\n\t    }\n\t\n\t    function needToApproveDirectConnection(params) {\n\t        return (that.needDirectConnection === true && typeof params.previewLocalMedia === 'function');\n\t    }\n\t\n\t    function automaticOffering(params) {\n\t        if (that.caller !== true) {\n\t            return false;\n\t        }\n\t\n\t        // TODO: this will need to be change with media negotiation\n\t        if ((!that.needDirectConnection && that.receiveOnly) || that.hasLocalMedia) {\n\t            return true;\n\t        }\n\t        return (that.needDirectConnection === true && typeof params.previewLocalMedia !== 'function');\n\t    }\n\t\n\t    function hasListener() {\n\t        if ((client.hasListeners('call') && !that.needDirectConnection) ||\n\t                (client.hasListeners('direct-connection') && that.needDirectConnection)) {\n\t            return true;\n\t        } else {\n\t            return false;\n\t        }\n\t    }\n\t\n\t    function createTimer(func, name, time) {\n\t        var id = setTimeout(function () {\n\t            id = null;\n\t            log.error((that.caller ? \"caller's\" : \"callee's\"), name, \"timer expired.\");\n\t            func();\n\t        }, time);\n\t        log.debug('setting timer', name, 'for', time / 1000, 'secs');\n\t        var timer  = {\n\t            name: name,\n\t            clear: function () {\n\t                if (id === null) {\n\t                    return;\n\t                }\n\t                log.debug('clearing', (that.caller ? \"caller's\" : \"callee's\"), 'timer', name);\n\t                clearTimeout(id);\n\t                id = null;\n\t            }\n\t        };\n\t        allTimers.push(timer);\n\t        return timer;\n\t    }\n\t\n\t    var stateParams = {\n\t        initialState: 'idle',\n\t        states: {\n\t            // State\n\t            idle: {\n\t                // Event\n\t                exit: function () {\n\t                    that.fire('idle:exit');\n\t                },\n\t                // Event\n\t                initiate: [{\n\t                    target: 'negotiatingContainer',\n\t                    guard: function (params) {\n\t                        assert(typeof params.caller === 'boolean');\n\t                        return (params.caller === true || hasListener());\n\t                    }\n\t                }, {\n\t                    target: 'terminated',\n\t                    guard: function (params) {\n\t                        return (params.caller !== true && !hasListener());\n\t                    }\n\t                }],\n\t                receiveLocalMedia: function () {\n\t                    that.hasLocalMedia = true;\n\t                },\n\t                // Event\n\t                receiveOffer: {\n\t                    action: function (params) {\n\t                        that.receivedSDP = true;\n\t                    }\n\t                },\n\t                // Event\n\t                hangup: hangupEvent\n\t            },\n\t            // State\n\t            negotiatingContainer: {\n\t                init: \"preparing\",\n\t                // Event\n\t                hangup: hangupEvent,\n\t                // Event\n\t                modify: rejectModify,\n\t                // Event\n\t                receiveLocalMedia: function () {\n\t                    that.hasLocalMedia = true;\n\t                },\n\t                states: {\n\t                    preparing: {\n\t                        // Event\n\t                        entry: {\n\t                            action: function () {\n\t                                that.hasLocalMediaApproval = false;\n\t                                that.hasLocalMedia = false;\n\t                                that.sentSDP = false;\n\t                                that.receivedSDP = false;\n\t                                that.processedRemoteSDP = false;\n\t                                that.isAnswered = false;\n\t                                if (!that.isModifying()) {\n\t                                    answerTimer = createTimer(function () {\n\t                                        that.dispatch('reject', {reason: \"answer own call timer \" + that.caller});\n\t                                    }, 'answer own call', (that.caller ? answerTimeout : receiveAnswerTimeout));\n\t                                }\n\t                                that.fire('preparing:entry');\n\t                            }\n\t                        },\n\t                        // Event\n\t                        exit: function () {\n\t                            that.fire('preparing:exit');\n\t                            if (answerTimer) {\n\t                                answerTimer.clear();\n\t                            }\n\t                        },\n\t                        // Event\n\t                        reject: rejectEvent,\n\t                        // Event\n\t                        receiveOffer: {\n\t                            action: function (params) {\n\t                                that.receivedSDP = true;\n\t                                if (that.isAnswered) {\n\t                                    // If we get here, we are the callee and we've answered the call before the call\n\t                                    // creation/receive offer promise chain completed.\n\t                                    setTimeout(function () {\n\t                                        that.dispatch('answer', params);\n\t                                    });\n\t                                }\n\t                            }\n\t                        },\n\t                        // Event\n\t                        answer: [{\n\t                            action: function (params) {\n\t                                assert(!params.previewLocalMedia || typeof params.previewLocalMedia === 'function');\n\t                                that.isAnswered = true;\n\t                                if (typeof params.previewLocalMedia !== 'function') {\n\t                                    that.hasLocalMediaApproval = true;\n\t                                }\n\t                            }\n\t                        }, {\n\t                            // we are going to send media\n\t                            target: 'approvingDeviceAccess',\n\t                            guard: needToObtainMedia\n\t                        }, {\n\t                            // we are sending a direct connection & developer wants to approve\n\t                            target: 'approvingContent',\n\t                            guard: needToApproveDirectConnection\n\t                        }, {\n\t                            target: 'offering',\n\t                            guard: automaticOffering\n\t                        }, {\n\t                            // we are not sending anything or developer does not want to approve media.\n\t                            target: 'connecting',\n\t                            guard: function (params) {\n\t                                // caller will always answer before sending offer.\n\t                                // callee will usually answer after receiving offer if media is requested.\n\t                                if (!that.receivedSDP) {\n\t                                    return false;\n\t                                }\n\t\n\t                                if (needToObtainMedia() || needToApproveDirectConnection(params) ||\n\t                                        automaticOffering(params)) {\n\t                                    return false;\n\t                                }\n\t\n\t                                if (!params.previewLocalMedia || that.receiveOnly) {\n\t                                    setTimeout(function () {\n\t                                        params.approve();\n\t                                    });\n\t                                }\n\t                                return (that.receiveOnly === true || that.needDirectConnection === true);\n\t                            }\n\t                        }]\n\t                    },\n\t                    // State\n\t                    gettingMedia: {\n\t                        reject: rejectEvent,\n\t                        // Event\n\t                        receiveLocalMedia: [{\n\t                            action: function () {\n\t                                that.hasLocalMedia = true;\n\t                            }\n\t                        }, {\n\t                            target: 'offering',\n\t                            guard: function (params) {\n\t                                return (that.caller === true && that.hasLocalMediaApproval === true &&\n\t                                    that.hasLocalMedia === true);\n\t                            }\n\t                        }, {\n\t                            target: 'connecting',\n\t                            guard: function (params) {\n\t                                return (that.caller === false && that.hasLocalMediaApproval === true &&\n\t                                    that.hasLocalMedia === true);\n\t                            }\n\t                        }],\n\t                        states: {\n\t                            // State\n\t                            approvingDeviceAccess: {\n\t                                // Event\n\t                                entry: function () {\n\t                                    that.fire('approving-device-access:entry');\n\t                                },\n\t                                // Event\n\t                                approve: [{\n\t                                    target: 'approvingContent',\n\t                                    guard: function (params) {\n\t                                        return (typeof params.previewLocalMedia === 'function');\n\t                                    }\n\t                                }, {\n\t                                    target: 'connecting',\n\t                                    guard: function (params) {\n\t                                        return (that.caller === false &&\n\t                                            (that.hasLocalMedia === true || that.needDirectConnection === true) &&\n\t                                            typeof params.previewLocalMedia !== 'function');\n\t                                    }\n\t                                }, {\n\t                                    target: 'offering',\n\t                                    guard: function (params) {\n\t                                        return (that.caller === true && that.hasLocalMedia === true &&\n\t                                            typeof params.previewLocalMedia !== 'function');\n\t                                    }\n\t                                }]\n\t                            },\n\t                            // State\n\t                            approvingContent: {\n\t                                // Event\n\t                                entry: function () {\n\t                                    that.fire('approving-content:entry');\n\t                                },\n\t                                // Event\n\t                                exit: function () {\n\t                                    that.fire('approving-content:exit');\n\t                                },\n\t                                // Event\n\t                                approve: [function (params) {\n\t                                    that.hasLocalMediaApproval = true;\n\t                                }, {\n\t                                    target: 'offering',\n\t                                    guard: function (params) {\n\t                                        return (that.caller === true && that.hasLocalMedia === true);\n\t                                    }\n\t                                }, {\n\t                                    target: 'connecting',\n\t                                    guard: function (params) {\n\t                                        return (that.caller === false && that.hasLocalMedia === true);\n\t                                    }\n\t                                }]\n\t                            }\n\t                        }\n\t                    },\n\t                    // State\n\t                    offeringContainer: {\n\t                        init: 'offering',\n\t                        reject: rejectEvent,\n\t                        sentOffer: function () {\n\t                            // start answer timer\n\t                            receiveAnswerTimer = createTimer(function () {\n\t                                that.dispatch('reject', {reason: \"receive answer timer\"});\n\t                            }, 'receive answer', receiveAnswerTimeout);\n\t                        },\n\t                        states: {\n\t                            offering: {\n\t                                // Event\n\t                                entry: function () {\n\t                                    that.fire('offering:entry');\n\t                                },\n\t                                // Event\n\t                                exit: function () {\n\t                                    that.fire('offering:exit');\n\t                                },\n\t                                // Event\n\t                                receiveLocalMedia: [function () {\n\t                                    that.hasLocalMedia = true;\n\t                                }, {\n\t                                    target: 'connected',\n\t                                    guard: function (params) {\n\t                                        // for direct connection, local media is the same as remote media\n\t                                        return (that.needDirectConnection === true);\n\t                                    }\n\t                                }],\n\t                                // Event\n\t                                receiveRemoteMedia: {\n\t                                    target: 'connected'\n\t                                },\n\t                                // Event\n\t                                receiveAnswer: [clearReceiveAnswerTimer, {\n\t                                    target: 'connecting'\n\t                                }]\n\t                            }\n\t                        }\n\t                    },\n\t                    // State\n\t                    connectingContainer: {\n\t                        init: 'connecting',\n\t                        reject: rejectEvent,\n\t                        receiveAnswer: clearReceiveAnswerTimer,\n\t                        states: {\n\t                            connecting: {\n\t                                // Event\n\t                                entry: function () {\n\t                                    that.fire('connecting:entry');\n\t\n\t                                    // set connection timer\n\t                                    connectionTimer = createTimer(function () {\n\t                                        that.dispatch('reject', {reason: \"connection timer\"});\n\t                                    }, 'connection', connectionTimeout);\n\t                                },\n\t                                // Event\n\t                                exit: function () {\n\t                                    if (connectionTimer) {\n\t                                        connectionTimer.clear();\n\t                                    }\n\t                                    if (modifyTimer) {\n\t                                        modifyTimer.clear();\n\t                                    }\n\t                                    that.fire('connecting:exit');\n\t                                },\n\t                                // Event\n\t                                receiveLocalMedia: [{\n\t                                    action: function () {\n\t                                        that.hasLocalMedia = true;\n\t                                    }\n\t                                }, {\n\t                                    target: 'connected',\n\t                                    guard: function (params) {\n\t                                        // for direct connection, local media is the same as remote media\n\t                                        return (that.needDirectConnection === true && that.caller === false);\n\t                                    }\n\t                                }],\n\t                                // Event\n\t                                receiveRemoteMedia: {\n\t                                    target: 'connected'\n\t                                }\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            },\n\t            // State\n\t            // This state is for when we are in limbo between connected and negotiating and we are\n\t            // trying to figure out if the other side will allow us to modify. If we receive modify in\n\t            // this state, we will reject it. If the other party is in connected, we will be able to modify.\n\t            modifyingContainer: {\n\t                init: 'modifying',\n\t                reject: rejectEvent,\n\t                // Event\n\t                modify: rejectModify,\n\t                // Event\n\t                hangup: hangupEvent,\n\t                states: {\n\t                    modifying: {\n\t                        // Event\n\t                        entry: function () {\n\t                            modifyTimer = createTimer(function () {\n\t                                that.dispatch('reject', {reason: \"modify timer\"});\n\t                            }, 'modify for caller', modifyTimeout);\n\t                            that.fire('modifying:entry');\n\t                        },\n\t                        // Event\n\t                        accept: [function () {\n\t                            that.caller = true;\n\t                        }, {\n\t                            target: 'preparing'\n\t                        }],\n\t                        // Event\n\t                        exit: function () {\n\t                            that.fire('modifying:exit');\n\t                        }\n\t                    }\n\t                }\n\t            },\n\t            // State\n\t            connectedContainer: {\n\t                init: 'connected',\n\t                reject: {\n\t                    target: 'terminated',\n\t                    action: function (params) {\n\t                        that.hangupReason = params.reason || \"got reject while connected\";\n\t                    }\n\t                },\n\t                receiveAnswer: clearReceiveAnswerTimer,\n\t                // Event\n\t                hangup: hangupEvent,\n\t                states: {\n\t                    connected: {\n\t                        // Event\n\t                        entry: function () {\n\t                            oldRole = that.caller;\n\t                            that.needDirectConnection = false;\n\t                            that.fire('connected:entry');\n\t                        },\n\t                        // Event\n\t                        exit: function () {\n\t                            that.fire('connected:exit');\n\t                        },\n\t                        // Event\n\t                        modify: [{\n\t                            // be notified that the other side would like modification\n\t                            target: 'preparing',\n\t                            guard: function (params) {\n\t                                params = params || {};\n\t                                if (params.receive === true) {\n\t                                    that.caller = false;\n\t                                    modifyTimer = createTimer(function () {\n\t                                        // If modify gets interrupted, go back to previous roles.\n\t                                        that.dispatch('reject', {reason: \"modify timer\"});\n\t                                    }, 'modify', modifyTimeout);\n\t                                    return true;\n\t                                }\n\t                            }\n\t                        }, {\n\t                            // request to begin modification\n\t                            target: 'modifying',\n\t                            guard: function (params) {\n\t                                params = params || {};\n\t                                return (params.receive !== true);\n\t                            }\n\t                        }]\n\t                    }\n\t                }\n\t            },\n\t            // State\n\t            terminatedContainer: {\n\t                init: 'terminated',\n\t                states: {\n\t                    terminated: {\n\t                        // Event\n\t                        entry: {\n\t                            action: function () {\n\t                                that.fire('terminated:entry');\n\t                                allTimers.forEach(function (timer) {\n\t                                    timer.clear();\n\t                                });\n\t                                setTimeout(function () {\n\t                                    fsm = null;\n\t                                    that.ignore();\n\t                                });\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    };\n\t\n\t    stateParams.that = Object.create(Statechart);\n\t    fsm = respoke.Class(stateParams);\n\t    fsm.run({\n\t        // rename to 'debug' to enable\n\t        debugOff: function () {\n\t            // So we can print the caller. Debug most often used when testing & tests run in the same tab.\n\t            var args = Array.prototype.slice.call(arguments);\n\t            args.splice(0, 0, that.caller);\n\t            log.debug.apply(log, args);\n\t        }\n\t    });\n\t\n\t    /**\n\t     * Return the name of the current state.\n\t     * @memberof! respoke.CallState\n\t     * @method respoke.Call.getState\n\t     * @returns {string}\n\t     */\n\t    that.getState = function () {\n\t        if (!fsm) {\n\t            return 'terminated';\n\t        }\n\t        return fsm.currentState().name;\n\t    };\n\t\n\t    /**\n\t     * Synchronously dispatch an event, which may or may not change the state.\n\t     * @memberof! respoke.CallState\n\t     * @method respoke.Call.dispatch\n\t     */\n\t    that.dispatch = function (evt, args) {\n\t        var oldState;\n\t        var newState;\n\t\n\t        if (!fsm) {\n\t            return;\n\t        }\n\t\n\t        oldState = that.getState();\n\t        try {\n\t            fsm.dispatch(evt, args);\n\t        } catch (err) {\n\t            log.debug('error dispatching', evt, 'from', oldState, \"with\", args, err);\n\t            throw err;\n\t        }\n\t        newState = that.getState();\n\t        if (oldState === newState && nontransitionEvents.indexOf(evt) === -1) {\n\t            log.debug(that.caller, \"Possible bad event \" + evt + \", no transition occured.\");\n\t        }\n\t        log.debug(that.caller, 'dispatching', evt, 'moving from ', oldState, 'to', newState, args);\n\t    };\n\t\n\t    /**\n\t     * Determine whether or not we are in the middle of a call modification.\n\t     * @memberof! respoke.CallState\n\t     * @method respoke.Call.isModifying\n\t     * @returns {boolean}\n\t     */\n\t    that.isModifying = function () {\n\t        var modifyingStates = ['preparing', 'modifying', 'approvingDeviceAccess', 'approvingMedia', 'offering'];\n\t        return (modifyingStates.indexOf(that.getState()) > -1 && that.hasMedia());\n\t    };\n\t\n\t    /**\n\t     * Helper for testing state name\n\t     * @memberof! respoke.CallState\n\t     * @method respoke.Call.isState\n\t     * @param {string} name\n\t     * @returns {boolean}\n\t     */\n\t    that.isState = function (name) {\n\t        return (that.getState() === name);\n\t    };\n\t\n\t    assert(typeof that.hasMedia === 'function');\n\t    assert(typeof that.caller === 'boolean');\n\t    return that;\n\t};\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Copyright 2015, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t */\n\t\n\tvar Q = __webpack_require__(6);\n\tvar respoke = __webpack_require__(1);\n\tvar log = respoke.log;\n\t\n\t/**\n\t * A `respoke.Call` is Respoke's interface into a WebRTC call, including getUserMedia,\n\t * path and codec negotation, and call state.\n\t * There are several methods on an instance of `respoke.Client` which return a `respoke.Call`.\n\t *\n\t * ```\n\t * var jim = client.getEndpoint({ id: 'jim' });\n\t * var call = jim.startAudioCall();\n\t * ```\n\t *\n\t * @class respoke.Call\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.instanceId - client id\n\t * @param {boolean} params.caller - whether or not we initiated the call\n\t * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t * @param {boolean} [params.sendOnly] - whether or not we send media\n\t * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t * relay servers. If it cannot flow through relay servers, the call will fail.\n\t * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t * required to flow peer-to-peer. If it cannot, the call will fail.\n\t * @param {respoke.Endpoint} params.remoteEndpoint - The endpoint who is being called.\n\t * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint.\n\t * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t * wants to perform an action between local media becoming available and calling approve().\n\t * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n\t * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n\t * @param {function} params.signalReport - Signaling action from SignalingChannel.\n\t * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n\t * @param {Array<RTCConstraints>} params.constraints - Array of WebRTC constraints. This is ignored when\n\t * `params.outgoingMedia` is passed into the Call object.\n\t * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t * media renegotiation.\n\t * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t * element with the local audio and/or video attached.\n\t * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n\t * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n\t * it was ended in a graceful manner.\n\t * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t * This callback will be called when media is muted or unmuted.\n\t * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t * for the user to give permission to start getting audio or video.\n\t * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t * the approval was automatic.\n\t * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n\t * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n\t * granted by the browser without asking the user to approve it.\n\t * @param {respoke.Call.onToneSent} [params.onToneSent] - Callback for when a DTMF tone gets sent from the client.\n\t * @param {respoke.Call.onToneSendingStarted} [params.onToneSendingStarted] - Callback for when DTMF tones\n\t * have started sending.\n\t * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n\t * video attached to it.\n\t * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n\t * @param {respoke.LocalMedia} params.outgoingMedia - Pass in an optional LocalMedia object to override the one that is\n\t * built automatically when establishing the call. When this is defined then any constraints passed to the\n\t * call are ignored since the media object already exists.\n\t * video attached to it.\n\t * @returns {respoke.Call}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t    delete that.outgoingMedia;\n\t\n\t    /**\n\t     * A name to identify the type of object.\n\t     * @memberof! respoke.Call\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Call';\n\t\n\t    /**\n\t     * Whether or not the client is the caller of the call.\n\t     * @memberof! respoke.Call\n\t     * @name caller\n\t     * @type {boolean}\n\t     */\n\t    that.caller = !!that.caller;\n\t    Object.defineProperty(that, \"initiator\", {\n\t        configurable: true,\n\t        enumerable: true,\n\t        get: function () {\n\t            log.warn(\"The call.initiator flag is deprecated. Please use call.caller instead.\");\n\t            return that.caller;\n\t        },\n\t        set: function () {\n\t            // ignore\n\t        }\n\t    });\n\t\n\t    if (!that.caller) {\n\t        // Don't let Respoke.js pass any default constraints if we're accepting the call. We have no freaking clue\n\t        // what kind of media we are expected to provide at this point.\n\t        delete params.constraints;\n\t        that.constraints = [];\n\t    }\n\t\n\t    /**\n\t     * The call ID.\n\t     * @memberof! respoke.Call\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = that.caller ? respoke.makeGUID() : that.id;\n\t\n\t    // log the call id to the console for debugging purposes. Do not change this to `respoke.log`!\n\t    console.log(\"[Respoke] Creating call. id='\" + that.id + \"'\");\n\t\n\t    if (!that.id) {\n\t        throw new Error(\"Can't start a new call without a call id.\");\n\t    }\n\t\n\t    /**\n\t     * Promise used to trigger actions dependant upon having received media or a datachannel.\n\t     * @memberof! respoke.Call\n\t     * @name defMedia\n\t     * @private\n\t     * @type {Promise}\n\t     */\n\t    var defMedia = Q.defer();\n\t    /**\n\t     * Promise used to trigger notification of a request for renegotiating media. For the caller of the\n\t     * renegotiation (which doesn't have to be the same as the caller of the call), this is resolved\n\t     * or rejected as soon as the 'accept' or 'reject' signal is received. For the callee, it is\n\t     * resolved or rejected only after the developer or user approves or rejects the modify.\n\t     * @memberof! respoke.Call\n\t     * @name defModify\n\t     * @private\n\t     * @type {Promise}\n\t     */\n\t    var defModify;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name previewLocalMedia\n\t     * @private\n\t     * @type {respoke.Call.previewLocalMedia}\n\t     */\n\t    var previewLocalMedia = params.previewLocalMedia;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name client\n\t     * @private\n\t     * @type {respoke.getClient}\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name signalingChannel\n\t     * @private\n\t     * @type {respoke.signalingChannel}\n\t     */\n\t    var signalingChannel = params.signalingChannel;\n\t\n\t    /**\n\t     * Informational property. Whether call debugs were enabled on the client during creation.\n\t     * Changing this value will do nothing.\n\t     * @name enableCallDebugReport\n\t     * @type {boolean}\n\t     */\n\t    that.enableCallDebugReport = params.signalingChannel.isSendingReport();\n\t\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name pc\n\t     * @private\n\t     * @type {respoke.PeerConnection}\n\t     */\n\t    var pc = respoke.PeerConnection({\n\t        instanceId: instanceId,\n\t        state: respoke.CallState({\n\t            instanceId: instanceId,\n\t            caller: that.caller,\n\t            needDirectConnection: params.needDirectConnection,\n\t            sendOnly: params.sendOnly,\n\t            receiveOnly: params.receiveOnly,\n\t            // hasMedia is not defined yet.\n\t            hasMedia: function () {\n\t                return that.hasMedia();\n\t            }\n\t        }),\n\t        forceTurn: !!params.forceTurn,\n\t        call: that,\n\t        pcOptions: {\n\t            optional: [\n\t                { DtlsSrtpKeyAgreement: true },\n\t                { RtpDataChannels: false }\n\t            ]\n\t        },\n\t        offerOptions: params.offerOptions || null,\n\t        signalOffer: function (args) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t\n\t            params.signalOffer(args);\n\t            pc.state.dispatch('sentOffer');\n\t        },\n\t        signalConnected: params.signalConnected,\n\t        signalAnswer: params.signalAnswer,\n\t        signalModify: params.signalModify,\n\t        signalHangup: params.signalHangup,\n\t        signalReport: params.signalReport,\n\t        signalCandidate: params.signalCandidate\n\t    });\n\t\n\t    /**\n\t     * Array of streams of local media that we are sending to the remote party.\n\t     * @name outgoingMediaStreams\n\t     * @type {Array<respoke.LocalMedia>}\n\t     */\n\t    that.outgoingMediaStreams = [];\n\t    that.outgoingMediaStreams.hasAudio = function () {\n\t        if (that.outgoingMediaStreams.length === 0) {\n\t            return false;\n\t        }\n\t\n\t        return !that.outgoingMediaStreams.every(function (stream) {\n\t            return stream.getAudioTracks().length === 0;\n\t        });\n\t    };\n\t    that.outgoingMediaStreams.hasVideo = function () {\n\t        if (that.outgoingMediaStreams.length === 0) {\n\t            return false;\n\t        }\n\t\n\t        return !that.outgoingMediaStreams.every(function (stream) {\n\t            return stream.getVideoTracks().length === 0;\n\t        });\n\t    };\n\t\n\t    if (params.outgoingMedia) {\n\t        that.outgoingMediaStreams.push(params.outgoingMedia);\n\t    }\n\t\n\t    /**\n\t     * Local media that we are sending to the remote party. This will be undefined if we are sending no media.\n\t     * This property is just the first item in the `outgoingMediaStreams` array. If multiple streams are present,\n\t     * use that array to find the stream you need instead of relying on this property.\n\t     * @name outgoingMedia\n\t     * @type {respoke.LocalMedia}\n\t     */\n\t    Object.defineProperty(that, \"outgoingMedia\", {\n\t        configurable: false,\n\t        enumerable: true,\n\t        get: function () {\n\t            return that.outgoingMediaStreams[0];\n\t        },\n\t        set: function () {\n\t            // ignore\n\t        }\n\t    });\n\t\n\t    /**\n\t     * Array of streams of remote media that we are receiving from the remote party.\n\t     * @name incomingMediaStreams\n\t     * @type {Array<respoke.RemoteMedia>}\n\t     */\n\t    that.incomingMediaStreams = [];\n\t    that.incomingMediaStreams.hasAudio = function () {\n\t        if (that.incomingMediaStreams.length === 0) {\n\t            return false;\n\t        }\n\t\n\t        return !that.incomingMediaStreams.every(function (stream) {\n\t            return stream.getAudioTracks().length === 0;\n\t        });\n\t    };\n\t    that.incomingMediaStreams.hasVideo = function () {\n\t        if (that.incomingMediaStreams.length === 0) {\n\t            return false;\n\t        }\n\t\n\t        return !that.incomingMediaStreams.every(function (stream) {\n\t            return stream.getVideoTracks().length === 0;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Remote media that we are receiving from the remote party.  This will be undefined if we\n\t     * are receiving no media. This property is just the first item in the `incomingMediaStreams` array. If multiple\n\t     * streams are present, use that array to find the stream you need instead of relying on this property.\n\t     * @name incomingMedia\n\t     * @type {respoke.RemoteMedia}\n\t     */\n\t    Object.defineProperty(that, \"incomingMedia\", {\n\t        configurable: false,\n\t        enumerable: true,\n\t        get: function () {\n\t            return that.incomingMediaStreams[0];\n\t        },\n\t        set: function () {\n\t            // ignore\n\t        }\n\t    });\n\t\n\t    /**\n\t     * A flag indicating whether this call has audio or is expected to have audio coming in from the other side.\n\t     *\n\t     * @name hasAudio\n\t     * @type {boolean}\n\t     */\n\t    Object.defineProperty(that, \"hasAudio\", {\n\t        configurable: false,\n\t        enumerable: true,\n\t        get: that.incomingMediaStreams.hasAudio,\n\t        set: function () {\n\t            // ignore\n\t        }\n\t    });\n\t\n\t    /**\n\t     * A flag indicating whether this call has video or is expected to have video coming in from the other side.\n\t     *\n\t     * @name hasVideo\n\t     * @type {boolean}\n\t     */\n\t    Object.defineProperty(that, \"hasVideo\", {\n\t        configurable: false,\n\t        enumerable: true,\n\t        get: that.incomingMediaStreams.hasVideo,\n\t        set: function () {\n\t            // ignore\n\t        }\n\t    });\n\t\n\t    delete params.signalingChannel;\n\t    delete that.signalingChannel;\n\t\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name videoIsMuted\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var videoIsMuted = false;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name audioIsMuted\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var audioIsMuted = false;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name directConnection\n\t     * @private\n\t     * @type {respoke.DirectConnection}\n\t     */\n\t    var directConnection = null;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name toSendHangup\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var toSendHangup = null;\n\t\n\t    /**\n\t     * Set up promises. If we're not the caller, we need to listen for approval AND the remote SDP to come in\n\t     * before we can act on the call. Save parameters sent in with the constructor, then delete them off the call.\n\t     * If this call was initiated with a DirectConnection, set it up so answer() will be the approval mechanism.\n\t     * @method respoke.Call.init\n\t     * @memberof! respoke.Call\n\t     * @fires respoke.Client#call\n\t     * @private\n\t     */\n\t    function init() {\n\t        log.debug('Call.init');\n\t\n\t        if (defModify !== undefined) {\n\t            defMedia = Q.defer();\n\t        }\n\t\n\t        pc.init(); // instantiates RTCPeerConnection, can't call on modify\n\t        if (defModify === undefined && pc.state.needDirectConnection === true) {\n\t            actuallyAddDirectConnection(params);\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Register any event listeners passed in as callbacks, save other params to answer() and accept().\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.saveParameters\n\t     * @param {object} params\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n\t     * it was ended in a graceful manner.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will fire even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n\t     * user's media.  This event gets fired even if the allow process is automatic, i. e., permission and media is\n\t     * granted by the browser without asking the user to approve it.\n\t     * @param {respoke.Call.onToneSent} [params.onToneSent] - Callback for when a DTMF tone gets sent from the client.\n\t     * @param {Array<RTCConstraints>} [params.constraints]\n\t     * @param {boolean} [params.forceTurn]\n\t     * @param {boolean} [params.receiveOnly]\n\t     * @param {boolean} [params.sendOnly]\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     * @private\n\t     * @fires respoke.Call#stats\n\t     */\n\t    function saveParameters(params) {\n\t        var isNewConstraint;\n\t\n\t        /* This happens when the call is hung up automatically, for instance due to the lack of an onCall\n\t         * handler. In this case, pc has been set to null in hangup. The call has already failed, and the\n\t         * invocation of this function is an artifact of async code not being finished yet, so we can just\n\t         * skip all of this setup.\n\t         */\n\t        if (!pc) {\n\t            return;\n\t        }\n\t\n\t        that.listen('local-stream-received', params.onLocalMedia);\n\t        that.listen('connect', params.onConnect);\n\t        that.listen('hangup', params.onHangup);\n\t        that.listen('allow', params.onAllow);\n\t        that.listen('answer', params.onAnswer);\n\t        that.listen('approve', params.onApprove);\n\t        that.listen('mute', params.onMute);\n\t        that.listen('requesting-media', params.onRequestingMedia);\n\t        that.listen('tone-sent', params.onToneSent);\n\t        that.listen('tone-sending-started', params.onToneSendingStarted);\n\t        that.listen('tone-sending-cancelled', params.onToneSendingCancelled);\n\t\n\t        previewLocalMedia = typeof params.previewLocalMedia === 'function' ?\n\t            params.previewLocalMedia : previewLocalMedia;\n\t\n\t        pc.state.receiveOnly = typeof params.receiveOnly === 'boolean' ? params.receiveOnly : pc.state.receiveOnly;\n\t        pc.state.sendOnly = typeof params.sendOnly === 'boolean' ? params.sendOnly : pc.state.sendOnly;\n\t        pc.state.needDirectConnection = typeof params.needDirectConnection === 'boolean' ?\n\t            params.needDirectConnection : pc.state.needDirectConnection;\n\t        pc.disableTurn = typeof params.disableTurn === 'boolean' ? params.disableTurn : !!pc.disableTurn;\n\t        pc.forceTurn = typeof params.forceTurn === 'boolean' ? params.forceTurn : !!pc.forceTurn;\n\t\n\t        that.videoLocalElement = params.videoLocalElement ? params.videoLocalElement : that.videoLocalElement;\n\t        that.videoRemoteElement = params.videoRemoteElement ? params.videoRemoteElement : that.videoRemoteElement;\n\t\n\t        if (pc.state.receiveOnly) {\n\t            that.outgoingMediaStreams.length = 0;\n\t            that.constraints = [];\n\t        } else if (params.constraints) {\n\t            that.constraints = respoke.convertConstraints(params.constraints);\n\t            updateOutgoingMediaEstimate({constraints: that.constraints[0], source: params.source});\n\t        }\n\t\n\t        if (pc.state.sendOnly) {\n\t            that.incomingMediaStreams.length = 0;\n\t        } else if (params.constraints && pc.state.caller === true && that.incomingMediaStreams.length === 0) {\n\t            // TODO above condition is not good enough for media renegotiation.\n\t            // Only the person who initiated this round of media negotiation needs to estimate remote\n\t            // media based on what constraints local media is using.\n\t            // Also don't try to guess what media they'll send back if we're sending more than one stream.\n\t            that.constraints = respoke.convertConstraints(params.constraints);\n\t            updateIncomingMediaEstimate({constraints: params.constraints[0]});\n\t        }\n\t\n\t        pc.listen('stats', function fireStats(evt) {\n\t            /**\n\t             * This event is fired every time statistical information about audio and/or video on a call\n\t             * becomes available.\n\t             * @event respoke.Call#stats\n\t             * @type {respoke.Event}\n\t             * @property {respoke.MediaStats} stats - an object with stats in it.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.fire('stats', {stats: evt.stats});\n\t        }, true);\n\t\n\t        delete that.signalOffer;\n\t        delete that.signalConnected;\n\t        delete that.signalAnswer;\n\t        delete that.signalHangup;\n\t        delete that.signalReport;\n\t        delete that.signalCandidate;\n\t    }\n\t\n\t    /**\n\t     * Build respoke.LocalMedia after the call is answered.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.buildLocalMedia\n\t     * @param {RTCConstraint} constraint\n\t     * @private\n\t     */\n\t    function buildLocalMedia(constraint) {\n\t        var localMedia;\n\t\n\t        if (pc.state.receiveOnly) {\n\t            return Q.reject(new Error(\"Shouldn't have requested local media when receiveOnly is true.\"));\n\t        }\n\t\n\t        if (constraint.className === 'respoke.LocalMedia') {\n\t            localMedia = constraint;\n\t        } else {\n\t            localMedia = respoke.LocalMedia({\n\t                hasScreenShare: respoke.constraintsHasScreenShare(constraint),\n\t                constraints: constraint,\n\t                source: params.source\n\t            });\n\t            that.outgoingMediaStreams.push(localMedia);\n\t        }\n\t\n\t        // use passed video element if localMedia constraints contain video\n\t        if (respoke.constraintsHasVideo(localMedia.constraints)) {\n\t            localMedia.element = that.videoLocalElement;\n\t        }\n\t\n\t        localMedia.listen('requesting-media', function waitAllowHandler(evt) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t\n\t            /**\n\t             * The browser is asking for permission to access the User's media. This would be an ideal time\n\t             * to modify the UI of the application so that the user notices the request for permissions\n\t             * and approves it.\n\t             * @event respoke.Call#requesting-media\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.fire('requesting-media');\n\t        }, true);\n\t\n\t        localMedia.listen('allow', function allowHandler(evt) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t\n\t            /**\n\t             * The user has approved the request for media. Any UI changes made to remind the user to click Allow\n\t             * should be canceled now. This event is the same as the `onAllow` callback.  This event gets fired\n\t             * even if the allow process is automatic, i. e., permission and media is granted by the browser\n\t             * without asking the user to approve it.\n\t             * @event respoke.Call#allow\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.fire('allow');\n\t            pc.state.dispatch('approve', {\n\t                previewLocalMedia: previewLocalMedia\n\t            });\n\t        }, true);\n\t\n\t        return localMedia.start().then(function () {\n\t            streamReceivedHandler(localMedia);\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Answer the call and start the process of obtaining media. This method is called automatically on the caller's\n\t     * side. This method must be called on the callee's side to indicate that the endpoint does wish to accept the\n\t     * call. The app will have a later opportunity, by passing a callback named previewLocalMedia, to approve or\n\t     * reject the call based on whether audio and/or video is working and is working at an acceptable level.\n\t     *\n\t     *     client.listen('call', function (evt) {\n\t     *         if (!evt.call.caller) {\n\t     *             evt.call.answer();\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.answer\n\t     * @fires respoke.Call#answer\n\t     * @param {object} [params]\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n\t     * it was ended in a graceful manner.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n\t     * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n\t     * granted by the browser without asking the user to approve it.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {boolean} [params.receiveOnly] - Whether or not we accept media.\n\t     * @param {boolean} [params.sendOnly] - Whether or not we send media.\n\t     * @param {Array<RTCConstraints>} [params.constraints] - Information about the media for this call.\n\t     * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     */\n\t    that.answer = function (params) {\n\t        params = params || {};\n\t        log.debug('Call.answer', params);\n\t\n\t        saveParameters(params);\n\t\n\t        pc.listen('remote-stream-received', onRemoteStreamAdded, true);\n\t        pc.listen('remote-stream-removed', onRemoteStreamRemoved, true);\n\t\n\t        pc.state.once('approving-device-access:entry', function (evt) {\n\t            doAddVideo(params);\n\t        });\n\t        pc.state.dispatch('answer', {\n\t            previewLocalMedia: previewLocalMedia,\n\t            approve: that.approve\n\t        });\n\t        /**\n\t         * The call was answered.\n\t         * @event respoke.Call#answer\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('answer');\n\t    };\n\t\n\t    /**\n\t     * Accept a request to modify the media on the call. This method should be called within the Call#modify\n\t     * event listener, which gives the developer or website user a chance to see what changes are proposed and\n\t     * to accept or reject them.\n\t     *\n\t     *     call.listen('modify', function (evt) {\n\t     *         evt.call.accept();\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.accept\n\t     * @fires respoke.Call#accept\n\t     * @private\n\t     * @param {object} [params]\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the developer to receive the\n\t     * remote video element.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for the developer to be notified about hangup.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {boolean} [params.receiveOnly] - Whether or not we accept media.\n\t     * @param {boolean} [params.sendOnly] - Whether or not we send media.\n\t     * @param {Array<RTCConstraints>} [params.constraints] - Information about the media for this call.\n\t     */\n\t    that.accept = that.answer;\n\t\n\t    /**\n\t     * Start the process of network and media negotiation. If the app passes in a callback named previewLocalMedia\n\t     * in order to allow the logged-in person a chance to base their decision to continue the call on whether\n\t     * audio and/or video is working correctly,\n\t     * this method must be called on both sides in order to begin the call. If call.approve() is called, the call\n\t     * will progress as expected. If call.reject() is called, the call will be aborted.\n\t     *\n\t     *     call.listen('local-stream-received', function (evt) {\n\t     *         if (userLikesVideo()) {\n\t     *             evt.call.approve();\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.approve\n\t     * @fires respoke.Call#approve\n\t     */\n\t    that.approve = function () {\n\t        log.debug('Call.approve');\n\t        /**\n\t         * Fired when the local media access is approved.\n\t         * @event respoke.Call#approve\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('approve');\n\t        pc.state.dispatch('approve', {\n\t            previewLocalMedia: previewLocalMedia\n\t        });\n\t\n\t        if (defModify && defModify.promise.isPending()) {\n\t            defModify.resolve(true);\n\t            defModify = undefined;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Listen for the remote side to remove media in the middle of the call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.onRemoteStreamRemoved\n\t     * @private\n\t     * @param {object}\n\t     */\n\t    function onRemoteStreamRemoved(evt) {\n\t        log.debug('pc event: remote stream removed');\n\t    }\n\t\n\t    /**\n\t     * Listen for the remote side to add additional media in the middle of the call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.onRemoteStreamAdded\n\t     * @private\n\t     * @param {object}\n\t     * @fires respoke.Call#connect\n\t     */\n\t    function onRemoteStreamAdded(evt) {\n\t        var hasAudio = false;\n\t        var hasVideo = false;\n\t        var hasScreenShare = false;\n\t        var remoteMedia;\n\t\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        log.debug('received remote media', evt);\n\t\n\t        // This is the first remote media we have received. The one we currently have is a guess. Rip it\n\t        // out and replace it with reality.\n\t        if (that.incomingMediaStreams.length === 1 && that.incomingMediaStreams[0].temporary === true) {\n\t            // have to do it this way because assigning a blank array to that.incomingMediaStreams will\n\t            // clobber the methods like hasAudio that we have added to the array.\n\t            that.incomingMediaStreams.length = 0;\n\t        }\n\t\n\t        hasAudio = evt.stream.getAudioTracks().length > 0;\n\t        hasVideo = evt.stream.getVideoTracks().length > 0;\n\t        // TODO this is not good enough long term.\n\t        hasScreenShare = hasVideo && that.target === 'screenshare';\n\t\n\t        remoteMedia = respoke.RemoteMedia({\n\t            element: that.videoRemoteElement,\n\t            stream: evt.stream,\n\t            hasScreenShare: hasScreenShare,\n\t            constraints: {\n\t                audio: hasAudio,\n\t                video: hasVideo\n\t            }\n\t        });\n\t        that.incomingMediaStreams.push(remoteMedia);\n\t\n\t        if (that.incomingMediaStreams.length < pc.sdpExpectedStreamCount) {\n\t            // there are more streams left to receive before we can dispatch the event to the state machine.\n\t            return;\n\t        }\n\t\n\t        /**\n\t         * Indicates that either remote media stream has been added to the call or if no\n\t         * media is expected, the other side is receiving our media.\n\t         * @event respoke.Call#connect\n\t         * @type {respoke.Event}\n\t         * @property {Element} element - The HTML5 Video element with the remote stream attached.\n\t         * @property {respoke.RemoteMedia} stream - The incomingMedia property on the call.\n\t         * @property {string} name - The event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        pc.state.dispatch('receiveRemoteMedia');\n\t        that.fire('connect', {\n\t            stream: remoteMedia.stream,\n\t            element: remoteMedia.element\n\t        });\n\t    }\n\t\n\t    /**\n\t     * ## The plugin `respoke.MediaStats` must be loaded before using this method.\n\t     *\n\t     * Start the process of listening for a continuous stream of statistics about the flow of audio and/or video.\n\t     * Since we have to wait for both the answer and offer to be available before starting\n\t     * statistics, the library returns a promise for the stats object. The statistics object does not contain the\n\t     * statistics; rather it contains methods of interacting with the actions of obtaining statistics. To obtain\n\t     * the actual statistics one time, use stats.getStats(); use the onStats callback to obtain a continuous\n\t     * stream of statistics every `interval` seconds.  Returns null if stats module is not loaded.\n\t     *\n\t     *     call.getStats({\n\t     *         onStats: function (evt) {\n\t     *             console.log('Stats', evt.stats);\n\t     *         }\n\t     *     }).done(function () {\n\t     *         console.log('Stats started');\n\t     *     }, function (err) {\n\t     *         console.log('Call is already hung up.');\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.getStats\n\t     * @param {object} params\n\t     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive\n\t     * the stats. If no callback is provided, the call's report will contain stats but the developer will not\n\t     * receive them on the client-side.\n\t     * @param {respoke.Call.statsSuccessHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Call.errorHandler} [params.onError] - Error handler for this invocation of this method only.\n\t     * @returns {Promise<object>|null}\n\t     */\n\t    function getStats(params) {\n\t        if (pc && pc.getStats) {\n\t            that.listen('stats', params.onStats);\n\t            return pc.getStats(params);\n\t        }\n\t        return null;\n\t    }\n\t    if (respoke.MediaStats) {\n\t        that.getStats = getStats;\n\t    }\n\t\n\t    /**\n\t     * Return local video element with the logged-in endpoint's audio and/or video streams attached to it.\n\t     *\n\t     *     var el = call.getLocalElement();\n\t     *     container.append(el);\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.getLocalElement\n\t     * @returns {Video} An HTML5 video element.\n\t     */\n\t    that.getLocalElement = function () {\n\t        return that.outgoingMediaStreams[0] ? that.outgoingMediaStreams[0].element : undefined;\n\t    };\n\t\n\t    /**\n\t     * Return remote video element with the remote endpoint's audio and/or video streams attached to it.\n\t     *\n\t     *     var el = call.getRemoteElement();\n\t     *     container.append(el);\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.getRemoteElement\n\t     * @returns {Video} An HTML5 video element.\n\t     */\n\t    that.getRemoteElement = function () {\n\t        return that.incomingMediaStreams[0] ? that.incomingMediaStreams[0].element : undefined;\n\t    };\n\t\n\t    /**\n\t     * Set up the local media.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.streamReceivedHandler\n\t     * @param {respoke.LocalMedia} The local media.\n\t     * @private\n\t     */\n\t    function streamReceivedHandler(localMedia) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t\n\t        pc.addStream(localMedia.stream);\n\t        if (typeof previewLocalMedia === 'function' && localMedia.element) {\n\t            previewLocalMedia(localMedia.element, that);\n\t        }\n\t\n\t        localMedia.listen('stop', function stopHandler(/* evt */) {\n\t            // if the local media has stopped, it has already been removed from respoke.streams.\n\t            // just need to remove it from the call's streams, and hangup if no streams left.\n\t\n\t            var idx = that.outgoingMediaStreams.indexOf(localMedia);\n\t            if (idx > -1) {\n\t                that.outgoingMediaStreams.splice(idx, 1);\n\t            }\n\t\n\t            if (!that.outgoingMediaStreams.length && !that.incomingMediaStreams.length) {\n\t                that.hangup({ reason: 'last stream ended' });\n\t            }\n\t        });\n\t\n\t        /**\n\t         * Indicate that the call has received local media from the browser.\n\t         * @event respoke.Call#local-stream-received\n\t         * @type {respoke.Event}\n\t         * @property {Element} element\n\t         * @property {respoke.LocalMedia} stream\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('local-stream-received', {\n\t            element: localMedia.element,\n\t            stream: localMedia\n\t        });\n\t\n\t        /**\n\t         * This event indicates that local video has been unmuted.\n\t         * @event respoke.Call#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        localMedia.listen('mute', function (evt) {\n\t            that.fire('mute', {\n\t                type: evt.type,\n\t                muted: evt.muted\n\t            });\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Create the RTCPeerConnection and add handlers. Process any offer we have already received. This method is called\n\t     * after answer() so we cannot use this method to set up the DirectConnection.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.doAddVideo\n\t     * @private\n\t     * @param {object} params\n\t     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect]\n\t     * @param {respoke.Call.onHangup} [params.onHangup]\n\t     * @fires respoke.Call#requesting-media\n\t     * @fires respoke.Call#allow\n\t     * @fires respoke.Call#local-stream-received\n\t     */\n\t    function doAddVideo(params) {\n\t        log.debug('Call.doAddVideo');\n\t        saveParameters(params);\n\t    }\n\t\n\t    /**\n\t     * Add a video and audio stream to the existing call. By default, this method adds both video AND audio.\n\t     * If audio is not desired, pass {audio: false}.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.addVideo\n\t     * @private\n\t     * @param {object} params\n\t     * @param {boolean} [params.audio=true]\n\t     * @param {boolean} [params.video=true]\n\t     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints, indicating the media\n\t     * being requested is\n\t     * an audio and/or video stream.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect]\n\t     * @param {respoke.Call.onHangup} [params.onHangup]\n\t     * @param {respoke.Call.mediaSuccessHandler} [params.onSuccess]\n\t     * @param {respoke.Client.errorHandler} [params.onError]\n\t     * @returns {Promise<respoke.LocalMedia>}\n\t     */\n\t    that.addVideo = function (params) {\n\t        log.debug('Call.addVideo');\n\t        params = params || {};\n\t        if (!params.constraints || !params.constraints.length) {\n\t            params.constraints = [{video: true, audio: true}];\n\t        }\n\t        params.instanceId = instanceId;\n\t\n\t        if (!defMedia.promise.isFulfilled()) { // we're the callee & have just accepted to modify\n\t            doAddVideo(params);\n\t        } else { // we're the caller and need to see if we can modify\n\t            pc.startModify({\n\t                constraints: params.constraints\n\t            });\n\t            defModify = Q.defer();\n\t            defModify.promise.then(function modifyAccepted() {\n\t                doAddVideo(params);\n\t            });\n\t        }\n\t        return defModify.promise;\n\t    };\n\t\n\t    /**\n\t     * Add an audio stream to the existing call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.addAudio\n\t     * @private\n\t     * @param {object} params\n\t     * @param {boolean} [params.audio=true]\n\t     * @param {boolean} [params.video=false]\n\t     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints, indicating the media\n\t     * being requested is an audio and/or video stream.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect]\n\t     * @param {respoke.Call.onHangup} [params.onHangup]\n\t     * @param {respoke.Call.mediaSuccessHandler} [params.onSuccess]\n\t     * @param {respoke.Client.errorHandler} [params.onError]\n\t     * @returns {Promise<respoke.LocalMedia>}\n\t     */\n\t    that.addAudio = function (params) {\n\t        params = params || {};\n\t        if (!params.constraints || !params.constraints.length) {\n\t            params.constraints = [{video: false, audio: true}];\n\t        }\n\t\n\t        return that.addVideo(params);\n\t    };\n\t\n\t    /**\n\t     * Get the direct connection on this call, if it exists.\n\t     *\n\t     *     var dc = call.getDirectConnection();\n\t     *     if (!dc) {\n\t     *         console.log(\"No direct connection has been started.\");\n\t     *     } else {\n\t     *         dc.sendMessage({message: 'hi'});\n\t     *     }\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.getDirectConnection\n\t     * @returns {respoke.DirectConnection}\n\t     */\n\t    that.getDirectConnection = function () {\n\t        return directConnection || null;\n\t    };\n\t\n\t    /**\n\t     * Remove a direct connection from the existing call. If there is no other media, this will hang up the call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.removeDirectConnection\n\t     * @private\n\t     * @param {object} params\n\t     * @arg {boolean} [params.skipModify] Do not restart media negotiation.\n\t     */\n\t    that.removeDirectConnection = function (params) {\n\t        params = params || {};\n\t        log.debug('Call.removeDirectConnection');\n\t\n\t        if (directConnection) {\n\t            directConnection.close({skipRemove: true});\n\t        }\n\t\n\t        if (!that.hasMedia()) {\n\t            log.debug('Hanging up because there are no local streams.');\n\t            that.hangup();\n\t            return;\n\t        }\n\t\n\t        if (params.skipModify === true) {\n\t            return;\n\t        }\n\t\n\t        pc.startModify({\n\t            directConnection: false\n\t        });\n\t        defModify = Q.defer();\n\t        defModify.promise.done(function onModifySuccess() {\n\t            defMedia.resolve();\n\t            defModify = undefined;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Add a direct connection to the existing call.\n\t     *\n\t     *     call.addDirectConnection({\n\t     *         onOpen: function (evt) {\n\t     *             console.log(\"Direct connection open!\");\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.addDirectConnection\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for the developer to be notified about\n\t     * closing the connection.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for the developer to be notified about\n\t     * opening the connection.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for the developer to be notified\n\t     * about incoming messages. Not usually necessary to listen to this event if you are already listening to\n\t     * respoke.Endpoint#message.\n\t     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess]\n\t     * @param {respoke.Client.errorHandler} [params.onError]\n\t     * @returns {Promise<respoke.DirectConnection>}\n\t     */\n\t    that.addDirectConnection = function (params) {\n\t        log.debug('Call.addDirectConnection');\n\t        pc.startModify({\n\t            directConnection: true\n\t        });\n\t        defModify = Q.defer();\n\t        return defModify.promise.then(function onModifySuccess() {\n\t            return actuallyAddDirectConnection(params);\n\t        }, function onModifyError(err) {\n\t            throw err;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Add a direct connection to the existing call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.actuallyAddDirectConnection\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for the developer to be notified about\n\t     * closing the connection.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for the developer to be notified about\n\t     * opening the connection.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for the developer to be notified\n\t     * about incoming messages. Not usually necessary to listen to this event if you are already listening to\n\t     * respoke.Endpoint#message.\n\t     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess]\n\t     * @param {respoke.Client.errorHandler} [params.onError]\n\t     * @returns {Promise<respoke.DirectConnection>}\n\t     * @fires respoke.Client#direct-connection\n\t     * @fires respoke.Call#direct-connection\n\t     */\n\t    function actuallyAddDirectConnection(params) {\n\t        log.debug('Call.actuallyAddDirectConnection', params);\n\t        params = params || {};\n\t        defMedia.promise.then(params.onSuccess, params.onError);\n\t\n\t        if (directConnection && directConnection.isActive()) {\n\t            if (defMedia.promise.isPending()) {\n\t                defMedia.resolve(directConnection);\n\t            } else {\n\t                log.warn(\"Not creating a new direct connection.\");\n\t            }\n\t            return defMedia.promise;\n\t        }\n\t\n\t        params.instanceId = instanceId;\n\t        params.pc = pc;\n\t        params.call = that;\n\t\n\t        directConnection = respoke.DirectConnection(params);\n\t\n\t        directConnection.listen('close', function closeHandler() {\n\t            if (!that.hasMedia()) {\n\t                log.debug('Hanging up because there are no local streams.');\n\t                that.hangup();\n\t            } else {\n\t                that.removeDirectConnection({skipModify: true});\n\t            }\n\t        }, true);\n\t\n\t        directConnection.listen('accept', function acceptHandler() {\n\t            if (pc.state.caller === false) {\n\t                log.debug('Answering as a result of approval.');\n\t            } else {\n\t                defMedia.resolve(directConnection);\n\t            }\n\t        }, true);\n\t\n\t        directConnection.listen('open', function openHandler() {\n\t            pc.state.dispatch('receiveRemoteMedia');\n\t        }, true);\n\t\n\t        directConnection.listen('error', function errorHandler(err) {\n\t            defMedia.reject(new Error(err));\n\t        }, true);\n\t\n\t        that.remoteEndpoint.directConnection = directConnection;\n\t\n\t        /**\n\t         * This event is fired when the local end of the directConnection is available. It still will not be\n\t         * ready to send and receive messages until the 'open' event fires.\n\t         * @event respoke.Call#direct-connection\n\t         * @type {respoke.Event}\n\t         * @property {respoke.DirectConnection} directConnection\n\t         * @property {respoke.Endpoint} endpoint\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('direct-connection', {\n\t            directConnection: directConnection,\n\t            endpoint: that.remoteEndpoint\n\t        });\n\t\n\t        /**\n\t         * This event is fired when the logged-in endpoint is receiving a request to open a direct connection\n\t         * to another endpoint.  If the user wishes to allow the direct connection, calling\n\t         * evt.directConnection.accept() will allow the connection to be set up.\n\t         * @event respoke.Client#direct-connection\n\t         * @type {respoke.Event}\n\t         * @property {respoke.DirectConnection} directConnection\n\t         * @property {respoke.Endpoint} endpoint\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         * @private\n\t         */\n\t        client.fire('direct-connection', {\n\t            directConnection: directConnection,\n\t            endpoint: that.remoteEndpoint\n\t        });\n\t\n\t        if (pc.state.caller === true) {\n\t            directConnection.accept();\n\t        }\n\t\n\t        return defMedia.promise;\n\t    }\n\t\n\t    /**\n\t     * Close the direct connection.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.closeDirectConnection\n\t     */\n\t    that.closeDirectConnection = function () {\n\t        if (directConnection) {\n\t            directConnection.close();\n\t            directConnection = null;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n\t     * signal is not false and we have not received a hangup signal from the remote party.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.hangup\n\t     * @fires respoke.Call#hangup\n\t     * @param {object} params\n\t     * @arg {boolean} params.signal Optional flag to indicate whether to send or suppress sending\n\t     * a hangup signal to the remote side.\n\t     */\n\t    that.hangup = function (params) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        params = params || {};\n\t        params.reason = params.reason || \"hangup method called.\";\n\t        pc.state.dispatch('hangup', params);\n\t    };\n\t    that.hangup = respoke.callOnce(that.hangup);\n\t\n\t    /**\n\t     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n\t     * signal is not false and we have not received a hangup signal from the remote party. This is an event\n\t     * handler added to the state machine via `once`.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.hangup\n\t     * @fires respoke.Call#hangup\n\t     * @private\n\t     */\n\t    var doHangup = function () {\n\t        log.debug('hangup', that.caller);\n\t\n\t        that.outgoingMediaStreams.forEach(function (stream) {\n\t            // only call stop on the stream if it was constructed explicitly for the call\n\t            if (stream !== params.outgoingMedia) {\n\t                stream.stop();\n\t            }\n\t        });\n\t\n\t        if (directConnection) {\n\t            directConnection.close();\n\t            directConnection = null;\n\t        }\n\t\n\t        if (pc) {\n\t            pc.close({signal: (pc.state.receivedBye ? false : pc.state.signalBye)});\n\t        }\n\t\n\t        /**\n\t         * This event is fired when the call has hung up.\n\t         * @event respoke.Call#hangup\n\t         * @type {respoke.Event}\n\t         * @property {boolean} sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('hangup', {\n\t            reason: pc.state.hangupReason || \"No reason specified.\"\n\t        });\n\t\n\t        pc.state.ignore();\n\t        pc.ignore();\n\t        that.ignore();\n\t        pc = null;\n\t    };\n\t    doHangup = respoke.callOnce(doHangup);\n\t\n\t    /**\n\t     * Expose hangup as reject for approve/reject workflow.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.reject\n\t     * @param {object} params\n\t     */\n\t    that.reject = function () {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        pc.state.dispatch('reject', {reason: 'call.reject() called'});\n\t    };\n\t\n\t    /**\n\t     * Indicate whether a call is being setup or is in progress.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.isActive\n\t     * @returns {boolean}\n\t     */\n\t    that.isActive = function () {\n\t        return !!(pc && pc.isActive() && (\n\t            that.outgoingMediaStreams.length > 0 ||\n\t            that.incomingMediaStreams.length > 0 ||\n\t            (directConnection && directConnection.isActive())\n\t        ));\n\t    };\n\t\n\t    /**\n\t     * Set the estimated media status on incoming media.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.listenAnswer\n\t     * @param {object} evt\n\t     * @param {object} evt.signal - The offer signal including the sdp\n\t     * @private\n\t     */\n\t    function listenAnswer(evt) {\n\t        log.debug('listenAnswer', evt.signal);\n\t\n\t        that.hasDataChannel = respoke.sdpHasDataChannel(evt.signal.sessionDescription.sdp);\n\t        updateIncomingMediaEstimate({sdp: evt.signal.sessionDescription});\n\t    }\n\t\n\t    /**\n\t     * Set the estimated media status on incoming media.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.updateIncomingMediaEstimate\n\t     * @param {object} params\n\t     * @param {RTCSessionDescriptor} [params.sdp] - optional sdp to use to estimate media\n\t     * @param {RTCConstraints} [params.constraints] - optional constraints to use to estimate media\n\t     * @private\n\t     */\n\t    function updateIncomingMediaEstimate(params) {\n\t        if (pc.state.sendOnly) {\n\t            that.incomingMediaStreams.length = 0;\n\t            return;\n\t        }\n\t\n\t        if (!params.sdp && !params.constraints) {\n\t            throw new Error(\"Can't estimate incoming media without sdp or constraints\");\n\t        }\n\t\n\t        if (that.incomingMediaStreams.length === 0) {\n\t            that.incomingMediaStreams.push(respoke.RemoteMedia({\n\t                hasScreenShare: (that.target === 'screenshare'),\n\t                temporary: true\n\t            }));\n\t        }\n\t\n\t        if (params.sdp) {\n\t            if (that.incomingMediaStreams[0] && that.incomingMediaStreams[0].temporary) {\n\t                that.incomingMediaStreams[0].setSDP(params.sdp);\n\t            }\n\t        }\n\t\n\t        if (params.constraints) {\n\t            if (that.incomingMediaStreams[0] && that.incomingMediaStreams[0].temporary) {\n\t                that.incomingMediaStreams[0].setConstraints(params.constraints);\n\t            }\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Set the estimated media status on outgoing media. For this method, by the time we have constraints, we're\n\t     * already calling getUserMedia so we will have exactly the right information. No need to use constraints\n\t     * to estimate.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.updateOutgoingMediaEstimate\n\t     * @param {object} params\n\t     * @param {RTCSessionDescriptor} [params.sdp] - optional sdp to use to estimate media\n\t     * @param {RTCConstraints} [params.constraints] - optional constraints to use to estimate media\n\t     * @private\n\t     */\n\t    function updateOutgoingMediaEstimate(params) {\n\t        if (pc.state.receiveOnly) {\n\t            that.outgoingMediaStreams.length = 0;\n\t            that.constraints = [];\n\t            return;\n\t        }\n\t\n\t        if (!params.sdp && !params.constraints) {\n\t            throw new Error(\"Can't estimate outgoing media without sdp or constraints\");\n\t        }\n\t\n\t        if (that.outgoingMediaStreams.length === 0) {\n\t            that.outgoingMediaStreams.push(respoke.LocalMedia({\n\t                instanceId: instanceId,\n\t                temporary: true,\n\t                source: params.source\n\t            }));\n\t        }\n\t\n\t        if (params.sdp) {\n\t            if (that.outgoingMediaStreams[0] && that.outgoingMediaStreams[0].temporary) {\n\t                that.outgoingMediaStreams[0].setSDP(params.sdp);\n\t            }\n\t        }\n\t\n\t        if (params.constraints) {\n\t            if (that.outgoingMediaStreams[0] && that.outgoingMediaStreams[0].temporary) {\n\t                that.outgoingMediaStreams[0].setConstraints(params.constraints);\n\t            }\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Save the offer so we can tell the browser about it after the PeerConnection is ready.\n\t     * Set the estimated media status on incoming and outgoing media.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.listenOffer\n\t     * @param {object} evt\n\t     * @param {object} evt.signal - The offer signal including the sdp\n\t     * @private\n\t     * @fires respoke.Call#modify\n\t     */\n\t    function listenOffer(evt) {\n\t        log.debug('listenOffer', evt.signal);\n\t        var info = {};\n\t\n\t        that.sessionId = evt.signal.sessionId;\n\t        pc.state.receiveOnly = respoke.sdpHasSendOnly(evt.signal.sessionDescription.sdp);\n\t        pc.state.sendOnly = respoke.sdpHasReceiveOnly(evt.signal.sessionDescription.sdp);\n\t        pc.state.listen('connecting:entry', function () {\n\t            if (!pc.state.caller) {\n\t                pc.processOffer(evt.signal.sessionDescription);\n\t            }\n\t        });\n\t\n\t        // Only do this if we're still trying to guess what media is coming in.\n\t        // TODO not good enough for media renegotiation\n\t        updateIncomingMediaEstimate({sdp: evt.signal.sessionDescription});\n\t\n\t        /*\n\t         * Always overwrite constraints for callee on every offer, since answer() and accept() will\n\t         * always be called after parsing the SDP. However, if the caller isn't sending any media,\n\t         * use audio & video as our estimate.\n\t         * TODO not good enough for media renegotiation\n\t         */\n\t        // If sendOnly, we can't rely on the offer for media estimate. It doesn't have any media in it!\n\t        if (pc.state.sendOnly) {\n\t            updateOutgoingMediaEstimate({constraints: {\n\t                audio: true,\n\t                video: true\n\t            }});\n\t        } else {\n\t            updateOutgoingMediaEstimate({sdp: evt.signal.sessionDescription});\n\t        }\n\t\n\t        if (that.outgoingMedia) {\n\t            log.info(\"Default outgoingMedia constraints\", that.outgoingMedia.constraints);\n\t        }\n\t\n\t        if (pc.state.isModifying()) {\n\t            if (pc.state.needDirectConnection === true) {\n\t                info.directConnection = directConnection;\n\t            } else if (pc.state.needDirectConnection === false) {\n\t                // Nothing\n\t            } else {\n\t                info.call = that;\n\t            }\n\t            /**\n\t             * Indicates a request to add something to an existing call. If 'constraints' is set, evt.constraints\n\t             * describes the media the other side has added. In this case, call.approve() must be called in order\n\t             * to approve the new media and send the same type of media.  If directConnection exists, the other side\n\t             * wishes to to open a direct connection. In order to approve, call directConnection.accept(). In either\n\t             * case, call.reject() and directConnection.reject() can be called to decline the request to add to the\n\t             * call.\n\t             * @event respoke.Call#modify\n\t             * @type {respoke.Event}\n\t             * @property {object} [constraints]\n\t             * @property {boolean} [directConnection]\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.fire('modify', info);\n\t        }\n\t\n\t        pc.state.dispatch('receiveOffer', {\n\t            previewLocalMedia: previewLocalMedia,\n\t            approve: that.approve\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Save the answer and tell the browser about it.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.listenModify\n\t     * @private\n\t     */\n\t    function listenModify(evt) {\n\t        log.debug('Call.listenModify', evt);\n\t        if (evt.signal.action === 'initiate') {\n\t            defModify = Q.defer();\n\t            pc.state.dispatch('modify', {receive: true});\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Set up state and media for the modify.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.onModifyAccept\n\t     * @param {respoke.Event} evt\n\t     * @private\n\t     */\n\t    function onModifyAccept(evt) {\n\t        pc.state.dispatch('accept');\n\t\n\t        if (evt.signal.action !== 'initiate') {\n\t            defModify.resolve(); // resolved later for callee\n\t            defModify = undefined;\n\t            return;\n\t        }\n\t\n\t        // callee only from here down\n\t\n\t        // init the directConnection if necessary. We don't need to do anything with\n\t        // audio or video right now.\n\t        if (evt.signal.directConnection === true) {\n\t            actuallyAddDirectConnection().done(function successHandler(dc) {\n\t                directConnection = dc;\n\t                directConnection.accept();\n\t            });\n\t        } else if (evt.signal.directConnection === false) {\n\t            if (directConnection) {\n\t                that.removeDirectConnection({skipModify: true});\n\t                defMedia.resolve(false);\n\t            }\n\t        }\n\t        pc.state.needDirectConnection = typeof evt.signal.directConnection === 'boolean' ?\n\t            evt.signal.directConnection : null;\n\t        that.outgoingMedia.constraints = evt.signal.constraints || that.outgoingMedia.constraints;\n\t    }\n\t\n\t    /**\n\t     * Ignore the modify.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.onModifyReject\n\t     * @param {respoke.Event} evt\n\t     * @param {Error} evt.err\n\t     * @private\n\t     */\n\t    function onModifyReject(evt) {\n\t        if (evt.signal.action !== 'initiate') {\n\t            defMedia.reject(evt.err);\n\t            defModify.reject(evt.err);\n\t            defModify = undefined;\n\t        }\n\t    }\n\t\n\t    /**\n\t     * If video is muted, unmute. If not muted, mute.\n\t     * @deprecated\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.toggleVideo\n\t     */\n\t    that.toggleVideo = function () {\n\t        if (that.isActive()) {\n\t            if (!videoIsMuted) {\n\t                that.muteVideo();\n\t            } else {\n\t                that.unmuteVideo();\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * If audio is muted, unmute. If not muted, mute.\n\t     * @deprecated\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.toggleAudio\n\t     */\n\t    that.toggleAudio = function () {\n\t        if (that.isActive()) {\n\t            if (!audioIsMuted) {\n\t                that.muteAudio();\n\t            } else {\n\t                that.unmuteAudio();\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Indicate whether the call has media of any type flowing in either direction.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.hasMedia\n\t     * @returns {boolean}\n\t     */\n\t    that.hasMedia = function () {\n\t        var local;\n\t        var remote;\n\t\n\t        if (!pc || !pc.getLocalStreams) {\n\t            // PeerConnection.init() has not been called yet\n\t            return false;\n\t        }\n\t\n\t        local = pc.getLocalStreams();\n\t        remote = pc.getRemoteStreams();\n\t\n\t        if (directConnection && directConnection.isActive()) {\n\t            return true;\n\t        }\n\t\n\t        return (local.length > 0 || remote.length > 0);\n\t    };\n\t\n\t    /**\n\t     * Mute all local video streams.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.muteVideo\n\t     * @fires respoke.Call#mute\n\t     */\n\t    that.muteVideo = function () {\n\t        if (videoIsMuted) {\n\t            return;\n\t        }\n\t        that.outgoingMedia.muteVideo();\n\t        videoIsMuted = true;\n\t    };\n\t\n\t    /**\n\t     * Unmute all local video streams.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.unmuteVideo\n\t     * @fires respoke.Call#mute\n\t     */\n\t    that.unmuteVideo = function () {\n\t        if (!videoIsMuted) {\n\t            return;\n\t        }\n\t        that.outgoingMedia.unmuteVideo();\n\t        videoIsMuted = false;\n\t    };\n\t\n\t    /**\n\t     * Mute all local audio streams.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.muteAudio\n\t     * @fires respoke.Call#mute\n\t     */\n\t    that.muteAudio = function () {\n\t        if (audioIsMuted) {\n\t            return;\n\t        }\n\t        that.outgoingMedia.muteAudio();\n\t        audioIsMuted = true;\n\t    };\n\t\n\t    /**\n\t     * Unmute all local audio streams.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.unmuteAudio\n\t     * @fires respoke.Call#mute\n\t     */\n\t    that.unmuteAudio = function () {\n\t        if (!audioIsMuted) {\n\t            return;\n\t        }\n\t\n\t        that.outgoingMedia.unmuteAudio();\n\t        audioIsMuted = false;\n\t    };\n\t\n\t    /**\n\t     * Send tones to the first audio track in a stream\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.sendTones\n\t     * @fires respoke.Call#tone-sent\n\t     * @fires respoke.Call#tone-sending-complete\n\t     * @fires respoke.Call#tone-sending-error\n\t     * @fires respoke.Call#tone-sending-started\n\t     * @param {respoke.Call.onSuccess} [params.onSuccess] - Callback for when a request to\n\t     * play tones has succeeded.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for when a request to\n\t     * play tones has failed.\n\t     * @returns {Promise<respoke.PeerConnection>}\n\t     */\n\t    that.sendTones = function (params) {\n\t        return pc.sendTones(params);\n\t    };\n\t\n\t    /**\n\t     * Cancels playback of all queued tones on the first audio track in a stream\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.cancelTones\n\t     * @fires respoke.Call#tone-sending-cancelled\n\t     * @fires respoke.Call#tone-sending-error\n\t     * @param {respoke.Call.onSuccess} [params.onSuccess] - Callback for when a request to\n\t     * play tones has succeeded.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for when a request to\n\t     * play tones has failed.\n\t     * @returns {Promise<respoke.PeerConnection>}\n\t     */\n\t    that.cancelTones = function (params) {\n\t        return pc.cancelTones(params);\n\t    };\n\t\n\t    /**\n\t     * Save the hangup reason and hang up.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.listenHangup\n\t     * @params {object} evt\n\t     * @params {object} evt.signal - The hangup signal, including an optional hangup reason.\n\t     * @private\n\t     */\n\t    function listenHangup(evt) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        pc.report.callStoppedReason = evt.signal.reason || \"Remote side hung up\";\n\t        pc.state.receivedBye = true;\n\t        pc.state.dispatch('hangup', {signal: false, reason: pc.report.callStoppedReason});\n\t    }\n\t\n\t    pc.state.once('terminated:entry', function (evt) {\n\t        doHangup();\n\t    }, true);\n\t\n\t    that.listen('signal-answer', listenAnswer);\n\t    that.listen('signal-offer', function (evt) {\n\t        if (pc.state.getState() === 'idle') {\n\t            pc.state.once('preparing:entry', function () {\n\t                listenOffer(evt);\n\t            });\n\t        } else {\n\t            listenOffer(evt);\n\t        }\n\t    }, true);\n\t    that.listen('signal-hangup', listenHangup, true);\n\t    that.listen('signal-modify', listenModify, true);\n\t    pc.listen('modify-reject', onModifyReject, true);\n\t    pc.listen('modify-accept', onModifyAccept, true);\n\t    that.listen('signal-icecandidates', function onCandidateSignal(evt) {\n\t        if (!pc || !evt.signal.iceCandidates || !evt.signal.iceCandidates.length) {\n\t            return;\n\t        }\n\t        evt.signal.iceCandidates.forEach(function processCandidate(candidate) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t            pc.addRemoteCandidate({candidate: candidate});\n\t        });\n\t    }, true);\n\t\n\t    that.listen('answer', function (evt) {\n\t        var mediaPromises = [];\n\t\n\t        if (pc.state.receiveOnly || pc.state.needDirectConnection) {\n\t            that.outgoingMediaStreams.length = 0;\n\t            return;\n\t        }\n\t\n\t        /*\n\t         * By the time we get to here, we could be in a couple of states.\n\t         *\n\t         * If receiveOnly is set to true, we could possibly have constraints (if the developer used the API wrong)\n\t         * but we will not have any media in that.outgoingMediaStreams. We should unset that.constraints and skip\n\t         * building any local media.\n\t         *\n\t         * If we have never received any constraints, and receiveOnly is NOT set to true, we will have an estimate\n\t         * at that.outgoingMediaStreams[0] with temporary set to true. This estimate was set by parsing the SDP.\n\t         *\n\t         * If we have received one or more constraints, that.constraints array will contain the most recent set\n\t         * AND we will have an estimate at that.outgoingMediaStreams[0] with temporary set to true. We must completely\n\t         * rebuild that.outgoingMediaStreams from that.constraints.\n\t         */\n\t        if (pc.state.receiveOnly) {\n\t            that.outgoingMediaStreams.length = 0;\n\t            that.constraints = [];\n\t            return;\n\t        }\n\t\n\t        if (that.constraints.length === 0) {\n\t            // We didn't get told what to do by constraints; use our guess.\n\t            that.outgoingMediaStreams[0].temporary = undefined;\n\t        } else if (that.outgoingMediaStreams.length > 0 && that.outgoingMediaStreams[0].temporary) {\n\t            // We got told what to do. Discard our guess. It's OK for that.outgoingMediaStreams to be empty now.\n\t            that.outgoingMediaStreams.shift();\n\t        }\n\t\n\t        // If outgoingMedia is passed into the Call then there is no need to build the LocalMedia here\n\t        if (params.outgoingMedia) {\n\t            return;\n\t        }\n\t\n\t        if (that.constraints.length > 0) {\n\t            that.outgoingMediaStreams.length = 0;\n\t            that.constraints.forEach(function (constraint) {\n\t                mediaPromises.push(buildLocalMedia(constraint));\n\t            });\n\t        } else if (that.outgoingMediaStreams.length > 0) {\n\t            that.outgoingMediaStreams.forEach(function (stream) {\n\t                mediaPromises.push(buildLocalMedia(stream));\n\t            });\n\t        } else {\n\t            throw new Error(\"I have no idea what type of media I am supposed to build.\");\n\t        }\n\t\n\t        // These errors are handled elsewhere.\n\t        Q.all(mediaPromises).done(function () {\n\t            pc.state.dispatch('receiveLocalMedia');\n\t        }, function (err) {\n\t            pc.state.dispatch('reject', {reason: 'media stream error'});\n\t            pc.report.callStoppedReason = err.message;\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.fire('error', {\n\t                reason: err.message\n\t            });\n\t        });\n\t    }, true);\n\t\n\t    if (pc.state.needDirectConnection !== true) {\n\t        pc.state.once('preparing:entry', function () {\n\t            /**\n\t             * This event provides notification for when an incoming call is being received.  If the user wishes\n\t             * to allow the call, the app should call evt.call.answer() to answer the call.\n\t             * @event respoke.Client#call\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Call} call\n\t             * @property {respoke.Endpoint} endpoint\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            client.fire('call', {\n\t                endpoint: that.remoteEndpoint,\n\t                call: that\n\t            });\n\t        }, true);\n\t    }\n\t\n\t    pc.state.listen('idle:exit', function (evt) {\n\t        saveParameters(params);\n\t    });\n\t\n\t    pc.state.listen('preparing:entry', function (evt) {\n\t        init();\n\t\n\t        if (params.outgoingMedia) {\n\t            streamReceivedHandler(params.outgoingMedia);\n\t            pc.state.dispatch('receiveLocalMedia');\n\t        }\n\t\n\t        if (pc.state.caller === true) {\n\t            that.answer();\n\t        }\n\t    }, true);\n\t\n\t    /*\n\t     *  If we are sending media and the other side is not, we have to fire Call#connect manually,\n\t     *  because the RTCPeerConnection will never reach an ICE connection state of \"connected.\"\n\t     *  This will need to be moved when we start handling media renegotiation.\n\t     */\n\t    pc.state.listen('connecting:entry', function connectNoMedia() {\n\t        if (pc.state.sendOnly) {\n\t            /**\n\t             * Indicates that either remote media stream has been added to the call or if no\n\t             * media is expected, the other side is receiving our media.\n\t             * @event respoke.Call#connect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.fire('connect');\n\t            pc.state.dispatch('receiveRemoteMedia');\n\t        }\n\t    });\n\t\n\t    signalingChannel.getTurnCredentials().then(function (result) {\n\t        if (!pc) {\n\t            throw new Error(\"Already hung up.\");\n\t        }\n\t        if (!result) {\n\t            log.warn(\"Relay service not available.\");\n\t            pc.servers = {iceServers: []};\n\t        } else {\n\t            pc.servers = {iceServers: result};\n\t        }\n\t    }).fin(function () {\n\t        if (!pc) {\n\t            throw new Error(\"Already hung up.\");\n\t        }\n\t        pc.state.dispatch('initiate', {\n\t            caller: that.caller\n\t        });\n\t    }).done(null, function (err) {\n\t        if (err.message !== \"Already hung up.\") {\n\t            log.debug('Unexpected exception', err);\n\t        }\n\t    });\n\t\n\t    return that;\n\t}; // End respoke.Call\n\t\n\t/**\n\t * Handle an error that resulted from a method call.\n\t * @callback respoke.Call.errorHandler\n\t * @param {Error} err\n\t */\n\t/**\n\t * Handle the successful kick-off of stats on a call.\n\t * @callback respoke.Call.statsSuccessHandler\n\t * @param {respoke.MediaStatsParser} statsParser\n\t */\n\t/**\n\t * Handle obtaining media successfully.\n\t * @callback respoke.Call.mediaSuccessHandler\n\t * @param {respoke.LocalMedia} localMedia\n\t */\n\t/**\n\t * When on a call, receive local media when it becomes available. This is what you will need to provide if you want\n\t * to show the user their own video during a call. This callback is called every time\n\t * respoke.Call#local-stream-received is fired.\n\t * @callback respoke.Call.onLocalMedia Callback for receiving an HTML5 Video\n\t * element with the local audio and/or video attached.\n\t * @param {respoke.Event} evt\n\t * @param {Element} evt.element\n\t * @param {respoke.LocalMedia} - The outgoingMedia property on the call.\n\t * @param {string} evt.name - The event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When on a call, receive remote media when it becomes available. This is what you will need to provide if you want\n\t * to show the user the other party's video during a call. This callback is called every time\n\t * respoke.Call#connect is fired.\n\t * @callback respoke.Call.onConnect\n\t * @param {respoke.Event} evt\n\t * @param {Element} evt.element - the HTML5 Video element with the new stream attached.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When a call is in setup or media renegotiation happens. This callback will be called every time\n\t * respoke.Call#error.\n\t * @callback respoke.Call.onError\n\t * @param {respoke.Event} evt\n\t * @param {boolean} evt.reason - A human-readable description of the error.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When on a call, receive notification the call has been hung up. This callback is called every time\n\t * respoke.Call#hangup is fired.\n\t * @callback respoke.Call.onHangup\n\t * @param {respoke.Event} evt\n\t * @param {boolean} evt.sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * Called when changing the mute state on any type of media. This callback will be called when media is muted or\n\t * unmuted. This callback is called every time respoke.Call#mute is fired.\n\t * @callback respoke.Call.onMute\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * Called when the callee answers the call. This callback is called every time respoke.Call#answer is fired.\n\t * @callback respoke.Call.onAnswer\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * Called when the user approves local media. This callback will be called whether or not the approval was based\n\t * on user feedback. I. e., it will be called even if the approval was automatic. This callback is called every time\n\t * respoke.Call#approve is fired.\n\t * @callback respoke.Call.onApprove\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When setting up a call, receive notification that the browser has granted access to media.  This callback is\n\t * called every time respoke.Call#allow is fired.\n\t * @callback respoke.Call.onAllow\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When setting up a call, receive notification that the app has asked the browser for permission to get audio or\n\t * video and is waiting on the browser to grant or reject permission. This callback will be called every time\n\t * respoke.Call#requesting-media is fired.\n\t * @callback respoke.Call.onRequestingMedia\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * The use of stats requires an additional module to Respoke. When on a call, receive periodic statistical\n\t * information about the call, including the codec, lost packets, and bandwidth being consumed. This callback is\n\t * called every time respoke.Call#stats is fired.\n\t * @callback respoke.MediaStatsParser.statsHandler\n\t * @param {respoke.Event} evt\n\t * @param {respoke.MediaStats} evt.stats - an object with stats in it.\n\t * @param {respoke.Call} evt.target\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * When on a call, receive local media when it becomes available. This is what you will need to provide if you want\n\t * to allow the user to preview and approve or reject their own video before a call. If this callback is provided,\n\t * Respoke will wait for call.answer() to be called before proceeding. If this callback is not provided,\n\t * Respoke will proceed without waiting for user input. This callback is called every time\n\t * respoke.Call#local-stream-received is fired.\n\t * @callback respoke.Call.previewLocalMedia\n\t * @param {object} element - the HTML5 Video element with the new stream attached.\n\t * @param {respoke.Call} call\n\t */\n\t/**\n\t * Called when a tone is sent on an audio track. This callback is called every time respoke.Call#tone-sent is fired.\n\t * @callback respoke.Call.onToneSent\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.tone\n\t * @param {number} evt.duration\n\t * @param {number} evt.gap\n\t */\n\t/**\n\t * Called when the playback queue of tones has started.\n\t * This callback is called every time respoke.Call#tone-sending-started is fired.\n\t * @callback respoke.Call.onToneSendingStarted\n\t * @param {respoke.Event} evt\n\t * @param {object} evt.target\n\t */\n\t/**\n\t * Receive the DirectConnection.\n\t * @callback respoke.Call.directConnectionSuccessHandler\n\t * @param {respoke.DirectConnection} directConnection\n\t */\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Copyright 2015, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t */\n\t\n\tvar respoke = __webpack_require__(1);\n\tvar log = respoke.log;\n\tvar Q = respoke.Q;\n\t\n\t/**\n\t * A wrapper around the stream from `getUserMedia`,\n\t * which is attached to a call at `call.outgoingMedia`.\n\t *\n\t * @class respoke.LocalMedia\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {object} [params.constraints]\n\t * @param {HTMLVideoElement} params.element - Pass in an optional html video element to have local\n\t * video attached to it.\n\t * @returns {respoke.LocalMedia}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = respoke.EventEmitter(params);\n\t\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.LocalMedia';\n\t    /**\n\t     * Respoke media ID (different from a `MediaStream.id`).\n\t     * @memberof! respoke.LocalMedia\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = respoke.makeGUID();\n\t    /**\n\t     * The HTML element with video attached.\n\t     * @memberof! respoke.LocalMedia\n\t     * @name element\n\t     * @type {HTMLVideoElement}\n\t     */\n\t    that.element = params.element;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name hasScreenShare\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var hasScreenShare = params.hasScreenShare;\n\t    delete params.hasScreenShare;\n\t\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name screenShareSource\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var screenShareSource = params.source;\n\t    delete params.source;\n\t\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name sdpHasAudio\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasAudio = false;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name sdpHasVideo\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasVideo = false;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name sdpHasDataChannel\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasDataChannel = false;\n\t    /**\n\t     * A timer to make sure we only fire {respoke.LocalMedia#requesting-media} if the browser doesn't\n\t     * automatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.\n\t     * @memberof! respoke.LocalMedia\n\t     * @name allowTimer\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var allowTimer = 0;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name mediaOptions\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var mediaOptions = {\n\t        optional: [\n\t            { DtlsSrtpKeyAgreement: true },\n\t            { RtpDataChannels: false }\n\t        ]\n\t    };\n\t\n\t    /**\n\t     * The local `MediaStream` from `getUserMedia()`.\n\t     * @memberof! respoke.LocalMedia\n\t     * @name stream\n\t     * @type {RTCMediaStream}\n\t     */\n\t    that.stream = null;\n\t\n\t    /**\n\t     * The media deferred whose promise is returned from localMedia.start and resolved with the stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @name deferred\n\t     * @type {object}\n\t     * @private\n\t     */\n\t    var deferred = Q.defer();\n\t\n\t    function getStream(theConstraints) {\n\t        for (var i = 0; i < respoke.streams.length; i++) {\n\t            var s = respoke.streams[i];\n\t\n\t            var sConstraints = respoke.clone(s.constraints);\n\t            if (sConstraints.video && sConstraints.video.mandatory &&\n\t                sConstraints.video.mandatory.chromeMediaSourceId) {\n\t                delete sConstraints.video.mandatory.chromeMediaSourceId;\n\t            }\n\t\n\t            if (respoke.isEqual(sConstraints, theConstraints)) {\n\t                return s.stream;\n\t            }\n\t        }\n\t        return null;\n\t    }\n\t\n\t    function removeStream(theConstraints) {\n\t        var toRemoveIndex;\n\t        for (var i = 0; i < respoke.streams.length; i++) {\n\t            var s = respoke.streams[i];\n\t            if (respoke.isEqual(s.constraints, theConstraints)) {\n\t                toRemoveIndex = i;\n\t                break;\n\t            }\n\t        }\n\t        if (toRemoveIndex !== undefined) {\n\t            respoke.streams.splice(toRemoveIndex, 1);\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Save the local stream. Kick off SDP creation.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.onReceiveUserMedia\n\t     * @private\n\t     * @param {RTCMediaStream} theStream\n\t     */\n\t    function onReceiveUserMedia(theStream) {\n\t        that.stream = theStream;\n\t        clearTimeout(allowTimer);\n\t        /**\n\t         * The user has approved the request for media. Any UI changes made to remind the user to click Allow\n\t         * should be canceled now. This event is the same as the `onAllow` callback.  This event gets fired\n\t         * even if the allow process is automatic, i. e., permission and media is granted by the browser\n\t         * without asking the user to approve it.\n\t         * @event respoke.LocalMedia#allow\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         */\n\t        that.fire('allow');\n\t        log.debug('User gave permission to use media.');\n\t        log.debug('onReceiveUserMedia');\n\t\n\t        that.element = that.element || document.createElement('video');\n\t\n\t        // This still needs some work. Using cached streams causes an unused video element to be passed\n\t        // back to the App. This is because we assume at the moment that only one local media video element\n\t        // will be needed. The first one passed back will contain media and the others will fake it. Media\n\t        // will still be sent with every peer connection. Also need to study the use of getLocalElement\n\t        // and the implications of passing back a video element with no media attached.\n\t        var aStream = getStream(that.constraints);\n\t        if (aStream) {\n\t            aStream.numPc += 1;\n\t\n\t            attachMediaStream(that.element, that.stream);\n\t            // We won't want our local video outputting audio.\n\t            that.element.muted = true;\n\t            that.element.autoplay = true;\n\t\n\t            // perform cleanup on the LocalMedia instance if the underlying stream has ended\n\t            aStream.addEventListener('ended', that.stop, false);\n\t\n\t            deferred.resolve();\n\t        } else {\n\t            that.stream.numPc = 1;\n\t            respoke.streams.push({stream: that.stream, constraints: that.constraints});\n\t\n\t            attachMediaStream(that.element, that.stream);\n\t            // We won't want our local video outputting audio.\n\t            that.element.muted = true;\n\t            that.element.autoplay = true;\n\t\n\t            // perform cleanup on the LocalMedia instance if the underlying stream has ended\n\t            that.stream.addEventListener('ended', that.stop, false);\n\t            deferred.resolve();\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Expose getAudioTracks.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.getAudioTracks\n\t     */\n\t    that.getAudioTracks = function () {\n\t        if (that.stream) {\n\t            return that.stream.getAudioTracks();\n\t        }\n\t        return [];\n\t    };\n\t\n\t    /**\n\t     * Expose getVideoTracks.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.getVideoTracks\n\t     */\n\t    that.getVideoTracks = function () {\n\t        if (that.stream) {\n\t            return that.stream.getVideoTracks();\n\t        }\n\t        return [];\n\t    };\n\t\n\t    /**\n\t     * Create the RTCPeerConnection and add handlers. Process any offer we have already received.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.requestMedia\n\t     * @private\n\t     */\n\t    function requestMedia() {\n\t        var theStream;\n\t\n\t        if (!that.constraints) {\n\t            deferred.reject(new Error('No constraints.'));\n\t            return;\n\t        }\n\t\n\t        if (respoke.useFakeMedia === true) {\n\t            that.constraints.fake = true;\n\t        }\n\t\n\t        theStream = getStream(that.constraints);\n\t        if (theStream) {\n\t            log.debug('using old stream');\n\t            onReceiveUserMedia(theStream);\n\t            return;\n\t        }\n\t\n\t        // TODO set getStream(that.constraints) = true as a flag that we are already\n\t        // attempting to obtain this media so the race condition where gUM is called twice with\n\t        // the same constraints when calls are placed too quickly together doesn't occur.\n\t        allowTimer = setTimeout(function delayPermissionsRequest() {\n\t            /**\n\t             * The browser is asking for permission to access the User's media. This would be an ideal time\n\t             * to modify the UI of the application so that the user notices the request for permissions\n\t             * and approves it.\n\t             * @event respoke.LocalMedia#requesting-media\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.LocalMedia} target\n\t             */\n\t            that.fire('requesting-media');\n\t        }, 500);\n\t\n\t        if (respoke.constraintsHasScreenShare(that.constraints)) {\n\t            if (respoke.isNwjs || (respoke.needsChromeExtension && respoke.hasChromeExtension)) {\n\t                respoke.chooseDesktopMedia({source: screenShareSource}, function (params) {\n\t                    if (!params.sourceId) {\n\t                        deferred.reject(new Error(\"Error trying to get screensharing source: \" + params.error));\n\t                        return;\n\t                    }\n\t                    that.constraints.video.mandatory.chromeMediaSourceId = params.sourceId;\n\t                    log.debug(\"Running getUserMedia with constraints\", that.constraints);\n\t                    getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n\t                });\n\t                return;\n\t            } else if (respoke.needsFirefoxExtension && respoke.hasFirefoxExtension) {\n\t                log.debug(\"Running getUserMedia with constraints\", that.constraints);\n\t                getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n\t                return;\n\t            } else {\n\t                deferred.reject(new Error(\"Screen sharing not implemented on this platform yet.\"));\n\t                return;\n\t            }\n\t        }\n\t        log.debug(\"Running getUserMedia with constraints\", that.constraints);\n\t        getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n\t    }\n\t\n\t    /**\n\t     * Handle any error that comes up during the process of getting user media.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.onUserMediaError\n\t     * @private\n\t     * @param {object}\n\t     */\n\t    function onUserMediaError(p) {\n\t        log.debug('Local media error.', p);\n\t        var errorMessage = p.code === 1 ? \"Permission denied.\" : \"Unknown.\";\n\t        deferred.reject(new Error(\"Error getting user media: \" + errorMessage));\n\t    }\n\t\n\t    /**\n\t     * Whether the video stream is muted, or undefined if no stream of this type exists.\n\t     *\n\t     * All video tracks must be muted for this to return `false`.\n\t     * @returns boolean\n\t     */\n\t    that.isVideoMuted = function () {\n\t        if (!that.stream || !that.stream.getVideoTracks().length) {\n\t            return undefined;\n\t        }\n\t\n\t        return that.stream.getVideoTracks().every(function (track) {\n\t            return !track.enabled;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Mute local video stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.muteVideo\n\t     * @fires respoke.LocalMedia#mute\n\t     */\n\t    that.muteVideo = function () {\n\t        if (that.isVideoMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n\t            track.enabled = false;\n\t        });\n\t        /**\n\t         * Indicate that the mute status of local audio or video has changed.\n\t         * @event respoke.LocalMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'video',\n\t            muted: true\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Unmute local video stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.unmuteVideo\n\t     * @fires respoke.LocalMedia#mute\n\t     */\n\t    that.unmuteVideo = function () {\n\t        if (!that.isVideoMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n\t            track.enabled = true;\n\t        });\n\t        /**\n\t         * Indicate that the mute status of local audio or video has changed.\n\t         * @event respoke.LocalMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'video',\n\t            muted: false\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Whether the audio stream is muted, or undefined if no track of this type exists.\n\t     *\n\t     * All audio tracks must be muted for this to return `false`.\n\t     * @returns boolean\n\t     */\n\t    that.isAudioMuted = function () {\n\t        if (!that.stream || !that.stream.getAudioTracks().length) {\n\t            return undefined;\n\t        }\n\t        return that.stream.getAudioTracks().every(function (track) {\n\t            return !track.enabled;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Mute local audio stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.muteAudio\n\t     * @fires respoke.LocalMedia#mute\n\t     */\n\t    that.muteAudio = function () {\n\t        if (that.isAudioMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n\t            track.enabled = false;\n\t        });\n\t        /**\n\t         * Indicate that the mute status of local audio or video has changed.\n\t         * @event respoke.LocalMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'audio',\n\t            muted: true\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Unmute local audio stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.unmuteAudio\n\t     * @fires respoke.LocalMedia#mute\n\t     */\n\t    that.unmuteAudio = function () {\n\t        if (!that.isAudioMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n\t            track.enabled = true;\n\t        });\n\t        /**\n\t         * Indicate that the mute status of local audio or video has changed.\n\t         * @event respoke.LocalMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'audio',\n\t            muted: false\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Stop the stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.stop\n\t     * @fires respoke.LocalMedia#stop\n\t     */\n\t    that.stop = function () {\n\t        if (!that.stream) {\n\t            return;\n\t        }\n\t\n\t        that.stream.numPc -= 1;\n\t        if (that.stream.numPc === 0) {\n\t            that.stream.getTracks().forEach(function (track) {\n\t                track.stop();\n\t            });\n\t            removeStream(that.constraints);\n\t        }\n\t        that.stream = null;\n\t        /**\n\t         * Indicate that local media has stopped.\n\t         * @event respoke.LocalMedia#stop\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         */\n\t        that.fire('stop');\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we are sending a screenshare.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.hasScreenShare\n\t     * @return {boolean}\n\t     */\n\t    that.hasScreenShare = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getVideoTracks().length > 0 && hasScreenShare);\n\t        }\n\t        return hasScreenShare;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we are sending video.\n\t     *\n\t     * Note: This method will return true when the video is a screenshare.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.hasVideo\n\t     * @return {boolean}\n\t     */\n\t    that.hasVideo = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getVideoTracks().length > 0);\n\t        }\n\t        return sdpHasVideo;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we are sending audio.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.hasAudio\n\t     * @return {boolean}\n\t     */\n\t    that.hasAudio = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getAudioTracks().length > 0);\n\t        }\n\t        return sdpHasAudio;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we have media yet.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.hasMedia\n\t     * @return {boolean}\n\t     */\n\t    that.hasMedia = function () {\n\t        return !!that.stream;\n\t    };\n\t\n\t    /**\n\t     * Save and parse the SDP.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.setSDP\n\t     * @param {RTCSessionDescription} oSession\n\t     * @private\n\t     */\n\t    that.setSDP = function (oSession) {\n\t        sdpHasVideo = respoke.sdpHasVideo(oSession.sdp);\n\t        sdpHasAudio = respoke.sdpHasAudio(oSession.sdp);\n\t        sdpHasDataChannel = respoke.sdpHasDataChannel(oSession.sdp);\n\t\n\t        // We don't have media yet & this can still be changed so create the defaults based on what the sdp says.\n\t        if (that.temporary) {\n\t            that.constraints = {\n\t                video: sdpHasVideo,\n\t                audio: sdpHasAudio,\n\t                mandatory: {},\n\t                optional: []\n\t            };\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Parse the constraints.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.setConstraints\n\t     * @param {MediaConstraints} constraints\n\t     * @private\n\t     */\n\t    that.setConstraints = function (constraints) {\n\t        that.constraints = constraints;\n\t        sdpHasVideo = respoke.constraintsHasVideo(that.constraints);\n\t        sdpHasAudio = respoke.constraintsHasAudio(that.constraints);\n\t    };\n\t\n\t    /**\n\t     * Start the stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.start\n\t     * @fires respoke.LocalMedia#start\n\t     * @param {object} [params]\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.start = function (params) {\n\t        var retVal;\n\t        params = params || {};\n\t\n\t        if (that.temporary) {\n\t            deferred.reject(new Error(\"Temporary local media started!\"));\n\t        } else {\n\t            requestMedia();\n\t        }\n\t\n\t        retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t        return retVal;\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.LocalMedia\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Copyright 2015, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t */\n\t\n\tvar respoke = __webpack_require__(1);\n\t\n\t/**\n\t * Class for managing the remote media stream,\n\t * which is attached to a call at `call.outgoingMedia`.\n\t *\n\t * @class respoke.RemoteMedia\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {object} params.constraints\n\t * @param {boolean} params.temporary - whether this instance represents our best guess of future media. If so,\n\t * this object will be deleted when real media comes in. It will be replaced by different instance of\n\t * respoke.RemoteMedia representing the actual state of media.\n\t * @param {HTMLVideoElement} params.element - Pass in an optional html video element to have remote\n\t * video attached to it.\n\t * @returns {respoke.RemoteMedia}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var that = respoke.EventEmitter(params);\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.RemoteMedia';\n\t    /**\n\t     * Respoke media ID (different from a `MediaStream.id`).\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = respoke.makeGUID();\n\t    /**\n\t     * The HTML element with attached video.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name element\n\t     * @type {HTMLVideoElement}\n\t     */\n\t    that.element = params.element || document.createElement('video');\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name hasScreenShare\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var hasScreenShare = params.hasScreenShare;\n\t    delete params.hasScreenShare;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name sdpHasAudio\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasAudio = false;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name sdpHasVideo\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasVideo = false;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name sdpHasDataChannel\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasDataChannel = false;\n\t    /**\n\t     * A timer to make sure we only fire {respoke.RemoteMedia#requesting-media} if the browser doesn't\n\t     * automatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name allowTimer\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var allowTimer = 0;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name mediaOptions\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var mediaOptions = {\n\t        optional: [\n\t            { DtlsSrtpKeyAgreement: true },\n\t            { RtpDataChannels: false }\n\t        ]\n\t    };\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name pc\n\t     * @private\n\t     * @type {respoke.PeerConnection}\n\t     */\n\t    var pc = params.pc;\n\t    delete that.pc;\n\t    /**\n\t     * The remote `MediaStream`.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name stream\n\t     * @type {RTCMediaStream}\n\t     */\n\t    that.stream = params.stream;\n\t\n\t    if (!that.temporary) {\n\t        attachMediaStream(that.element, that.stream);\n\t        that.element.autoplay = true;\n\t        setTimeout(that.element.play.bind(that.element)); // stupid Firefox requires this.\n\t    }\n\t\n\t    /**\n\t     * Indicate whether we are receiving a screenshare.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.hasScreenShare\n\t     * @return {boolean}\n\t     */\n\t    that.hasScreenShare = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getVideoTracks().length > 0 && hasScreenShare);\n\t        }\n\t        return hasScreenShare;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we are receiving video.\n\t     *\n\t     * Note: This method will return true when the video is a screenshare.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.hasVideo\n\t     * @return {boolean}\n\t     */\n\t    that.hasVideo = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getVideoTracks().length > 0);\n\t        }\n\t        return sdpHasVideo;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we are receiving audio.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.hasAudio\n\t     * @return {boolean}\n\t     */\n\t    that.hasAudio = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getAudioTracks().length > 0);\n\t        }\n\t        return sdpHasAudio;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we have media yet.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.hasMedia\n\t     * @return {boolean}\n\t     */\n\t    that.hasMedia = function () {\n\t        return !!that.stream;\n\t    };\n\t\n\t    /**\n\t     * Save and parse the SDP\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.setSDP\n\t     * @param {RTCSessionDescription} oSession\n\t     * @private\n\t     */\n\t    that.setSDP = function (oSession) {\n\t        sdpHasVideo = respoke.sdpHasVideo(oSession.sdp);\n\t        sdpHasAudio = respoke.sdpHasAudio(oSession.sdp);\n\t        sdpHasDataChannel = respoke.sdpHasDataChannel(oSession.sdp);\n\t    };\n\t\n\t    /**\n\t     * Parse the constraints.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.setConstraints\n\t     * @param {MediaConstraints} constraints\n\t     * @private\n\t     */\n\t    that.setConstraints = function (constraints) {\n\t        that.constraints = constraints;\n\t        sdpHasVideo = respoke.constraintsHasVideo(that.constraints);\n\t        sdpHasAudio = respoke.constraintsHasAudio(that.constraints);\n\t    };\n\t\n\t    /**\n\t     * Expose getAudioTracks.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.getAudioTracks\n\t     */\n\t    that.getAudioTracks = function () {\n\t        if (that.stream) {\n\t            return that.stream.getAudioTracks();\n\t        }\n\t        return [];\n\t    };\n\t\n\t    /**\n\t     * Expose getVideoTracks.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.getVideoTracks\n\t     */\n\t    that.getVideoTracks = function () {\n\t        if (that.stream) {\n\t            return that.stream.getVideoTracks();\n\t        }\n\t        return [];\n\t    };\n\t\n\t    /**\n\t     * Stop the stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.stop\n\t     * @fires respoke.RemoteMedia#stop\n\t     */\n\t    that.stop = function () {\n\t        if (!that.stream) {\n\t            return;\n\t        }\n\t\n\t        that.stream.numPc -= 1;\n\t        if (that.stream.numPc === 0) {\n\t            that.stream.getTracks().forEach(function (track) {\n\t                track.stop();\n\t            });\n\t        }\n\t        that.stream = null;\n\t        /**\n\t         * Indicate that remote media has stopped.\n\t         * @event respoke.RemoteMedia#stop\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         */\n\t        that.fire('stop');\n\t    };\n\t\n\t    /**\n\t     * Whether the video stream is muted.\n\t     *\n\t     * All video tracks must be muted for this to return `false`.\n\t     * @returns boolean\n\t     */\n\t    that.isVideoMuted = function () {\n\t        if (!that.stream) {\n\t            return false;\n\t        }\n\t        return that.stream.getVideoTracks().every(function (track) {\n\t            return !track.enabled;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Mute remote video stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.muteVideo\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.muteVideo = function () {\n\t        if (that.isVideoMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n\t            track.enabled = false;\n\t        });\n\t        /**\n\t         * Indicate that the muted status of remote video or audio has changed.\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'video',\n\t            muted: true\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Unmute remote video stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.unmuteVideo\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.unmuteVideo = function () {\n\t        if (!that.isVideoMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n\t            track.enabled = true;\n\t        });\n\t        /**\n\t         * Indicate that the muted status of remote video or audio has changed.\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'video',\n\t            muted: false\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Whether the audio stream is muted.\n\t     *\n\t     * All audio tracks must be muted for this to return `false`.\n\t     * @returns boolean\n\t     */\n\t    that.isAudioMuted = function () {\n\t        if (!that.stream) {\n\t            return false;\n\t        }\n\t        return that.stream.getAudioTracks().every(function (track) {\n\t            return !track.enabled;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Mute remote audio stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.muteAudio\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.muteAudio = function () {\n\t        if (that.isAudioMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n\t            track.enabled = false;\n\t        });\n\t        /**\n\t         * Indicate that the muted status of remote video or audio has changed.\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'audio',\n\t            muted: true\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Unmute remote audio stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.unmuteAudio\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.unmuteAudio = function () {\n\t        if (!that.isAudioMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n\t            track.enabled = true;\n\t        });\n\t        /**\n\t         * Indicate that the muted status of remote video or audio has changed.\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'audio',\n\t            muted: false\n\t        });\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.RemoteMedia\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Copyright 2015, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t */\n\t\n\tvar Q = __webpack_require__(6);\n\tvar respoke = __webpack_require__(1);\n\t\n\t/**\n\t * A conference call to one or more people with audio. Eventually this will handle video, too.\n\t * @class respoke.Conference\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.id - The id that should be used to create the conference call or the ID\n\t * of the call to join.\n\t * @param {string} params.instanceId - client id\n\t * @param {boolean} params.caller - whether or not we initiated the call\n\t * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t * @param {boolean} [params.sendOnly] - whether or not we send media\n\t * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t * relay servers. If it cannot flow through relay servers, the call will fail.\n\t * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t * required to flow peer-to-peer. If it cannot, the call will fail.\n\t * @param {respoke.Endpoint} params.remoteEndpoint - The endpoint who is being called.\n\t * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint.\n\t * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t * wants to perform an action between local media becoming available and calling approve().\n\t * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n\t * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n\t * @param {function} params.signalReport - Signaling action from SignalingChannel.\n\t * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n\t * @param {Array<RTCConstraints>} params.constraints - Array of WebRTC constraints.\n\t * @param {respoke.Conference.onJoin} [params.onJoin] - Callback for when a participant joins the conference.\n\t * @param {respoke.Conference.onLeave} [params.onLeave] - Callback for when a participant leaves the conference.\n\t * @param {respoke.Conference.onMessage} [params.onMessage] - Callback for when a message is sent to the conference.\n\t * @param {respoke.Conference.onMute} [params.onMute] - Callback for when local or remote media is muted or unmuted.\n\t * @param {respoke.Conference.onTopic} [params.onTopic] - Callback for the conference topic changes.\n\t * @param {respoke.Conference.onPresenter} [params.onPresenter] - Callback for when the presenter changes.\n\t * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t * media renegotiation.\n\t * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t * element with the local audio and/or video attached.\n\t * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n\t * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n\t * it was ended in a graceful manner.\n\t * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t * This callback will be called when media is muted or unmuted.\n\t * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t * for the user to give permission to start getting audio or video.\n\t * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t * the approval was automatic.\n\t * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n\t * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n\t * granted by the browser without asking the user to approve it.\n\t * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n\t * video attached to it.\n\t * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n\t * video attached to it.\n\t * @returns {respoke.Conference}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var signalingChannel = params.signalingChannel;\n\t    var that = respoke.EventEmitter({\n\t        id: params.id\n\t    });\n\t\n\t    that.listen('join', params.onJoin);\n\t    that.listen('leave', params.onLeave);\n\t    that.listen('message', params.onMessage);\n\t    that.listen('mute', params.onMute);\n\t    that.listen('topic', params.onTopic);\n\t    that.listen('presenter', params.onPresenter);\n\t    delete params.onJoin;\n\t    delete params.onLeave;\n\t    delete params.onMessage;\n\t    delete params.onMute;\n\t    delete params.onTopic;\n\t    delete params.onPresenter;\n\t\n\t    params.caller = true;\n\t    params.conferenceId = params.id;\n\t    delete params.id;\n\t    params.remoteEndpoint = that;\n\t    that.call = respoke.Call(params);\n\t\n\t    // Redirect a bunch of events.\n\t    [\n\t        'mute', 'hangup', 'connect', 'stats', 'error', 'local-stream-received',\n\t         'remote-stream-received', 'requesting-media', 'approve', 'allow'\n\t    ].forEach(function (eventName) {\n\t        that.call.listen(eventName, function (evt) {\n\t            evt.call = that.call; // target will be updated to point to this conference object.\n\t            that.fire(eventName, evt);\n\t        });\n\t    });\n\t\n\t    delete that.instanceId;\n\t\n\t    /**\n\t     * A name to identify this class\n\t     * @memberof! respoke.Conference\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Conference';\n\t\n\t    /**\n\t     * @memberof! respoke.Conference\n\t     * @name client\n\t     * @type {respoke.Client}\n\t     * @private\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t\n\t    /**\n\t     * Leave the conference.\n\t     * @memberof! respoke.Conference\n\t     * @method respoke.Conference.leave\n\t     */\n\t    that.leave = that.call.hangup;\n\t\n\t    /**\n\t     * Mute local user's audio.\n\t     * @memberof! respoke.Conference\n\t     * @method respoke.Conference.muteAudio\n\t     */\n\t    that.muteAudio = that.call.muteAudio;\n\t\n\t    /**\n\t     * ## The plugin `respoke.MediaStats` must be loaded before using this method.\n\t     *\n\t     * Start the process of listening for a continuous stream of statistics about the flow of audio and/or video.\n\t     * Since we have to wait for both the answer and offer to be available before starting\n\t     * statistics, the library returns a promise for the stats object. The statistics object does not contain the\n\t     * statistics; rather it contains methods of interacting with the actions of obtaining statistics. To obtain\n\t     * the actual statistics one time, use stats.getStats(); use the onStats callback to obtain a continuous\n\t     * stream of statistics every `interval` seconds.  Returns null if stats module is not loaded.\n\t     *\n\t     *     conference.getStats({\n\t     *         onStats: function (evt) {\n\t     *             console.log('Stats', evt.stats);\n\t     *         }\n\t     *     }).done(function () {\n\t     *         console.log('Stats started');\n\t     *     }, function (err) {\n\t     *         console.log('Call is already hung up.');\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Conference\n\t     * @method respoke.Conference.getStats\n\t     * @param {object} params\n\t     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive\n\t     * the stats. If no callback is provided, the call's report will contain stats but the developer will not\n\t     * receive them on the client-side.\n\t     * @param {respoke.Call.statsSuccessHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Call.errorHandler} [params.onError] - Error handler for this invocation of this method only.\n\t     * @returns {Promise<object>|null}\n\t     */\n\t    if (respoke.MediaStats) {\n\t        that.getStats = that.call.getStats;\n\t    }\n\t\n\t    /**\n\t     * Get an array containing a Connection object for each participant in the conference.\n\t     * @memberof! respoke.Conference\n\t     * @method respoke.Conference.getParticipants\n\t     * @returns {Promise<Array>}\n\t     */\n\t    that.getParticipants = function () {\n\t        return signalingChannel.getConferenceParticipants({\n\t            id: that.id\n\t        });\n\t    };\n\t\n\t    /**\n\t     * If the logged-in endpoint has permission through its Respoke role, forcibly remove another participant\n\t     * from the conference, ending its conference call.\n\t     * @memberof! respoke.Conference\n\t     * @method respoke.Conference.removeParticipant\n\t     * @param {object} params\n\t     * @param {string} [endpointId] - The endpoint id of the endpoint to be removed\n\t     * @param {string} [connectionId] - The connection id of the connection to be removed\n\t     * @returns {Promise}\n\t     */\n\t    that.removeParticipant = function (params) {\n\t        params = params || {};\n\t        params.conferenceId = that.id;\n\t        return signalingChannel.removeConferenceParticipant(params);\n\t    };\n\t\n\t    /**\n\t     * If the logged-in endpoint has permission through its Respoke role, shut down the conference, removing all\n\t     * participants.\n\t     * @memberof! respoke.Conference\n\t     * @method respoke.Conference.destroy\n\t     * @returns {Promise}\n\t     */\n\t    that.destroy = function (params) {\n\t        return signalingChannel.destroyConference({\n\t            conferenceId: that.id\n\t        });\n\t    };\n\t\n\t    return that;\n\t};\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** build/respoke.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap a5d7abf450381a7b8463\n **/","module.exports = require('./respoke/respoke');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0\n **/","/*\n * Copyright 2015, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n */\n\"use strict\";\n/*jshint bitwise: false*/\n\n// var Airbrake = require('airbrake-js');\nvar log = require('loglevel');\nlog.setLevel(log.levels.WARN);\n\nvar originalFactory = log.methodFactory;\nlog.methodFactory = function logMethodFactory(methodName, logLevel) {\n    var logMethod = originalFactory(methodName, logLevel);\n    var errorReporter;\n\n    // if (!window.skipErrorReporting && methodName === 'error') {\n    //     var airbrake = new Airbrake({\n    //         projectId: '98133',\n    //         projectKey: 'cd3e085acc5e554658ebcdabd112a6f4'\n    //     });\n    //     errorReporter = function (message) {\n    //         airbrake.push({ error: { message: message } });\n    //     };\n    // } else {\n    //     errorReporter = function () { };\n    // }\n    errorReporter = function () { };\n\n    return function (message) {\n        var args = Array.prototype.slice.call(arguments);\n        var reporterMessage = args.join(' ');\n\n        args.unshift('[Respoke]');\n        logMethod.apply(this, args);\n        errorReporter(reporterMessage);\n    };\n};\n\nrequire('./deps/adapter');\n\n/**\n * `respoke` is a global static class.\n *\n *\n * Include the [latest version](https://cdn.respoke.io/respoke.min.js) or\n * [choose a previous release](http://cdn.respoke.io/list.html).\n *\n * Or use `npm install --save respoke`.\n *\n * Interact with Respoke primarily via [`respoke.Client`](respoke.Client.html):\n *\n *      var client = respoke.createClient();\n *\n *\n * **Development mode without brokered auth**\n *\n *      var client = respoke.createClient({\n *          appId: \"XXXXXXX-my-app-id-XXXXXX\",\n *          developmentMode: true,\n *          endpointId: \"daveops\"\n *      });\n *\n *      client.connect({\n *          onSuccess: function () { ... },\n *          onError: function (err) { ... }\n *      });\n *\n *\n * **Production mode with brokered auth**\n *\n *      var client = respoke.createClient();\n *\n *      // Respoke auth token obtained by your server.\n *      // This is how you control who can connect to Respoke app.\n *      // See API docs for POST [base]/tokens\n *      var tokenId = \"XXXX-XXXX-brokered-auth-token-XXXXX\";\n *\n *      // connect to respoke with the token\n *      client.connect({\n *          token: tokenId\n *          onSuccess: function () { ... },\n *          onError: function (err) { ... }\n *      });\n *\n *      // fetch a new token from your server if it expires\n *      client.listen('disconnect', function (evt) {\n *          // fetch another token from your server.\n *          var newTokenId = \"XXXX-XXXX-brokered-auth-token2-XXXXX\";\n *          client.connect({\n *              token: newTokenId\n *          });\n *      });\n *\n *\n *\n * ### Event listeners vs callback handlers\n *\n * There are two ways to attach listeners. It is highly recommended that you choose one pattern\n * and stick to it throughout your app.\n *\n * For every `event-name`, there is a corresponding callback `onEventName`.\n *\n * **With a listener**\n *\n *      var client = respoke.createClient();\n *      client.listen('connect', function () { });\n *\n * **or with a callback**\n *\n *      var client = respoke.createClient({\n *          // other options go here\n *\n *          onConnect: function () { }\n *      });\n *\n *\n * @namespace respoke\n * @class respoke\n * @global\n * @link https://cdn.respoke.io/respoke.min.js\n */\n\nvar EventEmitter = require('./event');\nvar respoke = module.exports = EventEmitter({\n    ridiculous: false, // print every websocket tx/rx\n    buildNumber: 'NO BUILD NUMBER',\n    streams: [],\n    Q: require('q')\n});\n\nrespoke.Q.longStackSupport = true;\nrespoke.Q.stackJumpLimit = 5;\nrespoke.Q.longStackJumpLimit = 20;\nrespoke.Q.stopUnhandledRejectionTracking();\n\n/**\n * A map of respoke.Client instances available for use. This is useful if you would like to separate some\n * functionality of your app into a separate Respoke app which would require a separate appId.\n * @type {boolean}\n */\nrespoke.instances = {};\n\n/**\n * Indicate whether the user's browser is Chrome and requires the Respoke Chrome extension to do screen sharing.\n * @type {boolean}\n * @private\n */\nrespoke.needsChromeExtension = !!(window.chrome && !window.opera && navigator.webkitGetUserMedia);\n\n/**\n * Indicate whether the user's browser is Firefox and requires the Respoke Firefox extension to do screen sharing.\n * @type {boolean}\n * @private\n */\nrespoke.needsFirefoxExtension = window.webrtcDetectedBrowser === 'firefox';\n\n/**\n * Indicate whether the user has a Respoke Chrome extension installed and running correcty on this domain.\n * @type {boolean}\n * @private\n */\nrespoke.hasChromeExtension = false;\n\n/**\n * Indicate whether the user has a Respoke Firefox extension installed and running correcty on this domain.\n * @type {boolean}\n * @private\n */\nrespoke.hasFirefoxExtension = false;\n\n/**\n * This method will be overridden in the case that an extension or plugin is available for screen sharing.\n *\n * @static\n * @private\n * @memberof respoke\n */\nrespoke.chooseDesktopMedia = function () {\n    log.warn(\"Screen sharing is not implemented for this browser.\");\n};\n\n/**\n * Indicate whether we are dealing with node-webkit, and expose chooseDesktopMedia if so\n * @type {boolean}\n * @private\n */\nrespoke.isNwjs = (function () {\n    var gui;\n    var isNwjs = !!((typeof process !== 'undefined') && (typeof global !== 'undefined') &&\n        global.window && global.window.nwDispatcher);\n\n    if (isNwjs) {\n        // expose native node-webkit chooseDesktopMedia (requires nw.js 0.12+)\n        gui = window.nwDispatcher.requireNwGui();\n        gui.Screen.Init();\n\t\t\n        respoke.chooseDesktopMedia = function (data, callback) {\n            // make data param optional\n            if (!callback && (typeof data === 'function')) {\n                callback = data;\n                data = null;\n            }\n\n            /*\n             * mediaSources can be one of 'window', 'screen', or 'tab', or an array with multiples\n             * https://developer.chrome.com/extensions/desktopCapture\n             */\n            var mediaSources = data && data.source ? [data.source] : ['window', 'screen'];\n\n            gui.Screen.chooseDesktopMedia(mediaSources, function (sourceId) {\n                callback({\n                    type: 'respoke-source-id',\n                    sourceId: sourceId\n                });\n            });\n        };\n    }\n\n    return isNwjs;\n})();\n\n/**\n * Create an Event. This is used in the Chrome/Firefox extensions to communicate between the library and extension.\n * @type {function}\n * @private\n */\nrespoke.extEvent = function (type, data) {\n    var evt = document.createEvent(\"CustomEvent\");\n    evt.initCustomEvent(type, true, true, data);\n    return evt;\n};\n\n/**\n * `\"v0.0.0\"`\n *\n * The respoke.min.js version.\n *\n * Past versions can be found at [cdn.respoke.io/list.html](http://cdn.respoke.io/list.html)\n * @type {string}\n */\nrespoke.version = respoke.buildNumber + \"\";\n\nrespoke.log = log;\nrespoke.Class = require('./class');\nrespoke.EventEmitter = EventEmitter;\nrespoke.Client = require('./client');\nrespoke.Connection = require('./connection');\nrespoke.Endpoint = require('./endpoint');\nrespoke.TextMessage = require('./textMessage');\nrespoke.SignalingMessage = require('./signalingMessage');\nrespoke.Group = require('./group');\nrespoke.SignalingChannel = require('./signalingChannel');\nrespoke.DirectConnection = require('./directConnection');\nrespoke.PeerConnection = require('./peerConnection');\nrespoke.CallState = require('./callState');\nrespoke.Call = require('./call');\nrespoke.LocalMedia = require('./localMedia');\nrespoke.RemoteMedia = require('./remoteMedia');\nrespoke.Conference = require('./conference');\n\n/**\n * Get information from the Respoke Screen Sharing Chrome extension if it is installed.\n * @private\n */\nfunction chromeScreenSharingExtensionReady(evt) {\n    var data = evt.detail;\n    if (data.available !== true) {\n        return;\n    }\n\n    respoke.hasChromeExtension = true;\n    respoke.chooseDesktopMedia = function (params, callback) {\n        if (!callback) {\n            throw new Error(\"Can't choose desktop media without callback parameter.\");\n        }\n\n        function sourceIdListener(evt) {\n            var data = evt.detail;\n\n            respoke.screenSourceId = data.sourceId;\n            callback(data);\n            document.removeEventListener(\"respoke-source-id\", sourceIdListener);\n        }\n\n        document.dispatchEvent(respoke.extEvent('ct-respoke-source-id', {\n            source: params.source ? [params.source] : ['screen', 'window']\n        }));\n\n        document.addEventListener(\"respoke-source-id\", sourceIdListener);\n    };\n\n    respoke.fire('extension-loaded', {\n        type: 'screen-sharing'\n    });\n\n    log.info(\"Respoke Screen Share Chrome extension available for use.\");\n}\n\n// TODO: remove 'respoke-available' event listener on next major version bump\ndocument.addEventListener('respoke-available', chromeScreenSharingExtensionReady);\ndocument.addEventListener('respoke-chrome-screen-sharing-available', chromeScreenSharingExtensionReady);\ndocument.addEventListener('respoke-firefox-screen-sharing-available', function (evt) {\n\n    var data = evt.detail;\n    if (data !== 'available') {\n        return;\n    }\n\n    respoke.hasFirefoxExtension = true;\n\n    respoke.fire('extension-loaded', {\n        type: 'screen-sharing'\n    });\n\n    log.info(\"Respoke Screen Share Firefox extension available for use.\");\n});\n\n/**\n * This is one of two possible entry points for interating with the library.\n *\n * This method creates a new Client object\n * which represents your user's connection to your Respoke app.\n *\n * This method **automatically calls client.connect(params)** after the client is created.\n *\n * @static\n * @memberof respoke\n * @param {object} params Parameters to the respoke.Client constructor.\n * @param {string} [params.appId]\n * @param {string} [params.baseURL]\n * @param {string} [params.token]\n * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n * operation and will limit the services you will be able to use.\n * @param {boolean} [params.reconnect=false] - Whether or not to automatically reconnect to the Respoke service\n * when a disconnect occurs.\n * @param {function} [params.onSuccess] - Success handler for this invocation of this method only.\n * @param {function} [params.onError] - Error handler for this invocation of this method only.\n * @param {function} [params.onJoin] - Callback for when this client's endpoint joins a group.\n * @param {function} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n * @param {function} [params.onMessage] - Callback for when any message is received from anywhere on the system.\n * @param {function} [params.onDisconnect] - Callback for Client disconnect.\n * @param {function} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n * @param {function} [params.onCall] - Callback for when this client's user receives a call.\n * @param {function} [params.onDirectConnection] - Callback for when this client's user receives a request for a\n * direct connection.\n * @param {boolean} [params.enableCallDebugReport=true] - Optional flag defaulting to true which allows sending\n * debugging information.\n * @returns {respoke.Client}\n */\nrespoke.connect = function (params) {\n    var client = respoke.Client(params);\n    client.connect(params);\n    return client;\n};\n\n/**\n * Getter for the respoke client.\n *\n * You can have more than one active client, so this method provides a way to retrieve a specific instance.\n *\n * @static\n * @memberof respoke\n * @param {number} id The Client ID.\n * @returns {respoke.Client}\n */\nrespoke.getClient = function (id) {\n    if (id === undefined) {\n        log.debug(\"Can't call getClient with no client ID.\", new Error().stack);\n    }\n    if (!respoke.instances[id]) {\n        log.debug(\"No client instance with id\", id);\n    }\n    return respoke.instances[id];\n};\n\n/**\n * This is one of two possible entry points for interating with the library.\n *\n * This method creates a new Client object which represents your user's connection to your Respoke app.\n *\n * It **does NOT automatically call the client.connect() method** after the client is created.\n *\n * The `params` argument is the same as `respoke.connect(params)`.\n *\n * @static\n * @memberof respoke\n * @param {object} params Parameters to respoke.Client - same as respoke.connect()\n * @returns {respoke.Client}\n */\nrespoke.createClient = function (params) {\n    var client;\n    params = params || {};\n    if (params.instanceId) {\n        client = respoke.getClient(params.instanceId);\n        if (client) {\n            return client;\n        }\n    }\n    return respoke.Client(params);\n};\n\n/**\n * Build a closure from a listener that will ensure the listener can only be called once.\n * @static\n * @private\n * @memberof respoke\n * @param {function} func\n * @return {function}\n */\nrespoke.callOnce = function (func) {\n    return (function () {\n        var called = false;\n        return function () {\n            if (called === false) {\n                func.apply(null, arguments);\n                called = true;\n            }\n        };\n    })();\n};\n\n/**\n * @static\n * @private\n * @memberof respoke\n * @returns {number}\n */\nrespoke.makeGUID = function () {\n    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n    var uuid = new Array(36);\n    var rnd = 0;\n    var r;\n    for (var i = 0; i < 36; i += 1) {\n        if (i === 8 || i === 13 ||  i === 18 || i === 23) {\n            uuid[i] = '-';\n        } else if (i === 14) {\n            uuid[i] = '4';\n        } else {\n            if (rnd <= 0x02) {\n                rnd = 0x2000000 + (Math.random() * 0x1000000) | 0;\n            }\n            r = rnd & 0xf;\n            rnd = rnd >> 4;\n            uuid[i] = chars[(i === 19) ? (r & 0x3) | 0x8 : r];\n        }\n    }\n    return uuid.join('');\n};\n\n/**\n * This method is used internally to attach handlers to promises that are returned by many methods in the library.\n * It's not recommended that this method be used by developers and apps.\n * @private\n * @static\n * @memberof respoke\n * @param {Promise} promise\n * @param {function} onSuccess\n * @param {function} onError\n * @returns {Promise|undefined}\n */\nrespoke.handlePromise = function (promise, onSuccess, onError) {\n    var returnUndef = false;\n    if (onSuccess || onError) {\n        returnUndef = true;\n    }\n\n    onSuccess = typeof onSuccess === 'function' ? onSuccess : function () {};\n    onError = typeof onError === 'function' ? onError : function () {};\n    promise.done(onSuccess, onError);\n    return (returnUndef ? undefined : promise);\n};\n\n/**\n * Does the browser support `UserMedia`?\n * @static\n * @memberof respoke\n * @returns {boolean}\n */\nrespoke.hasUserMedia = function () {\n    return (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia) instanceof Function;\n};\n\n/**\n * Does the browser support `RTCPeerConnection`?\n * @static\n * @memberof respoke\n * @returns {boolean}\n */\nrespoke.hasRTCPeerConnection = function () {\n    return (window.RTCPeerConnection || window.webkitRTCPeerConnection ||\n            window.mozRTCPeerConnection) instanceof Function;\n};\n\n/**\n * Does the browser support `WebSocket`?\n * @static\n * @memberof respoke\n * @returns {boolean}\n */\nrespoke.hasWebsocket = function () {\n    return (window.WebSocket || window.webkitWebSocket || window.MozWebSocket) instanceof Function;\n};\n\n/**\n * Does the browser have Screen Sharing enabled via browser extensions?\n * @static\n * @memberof respoke\n * @returns {boolean}\n */\nrespoke.hasScreenShare = function () {\n    return respoke.hasChromeExtension || respoke.hasFirefoxExtension;\n};\n\n/**\n * Clone an object.\n * @static\n * @memberof respoke\n * @private\n * @param {Object} source - The object to clone\n * @returns {Object}\n */\nrespoke.clone = function (source) {\n    if (source) {\n        return JSON.parse(JSON.stringify(source));\n    }\n    return source;\n};\n\n/**\n * Compares two objects for equality\n * @static\n * @memberof respoke\n * @private\n * @param {Object} a\n * @param {Object} b\n * @returns {boolean}\n */\nrespoke.isEqual = function (a, b) {\n    var aKeys;\n    var i;\n\n    //check if arrays\n    if (a && b && a.hasOwnProperty('length') && b.hasOwnProperty('length') && a.splice && b.splice) {\n        if (a.length !== b.length) {\n            //short circuit if arrays are different length\n            return false;\n        }\n\n        for (i = 0; i < a.length; i += 1) {\n            if (!respoke.isEqual(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    if (typeof a === 'object' && typeof b === 'object' && Object.keys(a).length === Object.keys(b).length) {\n        aKeys = Object.keys(a);\n        for (i = 0; i < aKeys.length; i += 1) {\n            if (!respoke.isEqual(a[aKeys[i]], b[aKeys[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    return a === b;\n};\n\n/**\n * Count the number of MediaStreams indicated by the SDP\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {number}\n * @private\n */\nrespoke.sdpStreamCount = function (sdp) {\n    var matches;\n    var resolvedMatches = {};\n\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasAudio called with no parameters.\");\n    }\n\n    matches = sdp.match(/mslabel:(.*)/gi);\n\n    if (!matches) {\n        return 0;\n    }\n\n    matches.forEach(function (line) {\n        resolvedMatches[line] = true;\n    });\n    return Object.keys(resolvedMatches).length;\n};\n\n/**\n * Does the sdp indicate an audio stream?\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {boolean}\n * @private\n */\nrespoke.sdpHasAudio = function (sdp) {\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasAudio called with no parameters.\");\n    }\n    return (sdp.indexOf('m=audio') !== -1 && sdp.indexOf('a=recvonly') === -1);\n};\n\n/**\n * Does the sdp indicate a video stream?\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {boolean}\n * @private\n */\nrespoke.sdpHasVideo = function (sdp) {\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasVideo called with no parameters.\");\n    }\n    return (sdp.indexOf('m=video') !== -1 && sdp.indexOf('a=recvonly') === -1);\n};\n\n/**\n * Does the sdp indicate a data channel?\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {boolean}\n * @private\n */\nrespoke.sdpHasDataChannel = function (sdp) {\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasDataChannel called with no parameters.\");\n    }\n    return sdp.indexOf('m=application') !== -1;\n};\n\n/**\n * Does the sdp indicate the creator is sendOnly?\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {boolean}\n * @private\n */\nrespoke.sdpHasSendOnly = function (sdp) {\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasSendOnly called with no parameters.\");\n    }\n    return sdp.indexOf('a=sendonly') !== -1;\n};\n\n/**\n * Does the sdp indicate the creator is receiveOnly?\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {boolean}\n * @private\n */\nrespoke.sdpHasReceiveOnly = function (sdp) {\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasReceiveOnly called with no parameters.\");\n    }\n    return sdp.indexOf('a=recvonly') !== -1;\n};\n\n/**\n * Do the constraints indicate an audio stream?\n * @static\n * @memberof respoke\n * @params {RTCConstraints}\n * @returns {boolean}\n * @private\n */\nrespoke.constraintsHasAudio = function (constraints) {\n    if (!constraints) {\n        throw new Error(\"respoke.constraintsHasAudio called with no parameters.\");\n    }\n    return (constraints.audio === true);\n};\n\n/**\n * Does the constraints indicate a video stream?\n * @static\n * @memberof respoke\n * @params {RTCConstraints}\n * @returns {boolean}\n * @private\n */\nrespoke.constraintsHasVideo = function (constraints) {\n    if (!constraints) {\n        throw new Error(\"respoke.constraintsHasVideo called with no parameters.\");\n    }\n    return (constraints.video === true || typeof constraints.video === 'object');\n};\n\n/**\n * Does the constraints indicate a screenshare?\n * @static\n * @memberof respoke\n * @params {RTCConstraints}\n * @returns {boolean}\n * @private\n */\nrespoke.constraintsHasScreenShare = function (constraints) {\n    if (!constraints) {\n        throw new Error(\"respoke.constraintsHasScreenShare called with no parameters.\");\n    }\n\n    return (constraints.video && constraints.video.mandatory &&\n            (constraints.video.mandatory.chromeMediaSource || constraints.video.mediaSource));\n};\n\n/**\n * Convert old-style constraints parameter into a constraints array.\n * @static\n * @memberof respoke\n * @params {Array<RTCConstraints>|RTCConstraints} [constraints]\n * @params {Array<RTCConstraints>} [defaults]\n * @returns {Array<RTCConstraints>}\n * @private\n */\nrespoke.convertConstraints = function (constraints, defaults) {\n    constraints = constraints || [];\n    defaults = defaults || [];\n\n    if (!constraints.splice) {\n        if (typeof constraints === 'object') {\n            constraints = [constraints];\n        } else {\n            constraints = [];\n        }\n    }\n\n    if (constraints.length === 0 && defaults.length > 0) {\n        return defaults;\n    }\n\n    return constraints;\n};\n\n/**\n * Queue items until a trigger is called, then process them all with an action. Before trigger, hold items for\n * processing. After trigger, process new items immediately.\n * @static\n * @memberof respoke\n * @returns {Array}\n * @private\n */\nrespoke.queueFactory = function () {\n    var queue = [];\n    // action replaces Array.push when trigger is called. Thrown errors will be caught and logged.\n    queue.trigger = function (action) {\n        if (!action) {\n            throw new Error(\"Trigger function requires an action parameter.\");\n        }\n\n        function safeAction(item) {\n            try {\n                action(item);\n            } catch (err) {\n                log.error(\"Error calling queue action.\", err);\n            }\n        }\n        queue.forEach(safeAction);\n        queue.length = 0;\n        queue.push = safeAction;\n    };\n\n    return queue;\n};\n\n/**\n * Retrieve browser-specific WebRTC getUserMedia constraints needed to start a screen sharing call. Takes a set of\n * optional override constraints and amends them for screen sharing.\n *\n * @memberof respoke\n * @static\n * @param {object} [params]\n * @param {string} [params.source] The media source name to pass to firefox\n * @param {RTCConstraints} [params.constraints] constraints to use as a base\n * @returns {RTCConstraints}\n * @private\n */\nrespoke.getScreenShareConstraints = function (params) {\n    params = params || {};\n\n    var screenConstraint = params.constraints || {\n        audio: false,\n        video: {\n            mandatory: {},\n            optional: []\n        }\n    };\n    screenConstraint.audio = false;\n    screenConstraint.video = typeof screenConstraint.video === 'object' ? screenConstraint.video : {};\n    screenConstraint.video.optional = Array.isArray(screenConstraint.video.optional) ?\n        screenConstraint.video.optional : [];\n    screenConstraint.video.mandatory = typeof screenConstraint.video.mandatory === 'object' ?\n        screenConstraint.video.mandatory : {};\n\n    if (respoke.needsChromeExtension || respoke.isNwjs) {\n        screenConstraint.audio = false;\n        screenConstraint.video.mandatory.chromeMediaSource = 'desktop';\n        screenConstraint.video.mandatory.maxWidth = typeof screenConstraint.video.mandatory.maxWidth === 'number' ?\n            screenConstraint.video.mandatory.maxWidth : 2000;\n        screenConstraint.video.mandatory.maxHeight = typeof screenConstraint.video.mandatory.maxHeight === 'number' ?\n            screenConstraint.video.mandatory.maxHeight : 2000;\n\n        if (screenConstraint.video.optional.length > 0) {\n            screenConstraint.video.optional.forEach(function (thing) {\n                thing.googTemporalLayeredScreencast = true;\n            });\n        } else {\n            screenConstraint.video.optional[0] = {\n                googTemporalLayeredScreencast: true\n            };\n        }\n    } else {\n        // firefox, et. al.\n        screenConstraint.video.mediaSource = params.source || 'screen';\n    }\n\n    return screenConstraint;\n};\n\n/**\n * Retrieve a started instance of `respoke.LocalMedia` containing a screen share stream. Useful if you\n * want to prepare the stream prior to starting a screen share.\n *\n *     respoke.getScreenShareMedia().then(function (localMedia) {\n *         document.getElementById('#video').appendChild(localMedia.element);\n *         group.listen('join', function (evt) {\n *             evt.connection.startScreenShare({\n *                 outgoingMedia: localMedia\n *             });\n *         });\n *     }).catch(function (err) {\n *         console.log(err);\n *     });\n *\n * @static\n * @memberof respoke\n * @param {object} params\n * @param {string} [params.source] - The source you would like to use for your screen share. Values vary by browser.\n *  In Chrome, acceptable values are one of 'screen', 'window', or 'tab'.\n *  In Firefox, acceptable values are one of 'screen', 'window', or 'application'.\n * @param {RTCConstraints|Array<RTCConstraints>} [params.constraints] - constraints to use as a base\n * @param {HTMLVideoElement} [params.element] - Pass in an optional html video element to have local\n *  video attached to it.\n * @param {function} [params.onSuccess] Upon success, called with instance of `respoke.LocalMedia`\n * @param {function} [params.onError] Upon failure, called with the error that occurred.\n * @returns {Promise|undefined}\n * @private\n */\nrespoke.getScreenShareMedia = function (params) {\n    params = params || {};\n\n    var deferred = respoke.Q.defer();\n    var criteria = {\n        source: params.source,\n        constraints: respoke.clone(params.constraints)\n    };\n    var localMedia = respoke.LocalMedia({\n        hasScreenShare: true,\n        constraints: respoke.getScreenShareConstraints(criteria),\n        source: params.source,\n        element: params.element\n    });\n\n    localMedia.start().done(function () {\n        deferred.resolve(localMedia);\n    }, function (err) {\n        deferred.reject(err);\n    });\n\n    return respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/respoke.js\n ** module id = 1\n ** module chunks = 0\n **/","/*\r\n* loglevel - https://github.com/pimterry/loglevel\r\n*\r\n* Copyright (c) 2013 Tim Perry\r\n* Licensed under the MIT license.\r\n*/\r\n(function (root, definition) {\r\n    if (typeof module === 'object' && module.exports && typeof require === 'function') {\r\n        module.exports = definition();\r\n    } else if (typeof define === 'function' && typeof define.amd === 'object') {\r\n        define(definition);\r\n    } else {\r\n        root.log = definition();\r\n    }\r\n}(this, function () {\r\n    var self = {};\r\n    var noop = function() {};\r\n    var undefinedType = \"undefined\";\r\n\r\n    function realMethod(methodName) {\r\n        if (typeof console === undefinedType) {\r\n            return false; // We can't build a real method without a console to log to\r\n        } else if (console[methodName] !== undefined) {\r\n            return bindMethod(console, methodName);\r\n        } else if (console.log !== undefined) {\r\n            return bindMethod(console, 'log');\r\n        } else {\r\n            return noop;\r\n        }\r\n    }\r\n\r\n    function bindMethod(obj, methodName) {\r\n        var method = obj[methodName];\r\n        if (typeof method.bind === 'function') {\r\n            return method.bind(obj);\r\n        } else {\r\n            try {\r\n                return Function.prototype.bind.call(method, obj);\r\n            } catch (e) {\r\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\r\n                return function() {\r\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    function enableLoggingWhenConsoleArrives(methodName, level) {\r\n        return function () {\r\n            if (typeof console !== undefinedType) {\r\n                replaceLoggingMethods(level);\r\n                self[methodName].apply(self, arguments);\r\n            }\r\n        };\r\n    }\r\n\r\n    var logMethods = [\r\n        \"trace\",\r\n        \"debug\",\r\n        \"info\",\r\n        \"warn\",\r\n        \"error\"\r\n    ];\r\n\r\n    function replaceLoggingMethods(level) {\r\n        for (var i = 0; i < logMethods.length; i++) {\r\n            var methodName = logMethods[i];\r\n            self[methodName] = (i < level) ? noop : self.methodFactory(methodName, level);\r\n        }\r\n    }\r\n\r\n    function persistLevelIfPossible(levelNum) {\r\n        var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\r\n\r\n        // Use localStorage if available\r\n        try {\r\n            window.localStorage['loglevel'] = levelName;\r\n            return;\r\n        } catch (ignore) {}\r\n\r\n        // Use session cookie as fallback\r\n        try {\r\n            window.document.cookie = \"loglevel=\" + levelName + \";\";\r\n        } catch (ignore) {}\r\n    }\r\n\r\n    function loadPersistedLevel() {\r\n        var storedLevel;\r\n\r\n        try {\r\n            storedLevel = window.localStorage['loglevel'];\r\n        } catch (ignore) {}\r\n\r\n        if (typeof storedLevel === undefinedType) {\r\n            try {\r\n                storedLevel = /loglevel=([^;]+)/.exec(window.document.cookie)[1];\r\n            } catch (ignore) {}\r\n        }\r\n        \r\n        if (self.levels[storedLevel] === undefined) {\r\n            storedLevel = \"WARN\";\r\n        }\r\n\r\n        self.setLevel(self.levels[storedLevel]);\r\n    }\r\n\r\n    /*\r\n     *\r\n     * Public API\r\n     *\r\n     */\r\n\r\n    self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\r\n        \"ERROR\": 4, \"SILENT\": 5};\r\n\r\n    self.methodFactory = function (methodName, level) {\r\n        return realMethod(methodName) ||\r\n               enableLoggingWhenConsoleArrives(methodName, level);\r\n    };\r\n\r\n    self.setLevel = function (level) {\r\n        if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\r\n            level = self.levels[level.toUpperCase()];\r\n        }\r\n        if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\r\n            persistLevelIfPossible(level);\r\n            replaceLoggingMethods(level);\r\n            if (typeof console === undefinedType && level < self.levels.SILENT) {\r\n                return \"No console available for logging\";\r\n            }\r\n        } else {\r\n            throw \"log.setLevel() called with invalid level: \" + level;\r\n        }\r\n    };\r\n\r\n    self.enableAll = function() {\r\n        self.setLevel(self.levels.TRACE);\r\n    };\r\n\r\n    self.disableAll = function() {\r\n        self.setLevel(self.levels.SILENT);\r\n    };\r\n\r\n    // Grab the current global log variable in case of overwrite\r\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\r\n    self.noConflict = function() {\r\n        if (typeof window !== undefinedType &&\r\n               window.log === self) {\r\n            window.log = _log;\r\n        }\r\n\r\n        return self;\r\n    };\r\n\r\n    loadPersistedLevel();\r\n    return self;\r\n}));\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/loglevel/lib/loglevel.js\n ** module id = 2\n ** module chunks = 0\n **/","/*!\n *  Copyright (c) 2014 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the same directory as\n *  this source file.\n * @ignore\n */\n\n/* More information about these options at jshint.com/docs/options */\n\n/* jshint browser: true, camelcase: true, curly: true, devel: true,\neqeqeq: true, forin: false, globalstrict: true, quotmark: single,\nundef: true, unused: strict */\n\n/* global mozRTCIceCandidate, mozRTCPeerConnection,\nmozRTCSessionDescription, webkitRTCPeerConnection */\n\n/* exported trace */\n\n'use strict';\n\nvar RTCPeerConnection = null;\nvar getUserMedia = null;\nvar attachMediaStream = null;\nvar reattachMediaStream = null;\nvar webrtcDetectedBrowser = null;\nvar webrtcDetectedVersion = null;\n\nfunction trace(text) {\n  // This function is used for logging.\n  if (text[text.length - 1] === '\\n') {\n    text = text.substring(0, text.length - 1);\n  }\n  console.log((window.performance.now() / 1000).toFixed(3) + ': ' + text);\n}\n\nfunction maybeFixConfiguration(pcConfig) {\n  if (!pcConfig) {\n    return;\n  }\n  for (var i = 0; i < pcConfig.iceServers.length; i++) {\n    if (pcConfig.iceServers[i].hasOwnProperty('urls')) {\n      pcConfig.iceServers[i].url = pcConfig.iceServers[i].urls;\n      delete pcConfig.iceServers[i].urls;\n    }\n  }\n}\n\nif (navigator.mozGetUserMedia) {\n  console.log('This appears to be Firefox');\n\n  webrtcDetectedBrowser = 'firefox';\n\n  webrtcDetectedVersion =\n    parseInt(navigator.userAgent.match(/Firefox\\/([0-9]+)\\./)[1], 10);\n\n  // The RTCPeerConnection object.\n  RTCPeerConnection = function(pcConfig, pcConstraints) {\n    // .urls is not supported in FF yet.\n    maybeFixConfiguration(pcConfig);\n    return new mozRTCPeerConnection(pcConfig, pcConstraints);\n  };\n\n  // The RTCSessionDescription object.\n  window.RTCSessionDescription = mozRTCSessionDescription;\n\n  // The RTCIceCandidate object.\n  window.RTCIceCandidate = mozRTCIceCandidate;\n\n  // getUserMedia shim (only difference is the prefix).\n  // Code from Adam Barth.\n  getUserMedia = navigator.mozGetUserMedia.bind(navigator);\n  navigator.getUserMedia = getUserMedia;\n\n  // Creates ICE server from the URL for FF.\n  window.createIceServer = function(url, username, password) {\n    var iceServer = null;\n    var urlParts = url.split(':');\n    if (urlParts[0].indexOf('stun') === 0) {\n      // Create ICE server with STUN URL.\n      iceServer = {\n        'url': url\n      };\n    } else if (urlParts[0].indexOf('turn') === 0) {\n      if (webrtcDetectedVersion < 27) {\n        // Create iceServer with turn url.\n        // Ignore the transport parameter from TURN url for FF version <=27.\n        var turnUrlParts = url.split('?');\n        // Return null for createIceServer if transport=tcp.\n        if (turnUrlParts.length === 1 ||\n          turnUrlParts[1].indexOf('transport=udp') === 0) {\n          iceServer = {\n            'url': turnUrlParts[0],\n            'credential': password,\n            'username': username\n          };\n        }\n      } else {\n        // FF 27 and above supports transport parameters in TURN url,\n        // So passing in the full url to create iceServer.\n        iceServer = {\n          'url': url,\n          'credential': password,\n          'username': username\n        };\n      }\n    }\n    return iceServer;\n  };\n\n  window.createIceServers = function(urls, username, password) {\n    var iceServers = [];\n    // Use .url for FireFox.\n    for (var i = 0; i < urls.length; i++) {\n      var iceServer =\n        window.createIceServer(urls[i], username, password);\n      if (iceServer !== null) {\n        iceServers.push(iceServer);\n      }\n    }\n    return iceServers;\n  };\n\n  // Attach a media stream to an element.\n  attachMediaStream = function(element, stream) {\n    //console.log('Attaching media stream');\n    element.mozSrcObject = stream;\n    setTimeout(function () {\n      element.play();\n    }, 100);\n  };\n\n  reattachMediaStream = function(to, from) {\n    //console.log('Reattaching media stream');\n    to.mozSrcObject = from.mozSrcObject;\n  };\n\n} else if (navigator.webkitGetUserMedia) {\n  console.log('This appears to be Chrome');\n\n  webrtcDetectedBrowser = 'chrome';\n  // Temporary fix until crbug/374263 is fixed.\n  // Setting Chrome version to 999, if version is unavailable.\n  var result = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n  if (result !== null) {\n    webrtcDetectedVersion = parseInt(result[2], 10);\n  } else {\n    webrtcDetectedVersion = 999;\n  }\n\n  // Creates iceServer from the url for Chrome M33 and earlier.\n  window.createIceServer = function(url, username, password) {\n    var iceServer = null;\n    var urlParts = url.split(':');\n    if (urlParts[0].indexOf('stun') === 0) {\n      // Create iceServer with stun url.\n      iceServer = {\n        'url': url\n      };\n    } else if (urlParts[0].indexOf('turn') === 0) {\n      // Chrome M28 & above uses below TURN format.\n      iceServer = {\n        'url': url,\n        'credential': password,\n        'username': username\n      };\n    }\n    return iceServer;\n  };\n\n  // Creates iceServers from the urls for Chrome M34 and above.\n  window.createIceServers = function(urls, username, password) {\n    var iceServers = [];\n    if (webrtcDetectedVersion >= 34) {\n      // .urls is supported since Chrome M34.\n      iceServers = {\n        'urls': urls,\n        'credential': password,\n        'username': username\n      };\n    } else {\n      for (var i = 0; i < urls.length; i++) {\n        var iceServer =\n          window.createIceServer(urls[i], username, password);\n        if (iceServer !== null) {\n          iceServers.push(iceServer);\n        }\n      }\n    }\n    return iceServers;\n  };\n\n  // The RTCPeerConnection object.\n  RTCPeerConnection = function(pcConfig, pcConstraints) {\n    // .urls is supported since Chrome M34.\n    if (webrtcDetectedVersion < 34) {\n      maybeFixConfiguration(pcConfig);\n    }\n    return new webkitRTCPeerConnection(pcConfig, pcConstraints);\n  };\n\n  // Get UserMedia (only difference is the prefix).\n  // Code from Adam Barth.\n  getUserMedia = navigator.webkitGetUserMedia.bind(navigator);\n  navigator.getUserMedia = getUserMedia;\n\n  // Attach a media stream to an element.\n  attachMediaStream = function(element, stream) {\n    if (typeof element.srcObject !== 'undefined') {\n      element.srcObject = stream;\n    } else if (typeof element.mozSrcObject !== 'undefined') {\n      element.mozSrcObject = stream;\n    } else if (typeof element.src !== 'undefined') {\n      element.src = URL.createObjectURL(stream);\n    } else {\n      console.log('Error attaching stream to element.');\n    }\n  };\n\n  reattachMediaStream = function(to, from) {\n    to.src = from.src;\n  };\n} else {\n  console.log('Browser does not appear to be WebRTC-capable');\n}\n\n\nwindow.RTCPeerConnection = RTCPeerConnection;\nwindow.getUserMedia = getUserMedia;\nwindow.attachMediaStream = attachMediaStream;\nwindow.reattachMediaStream = reattachMediaStream;\nwindow.webrtcDetectedBrowser = webrtcDetectedBrowser;\nwindow.webrtcDetectedVersion = webrtcDetectedVersion;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/deps/adapter.js\n ** module id = 3\n ** module chunks = 0\n **/","/*\n * Copyright 2015, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n */\n\nvar log = require('loglevel');\nvar respokeClass = require('./class');\n\n/**\n * Higher order function to wrap a passed in function. The returned function will only execute\n * the passed in function the first time it is called, then be a no-op any subsequent tries.\n *\n * @private\n */\nvar callOnce = function (func) {\n    \"use strict\";\n    return (function () {\n        var called = false;\n        return function () {\n            if (!called) {\n                func.apply(null, arguments);\n                called = true;\n            }\n        };\n    })();\n};\n\n/**\n * A generic class for emitting and listening to events. This is used internally by respoke.js\n * to provide evented behavior. You can add custom events and inherit your own objects from\n * the EventEmitter.\n *\n * ```\n * // Adding a custom event to a respoke.Client instance\n * client.listen('my-event', function (evt) { });\n * client.fire('my-event', { name: 'my-event', asdf: 'jkl' });\n * ```\n *\n * ```\n * // Custom EventEmitter\n * var MyCustomEmitter = respoke.EventEmitter();\n * var emitterInstance = MyCustomEmitter();\n * emitterInstance.fire('hi', { name: 'hi', message: 'hello' });\n * emitterInstance.listen('hi', function (evt) { });\n * ```\n *\n * @class respoke.EventEmitter\n * @inherits respoke.Class\n * @constructor\n * @param {object} params\n * @param {string} params.instanceId\n * @returns {respoke.EventEmitter}\n */\nvar EventEmitter = module.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = respokeClass(params);\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.EventEmitter\n     * @name className\n     * @type {string}\n     * @private\n     */\n    that.className = 'respoke.EventEmitter';\n\n    /**\n     * @memberof! respoke.EventEmitter\n     * @name eventList\n     * @private\n     * @type {object}\n     */\n    var eventList = {};\n\n    /**\n     * Add a listener that will only be called once to an object.  This method adds the given listener to the given\n     * event in the case that the same\n     * listener is not already registered to this event and the listener is a function.  The third argument 'isInternal'\n     * is used only internally by the library to indicate that this listener is a library-used listener and should not\n     * count when we are trying to determine if an event has listeners placed by the developer.\n     *\n     *     client.once('connect', function (evt) {\n     *         console.log(\"This is the first time we connected.\");\n     *     });\n     *\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.listen\n     * @param {string} eventType - A developer-specified string identifying the event.\n     * @param {respoke.EventEmitter.eventListener} listener - A function to call when the event is fire.\n     * @param {boolean} [isInternal] - A flag to indicate this listener was added by the library. This parameter should\n     * not be used by developers who are using the library, only by developers who are working on the library itself.\n     */\n    that.once = function (eventType, listener, isInternal) {\n        var string = listener.toString();\n        listener = callOnce(listener);\n        listener.toString = function () { return string; };\n        listener.once = true;\n        that.listen(eventType, listener, isInternal);\n    };\n\n    /**\n     * Add a `listener` function to an object.\n     *\n     * This method adds the `listener` to the event `eventName`.\n     *\n     * If an identical listener already registered to this event, it will **not** be added.\n     *\n     * ##### Example of adding an event listener.\n     *\n     *     client.listen('connect', function (evt) {\n     *         console.log(\"We've connected!\", evt);\n     *     });\n     *\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.listen\n     * @param {string} eventType - The name of the event.\n     * @param {respoke.EventEmitter.eventListener} listener - A function to call when the event is\n     * fired.\n     * @arg {boolean} isInternal - Internal use only. A flag to indicate this listener was\n     * added by the library. This parameter should not be used by developers who are using\n     * the library, only by developers who are working on the library itself.\n     */\n    that.listen = function (eventType, listener, isInternal) {\n        if (listener === undefined) {\n            return;\n        }\n        var invalidEventType = typeof eventType !== 'string' || !eventType;\n        var invalidListener = typeof listener !== 'function';\n        if (invalidEventType || invalidListener) {\n            log.error(\"Invalid request to add event listener to\", eventType, listener);\n            return;\n        }\n\n        eventList[eventType] = eventList[eventType] || [];\n        listener.isInternal = !!isInternal; // boolify\n\n        var toString = function (fn) {\n            return fn.toString();\n        };\n        var isNotAlreadyAdded = eventList[eventType].map(toString).indexOf(listener.toString()) === -1;\n\n        if (isNotAlreadyAdded) {\n            eventList[eventType].push(listener);\n        } else {\n            log.warn(\"Not adding duplicate listener to\", eventType, listener);\n        }\n    };\n\n    /**\n     * Remove a listener from an object. If no eventType is specified, all eventTypes will be\n     * cleared. If an eventType is specified but no listener is specified, all listeners will be\n     * removed from the specified eventType.  If a listener is also specified, only that listener\n     * will be removed.\n     *\n     *     client.ignore('connect', connectHandler);\n     *\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.ignore\n     * @param {string} [eventType] - An optional developer-specified string identifying the event.\n     * @param {function} [listener] - An optional function to remove from the specified event.\n     */\n    that.ignore = function (eventType, listener) {\n        // Remove all events from this object\n        if (eventType === undefined) {\n            eventList = {};\n            return;\n        }\n\n        // Remove all listeners from this event.\n        if (listener === undefined || !eventList[eventType]) {\n            eventList[eventType] = [];\n            return;\n        }\n\n        // Remove only one listener from this event.\n        for (var i = eventList[eventType].length - 1; i >= 0; i -= 1) {\n            if (listener === eventList[eventType][i]) {\n                eventList[eventType].splice(i, 1);\n                return;\n            }\n        }\n    };\n\n    /**\n     * Trigger an event on an object. All listeners for the specified eventType will be called.\n     * Listeners will be bound to the object ('this' will refer to the object), and additional\n     * arguments to fire() will be passed into each listener.\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.fire\n     * @param {string} eventType - A developer-specified string identifying the event to fire.\n     * @param {string|number|object|array} evt - Any number of optional parameters to be passed to\n     * the listener\n     * @private\n     */\n    that.fire = function (eventType, evt) {\n        var args = null;\n        var count = 0;\n        var toRemove = [];\n        var i;\n\n        evt = evt || {};\n        evt.name = eventType;\n        evt.target = that;\n\n        if (!eventType) {\n            return;\n        }\n\n        if (!eventList[eventType]) {\n            log.debug(\"fired \" + that.className + \"#\" + eventType + \" 0 listeners called with params\", evt);\n            return;\n        }\n\n        for (i = 0; i < eventList[eventType].length; i += 1) {\n            var listener = eventList[eventType][i];\n            if (typeof listener === 'function') {\n                setTimeout(listenerBuilder(listener, evt, eventType));\n\n                count += 1;\n                if (listener.once === true) {\n                    toRemove.push(i);\n                }\n            }\n        }\n\n        for (i = (toRemove.length - 1); i >= 0; i -= 1) {\n            eventList[eventType].splice(toRemove[i], 1);\n        }\n\n        log.debug(\"fired \" + that.className + \"#\" + eventType + \" \" + count + \" listeners called with params\", evt);\n    };\n\n    function listenerBuilder(listener, evt, eventType) {\n        return function () {\n            try {\n                listener.call(that, evt);\n            } catch (e) {\n                log.error('Error in ' + that.className + \"#\" + eventType, e.message, e.stack);\n            }\n        };\n    }\n\n    /**\n     * Determine if an object has had any listeners registered for a given event outside the library. This method\n     * checks for the isInternal flag on each listener and doesn't count it toward an event being listened to. This\n     * method is used in the library to handle situations where an action is needed if an event won't be acted on.\n     * For instance, if a call comes in for the logged-in user, but the developer isn't listening to\n     * {respoke.Client#call}, we'll need to reject the call immediately.\n     *\n     *     if (client.hasListeners('call')) {\n     *         // already handled!\n     *     }\n     *\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.hasListeners\n     * @param {string} eventType - The name of the event\n     * @returns {boolean} Whether this event has any listeners that are external to this library.\n     */\n    that.hasListeners = function (eventType) {\n        if (eventType === undefined) {\n            throw new Error(\"Missing required parameter event type.\");\n        }\n\n        if (!eventList[eventType]) {\n            return false;\n        }\n\n        return !eventList[eventType].every(function eachListener(listener) {\n            return listener.isInternal;\n        });\n    };\n\n    return that;\n}; // End respoke.EventEmitter\n/**\n * @callback respoke.EventEmitter.eventListener\n * @param {respoke.Event} evt\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/event.js\n ** module id = 4\n ** module chunks = 0\n **/","/*\n * Copyright 2015, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n */\n\n/**\n * Empty base class. Use params.that (if exists) for the base object, but delete it from the instance.\n * Copy all params that were passed in onto the base object. Add the class name.\n * @class respoke.Class\n * @private\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = params.that || {};\n\n    that.className = 'respoke.Class';\n    delete params.that;\n    delete that.client;\n\n    Object.keys(params).forEach(function copyParam(name) {\n        that[name] = params[name];\n    });\n\n    return that;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/class.js\n ** module id = 5\n ** module chunks = 0\n **/","// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    \"use strict\";\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\" && typeof module === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else if (typeof self !== \"undefined\") {\n        self.Q = definition();\n\n    } else {\n        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n    // queue for late tasks, used by unhandled rejection tracking\n    var laterQueue = [];\n\n    function flush() {\n        /* jshint loopfunc: true */\n        var task, domain;\n\n        while (head.next) {\n            head = head.next;\n            task = head.task;\n            head.task = void 0;\n            domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n            runSingle(task, domain);\n\n        }\n        while (laterQueue.length) {\n            task = laterQueue.pop();\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    // runs a single function in the async queue\n    function runSingle(task, domain) {\n        try {\n            task();\n\n        } catch (e) {\n            if (isNodeJS) {\n                // In node, uncaught exceptions are considered fatal errors.\n                // Re-throw them synchronously to interrupt flushing!\n\n                // Ensure continuation if the uncaught exception is suppressed\n                // listening \"uncaughtException\" events (as domains does).\n                // Continue in next event to avoid tick recursion.\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n\n                throw e;\n\n            } else {\n                // In browsers, uncaught exceptions are not fatal.\n                // Re-throw them asynchronously to avoid slow-downs.\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n\n        if (domain) {\n            domain.exit();\n        }\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process === \"object\" &&\n        process.toString() === \"[object process]\" && process.nextTick) {\n        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n        // To see through fake Node environments:\n        // * Mocha test runner - exposes a `process` global without a `nextTick`\n        // * Browserify - exposes a `process.nexTick` function that uses\n        //   `setTimeout`. In this case `setImmediate` is preferred because\n        //    it is faster. Browserify's `process.toString()` yields\n        //   \"[object Object]\", while in a real Node environment\n        //   `process.nextTick()` yields \"[object process]\".\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n    nextTick.runAfter = function (task) {\n        laterQueue.push(task);\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack &&\n        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack) {\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        error.stack = filterStackString(concatedStacks);\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n// enable long stacks if Q_DEBUG is set\nif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n}\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            Q.nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n        promise.source = newPromise;\n\n        array_reduce(messages, function (undefined, message) {\n            Q.nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            Q.nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become settled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be settled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function (resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function (answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\nQ.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n};\n\n/**\n * Works almost like \"finally\", but not called for rejections.\n * Original resolution value is passed through callback unaffected.\n * Callback may return a promise that will be awaited for.\n * @param {Function} callback\n * @returns {Q.Promise}\n * @example\n * doSomething()\n *   .then(...)\n *   .tap(console.log)\n *   .then(...);\n */\nPromise.prototype.tap = function (callback) {\n    callback = Q(callback);\n\n    return this.then(function (value) {\n        return callback.fcall(value).thenResolve(value);\n    });\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return object instanceof Promise;\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar reportedUnhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n            if (array_indexOf(unhandledRejections, promise) !== -1) {\n                process.emit(\"unhandledRejection\", reason, promise);\n                reportedUnhandledRejections.push(promise);\n            }\n        });\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n            Q.nextTick.runAfter(function () {\n                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n                if (atReport !== -1) {\n                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n                    reportedUnhandledRejections.splice(atReport, 1);\n                }\n            });\n        }\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return Q(result.value);\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return Q(exception.value);\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var pendingCount = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++pendingCount;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--pendingCount === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (pendingCount === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Returns the first resolved promise of an array. Prior rejected promises are\n * ignored.  Rejects only if all promises are rejected.\n * @param {Array*} an array containing values or promises for values\n * @returns a promise fulfilled with the value of the first resolved promise,\n * or a rejected promise if all promises are rejected.\n */\nQ.any = any;\n\nfunction any(promises) {\n    if (promises.length === 0) {\n        return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n        var promise = promises[index];\n\n        pendingCount++;\n\n        when(promise, onFulfilled, onRejected, onProgress);\n        function onFulfilled(result) {\n            deferred.resolve(result);\n        }\n        function onRejected() {\n            pendingCount--;\n            if (pendingCount === 0) {\n                deferred.reject(new Error(\n                    \"Can't get fulfillment value from any promise, all \" +\n                    \"promises were rejected.\"\n                ));\n            }\n        }\n        function onProgress(progress) {\n            deferred.notify({\n                index: index,\n                value: progress\n            });\n        }\n    }, undefined);\n\n    return deferred.promise;\n}\n\nPromise.prototype.any = function () {\n    return any(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        Q.nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {Any*} custom error message or Error object (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n};\n\nPromise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        if (!error || \"string\" === typeof error) {\n            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n            error.code = \"ETIMEDOUT\";\n        }\n        deferred.reject(error);\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            Q.nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            Q.nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/q/q.js\n ** module id = 6\n ** module chunks = 0\n **/","/*\n * Copyright 2015, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\nvar log = respoke.log;\n\n/**\n * `respoke.Client` is the top-level interface to the API. Interacting with Respoke should be done using\n * a `respoke.Client` instance.\n *\n * There are two ways to get a client:\n *\n *      var client = respoke.createClient(clientParams);\n *      // . . . set stuff up, then . . .\n *      client.connect(connectParams);\n *\n * or\n *\n *      // creates client and connects to Respoke all at once\n *      var client = respoke.connect(allParams);\n *\n * A client does the following things:\n *\n * 1. authentication with the Respoke API\n * 1. receives server-side app-specific information\n * 1. tracks connections and presence\n * 1. provides methods to get and interact with tracked entities (like groups and endpoints)\n * 1. stores default settings for calls and direct connections\n * 1. automatically reconnects to the API when network activity is lost*\n *\n * *If `developmentMode` is set to true. If not using `developmentMode`, disable automatic\n * reconnect by sending `reconnect: false` and listening to the Client's disconnect event\n * to fetch a new brokered auth token, then call `client.connect()` with the new token.\n *\n * @class respoke.Client\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n * respoke.connect, respoke.createClient, or to client.connect.\n * @param {string} [params.token] - The endpoint's authentication token.\n * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n * endpoint. This is only used when `developmentMode` is set to `true`.\n * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n * operation and will limit the services you will be able to use.\n * @param {string|number|object|Array} [params.presence=unavailable] The initial presence to set once connected.\n * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n * when a disconnect occurs.\n * @proprety {number} [connectTimeoutMillis=10000] - Number of milliseconds before considering the connect operation timed out.\n * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is received\n * from anywhere on the system.\n * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect.\n * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client's user receives a call.\n * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this client's user\n * receives a request for a direct connection.\n * @returns {respoke.Client}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Client\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId || respoke.makeGUID();\n    params.instanceId = instanceId;\n    var that = respoke.EventEmitter(params);\n    respoke.instances[instanceId] = that;\n    delete that.instanceId;\n    that.connectTries = 0;\n    /**\n     * A name to identify this class\n     * @memberof! respoke.Client\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Client';\n    /**\n     * @memberof! respoke.Client\n     * @name host\n     * @type {string}\n     * @private\n     */\n    var host = window.location.hostname;\n    /**\n     * @memberof! respoke.Client\n     * @name port\n     * @type {number}\n     * @private\n     */\n    var port = window.location.port;\n\n    /**\n     * A container for baseURL, token, and appId so they won't be accidentally viewable in any JavaScript debugger.\n     * @memberof! respoke.Client\n     * @name clientSettings\n     * @type {object}\n     * @private\n     * @property {string} [baseURL] - the URL of the cloud infrastructure's REST API.\n     * @property {string} [token] - The endpoint's authentication token.\n     * @property {string} [appId] - The id of your Respoke app.\n     * @property {string} [endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @property {boolean} [developmentMode=false] - Indication to obtain an authentication token from the service.\n     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n     * operation and will limit the services you will be able to use.\n     * @property {boolean} [reconnect=false] - Whether or not to automatically reconnect to the Respoke service\n     * when a disconnect occurs.\n     * @proprety {number} [connectTimeoutMillis=10000] - Number of milliseconds before considering the connect\n     * timed out.\n     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n     * @property {respoke.Client.onClientMessage} [onMessage] - Callback for when any message is received\n     * from anywhere on the system.\n     * @property {respoke.Client.onConnect} [onConnect] - Callback for Client connect.\n     * @property {respoke.Client.onDisconnect} [onDisconnect] - Callback for Client disconnect.\n     * @property {respoke.Client.onReconnect} [onReconnect] - Callback for Client reconnect. Not Implemented.\n     * @property {respoke.Client.onCall} [onCall] - Callback for when this client receives a call.\n     * @property {respoke.Client.onDirectConnection} [onDirectConnection] - Callback for when this client\n     * receives a request for a direct connection.\n     * @property {boolean} enableCallDebugReport=true - Upon finishing a call, should the client send debugging\n     * information to the API? Defaults to `true`.\n     */\n    var clientSettings = {};\n\n    delete that.appId;\n    delete that.baseURL;\n    delete that.developmentMode;\n    delete that.token;\n    delete that.resolveEndpointPresence;\n\n    /**\n     * Internal list of known groups.\n     * @memberof! respoke.Client\n     * @name groups\n     * @type {Array<respoke.Group>}\n     * @private\n     */\n    var groups = [];\n    /**\n     * Internal list of known endpoints.\n     * @memberof! respoke.Client\n     * @name endpoints\n     * @type {Array<respoke.Endpoint>}\n     * @private\n     */\n    var endpoints = [];\n    /**\n     * Array of calls in progress, made accessible for informational purposes only.\n     * **Never modify this array directly.**\n     *\n     * @memberof! respoke.Client\n     * @name calls\n     * @type {array}\n     */\n    that.calls = [];\n    log.debug(\"Client ID is \", instanceId);\n\n    /**\n     * @memberof! respoke.Client\n     * @name signalingChannel\n     * @type {respoke.SignalingChannel}\n     * @private\n     */\n    var signalingChannel = respoke.SignalingChannel({\n        instanceId: instanceId,\n        clientSettings: clientSettings\n    });\n\n    /**\n     * Represents the presence status. Typically a string, but other types are supported.\n     * Defaults to `'unavailable'`.\n     *\n     * **Do not modify this directly** - it won't update presence with Respoke. Use `setPresence()`.\n     *\n     * @memberof! respoke.Client\n     * @name presence\n     * @type {string|number|object|Array}\n     */\n    that.presence = params.presence || 'unavailable';\n\n    /**\n     * Deprecated: use endpoint.presence instead.\n     *\n     * Return the presence.\n     * @memberof! respoke.Client\n     * @deprecated\n     * @name presence\n     * @type {string|number|object|Array}\n     */\n    that.getPresence = function () {\n        return that.presence;\n    };\n\n    /**\n     * Save parameters of the constructor or client.connect() onto the clientSettings object\n     * @memberof! respoke.Client\n     * @method respoke.saveParameters\n     * @param {object} params\n     * @param {respoke.Client.connectSuccessHandler} [params.onSuccess] - Success handler for this invocation\n     * of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n     * respoke.connect, respoke.createClient, or to client.connect.\n     * @param {string} [params.token] - The endpoint's authentication token.\n     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n     * @param {respoke.client.resolveEndpointPresence} [params.resolveEndpointPresence] An optional function for\n     * resolving presence for an endpoint.  An endpoint can have multiple Connections this function will be used\n     * to decide which Connection's presence gets precedence for the Endpoint.\n     * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n     * operation and will limit the services you will be able to use.\n     * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n     * when a disconnect occurs.\n     * @proprety {number} [paramsconnectTimeoutMillis=10000] - Number of milliseconds before considering the connect\n     * timed out.\n     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves\n     * a group.\n     * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is\n     * received from anywhere on the system.\n     * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n     * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n     * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n     * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client receives a call.\n     * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this\n     * client receives a request for a direct connection.\n     * @private\n     */\n    function saveParameters(params) {\n        Object.keys(params).forEach(function eachParam(key) {\n            if (['onSuccess', 'onError', 'reconnect', 'presence'].indexOf(key) === -1 && params[key] !== undefined) {\n                clientSettings[key] = params[key];\n            }\n        });\n\n        clientSettings.developmentMode = !!clientSettings.developmentMode;\n        clientSettings.enableCallDebugReport = typeof clientSettings.enableCallDebugReport === 'boolean' ?\n            clientSettings.enableCallDebugReport : true;\n\n        if (typeof clientSettings.connectTimeoutMillis !== 'number') {\n            clientSettings.connectTimeoutMillis = 10000;\n        }\n\n        if (typeof params.reconnect !== 'boolean') {\n            clientSettings.reconnect = typeof clientSettings.developmentMode === 'boolean' ?\n                clientSettings.developmentMode : false;\n        } else {\n            clientSettings.reconnect = !!params.reconnect;\n        }\n    }\n    saveParameters(params);\n\n    /**\n     * Connect to the Respoke infrastructure and authenticate using `params.token`.\n     *\n     * After `connect`, the app auth session token is stored so it can be used in API requests.\n     *\n     * This method attaches quite a few event listeners for things like group joining and connection status changes.\n     *\n     * #### Usage\n     *\n     *      client.connect({\n     *          appId: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\",\n     *          token: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\", // if not developmentMode\n     *          developmentMode: false || true,\n     *          // if developmentMode, otherwise your server will set endpointId\n     *          endpointId: \"daveops\"\n     *      });\n     *      client.listen(\"connect\", function () { } );\n     *\n     *\n     * If no `params.token` is given and `developmentMode` is set to true, it will attempt to obtain a token\n     * automatically. You must set an `endpointId`.\n     *\n     *\n     * #### App auth session token expiration\n     *\n     * If `params.reconnect` is set to true (which it is by default for `developmentMode`), the `client`\n     * will attempt to keep reconnecting each time the app auth session expires.\n     *\n     * If not using `developmentMode`, automatic reconnect will be disabled. You will need to\n     * listen to the Client's `disconnect` event to fetch a new brokered auth token and call\n     * `client.connect()` with the new token.\n     *\n     *      client.listen('disconnect', function () {\n     *\n     *          // example method you implemented to get a new token from your server\n     *          myServer.getNewRespokeAccessToken(function (newToken) {\n     *              // reconnect with respoke.Client\n     *              client.connect({ token: newToken });\n     *          });\n     *\n     *      });\n     *\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.connect\n     * @param {object} params\n     * @param {respoke.Client.connectSuccessHandler} [params.onSuccess] - Success handler for this invocation\n     * of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n     * respoke.connect, respoke.createClient, or to client.connect.\n     * @param {string} [params.token] - The endpoint's authentication token.\n     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n     * @param {respoke.client.resolveEndpointPresence} [params.resolveEndpointPresence] An optional function for\n     * resolving presence for an endpoint.  An endpoint can have multiple Connections this function will be used\n     * to decide which Connection's presence gets precedence for the Endpoint.\n     * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n     * operation and will limit the services you will be able to use.\n     * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n     * when a disconnect occurs.\n     * @proprety {number} [connectTimeoutMillis=10000] - Number of milliseconds before considering the connect\n     * timed out.\n     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves\n     * a group.\n     * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is\n     * received from anywhere on the system.\n     * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n     * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n     * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n     * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client receives a call.\n     * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this\n     * client receives a request for a direct connection.\n     * @returns {Promise|undefined}\n     * @fires respoke.Client#connect\n     */\n    that.connect = function (params) {\n        var promise;\n        var retVal;\n        params = params || {};\n        log.debug('Client.connect');\n        that.connectTries += 1;\n\n        saveParameters(params);\n        that.presence = params.presence || that.presence;\n        that.endpointId = clientSettings.endpointId;\n        promise = actuallyConnect(params);\n        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n        promise.then(function successHandler() {\n            /**\n             * This event is fired the first time the library connects to the cloud infrastructure.\n             * @event respoke.Client#connect\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n            that.fire('connect');\n        });\n        return retVal;\n    };\n\n    /**\n     * This function contains the meat of the connection, the portions which can be repeated again on reconnect.\n     *\n     * When `reconnect` is true, this function will be added in an event listener to the Client#disconnect event.\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     * @memberof! respoke.Client\n     * @method respoke.Client.actuallyConnect\n     * @private\n     * @param {object} params\n     * @param {connectSuccessHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    function actuallyConnect(params) {\n        params = params || {};\n        var deferred = Q.defer();\n\n        if (!clientSettings.token &&\n                (!clientSettings.appId || !clientSettings.endpointId || clientSettings.developmentMode !== true)) {\n            deferred.reject(new Error(\"Must pass either endpointID & appId & developmentMode=true, or a token, \" +\n                \"to client.connect().\"));\n            return deferred.promise;\n        }\n\n        signalingChannel.open({\n            actuallyConnect: actuallyConnect,\n            endpointId: that.endpointId,\n            token: clientSettings.token\n        }).then(function successHandler() {\n            return signalingChannel.authenticate();\n        }).done(function successHandler() {\n            // set initial presence for the connection\n            if (that.presence) {\n                that.setPresence({presence: that.presence});\n            }\n\n            /*\n             * These rely on the EventEmitter checking for duplicate event listeners in order for these\n             * not to be duplicated on reconnect.\n             */\n\n            /**\n             * This event provides notification for when an incoming call is being received.  If the user wishes\n             * to allow the call, `evt.call.answer()`.\n             * @event respoke.Client#call\n             * @type {respoke.Event}\n             * @property {respoke.Call} call\n             * @property {respoke.Endpoint} endpoint\n             * @property {string} name - The event name.\n             * @property {respoke.Client} target\n             */\n            that.listen('call', clientSettings.onCall);\n            /**\n             * This event is fired when the local end of the directConnection is available. It still will not be\n             * ready to send and receive messages until the 'open' event fires.\n             * @event respoke.Client#direct-connection\n             * @type {respoke.Event}\n             * @property {respoke.DirectConnection} directConnection\n             * @property {respoke.Endpoint} endpoint\n             * @property {string} name - the event name.\n             * @property {respoke.Call} target\n             */\n            that.listen('direct-connection', clientSettings.onDirectConnection);\n            that.listen('join', clientSettings.onJoin);\n            /**\n             * This event is fired every time the client leaves a group.\n             * @event respoke.Client#leave\n             * @type {respoke.Event}\n             * @property {respoke.Group} group\n             * @property {string} name - the event name.\n             */\n            that.listen('leave', clientSettings.onLeave);\n            /**\n             * A generic message handler when a message was received by the client.\n             *\n             * @event respoke.Client#message\n             * @type {respoke.Event}\n             * @property {string} name - The event name.\n             * @property {respoke.Endpoint} endpoint - If the message was private, this is the Endpoint who sent it.\n             * @property {respoke.Group} group - If the message was to a group, this is the group.\n             * @property {respoke.TextMessage} message - The generic message object.\n             * @property {string} message.connectionId\n             * @property {string} message.endpointId\n             * @property {string} message.message - Message body text.\n             * @property {respoke.Client} target\n             */\n            that.listen('message', clientSettings.onMessage);\n            that.listen('connect', clientSettings.onConnect);\n            /**\n             * Client has disconnected from Respoke.\n             *\n             * @event respoke.Client#disconnect\n             * @type {respoke.Event}\n             * @property {string} name - The event name.\n             * @property {respoke.Client} target\n             */\n            that.listen('disconnect', clientSettings.onDisconnect);\n            that.listen('disconnect', function () {\n                that.calls.forEach(function (call) {\n                    call.hangup({signal: false});\n                });\n            }, true);\n            /**\n             * Client has reconnected to Respoke.\n             *\n             * @event respoke.Client#reconnect\n             * @type {respoke.Event}\n             * @property {string} name - The event name.\n             * @property {respoke.Client} target\n             */\n            that.listen('reconnect', clientSettings.onReconnect);\n\n            log.info('logged in as ' + that.endpointId, that);\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n            if (err.message && err.message.match(/Connection limit exceeded/)) {\n                log.error(\n                    'You have reached the connection limit on the account associated with this appId. ' +\n                    'Please upgrade your account from the developer portal at https://portal.respoke.io ' +\n                    'if you need more concurrent connections.', err);\n            } else {\n                log.error(err.message, err.stack);\n            }\n        });\n\n        return deferred.promise;\n    }\n\n    /**\n     * Disconnect from the Respoke infrastructure, leave all groups, invalidate the token, and disconnect the websocket.\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     * @memberof! respoke.Client\n     * @method respoke.Client.disconnect\n     * @returns {Promise|undefined}\n     * @param {object} params\n     * @param {disconnectSuccessHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @fires respoke.Client#disconnect\n     */\n    that.disconnect = function (params) {\n        // TODO: also call this on socket disconnect\n        params = params || {};\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            deferred.reject(e);\n            return retVal;\n        }\n\n        var leaveGroups = groups.map(function eachGroup(group) {\n            if (group.isJoined()) {\n                return group.leave();\n            }\n        });\n\n        Q.all(leaveGroups).fin(function successHandler() {\n            return signalingChannel.close();\n        }).fin(function finallyHandler() {\n            that.presence = 'unavailable';\n            endpoints = [];\n            groups = [];\n            /**\n             * This event is fired when the library has disconnected from the cloud infrastructure.\n             * @event respoke.Client#disconnect\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n            that.fire('disconnect');\n            deferred.resolve();\n        }).done();\n\n        return retVal;\n    };\n\n    /**\n     * Set the presence for this client.\n     *\n     * The value of presence can be a string, number, object, or array - in any format -\n     * depending on the needs of your application. The only requirement is that\n     * `JSON.stringify()` must work (no circular references).\n     *\n     *      var myPresence = 'At lunch'\n     *                      || 4\n     *                      || { status: 'Away', message: 'At lunch' }\n     *                      || ['Away', 'At lunch'];\n     *\n     *      client.setPresence({\n     *          presence: myPresence,\n     *          onSuccess: function (evt) {\n     *              // successfully updated my presence\n     *          }\n     *      });\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.setPresence\n     * @param {object} params\n     * @param {string|number|object|array} params.presence\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @return {Promise|undefined}\n     */\n    that.setPresence = function (params) {\n        var promise;\n        var retVal;\n        params = params || {};\n        params.presence = params.presence || 'available';\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n        }\n\n        log.info('sending my presence update ' + params.presence);\n\n        promise = signalingChannel.sendPresence({\n            presence: params.presence\n        }).then(function successHandler(p) {\n            that.presence = params.presence;\n\n            /**\n             * This event indicates that the presence for this endpoint has been updated.\n             * @event respoke.Client#presence\n             * @type {respoke.Event}\n             * @property {string|number|object|Array} presence\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n            that.fire('presence', {\n                presence: that.presence\n            });\n        });\n        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n        return retVal;\n    };\n\n    /**\n     * Get the Call with the endpoint specified.\n     *\n     *     // hang up on chad\n     *     var call = client.getCall({\n     *         endpointId: 'chad'\n     *     });\n     *\n     *     if (call) {\n     *         call.hangup()\n     *     }\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getCall\n     * @param {object} params\n     * @param {string} [params.id] - Call ID.\n     * @param {string} [params.endpointId] - Endpoint ID. Warning: If you pass only the endpointId, this method\n     * will just return the first call that matches. If you are placing multiple calls to the same endpoint,\n     * pass in the call ID, too.\n     * @arg {boolean} [params.create] - whether or not to create a new call if the specified endpointId isn't found\n     * @arg {string} [params.fromType] - fromType from the signal, tells us if this is a SIP or DID call.\n     * @arg {string} [params.target] - target from the signal, tells us if this is a screenshare or conference call.\n     * @returns {respoke.Call}\n     */\n    that.getCall = function (params) {\n        var call = null;\n        var methods = {\n            screenshare: \"startScreenShare\",\n            did: \"startPhoneCall\",\n            web: \"startCall\",\n            sip: \"startSIPCall\",\n            conference: \"joinConference\"\n        };\n        var callParams = {};\n        params.fromType = params.type || \"web\";\n        var switchType = params.type;\n\n        that.calls.every(function findCall(one) {\n            if (params.id && one.id === params.id) {\n                call = one;\n                return false;\n            }\n\n            if (!params.id && params.endpointId && one.remoteEndpoint.id === params.endpointId) {\n                call = one;\n                return false;\n            }\n            return true;\n        });\n\n        if (call || params.create !== true) {\n            return call;\n        }\n\n        callParams.id = params.id;\n        callParams.caller = false;\n        callParams.fromType = \"web\";\n        callParams.callerId = params.callerId;\n        callParams.target = params.target;\n\n        if (params.target === \"conference\") {\n            callParams.id = params.conferenceId;\n            switchType = params.target;\n        } else if (params.target === \"screenshare\") {\n            switchType = params.target;\n        }\n\n        switch (switchType) {\n            case \"screenshare\":\n            case \"web\":\n                callParams.toType = \"web\"; // overwrite \"screenshare\"\n                callParams.endpointId = params.endpointId;\n                break;\n            case \"did\":\n                callParams.number = params.endpointId;\n                callParams.toType = \"did\";\n                break;\n            case \"sip\":\n                callParams.uri = params.endpointId;\n                callParams.toType = \"sip\";\n                break;\n        }\n\n        try {\n            call = that[methods[params.type]](callParams);\n        } catch (e) {\n            log.error(\"Couldn't create Call.\", e.message, e.stack);\n        }\n        return call;\n    };\n\n    /**\n     * Add the call to internal record-keeping.\n     * @memberof! respoke.Client\n     * @method respoke.Client.addCall\n     * @param {object} evt\n     * @param {respoke.Call} evt.call\n     * @param {respoke.Endpoint} evt.endpoint\n     * @private\n     */\n    function addCall(evt) {\n        log.debug('addCall');\n        if (!evt.call) {\n            throw new Error(\"Can't add call without a call parameter.\");\n        }\n        if (that.calls.indexOf(evt.call) === -1) {\n            that.calls.push(evt.call);\n        }\n\n        evt.call.listen('hangup', function () {\n            removeCall({call: evt.call});\n        });\n    }\n\n    /**\n     * Remove the call or direct connection from internal record-keeping.\n     * @memberof! respoke.Client\n     * @method respoke.Client.removeCall\n     * @param {object} evt\n     * @param {respoke.Call} evt.target\n     * @private\n     */\n    function removeCall(evt) {\n        var match = 0;\n        if (!evt.call) {\n            throw new Error(\"Can't remove call without a call parameter.\");\n        }\n\n        // Loop backward since we're modifying the array in place.\n        for (var i = that.calls.length - 1; i >= 0; i -= 1) {\n            if (that.calls[i].id === evt.call.id) {\n                that.calls.splice(i, 1);\n                match += 1;\n            }\n        }\n\n        if (match !== 1) {\n            log.warn(\"Something went wrong.\", match, \"calls were removed!\");\n        }\n    }\n\n    /**\n     * Convenience method for setting presence to `\"available\"`.\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.setOnline\n     * @param {object} params\n     * @param {string|number|object|Array} [params.presence=available] - The presence to set.\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    that.setOnline = function (params) {\n        var promise;\n\n        params = params || {};\n        params.presence = params.presence || 'available';\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n        }\n\n        return that.setPresence(params);\n    };\n\n    /**\n     * Convenience method for setting presence to `\"unavailable\"`.\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.setOffline\n     * @param {object} params\n     * @param {string|number|object|Array} [params.presence=unavailable] - The presence to set.\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    that.setOffline = function (params) {\n        var promise;\n\n        params = params || {};\n        params.presence = params.presence || 'unavailable';\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n        }\n\n        return that.setPresence(params);\n    };\n\n    /**\n     * Send a message to an endpoint.\n     *\n     *     client.sendMessage({\n     *         endpointId: 'dan',\n     *         message: \"Jolly good.\"\n     *     });\n     *\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     * @memberof! respoke.Client\n     * @method respoke.Client.sendMessage\n     * @param {object} params\n     * @param {string} params.endpointId - The endpoint id of the recipient.\n     * @param {string} [params.connectionId] - The optional connection id of the receipient. If not set, message will be\n     * broadcast to all connections for this endpoint.\n     * @param {string} params.message - a string message.\n     * @param {sendHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        var promise;\n        var retVal;\n        var endpoint;\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n            return retVal;\n        }\n        endpoint = that.getEndpoint({\n            skipPresence: true,\n            id: params.endpointId\n        });\n        delete params.endpointId;\n        return endpoint.sendMessage(params);\n    };\n\n    /**\n     * Experimental. Create a new conference call with the specified id.\n     *\n     *     client.joinConference({\n     *         id: \"javascript-meetup\",\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.joinConference\n     * @private\n     * @param {object} params\n     * @param {string} params.id - The id that should be used to create the conference call or the ID\n     * of the call to join.\n     * @param {string|boolean} params.audio - Whether participant should send and receive audio. Boolean `true`\n     * indicates send and receive. Boolean `false` indicates neither send nor receive. Strings `send` and `receive`\n     * indicate send only and receive only respectively.\n     * @param {string|boolean} params.video - Whether participant should send and receive audio. Boolean `true`\n     * indicates send and receive. Boolean `false` indicates neither send nor receive. Strings `send` and `receive`\n     * indicate send only and receive only respectively.\n     * @param {boolean} params.mixAudio - Whether Respoke should mix all the audio streams together to save bandwidth\n     * for this one participant.\n     * @param {Array<RTCConstraints>} [params.constraints]\n     * @arg {respoke.Conference.onJoin} [params.onJoin] - Callback for when a participant joins the conference.\n     * @arg {respoke.Conference.onLeave} [params.onLeave] - Callback for when a participant leaves the conference.\n     * @arg {respoke.Conference.onMessage} [params.onMessage] - Callback for when a message is sent to the conference.\n     * @param {respoke.Conference.onMute} [params.onMute] - Callback for when local or remote media is muted or unmuted.\n     * @arg {respoke.Conference.onTopic} [params.onTopic] - Callback for the conference topic changes.\n     * @arg {respoke.Conference.onPresenter} [params.onPresenter] - Callback for when the presenter changes.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n     * and the remote party has received the video.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @returns {respoke.Conference}\n     */\n    that.joinConference = function (params) {\n        var conference = null;\n        var recipient;\n\n        params = params || {};\n        params.open = !!params.open;\n\n        that.verifyConnected();\n\n        if (!params.id) {\n            params.id = respoke.makeGUID();\n        }\n\n        recipient = {id: params.id};\n\n        if (params.open) {\n            params.key = undefined;\n        } else if (!params.key) {\n            params.key = respoke.makeGUID();\n        }\n\n        params.instanceId = instanceId;\n        params.target = \"conference\";\n        params.constraints = respoke.convertConstraints(params.constraints, [{\n            video: false,\n            audio: true,\n            mandatory: {},\n            optional: []\n        }]);\n\n        params.signalOffer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'offer';\n            signalParams.target = params.target;\n            signalParams.id = params.id;\n            signalParams.key = params.key;\n            signalParams.open = params.open;\n            signalParams.recipient = recipient;\n            signalParams.toType = \"conference\";\n\n            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n        };\n        params.signalAnswer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'answer';\n            signalParams.target = params.target;\n            signalParams.recipient = recipient;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalParams.toType = \"conference\";\n            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n                signalParams.call.hangup({signal: false});\n            });\n        };\n        params.signalConnected = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.connectionId = signalParams.call.connectionId;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalParams.recipient = recipient;\n            signalParams.toType = \"conference\";\n            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n                signalParams.call.hangup();\n            });\n        };\n        params.signalModify = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.recipient = recipient;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalParams.toType = \"conference\";\n            signalingChannel.sendModify(signalParams).done();\n        };\n        params.signalCandidate = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.recipient = recipient;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalParams.toType = \"conference\";\n            return signalingChannel.sendCandidate(signalParams);\n        };\n        params.signalHangup = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.recipient = recipient;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalParams.toType = \"conference\";\n            signalingChannel.sendHangup(signalParams).done();\n        };\n        params.signalReport = function (signalParams) {\n            log.debug(\"Sending debug report\", signalParams.report);\n            signalingChannel.sendReport(signalParams).done();\n        };\n\n        params.signalingChannel = signalingChannel;\n        conference = respoke.Conference(params);\n        addCall({call: conference.call});\n        return conference;\n    };\n\n    /**\n     * Create a new screen sharing call. Screenshares are inherently unidirectional video only. This may change\n     * in the future when Chrome adds the ability to obtain screen video and microphone audio at the same time. For\n     * now, if you also need audio, place a second audio only call.\n     *\n     * The endpoint who calls `client.startScreenShare` will be the one whose screen is shared. If you'd like to\n     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n     * not the sharer, it is recommened that you use `endpoint.sendMessage` to send a control message to the user\n     * whose screenshare is being requested so that user's app can call `client.startScreenShare`.\n     *\n     * NOTE: At this time, screen sharing only works with Chrome, and Chrome requires a Chrome extension to\n     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension.\n     * Support for additional browsers will be added in the future.\n     *\n     *     client.startScreenShare({\n     *         endpointId: 'tian',\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.startScreenShare\n     * @param {object} params\n     * @param {string} params.endpointId - The id of the endpoint that should be called.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n     * and the remote party has received the video.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {string} [params.source] - Pass in what type of mediaSource you want. If omitted, you'll have access\n     * to both the screen and windows. In firefox, you'll have access to the screen only.\n     * @returns {respoke.Call}\n     */\n    that.startScreenShare = function (params) {\n        that.verifyConnected();\n        var endpoint = that.getEndpoint({\n            skipPresence: true,\n            id: params.endpointId\n        });\n        delete params.endpointId;\n        return endpoint.startScreenShare(params);\n    };\n\n    /**\n     * Place an audio and/or video call to an endpoint.\n     *\n     *     // defaults to video when no constraints are supplied\n     *     client.startCall({\n     *         endpointId: 'erin',\n     *         onConnect: function (evt) { },\n     *         onLocalMedia: function (evt) { }\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.startCall\n     * @param {object} params\n     * @param {string} params.endpointId - The id of the endpoint that should be called.\n     * @param {Array<RTCConstraints>} [params.constraints]\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n     * with the local audio and/or video attached.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n     * with the remote audio and/or video attached.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n     * up.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have\n     * local video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have\n     * remote video attached to it.\n     * @return {respoke.Call}\n     */\n    that.startCall = function (params) {\n        that.verifyConnected();\n        var endpoint = that.getEndpoint({\n            skipPresence: true,\n            id: params.endpointId\n        });\n        delete params.endpointId;\n        return endpoint.startCall(params);\n    };\n\n    /**\n     * Place an audio only call to an endpoint.\n     *\n     *     client.startAudioCall({\n     *         endpointId: 'erin',\n     *         onConnect: function (evt) { },\n     *         onLocalMedia: function (evt) { }\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.startAudioCall\n     * @param {object} params\n     * @param {string} params.endpointId - The id of the endpoint that should be called.\n     * @param {string} [params.connectionId]\n     * @param {Array<RTCConstraints>} [params.constraints]\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 element\n     * with the local audio and/or video attached.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 element\n     * with the remote audio and/or video attached.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n     * up.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n     * video attached to it.\n     * @return {respoke.Call}\n     */\n    that.startAudioCall = function (params) {\n        that.verifyConnected();\n        var endpoint = that.getEndpoint({\n            skipPresence: true,\n            id: params.endpointId\n        });\n        delete params.endpointId;\n        return endpoint.startAudioCall(params);\n    };\n\n    /**\n     * Place a video call to an endpoint.\n     *\n     *     client.startVideoCall({\n     *         endpointId: 'erin',\n     *         onConnect: function (evt) { },\n     *         onLocalMedia: function (evt) { }\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.startVideoCall\n     * @param {object} params\n     * @param {string} params.endpointId - The id of the endpoint that should be called.\n     * @param {Array<RTCConstraints>} [params.constraints]\n     * @param {string} [params.connectionId]\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n     * with the local audio and/or video attached.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n     * with the remote audio and/or video attached.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n     * up.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n     * video attached to it.\n     * @return {respoke.Call}\n     */\n    that.startVideoCall = function (params) {\n        that.verifyConnected();\n        var endpoint = that.getEndpoint({\n            skipPresence: true,\n            id: params.endpointId\n        });\n        delete params.endpointId;\n        return endpoint.startVideoCall(params);\n    };\n\n    /**\n     * Place an audio call with a phone number.\n     * @memberof! respoke.Client\n     * @method respoke.Client.startPhoneCall\n     * @param {object} params\n     * @param {string} params.number - The phone number that should be called.\n     * @param {string} params.callerId - The phone number to use as the caller ID for this phone call. This must\n     * be a phone number listed in your Respoke account, associated with your app, and allowed by the role\n     * that this client is authenticated with. If the role contains a list of numbers and the token does not contain\n     * callerId, this field must be used to set caller ID selected from the list of numbers or no caller ID will be set.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n     * with the local audio and/or video attached.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n     * with the remote audio and/or video attached.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n     * up.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @return {respoke.Call}\n     */\n    that.startPhoneCall = function (params) {\n        var promise;\n        var call = null;\n        var recipient = {};\n        params = params || {};\n        params.constraints = [{\n            video: false,\n            audio: true,\n            mandatory: {},\n            optional: []\n        }];\n\n        that.verifyConnected();\n\n        if (!params.number) {\n            throw new Error(\"Can't start a phone call without a number.\");\n        }\n\n        if (typeof params.caller !== 'boolean') {\n            params.caller = true;\n        }\n\n        recipient.id = params.number;\n\n        params.instanceId = instanceId;\n        params.remoteEndpoint = recipient;\n\n        params.toType = params.toType || 'did';\n        params.fromType = params.fromType || 'web';\n\n        params.signalOffer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'offer';\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n\n            // using hasOwnProperty here because callerId could be explicitly set to null or empty string\n            if (params.hasOwnProperty('callerId')) {\n                signalParams.callerId = {number: params.callerId};\n            }\n            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n        };\n        params.signalAnswer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'answer';\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n                log.error(\"Couldn't answer the call.\", err.message, err.stack);\n                signalParams.call.hangup({signal: false});\n            });\n        };\n        params.signalConnected = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.connectionId = signalParams.connectionId;\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send connected.\", err.message, err.stack);\n                signalParams.call.hangup();\n            });\n        };\n        params.signalModify = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendModify(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send modify.\", err.message, err.stack);\n            });\n        };\n        params.signalCandidate = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            return signalingChannel.sendCandidate(signalParams);\n        };\n        params.signalHangup = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendHangup(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send hangup.\", err.message, err.stack);\n            });\n        };\n        params.signalReport = function (signalParams) {\n            log.debug(\"Sending debug report\", signalParams.report);\n            signalingChannel.sendReport(signalParams);\n        };\n\n        params.signalingChannel = signalingChannel;\n        call = respoke.Call(params);\n        addCall({call: call});\n        return call;\n    };\n\n    /**\n     * Place an audio call to a SIP URI.\n     * @memberof! respoke.Client\n     * @method respoke.Client.startSIPCall\n     * @param {object} params\n     * @param {string} [params.uri] - The fully qualified SIP URI to call.\n     * @param {string} [params.trunk] - The SIP trunk to call. This is not necessary if `uri` is set. If `uri` is not\n     * set, both `trunk` and `user` are required, and `trunk` must be the ID of a Respoke SIP trunk. `user` is a\n     * SIP username or extension.\n     * @param {string} [params.user] - The SIP user to call. This is not necessary if `uri` is set. If `uri` is not\n     * set, both `trunk` and `user` are required, and `trunk` must be the ID of a Respoke SIP trunk. `user` is a\n     * SIP username or extension.\n     * @param {object} [params.callerId] - Caller ID information for this call.\n     * @param {string} [params.callerId.name] - Caller ID name.\n     * @param {string} [params.callerId.number] - Caller ID number, extension, or SIP username.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n     * with the local audio and/or video attached.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n     * with the remote audio and/or video attached.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n     * up.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @return {respoke.Call}\n     */\n    that.startSIPCall = function (params) {\n        var promise;\n        var call = null;\n        var recipient = {};\n        params = params || {};\n        params.constraints = [{\n            video: false,\n            audio: true,\n            mandatory: {},\n            optional: []\n        }];\n\n        that.verifyConnected();\n\n        if (!params.uri && !(params.trunk && params.user)) {\n            throw new Error(\"Can't start a phone call without a SIP URI or a SIP trunk and user.\");\n        }\n\n        if (typeof params.caller !== 'boolean') {\n            params.caller = true;\n        }\n\n        params.uri = params.uri || (params.trunk + \"/\" + params.user);\n        recipient.id = params.uri;\n\n        params.instanceId = instanceId;\n        params.remoteEndpoint = recipient;\n\n        params.toType = params.toType || 'sip';\n        params.fromType = params.fromType || 'web';\n\n        params.signalOffer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'offer';\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n\n            // using hasOwnProperty here because callerId could be explicitly set to null or empty string\n            if (params.hasOwnProperty('callerId')) {\n                signalParams.callerId = params.callerId;\n            }\n            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n        };\n        params.signalAnswer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'answer';\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n                log.error(\"Couldn't answer the call.\", err.message, err.stack);\n                signalParams.call.hangup({signal: false});\n            });\n        };\n        params.signalConnected = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.connectionId = signalParams.connectionId;\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send connected.\", err.message, err.stack);\n                signalParams.call.hangup();\n            });\n        };\n        params.signalModify = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendModify(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send modify.\", err.message, err.stack);\n            });\n        };\n        params.signalCandidate = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            return signalingChannel.sendCandidate(signalParams);\n        };\n        params.signalHangup = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendHangup(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send hangup.\", err.message, err.stack);\n            });\n        };\n        params.signalReport = function (signalParams) {\n            log.debug(\"Sending debug report\", signalParams.report);\n            signalingChannel.sendReport(signalParams);\n        };\n\n        params.signalingChannel = signalingChannel;\n        call = respoke.Call(params);\n        addCall({call: call});\n        return call;\n    };\n\n    /**\n     * Assert that we are connected to the backend infrastructure.\n     * @memberof! respoke.Client\n     * @method respoke.Client.verifyConnected\n     * @throws {Error}\n     * @private\n     */\n    that.verifyConnected = function () {\n        if (!signalingChannel.isConnected()) {\n            throw new Error(\"Can't complete request when not connected. Please reconnect!\");\n        }\n    };\n\n    /**\n     * Check whether this client is connected to the Respoke API.\n     * @memberof! respoke.Client\n     * @method respoke.Client.isConnected\n     * @returns boolean\n     */\n    that.isConnected = function () {\n        return signalingChannel.isConnected();\n    };\n\n    /**\n     * Join a group and begin keeping track of it. If this method is called multiple times synchronously, it will\n     * batch requests and only make one API call to Respoke.\n     *\n     * You can leave the group by calling `group.leave()`;\n     *\n     * ##### Joining and leaving a group\n     *\n     *      var group;\n     *\n     *      client.join({\n     *          id: \"book-club\",\n     *          onSuccess: function (evt) {\n     *              console.log('I joined', evt.group.id);\n     *              // \"I joined book-club\"\n     *              group = evt.group;\n     *              group.sendMessage({\n     *                  message: 'sup'\n     *              });\n     *          }\n     *      });\n     *\n     *      // . . .\n     *      // Some time later, leave the group.\n     *      // . . .\n     *      group.leave({\n     *          onSuccess: function (evt) {\n     *              console.log('I left', evt.group.id);\n     *              // \"I left book-club\"\n     *          }\n     *      });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.join\n     * @param {object} params\n     * @param {string} params.id - The name of the group.\n     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {respoke.Group.onMessage} [params.onMessage] - Message handler for messages from this group only.\n     * @param {respoke.Group.onJoin} [params.onJoin] - Join event listener for endpoints who join this group only.\n     * @param {respoke.Group.onLeave} [params.onLeave] - Leave event listener for endpoints who leave\n     * this group only.\n     * @returns {Promise<respoke.Group>|undefined} The instance of the respoke.Group which the client joined.\n     * @fires respoke.Client#join\n     */\n    that.join = function (params) {\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            deferred.reject(e);\n            return retVal;\n        }\n\n        if (!params.id) {\n            deferred.reject(new Error(\"Can't join a group with no group id.\"));\n            return retVal;\n        }\n\n        log.trace('requested to join group', params.id);\n\n        signalingChannel.joinGroup({\n            groupList: [params.id]\n        }).done(function successHandler() {\n            var group;\n            params.signalingChannel = signalingChannel;\n            params.instanceId = instanceId;\n\n            group = that.getGroup({id: params.id});\n\n            if (!group) {\n                group = respoke.Group(params);\n                that.addGroup(group);\n            }\n\n            group.listen('join', params.onJoin);\n            group.listen('leave', params.onLeave);\n            group.listen('message', params.onMessage);\n\n            group.addMember({\n                connection: that.getConnection({\n                    endpointId: that.endpointId,\n                    connectionId: that.connectionId\n                })\n            });\n\n            /**\n             * This event is fired every time the client joins a group. If the client leaves\n             * a group, this event will be fired again on the next time the client joins the group.\n             * @event respoke.Client#join\n             * @type {respoke.Event}\n             * @property {respoke.Group} group\n             * @property {string} name - the event name.\n             */\n            that.fire('join', {\n                group: group\n            });\n            deferred.resolve(group);\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return retVal;\n    };\n\n    /**\n     * Add a Group. This is called when we join a group and need to begin keeping track of it.\n     * @memberof! respoke.Client\n     * @method respoke.Client.addGroup\n     * @param {respoke.Group}\n     * @private\n     */\n    that.addGroup = function (newGroup) {\n        if (!newGroup || newGroup.className !== 'respoke.Group') {\n            throw new Error(\"Can't add group to internal tracking without a group.\");\n        }\n\n        newGroup.listen('leave', function leaveHandler(evt) {\n            var endpointThatLeft = evt.connection.getEndpoint();\n\n            if (!endpointThatLeft.hasListeners('presence') && endpointThatLeft.groupConnectionCount === 0) {\n                // No one is listening, and it's not in any more groups.\n                endpoints.every(function eachEndpoint(ept, index) {\n                    if (ept.id === endpointThatLeft.id) {\n                        endpoints.splice(index, 1);\n                        return false;\n                    }\n                    return true;\n                });\n            }\n        }, true);\n\n        groups.push(newGroup);\n    };\n\n    /**\n     * Get a list of all the groups the client is currently a member of.\n     * @memberof! respoke.Client\n     * @method respoke.Client.getGroups\n     * @returns {Array<respoke.Group>} All of the groups the library is aware of.\n     */\n    that.getGroups = function () {\n        return groups;\n    };\n\n    /**\n     * Find a group by id and return it.\n     *\n     *     var group = client.getGroup({\n     *         id: \"resistance\"\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getGroup\n     * @param {object} params\n     * @param {string} params.id\n     * @param {respoke.Group.onJoin} [params.onJoin] - Receive notification that an endpoint has joined this group.\n     * @param {respoke.Group.onLeave} [params.onLeave] - Receive notification that an endpoint has left this group.\n     * @param {respoke.Group.onMessage} [params.onMessage] - Receive notification that a message has been\n     * received to a group.\n     * @returns {respoke.Group|undefined} The group whose ID was specified.\n     */\n    that.getGroup = function (params) {\n        var group;\n        if (!params || !params.id) {\n            throw new Error(\"Can't get a group without group id.\");\n        }\n\n        groups.every(function eachGroup(grp) {\n            if (grp.id === params.id) {\n                group = grp;\n                return false;\n            }\n            return true;\n        });\n\n        if (group) {\n            group.listen('join', params.onJoin);\n            group.listen('leave', params.onLeave);\n            group.listen('message', params.onMessage);\n        }\n\n        return group;\n    };\n\n    /**\n     * Find an endpoint by id and return the `respoke.Endpoint` object.\n     *\n     * If it is not already cached locally, will be added to the local cache of tracked endpoints,\n     * its presence will be determined, and will be available in `client.getEndpoints()`.\n     *\n     *     var endpoint = client.getEndpoint({\n     *         id: \"dlee\"\n     *     });\n     *\n     * @ignore If the endpoint is not found in the local cache of endpoint objects (see `client.getEndpoints()`),\n     * it will be created. This is useful, for example, in the case of dynamic endpoints where groups are\n     * not in use. Override dynamic endpoint creation by setting `params.skipCreate = true`.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getEndpoint\n     * @param {object} params\n     * @param {string} params.id\n     * @param {respoke.Endpoint.onMessage} [params.onMessage] - Handle messages sent to the logged-in user\n     * from this one Endpoint.\n     * @param {respoke.Endpoint.onPresence} [params.onPresence] - Handle presence notifications from this one\n     * Endpoint.\n     * @arg {boolean} [params.skipCreate] - Skip the creation step and return undefined if we don't yet\n     * @arg {boolean} [params.skipPresence] - Skip registering for this endpoint's presence.\n     * @returns {respoke.Endpoint} The endpoint whose ID was specified.\n     */\n    that.getEndpoint = function (params) {\n        var endpoint;\n        if (!params || !params.id) {\n            throw new Error(\"Can't get an endpoint without endpoint id.\");\n        }\n\n        endpoints.every(function eachEndpoint(ept) {\n            if (ept.id === params.id) {\n                endpoint = ept;\n                return false;\n            }\n            return true;\n        });\n\n        if (!endpoint && params && !params.skipCreate) {\n            params.instanceId = instanceId;\n            params.signalingChannel = signalingChannel;\n            params.resolveEndpointPresence = clientSettings.resolveEndpointPresence;\n            params.addCall = addCall;\n\n            endpoint = respoke.Endpoint(params);\n            endpoints.push(endpoint);\n        }\n\n        if (!endpoint) {\n            return;\n        }\n\n        if (params.skipPresence !== true) {\n            signalingChannel.registerPresence({\n                endpointList: [endpoint.id]\n            }).done(null, function (err) {\n                log.error(\"Couldn't register for presence on\", endpoint.id, err.message);\n            });\n        }\n        endpoint.listen('presence', params.onPresence);\n        endpoint.listen('message', params.onMessage);\n\n        return endpoint;\n    };\n\n    /**\n     * Find a Connection by id and return it.\n     *\n     *     var connection = client.getConnection({\n     *         id: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\"\n     *     });\n     *\n     * @ignore In most cases, if we don't find it we will create it. This is useful\n     * in the case of dynamic endpoints where groups are not in use. Set skipCreate=true\n     * to return undefined if the Connection is not already known.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getConnection\n     * @param {object} params\n     * @param {string} params.connectionId\n     * @param {string} [params.endpointId] - An endpointId to use in the creation of this connection.\n     * @param {respoke.Endpoint.onMessage} [params.onMessage] - Handle messages sent to the logged-in user\n     * from this one Connection.\n     * @param {respoke.Endpoint.onPresence} [params.onPresence] - Handle presence notifications from this one\n     * Connection.\n     * @returns {respoke.Connection} The connection whose ID was specified.\n     */\n    that.getConnection = function (params) {\n        var connection;\n        var endpoint;\n        var endpointsToSearch = endpoints;\n\n        params = params || {};\n        if (!params.connectionId) {\n            throw new Error(\"Can't get a connection without connection id.\");\n        }\n        if (!params.endpointId && !params.skipCreate) {\n            throw new Error(\"Can't create a connection without endpoint id.\");\n        }\n\n        if (params.endpointId) {\n            endpoint = that.getEndpoint({\n                id: params.endpointId,\n                skipPresence: true,\n                skipCreate: params.skipCreate\n            });\n\n            endpointsToSearch = [];\n            if (endpoint) {\n                endpointsToSearch = [endpoint];\n            }\n        }\n\n        endpointsToSearch.every(function eachEndpoint(ept) {\n            connection = ept.getConnection(params);\n            return !connection;\n        });\n\n        if (!connection && !params.skipCreate) {\n            params.instanceId = instanceId;\n            connection = respoke.Connection(params);\n            endpoint.connections.push(connection);\n        }\n\n        return connection;\n    };\n\n    /**\n     * Get the list of **all endpoints** that the library has knowledge of.\n     * These are `respoke.Endpoint` objects, not just the endpointIds.\n     *\n     * The library gains knowledge of an endpoint in two ways:\n     * 1. when an endpoint joins a group that the user (currently logged-in endpoint) is a member of (if group presence is enabled)\n     * 2. when an endpoint that the user (currently logged-in endpoint) is watching*\n     *\n     * *If an endpoint that the library does not know about sends a message to the client, you\n     * can immediately call the `client.getEndpoint()` method on the sender of the message to enable\n     * watching of the sender's endpoint.\n     *\n     *      client.on('message', function (data) {\n     *          if (data.endpoint) {\n     *              // start tracking this endpoint.\n     *              client.getEndpoint({ id: data.endpoint.id });\n     *          }\n     *      });\n     *\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getEndpoints\n     * @returns {Array<respoke.Endpoint>}\n     */\n    that.getEndpoints = function () {\n        return endpoints;\n    };\n\n    /**\n     * Get conference participants by conference id.\n     *\n     * ```\n     * client.getConferenceParticipants({ id: 'mygroup' }).done(function (participants) {\n     *     var ids = participants.map(function (p) { return p.endpointId; });\n     *     console.log(ids); // ['person1', 'person2']\n     * });\n     * ```\n     * @memberof respoke.Client\n     * @method respoke.Client.getConferenceParticipants\n     * @param object {params}\n     * @param string {params.id}\n     * @returns {Promise}\n     */\n    that.getConferenceParticipants = signalingChannel.getConferenceParticipants;\n\n    return that;\n}; // End respoke.Client\n\n/**\n * Handle sending successfully.\n * @callback respoke.Client.successHandler\n */\n/**\n * Handle joining a group successfully. This callback is called only once when Client.join() is called.\n * @callback respoke.Client.joinHandler\n * @param {respoke.Group} group\n */\n/**\n * Receive notification that the client has joined a group. This callback is called everytime\n * respoke.Client#join is fired.\n * @callback respoke.Client.onJoin\n * @param {respoke.Event} evt\n * @param {respoke.Group} evt.group\n * @param {string} evt.name - the event name.\n */\n/**\n * Receive notification that the client has left a group. This callback is called everytime\n * respoke.Client#leave is fired.\n * @callback respoke.Client.onLeave\n * @param {respoke.Event} evt\n * @param {respoke.Group} evt.group\n * @param {string} evt.name - the event name.\n */\n/**\n * Receive notification that a message has been received. This callback is called every time\n * respoke.Client#message is fired.\n * @callback respoke.Client.onClientMessage\n * @param {respoke.Event} evt\n * @param {respoke.TextMessage} evt.message\n * @param {respoke.Group} [evt.group] - If the message is to a group we already know about,\n * this will be set. If null, the developer can use client.join({id: evt.message.header.channel}) to join\n * the group. From that point forward, Group#message will fire when a message is received as well. If\n * group is undefined instead of null, the message is not a group message at all.\n * @param {string} evt.name - the event name.\n * @param {respoke.Client} evt.target\n */\n/**\n * Receive notification that the client is receiving a call from a remote party. This callback is called every\n * time respoke.Client#call is fired.\n * @callback respoke.Client.onCall\n * @param {respoke.Event} evt\n * @param {respoke.Call} evt.call\n * @param {respoke.Endpoint} evt.endpoint\n * @param {string} evt.name - the event name.\n */\n/**\n * Receive notification that the client is receiving a request for a direct connection from a remote party.\n * This callback is called every time respoke.Client#direct-connection is fired.\n * @callback respoke.Client.onDirectConnection\n * @param {respoke.Event} evt\n * @param {respoke.DirectConnection} evt.directConnection\n * @param {respoke.Endpoint} evt.endpoint\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * Receive notification Respoke has successfully connected to the cloud. This callback is called every time\n * respoke.Client#connect is fired.\n * @callback respoke.Client.onConnect\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Client} evt.target\n */\n/**\n * Receive notification Respoke has successfully disconnected from the cloud. This callback is called every time\n * respoke.Client#disconnect is fired.\n * @callback respoke.Client.onDisconnect\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Client} evt.target\n */\n/**\n * Receive notification Respoke has successfully reconnected to the cloud. This callback is called every time\n * respoke.Client#reconnect is fired.\n * @callback respoke.Client.onReconnect\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Client} evt.target\n */\n/**\n * Handle disconnection to the cloud successfully.\n * @callback respoke.Client.disconnectSuccessHandler\n */\n/**\n * Handle an error that resulted from a method call.\n * @callback respoke.Client.errorHandler\n * @params {Error} err\n */\n/**\n * Handle connection to the cloud successfully.\n * @callback respoke.Client.connectSuccessHandler\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/client.js\n ** module id = 7\n ** module chunks = 0\n **/","/*\n * Copyright 2015, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n */\n\nvar respoke = require('./respoke');\n\n/**\n * A `respoke.Connection` always belongs to an Endpoint.\n *\n * There is a distinction between Endpoint and Connection because an Endpoint can be authenticated\n * from multiple devices, browsers, or browser tabs. Each of these separate authentications is a Connection.\n * A Client can choose to interact with connections of the same endpoint in different ways.\n *\n * @constructor\n * @class respoke.Connection\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.id\n * @returns {respoke.Connection}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Connection\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name client\n     * @type {respoke.Client}\n     * @private\n     */\n    var client = respoke.getClient(instanceId);\n\n    /**\n     * The connection id.\n     * @memberof! respoke.Connection\n     * @name id\n     * @type {string}\n     */\n    that.id = that.id || that.connectionId;\n    if (!that.id) {\n        throw new Error(\"Can't make a connection without an id.\");\n    }\n    delete that.instanceId;\n    delete that.connectionId;\n\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.Connection\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Connection';\n\n    /**\n     * Represents the presence status. Typically a string, but other types are supported.\n     * Defaults to `'unavailable'`.\n     *\n     * **Do not modify this directly** - it won't update presence with Respoke. Presence must be updated\n     * by the remote endpoint.\n     *\n     * @memberof! respoke.Connection\n     * @name presence\n     * @type {string|number|object|Array}\n     */\n    that.presence = 'unavailable';\n\n    /**\n     * Deprecated: use endpoint.presence instead.\n     *\n     * Return the presence.\n     * @memberof! respoke.Connection\n     * @deprecated\n     * @name presence\n     * @type {string|number|object|Array}\n     */\n    that.getPresence = function () {\n        return that.presence;\n    };\n\n    /**\n     * Send a message to this connection of an endpoint. If the endpoint has multiple connections,\n     * it will only receive the message at this connection.\n     *\n     *     connection.sendMessage({\n     *         message: \"PJ, put that PBR down!\"\n     *     });\n     *\n     * **Using callbacks** will disable promises.\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.sendMessage\n     * @param {object} params\n     * @param {string} params.message\n     * @param {boolean} [params.ccSelf=false] Copy this client's own endpoint on this message so that they arrive\n     * at other devices it might be logged into elsewhere.\n     * @param {boolean} [params.push=false] Whether or not the message should be considered for push notifications to\n     * mobile devices.\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation\n     * of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        params = params || {};\n        params.connectionId = that.id;\n        params.ccSelf = (typeof params.ccSelf === \"boolean\" ? params.ccSelf : false);\n        return that.getEndpoint().sendMessage(params);\n    };\n\n    /**\n     * Create a new screen sharing call. Screenshares are inherently unidirectional video only. This may change\n     * in the future when Chrome adds the ability to obtain screen video and microphone audio at the same time. For\n     * now, if you also need audio, place a second audio only call.\n     *\n     * The endpoint who calls `connection.startScreenShare` will be the one whose screen is shared. If you'd like to\n     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n     * not the sharer, it is recommened that you use `endpoint.sendMessage` to send a control message to the user\n     * whose screenshare is being requested so that user's app can call `connection.startScreenShare`.\n     *\n     * NOTE: At this time, screen sharing only works with Chrome, and Chrome requires a Chrome extension to\n     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension.\n     * Support for additional browsers will be added in the future.\n     *\n     *     connection.startScreenShare({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startScreenShare\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n     * and the remote party has received the video.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @returns {respoke.Call}\n     */\n    that.startScreenShare = function (params) {\n        client.verifyConnected();\n        params.connectionId = that.id;\n        return that.getEndpoint().startScreenShare(params);\n    };\n\n    /**\n     * Create a new Call for a voice and/or video call this particular connection, only. The Call cannot be answered\n     * by another connection of this Endpoint.\n     *\n     *     connection.startCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {RTCConstraints} [params.constraints]\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n     * video attached to it.\n     * @returns {respoke.Call}\n     */\n    that.startCall = function (params) {\n        params = params || {};\n        params.connectionId = that.id;\n        return that.getEndpoint().startCall(params);\n    };\n\n    /**\n     * Create a new audio-only call.\n     *\n     *     connection.startAudioCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startAudioCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @returns {respoke.Call}\n     */\n    that.startAudioCall = function (params) {\n        client.verifyConnected();\n        params.connectionId = that.id;\n        return that.getEndpoint().startAudioCall(params);\n    };\n\n    /**\n     * Create a new call with audio and video.\n     *\n     *     connection.startVideoCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startVideoCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has\n     * been hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @returns {respoke.Call}\n     */\n    that.startVideoCall = function (params) {\n        client.verifyConnected();\n        params.connectionId = that.id;\n        return that.getEndpoint().startVideoCall(params);\n    };\n\n    /**\n     * Create a new DirectConnection with this particular connection, only. The DirectConnection cannot be answered\n     * by another connection of this Endpoint.  This method creates a new Call as well, attaching this\n     * DirectConnection to it for the purposes of creating a peer-to-peer link for sending data such as messages to\n     * the other endpoint. Information sent through a DirectConnection is not handled by the cloud infrastructure.\n     *\n     *     connection.startDirectConnection({\n     *         onOpen: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startDirectConnection\n     * @param {object} params\n     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess] - Success handler for this\n     * invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {respoke.DirectConnection.onStart} [params.onStart] - A callback for when setup of the direct\n     * connection begins. The direct connection will not be open yet.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - A callback for receiving notification of when\n     * the DirectConnection is open and ready to be used.\n     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n     * connection.\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - A callback for receiving notification of\n     * when the DirectConnection is closed and the two Endpoints are disconnected.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - A callback for receiving messages sent\n     * through the DirectConnection.\n     * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the\n     * request for a direct connection and setup begins.\n     * @returns {respoke.DirectConnection} The DirectConnection which can be used to send data and messages\n     * directly to the other endpoint.\n     */\n    that.startDirectConnection = function (params) {\n        var retVal;\n        var deferred;\n        params = params || {};\n\n        try {\n            client.verifyConnected();\n        } catch (err) {\n            deferred = respoke.Q.defer();\n            retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n            deferred.reject(err);\n            return retVal;\n        }\n\n        params.connectionId = that.id;\n        return that.getEndpoint().startDirectConnection(params);\n    };\n\n    /**\n     * Get the Endpoint that this Connection belongs to.\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.getEndpoint\n     * @returns {respoke.Endpoint}\n     */\n    that.getEndpoint = function () {\n        return client.getEndpoint({\n            id: that.endpointId,\n            skipPresence: true\n        });\n    };\n\n    return that;\n}; // End respoke.Connection\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/connection.js\n ** module id = 8\n ** module chunks = 0\n **/","/*\n * Copyright 2015, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\nvar log = respoke.log;\n\n/**\n * `respoke.Endpoint`s are users of a Respoke app.\n * An Endpoint can be a person in a browser or device, or an app using Respoke APIs from a server.\n * A Client can interact with endpoints through messages, audio or video calls, or direct connections.\n * An Endpoint may be authenticated from multiple devices to the same app (each of which is\n * represented by a Connection).\n *\n * ```\n * var jim = client.getEndpoint({ id: 'jim' });\n * ```\n *\n * @constructor\n * @class respoke.Endpoint\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.id\n * @param {string} params.instanceId\n * @param {respoke.client.resolvePresence} [params.resolvePresence] An optional function for resolving presence\n * for an endpoint.\n * @returns {respoke.Endpoint}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Endpoint\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name client\n     * @type {respoke.Client}\n     * @private\n     */\n    var client = respoke.getClient(instanceId);\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name signalingChannel\n     * @type {respoke.SignalingChannel}\n     * @private\n     */\n    var signalingChannel = params.signalingChannel;\n    /**\n     * The number this endpoint's connections that are joined to groups. So if\n     * an endpoint has 3 connections in the same group, the\n     * `groupConnectionCount` for that endpoint would be 3.\n     *\n     * @memberof! respoke.DirectConnection\n     * @name groupConnectionCount\n     * @type {number}\n     */\n    that.groupConnectionCount = 0;\n\n    var addCall = params.addCall;\n\n    delete that.signalingChannel;\n    delete that.instanceId;\n    delete that.connectionId;\n    delete that.addCall;\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.Endpoint\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Endpoint';\n    /**\n     * A direct connection to this endpoint. This can be used to send direct messages.\n     * @memberof! respoke.Endpoint\n     * @name directConnection\n     * @type {respoke.DirectConnection}\n     */\n    that.directConnection = null;\n\n    /**\n     * Array of connections for this endpoint.\n     * @memberof! respoke.Endpoint\n     * @name connections\n     * @type {Array<respoke.Connection>}\n     */\n    that.connections = [];\n    client.listen('disconnect', function disconnectHandler() {\n        that.connections = [];\n    });\n\n    var resolveEndpointPresence = params.resolveEndpointPresence;\n    delete that.resolveEndpointPresence;\n\n    /**\n     * Represents the presence status. Typically a string, but other types are supported.\n     * Defaults to `'unavailable'`.\n     *\n     * **Do not modify this directly** - it won't update presence with Respoke. Presence must be updated\n     * by the remote endpoint.\n     *\n     * @memberof! respoke.Endpoint\n     * @name presence\n     * @type {string|number|object|Array}\n     */\n    that.presence = 'unavailable';\n\n    /**\n     * Deprecated: use endpoint.presence instead.\n     *\n     * Return the presence.\n     * @memberof! respoke.Endpoint\n     * @deprecated\n     * @name presence\n     * @type {string|number|object|Array}\n     */\n    that.getPresence = function () {\n        return that.presence;\n    };\n\n    /**\n     * Internally set the presence on the object for this session upon receipt of a presence notification from\n     * the backend. Respoke developers shouldn't use this.\n     *\n     * ```\n     * client.setPresence({ presence: 'busy' });\n     * ```\n     *\n     * While technically available on an Endpoint or Connection, this will not trigger\n     * any API changes. The changes will only be reflected locally.\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.setPresence\n     * @param {object} params\n     * @param {string|number|object|Array} [params.presence=available]\n     * @param {string} params.connectionId\n     * @fires respoke.Endpoint#presence\n     * @private\n     */\n    that.setPresence = function (params) {\n        var connection;\n        params = params || {};\n        params.presence = params.presence || 'available';\n        params.connectionId = params.connectionId || that.connectionId;\n\n        if (!params.connectionId) {\n            throw new Error(\"Can't set Endpoint presence without a connectionId.\");\n        }\n\n        connection = that.getConnection({connectionId: params.connectionId}) || client.getConnection({\n            connectionId: params.connectionId,\n            skipCreate: false,\n            endpointId: that.id\n        });\n\n        connection.presence = params.presence;\n        that.resolvePresence();\n\n        /**\n         * This event indicates that the presence for this endpoint has been updated.\n         * @event respoke.Endpoint#presence\n         * @type {respoke.Event}\n         * @property {string|number|object|Array} presence\n         * @property {string} name - the event name.\n         * @property {respoke.Endpoint} target\n         */\n        that.fire('presence', {\n            presence: that.presence\n        });\n    };\n\n    /**\n     * Send a message to the endpoint through the infrastructure.\n     *\n     * ```\n     * endpoint.sendMessage({\n     *     message: \"wassuuuuup\"\n     * });\n     * ```\n     *\n     * **Using callbacks** will disable promises.\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.sendMessage\n     * @param {object} params\n     * @param {string} params.message\n     * @param {string} [params.connectionId]\n     * @param {boolean} [params.ccSelf=true] Copy this client's own endpoint on this message so that they arrive\n     * at other devices it might be logged into elsewhere.\n     * @param {boolean} [params.push=false] Whether or not to consider the message for push notifications to mobile\n     * devices.\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of this\n     * method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this method\n     * only.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        var promise;\n        var retVal;\n        params = params || {};\n        params.ccSelf = (typeof params.ccSelf === \"boolean\" ? params.ccSelf : true);\n\n        promise = signalingChannel.sendMessage({\n            ccSelf: params.ccSelf,\n            connectionId: params.connectionId,\n            message: params.message,\n            push: !!params.push,\n            recipient: that\n        });\n\n        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n        return retVal;\n    };\n\n    /**\n     * Create a new audio-only call.\n     *\n     *     endpoint.startAudioCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startAudioCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @returns {respoke.Call}\n     */\n    that.startAudioCall = function (params) {\n        params = params || {};\n\n        params.constraints = respoke.convertConstraints(params.constraints, [{\n            video: false,\n            audio: true,\n            optional: [],\n            mandatory: {}\n        }]);\n\n        return that.startCall(params);\n    };\n\n    /**\n     * Create a new call with audio and video.\n     *\n     *     endpoint.startVideoCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startVideoCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @returns {respoke.Call}\n     */\n    that.startVideoCall = function (params) {\n        params = params || {};\n\n        params.constraints = respoke.convertConstraints(params.constraints, [{\n            video: true,\n            audio: true,\n            optional: [],\n            mandatory: {}\n        }]);\n\n        return that.startCall(params);\n    };\n\n    /**\n     * The endpoint who calls `endpoint.startScreenShare` will be the one whose screen is shared. If you'd like to\n     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n     * not the sharer, it is recommended that you use `endpoint.sendMessage` to send a control message to the user\n     * whose screenshare is being requested so that user's app can call `endpoint.startScreenShare`.\n     *\n     * By default, the call will be one-way screen share only, with the recipient sending nothing. To turn it into\n     * a bidirectional call with the recipient sending video and both parties sending audio, set `params.sendOnly`\n     * to false.\n     *\n     * NOTE: At this time, screen sharing only works with Chrome and Firefox, and both require browser extensions to\n     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension\n     * and https://github.com/respoke/respoke-firefox-screen-sharing-extension.\n     *\n     *     endpoint.startScreenShare({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startScreenShare\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n     * and the remote party has received the video.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {Array<RTCConstraints>} [params.constraints] - Additional media to add to the call.\n     * @param {RTCConstraints} [params.screenConstraints] - Overrides for the screen media.\n     * @param {boolean} [params.sendOnly=true] - Whether the call should be unidirectional.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {string} [params.source] - Pass in what type of mediaSource you want. If omitted, you'll have access\n     * to both the screen and windows. In firefox, you'll have access to the screen only.\n     * @returns {respoke.Call}\n     */\n    that.startScreenShare = function (params) {\n        params = params || {};\n        var hasAudio;\n        var addAudio;\n        params.target = 'screenshare';\n\n        if (typeof params.caller !== 'boolean') {\n            params.caller = true;\n        }\n\n        // true and undefined -> true\n        // receiveOnly will be set in call.js by respoke.sdpHasSendOnly\n        params.sendOnly = (params.caller && (params.sendOnly || (params.sendOnly === undefined)));\n        addAudio = (!params.sendOnly && (!params.screenConstraints ||\n            (params.screenConstraints && params.screenConstraints.audio)));\n\n        if (params.caller) {\n            params.constraints = respoke.convertConstraints(params.constraints);\n            params.constraints.push(respoke.getScreenShareConstraints({\n                constraints: params.screenConstraints\n            }));\n            delete params.screenConstraints;\n\n            params.constraints.forEach(function (con) {\n                if (con.audio) {\n                    hasAudio = true;\n                }\n            });\n\n            /* If they didn't override screensharing constraints and no constraints so far have included audio,\n             * add audio to the call. If they overrode the default screensharing constraints, we'll assume they\n             * know what they are doing and didn't want audio.\n             */\n            if (addAudio && !hasAudio) {\n                params.constraints.push({\n                    audio: true,\n                    video: false\n                });\n            }\n        }\n\n        return that.startCall(params);\n    };\n\n    /**\n     * Create a new call.\n     *\n     *     endpoint.startCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {Array<RTCConstraints>} [params.constraints]\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n     * video attached to it.\n     * @returns {respoke.Call}\n     */\n    that.startCall = function (params) {\n        var call = null;\n        params = params || {};\n\n        params.constraints = respoke.convertConstraints(params.constraints, [{\n            video: true,\n            audio: true,\n            mandatory: {},\n            optional: []\n        }]);\n\n        // If they are requesting a screen share by constraints without having called startScreenShare\n        if (params.target !== 'screenshare' && params.constraints[0] &&\n                respoke.constraintsHasScreenShare(params.constraints[0])) {\n            return that.startScreenShare(params);\n        }\n\n        params.target = params.target || \"call\";\n\n        log.debug('Endpoint.call', params);\n        client.verifyConnected();\n        if (typeof params.caller !== 'boolean') {\n            params.caller = true;\n        }\n\n        if (!that.id) {\n            log.error(\"Can't start a call without endpoint ID!\");\n            return;\n        }\n\n        params.instanceId = instanceId;\n        params.remoteEndpoint = that;\n\n        params.signalOffer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'offer';\n            signalParams.target = params.target;\n            signalParams.recipient = that;\n\n            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n        };\n        params.signalAnswer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'answer';\n            signalParams.target = params.target;\n            signalParams.recipient = that;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n                signalParams.call.hangup({signal: false});\n            });\n        };\n        params.signalConnected = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.connectionId = signalParams.call.connectionId;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalParams.recipient = that;\n            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n                signalParams.call.hangup();\n            });\n        };\n        params.signalModify = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.recipient = that;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalingChannel.sendModify(signalParams).done();\n        };\n        params.signalCandidate = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.recipient = that;\n            signalParams.sessionId = signalParams.call.sessionId;\n            return signalingChannel.sendCandidate(signalParams);\n        };\n        params.signalHangup = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.recipient = that;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalingChannel.sendHangup(signalParams).done();\n        };\n        params.signalReport = function (signalParams) {\n            log.debug(\"Sending debug report\", signalParams.report);\n            signalingChannel.sendReport(signalParams).done();\n        };\n\n        params.signalingChannel = signalingChannel;\n        call = respoke.Call(params);\n        addCall({call: call});\n        return call;\n    };\n\n    /**\n     * Create a new DirectConnection.  This method creates a new Call as well, attaching this DirectConnection to\n     * it for the purposes of creating a peer-to-peer link for sending data such as messages to the other endpoint.\n     * Information sent through a DirectConnection is not handled by the cloud infrastructure.  If there is already\n     * a direct connection open, this method will resolve the promise with that direct connection instead of\n     * attempting to create a new one.\n     *\n     *     endpoint.startDirectConnection({\n     *         onOpen: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startDirectConnection\n     * @param {object} params\n     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess] - Success handler for this\n     * invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {respoke.DirectConnection.onStart} [params.onStart] - A callback for when setup of the direct\n     * connection begins. The direct connection will not be open yet.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - A callback for receiving notification of when\n     * the DirectConnection is open and ready to be used.\n     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n     * connection.\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - A callback for receiving notification of\n     * when the DirectConnection is closed and the two Endpoints are disconnected.\n     * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the\n     * request for a direct connection and setup begins.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - A callback for receiving messages sent\n     * through the DirectConnection.\n     * @param {string} [params.connectionId] - An optional connection ID to use for this connection. This allows\n     * the connection to be made to a specific instance of an endpoint in the case that the same endpoint is logged\n     * in from multiple locations.\n     * @returns {Promise<respoke.DirectConnection>} The DirectConnection which can be used to send data and messages\n     * directly to the other endpoint.\n     */\n    that.startDirectConnection = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n        var call;\n\n        try {\n            client.verifyConnected();\n        } catch (err) {\n            deferred.reject(err);\n            return retVal;\n        }\n\n        if (that.directConnection || params.create === false) {\n            deferred.resolve(that.directConnection);\n            return retVal;\n        }\n\n        if (typeof params.caller !== 'boolean') {\n            params.caller = true;\n        }\n\n        if (!that.id) {\n            deferred.reject(new Error(\"Can't start a direct connection without endpoint ID!\"));\n            return retVal;\n        }\n\n        params.instanceId = instanceId;\n        params.remoteEndpoint = that;\n\n        params.signalOffer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'offer';\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n\n            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n        };\n        params.signalConnected = function (signalParams) {\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n                signalParams.call.hangup();\n            });\n        };\n        params.signalAnswer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n            signalParams.signalType = 'answer';\n            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n                signalParams.call.hangup({signal: false});\n            });\n        };\n        params.signalCandidate = function (signalParams) {\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n            return signalingChannel.sendCandidate(signalParams);\n        };\n        params.signalHangup = function (signalParams) {\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n            signalingChannel.sendHangup(signalParams).done();\n        };\n        params.signalReport = function (signalParams) {\n            signalParams.report.target = 'directConnection';\n            log.debug(\"Not sending report\");\n            log.debug(signalParams.report);\n        };\n        params.needDirectConnection = true;\n        // Don't include audio in the offer SDP\n        params.offerOptions = {\n            mandatory: {\n                OfferToReceiveAudio: false\n            }\n        };\n\n        params.signalingChannel = signalingChannel;\n        call = respoke.Call(params);\n        addCall({call: call});\n        call.listen('direct-connection', function directConnectionHandler(evt) {\n            that.directConnection = evt.directConnection;\n            if (params.caller !== true) {\n                if (!client.hasListeners('direct-connection') &&\n                        !client.hasListeners('direct-connection') &&\n                        !call.hasListeners('direct-connection')) {\n                    that.directConnection.reject();\n                    deferred.reject(new Error(\"Got an incoming direct connection with no handlers to accept it!\"));\n                    return;\n                }\n\n                deferred.resolve(that.directConnection);\n                that.directConnection.listen('close', function closeHandler(evt) {\n                    that.directConnection = undefined;\n                }, true);\n            }\n        }, true);\n\n        return retVal;\n    };\n\n    /**\n     * Find the presence out of all known connections with the highest priority (most availability)\n     * and set it as the endpoint's resolved presence.\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.resolvePresence\n     * @private\n     */\n    that.resolvePresence = function () {\n\n        var presenceList = that.connections.map(function (connection) {\n            return connection.presence;\n        });\n\n        if (resolveEndpointPresence !== undefined) {\n            that.presence = resolveEndpointPresence(presenceList);\n        } else {\n            var options = ['chat', 'available', 'away', 'dnd', 'xa', 'unavailable'];\n            var idList;\n\n            /*\n             * Sort the connections array by the priority of the value of the presence of that\n             * connectionId. This will cause the first element in the list to be the id of the\n             * session with the highest priority presence so we can access it by the 0 index.\n             * TODO: If we don't really care about the sorting and only about the highest priority\n             * we could use Array.prototype.every to improve this algorithm.\n             */\n            idList = that.connections.sort(function sorter(a, b) {\n                var indexA = options.indexOf(a.presence);\n                var indexB = options.indexOf(b.presence);\n                // Move it to the end of the list if it isn't one of our accepted presence values\n                indexA = indexA === -1 ? 1000 : indexA;\n                indexB = indexB === -1 ? 1000 : indexB;\n                return indexA < indexB ? -1 : (indexB < indexA ? 1 : 0);\n            });\n\n            if (idList[0]) {\n                that.presence = idList[0].presence;\n            } else {\n                that.presence = 'unavailable';\n            }\n        }\n    };\n\n    /**\n     * Get the Connection with the specified id. The connection ID is optional if only one connection exists.\n     *\n     *     var connection = endpoint.getConnection({\n     *         connectionId: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\"\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.getConnection\n     * @private\n     * @param {object} params\n     * @param {string} [params.connectionId]\n     * @return {respoke.Connection}\n     */\n    that.getConnection = function (params) {\n        var connection = null;\n        params = params || {};\n        if (that.connections.length === 1 &&\n                (!params.connectionId || that.connections[0] === params.connectionId)) {\n            return that.connections[0];\n        }\n\n        if (!params || !params.connectionId) {\n            throw new Error(\"Can't find a connection without the connectionId.\");\n        }\n\n        that.connections.every(function eachConnection(conn) {\n            if (conn.id === params.connectionId) {\n                connection = conn;\n                return false;\n            }\n            return true;\n        });\n\n        return connection;\n    };\n\n    /**\n     * Called to indicate that a connection for this endpoint has joined a\n     * group.\n     *\n     * @private\n     * @returns {number} Number of groups this endpoint is a member of.\n     */\n    that.joinedGroup = function () {\n        ++that.groupConnectionCount;\n    };\n\n    /**\n     * Called to indicate that a connection for this endpoint has left a\n     * group.\n     *\n     * @private\n     * @returns {number} Number of groups this endpoint is a member of.\n     */\n    that.leftGroup = function () {\n        --that.groupConnectionCount;\n    };\n\n    return that;\n}; // End respoke.Endpoint\n/**\n * Handle messages sent to the logged-in user from this one Endpoint.  This callback is called every time\n * respoke.Endpoint#message fires.\n * @callback respoke.Endpoint.onMessage\n * @param {respoke.Event} evt\n * @param {respoke.TextMessage} evt.message - the message\n * @param {respoke.Endpoint} evt.target\n * @param {string} evt.name - the event name\n */\n/**\n * Handle presence notifications from this one Endpoint.  This callback is called every time\n * respoke.Endpoint#message fires.\n * @callback respoke.Endpoint.onPresence\n * @param {respoke.Event} evt\n * @param {string|number|object|Array} evt.presence - the Endpoint's presence\n * @param {respoke.Endpoint} evt.target\n * @param {string} evt.name - the event name\n */\n /**\n * Handle resolving presence for this endpoint\n * @callback respoke.Client.resolveEndpointPresence\n * @param {Array<object>} connectionPresence\n * @returns {object|string|number}\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/endpoint.js\n ** module id = 9\n ** module chunks = 0\n **/","/*\n * Copyright 2015, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n */\n\n/**\n * A text message and the information needed to route it.\n * @class respoke.TextMessage\n * @constructor\n * @param {object} params\n * @param {string} [params.endpointId] - If sending, endpoint ID of the thing we're sending a message to.\n * @param {string} [params.cSelf] - Copy this client's own endpoint on this message so that they arrive\n * at other devices it might be logged into elsewhere.\n * @param {string} [params.connectionId] - If sending, connection ID of the thing we're sending a message to.\n * @param {string} [params.message] - If sending, a message to send\n * @param {object} [params.rawMessage] - If receiving, the parsed JSON we got from the server\n * @private\n * @returns {respoke.TextMessage}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = {};\n\n    /**\n     * Parse rawMessage and set attributes required for message delivery.\n     * @memberof! respoke.TextMessage\n     * @method respoke.TextMessage.parse\n     * @private\n     */\n    function parse() {\n        if (params.rawMessage) {\n            try {\n                that.endpointId = params.rawMessage.header.from;\n                that.originalRecipient = params.rawMessage.header.toOriginal;\n                that.connectionId = params.rawMessage.header.fromConnection;\n                that.timestamp = params.rawMessage.header.timestamp;\n            } catch (e) {\n                throw new Error(e);\n            }\n            that.message = params.rawMessage.message || params.rawMessage.body;\n            if (params.rawMessage.header.channel) {\n                that.recipient = params.rawMessage.header.channel;\n            }\n        } else {\n            try {\n                that.to = params.endpointId;\n                that.ccSelf = params.ccSelf;\n                that.toConnection = params.connectionId;\n                that.requestConnectionReply = (params.requestConnectionReply === true);\n                that.push = (params.push === true);\n            } catch (e) {\n                throw new Error(e);\n            }\n            that.message = params.message;\n        }\n    }\n\n    parse();\n    return that;\n}; // End respoke.TextMessage\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/textMessage.js\n ** module id = 10\n ** module chunks = 0\n **/","/*\n * Copyright 2015, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n */\n\n/**\n * A signaling message and the information needed to route it.\n * @class respoke.SignalingMessage\n * @constructor\n * @param {object} params\n * @param {string} [params.fromEndpoint] - If sending, the endpoint ID of the recipient\n * @param {string} [params.fromConnection] - If sending, the connection ID of the recipient\n * @param {string} [params.connectionId] - The connectionId of the endpoint whose answer signal has been accepted.\n * @param {string} [params.signal] - If sending, a message to send\n * @param {respoke.Endpoint} [params.recipient]\n * @param {string} [params.signalType]\n * @param {string} [params.sessionId] - A globally unique ID to identify this call.\n * @param {string} [params.target] - Either 'call' or 'directConnection', TODO remove the need for this.\n * @param {string} [params.callerId] - Human readable caller ID. Not implemented.\n * @param {RTCSessionDescription} [params.sdp]\n * @param {Array<RTCIceCandidate>} [params.iceCandidates]\n * @param {object} [params.offering] - Object describing the media we're offering to send the remote party in a more\n * usable way than SDP. Not implemented.\n * @param {object} [params.requesting] - Object describing the media we're requesting from the remote party in a more\n * usable way than SDP. Not implemented.\n * @param {string} [params.reason] - Human readable reason for hanging up.\n * @param {string} [params.error] - String indicating that a previous signal was malformed or received in the wrong\n * state. Not implemented.\n * @param {string} [params.status] - \"Ringing\". Not implemented.\n * @param {object} [params.rawMessage] - If receiving, the parsed JSON we got from the server\n * @private\n * @returns {respoke.SignalingMessage}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = {};\n    /**\n     * Attributes without which we cannot build a signaling message.\n     * @memberof! respoke.SignalingMessage\n     * @name required\n     * @private\n     * @type {string}\n     */\n    var required = ['recipient', 'signalType', 'sessionId', 'target', 'signalId'];\n    /**\n     * Attributes which we will copy onto the signal if defined.\n     * @memberof! respoke.SignalingMessage\n     * @name required\n     * @private\n     * @type {string}\n     */\n    var allowed = [\n        'signalType', 'sessionId', 'sessionDescription', 'iceCandidates', 'offering', 'target', 'signalId', 'callerId',\n        'requesting', 'reason', 'error', 'status', 'connectionId', 'version', 'finalCandidates'\n    ];\n\n    params.version = '1.0';\n\n    /**\n     * Parse rawMessage and set attributes required for message delivery.\n     * @memberof! respoke.SignalingMessage\n     * @method respoke.SignalingMessage.parse\n     * @private\n     */\n    function parse() {\n        if (params.rawMessage) {\n            try {\n                that = JSON.parse(params.rawMessage.body); // Incoming message\n            } catch (e) {\n                that = params.rawMessage.body;\n            }\n            that.fromType = params.rawMessage.header.fromType;\n            that.fromEndpoint = params.rawMessage.header.from;\n            that.fromConnection = params.rawMessage.header.fromConnection;\n            that.timestamp = params.rawMessage.header.timestamp;\n\n            if (!that.target) {\n                that.target = 'call';\n            }\n        } else {\n            required.forEach(function eachAttr(attr) {\n                if (params[attr] === 0 || !params[attr]) {\n                    throw new Error(\"Can't build a signaling without \" + attr);\n                }\n            });\n\n            allowed.forEach(function eachAttr(attr) {\n                if (params[attr] === 0 || params[attr]) {\n                    that[attr] = params[attr];\n                }\n            });\n        }\n    }\n\n    parse();\n    return that;\n}; // End respoke.SignalingMessage\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/signalingMessage.js\n ** module id = 11\n ** module chunks = 0\n **/","/*\n * Copyright 2015, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\n\n/**\n * A `respoke.Group` represents a collection of endpoints.\n *\n * There are methods to communicate with the endpoints at the group level and track\n * their presence in the group.\n *\n * @class respoke.Group\n * @augments respoke.EventEmitter\n * @constructor\n * @param {object} params\n * @param {string} params.instanceId\n * @param {respoke.Group.onJoin} params.onJoin - A callback to receive notifications every time a new\n * endpoint has joined the group. This callback does not get called when the client joins the group.\n * @param {respoke.Group.onMessage} params.onMessage - A callback to receive messages sent to the group from\n * remote endpoints.\n * @param {respoke.Group.onLeave} params.onLeave - A callback to receive notifications every time a new\n * endpoint has left the group. This callback does not get called when the client leaves the group.\n * @returns {respoke.Group}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n\n    var that = respoke.EventEmitter(params);\n    /**\n     * @memberof! respoke.Group\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var client = respoke.getClient(instanceId);\n\n    if (!that.id) {\n        throw new Error(\"Can't create a group without an ID.\");\n    }\n\n    /**\n     * Indicates whether there have been group membership changes since the last time we performed\n     * a network request to list group members.\n     * @memberof! respoke.Group\n     * @name cacheIsValid\n     * @private\n     * @type {boolean}\n     */\n    var cacheIsValid = false;\n\n    /**\n     * Internal reference to the api signaling channel.\n     * @memberof! respoke.Group\n     * @name signalingChannel\n     * @type respoke.SignalingChannel\n     * @private\n     */\n    var signalingChannel = params.signalingChannel;\n    delete params.signalingChannel;\n\n    /**\n     * The connections to members of this group.\n     * @memberof! respoke.Group\n     * @name endpoints\n     * @type {array<respoke.Connection>}\n     */\n    that.connections = [];\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.Group\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Group';\n    that.listen('join', params.onJoin);\n    /**\n     * Indicates that a message has been sent to this group.\n     * @event respoke.Group#message\n     * @type {respoke.Event}\n     * @property {respoke.TextMessage} message\n     * @property {string} name - The event name.\n     * @property {respoke.Group} target\n     */\n    that.listen('message', params.onMessage);\n    that.listen('leave', params.onLeave);\n\n    /**\n     * Clear out the connections within this group. Called when we're no longer\n     * connected to the group.\n     * @private\n     */\n    function clearConnections() {\n        that.connections.forEach(function (connection) {\n            connection.getEndpoint().leftGroup();\n        });\n        that.connections = [];\n    }\n\n    client.listen('disconnect', function disconnectHandler() {\n        cacheIsValid = false;\n        clearConnections();\n    }, true);\n\n    delete that.instanceId;\n    delete that.onMessage;\n    delete that.onPresence;\n    delete that.onJoin;\n    delete that.onLeave;\n\n    /**\n     * Join this group.\n     *\n     *     group.join().done(function () {\n     *         group.sendMessage({\n     *             message: \"Hey, ppl! I'm here!\"\n     *         });\n     *     }, function (err) {\n     *         // Couldn't join the group, possibly permissions error\n     *     });\n     *\n     * **Using callbacks** will disable promises.\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.join\n     * @return {Promise|undefined}\n     * @param {object} params\n     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @fires respoke.Client#join\n     */\n    that.join = function () {\n        var params = {\n            id: that.id\n        };\n        var promise;\n        var deferred;\n        var retVal;\n        cacheIsValid = false;\n\n        try {\n            validateConnection();\n        } catch (err) {\n            deferred = Q.defer();\n            retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n            deferred.reject(err);\n            return retVal;\n        }\n\n        promise = client.join(params);\n        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n        return retVal;\n    };\n\n    /**\n     * Leave this group. If this method is called multiple times synchronously, it will batch requests and\n     * only make one API call to Respoke.\n     *\n     *     group.leave({\n     *         onSuccess: function () {\n     *             // good riddance\n     *         },\n     *         onError: function (err) {\n     *             // Couldn't leave the group, possibly a permissions error\n     *         }\n     *     });\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.leave\n     * @param {object} params\n     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @return {Promise|undefined}\n     * @fires respoke.Client#leave\n     */\n    that.leave = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n        try {\n            validateConnection();\n            validateMembership();\n        } catch (err) {\n            deferred.reject(err);\n            return retVal;\n        }\n\n        signalingChannel.leaveGroup({\n            groupList: [that.id]\n        }).done(function successHandler() {\n            clearConnections();\n            deferred.resolve();\n            cacheIsValid = false;\n\n            /**\n             * This event is fired when the client leaves a group.\n             * @event respoke.Client#leave\n             * @type {respoke.Event}\n             * @property {respoke.Group} group\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             * @private\n             */\n            client.fire('leave', {\n                group: that\n            });\n        }, function errorHandler(err) {\n            deferred.reject();\n        });\n        return retVal;\n    };\n\n    /**\n     * Remove a Connection from a Group. This does not change the status of the remote Endpoint, it only changes the\n     * internal representation of the Group membership. This method should only be used internally.\n     * @private\n     * @memberof! respoke.Group\n     * @method respoke.Group.removeMember\n     * @param {object} params\n     * @param {string} [params.connectionId] - Endpoint's connection id\n     * @fires respoke.Group#leave\n     */\n    that.removeMember = function (params) {\n        params = params || {};\n\n        try {\n            validateConnection();\n            validateMembership();\n        } catch (err) {\n            return;\n        }\n\n        if (!params.connectionId) {\n            throw new Error(\"Can't remove a member to the group without it's Connection id.\");\n        }\n\n        cacheIsValid = false;\n\n        that.connections.every(function eachConnection(conn, index) {\n            if (conn.id === params.connectionId) {\n                that.connections.splice(index, 1);\n                conn.getEndpoint().leftGroup();\n\n                /**\n                 * This event is fired when a member leaves a group the client is a member of.\n                 * @event respoke.Group#leave\n                 * @type {respoke.Event}\n                 * @property {respoke.Connection} connection - The connection that left the group.\n                 * @property {string} name - The event name.\n                 * @property {respoke.Group} target\n                 */\n                that.fire('leave', {\n                    connection: conn\n                });\n                return false;\n            }\n            return true;\n        });\n    };\n\n    /**\n     * Return true if the logged-in user is a member of this group and false if not.\n     *\n     *     if (group.isJoined()) {\n     *         // I'm a member!\n     *     } else {\n     *         // Maybe join here\n     *     }\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.isJoined\n     * @returns {boolean}\n     */\n    that.isJoined = function () {\n        // connections array contains some connections and ours is among them.\n        return (that.connections.length > 0 && !that.connections.every(function (conn) {\n            return conn.id !== client.connectionId;\n        }));\n    };\n\n    /**\n     * Add a Connection to a group. This does not change the status of the remote Endpoint, it only changes the\n     * internal representation of the Group membership. This method should only be used internally.\n     * @memberof! respoke.Group\n     * @private\n     * @method respoke.Group.addMember\n     * @param {object} params\n     * @param {respoke.Connection} params.connection\n     * @fires respoke.Group#join\n     */\n    that.addMember = function (params) {\n        params = params || {};\n        var absent;\n\n        validateConnection();\n\n        if (!params.connection) {\n            throw new Error(\"Can't add a member to the group without it's Connection object.\");\n        }\n\n        cacheIsValid = false;\n\n        absent = that.connections.every(function eachConnection(conn) {\n            return (conn.id !== params.connection.id);\n        });\n\n        if (absent) {\n            that.connections.push(params.connection);\n            params.connection.getEndpoint().joinedGroup();\n            if (params.skipEvent) {\n                return;\n            }\n\n            /**\n             * This event is fired when a member joins a Group that the currently logged-in endpoint is a member\n             * of.\n             * @event respoke.Group#join\n             * @type {respoke.Event}\n             * @property {respoke.Connection} connection - The connection that joined the group.\n             * @property {string} name - The event name.\n             * @property {respoke.Group} target\n             */\n            that.fire('join', {\n                connection: params.connection\n            });\n        }\n    };\n\n    /**\n     * Validate that the client is connected to the Respoke infrastructure.\n     * @memberof! respoke.Group\n     * @method respoke.Group.validateConnection\n     * @private\n     */\n    function validateConnection() {\n        if (!signalingChannel || !signalingChannel.isConnected()) {\n            throw new Error(\"Can't complete request when not connected. Please reconnect!\");\n        }\n    }\n\n    /**\n     * Validate that the client is a member of this group.\n     * @memberof! respoke.Group\n     * @method respoke.Group.validateMembership\n     * @private\n     */\n    function validateMembership() {\n        if (!that.isJoined()) {\n            throw new Error(\"Not a member of this group anymore.\");\n        }\n    }\n\n    /**\n     *\n     * Send a message to all of the endpoints in the group.\n     *\n     *      var group = client.getGroup({ id: 'js-enthusiasts'});\n     *\n     *      group.sendMessage({\n     *          message: \"Cat on keyboard\",\n     *          onSuccess: function (evt) {\n     *              console.log('Message was sent');\n     *          }\n     *      });\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.sendMessage\n     * @param {object} params\n     * @param {string} params.message - The message.\n     * @param {boolean} [params.push=false] - Whether or not the message should be considered for push notifications to\n     * mobile devices.\n     * @param {function} params.onSuccess - Success handler indicating that the message was delivered.\n     * @param {function} params.onError - Error handler indicating that the message was not delivered.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        params = params || {};\n        params.id = that.id;\n        var promise;\n\n        try {\n            validateConnection();\n            validateMembership();\n        } catch (err) {\n            promise = Q.reject(err);\n        }\n\n        return respoke.handlePromise(promise ? promise : signalingChannel.publish(params),\n                params.onSuccess, params.onError);\n    };\n\n    /**\n     * Get group members\n     *\n     * Get an array containing all connections subscribed to the group. Accepts onSuccess or onError parameters,\n     * or it returns a promise that you can observe. An endpoint may have more than one connection subscribed to\n\t * a group, so if you're interested in unique endpoints, you may want to filter the connections by endpointId.\n     *\n     *     group.getMembers({\n     *         onSuccess: function (connections) {\n     *             connections.forEach(function (connection) {\n     *                 console.log(connection.endpointId);\n     *             });\n     *         }\n     *     });\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.getMembers\n     * @param {object} params\n     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Success handler for this invocation of this method only.\n     * @returns {Promise<Array>} A promise to an array of Connections.\n     */\n    that.getMembers = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n        try {\n            validateConnection();\n            validateMembership();\n        } catch (err) {\n            deferred.reject(err);\n            return retVal;\n        }\n\n        if (that.connections.length > 0 && cacheIsValid) {\n            deferred.resolve(that.connections);\n            return retVal;\n        }\n\n        signalingChannel.getGroupMembers({\n            id: that.id\n        }).done(function successHandler(list) {\n            var endpointList = [];\n            list.forEach(function eachMember(params) {\n                var connection = client.getConnection({\n                    endpointId: params.endpointId,\n                    connectionId: params.connectionId,\n                    skipCreate: true\n                });\n\n                if (!connection) {\n                    // Create the connection\n                    connection = client.getConnection({\n                        endpointId: params.endpointId,\n                        connectionId: params.connectionId\n                    });\n                }\n\n                if (endpointList.indexOf(params.endpointId) === -1) {\n                    endpointList.push(params.endpointId);\n                }\n                that.addMember({\n                    connection: connection,\n                    skipEvent: true\n                });\n            });\n\n            cacheIsValid = true;\n\n            deferred.resolve(that.connections);\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return retVal;\n    };\n\n    /**\n     * Experimental. Create a new conference call. The ID will be the group name. Only members of this group will\n     * be permitted to participate in the conference call.\n     *\n     *     group.joinConference({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.joinConference\n     * @private\n     * @param {object} params\n     * @param {string|boolean} params.audio - Whether participant should send and receive audio. Boolean `true`\n     * indicates send and receive. Boolean `false` indicates neither send nor receive. Strings `send` and `receive`\n     * indicate send only and receive only respectively.\n     * @param {string|boolean} params.video - Whether participant should send and receive audio. Boolean `true`\n     * indicates send and receive. Boolean `false` indicates neither send nor receive. Strings `send` and `receive`\n     * indicate send only and receive only respectively.\n     * @param {boolean} params.mixAudio - Whether Respoke should mix all the audio streams together to save bandwidth\n     * for this one participant.\n     * @arg {respoke.Conference.onJoin} [params.onJoin] - Callback for when a participant joins the conference.\n     * @arg {respoke.Conference.onLeave} [params.onLeave] - Callback for when a participant leaves the conference.\n     * @arg {respoke.Conference.onMessage} [params.onMessage] - Callback for when a message is sent to the conference.\n     * @param {respoke.Conference.onMute} [params.onMute] - Callback for when local or remote media is muted or unmuted.\n     * @arg {respoke.Conference.onTopic} [params.onTopic] - Callback for the conference topic changes.\n     * @arg {respoke.Conference.onPresenter} [params.onPresenter] - Callback for when the presenter changes.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n     * and the remote party has received the video.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @returns {respoke.Conference}\n     */\n    that.joinConference = function (params) {\n        var conference = null;\n        params = params || {};\n        params.id = that.id;\n\n        conference = client.joinConference(params);\n        return conference;\n    };\n\n    return that;\n}; // End respoke.Group\n/**\n * Receive notification that an endpoint has joined this group. This callback is called everytime\n * respoke.Group#join is fired.\n * @callback respoke.Group.onJoin\n * @param {respoke.Event} evt\n * @param {respoke.Connection} evt.connection\n * @param {string} evt.name - the event name.\n * @param {respoke.Group} evt.target\n */\n/**\n * Receive notification that an endpoint has left this group. This callback is called everytime\n * respoke.Group#leave is fired.\n * @callback respoke.Group.onLeave\n * @param {respoke.Event} evt\n * @param {respoke.Connection} evt.connection\n * @param {string} evt.name - the event name.\n * @param {respoke.Group} evt.target\n */\n/**\n * Receive notification that a message has been received to a group. This callback is called every time\n * respoke.Group#message is fired.\n * @callback respoke.Group.onMessage\n * @param {respoke.Event} evt\n * @param {respoke.TextMessage} evt.message\n * @param {string} evt.name - the event name.\n * @param {respoke.Group} evt.target\n */\n/**\n * Get a list of the Connections which are members of this Group.\n * @callback respoke.Group.connectionsHandler\n * @param {Array<respoke.Connection>} connections\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/group.js\n ** module id = 12\n ** module chunks = 0\n **/","/*\n * Copyright 2015, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n */\n'use strict';\n\nvar Q = require('q');\nvar io = require('socket.io-client');\nvar respoke = require('./respoke');\nvar template = require('url-template');\nvar log = respoke.log;\n\nvar sdkHeaderValue = 'Respoke.js/' + respoke.version;\n\nvar billingSuspensionErrorMessage = \"Can't perform this action: Not Authorized. Your account is suspended due to a \" +\n    \"billing issue. Please visit the Respoke Developer Portal (https://www.respoke.io) or contact customer support \" +\n    \"(support@respoke.io) to address this issue.\";\n\nvar suspensionErrorMessage = \"Canot perform this action: Not Authorized. Your account is suspended. Please visit \" +\n    \"the Respoke Developer Portal (https://www.respoke.io) or contact customer support (support@respoke.io) to \" +\n    \"address this issue.\";\n\n/**\n * Returns a timestamp, measured in milliseconds.\n *\n * This method will use high resolution time, if available. Otherwise it falls back to just\n * using the wall clock.\n *\n * @return {number} Number of milliseconds that have passed since some point in the past.\n * @private\n */\nvar now;\nif (window.performance && window.performance.now) {\n    now = window.performance.now.bind(window.performance);\n} else if (Date.now) {\n    now = Date.now.bind(Date);\n} else {\n    now = function () {\n        return new Date().getTime();\n    };\n}\n\n/**\n * Container for holding requests that are currently waiting on responses.\n * @returns {PendingRequests}\n * @private\n * @constructor\n */\nvar PendingRequests = function () {\n    /**\n     * Pending requests.\n     * @private\n     * @type {Array}\n     */\n    var contents = [];\n    /**\n     * Counter to provide the next id.\n     * @private\n     * @type {number}\n     */\n    var counter = 0;\n    var that = {};\n\n    /**\n     * Add a new pending request.\n     *\n     * @memberof PendingRequests\n     * @param obj\n     * @returns {*} The key to use for the `remove` method.\n     */\n    that.add = function (obj) {\n        contents[counter] = obj;\n        counter++;\n        return counter;\n    };\n\n    /**\n     * Remove a pending request.\n     *\n     * @param {*} key Key returned from `add` method.\n     */\n    that.remove = function (key) {\n        delete contents[key];\n    };\n\n    /**\n     * Disposes of any currently pending requests, synchronously invoking the provided function on\n     * each.\n     *\n     * @param {function} [fn] Callback for pending requests.\n     */\n    that.reset = function (fn) {\n        if (fn) {\n            contents.forEach(fn);\n        }\n        contents = [];\n    };\n\n    return that;\n};\n\n/**\n * The purpose of this class is to make a method call for each API call\n * to the backend REST interface.  This class takes care of App authentication, websocket connection,\n * Endpoint authentication, and all App interactions thereafter.  Almost all methods return a Promise.\n * @class respoke.SignalingChannel\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.instanceId - client id\n * @private\n * @returns {respoke.SignalingChannel}\n */\nmodule.exports = function (params) {\n    params = params || {};\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name className\n     * @type {string}\n     * @private\n     */\n    that.className = 'respoke.SignalingChannel';\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name client\n     * @private\n     * @type {respoke.Client}\n     */\n    var client = respoke.getClient(instanceId);\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name socket\n     * @private\n     * @type {Socket.io.Socket}\n     */\n    var socket = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name clientSettings\n     * @private\n     * @type {object}\n     */\n    var clientSettings = params.clientSettings;\n    delete that.clientSettings;\n    clientSettings.baseURL = clientSettings.baseURL || 'https://api.respoke.io';\n    /**\n     * A map to avoid duplicate endpoint presence registrations.\n     * @memberof! respoke.SignalingChannel\n     * @name presenceRegistered\n     * @private\n     * @type {object}\n     */\n    var presenceRegistered = {};\n    /**\n     * A reference to the private function Client.actuallyConnect that gets set in SignalingChannel.open() so we\n     * don't have to make it public.\n     * @memberof! respoke.SignalingChannel\n     * @name actuallyConnect\n     * @private\n     * @type {function}\n     */\n    var actuallyConnect = null;\n    /**\n     * Set of promises for any pending requests on the WebSocket.\n     * @private\n     * @type {PendingRequests}\n     */\n    var pendingRequests = PendingRequests();\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name reconnectTimeout\n     * @private\n     * @type {number}\n     */\n    var reconnectTimeout = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name maxReconnectTimeout\n     * @private\n     * @type {number}\n     */\n    var maxReconnectTimeout = 5 * 60 * 1000;\n    /**\n     * Rejects a message if the body size is greater than this. It is enforced servcer side, so changing this\n     * won't make the bodySizeLimit any bigger, this just gives you a senseable error if it's too big.\n     * @memberof! respoke.signalingChannel\n     * @name bodySizeLimit\n     * @private\n     * @type {number}\n     */\n    var bodySizeLimit = 20000;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name appId\n     * @private\n     * @type {string}\n     */\n    var appId = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name endpointId\n     * @private\n     * @type {string}\n     */\n    var endpointId = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name token\n     * @private\n     * @type {string}\n     */\n    var token = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name appToken\n     * @private\n     * @type {string}\n     */\n    var appToken = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name xhr\n     * @private\n     * @type {XMLHttpRequest}\n     */\n    var xhr = new XMLHttpRequest();\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name routingMethods\n     * @private\n     * @type {object}\n     * @desc The methods contained in this object are statically defined methods that are called by constructing\n     * their names dynamically. 'do' + $className + $signalType == 'doCallOffer', et. al.\n     */\n    var routingMethods = {};\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name handlerQueue\n     * @private\n     * @type {object}\n     */\n    var handlerQueue = {\n        'message': [],\n        'signal': [],\n        'presence': []\n    };\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name errors\n     * @private\n     * @type {object}\n     */\n    var errors = {\n        400: \"Can't perform this action: missing or invalid parameters.\",\n        401: \"Can't perform this action: not authenticated.\",\n        403: \"Can't perform this action: not authorized.\",\n        404: \"Item not found.\",\n        409: \"Can't perform this action: item in the wrong state.\",\n        429: \"API rate limit was exceeded.\",\n        500: \"Can't perform this action: server problem.\"\n    };\n\n    /**\n     * Indicate whether the signaling channel has a valid connection to Respoke.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.isConnected\n     * @return {boolean}\n     */\n    that.isConnected = function () {\n        return !!(socket && socket.socket.connected);\n    };\n\n    /**\n     * Indicate whether the signaling channel is currently waiting on a websocket to connect.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.isConnecting\n     * @private\n     * @return {boolean}\n     */\n    function isConnecting() {\n        return !!(socket && socket.socket.connecting);\n    }\n\n    /**\n     * Get the call debug preference.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.isSendingReport\n     * @private\n     * @return {boolean}\n     */\n    that.isSendingReport = function (params) {\n        return clientSettings.enableCallDebugReport;\n    };\n\n    /**\n     * Open a connection to the REST API and validate the app, creating a session token.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.open\n     * @private\n     * @param {object} params\n     * @param {string} [params.token] - The Endpoint's auth token\n     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @return {Promise}\n     */\n    that.open = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug('SignalingChannel.open', params, clientSettings);\n        token = params.token || token;\n        actuallyConnect = typeof params.actuallyConnect === 'function' ? params.actuallyConnect : actuallyConnect;\n\n        Q.fcall(function tokenPromise() {\n            if (clientSettings.developmentMode === true && clientSettings.appId && params.endpointId) {\n                return that.getToken({\n                    appId: clientSettings.appId,\n                    endpointId: params.endpointId\n                });\n            }\n            return null;\n        }).then(function successHandler(newToken) {\n            token = newToken || token;\n            return doOpen({token: token});\n        }).done(function successHandler() {\n            deferred.resolve();\n            log.debug('client', client);\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Get a developer mode token for an endpoint. App must be in developer mode.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getToken\n     * @private\n     * @param {object} params\n     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @return {Promise<String>}\n     */\n    that.getToken = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug('SignalingChannel.getToken', params);\n\n        var callParams = {\n            path: '/v1/tokens',\n            httpMethod: 'POST',\n            parameters: {\n                appId: clientSettings.appId,\n                endpointId: params.endpointId,\n                ttl: 60 * 60 * 6\n            }\n        };\n\n        call(callParams).done(function (response) {\n            if (response.statusCode === 200 && response.body && response.body.tokenId) {\n                token = response.body.tokenId;\n                deferred.resolve(response.body.tokenId);\n                return;\n            }\n\n            var errorMessage = \"Couldn't get a developer mode token. \";\n            if (isBillingSuspensionUnauthorizedResponse(response)) {\n                errorMessage += billingSuspensionErrorMessage;\n            } else if (isSuspensionUnauthorizedResponse(response)) {\n                errorMessage += suspensionErrorMessage;\n            } else {\n                errorMessage += response.error;\n            }\n\n            deferred.reject(buildResponseError(response, errorMessage));\n        }, function (err) {\n            deferred.reject(new Error(\"Couldn't get a developer mode token. \" + err.message));\n        });\n        return deferred.promise;\n    };\n\n    /**\n     * Open a connection to the REST API and validate the app, creating a session token.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.doOpen\n     * @param {object} params\n     * @param {string} params.token - The Endpoint's auth token\n     * @return {Promise}\n     * @private\n     */\n    function doOpen(params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug('SignalingChannel.doOpen', params);\n\n        if (!params.token) {\n            deferred.reject(new Error(\"Can't open connection to Respoke without a token.\"));\n            return deferred.promise;\n        }\n\n        call({\n            path: '/v1/session-tokens',\n            httpMethod: 'POST',\n            parameters: {\n                tokenId: params.token\n            }\n        }).done(function (response) {\n            if (response.statusCode === 200) {\n                appToken = response.body.token;\n                deferred.resolve();\n                log.debug(\"Signaling connection open to\", clientSettings.baseURL);\n                return;\n            }\n\n            var errorMessage = \"Couldn't authenticate app. \";\n            if (isBillingSuspensionUnauthorizedResponse(response)) {\n                errorMessage += billingSuspensionErrorMessage;\n            } else if (isSuspensionUnauthorizedResponse(response)) {\n                errorMessage += suspensionErrorMessage;\n            } else {\n                errorMessage += response.error;\n            }\n\n            deferred.reject(buildResponseError(response, errorMessage));\n        }, function (err) {\n            log.error(\"Network call failed:\", err.message);\n            deferred.reject(new Error(\"Couldn't authenticate app. \" + err.message));\n        });\n\n        return deferred.promise;\n    }\n\n    /**\n     * Close a connection to the REST API. Invalidate the session token.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.close\n     * @private\n     * @return {Promise}\n     */\n    that.close = function () {\n        var deferred = Q.defer();\n\n        wsCall({\n            path: '/v1/connections/{id}/',\n            httpMethod: 'DELETE',\n            urlParams: {\n                id: client.endpointId\n            }\n        }).fin(function finallyHandler() {\n            return call({\n                path: '/v1/session-tokens',\n                httpMethod: 'DELETE'\n            });\n        }).fin(function finallyHandler() {\n            if (socket) {\n                socket.removeAllListeners();\n                socket.disconnect();\n            }\n            socket = null;\n            deferred.resolve();\n        }).done();\n\n        return deferred.promise;\n    };\n\n    /**\n     * Generate and send a presence message representing the client's current status. This triggers\n     * the server to send the client's endpoint's presence.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendPresence\n     * @private\n     * @param {object} params\n     * @param {string|number|object|Array} [params.presence=available]\n     * @param {string} [params.status] - Non-enumeration human-readable status.\n     * @param {string} [params.show] - I can't remember what this is.\n     * @returns {Promise}\n     */\n    that.sendPresence = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug(\"Signaling sendPresence\");\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/presence',\n            httpMethod: 'POST',\n            parameters: {\n                'presence': {\n                    show: params.show,\n                    'status': params.status,\n                    type: params.presence || \"available\"\n                }\n            }\n        }).done(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return deferred.promise;\n    };\n\n    /**\n     * If the logged-in endpoint has permission through its Respoke role, forcibly remove another participant\n     * from the conference, ending its conference call.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.removeConferenceParticipant\n     * @private\n     * @param {object} params\n     * @param {string} [endpointId] - The endpoint id of the endpoint to be removed\n     * @param {string} [connectionId] - The connection id of the connection to be removed\n     * @returns {Promise}\n     */\n    that.removeConferenceParticipant = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var endpointId = params.endpointId;\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        if (!endpointId && params.connectionId) {\n            try {\n                endpointId = client.getConnection({\n                    connectionId: params.connectionId\n                }).getEndpoint().id;\n            } catch (err) {}\n\n            if (!endpointId) {\n                deferred.reject(new Error(\"conference.removeParticipant can't figure out what endpoint to remove!\"));\n                return deferred.promise;\n            }\n        }\n\n        wsCall({\n            httpMethod: 'DELETE',\n            path: '/v1/conferences/{id}/participants/{endpointId}',\n            urlParams: {\n                id: params.conferenceId,\n                endpointId: endpointId\n            },\n            parameters: {\n                connectionId: params.connectionId // Optional; It's OK if it's undefined here.\n            }\n        }).then(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * If the logged-in endpoint has permission through its Respoke role, close down the conference, removing all\n     * participants.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.destroyConference\n     * @param {object} params\n     * @param {string} params.id\n     * @private\n     * @returns {Promise}\n     */\n    that.destroyConference = function (params) {\n        var deferred = Q.defer();\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            httpMethod: 'DELETE',\n            path: '/v1/conferences/{id}/',\n            urlParams: { id: params.conferenceId }\n        }).then(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Retrieve the list of participants in the specified conference.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getConferenceParticipants\n     * @private\n     * @returns {Promise<respoke.Connection>}\n     * @param {object} params\n     * @param {string} params.id\n     */\n    that.getConferenceParticipants = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            httpMethod: 'GET',\n            path: '/v1/conferences/{id}/participants/',\n            urlParams: { id: params.id }\n        }).then(function successHandler(participants) {\n            deferred.resolve(participants.map(function (par) {\n                return client.getConnection({\n                    connectionId: par.connectionId,\n                    endpointId: par.endpointId\n                });\n            }));\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Get or create a group in the infrastructure.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getGroup\n     * @private\n     * @returns {Promise<respoke.Group>}\n     * @param {object} params\n     * @param {string} params.name\n     */\n    that.getGroup = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            httpMethod: 'POST',\n            path: '/v1/channels/',\n            parameters: {\n                name: params.name\n            }\n        }).then(function successHandler(group) {\n            deferred.resolve(group);\n        }, function errorHandler(err) {\n            // Group was already created, just return back the same params we were given.\n            deferred.resolve({id: params.name});\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Leave a group. In order to aggregate subsequent repeated requests, this function, when called synchronously,\n     * will continue to accumulate group ids until the next tick of the event loop, when the request will be\n     * issued. The same instance of Promise is returned each time.\n     * @memberof! respoke.SignalingChannel\n     * @private\n     * @method respoke.SignalingChannel.leaveGroup\n     * @returns {Promise}\n     * @param {object} params\n     * @param {array} params.groupList\n     */\n    that.leaveGroup = (function () {\n        var groups = {};\n        var deferred = Q.defer();\n\n        return function (params) {\n            params = params || {};\n            params.groupList = params.groupList || [];\n\n            var toRun = (Object.keys(groups).length === 0);\n\n            if (!that.isConnected()) {\n                deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n                return deferred.promise;\n            }\n\n            params.groupList.forEach(function (id) {\n                if (typeof id === 'string') {\n                    groups[id] = true;\n                }\n            });\n\n            if (!toRun) {\n                return deferred.promise;\n            }\n\n            setTimeout(function () {\n                // restart accumulation\n                var groupList = Object.keys(groups);\n                groups = {};\n                var saveDeferred = deferred;\n                deferred = Q.defer();\n\n                if (groupList.length === 0) {\n                    saveDeferred.resolve();\n                    return;\n                }\n\n                wsCall({\n                    path: '/v1/groups/',\n                    parameters: {\n                        groups: groupList\n                    },\n                    httpMethod: 'DELETE'\n                }).done(function successHandler() {\n                    saveDeferred.resolve();\n                }, function errorHandler(err) {\n                    saveDeferred.reject(err);\n                });\n            });\n            return deferred.promise;\n        };\n    })();\n\n    /**\n     * Join a group. In order to aggregate subsequent repeated requests, this function, when called synchronously,\n     * will continue to accumulate group ids until the next tick of the event loop, when the request will be\n     * issued. The same instance of Promise is returned each time.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.joinGroup\n     * @private\n     * @returns {Promise}\n     * @param {object} params\n     * @param {array} params.groupList\n     */\n    that.joinGroup = (function () {\n        var groups = {};\n        var deferred = Q.defer();//i think this needs to go in actualJoinGroup\n\n        return function actualJoinGroup(params) {\n            params = params || {};\n            params.groupList = params.groupList || [];\n\n            log.trace('been asked to join groups', params.groupList);\n\n            var needsToRun = (Object.keys(groups).length === 0);\n\n            if (!that.isConnected()) {\n                deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n                return deferred.promise;\n            }\n\n            params.groupList.forEach(function (id) {\n                if (typeof id === 'string') {\n                    log.trace('put group', id, 'in the join queue');\n                    groups[id] = true;\n                }\n            });\n\n            if (!needsToRun) {\n                return deferred.promise;\n            }\n\n            setTimeout(function requestJoinsForGroupQueue() {\n                // restart accumulation\n                var groupList = Object.keys(groups);\n                log.trace('list of groups to be requested', groupList);\n                //reset the groups object\n                groups = {};\n                var saveDeferred = deferred;\n                deferred = Q.defer();\n\n                if (groupList.length === 0) {\n                    log.trace('list of groups was empty so not sending queue');\n                    saveDeferred.resolve();\n                    return;\n                }\n\n                wsCall({\n                    path: '/v1/groups/',\n                    parameters: {\n                        groups: groupList\n                    },\n                    httpMethod: 'POST'\n                }).done(function successHandler() {\n                    saveDeferred.resolve();\n                }, function errorHandler(err) {\n                    saveDeferred.reject(err);\n                });\n            });\n            return deferred.promise;\n        };\n    })();\n\n    /**\n     * Publish a message to a group.\n     * @memberof! respoke.SignalingChannel\n     * @private\n     * @method respoke.SignalingChannel.publish\n     * @returns {Promise}\n     * @param {object} params\n     * @param {string} params.id\n     * @param {string} params.message\n     * @param {boolean} [params.push=false]\n     */\n    that.publish = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var message = respoke.TextMessage({\n            endpointId: params.id,\n            message: params.message,\n            push: !!params.push\n        });\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/channels/{id}/publish/',\n            urlParams: { id: params.id },\n            httpMethod: 'POST',\n            parameters: message\n        }).done(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return deferred.promise;\n    };\n\n    /**\n     * Register as an observer of presence for the specified endpoint ids. In order to aggregate subsequent repeated\n     * requests, this function, when called synchronously, will continue to accumulate endpoint ids until the next\n     * tick of the event loop, when the request will be issued. The same instance of Promise is returned each time.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.registerPresence\n     * @private\n     * @param {object} params\n     * @param {Array<string>} params.endpointList\n     * @returns {Promise}\n     */\n    that.registerPresence = (function () {\n        var endpoints = {};\n        var deferred = Q.defer();\n\n        return function (params) {\n            params = params || {};\n            params.endpointList = params.endpointList || [];\n            var toRun = (Object.keys(endpoints).length === 0);\n\n            if (!that.isConnected()) {\n                return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            }\n\n            params.endpointList.forEach(function (ep) {\n                if (typeof ep === 'string' && presenceRegistered[ep] !== true) {\n                    endpoints[ep] = true;\n                }\n            });\n\n            if (!toRun) {\n                return deferred.promise;\n            }\n\n            setTimeout(function () {\n                // restart accumulation\n                var endpointList = Object.keys(endpoints);\n                endpoints = {};\n                var saveDeferred = deferred;\n                deferred = Q.defer();\n\n                if (endpointList.length === 0) {\n                    saveDeferred.resolve();\n                    return;\n                }\n\n                wsCall({\n                    httpMethod: 'POST',\n                    path: '/v1/presenceobservers',\n                    parameters: {\n                        endpointList: endpointList\n                    }\n                }).done(function successHandler() {\n                    params.endpointList.forEach(function eachId(id) {\n                        presenceRegistered[id] = true;\n                    });\n                    saveDeferred.resolve();\n                }, function (err) {\n                    saveDeferred.reject(err);\n                });\n                // We could even add a tiny delay like 10ms if we want to get more conservative and\n                // catch asychronous calls to client.getEndpoint() and other methods which call\n                // this method.\n            });\n\n            return deferred.promise;\n        };\n    })();\n\n    /**\n     * Join a group.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getGroupMembers\n     * @private\n     * @returns {Promise<Array>}\n     * @param {object} params\n     * @param {string} params.id\n     */\n    that.getGroupMembers = function (params) {\n        var deferred = Q.defer();\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        if (!params.id) {\n            deferred.reject(new Error(\"Can't get group's endpoints without group ID.\"));\n            return deferred.promise;\n        }\n\n        return wsCall({\n            path: '/v1/channels/{id}/subscribers/',\n            urlParams: { id: params.id },\n            httpMethod: 'GET'\n        });\n    };\n\n    /**\n     * Send a chat message.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendMessage\n     * @private\n     * @param {object} params\n     * @param {respoke.SignalingMessage} params.message - The string text message to send.\n     * @param {respoke.Endpoint} params.recipient\n     * @param {string} [params.connectionId]\n     * @param {boolean} [params.push=false]\n     * @returns {Promise}\n     */\n    that.sendMessage = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var message = respoke.TextMessage({\n            endpointId: params.recipient.id,\n            ccSelf: params.ccSelf,\n            connectionId: params.connectionId,\n            message: params.message,\n            push: !!params.push\n        });\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/messages',\n            httpMethod: 'POST',\n            parameters: message\n        }).done(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return deferred.promise;\n    };\n\n    /**\n     * Send an ACK signal to acknowlege reception of a signal.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendACK\n     * @private\n     * @param {object} params\n     * @param {respoke.SignalingMessage} params.signal\n     * @return {Promise}\n     */\n    that.sendACK = function (params) {\n        var endpoint;\n        params = params || {};\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        if (!params.signal) {\n            return Q.reject(new Error(\"Can't send ACK, no signal was given.\"));\n        }\n\n        endpoint = client.getEndpoint({\n            id: params.signal.fromEndpoint,\n            skipPresence: true\n        });\n        if (!endpoint) {\n            return Q.reject(new Error(\"Can't send ACK, can't get endpoint.\"));\n        }\n\n        return that.sendSignal({\n            recipient: endpoint,\n            signalType: 'ack',\n            signalId: params.signal.signalId,\n            sessionId: params.signal.sessionId,\n            target: params.signal.target,\n            ackedSignalType: params.signal.signalType\n        });\n    };\n\n    /**\n     * Send a signaling message.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendSignal\n     * @private\n     * @param {object} params\n     * @param {respoke.Call} [params.call] - For getting the sessionId & connectionId. Not required for 'ack'.\n     * @return {Promise}\n     */\n    that.sendSignal = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var signal;\n        var to;\n        var toConnection;\n        var toType;\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        if (params.call) {\n            params.sessionId = params.call.id;\n            if (params.call.connectionId) { // the recipient's connectionId\n                params.connectionId = params.call.connectionId;\n            }\n        }\n\n        to = params.recipient.id;\n        toConnection = params.connectionId;\n        toType = params.toType || 'web';\n\n        try {\n            params.signalId = respoke.makeGUID();\n            // This will strip off non-signaling attributes.\n            signal = respoke.SignalingMessage(params);\n        } catch (e) {\n            deferred.reject(e);\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/signaling',\n            httpMethod: 'POST',\n            parameters: {\n                ccSelf: params.ccSelf,\n                signal: JSON.stringify(signal),\n                to: to,\n                toConnection: toConnection,\n                toType: toType\n            }\n        }).done(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Send an ICE candidate.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendCandidate\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @param {string} [params.connectionId]\n     * @param {Array<RTCIceCandidate>} params.iceCandidates - An array of ICE candidate.\n     * @return {Promise}\n     */\n    that.sendCandidate = function (params) {\n        params = params || {};\n        params.signalType = 'iceCandidates';\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        if (typeof params.finalCandidates !== 'undefined') {\n            log.debug('Sending final', params.iceCandidates.length, 'of', params.finalCandidates.length, 'ice candidates');\n        } else {\n            log.debug('Sending', params.iceCandidates.length, 'ice candidates');\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Send an SDP.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendSDP\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @param {string} [params.connectionId]\n     * @param {RTCSessionDescription} params.sessionDescription - An SDP to JSONify and send.\n     * @return {Promise}\n     */\n    that.sendSDP = function (params) {\n        params = params || {};\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        if (['offer', 'answer'].indexOf(params.signalType) === -1) {\n            return Q.reject(\"Not an SDP type signal.\");\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Send a call report to the cloud infrastructure.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendReport\n     * @private\n     * @param {object} params\n     * @todo TODO document the params.\n     * @return {Promise}\n     */\n    that.sendReport = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var message = {\n            debugData: params\n        };\n\n        if (!clientSettings.enableCallDebugReport) {\n            log.debug('not sending call debugs - disabled');\n            deferred.resolve();\n            return deferred.promise;\n        }\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/call-debugs',\n            httpMethod: 'POST',\n            parameters: message\n        }).done(function () {\n            deferred.resolve();\n        }, function (err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Send a message hanging up the WebRTC session.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendHangup\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @param {string} [params.connectionId]\n     * @param {string} params.reason - The reason the session is being hung up.\n     * @return {Promise}\n     */\n    that.sendHangup = function (params) {\n        params = params || {};\n        params.signalType = 'bye';\n        params.ccSelf = true;\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Send a message to all connection ids indicating we have negotiated a call with one connection.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendConnected\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @return {Promise}\n     */\n    that.sendConnected = function (params) {\n        params = params || {};\n        params.signalType = 'connected';\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Send a message to the remote party indicating a desire to renegotiate media.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendModify\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @param {string} params.action - The state of the modify request, one of: 'initiate', 'accept', 'reject'\n     * @return {Promise}\n     */\n    that.sendModify = function (params) {\n        params = params || {};\n        params.signalType = 'modify';\n\n        if (['initiate', 'accept', 'reject'].indexOf(params.action) === -1) {\n            return Q.reject(\"No valid action in modify signal.\");\n        }\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Uppercase the first letter of the word.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.firstUpper\n     * @private\n     */\n    function firstUpper(str) {\n        return str[0].toUpperCase() + str.slice(1);\n    }\n\n    /**\n     * Route different types of signaling messages via events.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routeSignal\n     * @private\n     * @param {respoke.SignalingMessage} message - A message to route\n     * @fires respoke.Call#offer\n     * @fires respoke.Call#connected\n     * @fires respoke.Call#answer\n     * @fires respoke.Call#iceCandidates\n     * @fires respoke.Call#hangup\n     * @fires respoke.DirectConnection#offer\n     * @fires respoke.DirectConnection#connected\n     * @fires respoke.DirectConnection#answer\n     * @fires respoke.DirectConnection#iceCandidates\n     * @fires respoke.DirectConnection#hangup\n     */\n    that.routeSignal = function (signal) {\n        var target = null;\n        var method = 'do';\n\n        if (signal.signalType !== 'iceCandidates' || respoke.ridiculous) { // Too many of these!\n            log.debug(signal.signalType, signal);\n        }\n\n        if (signal.target === undefined) {\n            throw new Error(\"target undefined\");\n        }\n\n        // Only create if this signal is an offer.\n        Q.fcall(function makePromise() {\n            var endpoint;\n            /*\n             * This will return calls regardless of whether they are associated\n             * with a direct connection or not, and it will create a call if no\n             * call is found and this signal is an offer. Direct connections get\n             * created in the next step.\n             *\n             * signal.toOriginal will be undefined except in the case that another connection\n             * with our same endpointId has just hung up on the call.\n             */\n            target = client.getCall({\n                id: signal.sessionId,\n                endpointId: signal.toOriginal || signal.fromEndpoint,\n                target: signal.target,\n                conferenceId: signal.conferenceId,\n                type: signal.fromType,\n                create: (signal.target !== 'directConnection' && signal.signalType === 'offer'),\n                callerId: signal.callerId\n            });\n            if (target) {\n                return target;\n            }\n\n            if (signal.target === 'directConnection') {\n                // return a promise\n                endpoint = client.getEndpoint({\n                    id: signal.fromEndpoint,\n                    skipPresence: true\n                });\n\n                if (endpoint.directConnection && endpoint.directConnection.call.id === signal.sessionId) {\n                    return endpoint.directConnection;\n                }\n\n                return endpoint.startDirectConnection({\n                    id: signal.sessionId,\n                    create: (signal.signalType === 'offer'),\n                    caller: (signal.signalType !== 'offer')\n                });\n            }\n        }).done(function successHandler(target) {\n            // target might be null, a Call, or a DirectConnection.\n            if (target) {\n                target = target.call || target;\n            }\n            if (!target || target.id !== signal.sessionId) {\n                // orphaned signal\n                log.warn(\"Couldn't associate signal with a call. This is usually OK.\", signal);\n                return;\n            }\n\n            method += firstUpper(signal.signalType);\n            routingMethods[method]({\n                call: target,\n                signal: signal\n            });\n        }, null);\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doOffer\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-offer\n     */\n    routingMethods.doOffer = function (params) {\n        params.call.connectionId = params.signal.fromConnection;\n        /**\n         * Send the `offer` signal into the Call.\n         * @event respoke.Call#signal-offer\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-offer', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doConnected\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-connected\n     */\n    routingMethods.doConnected = function (params) {\n        /**\n         * Send the `connected` signal into the Call.\n         * @event respoke.Call#signal-connected\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-connected', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.dModify\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-modify\n     */\n    routingMethods.doModify = function (params) {\n        /**\n         * Send the `modify` signal into the Call.\n         * @event respoke.Call#signal-modify\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-modify', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doAnswer\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-answer\n     */\n    routingMethods.doAnswer = function (params) {\n        params.call.connectionId = params.signal.fromConnection;\n        /**\n         * Send the `answer` signal into the Call.\n         * @event respoke.Call#signal-answer\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-answer', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doIceCandidates\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-icecandidates\n     */\n    routingMethods.doIceCandidates = function (params) {\n        /**\n         * Send the `icecandidates` signal into the Call.\n         * @event respoke.Call#signal-icecandidates\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-icecandidates', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doBye\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-hangup\n     */\n    routingMethods.doBye = function (params) {\n        /**\n         *  The caller may receive hangup from one or more parties after connectionId is set if the call is rejected\n         *  by a connection that didn't win the call. In this case, we have to ignore the signal since\n         *  we are already on a call.\n         *\n         *  The callee's connectionId is always set.\n         */\n        if (params.call.caller && params.call.connectionId &&\n                params.call.connectionId !== params.signal.fromConnection) {\n            return;\n        }\n        /**\n         * Send the `hangup` signal into the Call.\n         * @event respoke.Call#signal-hangup\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-hangup', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doUnknown\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     */\n    routingMethods.doUnknown = function (params) {\n        log.error(\"Don't know what to do with\", params.signal.target, \"msg of unknown type\", params.signal.signalType);\n    };\n\n    /**\n     * Add a handler to the connection for messages of different types.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.addHandler\n     * @private\n     * @param {object} params\n     * @param {string} params.type - The type of socket message, i. e., 'message', 'presence', 'join'\n     * @param {function} params.handler - A function to which to pass the message\n     * @todo TODO See if this is necessary anymore\n     */\n    that.addHandler = function (params) {\n        if (socket.socket && socket.socket.open) {\n            socket.on(params.type, params.handler);\n        } else {\n            handlerQueue[params.type].push(params.handler);\n        }\n    };\n\n    /**\n     * Socket handler for pub-sub messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onPubSub\n     * @param {object} message The Socket.io message.\n     * @private\n     * @fires respoke.Group#message\n     * @fires respoke.Client#message\n     */\n    var onPubSub = function onPubSub(message) {\n        var group;\n        var groupMessage = respoke.TextMessage({\n            rawMessage: message\n        });\n\n        group = client.getGroup({id: message.header.channel});\n        if (group) {\n            /**\n             * Indicate that a message has been received to a group.\n             * @event respoke.Group#message\n             * @type {respoke.Event}\n             * @property {respoke.TextMessage} message\n             * @property {string} name - the event name.\n             * @property {respoke.Group} target\n             */\n            group.fire('message', {\n                message: groupMessage\n            });\n        }\n        /**\n         * Indicate that a message has been received.\n         * @event respoke.Client#message\n         * @type {respoke.Event}\n         * @property {respoke.TextMessage} message\n         * @property {respoke.Group} [group] - If the message is to a group we already know about,\n         * this will be set. If null, the developer can use client.join({id: evt.message.header.channel}) to join\n         * the group. From that point forward, Group#message will fire when a message is received as well. If\n         * group is undefined instead of null, the message is not a group message at all.\n         * @property {string} name - the event name.\n         * @property {respoke.Client} target\n         */\n        client.fire('message', {\n            message: groupMessage,\n            group: group || null\n        });\n    };\n\n    /**\n     * Socket handler for join messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onJoin\n     * @param {object} message The Socket.io message.\n     * @private\n     */\n    var onJoin = function onJoin(message) {\n        var group;\n        var presenceMessage;\n        var endpoint;\n        var connection;\n\n        if (message.connectionId === client.connectionId) {\n            connection = client.getConnection({connectionId: message.connectionId, endpointId: message.endpointId});\n            group = client.getGroup({id: message.header.channel});\n            if (!group) {\n                group = respoke.Group({\n                    id: message.header.channel,\n                    instanceId: instanceId,\n                    signalingChannel: that\n                });\n                client.addGroup(group);\n            }\n            if (!group.isJoined()) {\n                group.addMember({connection: connection});\n                client.fire('join', {\n                    group: group\n                });\n            }\n        } else {\n\n            endpoint = client.getEndpoint({\n                skipPresence: true,\n                id: message.endpointId,\n                instanceId: instanceId,\n                name: message.endpointId\n            });\n\n            // Handle presence not associated with a channel\n            if (!connection) {\n                endpoint.setPresence({\n                    connectionId: message.connectionId\n                });\n                connection = client.getConnection({\n                    connectionId: message.connectionId,\n                    endpointId: message.endpointId\n                });\n            }\n\n            group = client.getGroup({id: message.header.channel});\n\n            if (group && connection) {\n                group.addMember({connection: connection});\n            } else {\n                log.error(\"Can't add endpoint to group:\", message, group, endpoint, connection);\n            }\n        }\n    };\n\n    /**\n     * Socket handler for leave messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onLeave\n     * @param {object} message The Socket.io message.\n     * @private\n     */\n    var onLeave = function onLeave(message) {\n        var group;\n        var presenceMessage;\n        var endpoint;\n        if (message.connectionId === client.connectionId) {\n            group = client.getGroup({id: message.header.channel});\n            client.fire('leave', {\n                group: group\n            });\n        } else {\n\n            endpoint = client.getEndpoint({\n                skipPresence: true,\n                id: message.endpointId\n            });\n\n            endpoint.connections.every(function eachConnection(conn, index) {\n                if (conn.id === message.connectionId) {\n                    endpoint.connections.splice(index, 1);\n                    return false;\n                }\n                return true;\n            });\n\n            group = client.getGroup({id: message.header.channel});\n            if (group) {\n                group.removeMember({connectionId: message.connectionId});\n            }\n        }\n    };\n\n    /**\n     * Socket handler for presence messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onMessage\n     * @param {object} message The Socket.io message.\n     * @private\n     * @fires respoke.Endpoint#message\n     * @fires respoke.Client#message\n     */\n    var onMessage = function onMessage(message) {\n        var endpoint;\n        message = respoke.TextMessage({rawMessage: message});\n        if (message.originalRecipient || message.endpointId) {\n            endpoint = client.getEndpoint({\n                id: message.originalRecipient || message.endpointId,\n                skipCreate: true\n            });\n        }\n        if (endpoint) {\n            /**\n             * Indicate that a message has been received.\n             * @event respoke.Endpoint#message\n             * @type {respoke.Event}\n             * @property {respoke.TextMessage} message\n             * @property {string} name - the event name.\n             * @property {respoke.Endpoint} target\n             */\n            endpoint.fire('message', {\n                message: message\n            });\n        }\n        /**\n         * Indicate that a message has been received.\n         * @event respoke.Client#message\n         * @type {respoke.Event}\n         * @property {respoke.TextMessage} message\n         * @property {respoke.Endpoint} [endpoint] - If the message is from an endpoint we already know about,\n         * this will be set. If null, the developer can use client.getEndpoint({id: evt.message.endpointId}) to get\n         * the Endpoint. From that point forward, Endpoint#message will fire when a message is received as well.\n         * @property {string} name - the event name.\n         * @property {respoke.Client} target\n         */\n        client.fire('message', {\n            endpoint: endpoint || null,\n            message: message\n        });\n    };\n\n    /**\n     * Create a socket handler for the onConnect event with all the right things in scope.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.generateConnectHandler\n     * @param {respoke.Client.successHandler} [onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [onError] - Error handler for this invocation of this\n     * method only.\n     * @private\n     */\n    var generateConnectHandler = function generateConnectHandler(onSuccess, onError) {\n        onSuccess = onSuccess || function () {};\n        onError = onError || function () {};\n        return function onConnect() {\n            Object.keys(handlerQueue).forEach(function addEachHandlerType(category) {\n                if (!handlerQueue[category]) {\n                    return;\n                }\n\n                handlerQueue[category].forEach(function addEachHandler(handler) {\n                    socket.on(category, handler);\n                });\n                handlerQueue[category] = [];\n            });\n\n            wsCall({\n                path: '/v1/connections',\n                httpMethod: 'POST',\n                parameters: {\n                    capabilities: {\n                        iceFinalCandidates: true\n                    }\n                }\n            }).done(function successHandler(res) {\n                log.debug('connections result', res);\n                client.endpointId = res.endpointId;\n                client.connectionId = res.id;\n                onSuccess();\n            }, onError);\n        };\n    };\n\n    /**\n     * Socket handler for presence messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onPresence\n     * @param {object} message The Socket.io message.\n     * @private\n     */\n    function onPresence(message) {\n        var endpoint;\n        var groups;\n\n        if (message.header.from === client.endpointId) {\n            // Skip ourselves\n            return;\n        }\n        log.debug('socket.on presence', message);\n\n        endpoint = client.getEndpoint({\n            skipPresence: true,\n            id: message.header.from,\n            instanceId: instanceId,\n            name: message.header.from,\n            connection: message.header.fromConnection\n        });\n\n        endpoint.setPresence({\n            connectionId: message.header.fromConnection,\n            presence: message.type\n        });\n\n        if (endpoint.presence === 'unavailable') {\n            groups = client.getGroups();\n            if (groups) {\n                groups.forEach(function eachGroup(group) {\n                    group.removeMember({connectionId: message.header.fromConnection});\n                });\n            }\n        }\n    }\n\n    /**\n     * On reconnect, start with a reconnect interval of 2000ms. Every time reconnect fails, the interval\n     * is doubled up to a maximum of 5 minutes. From then on, it will attempt to reconnect every 5 minutes forever.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.reconnect\n     * @private\n     */\n    function reconnect() {\n        if (clientSettings.reconnect !== true) {\n            return;\n        }\n        // Reconnects within reconnects is ungood\n        clientSettings.reconnect = false;\n\n        appToken = null;\n        token = null;\n\n        if (socket) {\n            socket.removeAllListeners();\n            socket.disconnect();\n            socket = null;\n        }\n\n        reconnectTimeout = (reconnectTimeout === null) ? 2500 : 2 * reconnectTimeout;\n\n        if (reconnectTimeout > (maxReconnectTimeout)) {\n            reconnectTimeout = maxReconnectTimeout;\n        }\n\n        setTimeout(function doReconnect() {\n            log.debug('Reconnecting...');\n\n            actuallyConnect().then(function successHandler() {\n                reconnectTimeout = null;\n                log.debug('socket reconnected');\n                return Q.all(client.getGroups().map(function iterGroups(group) {\n                    client.join({\n                        id: group.id,\n                        onMessage: clientSettings.onMessage,\n                        onJoin: clientSettings.onJoin,\n                        onLeave: clientSettings.onLeave\n                    }).catch(function (err) {\n                        log.error(\"Couldn't rejoin previous group.\", { id: group.id, message: err.message, stack: err.stack });\n                        throw err;\n                    });\n                }));\n            }).then(function successHandler() {\n                log.debug('groups rejoined after reconnect');\n                /**\n                 * Indicate that a reconnect has succeeded.\n                 * @event respoke.Client#reconnect\n                 * @property {string} name - the event name.\n                 * @property {respoke.Client}\n                 */\n                client.fire('reconnect');\n            }).fin(function finHandler() {\n                // re-enable reconnects\n                clientSettings.reconnect = true;\n            }).done(null, function errHandler(err) {\n                log.error(\"Couldn't reconnect. Retrying...\", { message: err.message, stack: err.stack });\n                reconnect();\n            });\n        }, reconnectTimeout);\n    }\n\n    /**\n     * Authenticate to the cloud and call the handler on state change.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.authenticate\n     * @private\n     * @param {object} params\n     * @return {Promise}\n     */\n    that.authenticate = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var pieces = [];\n        var protocol = null;\n        var host = null;\n        var port = null;\n\n        if (!appToken) {\n            deferred.reject(new Error(\"Can't open a websocket without an app token.\"));\n        }\n\n        pieces = clientSettings.baseURL.split(/:\\/\\//);\n        protocol = pieces[0];\n        pieces = pieces[1].split(/:/);\n        host = pieces[0];\n        port = pieces[1];\n\n        var connectParams = {\n            'connect timeout': clientSettings.connectTimeoutMillis,\n            'force new connection': true, // Don't try to reuse old connection.\n            'sync disconnect on unload': true, // have Socket.io call disconnect() on the browser unload event.\n            reconnect: false,\n            host: host,\n            port: port || '443',\n            protocol: protocol,\n            secure: (protocol === 'https'),\n            query: '__sails_io_sdk_version=0.10.0&app-token=' + appToken + '&Respoke-SDK=' + sdkHeaderValue\n        };\n\n        if (that.isConnected() || isConnecting()) {\n            return;\n        }\n        socket = io.connect(clientSettings.baseURL, connectParams);\n\n        socket.on('connect', generateConnectHandler(function onSuccess() {\n            deferred.resolve();\n        }, function onError(err) {\n            deferred.reject(err);\n        }));\n\n        socket.on('join', onJoin);\n        socket.on('leave', onLeave);\n        socket.on('pubsub', onPubSub);\n        socket.on('message', onMessage);\n        socket.on('presence', onPresence);\n\n        // connection timeout\n        socket.on('connect_failed', function connectFailedHandler(res) {\n            deferred.reject(new Error(\"WebSocket connection failed.\"));\n            log.error('Socket.io connect timeout.', res || \"\");\n            reconnect();\n        });\n\n        // handshake error, 403, socket disconnects on FireFox\n        socket.on('error', function errorHandler(res) {\n            log.error('Socket.io error.', res || \"\");\n            reconnect();\n        });\n\n        that.addHandler({\n            type: 'signal',\n            handler: function signalHandler(message) {\n                var knownSignals = ['offer', 'answer', 'connected', 'modify', 'iceCandidates', 'bye'];\n                var signal = respoke.SignalingMessage({\n                    rawMessage: message\n                });\n\n                if (signal.signalType === 'ack') {\n                    return;\n                }\n\n                if (!signal.target || !signal.signalType || knownSignals.indexOf(signal.signalType) === -1) {\n                    log.error(\"Got malformed signal.\", signal);\n                    throw new Error(\"Can't route signal without target or type.\");\n                }\n\n                that.routeSignal(signal);\n            }\n        });\n\n        socket.on('disconnect', function onDisconnect() {\n            log.debug('Socket.io disconnect.');\n            pendingRequests.reset(function (pendingRequest) {\n                log.debug('Failing pending requests');\n                pendingRequest.reject(new Error(\"WebSocket disconnected\"));\n            });\n\n            /**\n             * Indicate that this client has been disconnected from the Respoke service.\n             * @event respoke.Client#disconnect\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n            client.fire('disconnect');\n\n            reconnect();\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Get ephemeral TURN credentials.  This method is called whenever a call is either\n     * sent or received, prior to creating a PeerConnection\n     *\n     * @memberof! respoke.SignalingChannel\n     * @private\n     * @method respoke.SignalingChannel.getTurnCredentials\n     * @return {Promise<Array>}\n     */\n    that.getTurnCredentials = function () {\n        var deferred = Q.defer();\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            httpMethod: 'GET',\n            path: '/v1/turn'\n        }).done(function successHandler(creds) {\n            var result = [];\n\n            if (!creds || !creds.uris) {\n                deferred.reject(new Error(\"Turn credentials empty.\"));\n                return;\n            }\n\n            creds.uris.forEach(function saveTurnUri(uri) {\n                var cred = null;\n\n                if (!uri) {\n                    return;\n                }\n\n                cred = createIceServer(uri, creds.username, creds.password);\n                result.push(cred);\n            });\n\n            if (result.length === 0) {\n                deferred.reject(new Error(\"Got no TURN credentials.\"));\n            }\n\n            log.debug('TURN creds', result);\n            deferred.resolve(result);\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Construct a websocket API call and return the formatted response and errors. The 'success'\n     * attribute indicates the success or failure of the API call. The 'response' attribute\n     * is an associative array constructed by json.decode. The 'error' attriute is a message.\n     * If the API call is successful but the server returns invalid JSON, error will be\n     * \"Invalid JSON.\" and response will be the unchanged content of the response body.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.wsCall\n     * @private\n     * @param {object} params\n     * @param {string} params.httpMethod\n     * @param {string} params.path\n     * @param {string} params.objectId\n     * @param {object} params.parameters - These are request body parameters that get converted to JSON before\n     * being sent over the websocket. Undefined parameters and functions are removed by JSON.stringify.\n     * @return {Promise<object>}\n     */\n    function wsCall(params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var start = now();\n        // Too many of these!\n        var logRequest = (params.path.indexOf('messages') === -1 && params.path.indexOf('signaling') === -1) ||\n            respoke.ridiculous;\n        var request;\n        var bodyLength = 0;\n        if (params.parameters) {\n            bodyLength = encodeURI(JSON.stringify(params.parameters)).split(/%..|./).length - 1;\n        }\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        if (!params) {\n            deferred.reject(new Error('No params.'));\n            return deferred.promise;\n        }\n\n        if (!params.path) {\n            deferred.reject(new Error('No request path.'));\n            return deferred.promise;\n        }\n\n        if (bodyLength > bodySizeLimit) {\n            deferred.reject(new Error('Request body exceeds maximum size of ' + bodySizeLimit + ' bytes'));\n            return deferred.promise;\n        }\n\n        params.httpMethod = (params.httpMethod || 'get').toLowerCase();\n\n        if (params.urlParams) {\n            params.path = template.parse(params.path).expand(params.urlParams);\n        }\n\n        if (logRequest) {\n            log.debug('socket request', {\n                method: params.httpMethod,\n                path: params.path,\n                parameters: params.parameters\n            });\n        }\n\n        request = {\n            method: params.httpMethod,\n            path: params.path,\n            parameters: params.parameters,\n            tries: 0,\n            durationMillis: 0\n        };\n\n        request.id = pendingRequests.add(deferred);\n\n        function handleResponse(response) {\n            var thisHandler = this; // jshint ignore:line\n            /*\n             * Response:\n             *  {\n             *      body: {},\n             *      headers: {},\n             *      statusCode: 200\n             *  }\n             */\n            try {\n                response.body = JSON.parse(response.body);\n            } catch (e) {\n                if (typeof response.body !== 'object') {\n                    deferred.reject(new Error(\"Server response could not be parsed!\" + response.body));\n                    return;\n                }\n            }\n\n            if (response.statusCode === 429) {\n                if (request.tries < 3 && deferred.promise.isPending()) {\n                    setTimeout(function () {\n                        start = now();\n                        sendWebsocketRequest(request, handleResponse);\n                    }, 1000); // one day this will be response.interval or something\n                } else {\n                    request.durationMillis = now() - start;\n                    pendingRequests.remove(request.id);\n                    failWebsocketRequest(request, response,\n                            \"Too many retries after rate limit exceeded.\", deferred);\n                }\n                return;\n            }\n\n            request.durationMillis = now() - start;\n            pendingRequests.remove(request.id);\n\n            if (logRequest) {\n                log.debug('socket response', {\n                    method: request.method,\n                    path: request.path,\n                    durationMillis: request.durationMillis,\n                    response: response\n                });\n            }\n\n            if (isBillingSuspensionUnauthorizedResponse(response)) {\n                failWebsocketRequest(request, response, billingSuspensionErrorMessage, deferred);\n                return;\n            }\n\n            if (isSuspensionUnauthorizedResponse(response)) {\n                failWebsocketRequest(request, response, suspensionErrorMessage, deferred);\n                return;\n            }\n\n            if ([200, 204, 205, 302, 401, 403, 404, 418].indexOf(thisHandler.status) === -1) {\n                failWebsocketRequest(request, response,\n                        response.body.error || errors[thisHandler.status] || \"Unknown error\", deferred);\n                return;\n            }\n\n            deferred.resolve(response.body);\n        }\n\n        start = now();\n        sendWebsocketRequest(request, handleResponse);\n        return deferred.promise;\n    }\n\n    function failWebsocketRequest(request, response, error, deferred) {\n        if (response && response.body && response.body.error) {\n            deferred.reject(buildResponseError(response, error + ' (' + request.method + ' ' + request.path + ')'));\n        } else {\n            deferred.resolve(response.body);\n        }\n    }\n\n    function sendWebsocketRequest(request, handleResponse) {\n        request.tries += 1;\n        socket.emit(request.method, JSON.stringify({\n            url: request.path,\n            data: request.parameters,\n            headers: {\n                'App-Token': appToken,\n                'Respoke-SDK': sdkHeaderValue }\n        }), handleResponse);\n    }\n\n    /**\n     * Construct an API call and return the formatted response and errors. The 'success'\n     * attribute indicates the success or failure of the API call. The 'response' attribute\n     * is an associative array constructed by json.decode. The 'error' attribute is a message.\n     * If the API call is successful but the server returns invalid JSON, error will be\n     * \"Invalid JSON.\" and response will be the unchanged content of the response body.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.call\n     * @private\n     * @param {object} params\n     * @param {string} params.httpMethod\n     * @param {string} params.objectId\n     * @param {string} params.path\n     * @param {object} params.parameters\n     * @returns {Promise}\n     */\n    function call(params) {\n        /* Params go in the URI for GET, DELETE, same format for\n         * POST and PUT, but they must be sent separately after the\n         * request is opened. */\n        var deferred = Q.defer();\n        var paramString = null;\n        var uri = null;\n        var response = {\n            body: null,\n            statusCode: null\n        };\n        var start = now();\n\n        uri = clientSettings.baseURL + params.path;\n\n        if (!params) {\n            deferred.reject(new Error('No params.'));\n            return;\n        }\n\n        if (!params.httpMethod) {\n            deferred.reject(new Error('No HTTP method.'));\n            return;\n        }\n\n        if (!params.path) {\n            deferred.reject(new Error('No request path.'));\n            return;\n        }\n\n        if (params.urlParams) {\n            uri = template.parse(uri).expand(params.urlParams);\n        }\n\n        if (['GET', 'DELETE'].indexOf(params.httpMethod) > -1) {\n            uri += makeParamString(params.parameters);\n        }\n\n        xhr.open(params.httpMethod, uri);\n        xhr.setRequestHeader('Respoke-SDK', sdkHeaderValue);\n        if (appToken) {\n            xhr.setRequestHeader(\"App-Token\", appToken);\n        }\n        if (['POST', 'PUT'].indexOf(params.httpMethod) > -1) {\n            paramString = JSON.stringify(params.parameters);\n            if (paramString.length > bodySizeLimit) {\n                deferred.reject(new Error('Request body exceeds maximum size of ' + bodySizeLimit + ' bytes'));\n                return;\n            }\n            xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n        } else if (['GET', 'DELETE'].indexOf(params.httpMethod) === -1) {\n            deferred.reject(new Error('Illegal HTTP request method ' + params.httpMethod));\n            return;\n        }\n        log.debug('request', {\n            method: params.httpMethod,\n            uri: uri,\n            params: paramString\n        });\n\n        try {\n            xhr.send(paramString);\n        } catch (err) {\n            deferred.reject(err);\n            return;\n        }\n\n        xhr.onreadystatechange = function () {\n            var durationMillis = now() - start;\n            var limit;\n            var unit;\n\n            if (this.readyState !== 4) {\n                return;\n            }\n\n            if (this.status === 0) {\n                deferred.reject(new Error(\"Status is 0: Incomplete request, SSL error, or CORS error.\"));\n                return;\n            }\n\n            response.statusCode = this.status;\n            response.headers = getAllResponseHeaders(this);\n            response.uri = uri;\n            response.params = params.parameters;\n            response.error = errors[this.status];\n\n            if (this.response) {\n                try {\n                    response.body = JSON.parse(this.response);\n                } catch (e) {\n                    response.body = this.response;\n                    response.error = \"Invalid JSON.\";\n                }\n            }\n\n            log.debug('response', {\n                method: params.httpMethod,\n                durationMillis: durationMillis,\n                response: response\n            });\n\n            if ([200, 204, 205, 302, 401, 403, 404, 418].indexOf(this.status) > -1) {\n                deferred.resolve(response);\n            } else if (this.status === 429) {\n                unit = getResponseHeader(this, 'RateLimit-Time-Units');\n                limit = getResponseHeader(this, 'RateLimit-Limit');\n                deferred.reject(buildResponseError(response, \"Rate limit of \" + limit + \"/\" + unit +\n                    \" exceeded. Try again in 1 \" + unit + \".\"));\n            } else {\n                deferred.reject(buildResponseError(response, 'unexpected response code ' + this.status));\n            }\n        };\n\n        return deferred.promise;\n    }\n\n    function isSuspensionUnauthorizedResponse(response) {\n        return (response.statusCode === 401) && response.body && response.body.details &&\n            (typeof response.body.details.message === 'string') &&\n            (response.body.details.message.indexOf('suspended') > -1);\n    }\n\n    function isBillingSuspensionUnauthorizedResponse(response) {\n        return isSuspensionUnauthorizedResponse(response) &&\n            (typeof response.body.details.reason === 'string') &&\n            (response.body.details.reason.indexOf('billing suspension') > -1);\n    }\n\n    /**\n     * Turn key/value and key/list pairs into an HTTP URL parameter string.\n     * var1=value1&var2=value2,value3,value4\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.makeParamString\n     * @private\n     * @param {object} params - Arbitrary collection of strings and arrays to serialize.\n     * @returns {string}\n     */\n    function makeParamString(params) {\n        var strings = [];\n        if (!params) {\n            return '';\n        }\n\n        Object.keys(params).forEach(function formatParam(name) {\n            var value = params[name];\n            /* Skip objects -- We won't know how to name these. */\n            if (value instanceof Array) {\n                strings.push([name, value.join(',')].join('='));\n            } else if (typeof value !== 'object' && typeof value !== 'function') {\n                strings.push([name, value].join('='));\n            }\n        });\n\n        if (strings.length > 0) {\n            return '?' + strings.join('&');\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * Tries to retrieve a single header value from an XHR response. If the header is disallowed,\n     * or does not exist, will return null. Otherwise returns the value of the header.\n     *\n     * The CORS spec does not define what the browser should do in the case of a request for a\n     * disallowed header, but at least Chrome throws an exception.\n     *\n     * @param {object} xhrResponse The response of an XMLHttpRequest\n     * @param {string} header The name of the header to retrieve the value for\n     * @returns {string|null} The value(s) of the header, or null if disallowed or unavailable.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getResponseHeader\n     * @private\n     */\n    function getResponseHeader(xhrResponse, header) {\n        try {\n            return xhrResponse.getResponseHeader(header);\n        } catch (e) {\n            return null;\n        }\n    }\n\n    /**\n     * Retrieves all headers from an XHR response as key/val pairs\n     *\n     * @param {object} xhrResponse The response of an XMLHttpRequest\n     * @returns {*} the key/val pairs of the response headers\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getAllResponseHeaders\n     * @private\n     */\n    function getAllResponseHeaders(xhrResponse) {\n        var result = {};\n        var headers;\n        var pairs;\n\n        headers = xhrResponse.getAllResponseHeaders();\n        if (!headers) {\n            return result;\n        }\n\n        // 1 header per line (cr+lf)\n        pairs = headers.split('\\u000d\\u000a');\n        pairs.forEach(function (pair) {\n            var key;\n            var val;\n\n            // key separated from value by ': '\n            // value may contain ': ', so using indexOf instead of split\n            var index = pair.indexOf('\\u003a\\u0020');\n            if (index > 0) {\n                key = pair.substring(0, index);\n                val = pair.substring(index + 2);\n                result[key] = val;\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     * Creates an Error with the supplied `message` and, if available, the `Request-Id` header\n     * from the supplied `response`.\n     *\n     * @param {object} res\n     * @param {object} [res.headers]\n     * @param {string} [res.headers.Request-Id] The requestId to append to the Error message\n     * @param {string} message The message the Error should be constructed with\n     * @returns {Error} the constructed Error object\n     * @memberof respoke.SignalingChannel\n     * @method respoke.SignalingChannel.buildResponseError\n     * @api private\n     */\n    function buildResponseError(res, message) {\n        var requestId = res && res.headers && res.headers['Request-Id'];\n        if (requestId) {\n            message += ' [Request-Id: ' + requestId + ']';\n        }\n\n        return new Error(message);\n    }\n\n    return that;\n}; // End respoke.SignalingChannel\n/**\n * Handle an error that resulted from a method call.\n * @callback respoke.SignalingChannel.errorHandler\n * @params {Error} err\n */\n/**\n * Handle sending successfully.\n * @callback respoke.SignalingChannel.sendHandler\n */\n/**\n * Receive a group.\n * @callback respoke.SignalingChannel.groupHandler\n * @param {respoke.Group}\n */\n/**\n * Receive a list of groups.\n * @callback respoke.SignalingChannel.groupListHandler\n * @param {Array}\n */\n/**\n * Receive a list of TURN credentials.\n * @callback respoke.SignalingChannel.turnSuccessHandler\n * @param {Array}\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/signalingChannel.js\n ** module id = 13\n ** module chunks = 0\n **/","/*! Socket.IO.js build:0.9.17, development. Copyright(c) 2011 LearnBoost <dev@learnboost.com> MIT Licensed */\n\nvar io = ('undefined' === typeof module ? {} : module.exports);\n(function() {\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, global) {\n\n  /**\n   * IO namespace.\n   *\n   * @namespace\n   */\n\n  var io = exports;\n\n  /**\n   * Socket.IO version\n   *\n   * @api public\n   */\n\n  io.version = '0.9.17';\n\n  /**\n   * Protocol implemented.\n   *\n   * @api public\n   */\n\n  io.protocol = 1;\n\n  /**\n   * Available transports, these will be populated with the available transports\n   *\n   * @api public\n   */\n\n  io.transports = [];\n\n  /**\n   * Keep track of jsonp callbacks.\n   *\n   * @api private\n   */\n\n  io.j = [];\n\n  /**\n   * Keep track of our io.Sockets\n   *\n   * @api private\n   */\n  io.sockets = {};\n\n\n  /**\n   * Manages connections to hosts.\n   *\n   * @param {String} uri\n   * @Param {Boolean} force creation of new socket (defaults to false)\n   * @api public\n   */\n\n  io.connect = function (host, details) {\n    var uri = io.util.parseUri(host)\n      , uuri\n      , socket;\n\n    if (global && global.location) {\n      uri.protocol = uri.protocol || global.location.protocol.slice(0, -1);\n      uri.host = uri.host || (global.document\n        ? global.document.domain : global.location.hostname);\n      uri.port = uri.port || global.location.port;\n    }\n\n    uuri = io.util.uniqueUri(uri);\n\n    var options = {\n        host: uri.host\n      , secure: 'https' == uri.protocol\n      , port: uri.port || ('https' == uri.protocol ? 443 : 80)\n      , query: uri.query || ''\n    };\n\n    io.util.merge(options, details);\n\n    if (options['force new connection'] || !io.sockets[uuri]) {\n      socket = new io.Socket(options);\n    }\n\n    if (!options['force new connection'] && socket) {\n      io.sockets[uuri] = socket;\n    }\n\n    socket = socket || io.sockets[uuri];\n\n    // if path is different from '' or /\n    return socket.of(uri.path.length > 1 ? uri.path : '');\n  };\n\n})('object' === typeof module ? module.exports : (this.io = {}), this);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, global) {\n\n  /**\n   * Utilities namespace.\n   *\n   * @namespace\n   */\n\n  var util = exports.util = {};\n\n  /**\n   * Parses an URI\n   *\n   * @author Steven Levithan <stevenlevithan.com> (MIT license)\n   * @api public\n   */\n\n  var re = /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\n  var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password',\n               'host', 'port', 'relative', 'path', 'directory', 'file', 'query',\n               'anchor'];\n\n  util.parseUri = function (str) {\n    var m = re.exec(str || '')\n      , uri = {}\n      , i = 14;\n\n    while (i--) {\n      uri[parts[i]] = m[i] || '';\n    }\n\n    return uri;\n  };\n\n  /**\n   * Produces a unique url that identifies a Socket.IO connection.\n   *\n   * @param {Object} uri\n   * @api public\n   */\n\n  util.uniqueUri = function (uri) {\n    var protocol = uri.protocol\n      , host = uri.host\n      , port = uri.port;\n\n    if ('document' in global) {\n      host = host || document.domain;\n      port = port || (protocol == 'https'\n        && document.location.protocol !== 'https:' ? 443 : document.location.port);\n    } else {\n      host = host || 'localhost';\n\n      if (!port && protocol == 'https') {\n        port = 443;\n      }\n    }\n\n    return (protocol || 'http') + '://' + host + ':' + (port || 80);\n  };\n\n  /**\n   * Mergest 2 query strings in to once unique query string\n   *\n   * @param {String} base\n   * @param {String} addition\n   * @api public\n   */\n\n  util.query = function (base, addition) {\n    var query = util.chunkQuery(base || '')\n      , components = [];\n\n    util.merge(query, util.chunkQuery(addition || ''));\n    for (var part in query) {\n      if (query.hasOwnProperty(part)) {\n        components.push(part + '=' + query[part]);\n      }\n    }\n\n    return components.length ? '?' + components.join('&') : '';\n  };\n\n  /**\n   * Transforms a querystring in to an object\n   *\n   * @param {String} qs\n   * @api public\n   */\n\n  util.chunkQuery = function (qs) {\n    var query = {}\n      , params = qs.split('&')\n      , i = 0\n      , l = params.length\n      , kv;\n\n    for (; i < l; ++i) {\n      kv = params[i].split('=');\n      if (kv[0]) {\n        query[kv[0]] = kv[1];\n      }\n    }\n\n    return query;\n  };\n\n  /**\n   * Executes the given function when the page is loaded.\n   *\n   *     io.util.load(function () { console.log('page loaded'); });\n   *\n   * @param {Function} fn\n   * @api public\n   */\n\n  var pageLoaded = false;\n\n  util.load = function (fn) {\n    if ('document' in global && document.readyState === 'complete' || pageLoaded) {\n      return fn();\n    }\n\n    util.on(global, 'load', fn, false);\n  };\n\n  /**\n   * Adds an event.\n   *\n   * @api private\n   */\n\n  util.on = function (element, event, fn, capture) {\n    if (element.attachEvent) {\n      element.attachEvent('on' + event, fn);\n    } else if (element.addEventListener) {\n      element.addEventListener(event, fn, capture);\n    }\n  };\n\n  /**\n   * Generates the correct `XMLHttpRequest` for regular and cross domain requests.\n   *\n   * @param {Boolean} [xdomain] Create a request that can be used cross domain.\n   * @returns {XMLHttpRequest|false} If we can create a XMLHttpRequest.\n   * @api private\n   */\n\n  util.request = function (xdomain) {\n\n    if (xdomain && 'undefined' != typeof XDomainRequest && !util.ua.hasCORS) {\n      return new XDomainRequest();\n    }\n\n    if ('undefined' != typeof XMLHttpRequest && (!xdomain || util.ua.hasCORS)) {\n      return new XMLHttpRequest();\n    }\n\n    if (!xdomain) {\n      try {\n        return new window[(['Active'].concat('Object').join('X'))]('Microsoft.XMLHTTP');\n      } catch(e) { }\n    }\n\n    return null;\n  };\n\n  /**\n   * XHR based transport constructor.\n   *\n   * @constructor\n   * @api public\n   */\n\n  /**\n   * Change the internal pageLoaded value.\n   */\n\n  if ('undefined' != typeof window) {\n    util.load(function () {\n      pageLoaded = true;\n    });\n  }\n\n  /**\n   * Defers a function to ensure a spinner is not displayed by the browser\n   *\n   * @param {Function} fn\n   * @api public\n   */\n\n  util.defer = function (fn) {\n    if (!util.ua.webkit || 'undefined' != typeof importScripts) {\n      return fn();\n    }\n\n    util.load(function () {\n      setTimeout(fn, 100);\n    });\n  };\n\n  /**\n   * Merges two objects.\n   *\n   * @api public\n   */\n\n  util.merge = function merge (target, additional, deep, lastseen) {\n    var seen = lastseen || []\n      , depth = typeof deep == 'undefined' ? 2 : deep\n      , prop;\n\n    for (prop in additional) {\n      if (additional.hasOwnProperty(prop) && util.indexOf(seen, prop) < 0) {\n        if (typeof target[prop] !== 'object' || !depth) {\n          target[prop] = additional[prop];\n          seen.push(additional[prop]);\n        } else {\n          util.merge(target[prop], additional[prop], depth - 1, seen);\n        }\n      }\n    }\n\n    return target;\n  };\n\n  /**\n   * Merges prototypes from objects\n   *\n   * @api public\n   */\n\n  util.mixin = function (ctor, ctor2) {\n    util.merge(ctor.prototype, ctor2.prototype);\n  };\n\n  /**\n   * Shortcut for prototypical and static inheritance.\n   *\n   * @api private\n   */\n\n  util.inherit = function (ctor, ctor2) {\n    function f() {};\n    f.prototype = ctor2.prototype;\n    ctor.prototype = new f;\n  };\n\n  /**\n   * Checks if the given object is an Array.\n   *\n   *     io.util.isArray([]); // true\n   *     io.util.isArray({}); // false\n   *\n   * @param Object obj\n   * @api public\n   */\n\n  util.isArray = Array.isArray || function (obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  };\n\n  /**\n   * Intersects values of two arrays into a third\n   *\n   * @api public\n   */\n\n  util.intersect = function (arr, arr2) {\n    var ret = []\n      , longest = arr.length > arr2.length ? arr : arr2\n      , shortest = arr.length > arr2.length ? arr2 : arr;\n\n    for (var i = 0, l = shortest.length; i < l; i++) {\n      if (~util.indexOf(longest, shortest[i]))\n        ret.push(shortest[i]);\n    }\n\n    return ret;\n  };\n\n  /**\n   * Array indexOf compatibility.\n   *\n   * @see bit.ly/a5Dxa2\n   * @api public\n   */\n\n  util.indexOf = function (arr, o, i) {\n\n    for (var j = arr.length, i = i < 0 ? i + j < 0 ? 0 : i + j : i || 0;\n         i < j && arr[i] !== o; i++) {}\n\n    return j <= i ? -1 : i;\n  };\n\n  /**\n   * Converts enumerables to array.\n   *\n   * @api public\n   */\n\n  util.toArray = function (enu) {\n    var arr = [];\n\n    for (var i = 0, l = enu.length; i < l; i++)\n      arr.push(enu[i]);\n\n    return arr;\n  };\n\n  /**\n   * UA / engines detection namespace.\n   *\n   * @namespace\n   */\n\n  util.ua = {};\n\n  /**\n   * Whether the UA supports CORS for XHR.\n   *\n   * @api public\n   */\n\n  util.ua.hasCORS = 'undefined' != typeof XMLHttpRequest && (function () {\n    try {\n      var a = new XMLHttpRequest();\n    } catch (e) {\n      return false;\n    }\n\n    return a.withCredentials != undefined;\n  })();\n\n  /**\n   * Detect webkit.\n   *\n   * @api public\n   */\n\n  util.ua.webkit = 'undefined' != typeof navigator\n    && /webkit/i.test(navigator.userAgent);\n\n   /**\n   * Detect iPad/iPhone/iPod.\n   *\n   * @api public\n   */\n\n  util.ua.iDevice = 'undefined' != typeof navigator\n      && /iPad|iPhone|iPod/i.test(navigator.userAgent);\n\n})('undefined' != typeof io ? io : module.exports, this);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.EventEmitter = EventEmitter;\n\n  /**\n   * Event emitter constructor.\n   *\n   * @api public.\n   */\n\n  function EventEmitter () {};\n\n  /**\n   * Adds a listener\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.on = function (name, fn) {\n    if (!this.$events) {\n      this.$events = {};\n    }\n\n    if (!this.$events[name]) {\n      this.$events[name] = fn;\n    } else if (io.util.isArray(this.$events[name])) {\n      this.$events[name].push(fn);\n    } else {\n      this.$events[name] = [this.$events[name], fn];\n    }\n\n    return this;\n  };\n\n  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n  /**\n   * Adds a volatile listener.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.once = function (name, fn) {\n    var self = this;\n\n    function on () {\n      self.removeListener(name, on);\n      fn.apply(this, arguments);\n    };\n\n    on.listener = fn;\n    this.on(name, on);\n\n    return this;\n  };\n\n  /**\n   * Removes a listener.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.removeListener = function (name, fn) {\n    if (this.$events && this.$events[name]) {\n      var list = this.$events[name];\n\n      if (io.util.isArray(list)) {\n        var pos = -1;\n\n        for (var i = 0, l = list.length; i < l; i++) {\n          if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {\n            pos = i;\n            break;\n          }\n        }\n\n        if (pos < 0) {\n          return this;\n        }\n\n        list.splice(pos, 1);\n\n        if (!list.length) {\n          delete this.$events[name];\n        }\n      } else if (list === fn || (list.listener && list.listener === fn)) {\n        delete this.$events[name];\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Removes all listeners for an event.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.removeAllListeners = function (name) {\n    if (name === undefined) {\n      this.$events = {};\n      return this;\n    }\n\n    if (this.$events && this.$events[name]) {\n      this.$events[name] = null;\n    }\n\n    return this;\n  };\n\n  /**\n   * Gets all listeners for a certain event.\n   *\n   * @api publci\n   */\n\n  EventEmitter.prototype.listeners = function (name) {\n    if (!this.$events) {\n      this.$events = {};\n    }\n\n    if (!this.$events[name]) {\n      this.$events[name] = [];\n    }\n\n    if (!io.util.isArray(this.$events[name])) {\n      this.$events[name] = [this.$events[name]];\n    }\n\n    return this.$events[name];\n  };\n\n  /**\n   * Emits an event.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.emit = function (name) {\n    if (!this.$events) {\n      return false;\n    }\n\n    var handler = this.$events[name];\n\n    if (!handler) {\n      return false;\n    }\n\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    if ('function' == typeof handler) {\n      handler.apply(this, args);\n    } else if (io.util.isArray(handler)) {\n      var listeners = handler.slice();\n\n      for (var i = 0, l = listeners.length; i < l; i++) {\n        listeners[i].apply(this, args);\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Based on JSON2 (http://www.JSON.org/js.html).\n */\n\n(function (exports, nativeJSON) {\n  \"use strict\";\n\n  // use native JSON if it's available\n  if (nativeJSON && nativeJSON.parse){\n    return exports.JSON = {\n      parse: nativeJSON.parse\n    , stringify: nativeJSON.stringify\n    };\n  }\n\n  var JSON = exports.JSON = {};\n\n  function f(n) {\n      // Format integers to have at least two digits.\n      return n < 10 ? '0' + n : n;\n  }\n\n  function date(d, key) {\n    return isFinite(d.valueOf()) ?\n        d.getUTCFullYear()     + '-' +\n        f(d.getUTCMonth() + 1) + '-' +\n        f(d.getUTCDate())      + 'T' +\n        f(d.getUTCHours())     + ':' +\n        f(d.getUTCMinutes())   + ':' +\n        f(d.getUTCSeconds())   + 'Z' : null;\n  };\n\n  var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n      escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n      gap,\n      indent,\n      meta = {    // table of character substitutions\n          '\\b': '\\\\b',\n          '\\t': '\\\\t',\n          '\\n': '\\\\n',\n          '\\f': '\\\\f',\n          '\\r': '\\\\r',\n          '\"' : '\\\\\"',\n          '\\\\': '\\\\\\\\'\n      },\n      rep;\n\n\n  function quote(string) {\n\n// If the string contains no control characters, no quote characters, and no\n// backslash characters, then we can safely slap some quotes around it.\n// Otherwise we must also replace the offending characters with safe escape\n// sequences.\n\n      escapable.lastIndex = 0;\n      return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n          var c = meta[a];\n          return typeof c === 'string' ? c :\n              '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n      }) + '\"' : '\"' + string + '\"';\n  }\n\n\n  function str(key, holder) {\n\n// Produce a string from holder[key].\n\n      var i,          // The loop counter.\n          k,          // The member key.\n          v,          // The member value.\n          length,\n          mind = gap,\n          partial,\n          value = holder[key];\n\n// If the value has a toJSON method, call it to obtain a replacement value.\n\n      if (value instanceof Date) {\n          value = date(key);\n      }\n\n// If we were called with a replacer function, then call the replacer to\n// obtain a replacement value.\n\n      if (typeof rep === 'function') {\n          value = rep.call(holder, key, value);\n      }\n\n// What happens next depends on the value's type.\n\n      switch (typeof value) {\n      case 'string':\n          return quote(value);\n\n      case 'number':\n\n// JSON numbers must be finite. Encode non-finite numbers as null.\n\n          return isFinite(value) ? String(value) : 'null';\n\n      case 'boolean':\n      case 'null':\n\n// If the value is a boolean or null, convert it to a string. Note:\n// typeof null does not produce 'null'. The case is included here in\n// the remote chance that this gets fixed someday.\n\n          return String(value);\n\n// If the type is 'object', we might be dealing with an object or an array or\n// null.\n\n      case 'object':\n\n// Due to a specification blunder in ECMAScript, typeof null is 'object',\n// so watch out for that case.\n\n          if (!value) {\n              return 'null';\n          }\n\n// Make an array to hold the partial results of stringifying this object value.\n\n          gap += indent;\n          partial = [];\n\n// Is the value an array?\n\n          if (Object.prototype.toString.apply(value) === '[object Array]') {\n\n// The value is an array. Stringify every element. Use null as a placeholder\n// for non-JSON values.\n\n              length = value.length;\n              for (i = 0; i < length; i += 1) {\n                  partial[i] = str(i, value) || 'null';\n              }\n\n// Join all of the elements together, separated with commas, and wrap them in\n// brackets.\n\n              v = partial.length === 0 ? '[]' : gap ?\n                  '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n                  '[' + partial.join(',') + ']';\n              gap = mind;\n              return v;\n          }\n\n// If the replacer is an array, use it to select the members to be stringified.\n\n          if (rep && typeof rep === 'object') {\n              length = rep.length;\n              for (i = 0; i < length; i += 1) {\n                  if (typeof rep[i] === 'string') {\n                      k = rep[i];\n                      v = str(k, value);\n                      if (v) {\n                          partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                      }\n                  }\n              }\n          } else {\n\n// Otherwise, iterate through all of the keys in the object.\n\n              for (k in value) {\n                  if (Object.prototype.hasOwnProperty.call(value, k)) {\n                      v = str(k, value);\n                      if (v) {\n                          partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                      }\n                  }\n              }\n          }\n\n// Join all of the member texts together, separated with commas,\n// and wrap them in braces.\n\n          v = partial.length === 0 ? '{}' : gap ?\n              '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n              '{' + partial.join(',') + '}';\n          gap = mind;\n          return v;\n      }\n  }\n\n// If the JSON object does not yet have a stringify method, give it one.\n\n  JSON.stringify = function (value, replacer, space) {\n\n// The stringify method takes a value and an optional replacer, and an optional\n// space parameter, and returns a JSON text. The replacer can be a function\n// that can replace values, or an array of strings that will select the keys.\n// A default replacer method can be provided. Use of the space parameter can\n// produce text that is more easily readable.\n\n      var i;\n      gap = '';\n      indent = '';\n\n// If the space parameter is a number, make an indent string containing that\n// many spaces.\n\n      if (typeof space === 'number') {\n          for (i = 0; i < space; i += 1) {\n              indent += ' ';\n          }\n\n// If the space parameter is a string, it will be used as the indent string.\n\n      } else if (typeof space === 'string') {\n          indent = space;\n      }\n\n// If there is a replacer, it must be a function or an array.\n// Otherwise, throw an error.\n\n      rep = replacer;\n      if (replacer && typeof replacer !== 'function' &&\n              (typeof replacer !== 'object' ||\n              typeof replacer.length !== 'number')) {\n          throw new Error('JSON.stringify');\n      }\n\n// Make a fake root object containing our value under the key of ''.\n// Return the result of stringifying the value.\n\n      return str('', {'': value});\n  };\n\n// If the JSON object does not yet have a parse method, give it one.\n\n  JSON.parse = function (text, reviver) {\n  // The parse method takes a text and an optional reviver function, and returns\n  // a JavaScript value if the text is a valid JSON text.\n\n      var j;\n\n      function walk(holder, key) {\n\n  // The walk method is used to recursively walk the resulting structure so\n  // that modifications can be made.\n\n          var k, v, value = holder[key];\n          if (value && typeof value === 'object') {\n              for (k in value) {\n                  if (Object.prototype.hasOwnProperty.call(value, k)) {\n                      v = walk(value, k);\n                      if (v !== undefined) {\n                          value[k] = v;\n                      } else {\n                          delete value[k];\n                      }\n                  }\n              }\n          }\n          return reviver.call(holder, key, value);\n      }\n\n\n  // Parsing happens in four stages. In the first stage, we replace certain\n  // Unicode characters with escape sequences. JavaScript handles many characters\n  // incorrectly, either silently deleting them, or treating them as line endings.\n\n      text = String(text);\n      cx.lastIndex = 0;\n      if (cx.test(text)) {\n          text = text.replace(cx, function (a) {\n              return '\\\\u' +\n                  ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n          });\n      }\n\n  // In the second stage, we run the text against regular expressions that look\n  // for non-JSON patterns. We are especially concerned with '()' and 'new'\n  // because they can cause invocation, and '=' because it can cause mutation.\n  // But just to be safe, we want to reject all unexpected forms.\n\n  // We split the second stage into 4 regexp operations in order to work around\n  // crippling inefficiencies in IE's and Safari's regexp engines. First we\n  // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we\n  // replace all simple value tokens with ']' characters. Third, we delete all\n  // open brackets that follow a colon or comma or that begin the text. Finally,\n  // we look to see that the remaining characters are only whitespace or ']' or\n  // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.\n\n      if (/^[\\],:{}\\s]*$/\n              .test(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')\n                  .replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']')\n                  .replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))) {\n\n  // In the third stage we use the eval function to compile the text into a\n  // JavaScript structure. The '{' operator is subject to a syntactic ambiguity\n  // in JavaScript: it can begin a block or an object literal. We wrap the text\n  // in parens to eliminate the ambiguity.\n\n          j = eval('(' + text + ')');\n\n  // In the optional fourth stage, we recursively walk the new structure, passing\n  // each name/value pair to a reviver function for possible transformation.\n\n          return typeof reviver === 'function' ?\n              walk({'': j}, '') : j;\n      }\n\n  // If the text is not JSON parseable, then a SyntaxError is thrown.\n\n      throw new SyntaxError('JSON.parse');\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , typeof JSON !== 'undefined' ? JSON : undefined\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Parser namespace.\n   *\n   * @namespace\n   */\n\n  var parser = exports.parser = {};\n\n  /**\n   * Packet types.\n   */\n\n  var packets = parser.packets = [\n      'disconnect'\n    , 'connect'\n    , 'heartbeat'\n    , 'message'\n    , 'json'\n    , 'event'\n    , 'ack'\n    , 'error'\n    , 'noop'\n  ];\n\n  /**\n   * Errors reasons.\n   */\n\n  var reasons = parser.reasons = [\n      'transport not supported'\n    , 'client not handshaken'\n    , 'unauthorized'\n  ];\n\n  /**\n   * Errors advice.\n   */\n\n  var advice = parser.advice = [\n      'reconnect'\n  ];\n\n  /**\n   * Shortcuts.\n   */\n\n  var JSON = io.JSON\n    , indexOf = io.util.indexOf;\n\n  /**\n   * Encodes a packet.\n   *\n   * @api private\n   */\n\n  parser.encodePacket = function (packet) {\n    var type = indexOf(packets, packet.type)\n      , id = packet.id || ''\n      , endpoint = packet.endpoint || ''\n      , ack = packet.ack\n      , data = null;\n\n    switch (packet.type) {\n      case 'error':\n        var reason = packet.reason ? indexOf(reasons, packet.reason) : ''\n          , adv = packet.advice ? indexOf(advice, packet.advice) : '';\n\n        if (reason !== '' || adv !== '')\n          data = reason + (adv !== '' ? ('+' + adv) : '');\n\n        break;\n\n      case 'message':\n        if (packet.data !== '')\n          data = packet.data;\n        break;\n\n      case 'event':\n        var ev = { name: packet.name };\n\n        if (packet.args && packet.args.length) {\n          ev.args = packet.args;\n        }\n\n        data = JSON.stringify(ev);\n        break;\n\n      case 'json':\n        data = JSON.stringify(packet.data);\n        break;\n\n      case 'connect':\n        if (packet.qs)\n          data = packet.qs;\n        break;\n\n      case 'ack':\n        data = packet.ackId\n          + (packet.args && packet.args.length\n              ? '+' + JSON.stringify(packet.args) : '');\n        break;\n    }\n\n    // construct packet with required fragments\n    var encoded = [\n        type\n      , id + (ack == 'data' ? '+' : '')\n      , endpoint\n    ];\n\n    // data fragment is optional\n    if (data !== null && data !== undefined)\n      encoded.push(data);\n\n    return encoded.join(':');\n  };\n\n  /**\n   * Encodes multiple messages (payload).\n   *\n   * @param {Array} messages\n   * @api private\n   */\n\n  parser.encodePayload = function (packets) {\n    var decoded = '';\n\n    if (packets.length == 1)\n      return packets[0];\n\n    for (var i = 0, l = packets.length; i < l; i++) {\n      var packet = packets[i];\n      decoded += '\\ufffd' + packet.length + '\\ufffd' + packets[i];\n    }\n\n    return decoded;\n  };\n\n  /**\n   * Decodes a packet\n   *\n   * @api private\n   */\n\n  var regexp = /([^:]+):([0-9]+)?(\\+)?:([^:]+)?:?([\\s\\S]*)?/;\n\n  parser.decodePacket = function (data) {\n    var pieces = data.match(regexp);\n\n    if (!pieces) return {};\n\n    var id = pieces[2] || ''\n      , data = pieces[5] || ''\n      , packet = {\n            type: packets[pieces[1]]\n          , endpoint: pieces[4] || ''\n        };\n\n    // whether we need to acknowledge the packet\n    if (id) {\n      packet.id = id;\n      if (pieces[3])\n        packet.ack = 'data';\n      else\n        packet.ack = true;\n    }\n\n    // handle different packet types\n    switch (packet.type) {\n      case 'error':\n        var pieces = data.split('+');\n        packet.reason = reasons[pieces[0]] || '';\n        packet.advice = advice[pieces[1]] || '';\n        break;\n\n      case 'message':\n        packet.data = data || '';\n        break;\n\n      case 'event':\n        try {\n          var opts = JSON.parse(data);\n          packet.name = opts.name;\n          packet.args = opts.args;\n        } catch (e) { }\n\n        packet.args = packet.args || [];\n        break;\n\n      case 'json':\n        try {\n          packet.data = JSON.parse(data);\n        } catch (e) { }\n        break;\n\n      case 'connect':\n        packet.qs = data || '';\n        break;\n\n      case 'ack':\n        var pieces = data.match(/^([0-9]+)(\\+)?(.*)/);\n        if (pieces) {\n          packet.ackId = pieces[1];\n          packet.args = [];\n\n          if (pieces[3]) {\n            try {\n              packet.args = pieces[3] ? JSON.parse(pieces[3]) : [];\n            } catch (e) { }\n          }\n        }\n        break;\n\n      case 'disconnect':\n      case 'heartbeat':\n        break;\n    };\n\n    return packet;\n  };\n\n  /**\n   * Decodes data payload. Detects multiple messages\n   *\n   * @return {Array} messages\n   * @api public\n   */\n\n  parser.decodePayload = function (data) {\n    // IE doesn't like data[i] for unicode chars, charAt works fine\n    if (data.charAt(0) == '\\ufffd') {\n      var ret = [];\n\n      for (var i = 1, length = ''; i < data.length; i++) {\n        if (data.charAt(i) == '\\ufffd') {\n          ret.push(parser.decodePacket(data.substr(i + 1).substr(0, length)));\n          i += Number(length) + 1;\n          length = '';\n        } else {\n          length += data.charAt(i);\n        }\n      }\n\n      return ret;\n    } else {\n      return [parser.decodePacket(data)];\n    }\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.Transport = Transport;\n\n  /**\n   * This is the transport template for all supported transport methods.\n   *\n   * @constructor\n   * @api public\n   */\n\n  function Transport (socket, sessid) {\n    this.socket = socket;\n    this.sessid = sessid;\n  };\n\n  /**\n   * Apply EventEmitter mixin.\n   */\n\n  io.util.mixin(Transport, io.EventEmitter);\n\n\n  /**\n   * Indicates whether heartbeats is enabled for this transport\n   *\n   * @api private\n   */\n\n  Transport.prototype.heartbeats = function () {\n    return true;\n  };\n\n  /**\n   * Handles the response from the server. When a new response is received\n   * it will automatically update the timeout, decode the message and\n   * forwards the response to the onMessage function for further processing.\n   *\n   * @param {String} data Response from the server.\n   * @api private\n   */\n\n  Transport.prototype.onData = function (data) {\n    this.clearCloseTimeout();\n\n    // If the connection in currently open (or in a reopening state) reset the close\n    // timeout since we have just received data. This check is necessary so\n    // that we don't reset the timeout on an explicitly disconnected connection.\n    if (this.socket.connected || this.socket.connecting || this.socket.reconnecting) {\n      this.setCloseTimeout();\n    }\n\n    if (data !== '') {\n      // todo: we should only do decodePayload for xhr transports\n      var msgs = io.parser.decodePayload(data);\n\n      if (msgs && msgs.length) {\n        for (var i = 0, l = msgs.length; i < l; i++) {\n          this.onPacket(msgs[i]);\n        }\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Handles packets.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onPacket = function (packet) {\n    this.socket.setHeartbeatTimeout();\n\n    if (packet.type == 'heartbeat') {\n      return this.onHeartbeat();\n    }\n\n    if (packet.type == 'connect' && packet.endpoint == '') {\n      this.onConnect();\n    }\n\n    if (packet.type == 'error' && packet.advice == 'reconnect') {\n      this.isOpen = false;\n    }\n\n    this.socket.onPacket(packet);\n\n    return this;\n  };\n\n  /**\n   * Sets close timeout\n   *\n   * @api private\n   */\n\n  Transport.prototype.setCloseTimeout = function () {\n    if (!this.closeTimeout) {\n      var self = this;\n\n      this.closeTimeout = setTimeout(function () {\n        self.onDisconnect();\n      }, this.socket.closeTimeout);\n    }\n  };\n\n  /**\n   * Called when transport disconnects.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onDisconnect = function () {\n    if (this.isOpen) this.close();\n    this.clearTimeouts();\n    this.socket.onDisconnect();\n    return this;\n  };\n\n  /**\n   * Called when transport connects\n   *\n   * @api private\n   */\n\n  Transport.prototype.onConnect = function () {\n    this.socket.onConnect();\n    return this;\n  };\n\n  /**\n   * Clears close timeout\n   *\n   * @api private\n   */\n\n  Transport.prototype.clearCloseTimeout = function () {\n    if (this.closeTimeout) {\n      clearTimeout(this.closeTimeout);\n      this.closeTimeout = null;\n    }\n  };\n\n  /**\n   * Clear timeouts\n   *\n   * @api private\n   */\n\n  Transport.prototype.clearTimeouts = function () {\n    this.clearCloseTimeout();\n\n    if (this.reopenTimeout) {\n      clearTimeout(this.reopenTimeout);\n    }\n  };\n\n  /**\n   * Sends a packet\n   *\n   * @param {Object} packet object.\n   * @api private\n   */\n\n  Transport.prototype.packet = function (packet) {\n    this.send(io.parser.encodePacket(packet));\n  };\n\n  /**\n   * Send the received heartbeat message back to server. So the server\n   * knows we are still connected.\n   *\n   * @param {String} heartbeat Heartbeat response from the server.\n   * @api private\n   */\n\n  Transport.prototype.onHeartbeat = function (heartbeat) {\n    this.packet({ type: 'heartbeat' });\n  };\n\n  /**\n   * Called when the transport opens.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onOpen = function () {\n    this.isOpen = true;\n    this.clearCloseTimeout();\n    this.socket.onOpen();\n  };\n\n  /**\n   * Notifies the base when the connection with the Socket.IO server\n   * has been disconnected.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onClose = function () {\n    var self = this;\n\n    /* FIXME: reopen delay causing a infinit loop\n    this.reopenTimeout = setTimeout(function () {\n      self.open();\n    }, this.socket.options['reopen delay']);*/\n\n    this.isOpen = false;\n    this.socket.onClose();\n    this.onDisconnect();\n  };\n\n  /**\n   * Generates a connection url based on the Socket.IO URL Protocol.\n   * See <https://github.com/learnboost/socket.io-node/> for more details.\n   *\n   * @returns {String} Connection url\n   * @api private\n   */\n\n  Transport.prototype.prepareUrl = function () {\n    var options = this.socket.options;\n\n    return this.scheme() + '://'\n      + options.host + ':' + options.port + '/'\n      + options.resource + '/' + io.protocol\n      + '/' + this.name + '/' + this.sessid;\n  };\n\n  /**\n   * Checks if the transport is ready to start a connection.\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  Transport.prototype.ready = function (socket, fn) {\n    fn.call(this);\n  };\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.Socket = Socket;\n\n  /**\n   * Create a new `Socket.IO client` which can establish a persistent\n   * connection with a Socket.IO enabled server.\n   *\n   * @api public\n   */\n\n  function Socket (options) {\n    this.options = {\n        port: 80\n      , secure: false\n      , document: 'document' in global ? document : false\n      , resource: 'socket.io'\n      , transports: io.transports\n      , 'connect timeout': 10000\n      , 'try multiple transports': true\n      , 'reconnect': true\n      , 'reconnection delay': 500\n      , 'reconnection limit': Infinity\n      , 'reopen delay': 3000\n      , 'max reconnection attempts': 10\n      , 'sync disconnect on unload': false\n      , 'auto connect': true\n      , 'flash policy port': 10843\n      , 'manualFlush': false\n    };\n\n    io.util.merge(this.options, options);\n\n    this.connected = false;\n    this.open = false;\n    this.connecting = false;\n    this.reconnecting = false;\n    this.namespaces = {};\n    this.buffer = [];\n    this.doBuffer = false;\n\n    if (this.options['sync disconnect on unload'] &&\n        (!this.isXDomain() || io.util.ua.hasCORS)) {\n      var self = this;\n      io.util.on(global, 'beforeunload', function () {\n        self.disconnectSync();\n      }, false);\n    }\n\n    if (this.options['auto connect']) {\n      this.connect();\n    }\n};\n\n  /**\n   * Apply EventEmitter mixin.\n   */\n\n  io.util.mixin(Socket, io.EventEmitter);\n\n  /**\n   * Returns a namespace listener/emitter for this socket\n   *\n   * @api public\n   */\n\n  Socket.prototype.of = function (name) {\n    if (!this.namespaces[name]) {\n      this.namespaces[name] = new io.SocketNamespace(this, name);\n\n      if (name !== '') {\n        this.namespaces[name].packet({ type: 'connect' });\n      }\n    }\n\n    return this.namespaces[name];\n  };\n\n  /**\n   * Emits the given event to the Socket and all namespaces\n   *\n   * @api private\n   */\n\n  Socket.prototype.publish = function () {\n    this.emit.apply(this, arguments);\n\n    var nsp;\n\n    for (var i in this.namespaces) {\n      if (this.namespaces.hasOwnProperty(i)) {\n        nsp = this.of(i);\n        nsp.$emit.apply(nsp, arguments);\n      }\n    }\n  };\n\n  /**\n   * Performs the handshake\n   *\n   * @api private\n   */\n\n  function empty () { };\n\n  Socket.prototype.handshake = function (fn) {\n    var self = this\n      , options = this.options;\n\n    function complete (data) {\n      if (data instanceof Error) {\n        self.connecting = false;\n        self.onError(data.message);\n      } else {\n        fn.apply(null, data.split(':'));\n      }\n    };\n\n    var url = [\n          'http' + (options.secure ? 's' : '') + ':/'\n        , options.host + ':' + options.port\n        , options.resource\n        , io.protocol\n        , io.util.query(this.options.query, 't=' + +new Date)\n      ].join('/');\n\n    if (this.isXDomain() && !io.util.ua.hasCORS) {\n      var insertAt = document.getElementsByTagName('script')[0]\n        , script = document.createElement('script');\n\n      script.src = url + '&jsonp=' + io.j.length;\n      insertAt.parentNode.insertBefore(script, insertAt);\n\n      io.j.push(function (data) {\n        complete(data);\n        script.parentNode.removeChild(script);\n      });\n    } else {\n      var xhr = io.util.request();\n\n      xhr.open('GET', url, true);\n      if (this.isXDomain()) {\n        xhr.withCredentials = true;\n      }\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState == 4) {\n          xhr.onreadystatechange = empty;\n\n          if (xhr.status == 200) {\n            complete(xhr.responseText);\n          } else if (xhr.status == 403) {\n            self.onError(xhr.responseText);\n          } else {\n            self.connecting = false;            \n            !self.reconnecting && self.onError(xhr.responseText);\n          }\n        }\n      };\n      xhr.send(null);\n    }\n  };\n\n  /**\n   * Find an available transport based on the options supplied in the constructor.\n   *\n   * @api private\n   */\n\n  Socket.prototype.getTransport = function (override) {\n    var transports = override || this.transports, match;\n\n    for (var i = 0, transport; transport = transports[i]; i++) {\n      if (io.Transport[transport]\n        && io.Transport[transport].check(this)\n        && (!this.isXDomain() || io.Transport[transport].xdomainCheck(this))) {\n        return new io.Transport[transport](this, this.sessionid);\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * Connects to the server.\n   *\n   * @param {Function} [fn] Callback.\n   * @returns {io.Socket}\n   * @api public\n   */\n\n  Socket.prototype.connect = function (fn) {\n    if (this.connecting) {\n      return this;\n    }\n\n    var self = this;\n    self.connecting = true;\n    \n    this.handshake(function (sid, heartbeat, close, transports) {\n      self.sessionid = sid;\n      self.closeTimeout = close * 1000;\n      self.heartbeatTimeout = heartbeat * 1000;\n      if(!self.transports)\n          self.transports = self.origTransports = (transports ? io.util.intersect(\n              transports.split(',')\n            , self.options.transports\n          ) : self.options.transports);\n\n      self.setHeartbeatTimeout();\n\n      function connect (transports){\n        if (self.transport) self.transport.clearTimeouts();\n\n        self.transport = self.getTransport(transports);\n        if (!self.transport) return self.publish('connect_failed');\n\n        // once the transport is ready\n        self.transport.ready(self, function () {\n          self.connecting = true;\n          self.publish('connecting', self.transport.name);\n          self.transport.open();\n\n          if (self.options['connect timeout']) {\n            self.connectTimeoutTimer = setTimeout(function () {\n              if (!self.connected) {\n                self.connecting = false;\n\n                if (self.options['try multiple transports']) {\n                  var remaining = self.transports;\n\n                  while (remaining.length > 0 && remaining.splice(0,1)[0] !=\n                         self.transport.name) {}\n\n                    if (remaining.length){\n                      connect(remaining);\n                    } else {\n                      self.publish('connect_failed');\n                    }\n                }\n              }\n            }, self.options['connect timeout']);\n          }\n        });\n      }\n\n      connect(self.transports);\n\n      self.once('connect', function (){\n        clearTimeout(self.connectTimeoutTimer);\n\n        fn && typeof fn == 'function' && fn();\n      });\n    });\n\n    return this;\n  };\n\n  /**\n   * Clears and sets a new heartbeat timeout using the value given by the\n   * server during the handshake.\n   *\n   * @api private\n   */\n\n  Socket.prototype.setHeartbeatTimeout = function () {\n    clearTimeout(this.heartbeatTimeoutTimer);\n    if(this.transport && !this.transport.heartbeats()) return;\n\n    var self = this;\n    this.heartbeatTimeoutTimer = setTimeout(function () {\n      self.transport.onClose();\n    }, this.heartbeatTimeout);\n  };\n\n  /**\n   * Sends a message.\n   *\n   * @param {Object} data packet.\n   * @returns {io.Socket}\n   * @api public\n   */\n\n  Socket.prototype.packet = function (data) {\n    if (this.connected && !this.doBuffer) {\n      this.transport.packet(data);\n    } else {\n      this.buffer.push(data);\n    }\n\n    return this;\n  };\n\n  /**\n   * Sets buffer state\n   *\n   * @api private\n   */\n\n  Socket.prototype.setBuffer = function (v) {\n    this.doBuffer = v;\n\n    if (!v && this.connected && this.buffer.length) {\n      if (!this.options['manualFlush']) {\n        this.flushBuffer();\n      }\n    }\n  };\n\n  /**\n   * Flushes the buffer data over the wire.\n   * To be invoked manually when 'manualFlush' is set to true.\n   *\n   * @api public\n   */\n\n  Socket.prototype.flushBuffer = function() {\n    this.transport.payload(this.buffer);\n    this.buffer = [];\n  };\n  \n\n  /**\n   * Disconnect the established connect.\n   *\n   * @returns {io.Socket}\n   * @api public\n   */\n\n  Socket.prototype.disconnect = function () {\n    if (this.connected || this.connecting) {\n      if (this.open) {\n        this.of('').packet({ type: 'disconnect' });\n      }\n\n      // handle disconnection immediately\n      this.onDisconnect('booted');\n    }\n\n    return this;\n  };\n\n  /**\n   * Disconnects the socket with a sync XHR.\n   *\n   * @api private\n   */\n\n  Socket.prototype.disconnectSync = function () {\n    // ensure disconnection\n    var xhr = io.util.request();\n    var uri = [\n        'http' + (this.options.secure ? 's' : '') + ':/'\n      , this.options.host + ':' + this.options.port\n      , this.options.resource\n      , io.protocol\n      , ''\n      , this.sessionid\n    ].join('/') + '/?disconnect=1';\n\n    xhr.open('GET', uri, false);\n    xhr.send(null);\n\n    // handle disconnection immediately\n    this.onDisconnect('booted');\n  };\n\n  /**\n   * Check if we need to use cross domain enabled transports. Cross domain would\n   * be a different port or different domain name.\n   *\n   * @returns {Boolean}\n   * @api private\n   */\n\n  Socket.prototype.isXDomain = function () {\n\n    var port = global.location.port ||\n      ('https:' == global.location.protocol ? 443 : 80);\n\n    return this.options.host !== global.location.hostname \n      || this.options.port != port;\n  };\n\n  /**\n   * Called upon handshake.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onConnect = function () {\n    if (!this.connected) {\n      this.connected = true;\n      this.connecting = false;\n      if (!this.doBuffer) {\n        // make sure to flush the buffer\n        this.setBuffer(false);\n      }\n      this.emit('connect');\n    }\n  };\n\n  /**\n   * Called when the transport opens\n   *\n   * @api private\n   */\n\n  Socket.prototype.onOpen = function () {\n    this.open = true;\n  };\n\n  /**\n   * Called when the transport closes.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onClose = function () {\n    this.open = false;\n    clearTimeout(this.heartbeatTimeoutTimer);\n  };\n\n  /**\n   * Called when the transport first opens a connection\n   *\n   * @param text\n   */\n\n  Socket.prototype.onPacket = function (packet) {\n    this.of(packet.endpoint).onPacket(packet);\n  };\n\n  /**\n   * Handles an error.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onError = function (err) {\n    if (err && err.advice) {\n      if (err.advice === 'reconnect' && (this.connected || this.connecting)) {\n        this.disconnect();\n        if (this.options.reconnect) {\n          this.reconnect();\n        }\n      }\n    }\n\n    this.publish('error', err && err.reason ? err.reason : err);\n  };\n\n  /**\n   * Called when the transport disconnects.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onDisconnect = function (reason) {\n    var wasConnected = this.connected\n      , wasConnecting = this.connecting;\n\n    this.connected = false;\n    this.connecting = false;\n    this.open = false;\n\n    if (wasConnected || wasConnecting) {\n      this.transport.close();\n      this.transport.clearTimeouts();\n      if (wasConnected) {\n        this.publish('disconnect', reason);\n\n        if ('booted' != reason && this.options.reconnect && !this.reconnecting) {\n          this.reconnect();\n        }\n      }\n    }\n  };\n\n  /**\n   * Called upon reconnection.\n   *\n   * @api private\n   */\n\n  Socket.prototype.reconnect = function () {\n    this.reconnecting = true;\n    this.reconnectionAttempts = 0;\n    this.reconnectionDelay = this.options['reconnection delay'];\n\n    var self = this\n      , maxAttempts = this.options['max reconnection attempts']\n      , tryMultiple = this.options['try multiple transports']\n      , limit = this.options['reconnection limit'];\n\n    function reset () {\n      if (self.connected) {\n        for (var i in self.namespaces) {\n          if (self.namespaces.hasOwnProperty(i) && '' !== i) {\n              self.namespaces[i].packet({ type: 'connect' });\n          }\n        }\n        self.publish('reconnect', self.transport.name, self.reconnectionAttempts);\n      }\n\n      clearTimeout(self.reconnectionTimer);\n\n      self.removeListener('connect_failed', maybeReconnect);\n      self.removeListener('connect', maybeReconnect);\n\n      self.reconnecting = false;\n\n      delete self.reconnectionAttempts;\n      delete self.reconnectionDelay;\n      delete self.reconnectionTimer;\n      delete self.redoTransports;\n\n      self.options['try multiple transports'] = tryMultiple;\n    };\n\n    function maybeReconnect () {\n      if (!self.reconnecting) {\n        return;\n      }\n\n      if (self.connected) {\n        return reset();\n      };\n\n      if (self.connecting && self.reconnecting) {\n        return self.reconnectionTimer = setTimeout(maybeReconnect, 1000);\n      }\n\n      if (self.reconnectionAttempts++ >= maxAttempts) {\n        if (!self.redoTransports) {\n          self.on('connect_failed', maybeReconnect);\n          self.options['try multiple transports'] = true;\n          self.transports = self.origTransports;\n          self.transport = self.getTransport();\n          self.redoTransports = true;\n          self.connect();\n        } else {\n          self.publish('reconnect_failed');\n          reset();\n        }\n      } else {\n        if (self.reconnectionDelay < limit) {\n          self.reconnectionDelay *= 2; // exponential back off\n        }\n\n        self.connect();\n        self.publish('reconnecting', self.reconnectionDelay, self.reconnectionAttempts);\n        self.reconnectionTimer = setTimeout(maybeReconnect, self.reconnectionDelay);\n      }\n    };\n\n    this.options['try multiple transports'] = false;\n    this.reconnectionTimer = setTimeout(maybeReconnect, this.reconnectionDelay);\n\n    this.on('connect', maybeReconnect);\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.SocketNamespace = SocketNamespace;\n\n  /**\n   * Socket namespace constructor.\n   *\n   * @constructor\n   * @api public\n   */\n\n  function SocketNamespace (socket, name) {\n    this.socket = socket;\n    this.name = name || '';\n    this.flags = {};\n    this.json = new Flag(this, 'json');\n    this.ackPackets = 0;\n    this.acks = {};\n  };\n\n  /**\n   * Apply EventEmitter mixin.\n   */\n\n  io.util.mixin(SocketNamespace, io.EventEmitter);\n\n  /**\n   * Copies emit since we override it\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.$emit = io.EventEmitter.prototype.emit;\n\n  /**\n   * Creates a new namespace, by proxying the request to the socket. This\n   * allows us to use the synax as we do on the server.\n   *\n   * @api public\n   */\n\n  SocketNamespace.prototype.of = function () {\n    return this.socket.of.apply(this.socket, arguments);\n  };\n\n  /**\n   * Sends a packet.\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.packet = function (packet) {\n    packet.endpoint = this.name;\n    this.socket.packet(packet);\n    this.flags = {};\n    return this;\n  };\n\n  /**\n   * Sends a message\n   *\n   * @api public\n   */\n\n  SocketNamespace.prototype.send = function (data, fn) {\n    var packet = {\n        type: this.flags.json ? 'json' : 'message'\n      , data: data\n    };\n\n    if ('function' == typeof fn) {\n      packet.id = ++this.ackPackets;\n      packet.ack = true;\n      this.acks[packet.id] = fn;\n    }\n\n    return this.packet(packet);\n  };\n\n  /**\n   * Emits an event\n   *\n   * @api public\n   */\n  \n  SocketNamespace.prototype.emit = function (name) {\n    var args = Array.prototype.slice.call(arguments, 1)\n      , lastArg = args[args.length - 1]\n      , packet = {\n            type: 'event'\n          , name: name\n        };\n\n    if ('function' == typeof lastArg) {\n      packet.id = ++this.ackPackets;\n      packet.ack = 'data';\n      this.acks[packet.id] = lastArg;\n      args = args.slice(0, args.length - 1);\n    }\n\n    packet.args = args;\n\n    return this.packet(packet);\n  };\n\n  /**\n   * Disconnects the namespace\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.disconnect = function () {\n    if (this.name === '') {\n      this.socket.disconnect();\n    } else {\n      this.packet({ type: 'disconnect' });\n      this.$emit('disconnect');\n    }\n\n    return this;\n  };\n\n  /**\n   * Handles a packet\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.onPacket = function (packet) {\n    var self = this;\n\n    function ack () {\n      self.packet({\n          type: 'ack'\n        , args: io.util.toArray(arguments)\n        , ackId: packet.id\n      });\n    };\n\n    switch (packet.type) {\n      case 'connect':\n        this.$emit('connect');\n        break;\n\n      case 'disconnect':\n        if (this.name === '') {\n          this.socket.onDisconnect(packet.reason || 'booted');\n        } else {\n          this.$emit('disconnect', packet.reason);\n        }\n        break;\n\n      case 'message':\n      case 'json':\n        var params = ['message', packet.data];\n\n        if (packet.ack == 'data') {\n          params.push(ack);\n        } else if (packet.ack) {\n          this.packet({ type: 'ack', ackId: packet.id });\n        }\n\n        this.$emit.apply(this, params);\n        break;\n\n      case 'event':\n        var params = [packet.name].concat(packet.args);\n\n        if (packet.ack == 'data')\n          params.push(ack);\n\n        this.$emit.apply(this, params);\n        break;\n\n      case 'ack':\n        if (this.acks[packet.ackId]) {\n          this.acks[packet.ackId].apply(this, packet.args);\n          delete this.acks[packet.ackId];\n        }\n        break;\n\n      case 'error':\n        if (packet.advice){\n          this.socket.onError(packet);\n        } else {\n          if (packet.reason == 'unauthorized') {\n            this.$emit('connect_failed', packet.reason);\n          } else {\n            this.$emit('error', packet.reason);\n          }\n        }\n        break;\n    }\n  };\n\n  /**\n   * Flag interface.\n   *\n   * @api private\n   */\n\n  function Flag (nsp, name) {\n    this.namespace = nsp;\n    this.name = name;\n  };\n\n  /**\n   * Send a message\n   *\n   * @api public\n   */\n\n  Flag.prototype.send = function () {\n    this.namespace.flags[this.name] = true;\n    this.namespace.send.apply(this.namespace, arguments);\n  };\n\n  /**\n   * Emit an event\n   *\n   * @api public\n   */\n\n  Flag.prototype.emit = function () {\n    this.namespace.flags[this.name] = true;\n    this.namespace.emit.apply(this.namespace, arguments);\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.websocket = WS;\n\n  /**\n   * The WebSocket transport uses the HTML5 WebSocket API to establish an\n   * persistent connection with the Socket.IO server. This transport will also\n   * be inherited by the FlashSocket fallback as it provides a API compatible\n   * polyfill for the WebSockets.\n   *\n   * @constructor\n   * @extends {io.Transport}\n   * @api public\n   */\n\n  function WS (socket) {\n    io.Transport.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from Transport.\n   */\n\n  io.util.inherit(WS, io.Transport);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  WS.prototype.name = 'websocket';\n\n  /**\n   * Initializes a new `WebSocket` connection with the Socket.IO server. We attach\n   * all the appropriate listeners to handle the responses from the server.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  WS.prototype.open = function () {\n    var query = io.util.query(this.socket.options.query)\n      , self = this\n      , Socket\n\n\n    if (!Socket) {\n      Socket = global.MozWebSocket || global.WebSocket;\n    }\n\n    this.websocket = new Socket(this.prepareUrl() + query);\n\n    this.websocket.onopen = function () {\n      self.onOpen();\n      self.socket.setBuffer(false);\n    };\n    this.websocket.onmessage = function (ev) {\n      self.onData(ev.data);\n    };\n    this.websocket.onclose = function () {\n      self.onClose();\n      self.socket.setBuffer(true);\n    };\n    this.websocket.onerror = function (e) {\n      self.onError(e);\n    };\n\n    return this;\n  };\n\n  /**\n   * Send a message to the Socket.IO server. The message will automatically be\n   * encoded in the correct message format.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  // Do to a bug in the current IDevices browser, we need to wrap the send in a \n  // setTimeout, when they resume from sleeping the browser will crash if \n  // we don't allow the browser time to detect the socket has been closed\n  if (io.util.ua.iDevice) {\n    WS.prototype.send = function (data) {\n      var self = this;\n      setTimeout(function() {\n         self.websocket.send(data);\n      },0);\n      return this;\n    };\n  } else {\n    WS.prototype.send = function (data) {\n      this.websocket.send(data);\n      return this;\n    };\n  }\n\n  /**\n   * Payload\n   *\n   * @api private\n   */\n\n  WS.prototype.payload = function (arr) {\n    for (var i = 0, l = arr.length; i < l; i++) {\n      this.packet(arr[i]);\n    }\n    return this;\n  };\n\n  /**\n   * Disconnect the established `WebSocket` connection.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  WS.prototype.close = function () {\n    this.websocket.close();\n    return this;\n  };\n\n  /**\n   * Handle the errors that `WebSocket` might be giving when we\n   * are attempting to connect or send messages.\n   *\n   * @param {Error} e The error.\n   * @api private\n   */\n\n  WS.prototype.onError = function (e) {\n    this.socket.onError(e);\n  };\n\n  /**\n   * Returns the appropriate scheme for the URI generation.\n   *\n   * @api private\n   */\n  WS.prototype.scheme = function () {\n    return this.socket.options.secure ? 'wss' : 'ws';\n  };\n\n  /**\n   * Checks if the browser has support for native `WebSockets` and that\n   * it's not the polyfill created for the FlashSocket transport.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  WS.check = function () {\n    return ('WebSocket' in global && !('__addTask' in WebSocket))\n          || 'MozWebSocket' in global;\n  };\n\n  /**\n   * Check if the `WebSocket` transport support cross domain communications.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  WS.xdomainCheck = function () {\n    return true;\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('websocket');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.flashsocket = Flashsocket;\n\n  /**\n   * The FlashSocket transport. This is a API wrapper for the HTML5 WebSocket\n   * specification. It uses a .swf file to communicate with the server. If you want\n   * to serve the .swf file from a other server than where the Socket.IO script is\n   * coming from you need to use the insecure version of the .swf. More information\n   * about this can be found on the github page.\n   *\n   * @constructor\n   * @extends {io.Transport.websocket}\n   * @api public\n   */\n\n  function Flashsocket () {\n    io.Transport.websocket.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from Transport.\n   */\n\n  io.util.inherit(Flashsocket, io.Transport.websocket);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  Flashsocket.prototype.name = 'flashsocket';\n\n  /**\n   * Disconnect the established `FlashSocket` connection. This is done by adding a \n   * new task to the FlashSocket. The rest will be handled off by the `WebSocket` \n   * transport.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  Flashsocket.prototype.open = function () {\n    var self = this\n      , args = arguments;\n\n    WebSocket.__addTask(function () {\n      io.Transport.websocket.prototype.open.apply(self, args);\n    });\n    return this;\n  };\n  \n  /**\n   * Sends a message to the Socket.IO server. This is done by adding a new\n   * task to the FlashSocket. The rest will be handled off by the `WebSocket` \n   * transport.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  Flashsocket.prototype.send = function () {\n    var self = this, args = arguments;\n    WebSocket.__addTask(function () {\n      io.Transport.websocket.prototype.send.apply(self, args);\n    });\n    return this;\n  };\n\n  /**\n   * Disconnects the established `FlashSocket` connection.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  Flashsocket.prototype.close = function () {\n    WebSocket.__tasks.length = 0;\n    io.Transport.websocket.prototype.close.call(this);\n    return this;\n  };\n\n  /**\n   * The WebSocket fall back needs to append the flash container to the body\n   * element, so we need to make sure we have access to it. Or defer the call\n   * until we are sure there is a body element.\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  Flashsocket.prototype.ready = function (socket, fn) {\n    function init () {\n      var options = socket.options\n        , port = options['flash policy port']\n        , path = [\n              'http' + (options.secure ? 's' : '') + ':/'\n            , options.host + ':' + options.port\n            , options.resource\n            , 'static/flashsocket'\n            , 'WebSocketMain' + (socket.isXDomain() ? 'Insecure' : '') + '.swf'\n          ];\n\n      // Only start downloading the swf file when the checked that this browser\n      // actually supports it\n      if (!Flashsocket.loaded) {\n        if (typeof WEB_SOCKET_SWF_LOCATION === 'undefined') {\n          // Set the correct file based on the XDomain settings\n          WEB_SOCKET_SWF_LOCATION = path.join('/');\n        }\n\n        if (port !== 843) {\n          WebSocket.loadFlashPolicyFile('xmlsocket://' + options.host + ':' + port);\n        }\n\n        WebSocket.__initialize();\n        Flashsocket.loaded = true;\n      }\n\n      fn.call(self);\n    }\n\n    var self = this;\n    if (document.body) return init();\n\n    io.util.load(init);\n  };\n\n  /**\n   * Check if the FlashSocket transport is supported as it requires that the Adobe\n   * Flash Player plug-in version `10.0.0` or greater is installed. And also check if\n   * the polyfill is correctly loaded.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  Flashsocket.check = function () {\n    if (\n        typeof WebSocket == 'undefined'\n      || !('__initialize' in WebSocket) || !swfobject\n    ) return false;\n\n    return swfobject.getFlashPlayerVersion().major >= 10;\n  };\n\n  /**\n   * Check if the FlashSocket transport can be used as cross domain / cross origin \n   * transport. Because we can't see which type (secure or insecure) of .swf is used\n   * we will just return true.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  Flashsocket.xdomainCheck = function () {\n    return true;\n  };\n\n  /**\n   * Disable AUTO_INITIALIZATION\n   */\n\n  if (typeof window != 'undefined') {\n    WEB_SOCKET_DISABLE_AUTO_INITIALIZATION = true;\n  }\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('flashsocket');\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n/*\tSWFObject v2.2 <http://code.google.com/p/swfobject/> \n\tis released under the MIT License <http://www.opensource.org/licenses/mit-license.php> \n*/\nif ('undefined' != typeof window) {\nvar swfobject=function(){var D=\"undefined\",r=\"object\",S=\"Shockwave Flash\",W=\"ShockwaveFlash.ShockwaveFlash\",q=\"application/x-shockwave-flash\",R=\"SWFObjectExprInst\",x=\"onreadystatechange\",O=window,j=document,t=navigator,T=false,U=[h],o=[],N=[],I=[],l,Q,E,B,J=false,a=false,n,G,m=true,M=function(){var aa=typeof j.getElementById!=D&&typeof j.getElementsByTagName!=D&&typeof j.createElement!=D,ah=t.userAgent.toLowerCase(),Y=t.platform.toLowerCase(),ae=Y?/win/.test(Y):/win/.test(ah),ac=Y?/mac/.test(Y):/mac/.test(ah),af=/webkit/.test(ah)?parseFloat(ah.replace(/^.*webkit\\/(\\d+(\\.\\d+)?).*$/,\"$1\")):false,X=!+\"\\v1\",ag=[0,0,0],ab=null;if(typeof t.plugins!=D&&typeof t.plugins[S]==r){ab=t.plugins[S].description;if(ab&&!(typeof t.mimeTypes!=D&&t.mimeTypes[q]&&!t.mimeTypes[q].enabledPlugin)){T=true;X=false;ab=ab.replace(/^.*\\s+(\\S+\\s+\\S+$)/,\"$1\");ag[0]=parseInt(ab.replace(/^(.*)\\..*$/,\"$1\"),10);ag[1]=parseInt(ab.replace(/^.*\\.(.*)\\s.*$/,\"$1\"),10);ag[2]=/[a-zA-Z]/.test(ab)?parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/,\"$1\"),10):0}}else{if(typeof O[(['Active'].concat('Object').join('X'))]!=D){try{var ad=new window[(['Active'].concat('Object').join('X'))](W);if(ad){ab=ad.GetVariable(\"$version\");if(ab){X=true;ab=ab.split(\" \")[1].split(\",\");ag=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}}catch(Z){}}}return{w3:aa,pv:ag,wk:af,ie:X,win:ae,mac:ac}}(),k=function(){if(!M.w3){return}if((typeof j.readyState!=D&&j.readyState==\"complete\")||(typeof j.readyState==D&&(j.getElementsByTagName(\"body\")[0]||j.body))){f()}if(!J){if(typeof j.addEventListener!=D){j.addEventListener(\"DOMContentLoaded\",f,false)}if(M.ie&&M.win){j.attachEvent(x,function(){if(j.readyState==\"complete\"){j.detachEvent(x,arguments.callee);f()}});if(O==top){(function(){if(J){return}try{j.documentElement.doScroll(\"left\")}catch(X){setTimeout(arguments.callee,0);return}f()})()}}if(M.wk){(function(){if(J){return}if(!/loaded|complete/.test(j.readyState)){setTimeout(arguments.callee,0);return}f()})()}s(f)}}();function f(){if(J){return}try{var Z=j.getElementsByTagName(\"body\")[0].appendChild(C(\"span\"));Z.parentNode.removeChild(Z)}catch(aa){return}J=true;var X=U.length;for(var Y=0;Y<X;Y++){U[Y]()}}function K(X){if(J){X()}else{U[U.length]=X}}function s(Y){if(typeof O.addEventListener!=D){O.addEventListener(\"load\",Y,false)}else{if(typeof j.addEventListener!=D){j.addEventListener(\"load\",Y,false)}else{if(typeof O.attachEvent!=D){i(O,\"onload\",Y)}else{if(typeof O.onload==\"function\"){var X=O.onload;O.onload=function(){X();Y()}}else{O.onload=Y}}}}}function h(){if(T){V()}else{H()}}function V(){var X=j.getElementsByTagName(\"body\")[0];var aa=C(r);aa.setAttribute(\"type\",q);var Z=X.appendChild(aa);if(Z){var Y=0;(function(){if(typeof Z.GetVariable!=D){var ab=Z.GetVariable(\"$version\");if(ab){ab=ab.split(\" \")[1].split(\",\");M.pv=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}else{if(Y<10){Y++;setTimeout(arguments.callee,10);return}}X.removeChild(aa);Z=null;H()})()}else{H()}}function H(){var ag=o.length;if(ag>0){for(var af=0;af<ag;af++){var Y=o[af].id;var ab=o[af].callbackFn;var aa={success:false,id:Y};if(M.pv[0]>0){var ae=c(Y);if(ae){if(F(o[af].swfVersion)&&!(M.wk&&M.wk<312)){w(Y,true);if(ab){aa.success=true;aa.ref=z(Y);ab(aa)}}else{if(o[af].expressInstall&&A()){var ai={};ai.data=o[af].expressInstall;ai.width=ae.getAttribute(\"width\")||\"0\";ai.height=ae.getAttribute(\"height\")||\"0\";if(ae.getAttribute(\"class\")){ai.styleclass=ae.getAttribute(\"class\")}if(ae.getAttribute(\"align\")){ai.align=ae.getAttribute(\"align\")}var ah={};var X=ae.getElementsByTagName(\"param\");var ac=X.length;for(var ad=0;ad<ac;ad++){if(X[ad].getAttribute(\"name\").toLowerCase()!=\"movie\"){ah[X[ad].getAttribute(\"name\")]=X[ad].getAttribute(\"value\")}}P(ai,ah,Y,ab)}else{p(ae);if(ab){ab(aa)}}}}}else{w(Y,true);if(ab){var Z=z(Y);if(Z&&typeof Z.SetVariable!=D){aa.success=true;aa.ref=Z}ab(aa)}}}}}function z(aa){var X=null;var Y=c(aa);if(Y&&Y.nodeName==\"OBJECT\"){if(typeof Y.SetVariable!=D){X=Y}else{var Z=Y.getElementsByTagName(r)[0];if(Z){X=Z}}}return X}function A(){return !a&&F(\"6.0.65\")&&(M.win||M.mac)&&!(M.wk&&M.wk<312)}function P(aa,ab,X,Z){a=true;E=Z||null;B={success:false,id:X};var ae=c(X);if(ae){if(ae.nodeName==\"OBJECT\"){l=g(ae);Q=null}else{l=ae;Q=X}aa.id=R;if(typeof aa.width==D||(!/%$/.test(aa.width)&&parseInt(aa.width,10)<310)){aa.width=\"310\"}if(typeof aa.height==D||(!/%$/.test(aa.height)&&parseInt(aa.height,10)<137)){aa.height=\"137\"}j.title=j.title.slice(0,47)+\" - Flash Player Installation\";var ad=M.ie&&M.win?(['Active'].concat('').join('X')):\"PlugIn\",ac=\"MMredirectURL=\"+O.location.toString().replace(/&/g,\"%26\")+\"&MMplayerType=\"+ad+\"&MMdoctitle=\"+j.title;if(typeof ab.flashvars!=D){ab.flashvars+=\"&\"+ac}else{ab.flashvars=ac}if(M.ie&&M.win&&ae.readyState!=4){var Y=C(\"div\");X+=\"SWFObjectNew\";Y.setAttribute(\"id\",X);ae.parentNode.insertBefore(Y,ae);ae.style.display=\"none\";(function(){if(ae.readyState==4){ae.parentNode.removeChild(ae)}else{setTimeout(arguments.callee,10)}})()}u(aa,ab,X)}}function p(Y){if(M.ie&&M.win&&Y.readyState!=4){var X=C(\"div\");Y.parentNode.insertBefore(X,Y);X.parentNode.replaceChild(g(Y),X);Y.style.display=\"none\";(function(){if(Y.readyState==4){Y.parentNode.removeChild(Y)}else{setTimeout(arguments.callee,10)}})()}else{Y.parentNode.replaceChild(g(Y),Y)}}function g(ab){var aa=C(\"div\");if(M.win&&M.ie){aa.innerHTML=ab.innerHTML}else{var Y=ab.getElementsByTagName(r)[0];if(Y){var ad=Y.childNodes;if(ad){var X=ad.length;for(var Z=0;Z<X;Z++){if(!(ad[Z].nodeType==1&&ad[Z].nodeName==\"PARAM\")&&!(ad[Z].nodeType==8)){aa.appendChild(ad[Z].cloneNode(true))}}}}}return aa}function u(ai,ag,Y){var X,aa=c(Y);if(M.wk&&M.wk<312){return X}if(aa){if(typeof ai.id==D){ai.id=Y}if(M.ie&&M.win){var ah=\"\";for(var ae in ai){if(ai[ae]!=Object.prototype[ae]){if(ae.toLowerCase()==\"data\"){ag.movie=ai[ae]}else{if(ae.toLowerCase()==\"styleclass\"){ah+=' class=\"'+ai[ae]+'\"'}else{if(ae.toLowerCase()!=\"classid\"){ah+=\" \"+ae+'=\"'+ai[ae]+'\"'}}}}}var af=\"\";for(var ad in ag){if(ag[ad]!=Object.prototype[ad]){af+='<param name=\"'+ad+'\" value=\"'+ag[ad]+'\" />'}}aa.outerHTML='<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"'+ah+\">\"+af+\"</object>\";N[N.length]=ai.id;X=c(ai.id)}else{var Z=C(r);Z.setAttribute(\"type\",q);for(var ac in ai){if(ai[ac]!=Object.prototype[ac]){if(ac.toLowerCase()==\"styleclass\"){Z.setAttribute(\"class\",ai[ac])}else{if(ac.toLowerCase()!=\"classid\"){Z.setAttribute(ac,ai[ac])}}}}for(var ab in ag){if(ag[ab]!=Object.prototype[ab]&&ab.toLowerCase()!=\"movie\"){e(Z,ab,ag[ab])}}aa.parentNode.replaceChild(Z,aa);X=Z}}return X}function e(Z,X,Y){var aa=C(\"param\");aa.setAttribute(\"name\",X);aa.setAttribute(\"value\",Y);Z.appendChild(aa)}function y(Y){var X=c(Y);if(X&&X.nodeName==\"OBJECT\"){if(M.ie&&M.win){X.style.display=\"none\";(function(){if(X.readyState==4){b(Y)}else{setTimeout(arguments.callee,10)}})()}else{X.parentNode.removeChild(X)}}}function b(Z){var Y=c(Z);if(Y){for(var X in Y){if(typeof Y[X]==\"function\"){Y[X]=null}}Y.parentNode.removeChild(Y)}}function c(Z){var X=null;try{X=j.getElementById(Z)}catch(Y){}return X}function C(X){return j.createElement(X)}function i(Z,X,Y){Z.attachEvent(X,Y);I[I.length]=[Z,X,Y]}function F(Z){var Y=M.pv,X=Z.split(\".\");X[0]=parseInt(X[0],10);X[1]=parseInt(X[1],10)||0;X[2]=parseInt(X[2],10)||0;return(Y[0]>X[0]||(Y[0]==X[0]&&Y[1]>X[1])||(Y[0]==X[0]&&Y[1]==X[1]&&Y[2]>=X[2]))?true:false}function v(ac,Y,ad,ab){if(M.ie&&M.mac){return}var aa=j.getElementsByTagName(\"head\")[0];if(!aa){return}var X=(ad&&typeof ad==\"string\")?ad:\"screen\";if(ab){n=null;G=null}if(!n||G!=X){var Z=C(\"style\");Z.setAttribute(\"type\",\"text/css\");Z.setAttribute(\"media\",X);n=aa.appendChild(Z);if(M.ie&&M.win&&typeof j.styleSheets!=D&&j.styleSheets.length>0){n=j.styleSheets[j.styleSheets.length-1]}G=X}if(M.ie&&M.win){if(n&&typeof n.addRule==r){n.addRule(ac,Y)}}else{if(n&&typeof j.createTextNode!=D){n.appendChild(j.createTextNode(ac+\" {\"+Y+\"}\"))}}}function w(Z,X){if(!m){return}var Y=X?\"visible\":\"hidden\";if(J&&c(Z)){c(Z).style.visibility=Y}else{v(\"#\"+Z,\"visibility:\"+Y)}}function L(Y){var Z=/[\\\\\\\"<>\\.;]/;var X=Z.exec(Y)!=null;return X&&typeof encodeURIComponent!=D?encodeURIComponent(Y):Y}var d=function(){if(M.ie&&M.win){window.attachEvent(\"onunload\",function(){var ac=I.length;for(var ab=0;ab<ac;ab++){I[ab][0].detachEvent(I[ab][1],I[ab][2])}var Z=N.length;for(var aa=0;aa<Z;aa++){y(N[aa])}for(var Y in M){M[Y]=null}M=null;for(var X in swfobject){swfobject[X]=null}swfobject=null})}}();return{registerObject:function(ab,X,aa,Z){if(M.w3&&ab&&X){var Y={};Y.id=ab;Y.swfVersion=X;Y.expressInstall=aa;Y.callbackFn=Z;o[o.length]=Y;w(ab,false)}else{if(Z){Z({success:false,id:ab})}}},getObjectById:function(X){if(M.w3){return z(X)}},embedSWF:function(ab,ah,ae,ag,Y,aa,Z,ad,af,ac){var X={success:false,id:ah};if(M.w3&&!(M.wk&&M.wk<312)&&ab&&ah&&ae&&ag&&Y){w(ah,false);K(function(){ae+=\"\";ag+=\"\";var aj={};if(af&&typeof af===r){for(var al in af){aj[al]=af[al]}}aj.data=ab;aj.width=ae;aj.height=ag;var am={};if(ad&&typeof ad===r){for(var ak in ad){am[ak]=ad[ak]}}if(Z&&typeof Z===r){for(var ai in Z){if(typeof am.flashvars!=D){am.flashvars+=\"&\"+ai+\"=\"+Z[ai]}else{am.flashvars=ai+\"=\"+Z[ai]}}}if(F(Y)){var an=u(aj,am,ah);if(aj.id==ah){w(ah,true)}X.success=true;X.ref=an}else{if(aa&&A()){aj.data=aa;P(aj,am,ah,ac);return}else{w(ah,true)}}if(ac){ac(X)}})}else{if(ac){ac(X)}}},switchOffAutoHideShow:function(){m=false},ua:M,getFlashPlayerVersion:function(){return{major:M.pv[0],minor:M.pv[1],release:M.pv[2]}},hasFlashPlayerVersion:F,createSWF:function(Z,Y,X){if(M.w3){return u(Z,Y,X)}else{return undefined}},showExpressInstall:function(Z,aa,X,Y){if(M.w3&&A()){P(Z,aa,X,Y)}},removeSWF:function(X){if(M.w3){y(X)}},createCSS:function(aa,Z,Y,X){if(M.w3){v(aa,Z,Y,X)}},addDomLoadEvent:K,addLoadEvent:s,getQueryParamValue:function(aa){var Z=j.location.search||j.location.hash;if(Z){if(/\\?/.test(Z)){Z=Z.split(\"?\")[1]}if(aa==null){return L(Z)}var Y=Z.split(\"&\");for(var X=0;X<Y.length;X++){if(Y[X].substring(0,Y[X].indexOf(\"=\"))==aa){return L(Y[X].substring((Y[X].indexOf(\"=\")+1)))}}}return\"\"},expressInstallCallback:function(){if(a){var X=c(R);if(X&&l){X.parentNode.replaceChild(l,X);if(Q){w(Q,true);if(M.ie&&M.win){l.style.display=\"block\"}}if(E){E(B)}}a=false}}}}();\n}\n// Copyright: Hiroshi Ichikawa <http://gimite.net/en/>\n// License: New BSD License\n// Reference: http://dev.w3.org/html5/websockets/\n// Reference: http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol\n\n(function() {\n  \n  if ('undefined' == typeof window || window.WebSocket) return;\n\n  var console = window.console;\n  if (!console || !console.log || !console.error) {\n    console = {log: function(){ }, error: function(){ }};\n  }\n  \n  if (!swfobject.hasFlashPlayerVersion(\"10.0.0\")) {\n    console.error(\"Flash Player >= 10.0.0 is required.\");\n    return;\n  }\n  if (location.protocol == \"file:\") {\n    console.error(\n      \"WARNING: web-socket-js doesn't work in file:///... URL \" +\n      \"unless you set Flash Security Settings properly. \" +\n      \"Open the page via Web server i.e. http://...\");\n  }\n\n  /**\n   * This class represents a faux web socket.\n   * @param {string} url\n   * @param {array or string} protocols\n   * @param {string} proxyHost\n   * @param {int} proxyPort\n   * @param {string} headers\n   */\n  WebSocket = function(url, protocols, proxyHost, proxyPort, headers) {\n    var self = this;\n    self.__id = WebSocket.__nextId++;\n    WebSocket.__instances[self.__id] = self;\n    self.readyState = WebSocket.CONNECTING;\n    self.bufferedAmount = 0;\n    self.__events = {};\n    if (!protocols) {\n      protocols = [];\n    } else if (typeof protocols == \"string\") {\n      protocols = [protocols];\n    }\n    // Uses setTimeout() to make sure __createFlash() runs after the caller sets ws.onopen etc.\n    // Otherwise, when onopen fires immediately, onopen is called before it is set.\n    setTimeout(function() {\n      WebSocket.__addTask(function() {\n        WebSocket.__flash.create(\n            self.__id, url, protocols, proxyHost || null, proxyPort || 0, headers || null);\n      });\n    }, 0);\n  };\n\n  /**\n   * Send data to the web socket.\n   * @param {string} data  The data to send to the socket.\n   * @return {boolean}  True for success, false for failure.\n   */\n  WebSocket.prototype.send = function(data) {\n    if (this.readyState == WebSocket.CONNECTING) {\n      throw \"INVALID_STATE_ERR: Web Socket connection has not been established\";\n    }\n    // We use encodeURIComponent() here, because FABridge doesn't work if\n    // the argument includes some characters. We don't use escape() here\n    // because of this:\n    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Functions#escape_and_unescape_Functions\n    // But it looks decodeURIComponent(encodeURIComponent(s)) doesn't\n    // preserve all Unicode characters either e.g. \"\\uffff\" in Firefox.\n    // Note by wtritch: Hopefully this will not be necessary using ExternalInterface.  Will require\n    // additional testing.\n    var result = WebSocket.__flash.send(this.__id, encodeURIComponent(data));\n    if (result < 0) { // success\n      return true;\n    } else {\n      this.bufferedAmount += result;\n      return false;\n    }\n  };\n\n  /**\n   * Close this web socket gracefully.\n   */\n  WebSocket.prototype.close = function() {\n    if (this.readyState == WebSocket.CLOSED || this.readyState == WebSocket.CLOSING) {\n      return;\n    }\n    this.readyState = WebSocket.CLOSING;\n    WebSocket.__flash.close(this.__id);\n  };\n\n  /**\n   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n   *\n   * @param {string} type\n   * @param {function} listener\n   * @param {boolean} useCapture\n   * @return void\n   */\n  WebSocket.prototype.addEventListener = function(type, listener, useCapture) {\n    if (!(type in this.__events)) {\n      this.__events[type] = [];\n    }\n    this.__events[type].push(listener);\n  };\n\n  /**\n   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n   *\n   * @param {string} type\n   * @param {function} listener\n   * @param {boolean} useCapture\n   * @return void\n   */\n  WebSocket.prototype.removeEventListener = function(type, listener, useCapture) {\n    if (!(type in this.__events)) return;\n    var events = this.__events[type];\n    for (var i = events.length - 1; i >= 0; --i) {\n      if (events[i] === listener) {\n        events.splice(i, 1);\n        break;\n      }\n    }\n  };\n\n  /**\n   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n   *\n   * @param {Event} event\n   * @return void\n   */\n  WebSocket.prototype.dispatchEvent = function(event) {\n    var events = this.__events[event.type] || [];\n    for (var i = 0; i < events.length; ++i) {\n      events[i](event);\n    }\n    var handler = this[\"on\" + event.type];\n    if (handler) handler(event);\n  };\n\n  /**\n   * Handles an event from Flash.\n   * @param {Object} flashEvent\n   */\n  WebSocket.prototype.__handleEvent = function(flashEvent) {\n    if (\"readyState\" in flashEvent) {\n      this.readyState = flashEvent.readyState;\n    }\n    if (\"protocol\" in flashEvent) {\n      this.protocol = flashEvent.protocol;\n    }\n    \n    var jsEvent;\n    if (flashEvent.type == \"open\" || flashEvent.type == \"error\") {\n      jsEvent = this.__createSimpleEvent(flashEvent.type);\n    } else if (flashEvent.type == \"close\") {\n      // TODO implement jsEvent.wasClean\n      jsEvent = this.__createSimpleEvent(\"close\");\n    } else if (flashEvent.type == \"message\") {\n      var data = decodeURIComponent(flashEvent.message);\n      jsEvent = this.__createMessageEvent(\"message\", data);\n    } else {\n      throw \"unknown event type: \" + flashEvent.type;\n    }\n    \n    this.dispatchEvent(jsEvent);\n  };\n  \n  WebSocket.prototype.__createSimpleEvent = function(type) {\n    if (document.createEvent && window.Event) {\n      var event = document.createEvent(\"Event\");\n      event.initEvent(type, false, false);\n      return event;\n    } else {\n      return {type: type, bubbles: false, cancelable: false};\n    }\n  };\n  \n  WebSocket.prototype.__createMessageEvent = function(type, data) {\n    if (document.createEvent && window.MessageEvent && !window.opera) {\n      var event = document.createEvent(\"MessageEvent\");\n      event.initMessageEvent(\"message\", false, false, data, null, null, window, null);\n      return event;\n    } else {\n      // IE and Opera, the latter one truncates the data parameter after any 0x00 bytes.\n      return {type: type, data: data, bubbles: false, cancelable: false};\n    }\n  };\n  \n  /**\n   * Define the WebSocket readyState enumeration.\n   */\n  WebSocket.CONNECTING = 0;\n  WebSocket.OPEN = 1;\n  WebSocket.CLOSING = 2;\n  WebSocket.CLOSED = 3;\n\n  WebSocket.__flash = null;\n  WebSocket.__instances = {};\n  WebSocket.__tasks = [];\n  WebSocket.__nextId = 0;\n  \n  /**\n   * Load a new flash security policy file.\n   * @param {string} url\n   */\n  WebSocket.loadFlashPolicyFile = function(url){\n    WebSocket.__addTask(function() {\n      WebSocket.__flash.loadManualPolicyFile(url);\n    });\n  };\n\n  /**\n   * Loads WebSocketMain.swf and creates WebSocketMain object in Flash.\n   */\n  WebSocket.__initialize = function() {\n    if (WebSocket.__flash) return;\n    \n    if (WebSocket.__swfLocation) {\n      // For backword compatibility.\n      window.WEB_SOCKET_SWF_LOCATION = WebSocket.__swfLocation;\n    }\n    if (!window.WEB_SOCKET_SWF_LOCATION) {\n      console.error(\"[WebSocket] set WEB_SOCKET_SWF_LOCATION to location of WebSocketMain.swf\");\n      return;\n    }\n    var container = document.createElement(\"div\");\n    container.id = \"webSocketContainer\";\n    // Hides Flash box. We cannot use display: none or visibility: hidden because it prevents\n    // Flash from loading at least in IE. So we move it out of the screen at (-100, -100).\n    // But this even doesn't work with Flash Lite (e.g. in Droid Incredible). So with Flash\n    // Lite, we put it at (0, 0). This shows 1x1 box visible at left-top corner but this is\n    // the best we can do as far as we know now.\n    container.style.position = \"absolute\";\n    if (WebSocket.__isFlashLite()) {\n      container.style.left = \"0px\";\n      container.style.top = \"0px\";\n    } else {\n      container.style.left = \"-100px\";\n      container.style.top = \"-100px\";\n    }\n    var holder = document.createElement(\"div\");\n    holder.id = \"webSocketFlash\";\n    container.appendChild(holder);\n    document.body.appendChild(container);\n    // See this article for hasPriority:\n    // http://help.adobe.com/en_US/as3/mobile/WS4bebcd66a74275c36cfb8137124318eebc6-7ffd.html\n    swfobject.embedSWF(\n      WEB_SOCKET_SWF_LOCATION,\n      \"webSocketFlash\",\n      \"1\" /* width */,\n      \"1\" /* height */,\n      \"10.0.0\" /* SWF version */,\n      null,\n      null,\n      {hasPriority: true, swliveconnect : true, allowScriptAccess: \"always\"},\n      null,\n      function(e) {\n        if (!e.success) {\n          console.error(\"[WebSocket] swfobject.embedSWF failed\");\n        }\n      });\n  };\n  \n  /**\n   * Called by Flash to notify JS that it's fully loaded and ready\n   * for communication.\n   */\n  WebSocket.__onFlashInitialized = function() {\n    // We need to set a timeout here to avoid round-trip calls\n    // to flash during the initialization process.\n    setTimeout(function() {\n      WebSocket.__flash = document.getElementById(\"webSocketFlash\");\n      WebSocket.__flash.setCallerUrl(location.href);\n      WebSocket.__flash.setDebug(!!window.WEB_SOCKET_DEBUG);\n      for (var i = 0; i < WebSocket.__tasks.length; ++i) {\n        WebSocket.__tasks[i]();\n      }\n      WebSocket.__tasks = [];\n    }, 0);\n  };\n  \n  /**\n   * Called by Flash to notify WebSockets events are fired.\n   */\n  WebSocket.__onFlashEvent = function() {\n    setTimeout(function() {\n      try {\n        // Gets events using receiveEvents() instead of getting it from event object\n        // of Flash event. This is to make sure to keep message order.\n        // It seems sometimes Flash events don't arrive in the same order as they are sent.\n        var events = WebSocket.__flash.receiveEvents();\n        for (var i = 0; i < events.length; ++i) {\n          WebSocket.__instances[events[i].webSocketId].__handleEvent(events[i]);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }, 0);\n    return true;\n  };\n  \n  // Called by Flash.\n  WebSocket.__log = function(message) {\n    console.log(decodeURIComponent(message));\n  };\n  \n  // Called by Flash.\n  WebSocket.__error = function(message) {\n    console.error(decodeURIComponent(message));\n  };\n  \n  WebSocket.__addTask = function(task) {\n    if (WebSocket.__flash) {\n      task();\n    } else {\n      WebSocket.__tasks.push(task);\n    }\n  };\n  \n  /**\n   * Test if the browser is running flash lite.\n   * @return {boolean} True if flash lite is running, false otherwise.\n   */\n  WebSocket.__isFlashLite = function() {\n    if (!window.navigator || !window.navigator.mimeTypes) {\n      return false;\n    }\n    var mimeType = window.navigator.mimeTypes[\"application/x-shockwave-flash\"];\n    if (!mimeType || !mimeType.enabledPlugin || !mimeType.enabledPlugin.filename) {\n      return false;\n    }\n    return mimeType.enabledPlugin.filename.match(/flashlite/i) ? true : false;\n  };\n  \n  if (!window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION) {\n    if (window.addEventListener) {\n      window.addEventListener(\"load\", function(){\n        WebSocket.__initialize();\n      }, false);\n    } else {\n      window.attachEvent(\"onload\", function(){\n        WebSocket.__initialize();\n      });\n    }\n  }\n  \n})();\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   *\n   * @api public\n   */\n\n  exports.XHR = XHR;\n\n  /**\n   * XHR constructor\n   *\n   * @costructor\n   * @api public\n   */\n\n  function XHR (socket) {\n    if (!socket) return;\n\n    io.Transport.apply(this, arguments);\n    this.sendBuffer = [];\n  };\n\n  /**\n   * Inherits from Transport.\n   */\n\n  io.util.inherit(XHR, io.Transport);\n\n  /**\n   * Establish a connection\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  XHR.prototype.open = function () {\n    this.socket.setBuffer(false);\n    this.onOpen();\n    this.get();\n\n    // we need to make sure the request succeeds since we have no indication\n    // whether the request opened or not until it succeeded.\n    this.setCloseTimeout();\n\n    return this;\n  };\n\n  /**\n   * Check if we need to send data to the Socket.IO server, if we have data in our\n   * buffer we encode it and forward it to the `post` method.\n   *\n   * @api private\n   */\n\n  XHR.prototype.payload = function (payload) {\n    var msgs = [];\n\n    for (var i = 0, l = payload.length; i < l; i++) {\n      msgs.push(io.parser.encodePacket(payload[i]));\n    }\n\n    this.send(io.parser.encodePayload(msgs));\n  };\n\n  /**\n   * Send data to the Socket.IO server.\n   *\n   * @param data The message\n   * @returns {Transport}\n   * @api public\n   */\n\n  XHR.prototype.send = function (data) {\n    this.post(data);\n    return this;\n  };\n\n  /**\n   * Posts a encoded message to the Socket.IO server.\n   *\n   * @param {String} data A encoded message.\n   * @api private\n   */\n\n  function empty () { };\n\n  XHR.prototype.post = function (data) {\n    var self = this;\n    this.socket.setBuffer(true);\n\n    function stateChange () {\n      if (this.readyState == 4) {\n        this.onreadystatechange = empty;\n        self.posting = false;\n\n        if (this.status == 200){\n          self.socket.setBuffer(false);\n        } else {\n          self.onClose();\n        }\n      }\n    }\n\n    function onload () {\n      this.onload = empty;\n      self.socket.setBuffer(false);\n    };\n\n    this.sendXHR = this.request('POST');\n\n    if (global.XDomainRequest && this.sendXHR instanceof XDomainRequest) {\n      this.sendXHR.onload = this.sendXHR.onerror = onload;\n    } else {\n      this.sendXHR.onreadystatechange = stateChange;\n    }\n\n    this.sendXHR.send(data);\n  };\n\n  /**\n   * Disconnects the established `XHR` connection.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  XHR.prototype.close = function () {\n    this.onClose();\n    return this;\n  };\n\n  /**\n   * Generates a configured XHR request\n   *\n   * @param {String} url The url that needs to be requested.\n   * @param {String} method The method the request should use.\n   * @returns {XMLHttpRequest}\n   * @api private\n   */\n\n  XHR.prototype.request = function (method) {\n    var req = io.util.request(this.socket.isXDomain())\n      , query = io.util.query(this.socket.options.query, 't=' + +new Date);\n\n    req.open(method || 'GET', this.prepareUrl() + query, true);\n\n    if (method == 'POST') {\n      try {\n        if (req.setRequestHeader) {\n          req.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n        } else {\n          // XDomainRequest\n          req.contentType = 'text/plain';\n        }\n      } catch (e) {}\n    }\n\n    return req;\n  };\n\n  /**\n   * Returns the scheme to use for the transport URLs.\n   *\n   * @api private\n   */\n\n  XHR.prototype.scheme = function () {\n    return this.socket.options.secure ? 'https' : 'http';\n  };\n\n  /**\n   * Check if the XHR transports are supported\n   *\n   * @param {Boolean} xdomain Check if we support cross domain requests.\n   * @returns {Boolean}\n   * @api public\n   */\n\n  XHR.check = function (socket, xdomain) {\n    try {\n      var request = io.util.request(xdomain),\n          usesXDomReq = (global.XDomainRequest && request instanceof XDomainRequest),\n          socketProtocol = (socket && socket.options && socket.options.secure ? 'https:' : 'http:'),\n          isXProtocol = (global.location && socketProtocol != global.location.protocol);\n      if (request && !(usesXDomReq && isXProtocol)) {\n        return true;\n      }\n    } catch(e) {}\n\n    return false;\n  };\n\n  /**\n   * Check if the XHR transport supports cross domain requests.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  XHR.xdomainCheck = function (socket) {\n    return XHR.check(socket, true);\n  };\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.htmlfile = HTMLFile;\n\n  /**\n   * The HTMLFile transport creates a `forever iframe` based transport\n   * for Internet Explorer. Regular forever iframe implementations will \n   * continuously trigger the browsers buzy indicators. If the forever iframe\n   * is created inside a `htmlfile` these indicators will not be trigged.\n   *\n   * @constructor\n   * @extends {io.Transport.XHR}\n   * @api public\n   */\n\n  function HTMLFile (socket) {\n    io.Transport.XHR.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from XHR transport.\n   */\n\n  io.util.inherit(HTMLFile, io.Transport.XHR);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  HTMLFile.prototype.name = 'htmlfile';\n\n  /**\n   * Creates a new Ac...eX `htmlfile` with a forever loading iframe\n   * that can be used to listen to messages. Inside the generated\n   * `htmlfile` a reference will be made to the HTMLFile transport.\n   *\n   * @api private\n   */\n\n  HTMLFile.prototype.get = function () {\n    this.doc = new window[(['Active'].concat('Object').join('X'))]('htmlfile');\n    this.doc.open();\n    this.doc.write('<html></html>');\n    this.doc.close();\n    this.doc.parentWindow.s = this;\n\n    var iframeC = this.doc.createElement('div');\n    iframeC.className = 'socketio';\n\n    this.doc.body.appendChild(iframeC);\n    this.iframe = this.doc.createElement('iframe');\n\n    iframeC.appendChild(this.iframe);\n\n    var self = this\n      , query = io.util.query(this.socket.options.query, 't='+ +new Date);\n\n    this.iframe.src = this.prepareUrl() + query;\n\n    io.util.on(window, 'unload', function () {\n      self.destroy();\n    });\n  };\n\n  /**\n   * The Socket.IO server will write script tags inside the forever\n   * iframe, this function will be used as callback for the incoming\n   * information.\n   *\n   * @param {String} data The message\n   * @param {document} doc Reference to the context\n   * @api private\n   */\n\n  HTMLFile.prototype._ = function (data, doc) {\n    // unescape all forward slashes. see GH-1251\n    data = data.replace(/\\\\\\//g, '/');\n    this.onData(data);\n    try {\n      var script = doc.getElementsByTagName('script')[0];\n      script.parentNode.removeChild(script);\n    } catch (e) { }\n  };\n\n  /**\n   * Destroy the established connection, iframe and `htmlfile`.\n   * And calls the `CollectGarbage` function of Internet Explorer\n   * to release the memory.\n   *\n   * @api private\n   */\n\n  HTMLFile.prototype.destroy = function () {\n    if (this.iframe){\n      try {\n        this.iframe.src = 'about:blank';\n      } catch(e){}\n\n      this.doc = null;\n      this.iframe.parentNode.removeChild(this.iframe);\n      this.iframe = null;\n\n      CollectGarbage();\n    }\n  };\n\n  /**\n   * Disconnects the established connection.\n   *\n   * @returns {Transport} Chaining.\n   * @api public\n   */\n\n  HTMLFile.prototype.close = function () {\n    this.destroy();\n    return io.Transport.XHR.prototype.close.call(this);\n  };\n\n  /**\n   * Checks if the browser supports this transport. The browser\n   * must have an `Ac...eXObject` implementation.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  HTMLFile.check = function (socket) {\n    if (typeof window != \"undefined\" && (['Active'].concat('Object').join('X')) in window){\n      try {\n        var a = new window[(['Active'].concat('Object').join('X'))]('htmlfile');\n        return a && io.Transport.XHR.check(socket);\n      } catch(e){}\n    }\n    return false;\n  };\n\n  /**\n   * Check if cross domain requests are supported.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  HTMLFile.xdomainCheck = function () {\n    // we can probably do handling for sub-domains, we should\n    // test that it's cross domain but a subdomain here\n    return false;\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('htmlfile');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports['xhr-polling'] = XHRPolling;\n\n  /**\n   * The XHR-polling transport uses long polling XHR requests to create a\n   * \"persistent\" connection with the server.\n   *\n   * @constructor\n   * @api public\n   */\n\n  function XHRPolling () {\n    io.Transport.XHR.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from XHR transport.\n   */\n\n  io.util.inherit(XHRPolling, io.Transport.XHR);\n\n  /**\n   * Merge the properties from XHR transport\n   */\n\n  io.util.merge(XHRPolling, io.Transport.XHR);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  XHRPolling.prototype.name = 'xhr-polling';\n\n  /**\n   * Indicates whether heartbeats is enabled for this transport\n   *\n   * @api private\n   */\n\n  XHRPolling.prototype.heartbeats = function () {\n    return false;\n  };\n\n  /** \n   * Establish a connection, for iPhone and Android this will be done once the page\n   * is loaded.\n   *\n   * @returns {Transport} Chaining.\n   * @api public\n   */\n\n  XHRPolling.prototype.open = function () {\n    var self = this;\n\n    io.Transport.XHR.prototype.open.call(self);\n    return false;\n  };\n\n  /**\n   * Starts a XHR request to wait for incoming messages.\n   *\n   * @api private\n   */\n\n  function empty () {};\n\n  XHRPolling.prototype.get = function () {\n    if (!this.isOpen) return;\n\n    var self = this;\n\n    function stateChange () {\n      if (this.readyState == 4) {\n        this.onreadystatechange = empty;\n\n        if (this.status == 200) {\n          self.onData(this.responseText);\n          self.get();\n        } else {\n          self.onClose();\n        }\n      }\n    };\n\n    function onload () {\n      this.onload = empty;\n      this.onerror = empty;\n      self.retryCounter = 1;\n      self.onData(this.responseText);\n      self.get();\n    };\n\n    function onerror () {\n      self.retryCounter ++;\n      if(!self.retryCounter || self.retryCounter > 3) {\n        self.onClose();  \n      } else {\n        self.get();\n      }\n    };\n\n    this.xhr = this.request();\n\n    if (global.XDomainRequest && this.xhr instanceof XDomainRequest) {\n      this.xhr.onload = onload;\n      this.xhr.onerror = onerror;\n    } else {\n      this.xhr.onreadystatechange = stateChange;\n    }\n\n    this.xhr.send(null);\n  };\n\n  /**\n   * Handle the unclean close behavior.\n   *\n   * @api private\n   */\n\n  XHRPolling.prototype.onClose = function () {\n    io.Transport.XHR.prototype.onClose.call(this);\n\n    if (this.xhr) {\n      this.xhr.onreadystatechange = this.xhr.onload = this.xhr.onerror = empty;\n      try {\n        this.xhr.abort();\n      } catch(e){}\n      this.xhr = null;\n    }\n  };\n\n  /**\n   * Webkit based browsers show a infinit spinner when you start a XHR request\n   * before the browsers onload event is called so we need to defer opening of\n   * the transport until the onload event is called. Wrapping the cb in our\n   * defer method solve this.\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  XHRPolling.prototype.ready = function (socket, fn) {\n    var self = this;\n\n    io.util.defer(function () {\n      fn.call(self);\n    });\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('xhr-polling');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n  /**\n   * There is a way to hide the loading indicator in Firefox. If you create and\n   * remove a iframe it will stop showing the current loading indicator.\n   * Unfortunately we can't feature detect that and UA sniffing is evil.\n   *\n   * @api private\n   */\n\n  var indicator = global.document && \"MozAppearance\" in\n    global.document.documentElement.style;\n\n  /**\n   * Expose constructor.\n   */\n\n  exports['jsonp-polling'] = JSONPPolling;\n\n  /**\n   * The JSONP transport creates an persistent connection by dynamically\n   * inserting a script tag in the page. This script tag will receive the\n   * information of the Socket.IO server. When new information is received\n   * it creates a new script tag for the new data stream.\n   *\n   * @constructor\n   * @extends {io.Transport.xhr-polling}\n   * @api public\n   */\n\n  function JSONPPolling (socket) {\n    io.Transport['xhr-polling'].apply(this, arguments);\n\n    this.index = io.j.length;\n\n    var self = this;\n\n    io.j.push(function (msg) {\n      self._(msg);\n    });\n  };\n\n  /**\n   * Inherits from XHR polling transport.\n   */\n\n  io.util.inherit(JSONPPolling, io.Transport['xhr-polling']);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  JSONPPolling.prototype.name = 'jsonp-polling';\n\n  /**\n   * Posts a encoded message to the Socket.IO server using an iframe.\n   * The iframe is used because script tags can create POST based requests.\n   * The iframe is positioned outside of the view so the user does not\n   * notice it's existence.\n   *\n   * @param {String} data A encoded message.\n   * @api private\n   */\n\n  JSONPPolling.prototype.post = function (data) {\n    var self = this\n      , query = io.util.query(\n             this.socket.options.query\n          , 't='+ (+new Date) + '&i=' + this.index\n        );\n\n    if (!this.form) {\n      var form = document.createElement('form')\n        , area = document.createElement('textarea')\n        , id = this.iframeId = 'socketio_iframe_' + this.index\n        , iframe;\n\n      form.className = 'socketio';\n      form.style.position = 'absolute';\n      form.style.top = '0px';\n      form.style.left = '0px';\n      form.style.display = 'none';\n      form.target = id;\n      form.method = 'POST';\n      form.setAttribute('accept-charset', 'utf-8');\n      area.name = 'd';\n      form.appendChild(area);\n      document.body.appendChild(form);\n\n      this.form = form;\n      this.area = area;\n    }\n\n    this.form.action = this.prepareUrl() + query;\n\n    function complete () {\n      initIframe();\n      self.socket.setBuffer(false);\n    };\n\n    function initIframe () {\n      if (self.iframe) {\n        self.form.removeChild(self.iframe);\n      }\n\n      try {\n        // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n        iframe = document.createElement('<iframe name=\"'+ self.iframeId +'\">');\n      } catch (e) {\n        iframe = document.createElement('iframe');\n        iframe.name = self.iframeId;\n      }\n\n      iframe.id = self.iframeId;\n\n      self.form.appendChild(iframe);\n      self.iframe = iframe;\n    };\n\n    initIframe();\n\n    // we temporarily stringify until we figure out how to prevent\n    // browsers from turning `\\n` into `\\r\\n` in form inputs\n    this.area.value = io.JSON.stringify(data);\n\n    try {\n      this.form.submit();\n    } catch(e) {}\n\n    if (this.iframe.attachEvent) {\n      iframe.onreadystatechange = function () {\n        if (self.iframe.readyState == 'complete') {\n          complete();\n        }\n      };\n    } else {\n      this.iframe.onload = complete;\n    }\n\n    this.socket.setBuffer(true);\n  };\n\n  /**\n   * Creates a new JSONP poll that can be used to listen\n   * for messages from the Socket.IO server.\n   *\n   * @api private\n   */\n\n  JSONPPolling.prototype.get = function () {\n    var self = this\n      , script = document.createElement('script')\n      , query = io.util.query(\n             this.socket.options.query\n          , 't='+ (+new Date) + '&i=' + this.index\n        );\n\n    if (this.script) {\n      this.script.parentNode.removeChild(this.script);\n      this.script = null;\n    }\n\n    script.async = true;\n    script.src = this.prepareUrl() + query;\n    script.onerror = function () {\n      self.onClose();\n    };\n\n    var insertAt = document.getElementsByTagName('script')[0];\n    insertAt.parentNode.insertBefore(script, insertAt);\n    this.script = script;\n\n    if (indicator) {\n      setTimeout(function () {\n        var iframe = document.createElement('iframe');\n        document.body.appendChild(iframe);\n        document.body.removeChild(iframe);\n      }, 100);\n    }\n  };\n\n  /**\n   * Callback function for the incoming message stream from the Socket.IO server.\n   *\n   * @param {String} data The message\n   * @api private\n   */\n\n  JSONPPolling.prototype._ = function (msg) {\n    this.onData(msg);\n    if (this.isOpen) {\n      this.get();\n    }\n    return this;\n  };\n\n  /**\n   * The indicator hack only works after onload\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  JSONPPolling.prototype.ready = function (socket, fn) {\n    var self = this;\n    if (!indicator) return fn.call(this);\n\n    io.util.load(function () {\n      fn.call(self);\n    });\n  };\n\n  /**\n   * Checks if browser supports this transport.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  JSONPPolling.check = function () {\n    return 'document' in global;\n  };\n\n  /**\n   * Check if cross domain requests are supported\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  JSONPPolling.xdomainCheck = function () {\n    return true;\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('jsonp-polling');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n\nif (typeof define === \"function\" && define.amd) {\n  define([], function () { return io; });\n}\n})();\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/socket.io-client/dist/socket.io.js\n ** module id = 14\n ** module chunks = 0\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 15\n ** module chunks = 0\n **/","(function (root, factory) {\n    if (typeof exports === 'object') {\n        module.exports = factory();\n    } else if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else {\n        root.urltemplate = factory();\n    }\n}(this, function () {\n  /**\n   * @constructor\n   */\n  function UrlTemplate() {\n  }\n\n  /**\n   * @private\n   * @param {string} str\n   * @return {string}\n   */\n  UrlTemplate.prototype.encodeReserved = function (str) {\n    return str.split(/(%[0-9A-Fa-f]{2})/g).map(function (part) {\n      if (!/%[0-9A-Fa-f]/.test(part)) {\n        part = encodeURI(part);\n      }\n      return part;\n    }).join('');\n  };\n\n  /**\n   * @private\n   * @param {string} operator\n   * @param {string} value\n   * @param {string} key\n   * @return {string}\n   */\n  UrlTemplate.prototype.encodeValue = function (operator, value, key) {\n    value = (operator === '+' || operator === '#') ? this.encodeReserved(value) : encodeURIComponent(value);\n\n    if (key) {\n      return encodeURIComponent(key) + '=' + value;\n    } else {\n      return value;\n    }\n  };\n\n  /**\n   * @private\n   * @param {*} value\n   * @return {boolean}\n   */\n  UrlTemplate.prototype.isDefined = function (value) {\n    return value !== undefined && value !== null;\n  };\n\n  /**\n   * @private\n   * @param {string}\n   * @return {boolean}\n   */\n  UrlTemplate.prototype.isKeyOperator = function (operator) {\n    return operator === ';' || operator === '&' || operator === '?';\n  };\n\n  /**\n   * @private\n   * @param {Object} context\n   * @param {string} operator\n   * @param {string} key\n   * @param {string} modifier\n   */\n  UrlTemplate.prototype.getValues = function (context, operator, key, modifier) {\n    var value = context[key],\n        result = [];\n\n    if (this.isDefined(value) && value !== '') {\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        value = value.toString();\n\n        if (modifier && modifier !== '*') {\n          value = value.substring(0, parseInt(modifier, 10));\n        }\n\n        result.push(this.encodeValue(operator, value, this.isKeyOperator(operator) ? key : null));\n      } else {\n        if (modifier === '*') {\n          if (Array.isArray(value)) {\n            value.filter(this.isDefined).forEach(function (value) {\n              result.push(this.encodeValue(operator, value, this.isKeyOperator(operator) ? key : null));\n            }, this);\n          } else {\n            Object.keys(value).forEach(function (k) {\n              if (this.isDefined(value[k])) {\n                result.push(this.encodeValue(operator, value[k], k));\n              }\n            }, this);\n          }\n        } else {\n          var tmp = [];\n\n          if (Array.isArray(value)) {\n            value.filter(this.isDefined).forEach(function (value) {\n              tmp.push(this.encodeValue(operator, value));\n            }, this);\n          } else {\n            Object.keys(value).forEach(function (k) {\n              if (this.isDefined(value[k])) {\n                tmp.push(encodeURIComponent(k));\n                tmp.push(this.encodeValue(operator, value[k].toString()));\n              }\n            }, this);\n          }\n\n          if (this.isKeyOperator(operator)) {\n            result.push(encodeURIComponent(key) + '=' + tmp.join(','));\n          } else if (tmp.length !== 0) {\n            result.push(tmp.join(','));\n          }\n        }\n      }\n    } else {\n      if (operator === ';') {\n        result.push(encodeURIComponent(key));\n      } else if (value === '' && (operator === '&' || operator === '?')) {\n        result.push(encodeURIComponent(key) + '=');\n      } else if (value === '') {\n        result.push('');\n      }\n    }\n    return result;\n  };\n\n  /**\n   * @param {string} template\n   * @return {function(Object):string}\n   */\n  UrlTemplate.prototype.parse = function (template) {\n    var that = this;\n    var operators = ['+', '#', '.', '/', ';', '?', '&'];\n\n    return {\n      expand: function (context) {\n        return template.replace(/\\{([^\\{\\}]+)\\}|([^\\{\\}]+)/g, function (_, expression, literal) {\n          if (expression) {\n            var operator = null,\n                values = [];\n\n            if (operators.indexOf(expression.charAt(0)) !== -1) {\n              operator = expression.charAt(0);\n              expression = expression.substr(1);\n            }\n\n            expression.split(/,/g).forEach(function (variable) {\n              var tmp = /([^:\\*]*)(?::(\\d+)|(\\*))?/.exec(variable);\n              values.push.apply(values, that.getValues(context, operator, tmp[1], tmp[2] || tmp[3]));\n            });\n\n            if (operator && operator !== '+') {\n              var separator = ',';\n\n              if (operator === '?') {\n                separator = '&';\n              } else if (operator !== '#') {\n                separator = operator;\n              }\n              return (values.length !== 0 ? operator : '') + values.join(separator);\n            } else {\n              return values.join(',');\n            }\n          } else {\n            return that.encodeReserved(literal);\n          }\n        });\n      }\n    };\n  };\n\n  return new UrlTemplate();\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/url-template/lib/url-template.js\n ** module id = 16\n ** module chunks = 0\n **/","/*\n * Copyright 2015, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\nvar log = respoke.log;\n\n/**\n * A direct connection via RTCDataChannel, including state and path negotation.\n * @class respoke.DirectConnection\n * @constructor\n * @augments respoke.EventEmitter\n * @param {string} params\n * @param {string} params.instanceId - client id\n * @param {respoke.Call} params.call - The call that is handling state for this direct connection.\n * @param {boolean} [params.forceTurn] - If true, force the data to flow through relay servers instead of allowing\n * it to flow peer-to-peer. The relay acts like a blind proxy.\n * @param {string} params.connectionId - The connection ID of the remoteEndpoint.\n * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n * @param {function} params.signalReport - Signaling action from SignalingChannel.\n * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n * @param {respoke.DirectConnection.onStart} [params.onStart] - Callback for when setup of the direct connection\n * begins. The direct connection will not be open yet.\n * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors that happen during\n * direct connection setup or media renegotiation.\n * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for closing the direct connection.\n * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for opening the direct connection.\n * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the request\n * for a direct connection and setup is about to begin.\n * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for incoming messages. Not usually\n * necessary to listen to this event if you are already listening to respoke.Endpoint#message.\n * @returns {respoke.DirectConnection}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Client\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n\n    /**\n     * A name to identify this class\n     * @memberof! respoke.DirectConnection\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.DirectConnection';\n    /**\n     * The unique identifier of the direct connection.\n     *\n     * @memberof! respoke.DirectConnection\n     * @name id\n     * @type {string}\n     */\n    that.id = respoke.makeGUID();\n\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name call\n     * @type {respoke.Call}\n     */\n    if (!that.call.caller) {\n        that.call.caller = false;\n    }\n\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name dataChannel\n     * @type {RTCDataChannel}\n     * @private\n     */\n    var dataChannel = null;\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name client\n     * @type {respoke.Client}\n     * @private\n     */\n    var client = respoke.getClient(instanceId);\n\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name pc\n     * @type {RTCPeerConnection}\n     * @private\n     */\n    var pc = params.pc;\n    delete params.pc;\n\n    /**\n     * When the datachannel is availble, we need to attach the callbacks. The event this function is attached to\n     * only fires for the callee.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.listenDataChannel\n     * @param {respoke.Event} evt\n     * @private\n     */\n    function listenDataChannel(evt) {\n        dataChannel = evt.channel;\n        dataChannel.onerror = onDataChannelError;\n        dataChannel.onmessage = onDataChannelMessage;\n        if (dataChannel.readyState === 'open') {\n            dataChannel.onopen = null;\n            onDataChannelOpen();\n        } else {\n            dataChannel.onopen = onDataChannelOpen;\n        }\n    }\n\n    /**\n     * Register any event listeners passed in as callbacks\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.saveParameters\n     * @param {object} params\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for when the direct connection\n     * is closed.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for when the direct connection\n     * is open.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for incoming messages.\n     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n     * connection.\n     * @param {respoke.DirectConnection.onStart} [params.onStart] - Callback for when the direct connection\n     * is being set up. The direct connection will not be open yet.\n     * @param {boolean} [params.forceTurn] - If true, force the data to flow through relay servers instead of allowing\n     * it to flow peer-to-peer. The relay acts like a blind proxy.\n     * @private\n     */\n    function saveParameters(params) {\n        /**\n         * The direct connection is open.\n         * @event respoke.DirectConnection#open\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.listen('open', params.onOpen);\n        /**\n         * The direct connection is closed.\n         * @event respoke.DirectConnection#close\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.listen('close', params.onClose);\n        /**\n         * Incoming message on this direct connection.\n         * @event respoke.DirectConnection#message\n         * @type {respoke.Event}\n         * @property {respoke.TextMessage} message\n         * @property {respoke.Endpoint} endpoint\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.listen('message', params.onMessage);\n        // documented elsewhere\n        that.listen('start', params.onStart);\n        /**\n         * An error occurred while setting up the direct connection.\n         * @event respoke.DirectConnection#error\n         * @type {respoke.Event}\n         * @property {string} reason - A human-readable description of the error.\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.listen('error', params.onError);\n        pc.listen('direct-connection', listenDataChannel, true);\n        pc.listen('stats', function fireStats(evt) {\n            /**\n             * This event is fired every time statistical information about the direct connection\n             * becomes available.\n             * @event respoke.DirectConnection#stats\n             * @type {respoke.Event}\n             * @property {object} stats - an object with stats in it.\n             * @property {respoke.DirectConnection} target\n             * @property {string} name - the event name.\n             */\n            that.fire('stats', {stats: evt.stats});\n        }, true);\n\n    }\n    saveParameters(params);\n\n    delete that.onOpen;\n    delete that.onClose;\n    delete that.onMessage;\n\n    /**\n     * Return media stats. Since we have to wait for both the answer and offer to be available before starting\n     * statistics, we'll return a promise for the stats object.\n     *\n     *     directConnection.getStats({\n     *         onStats: function (evt) {\n     *             console.log('Stats', evt.stats);\n     *         }\n     *     }).done(function () {\n     *         console.log('Stats started.');\n     *     }, function (err) {\n     *         console.log('Direct connection is already closed.');\n     *     });\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.getStats\n     * @returns {Promise<object>|undefined}\n     * @param {object} params\n     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive the\n     * stats if the Respoke stats module is loaded. If no callback is provided, the connection's report will\n     * contain stats but the developer will not receive them on the client-side.\n     * @param {respoke.DirectConnection.statsSuccessHandler} [params.onSuccess] - Success handler for this\n     * invocation of this method only.\n     * @param {respoke.DirectConnection.errorHandler} [params.onError] - Error handler for this invocation of\n     * this method only.\n     */\n    that.getStats = function (params) {\n        if (pc && pc.getStats) {\n            that.listen('stats', params.onStats);\n            delete params.onStats;\n            return pc.getStats(params);\n        }\n        return null;\n    };\n\n    if (!respoke.MediaStats) {\n        delete that.getStats;\n    }\n\n    /**\n     * Detect datachannel errors for internal state.\n     * @memberof! respoke.DirectConnection\n     * @private\n     * @method respoke.DirectConnection.onDataChannelError\n     */\n    function onDataChannelError(error) {\n        /**\n         * Indicate that an error has occurred setting up the direct connection.\n         * @event respoke.DirectConnection#error\n         * @type {respoke.Event}\n         * @property {object} error\n         * @property {respoke.DirectConnection} directConnection\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('error', {\n            error: error\n        });\n        that.close();\n    }\n\n    /**\n     * Receive and route messages to the Endpoint.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.onDataChannelMessage\n     * @private\n     * @param {MessageEvent}\n     * @fires respoke.DirectConnection#message\n     */\n    function onDataChannelMessage(evt) {\n        var message;\n        try {\n            message = JSON.parse(evt.data);\n        } catch (e) {\n            message = evt.data;\n        }\n        /**\n         * A message has been received over the direct connection.\n         * @event respoke.Endpoint#message\n         * @type {respoke.Event}\n         * @property {object} message\n         * @property {respoke.DirectConnection} directConnection\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.call.remoteEndpoint.fire('message', {\n            message: message,\n            directConnection: that\n        });\n        /**\n         * A message has been received over the direct connection.\n         * @event respoke.DirectConnection#message\n         * @type {respoke.Event}\n         * @property {object} message\n         * @property {respoke.Endpoint} endpoint\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('message', {\n            message: message,\n            endpoint: that.call.remoteEndpoint\n        });\n    }\n\n    /**\n     * Detect when the channel is open.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.onDataChannelOpen\n     * @private\n     * @param {MessageEvent}\n     * @fires respoke.DirectConnection#open\n     */\n    function onDataChannelOpen(evt) {\n        //dataChannel = evt.target || evt.channel;\n        /**\n         * The direct connection is open.\n         * @event respoke.DirectConnection#open\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('open');\n    }\n\n    /**\n     * Detect when the channel is closed.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.onDataChannelClose\n     * @private\n     * @param {MessageEvent}\n     * @fires respoke.DirectConnection#close\n     */\n    function onDataChannelClose(evt) {\n        //dataChannel = evt.target || evt.channel;\n        /**\n         * The direct connection is closed.\n         * @event respoke.DirectConnection#close\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('close');\n    }\n\n    /**\n     * Create the datachannel. For the caller, set up all the handlers we'll need to keep track of the\n     * datachannel's state and to receive messages.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.createDataChannel\n     * @private\n     */\n    function createDataChannel() {\n        dataChannel = pc.createDataChannel(\"respokeDataChannel\");\n        dataChannel.binaryType = 'arraybuffer';\n        dataChannel.onerror = onDataChannelError;\n        dataChannel.onmessage = onDataChannelMessage;\n        dataChannel.onopen = onDataChannelOpen;\n\n        /**\n         * The direct connection setup has begun. This does NOT mean it's ready to send messages yet. Listen to\n         * DirectConnection#open for that notification.\n         * @event respoke.DirectConnection#start\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('start');\n    }\n\n    /**\n     * Start the process of obtaining media. saveParameters will only be meaningful for the callee,\n     * since the library calls this method for the caller. Developers will use this method to pass in\n     * callbacks for the callee.\n     *\n     *     directConnection.accept({\n     *         onOpen: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.accept\n     * @fires respoke.DirectConnection#accept\n     * @param {object} params\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen]\n     * @param {respoke.DirectConnection.onClose} [params.onClose]\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage]\n     */\n    that.accept = function (params) {\n        params = params || {};\n        log.debug('DirectConnection.accept');\n        saveParameters(params);\n\n        log.debug(\"I am \" + (pc.state.caller ? '' : 'not ') + \"the caller.\");\n\n        if (pc.state.caller === true) {\n            createDataChannel();\n        }\n        that.call.answer();\n\n        /**\n         * The request to open a direct connection has been accepted.\n         * @event respoke.DirectConnection#accept\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('accept');\n    };\n\n    /**\n     * Tear down the connection.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.close\n     * @fires respoke.DirectConnection#close\n     */\n    that.close = function (params) {\n        params = params || {};\n        log.debug(\"DirectConnection.close\");\n\n        if (that.call && that.call.remoteEndpoint) {\n            that.call.remoteEndpoint.directConnection = null;\n        }\n\n        if (dataChannel) {\n            dataChannel.close();\n        }\n\n        /**\n         * The direct connection has been closed.\n         * @event respoke.DirectConnection#close\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('close');\n\n        that.ignore();\n\n        if (that.call && params.skipRemove !== true) {\n            that.call.removeDirectConnection();\n        }\n\n        dataChannel = null;\n        that.call = null;\n        pc = null;\n    };\n\n    /**\n     * Send a message over the datachannel in the form of a JSON-encoded plain old JavaScript object. Only one\n     * attribute may be given: either a string 'message' or an object 'object'.\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     *\n     *     directConnection.sendMessage({\n     *         message: \"And they say HTTP is stateless!\"\n     *     });\n     *\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.sendMessage\n     * @param {object} params\n     * @param {string} [params.message] - The message to send.\n     * @param {object} [params.object] - An object to send.\n     * @param {respoke.DirectConnection.sendHandler} [params.onSuccess] - Success handler for this invocation\n     * of this method only.\n     * @param {respoke.DirectConnection.errorHandler} [params.onError] - Error handler for this invocation\n     * of this method only.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n        if (that.isActive()) {\n            dataChannel.send(JSON.stringify(params.object || {\n                message: params.message\n            }));\n            deferred.resolve();\n        } else {\n            deferred.reject(new Error(\"dataChannel not in an open state.\"));\n        }\n        return retVal;\n    };\n\n    /**\n     * Expose close as reject for approve/reject workflow.\n     *\n     *     client.listen('direct-connection, function (evt) {\n     *         if (iDontLikeThisPerson()) {\n     *             evt.directConnection.reject();\n     *         }\n     *     });\n     *\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.reject\n     * @param {boolean} signal - Optional flag to indicate whether to send or suppress sending\n     * a hangup signal to the remote side.\n     */\n    that.reject = that.close;\n\n    /**\n     * Indicate whether a datachannel is being setup or is in progress.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.isActive\n     * @returns {boolean}\n     */\n    that.isActive = function () {\n        // Why does pc.iceConnectionState not transition into 'connected' even though media is flowing?\n        //return (pc && pc.isActive() && dataChannel && dataChannel.readyState === 'open');\n        return (dataChannel && dataChannel.readyState === 'open');\n    };\n\n    return that;\n}; // End respoke.DirectConnection\n\n/**\n * Called when the direct connection is closed.  This callback is called every time respoke.DirectConnection#close\n * fires.\n * @callback respoke.DirectConnection.onClose\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Called when the setup of the direct connection has begun. The direct connection will not be open yet. This\n * callback is called every time respoke.DirectConnection#start fires.\n * @callback respoke.DirectConnection.onStart\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Called when the direct connection is opened.  This callback is called every time respoke.DirectConnection#open\n * fires.\n * @callback respoke.DirectConnection.onOpen\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Called when a message is received over the direct connection.  This callback is called every time\n * respoke.DirectConnection#message fires.\n * @callback respoke.DirectConnection.onMessage\n * @param {respoke.Event} evt\n * @param {object} evt.message\n * @param {respoke.Endpoint} evt.endpoint\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Handle an error that resulted from a specific method call. This handler will not fire more than once.\n * @callback respoke.DirectConnection.errorHandler\n * @param {Error} err\n */\n/**\n * When a call is in setup or media renegotiation happens. This callback will be called every time\n * respoke.DirectConnection#error.\n * @callback respoke.DirectConnection.onError\n * @param {respoke.Event} evt\n * @param {boolean} evt.reason - A human-readable description of the error.\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Called when the callee accepts the direct connection. This callback is called every time\n * respoke.DirectConnection#accept is fired.\n * @callback respoke.DirectConnection.onAccept\n * @param {respoke.Event} evt\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Handle the successful kick-off of stats on a call.\n * @callback respoke.DirectConnection.statsSuccessHandler\n * @param {respoke.Event} evt\n * @param {object} evt.stats - an object with stats in it.\n * @param {respoke.DirectConnection} evt.target\n * @param {string} evt.name - the event name.\n */\n/**\n * Handle sending successfully.\n * @callback respoke.DirectConnection.sendHandler\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/directConnection.js\n ** module id = 17\n ** module chunks = 0\n **/","/*\n * Copyright 2015, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\nvar log = respoke.log;\nvar Statechart = require('statechart');\n\n/**\n * WebRTC PeerConnection. This class handles all the state and connectivity for Call and DirectConnection.\n * This class cannot be used alone, but is instantiated by and must be given media by either Call, DirectConnection,\n * or the not-yet-implemented ScreenShare.\n * @class respoke.PeerConnection\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.instanceId - client id\n * @param {boolean} [params.forceTurn] - If true, delete all 'host' and 'srvflx' candidates and send only 'relay'\n * candidates.\n * @param {boolean} [params.disableTurn] - If true, delete all 'relay' candidates and send only 'host' and 'srvflx'\n * candidates.\n * @param {respoke.Call} params.call\n * @param {string} params.connectionId - The connection ID of the remoteEndpoint.\n * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n * @param {function} params.signalModify - Signaling action from SignalingChannel.\n * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n * @param {function} params.signalReport - Signaling action from SignalingChannel.\n * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n * @param {respoke.Call.onHangup} [params.onHangup] - Callback for the developer to be notified about hangup.\n * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for the developer to receive\n * statistics about the call. This is only used if call.getStats() is called and the stats module is loaded.\n * @param {object} [params.pcOptions]\n * @param {object} [params.offerOptions]\n * @returns {respoke.PeerConnection}\n */\n\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.PeerConnection';\n\n    /**\n     * Whether or not we will send a 'hangup' signal to the other side during hangup.\n     * @memberof! respoke.PeerConnection\n     * @name toSendHangup\n     * @type {respoke.Endpoint}\n     */\n    var toSendHangup;\n\n    /**\n     * @memberof! respoke.PeerConnection\n     * @private\n     * @name pc\n     * @type RTCPeerConnection\n     * @desc The RTCPeerConnection as provided by the browser API. All internal state, networking functionality, and\n     * raw data transfer occurs within the PeerConnection.\n     */\n    var pc = null;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name defModify\n     * @private\n     * @type {Promise}\n     * @desc Used in the state machine to trigger methods or functions whose execution depends on the reception,\n     * handling, or sending of some information.\n     */\n    var defModify;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name previewLocalMedia\n     * @private\n     * @type {respoke.Call.previewLocalMedia}\n     * @desc A callback provided by the developer that we'll call after receiving local media and before\n     * approve() is called.\n     */\n    var previewLocalMedia = typeof params.previewLocalMedia === 'function' ? params.previewLocalMedia : undefined;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name candidateReceivingQueue\n     * @private\n     * @type {array}\n     * @desc An array to save candidates between offer and answer so that both parties can process them simultaneously.\n     */\n    var candidateReceivingQueue = respoke.queueFactory();\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name client\n     * @private\n     * @type {respoke.Client}\n     */\n    var client = respoke.getClient(instanceId);\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalOffer\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalOffer = params.signalOffer;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalConnected\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalConnected = params.signalConnected;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalModify\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalModify = params.signalModify;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalAnswer\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalAnswer = params.signalAnswer;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalHangup\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalHangup = respoke.callOnce(params.signalHangup);\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalReport\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalReport = params.signalReport;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalCandidateOrig\n     * @private\n     * @type {function}\n     * @desc A temporary function saved from params in order to construct the candidate signaling function.\n     */\n    var signalCandidateOrig = params.signalCandidate;\n\n    /**\n     * The RTCDTMFSender as provided by the browser API.\n     * @memberof! respoke.PeerConnection\n     * @private\n     * @name digitSender\n     * @type RTCDigitSender\n     */\n\n    var digitSender = null;\n\n    /**\n     * A temporary variable to define if we're in the middle of cancelling any tones on a peer connection\n     * @memberof! respoke.PeerConnection\n     * @private\n     * @name cancellingTones\n     * @type boolean\n     */\n\n    var cancellingTones = false;\n\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalCandidates\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed from the one passed to us by the signaling channel with additions\n     * to facilitate candidate logging.\n     */\n\n    function signalCandidates(params) {\n        if (!pc) {\n            return Q.resolve();\n        }\n\n        params.call = that.call;\n        that.report.candidatesSent = that.report.candidatesSent.concat(params.iceCandidates);\n\n        return signalCandidateOrig(params);\n    }\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name sdpExpectedStreamCount\n     * @private\n     * @type {number}\n     */\n    that.sdpExpectedStreamCount = 0;\n\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name offerOptions\n     * @private\n     * @type {object}\n     */\n    var offerOptions = params.offerOptions || {};\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name pcOptions\n     * @private\n     * @type {object}\n     */\n    var pcOptions = params.pcOptions || {\n        optional: [\n            { DtlsSrtpKeyAgreement: true },\n            { RtpDataChannels: false }\n        ]\n    };\n\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name report\n     * @type {object}\n     */\n    that.report = {\n        callStarted: 0,\n        callStopped: 0,\n        callerendpoint: that.call.caller ? client.name : that.call.remoteEndpoint.id,\n        callerconnection: that.call.caller ? client.id : that.call.connectionId,\n        calleeendpoint: that.call.caller ? that.call.remoteEndpoint.id : client.id,\n        calleeconnection: that.call.caller ? that.call.connectionId : client.connectionId,\n        sessionId: that.call.id,\n        lastSDPString: '',\n        sdpsSent: [],\n        sdpsReceived: [],\n        candidatesSent: [],\n        candidatesReceived: [],\n        userAgent: navigator.userAgent,\n        os: navigator.platform\n    };\n\n    /**\n     * Start the process of network and media negotiation. Called after local video approved.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.initOffer\n     * @fires respoke.PeerConnection#initOffer\n     * @private\n     */\n    function initOffer() {\n        if (!pc) {\n            return;\n        }\n\n        if (that.state.receiveOnly) {\n            makeOptionsReceiveOnly(offerOptions);\n        }\n\n        if (that.state.sendOnly) {\n            makeOptionsSendOnly(offerOptions);\n        }\n\n        log.info('creating offer', offerOptions);\n        pc.createOffer(saveOfferAndSend, function errorHandler(p) {\n            log.error('createOffer failed');\n        }, offerOptions);\n    }\n\n    function makeOptionsReceiveOnly(options) {\n        if (navigator.webkitGetUserMedia) {\n            options.mandatory = {\n                OfferToReceiveVideo: true,\n                OfferToReceiveAudio: true,\n                OfferToSendVideo: false,\n                OfferToSendAudio: false\n            };\n        } else {\n            options.offerToReceiveVideo = true;\n            options.offerToReceiveAudio = true;\n            options.offerToSendVideo = false;\n            options.offerToSendAudio = false;\n        }\n    }\n\n    function makeOptionsSendOnly(options) {\n        if (navigator.webkitGetUserMedia) {\n            options.mandatory = {\n                OfferToSendVideo: true,\n                OfferToSendAudio: true,\n                OfferToReceiveVideo: false,\n                OfferToReceiveAudio: false\n            };\n        } else {\n            options.offerToSendVideo = true;\n            options.offerToSendAudio = true;\n            options.offerToReceiveVideo = false;\n            options.offerToReceiveAudio = false;\n        }\n    }\n\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name localCandidates\n     * @private\n     * @type {array}\n     * @desc An array to save local candidates, to retransmit for peers that\n     *       don't support trickle ice.\n     */\n    var localCandidates = [];\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name localCandidatesComplete\n     * @private\n     * @type {boolean}\n     * @desc Whether all the local candidates have been received.\n     */\n    var localCandidatesComplete = false;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name localCandidatesSent\n     * @private\n     * @type {number}\n     * @desc The number of local candidates that have been sent to the remote.\n     */\n    var localCandidatesSent = 0;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name localCandidatesSent\n     * @private\n     * @type {Statechart}\n     * @desc FSM for managing local ICE candidates.\n     */\n    var localCandidatesFSM;\n\n    /**\n     * The number of local candidates that have not yet been sent.\n     * @returns {number}\n     * @private\n     */\n    function localCandidatesRemaining() {\n        return localCandidates.length - localCandidatesSent;\n    }\n\n    /**\n     * Throw another local ICE candidate on the pile\n     * @param params\n     * @param params.candidate ICE candidate\n     * @private\n     */\n    function collectLocalIceCandidate(params) {\n        if (params && params.candidate) {\n            localCandidates.push(params.candidate);\n        }\n    }\n\n    /**\n     * Send the remaining local candidates that have not yet been sent.\n     * @private\n     */\n    function sendRemainingCandidates() {\n        var remainingCandidates = localCandidates.slice(localCandidatesSent);\n        var params = {iceCandidates: remainingCandidates};\n\n        localCandidatesSent += remainingCandidates.length;\n\n        if (localCandidatesComplete) {\n            params.finalCandidates = localCandidates;\n        }\n\n        signalCandidates(params)\n            .finally(function () {\n                localCandidatesFSM.dispatch('iceSent');\n            }).done();\n    }\n\n    localCandidatesFSM = respoke.Class({\n        that: Object.create(Statechart),\n        initialState: 'buffering',\n        states: {\n            buffering: {\n                localIceCandidate: {action: collectLocalIceCandidate},\n                ready: {\n                    target: 'sending',\n                    action: sendRemainingCandidates\n                }\n            },\n            sending: {\n                localIceCandidate: {action: collectLocalIceCandidate},\n                iceSent: [{\n                    guard: function () {\n                        return localCandidatesRemaining() === 0;\n                    },\n                    target: 'waiting'\n                }, {\n                    guard: function () {\n                        return localCandidatesRemaining() !== 0;\n                    },\n                    action: sendRemainingCandidates\n                }]\n            },\n            waiting: {\n                localIceCandidate: {\n                    action: function (params) {\n                        collectLocalIceCandidate(params);\n                        sendRemainingCandidates();\n                    },\n                    target: 'sending'\n                }\n            }\n        }\n    });\n\n    localCandidatesFSM.run();\n\n    /**\n     * Process a remote offer if we are not the caller. This is necessary because we don't process the offer until\n     * the callee has answered the call.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.processOffer\n     * @param {RTCSessionDescriptor}\n     * @returns {Promise}\n     */\n    that.processOffer = function (oOffer) {\n        if (!pc) {\n            return;\n        }\n        log.debug('processOffer', oOffer);\n\n        that.report.sdpsReceived.push(oOffer);\n        that.report.lastSDPString = oOffer.sdp;\n\n        //set flags for audio / video being offered\n        that.sdpExpectedStreamCount = respoke.sdpStreamCount(oOffer.sdp);\n        that.call.hasDataChannel = respoke.sdpHasDataChannel(oOffer.sdp);\n\n        try {\n            pc.setRemoteDescription(new RTCSessionDescription(oOffer),\n                function successHandler() {\n                    if (!pc) {\n                        return;\n                    }\n\n                    processReceivingQueue();\n                    log.debug('set remote desc of offer succeeded');\n                    pc.createAnswer(function successHandler(oSession) {\n                        that.state.processedRemoteSDP = true;\n                        saveAnswerAndSend(oSession);\n                    }, function errorHandler(err) {\n                        err = new Error(\"Error creating SDP answer.\" + err.message);\n                        that.report.callStoppedReason = err.message;\n                        /**\n                         * This event is fired on errors that occur during call setup or media negotiation.\n                         * @event respoke.Call#error\n                         * @type {respoke.Event}\n                         * @property {string} reason - A human readable description about the error.\n                         * @property {respoke.Call} target\n                         * @property {string} name - the event name.\n                         */\n                        that.call.fire('error', {\n                            message: err.message\n                        });\n                        log.error('create answer failed');\n                        that.report.callStoppedReason = 'setRemoteDescription failed at answer.';\n                        that.close();\n                    });\n                }, function errorHandler(err) {\n                    err = new Error('Error calling setRemoteDescription on offer I received.' + err.message);\n                    that.report.callStoppedReason = err.message;\n                    /**\n                     * This event is fired on errors that occur during call setup or media negotiation.\n                     * @event respoke.Call#error\n                     * @type {respoke.Event}\n                     * @property {string} reason - A human readable description about the error.\n                     * @property {respoke.Call} target\n                     * @property {string} name - the event name.\n                     */\n                    that.call.fire('error', {\n                        message: err.message\n                    });\n                }\n            );\n        } catch (err) {\n            var newErr = new Error(\"Exception calling setRemoteDescription on offer I received.\" + err.message);\n            that.report.callStoppedReason = newErr.message;\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.call.fire('error', {\n                message: newErr.message\n            });\n        }\n    };\n\n    /**\n     * Return media stats. Since we have to wait for both the answer and offer to be available before starting\n     * statistics, we'll return a promise for the stats object.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.getStats\n     * @returns {Promise<{respoke.MediaStatsParser}>|undefined}\n     * @param {object} params\n     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onSuccess] - Success handler for this\n     * invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @fires respoke.PeerConnection#stats\n     */\n    function getStats(params) {\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n        if (!respoke.MediaStats) {\n            deferred.reject(new Error(\"Statistics module is not loaded.\"));\n            return retVal;\n        }\n\n        function onConnect() {\n            var stats = respoke.MediaStatsParser({\n                peerConnection: pc,\n                interval: params.interval,\n                onStats: function statsHandler(stats) {\n                    if (!pc) {\n                        return;\n                    }\n\n                    /**\n                     * This event is fired every 5 seconds by default, configurable by the 'interval' property to\n                     * `call.startStats` and reports the current state of media statistics.\n                     * @event respoke.PeerConnection#stats\n                     * @type {respoke.Event}\n                     * @property {object} stats - an object with stats in it.\n                     * @property {string} name - the event name.\n                     * @property {respoke.PeerConnection}\n                     */\n                    that.fire('stats', {\n                        stats: stats\n                    });\n                }\n            });\n            that.listen('close', function closeHandler(evt) {\n\n                stats.stopStats();\n            }, true);\n            deferred.resolve();\n        }\n\n        if (!pc) {\n            that.once('stream-received', onConnect);\n        } else {\n            onConnect();\n        }\n\n        return retVal;\n    }\n\n    if (respoke.MediaStats) {\n        that.getStats = getStats;\n    }\n\n    /**\n     * Create the RTCPeerConnection and add handlers. Process any offer we have already received.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.init\n     */\n    that.init = function init() {\n        log.debug('PC.init');\n\n        if (pc) {\n            return;\n        }\n\n        that.report.callStarted = new Date().getTime();\n\n        pc = new RTCPeerConnection(that.servers, pcOptions);\n        pc.onicecandidate = onIceCandidate;\n        pc.onnegotiationneeded = onNegotiationNeeded;\n        pc.oniceconnectionstatechange = onIceConnectionStateChange;\n        pc.onaddstream = function onaddstream(evt) {\n            /**\n             * Indicate the RTCPeerConnection has received remote media.\n             * @event respoke.PeerConnection#remote-stream-received\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('remote-stream-received', {\n                stream: evt.stream\n            });\n        };\n        pc.onremovestream = function onremovestream(evt) {\n            /**\n             * Indicate the remote side has stopped sending media.\n             * @event respoke.PeerConnection#remote-stream-removed\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('remote-stream-removed', {\n                stream: evt.stream\n            });\n        };\n        pc.ondatachannel = function ondatachannel(evt) {\n            /**\n             * CAUTION: This event is only called for the callee because RTCPeerConnection#ondatachannel\n             * is only called for the callee.\n             * @event respoke.PeerConnection#direct-connection\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('direct-connection', {\n                channel: evt.channel\n            });\n        };\n\n        that.state.listen('offering:entry', function (evt) {\n            if (that.state.caller) {\n                initOffer();\n            }\n        });\n    };\n\n    /**\n     * Return an array of remote media streams.\n     * @muremberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.getRemoteStreams\n     */\n    that.getRemoteStreams = function () {\n        if (!pc) {\n            return [];\n        }\n        return pc.getRemoteStreams.apply(pc, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Return an array of local media streams.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.getLocalStreams\n     */\n    that.getLocalStreams = function () {\n        if (!pc) {\n            return [];\n        }\n        return pc.getLocalStreams.apply(pc, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Create a data channel.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.createDataChannel\n     */\n    that.createDataChannel = function () {\n        if (!pc) {\n            return;\n        }\n        return pc.createDataChannel.apply(pc, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.addStream\n     * Expose addStream.\n     * @param {RTCMediaStream}\n     */\n    that.addStream = function (stream) {\n        if (!pc) {\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.call.fire('error', {\n                message: \"Got local stream in a precall state.\"\n            });\n            return;\n        }\n        pc.addStream(stream);\n    };\n\n    /**\n     * Process a local ICE Candidate\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.onIceCandidate\n     * @private\n     * @param {RTCIceCandidate}\n     */\n    function onIceCandidate(oCan) {\n        var candidate = oCan.candidate; // {candidate: ..., sdpMLineIndex: ... }\n        if (!pc) {\n            return;\n        }\n\n        // From http://www.w3.org/TR/webrtc/#operation\n        // If the intent of the ICE Agent is to notify the script that:\n        //  [snip]\n        //  * The gathering process is done.\n        //    Set connection's ice gathering state to completed and let newCandidate be null.\n        if (!candidate || !candidate.candidate) {\n            if (pc.iceGatheringState === 'complete') {\n                localCandidatesComplete = true;\n                localCandidatesFSM.dispatch('localIceCandidate');\n            }\n            return;\n        }\n\n        if (that.forceTurn === true && candidate.candidate.indexOf(\"typ relay\") === -1) {\n            log.debug(\"Dropping candidate because forceTurn is on.\");\n            return;\n        } else if (that.disableTurn === true && candidate.candidate.indexOf(\"typ relay\") !== -1) {\n            log.debug(\"Dropping candidate because disableTurn is on.\");\n            return;\n        }\n\n        localCandidatesFSM.dispatch('localIceCandidate', {candidate: candidate});\n    }\n\n    /**\n     * Handle ICE state change\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.onIceConnectionStateChange\n     * @private\n     */\n    function onIceConnectionStateChange(evt) {\n        if (!pc) {\n            return;\n        }\n\n        if (pc.iceConnectionState === 'connected') {\n            /**\n             * Indicate that we've successfully connected to the remote side. This is only helpful for the\n             * outgoing connection.\n             * @event respoke.PeerConnection#connect\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('connect');\n        }\n    }\n\n    /**\n     * Handle renegotiation\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.onNegotiationNeeded\n     * @private\n     */\n    function onNegotiationNeeded() {\n        log.warn(\"Negotiation needed.\");\n    }\n\n    /**\n     * Process any ICE candidates that we received from the other side while we were waiting on the other\n     * party's SDP to arrive and be processed.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.processReceivingQueue\n     * @private\n     */\n    function processReceivingQueue() {\n        candidateReceivingQueue.trigger(function processIce(can) {\n            if (!pc) {\n                return;\n            }\n\n            pc.addIceCandidate(new RTCIceCandidate(can.candidate), function onSuccess() {\n                log.debug((that.state.caller ? 'caller' : 'callee'), 'got a remote candidate.', can.candidate);\n                that.report.candidatesReceived.push(can.candidate);\n            }, function onError(e) {\n                log.error(\"Couldn't add ICE candidate: \" + e.message, can.candidate);\n            });\n        });\n    }\n\n    /**\n     * Save an SDP we've gotten from the browser which will be an offer and send it to the other\n     * side.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.saveOfferAndSend\n     * @param {RTCSessionDescription}\n     * @private\n     */\n    function saveOfferAndSend(oSession) {\n        oSession.type = 'offer';\n        if (!pc) {\n            return;\n        }\n        log.debug('setting and sending offer', oSession);\n        that.report.sdpsSent.push(oSession);\n\n        pc.setLocalDescription(oSession, function successHandler(p) {\n            oSession.type = 'offer';\n            signalOffer({\n                call: that.call,\n                sessionDescription: oSession,\n                onSuccess: function () {\n                    that.state.sentSDP = true;\n                    localCandidatesFSM.dispatch('ready');\n                },\n                onError: function (err) {\n                    log.error('offer could not be sent', err);\n                    that.call.hangup({signal: false});\n                }\n            });\n        }, function errorHandler(p) {\n            var err = new Error('Error calling setLocalDescription on offer I created.');\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.call.fire('error', {\n                message: err.message\n            });\n        });\n    }\n\n    /**\n     * Save our SDP we've gotten from the browser which will be an answer and send it to the\n     * other side.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.saveAnswerAndSend\n     * @param {RTCSessionDescription}\n     * @private\n     */\n    function saveAnswerAndSend(oSession) {\n        if (!pc) {\n            return;\n        }\n\n        if (!that.state.caller) {\n            that.report.callerconnection = that.call.connectionId;\n        }\n\n        oSession.type = 'answer';\n        log.debug('setting and sending answer', oSession);\n        that.report.sdpsSent.push(oSession);\n\n        pc.setLocalDescription(oSession, function successHandler(p) {\n            oSession.type = 'answer';\n            signalAnswer({\n                sessionDescription: oSession,\n                call: that.call,\n                onSuccess: function () {\n                    localCandidatesFSM.dispatch('ready');\n                }\n            });\n            that.state.sentSDP = true;\n        }, function errorHandler(p) {\n            var err = new Error('Error calling setLocalDescription on answer I created.');\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.call.fire('error', {\n                message: err.message\n            });\n        });\n    }\n\n    /**\n     * Send what are known in telecom world as DTMF tones to the other party. This allows the user to interact with\n     * IVRs when connected to a PSTN phone call for example.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.sendTones\n     * @param {object} param\n     * @param {string} [param.tones] - This string can be made up of the characters `0 through to 9`, `A through\n     to D`, a `#` or a `*` and are case insensitive. These characters form tones of different frequencies.\n     You can also include the character `,` to insert a delay of 2 seconds before sending the next tone.\n     * @param {number} [param.duration] - Optional number in milliseconds to indicate how long to play the individual\n     tone for. This value needs to be between 40 and 6000 and defaults to 100.\n     * @param {number} [param.gap] - Optional number in mlliseconds to indicate the gap between playing the tones.\n     This value needs to be larger than 30 and defaults to 70.\n     * @param {function} [params.onSuccess] - Success handler for this invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @fires respoke.PeerConnection#tone-sent\n     * @fires respoke.PeerConnection#tone-sending-complete\n     */\n\n    that.sendTones = function (params) {\n        var deferred = Q.defer();\n\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n        params = typeof params === 'object' ? params  : {};\n\n        params.duration = params.duration || 100;\n        params.gap = params.gap || 50;//chrome says minimum is 50 not 30 like the spec\n\n        var err;\n\n        if (!pc) {\n            err = new Error('No Peer Connection available');\n        }\n        if (!params.tones) {\n            err = new Error('Unable to send tones as none passed in');\n        }\n\n        if (params.duration > 6000 || params.duration < 40) {\n            err = new Error('Unable to send tones as duration needs to be between 40 and 6000 milliseconds');\n        }\n\n        if (params.gap < 50 ) {\n            err = new Error('Unable to send tones as gap needs to be greater than 50 milliseconds');\n        }\n\n        if (params.tones && !params.tones.match(/^([A-D0-9,#*])+$/ig)) {\n            err = new Error('Unable to send tones as tones passed in were not in correct format');\n        }\n\n        if (pc && !pc.createDTMFSender) {\n            err = new Error('Unable to send tones in this browser');\n        }\n\n        if (err) {\n            log.warn(err);\n            deferred.reject(err);\n            return retVal;\n        }\n\n        if (digitSender) {\n            err = new Error('Unable to queue tones on audio track as a digitSender already exists');\n            log.warn(err);\n            deferred.reject(err);\n            return retVal;\n        }\n\n        var audioTracks = that.call.outgoingMedia.getAudioTracks();\n        if (!audioTracks || audioTracks.length < 1) {\n            err = new Error('Could not send tones \"' + params.tones + '\" because not audio sent yet');\n            log.warn(err);\n            deferred.reject(err);\n            return retVal;\n        }\n\n        digitSender = pc.createDTMFSender(audioTracks[0]);\n\n        digitSender.ontonechange = function onToneChange(evt) {\n            /**\n             * Indicate the RTCPeerConnection has sent a tone.\n             * @event respoke.PeerConnection#tone-sent\n             * @type {respoke.Event}\n             * @property {string} evt.tone\n             * @property {number} evt.duration\n             * @property {number} evt.gap\n             */\n\n            var eventData = {\n                tone: evt.tone,\n                duration: digitSender.duration,\n                gap: digitSender.interToneGap\n            };\n\n            if (evt.tone !== '') {\n                that.call.fire('tone-sent', eventData);\n            }\n\n            //empty string in evt.tone represents end of the queue so do tidy up here for sendTones & cancelTones\n            if (evt.tone === '') {\n\n                digitSender = null;\n\n                if (!cancellingTones) {\n\n                    /**\n                     * Indicate the RTCPeerConnection has finished sending tones, unless they were cancelled.\n                     * @event respoke.PeerConnection#tone-sending-complete\n                     * @type {respoke.Event}\n                     * @property {string} name - the event name.\n                     */\n                    deferred.resolve();\n                    that.call.fire('tone-sending-complete');\n                } else {\n                    cancellingTones = false;\n                    deferred.reject(new Error('Tone playback cancelled'));\n                }\n\n            }\n\n        };\n\n        if (!digitSender.canInsertDTMF) {\n            err = new Error('Unable to insert tones into audio track');\n            log.warn(err);\n            deferred.reject(err);\n            return retVal;\n        }\n\n        try {\n            digitSender.insertDTMF(params.tones, params.duration, params.gap);\n        } catch (e) {\n            err = new Error('Unable to queue tones on audio track due to an error');\n            log.warn(err, params, e);\n            deferred.reject(err);\n            return retVal;\n        }\n        log.debug('successfully queued playback of tones', {\n            tones: digitSender.toneBuffer,\n            duration: digitSender.duration,\n            gap: digitSender.interToneGap\n        });\n\n        return retVal;\n    };\n\n    /**\n     * Cancel any tones still being sent via sendTones.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.cancelTones\n     * @param {object} param\n     * @param {function} [params.onSuccess] - Success handler for this invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @fires respoke.PeerConnection\n     * @fires respoke.PeerConnection#tone-sending-cancelled\n     */\n\n    that.cancelTones = function (params) {\n\n        var deferred = Q.defer();\n\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n        var err;\n\n        if (!pc) {\n            err = new Error('No Peer Connection available');\n            log.warn(err);\n            deferred.reject(err);\n            return retVal;\n\n        }\n\n        if (!digitSender) {\n            err = new Error('Unable to queue tones on audio track as a digitSender does not exist');\n            log.warn(err);\n            deferred.reject(err);\n            return retVal;\n        }\n\n        if (!digitSender.canInsertDTMF) {\n            err = new Error('Unable to cancel playback of tones as cannot change tones on audio track');\n            log.warn(err);\n            deferred.reject(err);\n            return retVal;\n        }\n\n        cancellingTones = true;\n        var tonesToCancel = digitSender.toneBuffer;\n\n        try {\n            digitSender.insertDTMF('');\n        } catch (e) {\n            err = new Error('Unable to cancel playback of tones');\n            log.warn(err, e);\n            deferred.reject(err);\n            return retVal;\n        }\n\n        /**\n         * Indicate the RTCPeerConnection has finished cancelling tones.\n         * @event respoke.PeerConnection#tone-sending-cancelled\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         */\n        deferred.resolve();\n        that.call.fire('tone-sending-cancelled', {\n            cancelledTones: tonesToCancel\n        });\n\n        return retVal;\n    };\n\n    /**\n     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n     * signal is not false and we have not received a hangup signal from the remote party.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.close\n     * @fires respoke.PeerConnection#destoy\n     * @param {object} param\n     * @param {boolean} [param.signal] - Optional flag to indicate whether to send or suppress sending\n     * a hangup signal to the remote side. This is set to false by the library if we're responding to a\n     * hangup signal.\n     * @fires respoke.PeerConnection#close\n     */\n    that.close = function (params) {\n        params = params || {};\n        toSendHangup = true;\n\n        if (that.state.caller === true) {\n            if (!that.state.sentSDP) {\n                // Never send hangup if we are the caller but we haven't sent any other signal yet.\n                toSendHangup = false;\n            }\n        }\n\n        toSendHangup = (typeof params.signal === 'boolean' ? params.signal : toSendHangup);\n        if (toSendHangup) {\n            log.info('sending hangup');\n            signalHangup({\n                call: that.call\n            });\n        }\n\n        that.report.callStopped = new Date().getTime();\n\n        /**\n         * Indicate that the RTCPeerConnection is closed.\n         * @event respoke.PeerConnection#close\n         * @type {respoke.Event}\n         * @property {boolean} sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n         * @property {string} name - the event name.\n         * @property {respoke.PeerConnection}\n         */\n        that.fire('close', {\n            sentSignal: toSendHangup\n        });\n        that.ignore();\n\n        if (pc && that.report) {\n            pc.close();\n        }\n        pc = null;\n\n        if (that.call.enableCallDebugReport) {\n            signalReport({\n                report: that.report\n            });\n        }\n        that.report = null;\n    };\n    that.close = respoke.callOnce(that.close);\n\n    /**\n     * Indicate whether a call is being setup or is in progress.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.isActive\n     * @returns {boolean}\n     */\n    that.isActive = function () {\n        return !!(pc && ['completed', 'connected', 'new', 'checking'].indexOf(pc.iceConnectionState) > -1);\n    };\n\n    /**\n     * Save the answer and tell the browser about it.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.listenAnswer\n     * @param {object} evt\n     * @param {object} evt.signal - The signal, including the remote SDP and the connectionId of the endpoint who\n     * answered the call.\n     * @private\n     */\n    function listenAnswer(evt) {\n        if (!pc) {\n            return;\n        }\n        log.debug('got answer', evt.signal);\n\n        that.report.sdpsReceived.push(evt.signal.sessionDescription);\n        that.state.sendOnly = respoke.sdpHasReceiveOnly(evt.signal.sessionDescription.sdp);\n        that.sdpExpectedStreamCount = respoke.sdpStreamCount(evt.signal.sessionDescription.sdp);\n        that.report.lastSDPString = evt.signal.sessionDescription.sdp;\n\n        if (that.state.caller) {\n            that.report.calleeconnection = evt.signal.fromConnection;\n        }\n\n        that.call.connectionId = evt.signal.fromConnection;\n        // TODO don't signal connected more than once.\n        signalConnected({\n            call: that.call\n        });\n\n        pc.setRemoteDescription(\n            new RTCSessionDescription(evt.signal.sessionDescription),\n            function successHandler() {\n                processReceivingQueue();\n                that.state.dispatch('receiveAnswer');\n            }, function errorHandler(p) {\n                var newErr = new Error(\"Exception calling setRemoteDescription on answer I received.\");\n                that.report.callStoppedReason = newErr.message;\n                /**\n                 * This event is fired on errors that occur during call setup or media negotiation.\n                 * @event respoke.Call#error\n                 * @type {respoke.Event}\n                 * @property {string} reason - A human readable description about the error.\n                 * @property {respoke.Call} target\n                 * @property {string} name - the event name.\n                 */\n                that.call.fire('error', {\n                    message: newErr.message\n                });\n                log.error('set remote desc of answer failed', evt.signal.sessionDescription, p);\n                that.report.callStoppedReason = 'setRemoteDescription failed at answer.';\n                that.close();\n            }\n        );\n    }\n\n    /**\n     * Figure out who won the call. This necessary to prevent two connections of the same endpoint from thinking\n     * they are both on the same call.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.listenConnected\n     * @private\n     */\n    function listenConnected(evt) {\n        if (evt.signal.connectionId !== client.connectionId) {\n            log.debug(\"Hanging up because I didn't win the call.\", evt.signal, client);\n            that.call.hangup({signal: false});\n        }\n    }\n\n    /**\n     * Send the initiate signal to start the modify process. This method is only called by the caller of the\n     * renegotiation.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.startModify\n     * @param {object} params\n     * @param {object} [params.constraints] - Indicate this is a request for media and what type of media.\n     * @param {boolean} [params.directConnection] - Indicate this is a request for a direct connection.\n     */\n    that.startModify = function (params) {\n        defModify = Q.defer();\n        signalModify({\n            action: 'initiate',\n            call: that.call,\n            constraints: params.constraints,\n            directConnection: params.directConnection\n        });\n    };\n\n    /**\n     * Indicate a desire from the other side to renegotiate media.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.listenModify\n     * @param {object} evt\n     * @param {object} evt.signal\n     * @private\n     */\n    function listenModify(evt) {\n        var err;\n        log.debug('PC.listenModify', evt.signal);\n\n        if (evt.signal.action === 'accept') {\n            if (defModify.promise.isPending()) {\n                defModify.resolve();\n                /**\n                 * Indicate that the remote party has accepted our invitation to begin renegotiating media.\n                 * @event respoke.PeerConnection#modify-accept\n                 * @type {respoke.Event}\n                 * @property {string} name - the event name.\n                 * @property {respoke.PeerConnection}\n                 */\n                that.fire('modify-accept', {signal: evt.signal});\n            }\n            return;\n        } else if (evt.signal.action === 'reject') {\n            if (defModify.promise.isPending()) {\n                err = new Error(\"Remote party cannot negotiate.\");\n                log.debug(err.message);\n                defModify.reject(err);\n                /**\n                 * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n                 * @event respoke.PeerConnection#modify-reject\n                 * @type {respoke.Event}\n                 * @property {Error} err\n                 * @property {string} name - the event name.\n                 * @property {respoke.PeerConnection}\n                 */\n                that.fire('modify-reject', {err: err});\n            }\n            return;\n        }\n\n        // This code only gets executed if signal.action === 'initiate'\n        if (defModify && defModify.promise.isPending()) {\n            // TODO compare signal request ID and accept if we have the higher request ID,\n            // reject if we have the lower request ID.\n            err = new Error(\"Got modify in a negotiating state.\");\n            log.debug(err.message);\n            defModify.reject(err);\n            /**\n             * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n             * @event respoke.PeerConnection#modify-reject\n             * @type {respoke.Event}\n             * @property {Error} err\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('modify-reject', {err: err});\n            signalModify({\n                action: 'reject',\n                call: that.call\n            });\n            return;\n        }\n\n        defModify = Q.defer();\n\n        if (!that.state.sentSDP || that.state.isState('idle')) {\n            err = new Error(\"Got modify in a precall state.\");\n            /**\n             * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n             * @event respoke.PeerConnection#modify-reject\n             * @type {respoke.Event}\n             * @property {Error} err\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('modify-reject', {err: err});\n            signalModify({\n                action: 'reject',\n                call: that.call\n            });\n            defModify.reject(err);\n            return;\n        }\n\n        /**\n         * Indicate that the remote party has accepted our invitation to begin renegotiating media.\n         * @event respoke.PeerConnection#modify-accept\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.PeerConnection}\n         */\n        that.fire('modify-accept', {signal: evt.signal});\n        signalModify({\n            action: 'accept',\n            call: that.call\n        });\n        defModify.resolve();\n    }\n\n    /**\n     * Save the candidate. If we initiated the call, place the candidate into the queue so\n     * we can process them after we receive the answer.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.addRemoteCandidate\n     * @param {object} params\n     * @param {RTCIceCandidate} params.candidate\n     */\n    that.addRemoteCandidate = function (params) {\n        if (!pc && (that.state.sentSDP || that.state.receivedSDP)) { // we hung up.\n            return;\n        }\n\n        if (!params || !params.candidate || !params.candidate.hasOwnProperty('sdpMLineIndex')) {\n            log.warn(\"addRemoteCandidate got wrong format!\", params);\n            return;\n        }\n\n        candidateReceivingQueue.push(params);\n    };\n\n    that.call.listen('signal-answer', listenAnswer, true);\n    that.call.listen('signal-connected', listenConnected, true);\n    that.call.listen('signal-modify', listenModify, true);\n\n    return that;\n}; // End respoke.PeerConnection\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/peerConnection.js\n ** module id = 18\n ** module chunks = 0\n **/","// Copyright (c) 2010 David Durman\n//\n// The contents of this file are subject to the MIT License (the \"License\");\n// you may not use this file except in compliance with the License. You may obtain a copy of the License at\n// http://opensource.org/licenses/MIT.\n//\n// This hierarchical state machine implementation has been inspired\n// by the QP active object framework, see http://www.state-machine.com/\n\n\n(function(root, factory){\n    \"use strict\";\n\n    if (typeof exports === 'object') {\n\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like enviroments that support module.exports,\n        // like Node.\n        module.exports = factory();\n\n    } else if (typeof define === 'function' && define.amd) {\n\n        // AMD. Register as an anonymous module.\n        define(factory);\n\n    } else {\n\n        // Browser globals (root is window)\n        root.Statechart = factory();\n    }\n\n}(this, function(){\n\n    \"use strict\";\n\n    var assert = function(assertion){\n        if (!assertion) {\n            throw new Error(\"Assertion failed.\");\n        }\n    };\n\n\n    // Statechart.\n    // -----------\n\n    // `myState` - the current state\n    // `mySource` - the source of the current transition\n\n    var Statechart = {\n\n        run: function(opt){\n            opt = opt || {};\n            this.debug = opt.debug ? opt.debug : function(){};\n            this.construct(this.initialState);\n            this.init(null);\n        },\n\n        construct: function(initialState){\n            this.myState = this.top();\n            this.mySource = this.state(\"Initial\");\n\n            // Initial pseudo-state\n            this.states.Initial = {\n                empty: function(){\n                    this.newInitialState(initialState);\n                }\n            };\n            var handled = function(){ return null; };\n\n            // TOP state\n            this.states.TOP = {\n                entry: handled,\n                exit:  handled,\n                init:  handled,\n                empty: handled\n            };\n            this.flatten();\n        },\n\n        // Trigger the initial transition and recursively enter the submachine of the top state.\n        // Must be called only once for a given Statechart before dispatching any events to it.\n        init: function(anEventOrNull){\n            assert(this.myState === this.top() && this.mySource !== null);\n            var s = this.myState;    // save top in temp\n            this.mySource.trigger(anEventOrNull);    // topmost initial transition\n            assert(s.equals(this.myState.superstate()));    // verify that we only went one level deep\n            s = this.myState;\n            s.enter();\n            while (s.init() === null) {    // while init is handled (i.e. till we reach a leaf node)\n                assert(s.equals(this.myState.superstate()));    // verify that we only went one level deep\n                s = this.myState;\n                s.enter();\n            }\n        },\n\n        state: function(stateOrName){\n            return (stateOrName && stateOrName instanceof QState) ? stateOrName : new QState(this, stateOrName);\n        },\n\n        top: function(stateOrName){\n            // create the top state only once and store it to an auxiliary property\n            return (this._topState || (this._topState = new QState(this, \"TOP\")));\n        },\n\n        currentState: function(){\n            return this.myState;\n        },\n\n        flatten: function(){\n            this.statesTable = this.statesTable || {};\n            this._flatten(this.states, this.top().name);\n        },\n\n        _flatten: function(states, parent){\n            if (!states) {\n                return;\n            }\n\n            for (var state in states) {\n                if (states.hasOwnProperty(state)) {\n                    this.statesTable[state] = states[state];\n                    this.statesTable[state].parent = parent;\n                    this._flatten(states[state].states, state);\n                }\n            }\n        },\n\n        selectState: function(stateName){\n            return this.statesTable[stateName];\n        },\n\n        dispatchEvent: function(anEvent, state, act){\n            act = act || state[anEvent.type];\n\n            // Action might also be an array in which case it is assumed that evaluating guards decides\n            // which target to enter.\n            if (act instanceof Array) {\n                for (var i = 0; i < act.length; i++) {\n                    this.dispatchEvent(anEvent, state, act[i]);\n                }\n            }\n\n            // @todo This is terrible edge case used just for more fancy Statechart representation\n            // It allows using \"MyState\": { init: \"MySubState\", ... } intead of\n            // \"MyState\": { init: function(){ this.newInitialState(\"MySubState\"); }, ... }\n            // In some cases the latter form can be useful for better control of the Statechart\n            if (anEvent.type === \"init\" && typeof act === \"string\") {\n                this.newInitialState(act);\n                return null; // handled\n            }\n\n            if (act instanceof Function){\n                act.call(this, anEvent.args);\n                return null;  // handled\n            } else if (act) {\n                // no guard at all or the guard condition is met\n                if (!act.guard || (act.guard && act.guard.call(this, anEvent.args))){\n                    if (act.action) {\n                        act.action.call(this, anEvent.args);\n                    }\n                    if (act.target) {\n                        this.newState(act.target);\n                    }\n                    return null;  // handled\n                }\n            } else {        // act is undefined (no handler in state for anEvent)\n                if (state === this.selectState(\"TOP\")) {\n                    this.handleUnhandledEvent(anEvent); // not-handled\n                    return null;    // handled (TOP state handles all events)\n                }\n            }\n            return this.state(state.parent); // not-handled\n        },\n\n        // Override this when needed.\n        handleUnhandledEvent: function(anEvent){\n            this.debug(\"Unhandled event: \" + anEvent.type);\n            return null;\n        },\n\n        // Traverse the state hierarchy starting from the currently active state myState.\n        // Advance up the state hierarchy (i.e., from substates to superstates), invoking all\n        // the state handlers in succession. At each level of state nesting, it intercepts the value\n        // returned from a state handler to obtain the superstate needed to advance to the next level.\n        dispatch: function(anEvent, args){\n            if (!anEvent || !(anEvent instanceof QEvent)) {\n                anEvent = new QEvent(anEvent, args);\n            }\n            this.mySource = this.myState;\n            while (this.mySource) {\n                this.mySource = this.mySource.trigger(anEvent);\n            }\n        },\n\n        // Performs dynamic transition. (macro Q_TRAN_DYN())\n        newState: function(aStateName){\n            this.transition(this.state(aStateName));\n        },\n\n        // Used by handlers only in response to the #init event. (macro Q_INIT())\n        // USAGE: return this.newInitialState(\"whatever\");\n        // @return null for convenience\n\n        newInitialState: function(aStateOrName){\n            this.myState = this.state(aStateOrName);\n            return null;\n        },\n\n        // Dynamic transition. (Q_TRAN_DYN())\n        transition: function(target){\n            assert(!target.equals(this.top()));\n\n            var entry = [];\n            var mySource = this.mySource;\n            var s = this.myState;\n\n            // exit all the nested states between myState and mySource\n            assert(s !== null);\n            assert(mySource !== null);\n            while (!s.equals(mySource)) {\n                s = s.exit() || s.superstate();\n            }\n\n            // check all seven possible source/target state combinations\n\n\t    entry.push(target);\n\n            // (a) mySource == target (self transition)\n            if (mySource.equals(target)) {\n                mySource.exit();\n                return this.enterVia(target, entry);\n            }\n\n            // (b) mySource == target.superstate (one level deep)\n            var p = target.superstate();\n            if (mySource.equals(p)) {\n                return this.enterVia(target, entry);\n            }\n\n            assert(mySource !== null);\n\n            // (c) mySource.superstate == target.superstate (most common - fsa)\n            var q = mySource.superstate();\n            if (q.equals(p)) {\n                mySource.exit();\n                return this.enterVia(target, entry);\n            }\n\n            // (d) mySource.superstate == target (one level up)\n            if (q.equals(target)) {\n                mySource.exit();\n                entry.pop();    // do not enter the LCA\n                return this.enterVia(target, entry);\n            }\n\n            // (e) mySource == target.superstate.superstate... hierarchy (many levels deep)\n\t    entry.push(p);\n            s = p.superstate();\n            while (s !== null) {\n                if (mySource.equals(s)) {\n                    return this.enterVia(target, entry);\n                }\n\n\t\tentry.push(s);\n                s = s.superstate();\n            }\n\n            // otherwise we're definitely exiting mySource\n            mySource.exit();\n\n            // entry array is complete, save its length to avoid computing it repeatedly\n            var entryLength = entry.length;\n\n            // (f) mySource.superstate == target.superstate.superstate... hierarchy\n            var lca;\n            for (lca = entryLength - 1; lca >= 0; lca -= 1) {\n                if (q.equals(entry[lca])) {\n                    return this.enterVia(target, entry.slice(0, lca)); // do not enter lca\n                }\n            }\n\n            // (g) each mySource.superstate.superstate... for each target.superstate.superstate...\n            s = q;\n            while (s !== null) {\n                for (lca = entryLength - 1; lca >= 0; lca -= 1) {\n                    if (s.equals(entry[lca])) {\n                        return this.enterVia(target, entry.slice(0, lca)); // do not enter lca\n                    }\n                }\n                s.exit();\n                s = s.superstate();\n            }\n        },\n\n        // tail of transition()\n        // We are in the LCA of mySource and target.\n        enterVia: function(target, entry){\n\n            // retrace the entry path in reverse order\n            var idx = entry.length;\n            while (idx > 0) {\n                idx--;\n                entry[idx].enter();\n            }\n\n            this.myState = target;\n            while (target.init() === null) {\n                // initial transition must go one level deep\n                assert(target.equals(this.myState.superstate()));\n                target = this.myState;\n                target.enter();\n            }\n        }\n    };\n\n    // QState.\n    // -------\n\n    function QState(fsm, name){\n        this.fsm = fsm;\n        this.name = name;\n    }\n\n    QState.prototype = {\n        equals: function(state){\n            return (this.name === state.name && this.fsm === state.fsm);\n        },\n\n        dispatchEvent: function(anEvent, state){\n            return this.fsm.dispatchEvent(anEvent, state);\n        },\n\n        trigger: function(anEvent){\n            var evt = anEvent || QEventEmpty;\n            var state = this.fsm.selectState(this.name);\n            return this.dispatchEvent(evt, state);\n        },\n\n        enter: function(){\n            this.fsm.debug(\"[\" + this.name + \"] enter\");\n            return this.trigger(QEventEntry);\n        },\n\n        exit: function(){\n            this.fsm.debug(\"[\" + this.name + \"] exit\");\n            return this.trigger(QEventExit);\n        },\n\n        init: function(){\n            this.fsm.debug(\"[\" + this.name + \"] init\");\n            return this.trigger(QEventInit);\n        },\n\n        // Answer my superstate. Default is to return fsm top state.\n        superstate: function(){\n            var superstate = this.trigger(QEventEmpty);\n            if (superstate && superstate instanceof QState) {\n                return superstate;\n            }\n            superstate = this.fsm.top();\n            if (this.name === superstate.name) {\n                return null;\n            }\n            return superstate;\n        }\n    };\n\n    // QEvent\n    // ------\n\n    function QEvent(type, args){\n        this.type = type;\n        this.args = args;\n    }\n\n    // these events are static, they do not carry any arguments\n    // -> create them only once\n    // moreover, they don't have to be exposed to the outer world\n    var QEventEntry = new QEvent(\"entry\");\n    var QEventExit = new QEvent(\"exit\");\n    var QEventInit = new QEvent(\"init\");\n    var QEventEmpty = new QEvent(\"empty\");\n\n\n    return Statechart;\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/statechart/lib/statechart.js\n ** module id = 19\n ** module chunks = 0\n **/","/*\n * Copyright 2015, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n */\n\nvar respoke = require('./respoke');\nvar log = respoke.log;\nvar Statechart = require('statechart');\nvar Q = require('q');\n\n/**\n * State machine for WebRTC calling, data channels, and screen sharing.\n * NOTE: All state transitions are synchronous! However, listeners to the events this class fires will be called\n * asynchronously.\n * @class respoke.CallState\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {respoke.Call} call\n * @link https://cdn.respoke.io/respoke.min.js\n * @returns {respoke.CallState}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var fsm;\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    that.className = 'respoke.CallState';\n    delete that.instanceId;\n\n    var client = respoke.getClient(instanceId);\n    var allTimers = [];\n    var answerTimer;\n    var answerTimeout = params.answerTimeout || 10000;\n    var receiveAnswerTimer;\n    var receiveAnswerTimeout = params.receiveAnswerTimeout || 60000;\n    var connectionTimer;\n    var connectionTimeout = params.connectionTimeout || 10000;\n    var modifyTimer;\n    var modifyTimeout = params.modifyTimeout || 60000;\n    var oldRole;\n\n    /*\n     * These can quite often result in a condition in which they do not cause a transition to occur.\n     * There is at least one \"universal\" (air quotes) event which probably? shouldn't? but may\n     * result in a non-transition error when it's OK, and that is the 'reject' event.\n     */\n    var nontransitionEvents = ['receiveLocalMedia', 'receiveRemoteMedia', 'approve', 'answer', 'sentOffer',\n        'receiveAnswer'];\n\n    function assert(condition) {\n        if (!condition) {\n            throw new Error(\"Assertion failed.\");\n        }\n    }\n\n    that.hasLocalMediaApproval = false;\n    that.hasLocalMedia = false;\n    that.receivedBye = false;\n    that.isAnswered = false;\n    that.sentSDP = false;\n    that.receivedSDP = false;\n    that.processedRemoteSDP = false;\n    that.needDirectConnection = !!that.needDirectConnection;\n    that.sendOnly = !!that.sendOnly;\n    that.receiveOnly = !!that.receiveOnly;\n\n    // Event\n    var rejectEvent = [{\n        target: 'connected',\n        guard: function (params) {\n            // we have any media flowing or data channel open\n            if (typeof oldRole === 'boolean') {\n                // Reset the role if we have aborted a modify.\n                that.caller = oldRole;\n            }\n\n            if (modifyTimer) {\n                modifyTimer.clear();\n            }\n\n            return that.hasMedia();\n        }\n    }, {\n        target: 'terminated',\n        guard: function (params) {\n            params = params || {};\n            // we have no media flowing or data channel open\n            that.hangupReason = params.reason || \"no media\";\n            [answerTimer, receiveAnswerTimer, connectionTimer, modifyTimer].forEach(function (timer) {\n                if (timer) {\n                    timer.clear();\n                }\n            });\n            return !that.hasMedia();\n        }\n    }];\n\n    // Event\n    function rejectModify() {\n        // reject modification\n        if (modifyTimer) {\n            modifyTimer.clear();\n        }\n    }\n\n    // Event\n    function clearReceiveAnswerTimer() {\n        that.processedRemoteSDP = true;\n        if (receiveAnswerTimer) {\n            receiveAnswerTimer.clear();\n        }\n    }\n\n    // Event\n    var hangupEvent = {\n        target: 'terminated',\n        action: function (params) {\n            params = params || {};\n            that.signalBye = params.signal;\n            that.hangupReason = that.hangupReason || params.reason || \"none\";\n        }\n    };\n\n    function needToObtainMedia() {\n        return (\n            that.needDirectConnection !== true &&\n            that.receiveOnly !== true &&\n            that.hasLocalMedia !== true\n        );\n    }\n\n    function needToApproveDirectConnection(params) {\n        return (that.needDirectConnection === true && typeof params.previewLocalMedia === 'function');\n    }\n\n    function automaticOffering(params) {\n        if (that.caller !== true) {\n            return false;\n        }\n\n        // TODO: this will need to be change with media negotiation\n        if ((!that.needDirectConnection && that.receiveOnly) || that.hasLocalMedia) {\n            return true;\n        }\n        return (that.needDirectConnection === true && typeof params.previewLocalMedia !== 'function');\n    }\n\n    function hasListener() {\n        if ((client.hasListeners('call') && !that.needDirectConnection) ||\n                (client.hasListeners('direct-connection') && that.needDirectConnection)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function createTimer(func, name, time) {\n        var id = setTimeout(function () {\n            id = null;\n            log.error((that.caller ? \"caller's\" : \"callee's\"), name, \"timer expired.\");\n            func();\n        }, time);\n        log.debug('setting timer', name, 'for', time / 1000, 'secs');\n        var timer  = {\n            name: name,\n            clear: function () {\n                if (id === null) {\n                    return;\n                }\n                log.debug('clearing', (that.caller ? \"caller's\" : \"callee's\"), 'timer', name);\n                clearTimeout(id);\n                id = null;\n            }\n        };\n        allTimers.push(timer);\n        return timer;\n    }\n\n    var stateParams = {\n        initialState: 'idle',\n        states: {\n            // State\n            idle: {\n                // Event\n                exit: function () {\n                    that.fire('idle:exit');\n                },\n                // Event\n                initiate: [{\n                    target: 'negotiatingContainer',\n                    guard: function (params) {\n                        assert(typeof params.caller === 'boolean');\n                        return (params.caller === true || hasListener());\n                    }\n                }, {\n                    target: 'terminated',\n                    guard: function (params) {\n                        return (params.caller !== true && !hasListener());\n                    }\n                }],\n                receiveLocalMedia: function () {\n                    that.hasLocalMedia = true;\n                },\n                // Event\n                receiveOffer: {\n                    action: function (params) {\n                        that.receivedSDP = true;\n                    }\n                },\n                // Event\n                hangup: hangupEvent\n            },\n            // State\n            negotiatingContainer: {\n                init: \"preparing\",\n                // Event\n                hangup: hangupEvent,\n                // Event\n                modify: rejectModify,\n                // Event\n                receiveLocalMedia: function () {\n                    that.hasLocalMedia = true;\n                },\n                states: {\n                    preparing: {\n                        // Event\n                        entry: {\n                            action: function () {\n                                that.hasLocalMediaApproval = false;\n                                that.hasLocalMedia = false;\n                                that.sentSDP = false;\n                                that.receivedSDP = false;\n                                that.processedRemoteSDP = false;\n                                that.isAnswered = false;\n                                if (!that.isModifying()) {\n                                    answerTimer = createTimer(function () {\n                                        that.dispatch('reject', {reason: \"answer own call timer \" + that.caller});\n                                    }, 'answer own call', (that.caller ? answerTimeout : receiveAnswerTimeout));\n                                }\n                                that.fire('preparing:entry');\n                            }\n                        },\n                        // Event\n                        exit: function () {\n                            that.fire('preparing:exit');\n                            if (answerTimer) {\n                                answerTimer.clear();\n                            }\n                        },\n                        // Event\n                        reject: rejectEvent,\n                        // Event\n                        receiveOffer: {\n                            action: function (params) {\n                                that.receivedSDP = true;\n                                if (that.isAnswered) {\n                                    // If we get here, we are the callee and we've answered the call before the call\n                                    // creation/receive offer promise chain completed.\n                                    setTimeout(function () {\n                                        that.dispatch('answer', params);\n                                    });\n                                }\n                            }\n                        },\n                        // Event\n                        answer: [{\n                            action: function (params) {\n                                assert(!params.previewLocalMedia || typeof params.previewLocalMedia === 'function');\n                                that.isAnswered = true;\n                                if (typeof params.previewLocalMedia !== 'function') {\n                                    that.hasLocalMediaApproval = true;\n                                }\n                            }\n                        }, {\n                            // we are going to send media\n                            target: 'approvingDeviceAccess',\n                            guard: needToObtainMedia\n                        }, {\n                            // we are sending a direct connection & developer wants to approve\n                            target: 'approvingContent',\n                            guard: needToApproveDirectConnection\n                        }, {\n                            target: 'offering',\n                            guard: automaticOffering\n                        }, {\n                            // we are not sending anything or developer does not want to approve media.\n                            target: 'connecting',\n                            guard: function (params) {\n                                // caller will always answer before sending offer.\n                                // callee will usually answer after receiving offer if media is requested.\n                                if (!that.receivedSDP) {\n                                    return false;\n                                }\n\n                                if (needToObtainMedia() || needToApproveDirectConnection(params) ||\n                                        automaticOffering(params)) {\n                                    return false;\n                                }\n\n                                if (!params.previewLocalMedia || that.receiveOnly) {\n                                    setTimeout(function () {\n                                        params.approve();\n                                    });\n                                }\n                                return (that.receiveOnly === true || that.needDirectConnection === true);\n                            }\n                        }]\n                    },\n                    // State\n                    gettingMedia: {\n                        reject: rejectEvent,\n                        // Event\n                        receiveLocalMedia: [{\n                            action: function () {\n                                that.hasLocalMedia = true;\n                            }\n                        }, {\n                            target: 'offering',\n                            guard: function (params) {\n                                return (that.caller === true && that.hasLocalMediaApproval === true &&\n                                    that.hasLocalMedia === true);\n                            }\n                        }, {\n                            target: 'connecting',\n                            guard: function (params) {\n                                return (that.caller === false && that.hasLocalMediaApproval === true &&\n                                    that.hasLocalMedia === true);\n                            }\n                        }],\n                        states: {\n                            // State\n                            approvingDeviceAccess: {\n                                // Event\n                                entry: function () {\n                                    that.fire('approving-device-access:entry');\n                                },\n                                // Event\n                                approve: [{\n                                    target: 'approvingContent',\n                                    guard: function (params) {\n                                        return (typeof params.previewLocalMedia === 'function');\n                                    }\n                                }, {\n                                    target: 'connecting',\n                                    guard: function (params) {\n                                        return (that.caller === false &&\n                                            (that.hasLocalMedia === true || that.needDirectConnection === true) &&\n                                            typeof params.previewLocalMedia !== 'function');\n                                    }\n                                }, {\n                                    target: 'offering',\n                                    guard: function (params) {\n                                        return (that.caller === true && that.hasLocalMedia === true &&\n                                            typeof params.previewLocalMedia !== 'function');\n                                    }\n                                }]\n                            },\n                            // State\n                            approvingContent: {\n                                // Event\n                                entry: function () {\n                                    that.fire('approving-content:entry');\n                                },\n                                // Event\n                                exit: function () {\n                                    that.fire('approving-content:exit');\n                                },\n                                // Event\n                                approve: [function (params) {\n                                    that.hasLocalMediaApproval = true;\n                                }, {\n                                    target: 'offering',\n                                    guard: function (params) {\n                                        return (that.caller === true && that.hasLocalMedia === true);\n                                    }\n                                }, {\n                                    target: 'connecting',\n                                    guard: function (params) {\n                                        return (that.caller === false && that.hasLocalMedia === true);\n                                    }\n                                }]\n                            }\n                        }\n                    },\n                    // State\n                    offeringContainer: {\n                        init: 'offering',\n                        reject: rejectEvent,\n                        sentOffer: function () {\n                            // start answer timer\n                            receiveAnswerTimer = createTimer(function () {\n                                that.dispatch('reject', {reason: \"receive answer timer\"});\n                            }, 'receive answer', receiveAnswerTimeout);\n                        },\n                        states: {\n                            offering: {\n                                // Event\n                                entry: function () {\n                                    that.fire('offering:entry');\n                                },\n                                // Event\n                                exit: function () {\n                                    that.fire('offering:exit');\n                                },\n                                // Event\n                                receiveLocalMedia: [function () {\n                                    that.hasLocalMedia = true;\n                                }, {\n                                    target: 'connected',\n                                    guard: function (params) {\n                                        // for direct connection, local media is the same as remote media\n                                        return (that.needDirectConnection === true);\n                                    }\n                                }],\n                                // Event\n                                receiveRemoteMedia: {\n                                    target: 'connected'\n                                },\n                                // Event\n                                receiveAnswer: [clearReceiveAnswerTimer, {\n                                    target: 'connecting'\n                                }]\n                            }\n                        }\n                    },\n                    // State\n                    connectingContainer: {\n                        init: 'connecting',\n                        reject: rejectEvent,\n                        receiveAnswer: clearReceiveAnswerTimer,\n                        states: {\n                            connecting: {\n                                // Event\n                                entry: function () {\n                                    that.fire('connecting:entry');\n\n                                    // set connection timer\n                                    connectionTimer = createTimer(function () {\n                                        that.dispatch('reject', {reason: \"connection timer\"});\n                                    }, 'connection', connectionTimeout);\n                                },\n                                // Event\n                                exit: function () {\n                                    if (connectionTimer) {\n                                        connectionTimer.clear();\n                                    }\n                                    if (modifyTimer) {\n                                        modifyTimer.clear();\n                                    }\n                                    that.fire('connecting:exit');\n                                },\n                                // Event\n                                receiveLocalMedia: [{\n                                    action: function () {\n                                        that.hasLocalMedia = true;\n                                    }\n                                }, {\n                                    target: 'connected',\n                                    guard: function (params) {\n                                        // for direct connection, local media is the same as remote media\n                                        return (that.needDirectConnection === true && that.caller === false);\n                                    }\n                                }],\n                                // Event\n                                receiveRemoteMedia: {\n                                    target: 'connected'\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            // State\n            // This state is for when we are in limbo between connected and negotiating and we are\n            // trying to figure out if the other side will allow us to modify. If we receive modify in\n            // this state, we will reject it. If the other party is in connected, we will be able to modify.\n            modifyingContainer: {\n                init: 'modifying',\n                reject: rejectEvent,\n                // Event\n                modify: rejectModify,\n                // Event\n                hangup: hangupEvent,\n                states: {\n                    modifying: {\n                        // Event\n                        entry: function () {\n                            modifyTimer = createTimer(function () {\n                                that.dispatch('reject', {reason: \"modify timer\"});\n                            }, 'modify for caller', modifyTimeout);\n                            that.fire('modifying:entry');\n                        },\n                        // Event\n                        accept: [function () {\n                            that.caller = true;\n                        }, {\n                            target: 'preparing'\n                        }],\n                        // Event\n                        exit: function () {\n                            that.fire('modifying:exit');\n                        }\n                    }\n                }\n            },\n            // State\n            connectedContainer: {\n                init: 'connected',\n                reject: {\n                    target: 'terminated',\n                    action: function (params) {\n                        that.hangupReason = params.reason || \"got reject while connected\";\n                    }\n                },\n                receiveAnswer: clearReceiveAnswerTimer,\n                // Event\n                hangup: hangupEvent,\n                states: {\n                    connected: {\n                        // Event\n                        entry: function () {\n                            oldRole = that.caller;\n                            that.needDirectConnection = false;\n                            that.fire('connected:entry');\n                        },\n                        // Event\n                        exit: function () {\n                            that.fire('connected:exit');\n                        },\n                        // Event\n                        modify: [{\n                            // be notified that the other side would like modification\n                            target: 'preparing',\n                            guard: function (params) {\n                                params = params || {};\n                                if (params.receive === true) {\n                                    that.caller = false;\n                                    modifyTimer = createTimer(function () {\n                                        // If modify gets interrupted, go back to previous roles.\n                                        that.dispatch('reject', {reason: \"modify timer\"});\n                                    }, 'modify', modifyTimeout);\n                                    return true;\n                                }\n                            }\n                        }, {\n                            // request to begin modification\n                            target: 'modifying',\n                            guard: function (params) {\n                                params = params || {};\n                                return (params.receive !== true);\n                            }\n                        }]\n                    }\n                }\n            },\n            // State\n            terminatedContainer: {\n                init: 'terminated',\n                states: {\n                    terminated: {\n                        // Event\n                        entry: {\n                            action: function () {\n                                that.fire('terminated:entry');\n                                allTimers.forEach(function (timer) {\n                                    timer.clear();\n                                });\n                                setTimeout(function () {\n                                    fsm = null;\n                                    that.ignore();\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    stateParams.that = Object.create(Statechart);\n    fsm = respoke.Class(stateParams);\n    fsm.run({\n        // rename to 'debug' to enable\n        debugOff: function () {\n            // So we can print the caller. Debug most often used when testing & tests run in the same tab.\n            var args = Array.prototype.slice.call(arguments);\n            args.splice(0, 0, that.caller);\n            log.debug.apply(log, args);\n        }\n    });\n\n    /**\n     * Return the name of the current state.\n     * @memberof! respoke.CallState\n     * @method respoke.Call.getState\n     * @returns {string}\n     */\n    that.getState = function () {\n        if (!fsm) {\n            return 'terminated';\n        }\n        return fsm.currentState().name;\n    };\n\n    /**\n     * Synchronously dispatch an event, which may or may not change the state.\n     * @memberof! respoke.CallState\n     * @method respoke.Call.dispatch\n     */\n    that.dispatch = function (evt, args) {\n        var oldState;\n        var newState;\n\n        if (!fsm) {\n            return;\n        }\n\n        oldState = that.getState();\n        try {\n            fsm.dispatch(evt, args);\n        } catch (err) {\n            log.debug('error dispatching', evt, 'from', oldState, \"with\", args, err);\n            throw err;\n        }\n        newState = that.getState();\n        if (oldState === newState && nontransitionEvents.indexOf(evt) === -1) {\n            log.debug(that.caller, \"Possible bad event \" + evt + \", no transition occured.\");\n        }\n        log.debug(that.caller, 'dispatching', evt, 'moving from ', oldState, 'to', newState, args);\n    };\n\n    /**\n     * Determine whether or not we are in the middle of a call modification.\n     * @memberof! respoke.CallState\n     * @method respoke.Call.isModifying\n     * @returns {boolean}\n     */\n    that.isModifying = function () {\n        var modifyingStates = ['preparing', 'modifying', 'approvingDeviceAccess', 'approvingMedia', 'offering'];\n        return (modifyingStates.indexOf(that.getState()) > -1 && that.hasMedia());\n    };\n\n    /**\n     * Helper for testing state name\n     * @memberof! respoke.CallState\n     * @method respoke.Call.isState\n     * @param {string} name\n     * @returns {boolean}\n     */\n    that.isState = function (name) {\n        return (that.getState() === name);\n    };\n\n    assert(typeof that.hasMedia === 'function');\n    assert(typeof that.caller === 'boolean');\n    return that;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/callState.js\n ** module id = 20\n ** module chunks = 0\n **/","/*\n * Copyright 2015, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\nvar log = respoke.log;\n\n/**\n * A `respoke.Call` is Respoke's interface into a WebRTC call, including getUserMedia,\n * path and codec negotation, and call state.\n * There are several methods on an instance of `respoke.Client` which return a `respoke.Call`.\n *\n * ```\n * var jim = client.getEndpoint({ id: 'jim' });\n * var call = jim.startAudioCall();\n * ```\n *\n * @class respoke.Call\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.instanceId - client id\n * @param {boolean} params.caller - whether or not we initiated the call\n * @param {boolean} [params.receiveOnly] - whether or not we accept media\n * @param {boolean} [params.sendOnly] - whether or not we send media\n * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n * relay servers. If it cannot flow through relay servers, the call will fail.\n * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n * required to flow peer-to-peer. If it cannot, the call will fail.\n * @param {respoke.Endpoint} params.remoteEndpoint - The endpoint who is being called.\n * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint.\n * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n * wants to perform an action between local media becoming available and calling approve().\n * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n * @param {function} params.signalReport - Signaling action from SignalingChannel.\n * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n * @param {Array<RTCConstraints>} params.constraints - Array of WebRTC constraints. This is ignored when\n * `params.outgoingMedia` is passed into the Call object.\n * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n * media renegotiation.\n * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n * element with the local audio and/or video attached.\n * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n * it was ended in a graceful manner.\n * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n * This callback will be called when media is muted or unmuted.\n * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n * for the user to give permission to start getting audio or video.\n * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n * the approval was automatic.\n * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n * granted by the browser without asking the user to approve it.\n * @param {respoke.Call.onToneSent} [params.onToneSent] - Callback for when a DTMF tone gets sent from the client.\n * @param {respoke.Call.onToneSendingStarted} [params.onToneSendingStarted] - Callback for when DTMF tones\n * have started sending.\n * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n * video attached to it.\n * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n * @param {respoke.LocalMedia} params.outgoingMedia - Pass in an optional LocalMedia object to override the one that is\n * built automatically when establishing the call. When this is defined then any constraints passed to the\n * call are ignored since the media object already exists.\n * video attached to it.\n * @returns {respoke.Call}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Call\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n    delete that.outgoingMedia;\n\n    /**\n     * A name to identify the type of object.\n     * @memberof! respoke.Call\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Call';\n\n    /**\n     * Whether or not the client is the caller of the call.\n     * @memberof! respoke.Call\n     * @name caller\n     * @type {boolean}\n     */\n    that.caller = !!that.caller;\n    Object.defineProperty(that, \"initiator\", {\n        configurable: true,\n        enumerable: true,\n        get: function () {\n            log.warn(\"The call.initiator flag is deprecated. Please use call.caller instead.\");\n            return that.caller;\n        },\n        set: function () {\n            // ignore\n        }\n    });\n\n    if (!that.caller) {\n        // Don't let Respoke.js pass any default constraints if we're accepting the call. We have no freaking clue\n        // what kind of media we are expected to provide at this point.\n        delete params.constraints;\n        that.constraints = [];\n    }\n\n    /**\n     * The call ID.\n     * @memberof! respoke.Call\n     * @name id\n     * @type {string}\n     */\n    that.id = that.caller ? respoke.makeGUID() : that.id;\n\n    // log the call id to the console for debugging purposes. Do not change this to `respoke.log`!\n    console.log(\"[Respoke] Creating call. id='\" + that.id + \"'\");\n\n    if (!that.id) {\n        throw new Error(\"Can't start a new call without a call id.\");\n    }\n\n    /**\n     * Promise used to trigger actions dependant upon having received media or a datachannel.\n     * @memberof! respoke.Call\n     * @name defMedia\n     * @private\n     * @type {Promise}\n     */\n    var defMedia = Q.defer();\n    /**\n     * Promise used to trigger notification of a request for renegotiating media. For the caller of the\n     * renegotiation (which doesn't have to be the same as the caller of the call), this is resolved\n     * or rejected as soon as the 'accept' or 'reject' signal is received. For the callee, it is\n     * resolved or rejected only after the developer or user approves or rejects the modify.\n     * @memberof! respoke.Call\n     * @name defModify\n     * @private\n     * @type {Promise}\n     */\n    var defModify;\n    /**\n     * @memberof! respoke.Call\n     * @name previewLocalMedia\n     * @private\n     * @type {respoke.Call.previewLocalMedia}\n     */\n    var previewLocalMedia = params.previewLocalMedia;\n    /**\n     * @memberof! respoke.Call\n     * @name client\n     * @private\n     * @type {respoke.getClient}\n     */\n    var client = respoke.getClient(instanceId);\n    /**\n     * @memberof! respoke.Call\n     * @name signalingChannel\n     * @private\n     * @type {respoke.signalingChannel}\n     */\n    var signalingChannel = params.signalingChannel;\n\n    /**\n     * Informational property. Whether call debugs were enabled on the client during creation.\n     * Changing this value will do nothing.\n     * @name enableCallDebugReport\n     * @type {boolean}\n     */\n    that.enableCallDebugReport = params.signalingChannel.isSendingReport();\n\n    /**\n     * @memberof! respoke.Call\n     * @name pc\n     * @private\n     * @type {respoke.PeerConnection}\n     */\n    var pc = respoke.PeerConnection({\n        instanceId: instanceId,\n        state: respoke.CallState({\n            instanceId: instanceId,\n            caller: that.caller,\n            needDirectConnection: params.needDirectConnection,\n            sendOnly: params.sendOnly,\n            receiveOnly: params.receiveOnly,\n            // hasMedia is not defined yet.\n            hasMedia: function () {\n                return that.hasMedia();\n            }\n        }),\n        forceTurn: !!params.forceTurn,\n        call: that,\n        pcOptions: {\n            optional: [\n                { DtlsSrtpKeyAgreement: true },\n                { RtpDataChannels: false }\n            ]\n        },\n        offerOptions: params.offerOptions || null,\n        signalOffer: function (args) {\n            if (!pc) {\n                return;\n            }\n\n            params.signalOffer(args);\n            pc.state.dispatch('sentOffer');\n        },\n        signalConnected: params.signalConnected,\n        signalAnswer: params.signalAnswer,\n        signalModify: params.signalModify,\n        signalHangup: params.signalHangup,\n        signalReport: params.signalReport,\n        signalCandidate: params.signalCandidate\n    });\n\n    /**\n     * Array of streams of local media that we are sending to the remote party.\n     * @name outgoingMediaStreams\n     * @type {Array<respoke.LocalMedia>}\n     */\n    that.outgoingMediaStreams = [];\n    that.outgoingMediaStreams.hasAudio = function () {\n        if (that.outgoingMediaStreams.length === 0) {\n            return false;\n        }\n\n        return !that.outgoingMediaStreams.every(function (stream) {\n            return stream.getAudioTracks().length === 0;\n        });\n    };\n    that.outgoingMediaStreams.hasVideo = function () {\n        if (that.outgoingMediaStreams.length === 0) {\n            return false;\n        }\n\n        return !that.outgoingMediaStreams.every(function (stream) {\n            return stream.getVideoTracks().length === 0;\n        });\n    };\n\n    if (params.outgoingMedia) {\n        that.outgoingMediaStreams.push(params.outgoingMedia);\n    }\n\n    /**\n     * Local media that we are sending to the remote party. This will be undefined if we are sending no media.\n     * This property is just the first item in the `outgoingMediaStreams` array. If multiple streams are present,\n     * use that array to find the stream you need instead of relying on this property.\n     * @name outgoingMedia\n     * @type {respoke.LocalMedia}\n     */\n    Object.defineProperty(that, \"outgoingMedia\", {\n        configurable: false,\n        enumerable: true,\n        get: function () {\n            return that.outgoingMediaStreams[0];\n        },\n        set: function () {\n            // ignore\n        }\n    });\n\n    /**\n     * Array of streams of remote media that we are receiving from the remote party.\n     * @name incomingMediaStreams\n     * @type {Array<respoke.RemoteMedia>}\n     */\n    that.incomingMediaStreams = [];\n    that.incomingMediaStreams.hasAudio = function () {\n        if (that.incomingMediaStreams.length === 0) {\n            return false;\n        }\n\n        return !that.incomingMediaStreams.every(function (stream) {\n            return stream.getAudioTracks().length === 0;\n        });\n    };\n    that.incomingMediaStreams.hasVideo = function () {\n        if (that.incomingMediaStreams.length === 0) {\n            return false;\n        }\n\n        return !that.incomingMediaStreams.every(function (stream) {\n            return stream.getVideoTracks().length === 0;\n        });\n    };\n\n    /**\n     * Remote media that we are receiving from the remote party.  This will be undefined if we\n     * are receiving no media. This property is just the first item in the `incomingMediaStreams` array. If multiple\n     * streams are present, use that array to find the stream you need instead of relying on this property.\n     * @name incomingMedia\n     * @type {respoke.RemoteMedia}\n     */\n    Object.defineProperty(that, \"incomingMedia\", {\n        configurable: false,\n        enumerable: true,\n        get: function () {\n            return that.incomingMediaStreams[0];\n        },\n        set: function () {\n            // ignore\n        }\n    });\n\n    /**\n     * A flag indicating whether this call has audio or is expected to have audio coming in from the other side.\n     *\n     * @name hasAudio\n     * @type {boolean}\n     */\n    Object.defineProperty(that, \"hasAudio\", {\n        configurable: false,\n        enumerable: true,\n        get: that.incomingMediaStreams.hasAudio,\n        set: function () {\n            // ignore\n        }\n    });\n\n    /**\n     * A flag indicating whether this call has video or is expected to have video coming in from the other side.\n     *\n     * @name hasVideo\n     * @type {boolean}\n     */\n    Object.defineProperty(that, \"hasVideo\", {\n        configurable: false,\n        enumerable: true,\n        get: that.incomingMediaStreams.hasVideo,\n        set: function () {\n            // ignore\n        }\n    });\n\n    delete params.signalingChannel;\n    delete that.signalingChannel;\n\n    /**\n     * @memberof! respoke.Call\n     * @name videoIsMuted\n     * @private\n     * @type {boolean}\n     */\n    var videoIsMuted = false;\n    /**\n     * @memberof! respoke.Call\n     * @name audioIsMuted\n     * @private\n     * @type {boolean}\n     */\n    var audioIsMuted = false;\n    /**\n     * @memberof! respoke.Call\n     * @name directConnection\n     * @private\n     * @type {respoke.DirectConnection}\n     */\n    var directConnection = null;\n    /**\n     * @memberof! respoke.Call\n     * @name toSendHangup\n     * @private\n     * @type {boolean}\n     */\n    var toSendHangup = null;\n\n    /**\n     * Set up promises. If we're not the caller, we need to listen for approval AND the remote SDP to come in\n     * before we can act on the call. Save parameters sent in with the constructor, then delete them off the call.\n     * If this call was initiated with a DirectConnection, set it up so answer() will be the approval mechanism.\n     * @method respoke.Call.init\n     * @memberof! respoke.Call\n     * @fires respoke.Client#call\n     * @private\n     */\n    function init() {\n        log.debug('Call.init');\n\n        if (defModify !== undefined) {\n            defMedia = Q.defer();\n        }\n\n        pc.init(); // instantiates RTCPeerConnection, can't call on modify\n        if (defModify === undefined && pc.state.needDirectConnection === true) {\n            actuallyAddDirectConnection(params);\n        }\n    }\n\n    /**\n     * Register any event listeners passed in as callbacks, save other params to answer() and accept().\n     * @memberof! respoke.Call\n     * @method respoke.Call.saveParameters\n     * @param {object} params\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n     * it was ended in a graceful manner.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will fire even if\n     * the approval was automatic.\n     * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n     * user's media.  This event gets fired even if the allow process is automatic, i. e., permission and media is\n     * granted by the browser without asking the user to approve it.\n     * @param {respoke.Call.onToneSent} [params.onToneSent] - Callback for when a DTMF tone gets sent from the client.\n     * @param {Array<RTCConstraints>} [params.constraints]\n     * @param {boolean} [params.forceTurn]\n     * @param {boolean} [params.receiveOnly]\n     * @param {boolean} [params.sendOnly]\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n     * video attached to it.\n     * @private\n     * @fires respoke.Call#stats\n     */\n    function saveParameters(params) {\n        var isNewConstraint;\n\n        /* This happens when the call is hung up automatically, for instance due to the lack of an onCall\n         * handler. In this case, pc has been set to null in hangup. The call has already failed, and the\n         * invocation of this function is an artifact of async code not being finished yet, so we can just\n         * skip all of this setup.\n         */\n        if (!pc) {\n            return;\n        }\n\n        that.listen('local-stream-received', params.onLocalMedia);\n        that.listen('connect', params.onConnect);\n        that.listen('hangup', params.onHangup);\n        that.listen('allow', params.onAllow);\n        that.listen('answer', params.onAnswer);\n        that.listen('approve', params.onApprove);\n        that.listen('mute', params.onMute);\n        that.listen('requesting-media', params.onRequestingMedia);\n        that.listen('tone-sent', params.onToneSent);\n        that.listen('tone-sending-started', params.onToneSendingStarted);\n        that.listen('tone-sending-cancelled', params.onToneSendingCancelled);\n\n        previewLocalMedia = typeof params.previewLocalMedia === 'function' ?\n            params.previewLocalMedia : previewLocalMedia;\n\n        pc.state.receiveOnly = typeof params.receiveOnly === 'boolean' ? params.receiveOnly : pc.state.receiveOnly;\n        pc.state.sendOnly = typeof params.sendOnly === 'boolean' ? params.sendOnly : pc.state.sendOnly;\n        pc.state.needDirectConnection = typeof params.needDirectConnection === 'boolean' ?\n            params.needDirectConnection : pc.state.needDirectConnection;\n        pc.disableTurn = typeof params.disableTurn === 'boolean' ? params.disableTurn : !!pc.disableTurn;\n        pc.forceTurn = typeof params.forceTurn === 'boolean' ? params.forceTurn : !!pc.forceTurn;\n\n        that.videoLocalElement = params.videoLocalElement ? params.videoLocalElement : that.videoLocalElement;\n        that.videoRemoteElement = params.videoRemoteElement ? params.videoRemoteElement : that.videoRemoteElement;\n\n        if (pc.state.receiveOnly) {\n            that.outgoingMediaStreams.length = 0;\n            that.constraints = [];\n        } else if (params.constraints) {\n            that.constraints = respoke.convertConstraints(params.constraints);\n            updateOutgoingMediaEstimate({constraints: that.constraints[0], source: params.source});\n        }\n\n        if (pc.state.sendOnly) {\n            that.incomingMediaStreams.length = 0;\n        } else if (params.constraints && pc.state.caller === true && that.incomingMediaStreams.length === 0) {\n            // TODO above condition is not good enough for media renegotiation.\n            // Only the person who initiated this round of media negotiation needs to estimate remote\n            // media based on what constraints local media is using.\n            // Also don't try to guess what media they'll send back if we're sending more than one stream.\n            that.constraints = respoke.convertConstraints(params.constraints);\n            updateIncomingMediaEstimate({constraints: params.constraints[0]});\n        }\n\n        pc.listen('stats', function fireStats(evt) {\n            /**\n             * This event is fired every time statistical information about audio and/or video on a call\n             * becomes available.\n             * @event respoke.Call#stats\n             * @type {respoke.Event}\n             * @property {respoke.MediaStats} stats - an object with stats in it.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.fire('stats', {stats: evt.stats});\n        }, true);\n\n        delete that.signalOffer;\n        delete that.signalConnected;\n        delete that.signalAnswer;\n        delete that.signalHangup;\n        delete that.signalReport;\n        delete that.signalCandidate;\n    }\n\n    /**\n     * Build respoke.LocalMedia after the call is answered.\n     * @memberof! respoke.Call\n     * @method respoke.Call.buildLocalMedia\n     * @param {RTCConstraint} constraint\n     * @private\n     */\n    function buildLocalMedia(constraint) {\n        var localMedia;\n\n        if (pc.state.receiveOnly) {\n            return Q.reject(new Error(\"Shouldn't have requested local media when receiveOnly is true.\"));\n        }\n\n        if (constraint.className === 'respoke.LocalMedia') {\n            localMedia = constraint;\n        } else {\n            localMedia = respoke.LocalMedia({\n                hasScreenShare: respoke.constraintsHasScreenShare(constraint),\n                constraints: constraint,\n                source: params.source\n            });\n            that.outgoingMediaStreams.push(localMedia);\n        }\n\n        // use passed video element if localMedia constraints contain video\n        if (respoke.constraintsHasVideo(localMedia.constraints)) {\n            localMedia.element = that.videoLocalElement;\n        }\n\n        localMedia.listen('requesting-media', function waitAllowHandler(evt) {\n            if (!pc) {\n                return;\n            }\n\n            /**\n             * The browser is asking for permission to access the User's media. This would be an ideal time\n             * to modify the UI of the application so that the user notices the request for permissions\n             * and approves it.\n             * @event respoke.Call#requesting-media\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.Call} target\n             */\n            that.fire('requesting-media');\n        }, true);\n\n        localMedia.listen('allow', function allowHandler(evt) {\n            if (!pc) {\n                return;\n            }\n\n            /**\n             * The user has approved the request for media. Any UI changes made to remind the user to click Allow\n             * should be canceled now. This event is the same as the `onAllow` callback.  This event gets fired\n             * even if the allow process is automatic, i. e., permission and media is granted by the browser\n             * without asking the user to approve it.\n             * @event respoke.Call#allow\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.Call} target\n             */\n            that.fire('allow');\n            pc.state.dispatch('approve', {\n                previewLocalMedia: previewLocalMedia\n            });\n        }, true);\n\n        return localMedia.start().then(function () {\n            streamReceivedHandler(localMedia);\n        });\n    }\n\n    /**\n     * Answer the call and start the process of obtaining media. This method is called automatically on the caller's\n     * side. This method must be called on the callee's side to indicate that the endpoint does wish to accept the\n     * call. The app will have a later opportunity, by passing a callback named previewLocalMedia, to approve or\n     * reject the call based on whether audio and/or video is working and is working at an acceptable level.\n     *\n     *     client.listen('call', function (evt) {\n     *         if (!evt.call.caller) {\n     *             evt.call.answer();\n     *         }\n     *     });\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.answer\n     * @fires respoke.Call#answer\n     * @param {object} [params]\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n     * it was ended in a graceful manner.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n     * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n     * granted by the browser without asking the user to approve it.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {boolean} [params.receiveOnly] - Whether or not we accept media.\n     * @param {boolean} [params.sendOnly] - Whether or not we send media.\n     * @param {Array<RTCConstraints>} [params.constraints] - Information about the media for this call.\n     * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n     * video attached to it.\n     */\n    that.answer = function (params) {\n        params = params || {};\n        log.debug('Call.answer', params);\n\n        saveParameters(params);\n\n        pc.listen('remote-stream-received', onRemoteStreamAdded, true);\n        pc.listen('remote-stream-removed', onRemoteStreamRemoved, true);\n\n        pc.state.once('approving-device-access:entry', function (evt) {\n            doAddVideo(params);\n        });\n        pc.state.dispatch('answer', {\n            previewLocalMedia: previewLocalMedia,\n            approve: that.approve\n        });\n        /**\n         * The call was answered.\n         * @event respoke.Call#answer\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('answer');\n    };\n\n    /**\n     * Accept a request to modify the media on the call. This method should be called within the Call#modify\n     * event listener, which gives the developer or website user a chance to see what changes are proposed and\n     * to accept or reject them.\n     *\n     *     call.listen('modify', function (evt) {\n     *         evt.call.accept();\n     *     });\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.accept\n     * @fires respoke.Call#accept\n     * @private\n     * @param {object} [params]\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the developer to receive the\n     * remote video element.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for the developer to be notified about hangup.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {boolean} [params.receiveOnly] - Whether or not we accept media.\n     * @param {boolean} [params.sendOnly] - Whether or not we send media.\n     * @param {Array<RTCConstraints>} [params.constraints] - Information about the media for this call.\n     */\n    that.accept = that.answer;\n\n    /**\n     * Start the process of network and media negotiation. If the app passes in a callback named previewLocalMedia\n     * in order to allow the logged-in person a chance to base their decision to continue the call on whether\n     * audio and/or video is working correctly,\n     * this method must be called on both sides in order to begin the call. If call.approve() is called, the call\n     * will progress as expected. If call.reject() is called, the call will be aborted.\n     *\n     *     call.listen('local-stream-received', function (evt) {\n     *         if (userLikesVideo()) {\n     *             evt.call.approve();\n     *         }\n     *     });\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.approve\n     * @fires respoke.Call#approve\n     */\n    that.approve = function () {\n        log.debug('Call.approve');\n        /**\n         * Fired when the local media access is approved.\n         * @event respoke.Call#approve\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('approve');\n        pc.state.dispatch('approve', {\n            previewLocalMedia: previewLocalMedia\n        });\n\n        if (defModify && defModify.promise.isPending()) {\n            defModify.resolve(true);\n            defModify = undefined;\n        }\n    };\n\n    /**\n     * Listen for the remote side to remove media in the middle of the call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.onRemoteStreamRemoved\n     * @private\n     * @param {object}\n     */\n    function onRemoteStreamRemoved(evt) {\n        log.debug('pc event: remote stream removed');\n    }\n\n    /**\n     * Listen for the remote side to add additional media in the middle of the call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.onRemoteStreamAdded\n     * @private\n     * @param {object}\n     * @fires respoke.Call#connect\n     */\n    function onRemoteStreamAdded(evt) {\n        var hasAudio = false;\n        var hasVideo = false;\n        var hasScreenShare = false;\n        var remoteMedia;\n\n        if (!pc) {\n            return;\n        }\n        log.debug('received remote media', evt);\n\n        // This is the first remote media we have received. The one we currently have is a guess. Rip it\n        // out and replace it with reality.\n        if (that.incomingMediaStreams.length === 1 && that.incomingMediaStreams[0].temporary === true) {\n            // have to do it this way because assigning a blank array to that.incomingMediaStreams will\n            // clobber the methods like hasAudio that we have added to the array.\n            that.incomingMediaStreams.length = 0;\n        }\n\n        hasAudio = evt.stream.getAudioTracks().length > 0;\n        hasVideo = evt.stream.getVideoTracks().length > 0;\n        // TODO this is not good enough long term.\n        hasScreenShare = hasVideo && that.target === 'screenshare';\n\n        remoteMedia = respoke.RemoteMedia({\n            element: that.videoRemoteElement,\n            stream: evt.stream,\n            hasScreenShare: hasScreenShare,\n            constraints: {\n                audio: hasAudio,\n                video: hasVideo\n            }\n        });\n        that.incomingMediaStreams.push(remoteMedia);\n\n        if (that.incomingMediaStreams.length < pc.sdpExpectedStreamCount) {\n            // there are more streams left to receive before we can dispatch the event to the state machine.\n            return;\n        }\n\n        /**\n         * Indicates that either remote media stream has been added to the call or if no\n         * media is expected, the other side is receiving our media.\n         * @event respoke.Call#connect\n         * @type {respoke.Event}\n         * @property {Element} element - The HTML5 Video element with the remote stream attached.\n         * @property {respoke.RemoteMedia} stream - The incomingMedia property on the call.\n         * @property {string} name - The event name.\n         * @property {respoke.Call} target\n         */\n        pc.state.dispatch('receiveRemoteMedia');\n        that.fire('connect', {\n            stream: remoteMedia.stream,\n            element: remoteMedia.element\n        });\n    }\n\n    /**\n     * ## The plugin `respoke.MediaStats` must be loaded before using this method.\n     *\n     * Start the process of listening for a continuous stream of statistics about the flow of audio and/or video.\n     * Since we have to wait for both the answer and offer to be available before starting\n     * statistics, the library returns a promise for the stats object. The statistics object does not contain the\n     * statistics; rather it contains methods of interacting with the actions of obtaining statistics. To obtain\n     * the actual statistics one time, use stats.getStats(); use the onStats callback to obtain a continuous\n     * stream of statistics every `interval` seconds.  Returns null if stats module is not loaded.\n     *\n     *     call.getStats({\n     *         onStats: function (evt) {\n     *             console.log('Stats', evt.stats);\n     *         }\n     *     }).done(function () {\n     *         console.log('Stats started');\n     *     }, function (err) {\n     *         console.log('Call is already hung up.');\n     *     });\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.getStats\n     * @param {object} params\n     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive\n     * the stats. If no callback is provided, the call's report will contain stats but the developer will not\n     * receive them on the client-side.\n     * @param {respoke.Call.statsSuccessHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Call.errorHandler} [params.onError] - Error handler for this invocation of this method only.\n     * @returns {Promise<object>|null}\n     */\n    function getStats(params) {\n        if (pc && pc.getStats) {\n            that.listen('stats', params.onStats);\n            return pc.getStats(params);\n        }\n        return null;\n    }\n    if (respoke.MediaStats) {\n        that.getStats = getStats;\n    }\n\n    /**\n     * Return local video element with the logged-in endpoint's audio and/or video streams attached to it.\n     *\n     *     var el = call.getLocalElement();\n     *     container.append(el);\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.getLocalElement\n     * @returns {Video} An HTML5 video element.\n     */\n    that.getLocalElement = function () {\n        return that.outgoingMediaStreams[0] ? that.outgoingMediaStreams[0].element : undefined;\n    };\n\n    /**\n     * Return remote video element with the remote endpoint's audio and/or video streams attached to it.\n     *\n     *     var el = call.getRemoteElement();\n     *     container.append(el);\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.getRemoteElement\n     * @returns {Video} An HTML5 video element.\n     */\n    that.getRemoteElement = function () {\n        return that.incomingMediaStreams[0] ? that.incomingMediaStreams[0].element : undefined;\n    };\n\n    /**\n     * Set up the local media.\n     * @memberof! respoke.Call\n     * @method respoke.Call.streamReceivedHandler\n     * @param {respoke.LocalMedia} The local media.\n     * @private\n     */\n    function streamReceivedHandler(localMedia) {\n        if (!pc) {\n            return;\n        }\n\n        pc.addStream(localMedia.stream);\n        if (typeof previewLocalMedia === 'function' && localMedia.element) {\n            previewLocalMedia(localMedia.element, that);\n        }\n\n        localMedia.listen('stop', function stopHandler(/* evt */) {\n            // if the local media has stopped, it has already been removed from respoke.streams.\n            // just need to remove it from the call's streams, and hangup if no streams left.\n\n            var idx = that.outgoingMediaStreams.indexOf(localMedia);\n            if (idx > -1) {\n                that.outgoingMediaStreams.splice(idx, 1);\n            }\n\n            if (!that.outgoingMediaStreams.length && !that.incomingMediaStreams.length) {\n                that.hangup({ reason: 'last stream ended' });\n            }\n        });\n\n        /**\n         * Indicate that the call has received local media from the browser.\n         * @event respoke.Call#local-stream-received\n         * @type {respoke.Event}\n         * @property {Element} element\n         * @property {respoke.LocalMedia} stream\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('local-stream-received', {\n            element: localMedia.element,\n            stream: localMedia\n        });\n\n        /**\n         * This event indicates that local video has been unmuted.\n         * @event respoke.Call#mute\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        localMedia.listen('mute', function (evt) {\n            that.fire('mute', {\n                type: evt.type,\n                muted: evt.muted\n            });\n        });\n    }\n\n    /**\n     * Create the RTCPeerConnection and add handlers. Process any offer we have already received. This method is called\n     * after answer() so we cannot use this method to set up the DirectConnection.\n     * @memberof! respoke.Call\n     * @method respoke.Call.doAddVideo\n     * @private\n     * @param {object} params\n     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect]\n     * @param {respoke.Call.onHangup} [params.onHangup]\n     * @fires respoke.Call#requesting-media\n     * @fires respoke.Call#allow\n     * @fires respoke.Call#local-stream-received\n     */\n    function doAddVideo(params) {\n        log.debug('Call.doAddVideo');\n        saveParameters(params);\n    }\n\n    /**\n     * Add a video and audio stream to the existing call. By default, this method adds both video AND audio.\n     * If audio is not desired, pass {audio: false}.\n     * @memberof! respoke.Call\n     * @method respoke.Call.addVideo\n     * @private\n     * @param {object} params\n     * @param {boolean} [params.audio=true]\n     * @param {boolean} [params.video=true]\n     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints, indicating the media\n     * being requested is\n     * an audio and/or video stream.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect]\n     * @param {respoke.Call.onHangup} [params.onHangup]\n     * @param {respoke.Call.mediaSuccessHandler} [params.onSuccess]\n     * @param {respoke.Client.errorHandler} [params.onError]\n     * @returns {Promise<respoke.LocalMedia>}\n     */\n    that.addVideo = function (params) {\n        log.debug('Call.addVideo');\n        params = params || {};\n        if (!params.constraints || !params.constraints.length) {\n            params.constraints = [{video: true, audio: true}];\n        }\n        params.instanceId = instanceId;\n\n        if (!defMedia.promise.isFulfilled()) { // we're the callee & have just accepted to modify\n            doAddVideo(params);\n        } else { // we're the caller and need to see if we can modify\n            pc.startModify({\n                constraints: params.constraints\n            });\n            defModify = Q.defer();\n            defModify.promise.then(function modifyAccepted() {\n                doAddVideo(params);\n            });\n        }\n        return defModify.promise;\n    };\n\n    /**\n     * Add an audio stream to the existing call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.addAudio\n     * @private\n     * @param {object} params\n     * @param {boolean} [params.audio=true]\n     * @param {boolean} [params.video=false]\n     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints, indicating the media\n     * being requested is an audio and/or video stream.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect]\n     * @param {respoke.Call.onHangup} [params.onHangup]\n     * @param {respoke.Call.mediaSuccessHandler} [params.onSuccess]\n     * @param {respoke.Client.errorHandler} [params.onError]\n     * @returns {Promise<respoke.LocalMedia>}\n     */\n    that.addAudio = function (params) {\n        params = params || {};\n        if (!params.constraints || !params.constraints.length) {\n            params.constraints = [{video: false, audio: true}];\n        }\n\n        return that.addVideo(params);\n    };\n\n    /**\n     * Get the direct connection on this call, if it exists.\n     *\n     *     var dc = call.getDirectConnection();\n     *     if (!dc) {\n     *         console.log(\"No direct connection has been started.\");\n     *     } else {\n     *         dc.sendMessage({message: 'hi'});\n     *     }\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.getDirectConnection\n     * @returns {respoke.DirectConnection}\n     */\n    that.getDirectConnection = function () {\n        return directConnection || null;\n    };\n\n    /**\n     * Remove a direct connection from the existing call. If there is no other media, this will hang up the call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.removeDirectConnection\n     * @private\n     * @param {object} params\n     * @arg {boolean} [params.skipModify] Do not restart media negotiation.\n     */\n    that.removeDirectConnection = function (params) {\n        params = params || {};\n        log.debug('Call.removeDirectConnection');\n\n        if (directConnection) {\n            directConnection.close({skipRemove: true});\n        }\n\n        if (!that.hasMedia()) {\n            log.debug('Hanging up because there are no local streams.');\n            that.hangup();\n            return;\n        }\n\n        if (params.skipModify === true) {\n            return;\n        }\n\n        pc.startModify({\n            directConnection: false\n        });\n        defModify = Q.defer();\n        defModify.promise.done(function onModifySuccess() {\n            defMedia.resolve();\n            defModify = undefined;\n        });\n    };\n\n    /**\n     * Add a direct connection to the existing call.\n     *\n     *     call.addDirectConnection({\n     *         onOpen: function (evt) {\n     *             console.log(\"Direct connection open!\");\n     *         }\n     *     });\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.addDirectConnection\n     * @private\n     * @param {object} params\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for the developer to be notified about\n     * closing the connection.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for the developer to be notified about\n     * opening the connection.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for the developer to be notified\n     * about incoming messages. Not usually necessary to listen to this event if you are already listening to\n     * respoke.Endpoint#message.\n     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess]\n     * @param {respoke.Client.errorHandler} [params.onError]\n     * @returns {Promise<respoke.DirectConnection>}\n     */\n    that.addDirectConnection = function (params) {\n        log.debug('Call.addDirectConnection');\n        pc.startModify({\n            directConnection: true\n        });\n        defModify = Q.defer();\n        return defModify.promise.then(function onModifySuccess() {\n            return actuallyAddDirectConnection(params);\n        }, function onModifyError(err) {\n            throw err;\n        });\n    };\n\n    /**\n     * Add a direct connection to the existing call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.actuallyAddDirectConnection\n     * @private\n     * @param {object} params\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for the developer to be notified about\n     * closing the connection.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for the developer to be notified about\n     * opening the connection.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for the developer to be notified\n     * about incoming messages. Not usually necessary to listen to this event if you are already listening to\n     * respoke.Endpoint#message.\n     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess]\n     * @param {respoke.Client.errorHandler} [params.onError]\n     * @returns {Promise<respoke.DirectConnection>}\n     * @fires respoke.Client#direct-connection\n     * @fires respoke.Call#direct-connection\n     */\n    function actuallyAddDirectConnection(params) {\n        log.debug('Call.actuallyAddDirectConnection', params);\n        params = params || {};\n        defMedia.promise.then(params.onSuccess, params.onError);\n\n        if (directConnection && directConnection.isActive()) {\n            if (defMedia.promise.isPending()) {\n                defMedia.resolve(directConnection);\n            } else {\n                log.warn(\"Not creating a new direct connection.\");\n            }\n            return defMedia.promise;\n        }\n\n        params.instanceId = instanceId;\n        params.pc = pc;\n        params.call = that;\n\n        directConnection = respoke.DirectConnection(params);\n\n        directConnection.listen('close', function closeHandler() {\n            if (!that.hasMedia()) {\n                log.debug('Hanging up because there are no local streams.');\n                that.hangup();\n            } else {\n                that.removeDirectConnection({skipModify: true});\n            }\n        }, true);\n\n        directConnection.listen('accept', function acceptHandler() {\n            if (pc.state.caller === false) {\n                log.debug('Answering as a result of approval.');\n            } else {\n                defMedia.resolve(directConnection);\n            }\n        }, true);\n\n        directConnection.listen('open', function openHandler() {\n            pc.state.dispatch('receiveRemoteMedia');\n        }, true);\n\n        directConnection.listen('error', function errorHandler(err) {\n            defMedia.reject(new Error(err));\n        }, true);\n\n        that.remoteEndpoint.directConnection = directConnection;\n\n        /**\n         * This event is fired when the local end of the directConnection is available. It still will not be\n         * ready to send and receive messages until the 'open' event fires.\n         * @event respoke.Call#direct-connection\n         * @type {respoke.Event}\n         * @property {respoke.DirectConnection} directConnection\n         * @property {respoke.Endpoint} endpoint\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('direct-connection', {\n            directConnection: directConnection,\n            endpoint: that.remoteEndpoint\n        });\n\n        /**\n         * This event is fired when the logged-in endpoint is receiving a request to open a direct connection\n         * to another endpoint.  If the user wishes to allow the direct connection, calling\n         * evt.directConnection.accept() will allow the connection to be set up.\n         * @event respoke.Client#direct-connection\n         * @type {respoke.Event}\n         * @property {respoke.DirectConnection} directConnection\n         * @property {respoke.Endpoint} endpoint\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         * @private\n         */\n        client.fire('direct-connection', {\n            directConnection: directConnection,\n            endpoint: that.remoteEndpoint\n        });\n\n        if (pc.state.caller === true) {\n            directConnection.accept();\n        }\n\n        return defMedia.promise;\n    }\n\n    /**\n     * Close the direct connection.\n     * @memberof! respoke.Call\n     * @method respoke.Call.closeDirectConnection\n     */\n    that.closeDirectConnection = function () {\n        if (directConnection) {\n            directConnection.close();\n            directConnection = null;\n        }\n    };\n\n    /**\n     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n     * signal is not false and we have not received a hangup signal from the remote party.\n     * @memberof! respoke.Call\n     * @method respoke.Call.hangup\n     * @fires respoke.Call#hangup\n     * @param {object} params\n     * @arg {boolean} params.signal Optional flag to indicate whether to send or suppress sending\n     * a hangup signal to the remote side.\n     */\n    that.hangup = function (params) {\n        if (!pc) {\n            return;\n        }\n        params = params || {};\n        params.reason = params.reason || \"hangup method called.\";\n        pc.state.dispatch('hangup', params);\n    };\n    that.hangup = respoke.callOnce(that.hangup);\n\n    /**\n     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n     * signal is not false and we have not received a hangup signal from the remote party. This is an event\n     * handler added to the state machine via `once`.\n     * @memberof! respoke.Call\n     * @method respoke.Call.hangup\n     * @fires respoke.Call#hangup\n     * @private\n     */\n    var doHangup = function () {\n        log.debug('hangup', that.caller);\n\n        that.outgoingMediaStreams.forEach(function (stream) {\n            // only call stop on the stream if it was constructed explicitly for the call\n            if (stream !== params.outgoingMedia) {\n                stream.stop();\n            }\n        });\n\n        if (directConnection) {\n            directConnection.close();\n            directConnection = null;\n        }\n\n        if (pc) {\n            pc.close({signal: (pc.state.receivedBye ? false : pc.state.signalBye)});\n        }\n\n        /**\n         * This event is fired when the call has hung up.\n         * @event respoke.Call#hangup\n         * @type {respoke.Event}\n         * @property {boolean} sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('hangup', {\n            reason: pc.state.hangupReason || \"No reason specified.\"\n        });\n\n        pc.state.ignore();\n        pc.ignore();\n        that.ignore();\n        pc = null;\n    };\n    doHangup = respoke.callOnce(doHangup);\n\n    /**\n     * Expose hangup as reject for approve/reject workflow.\n     * @memberof! respoke.Call\n     * @method respoke.Call.reject\n     * @param {object} params\n     */\n    that.reject = function () {\n        if (!pc) {\n            return;\n        }\n        pc.state.dispatch('reject', {reason: 'call.reject() called'});\n    };\n\n    /**\n     * Indicate whether a call is being setup or is in progress.\n     * @memberof! respoke.Call\n     * @method respoke.Call.isActive\n     * @returns {boolean}\n     */\n    that.isActive = function () {\n        return !!(pc && pc.isActive() && (\n            that.outgoingMediaStreams.length > 0 ||\n            that.incomingMediaStreams.length > 0 ||\n            (directConnection && directConnection.isActive())\n        ));\n    };\n\n    /**\n     * Set the estimated media status on incoming media.\n     * @memberof! respoke.Call\n     * @method respoke.Call.listenAnswer\n     * @param {object} evt\n     * @param {object} evt.signal - The offer signal including the sdp\n     * @private\n     */\n    function listenAnswer(evt) {\n        log.debug('listenAnswer', evt.signal);\n\n        that.hasDataChannel = respoke.sdpHasDataChannel(evt.signal.sessionDescription.sdp);\n        updateIncomingMediaEstimate({sdp: evt.signal.sessionDescription});\n    }\n\n    /**\n     * Set the estimated media status on incoming media.\n     * @memberof! respoke.Call\n     * @method respoke.Call.updateIncomingMediaEstimate\n     * @param {object} params\n     * @param {RTCSessionDescriptor} [params.sdp] - optional sdp to use to estimate media\n     * @param {RTCConstraints} [params.constraints] - optional constraints to use to estimate media\n     * @private\n     */\n    function updateIncomingMediaEstimate(params) {\n        if (pc.state.sendOnly) {\n            that.incomingMediaStreams.length = 0;\n            return;\n        }\n\n        if (!params.sdp && !params.constraints) {\n            throw new Error(\"Can't estimate incoming media without sdp or constraints\");\n        }\n\n        if (that.incomingMediaStreams.length === 0) {\n            that.incomingMediaStreams.push(respoke.RemoteMedia({\n                hasScreenShare: (that.target === 'screenshare'),\n                temporary: true\n            }));\n        }\n\n        if (params.sdp) {\n            if (that.incomingMediaStreams[0] && that.incomingMediaStreams[0].temporary) {\n                that.incomingMediaStreams[0].setSDP(params.sdp);\n            }\n        }\n\n        if (params.constraints) {\n            if (that.incomingMediaStreams[0] && that.incomingMediaStreams[0].temporary) {\n                that.incomingMediaStreams[0].setConstraints(params.constraints);\n            }\n        }\n    }\n\n    /**\n     * Set the estimated media status on outgoing media. For this method, by the time we have constraints, we're\n     * already calling getUserMedia so we will have exactly the right information. No need to use constraints\n     * to estimate.\n     * @memberof! respoke.Call\n     * @method respoke.Call.updateOutgoingMediaEstimate\n     * @param {object} params\n     * @param {RTCSessionDescriptor} [params.sdp] - optional sdp to use to estimate media\n     * @param {RTCConstraints} [params.constraints] - optional constraints to use to estimate media\n     * @private\n     */\n    function updateOutgoingMediaEstimate(params) {\n        if (pc.state.receiveOnly) {\n            that.outgoingMediaStreams.length = 0;\n            that.constraints = [];\n            return;\n        }\n\n        if (!params.sdp && !params.constraints) {\n            throw new Error(\"Can't estimate outgoing media without sdp or constraints\");\n        }\n\n        if (that.outgoingMediaStreams.length === 0) {\n            that.outgoingMediaStreams.push(respoke.LocalMedia({\n                instanceId: instanceId,\n                temporary: true,\n                source: params.source\n            }));\n        }\n\n        if (params.sdp) {\n            if (that.outgoingMediaStreams[0] && that.outgoingMediaStreams[0].temporary) {\n                that.outgoingMediaStreams[0].setSDP(params.sdp);\n            }\n        }\n\n        if (params.constraints) {\n            if (that.outgoingMediaStreams[0] && that.outgoingMediaStreams[0].temporary) {\n                that.outgoingMediaStreams[0].setConstraints(params.constraints);\n            }\n        }\n    }\n\n    /**\n     * Save the offer so we can tell the browser about it after the PeerConnection is ready.\n     * Set the estimated media status on incoming and outgoing media.\n     * @memberof! respoke.Call\n     * @method respoke.Call.listenOffer\n     * @param {object} evt\n     * @param {object} evt.signal - The offer signal including the sdp\n     * @private\n     * @fires respoke.Call#modify\n     */\n    function listenOffer(evt) {\n        log.debug('listenOffer', evt.signal);\n        var info = {};\n\n        that.sessionId = evt.signal.sessionId;\n        pc.state.receiveOnly = respoke.sdpHasSendOnly(evt.signal.sessionDescription.sdp);\n        pc.state.sendOnly = respoke.sdpHasReceiveOnly(evt.signal.sessionDescription.sdp);\n        pc.state.listen('connecting:entry', function () {\n            if (!pc.state.caller) {\n                pc.processOffer(evt.signal.sessionDescription);\n            }\n        });\n\n        // Only do this if we're still trying to guess what media is coming in.\n        // TODO not good enough for media renegotiation\n        updateIncomingMediaEstimate({sdp: evt.signal.sessionDescription});\n\n        /*\n         * Always overwrite constraints for callee on every offer, since answer() and accept() will\n         * always be called after parsing the SDP. However, if the caller isn't sending any media,\n         * use audio & video as our estimate.\n         * TODO not good enough for media renegotiation\n         */\n        // If sendOnly, we can't rely on the offer for media estimate. It doesn't have any media in it!\n        if (pc.state.sendOnly) {\n            updateOutgoingMediaEstimate({constraints: {\n                audio: true,\n                video: true\n            }});\n        } else {\n            updateOutgoingMediaEstimate({sdp: evt.signal.sessionDescription});\n        }\n\n        if (that.outgoingMedia) {\n            log.info(\"Default outgoingMedia constraints\", that.outgoingMedia.constraints);\n        }\n\n        if (pc.state.isModifying()) {\n            if (pc.state.needDirectConnection === true) {\n                info.directConnection = directConnection;\n            } else if (pc.state.needDirectConnection === false) {\n                // Nothing\n            } else {\n                info.call = that;\n            }\n            /**\n             * Indicates a request to add something to an existing call. If 'constraints' is set, evt.constraints\n             * describes the media the other side has added. In this case, call.approve() must be called in order\n             * to approve the new media and send the same type of media.  If directConnection exists, the other side\n             * wishes to to open a direct connection. In order to approve, call directConnection.accept(). In either\n             * case, call.reject() and directConnection.reject() can be called to decline the request to add to the\n             * call.\n             * @event respoke.Call#modify\n             * @type {respoke.Event}\n             * @property {object} [constraints]\n             * @property {boolean} [directConnection]\n             * @property {string} name - the event name.\n             * @property {respoke.Call} target\n             */\n            that.fire('modify', info);\n        }\n\n        pc.state.dispatch('receiveOffer', {\n            previewLocalMedia: previewLocalMedia,\n            approve: that.approve\n        });\n    }\n\n    /**\n     * Save the answer and tell the browser about it.\n     * @memberof! respoke.Call\n     * @method respoke.Call.listenModify\n     * @private\n     */\n    function listenModify(evt) {\n        log.debug('Call.listenModify', evt);\n        if (evt.signal.action === 'initiate') {\n            defModify = Q.defer();\n            pc.state.dispatch('modify', {receive: true});\n        }\n    }\n\n    /**\n     * Set up state and media for the modify.\n     * @memberof! respoke.Call\n     * @method respoke.Call.onModifyAccept\n     * @param {respoke.Event} evt\n     * @private\n     */\n    function onModifyAccept(evt) {\n        pc.state.dispatch('accept');\n\n        if (evt.signal.action !== 'initiate') {\n            defModify.resolve(); // resolved later for callee\n            defModify = undefined;\n            return;\n        }\n\n        // callee only from here down\n\n        // init the directConnection if necessary. We don't need to do anything with\n        // audio or video right now.\n        if (evt.signal.directConnection === true) {\n            actuallyAddDirectConnection().done(function successHandler(dc) {\n                directConnection = dc;\n                directConnection.accept();\n            });\n        } else if (evt.signal.directConnection === false) {\n            if (directConnection) {\n                that.removeDirectConnection({skipModify: true});\n                defMedia.resolve(false);\n            }\n        }\n        pc.state.needDirectConnection = typeof evt.signal.directConnection === 'boolean' ?\n            evt.signal.directConnection : null;\n        that.outgoingMedia.constraints = evt.signal.constraints || that.outgoingMedia.constraints;\n    }\n\n    /**\n     * Ignore the modify.\n     * @memberof! respoke.Call\n     * @method respoke.Call.onModifyReject\n     * @param {respoke.Event} evt\n     * @param {Error} evt.err\n     * @private\n     */\n    function onModifyReject(evt) {\n        if (evt.signal.action !== 'initiate') {\n            defMedia.reject(evt.err);\n            defModify.reject(evt.err);\n            defModify = undefined;\n        }\n    }\n\n    /**\n     * If video is muted, unmute. If not muted, mute.\n     * @deprecated\n     * @memberof! respoke.Call\n     * @method respoke.Call.toggleVideo\n     */\n    that.toggleVideo = function () {\n        if (that.isActive()) {\n            if (!videoIsMuted) {\n                that.muteVideo();\n            } else {\n                that.unmuteVideo();\n            }\n        }\n    };\n\n    /**\n     * If audio is muted, unmute. If not muted, mute.\n     * @deprecated\n     * @memberof! respoke.Call\n     * @method respoke.Call.toggleAudio\n     */\n    that.toggleAudio = function () {\n        if (that.isActive()) {\n            if (!audioIsMuted) {\n                that.muteAudio();\n            } else {\n                that.unmuteAudio();\n            }\n        }\n    };\n\n    /**\n     * Indicate whether the call has media of any type flowing in either direction.\n     * @memberof! respoke.Call\n     * @method respoke.Call.hasMedia\n     * @returns {boolean}\n     */\n    that.hasMedia = function () {\n        var local;\n        var remote;\n\n        if (!pc || !pc.getLocalStreams) {\n            // PeerConnection.init() has not been called yet\n            return false;\n        }\n\n        local = pc.getLocalStreams();\n        remote = pc.getRemoteStreams();\n\n        if (directConnection && directConnection.isActive()) {\n            return true;\n        }\n\n        return (local.length > 0 || remote.length > 0);\n    };\n\n    /**\n     * Mute all local video streams.\n     * @memberof! respoke.Call\n     * @method respoke.Call.muteVideo\n     * @fires respoke.Call#mute\n     */\n    that.muteVideo = function () {\n        if (videoIsMuted) {\n            return;\n        }\n        that.outgoingMedia.muteVideo();\n        videoIsMuted = true;\n    };\n\n    /**\n     * Unmute all local video streams.\n     * @memberof! respoke.Call\n     * @method respoke.Call.unmuteVideo\n     * @fires respoke.Call#mute\n     */\n    that.unmuteVideo = function () {\n        if (!videoIsMuted) {\n            return;\n        }\n        that.outgoingMedia.unmuteVideo();\n        videoIsMuted = false;\n    };\n\n    /**\n     * Mute all local audio streams.\n     * @memberof! respoke.Call\n     * @method respoke.Call.muteAudio\n     * @fires respoke.Call#mute\n     */\n    that.muteAudio = function () {\n        if (audioIsMuted) {\n            return;\n        }\n        that.outgoingMedia.muteAudio();\n        audioIsMuted = true;\n    };\n\n    /**\n     * Unmute all local audio streams.\n     * @memberof! respoke.Call\n     * @method respoke.Call.unmuteAudio\n     * @fires respoke.Call#mute\n     */\n    that.unmuteAudio = function () {\n        if (!audioIsMuted) {\n            return;\n        }\n\n        that.outgoingMedia.unmuteAudio();\n        audioIsMuted = false;\n    };\n\n    /**\n     * Send tones to the first audio track in a stream\n     * @memberof! respoke.Call\n     * @method respoke.Call.sendTones\n     * @fires respoke.Call#tone-sent\n     * @fires respoke.Call#tone-sending-complete\n     * @fires respoke.Call#tone-sending-error\n     * @fires respoke.Call#tone-sending-started\n     * @param {respoke.Call.onSuccess} [params.onSuccess] - Callback for when a request to\n     * play tones has succeeded.\n     * @param {respoke.Call.onError} [params.onError] - Callback for when a request to\n     * play tones has failed.\n     * @returns {Promise<respoke.PeerConnection>}\n     */\n    that.sendTones = function (params) {\n        return pc.sendTones(params);\n    };\n\n    /**\n     * Cancels playback of all queued tones on the first audio track in a stream\n     * @memberof! respoke.Call\n     * @method respoke.Call.cancelTones\n     * @fires respoke.Call#tone-sending-cancelled\n     * @fires respoke.Call#tone-sending-error\n     * @param {respoke.Call.onSuccess} [params.onSuccess] - Callback for when a request to\n     * play tones has succeeded.\n     * @param {respoke.Call.onError} [params.onError] - Callback for when a request to\n     * play tones has failed.\n     * @returns {Promise<respoke.PeerConnection>}\n     */\n    that.cancelTones = function (params) {\n        return pc.cancelTones(params);\n    };\n\n    /**\n     * Save the hangup reason and hang up.\n     * @memberof! respoke.Call\n     * @method respoke.Call.listenHangup\n     * @params {object} evt\n     * @params {object} evt.signal - The hangup signal, including an optional hangup reason.\n     * @private\n     */\n    function listenHangup(evt) {\n        if (!pc) {\n            return;\n        }\n        pc.report.callStoppedReason = evt.signal.reason || \"Remote side hung up\";\n        pc.state.receivedBye = true;\n        pc.state.dispatch('hangup', {signal: false, reason: pc.report.callStoppedReason});\n    }\n\n    pc.state.once('terminated:entry', function (evt) {\n        doHangup();\n    }, true);\n\n    that.listen('signal-answer', listenAnswer);\n    that.listen('signal-offer', function (evt) {\n        if (pc.state.getState() === 'idle') {\n            pc.state.once('preparing:entry', function () {\n                listenOffer(evt);\n            });\n        } else {\n            listenOffer(evt);\n        }\n    }, true);\n    that.listen('signal-hangup', listenHangup, true);\n    that.listen('signal-modify', listenModify, true);\n    pc.listen('modify-reject', onModifyReject, true);\n    pc.listen('modify-accept', onModifyAccept, true);\n    that.listen('signal-icecandidates', function onCandidateSignal(evt) {\n        if (!pc || !evt.signal.iceCandidates || !evt.signal.iceCandidates.length) {\n            return;\n        }\n        evt.signal.iceCandidates.forEach(function processCandidate(candidate) {\n            if (!pc) {\n                return;\n            }\n            pc.addRemoteCandidate({candidate: candidate});\n        });\n    }, true);\n\n    that.listen('answer', function (evt) {\n        var mediaPromises = [];\n\n        if (pc.state.receiveOnly || pc.state.needDirectConnection) {\n            that.outgoingMediaStreams.length = 0;\n            return;\n        }\n\n        /*\n         * By the time we get to here, we could be in a couple of states.\n         *\n         * If receiveOnly is set to true, we could possibly have constraints (if the developer used the API wrong)\n         * but we will not have any media in that.outgoingMediaStreams. We should unset that.constraints and skip\n         * building any local media.\n         *\n         * If we have never received any constraints, and receiveOnly is NOT set to true, we will have an estimate\n         * at that.outgoingMediaStreams[0] with temporary set to true. This estimate was set by parsing the SDP.\n         *\n         * If we have received one or more constraints, that.constraints array will contain the most recent set\n         * AND we will have an estimate at that.outgoingMediaStreams[0] with temporary set to true. We must completely\n         * rebuild that.outgoingMediaStreams from that.constraints.\n         */\n        if (pc.state.receiveOnly) {\n            that.outgoingMediaStreams.length = 0;\n            that.constraints = [];\n            return;\n        }\n\n        if (that.constraints.length === 0) {\n            // We didn't get told what to do by constraints; use our guess.\n            that.outgoingMediaStreams[0].temporary = undefined;\n        } else if (that.outgoingMediaStreams.length > 0 && that.outgoingMediaStreams[0].temporary) {\n            // We got told what to do. Discard our guess. It's OK for that.outgoingMediaStreams to be empty now.\n            that.outgoingMediaStreams.shift();\n        }\n\n        // If outgoingMedia is passed into the Call then there is no need to build the LocalMedia here\n        if (params.outgoingMedia) {\n            return;\n        }\n\n        if (that.constraints.length > 0) {\n            that.outgoingMediaStreams.length = 0;\n            that.constraints.forEach(function (constraint) {\n                mediaPromises.push(buildLocalMedia(constraint));\n            });\n        } else if (that.outgoingMediaStreams.length > 0) {\n            that.outgoingMediaStreams.forEach(function (stream) {\n                mediaPromises.push(buildLocalMedia(stream));\n            });\n        } else {\n            throw new Error(\"I have no idea what type of media I am supposed to build.\");\n        }\n\n        // These errors are handled elsewhere.\n        Q.all(mediaPromises).done(function () {\n            pc.state.dispatch('receiveLocalMedia');\n        }, function (err) {\n            pc.state.dispatch('reject', {reason: 'media stream error'});\n            pc.report.callStoppedReason = err.message;\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.fire('error', {\n                reason: err.message\n            });\n        });\n    }, true);\n\n    if (pc.state.needDirectConnection !== true) {\n        pc.state.once('preparing:entry', function () {\n            /**\n             * This event provides notification for when an incoming call is being received.  If the user wishes\n             * to allow the call, the app should call evt.call.answer() to answer the call.\n             * @event respoke.Client#call\n             * @type {respoke.Event}\n             * @property {respoke.Call} call\n             * @property {respoke.Endpoint} endpoint\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n            client.fire('call', {\n                endpoint: that.remoteEndpoint,\n                call: that\n            });\n        }, true);\n    }\n\n    pc.state.listen('idle:exit', function (evt) {\n        saveParameters(params);\n    });\n\n    pc.state.listen('preparing:entry', function (evt) {\n        init();\n\n        if (params.outgoingMedia) {\n            streamReceivedHandler(params.outgoingMedia);\n            pc.state.dispatch('receiveLocalMedia');\n        }\n\n        if (pc.state.caller === true) {\n            that.answer();\n        }\n    }, true);\n\n    /*\n     *  If we are sending media and the other side is not, we have to fire Call#connect manually,\n     *  because the RTCPeerConnection will never reach an ICE connection state of \"connected.\"\n     *  This will need to be moved when we start handling media renegotiation.\n     */\n    pc.state.listen('connecting:entry', function connectNoMedia() {\n        if (pc.state.sendOnly) {\n            /**\n             * Indicates that either remote media stream has been added to the call or if no\n             * media is expected, the other side is receiving our media.\n             * @event respoke.Call#connect\n             * @type {respoke.Event}\n             * @property {string} name - The event name.\n             * @property {respoke.Call} target\n             */\n            that.fire('connect');\n            pc.state.dispatch('receiveRemoteMedia');\n        }\n    });\n\n    signalingChannel.getTurnCredentials().then(function (result) {\n        if (!pc) {\n            throw new Error(\"Already hung up.\");\n        }\n        if (!result) {\n            log.warn(\"Relay service not available.\");\n            pc.servers = {iceServers: []};\n        } else {\n            pc.servers = {iceServers: result};\n        }\n    }).fin(function () {\n        if (!pc) {\n            throw new Error(\"Already hung up.\");\n        }\n        pc.state.dispatch('initiate', {\n            caller: that.caller\n        });\n    }).done(null, function (err) {\n        if (err.message !== \"Already hung up.\") {\n            log.debug('Unexpected exception', err);\n        }\n    });\n\n    return that;\n}; // End respoke.Call\n\n/**\n * Handle an error that resulted from a method call.\n * @callback respoke.Call.errorHandler\n * @param {Error} err\n */\n/**\n * Handle the successful kick-off of stats on a call.\n * @callback respoke.Call.statsSuccessHandler\n * @param {respoke.MediaStatsParser} statsParser\n */\n/**\n * Handle obtaining media successfully.\n * @callback respoke.Call.mediaSuccessHandler\n * @param {respoke.LocalMedia} localMedia\n */\n/**\n * When on a call, receive local media when it becomes available. This is what you will need to provide if you want\n * to show the user their own video during a call. This callback is called every time\n * respoke.Call#local-stream-received is fired.\n * @callback respoke.Call.onLocalMedia Callback for receiving an HTML5 Video\n * element with the local audio and/or video attached.\n * @param {respoke.Event} evt\n * @param {Element} evt.element\n * @param {respoke.LocalMedia} - The outgoingMedia property on the call.\n * @param {string} evt.name - The event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * When on a call, receive remote media when it becomes available. This is what you will need to provide if you want\n * to show the user the other party's video during a call. This callback is called every time\n * respoke.Call#connect is fired.\n * @callback respoke.Call.onConnect\n * @param {respoke.Event} evt\n * @param {Element} evt.element - the HTML5 Video element with the new stream attached.\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * When a call is in setup or media renegotiation happens. This callback will be called every time\n * respoke.Call#error.\n * @callback respoke.Call.onError\n * @param {respoke.Event} evt\n * @param {boolean} evt.reason - A human-readable description of the error.\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * When on a call, receive notification the call has been hung up. This callback is called every time\n * respoke.Call#hangup is fired.\n * @callback respoke.Call.onHangup\n * @param {respoke.Event} evt\n * @param {boolean} evt.sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * Called when changing the mute state on any type of media. This callback will be called when media is muted or\n * unmuted. This callback is called every time respoke.Call#mute is fired.\n * @callback respoke.Call.onMute\n * @param {respoke.Event} evt\n * @param {respoke.Call} evt.target\n */\n/**\n * Called when the callee answers the call. This callback is called every time respoke.Call#answer is fired.\n * @callback respoke.Call.onAnswer\n * @param {respoke.Event} evt\n * @param {respoke.Call} evt.target\n */\n/**\n * Called when the user approves local media. This callback will be called whether or not the approval was based\n * on user feedback. I. e., it will be called even if the approval was automatic. This callback is called every time\n * respoke.Call#approve is fired.\n * @callback respoke.Call.onApprove\n * @param {respoke.Event} evt\n * @param {respoke.Call} evt.target\n */\n/**\n * When setting up a call, receive notification that the browser has granted access to media.  This callback is\n * called every time respoke.Call#allow is fired.\n * @callback respoke.Call.onAllow\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * When setting up a call, receive notification that the app has asked the browser for permission to get audio or\n * video and is waiting on the browser to grant or reject permission. This callback will be called every time\n * respoke.Call#requesting-media is fired.\n * @callback respoke.Call.onRequestingMedia\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * The use of stats requires an additional module to Respoke. When on a call, receive periodic statistical\n * information about the call, including the codec, lost packets, and bandwidth being consumed. This callback is\n * called every time respoke.Call#stats is fired.\n * @callback respoke.MediaStatsParser.statsHandler\n * @param {respoke.Event} evt\n * @param {respoke.MediaStats} evt.stats - an object with stats in it.\n * @param {respoke.Call} evt.target\n * @param {string} evt.name - the event name.\n */\n/**\n * When on a call, receive local media when it becomes available. This is what you will need to provide if you want\n * to allow the user to preview and approve or reject their own video before a call. If this callback is provided,\n * Respoke will wait for call.answer() to be called before proceeding. If this callback is not provided,\n * Respoke will proceed without waiting for user input. This callback is called every time\n * respoke.Call#local-stream-received is fired.\n * @callback respoke.Call.previewLocalMedia\n * @param {object} element - the HTML5 Video element with the new stream attached.\n * @param {respoke.Call} call\n */\n/**\n * Called when a tone is sent on an audio track. This callback is called every time respoke.Call#tone-sent is fired.\n * @callback respoke.Call.onToneSent\n * @param {respoke.Event} evt\n * @param {string} evt.tone\n * @param {number} evt.duration\n * @param {number} evt.gap\n */\n/**\n * Called when the playback queue of tones has started.\n * This callback is called every time respoke.Call#tone-sending-started is fired.\n * @callback respoke.Call.onToneSendingStarted\n * @param {respoke.Event} evt\n * @param {object} evt.target\n */\n/**\n * Receive the DirectConnection.\n * @callback respoke.Call.directConnectionSuccessHandler\n * @param {respoke.DirectConnection} directConnection\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/call.js\n ** module id = 21\n ** module chunks = 0\n **/","/*\n * Copyright 2015, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n */\n\nvar respoke = require('./respoke');\nvar log = respoke.log;\nvar Q = respoke.Q;\n\n/**\n * A wrapper around the stream from `getUserMedia`,\n * which is attached to a call at `call.outgoingMedia`.\n *\n * @class respoke.LocalMedia\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {object} [params.constraints]\n * @param {HTMLVideoElement} params.element - Pass in an optional html video element to have local\n * video attached to it.\n * @returns {respoke.LocalMedia}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = respoke.EventEmitter(params);\n\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.LocalMedia';\n    /**\n     * Respoke media ID (different from a `MediaStream.id`).\n     * @memberof! respoke.LocalMedia\n     * @name id\n     * @type {string}\n     */\n    that.id = respoke.makeGUID();\n    /**\n     * The HTML element with video attached.\n     * @memberof! respoke.LocalMedia\n     * @name element\n     * @type {HTMLVideoElement}\n     */\n    that.element = params.element;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name hasScreenShare\n     * @private\n     * @type {boolean}\n     */\n    var hasScreenShare = params.hasScreenShare;\n    delete params.hasScreenShare;\n\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name screenShareSource\n     * @private\n     * @type {string}\n     */\n    var screenShareSource = params.source;\n    delete params.source;\n\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name sdpHasAudio\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasAudio = false;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name sdpHasVideo\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasVideo = false;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name sdpHasDataChannel\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasDataChannel = false;\n    /**\n     * A timer to make sure we only fire {respoke.LocalMedia#requesting-media} if the browser doesn't\n     * automatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.\n     * @memberof! respoke.LocalMedia\n     * @name allowTimer\n     * @private\n     * @type {number}\n     */\n    var allowTimer = 0;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name mediaOptions\n     * @private\n     * @type {object}\n     */\n    var mediaOptions = {\n        optional: [\n            { DtlsSrtpKeyAgreement: true },\n            { RtpDataChannels: false }\n        ]\n    };\n\n    /**\n     * The local `MediaStream` from `getUserMedia()`.\n     * @memberof! respoke.LocalMedia\n     * @name stream\n     * @type {RTCMediaStream}\n     */\n    that.stream = null;\n\n    /**\n     * The media deferred whose promise is returned from localMedia.start and resolved with the stream.\n     * @memberof! respoke.LocalMedia\n     * @name deferred\n     * @type {object}\n     * @private\n     */\n    var deferred = Q.defer();\n\n    function getStream(theConstraints) {\n        for (var i = 0; i < respoke.streams.length; i++) {\n            var s = respoke.streams[i];\n\n            var sConstraints = respoke.clone(s.constraints);\n            if (sConstraints.video && sConstraints.video.mandatory &&\n                sConstraints.video.mandatory.chromeMediaSourceId) {\n                delete sConstraints.video.mandatory.chromeMediaSourceId;\n            }\n\n            if (respoke.isEqual(sConstraints, theConstraints)) {\n                return s.stream;\n            }\n        }\n        return null;\n    }\n\n    function removeStream(theConstraints) {\n        var toRemoveIndex;\n        for (var i = 0; i < respoke.streams.length; i++) {\n            var s = respoke.streams[i];\n            if (respoke.isEqual(s.constraints, theConstraints)) {\n                toRemoveIndex = i;\n                break;\n            }\n        }\n        if (toRemoveIndex !== undefined) {\n            respoke.streams.splice(toRemoveIndex, 1);\n        }\n    }\n\n    /**\n     * Save the local stream. Kick off SDP creation.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.onReceiveUserMedia\n     * @private\n     * @param {RTCMediaStream} theStream\n     */\n    function onReceiveUserMedia(theStream) {\n        that.stream = theStream;\n        clearTimeout(allowTimer);\n        /**\n         * The user has approved the request for media. Any UI changes made to remind the user to click Allow\n         * should be canceled now. This event is the same as the `onAllow` callback.  This event gets fired\n         * even if the allow process is automatic, i. e., permission and media is granted by the browser\n         * without asking the user to approve it.\n         * @event respoke.LocalMedia#allow\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         */\n        that.fire('allow');\n        log.debug('User gave permission to use media.');\n        log.debug('onReceiveUserMedia');\n\n        that.element = that.element || document.createElement('video');\n\n        // This still needs some work. Using cached streams causes an unused video element to be passed\n        // back to the App. This is because we assume at the moment that only one local media video element\n        // will be needed. The first one passed back will contain media and the others will fake it. Media\n        // will still be sent with every peer connection. Also need to study the use of getLocalElement\n        // and the implications of passing back a video element with no media attached.\n        var aStream = getStream(that.constraints);\n        if (aStream) {\n            aStream.numPc += 1;\n\n            attachMediaStream(that.element, that.stream);\n            // We won't want our local video outputting audio.\n            that.element.muted = true;\n            that.element.autoplay = true;\n\n            // perform cleanup on the LocalMedia instance if the underlying stream has ended\n            aStream.addEventListener('ended', that.stop, false);\n\n            deferred.resolve();\n        } else {\n            that.stream.numPc = 1;\n            respoke.streams.push({stream: that.stream, constraints: that.constraints});\n\n            attachMediaStream(that.element, that.stream);\n            // We won't want our local video outputting audio.\n            that.element.muted = true;\n            that.element.autoplay = true;\n\n            // perform cleanup on the LocalMedia instance if the underlying stream has ended\n            that.stream.addEventListener('ended', that.stop, false);\n            deferred.resolve();\n        }\n    }\n\n    /**\n     * Expose getAudioTracks.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.getAudioTracks\n     */\n    that.getAudioTracks = function () {\n        if (that.stream) {\n            return that.stream.getAudioTracks();\n        }\n        return [];\n    };\n\n    /**\n     * Expose getVideoTracks.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.getVideoTracks\n     */\n    that.getVideoTracks = function () {\n        if (that.stream) {\n            return that.stream.getVideoTracks();\n        }\n        return [];\n    };\n\n    /**\n     * Create the RTCPeerConnection and add handlers. Process any offer we have already received.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.requestMedia\n     * @private\n     */\n    function requestMedia() {\n        var theStream;\n\n        if (!that.constraints) {\n            deferred.reject(new Error('No constraints.'));\n            return;\n        }\n\n        if (respoke.useFakeMedia === true) {\n            that.constraints.fake = true;\n        }\n\n        theStream = getStream(that.constraints);\n        if (theStream) {\n            log.debug('using old stream');\n            onReceiveUserMedia(theStream);\n            return;\n        }\n\n        // TODO set getStream(that.constraints) = true as a flag that we are already\n        // attempting to obtain this media so the race condition where gUM is called twice with\n        // the same constraints when calls are placed too quickly together doesn't occur.\n        allowTimer = setTimeout(function delayPermissionsRequest() {\n            /**\n             * The browser is asking for permission to access the User's media. This would be an ideal time\n             * to modify the UI of the application so that the user notices the request for permissions\n             * and approves it.\n             * @event respoke.LocalMedia#requesting-media\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.LocalMedia} target\n             */\n            that.fire('requesting-media');\n        }, 500);\n\n        if (respoke.constraintsHasScreenShare(that.constraints)) {\n            if (respoke.isNwjs || (respoke.needsChromeExtension && respoke.hasChromeExtension)) {\n                respoke.chooseDesktopMedia({source: screenShareSource}, function (params) {\n                    if (!params.sourceId) {\n                        deferred.reject(new Error(\"Error trying to get screensharing source: \" + params.error));\n                        return;\n                    }\n                    that.constraints.video.mandatory.chromeMediaSourceId = params.sourceId;\n                    log.debug(\"Running getUserMedia with constraints\", that.constraints);\n                    getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n                });\n                return;\n            } else if (respoke.needsFirefoxExtension && respoke.hasFirefoxExtension) {\n                log.debug(\"Running getUserMedia with constraints\", that.constraints);\n                getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n                return;\n            } else {\n                deferred.reject(new Error(\"Screen sharing not implemented on this platform yet.\"));\n                return;\n            }\n        }\n        log.debug(\"Running getUserMedia with constraints\", that.constraints);\n        getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n    }\n\n    /**\n     * Handle any error that comes up during the process of getting user media.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.onUserMediaError\n     * @private\n     * @param {object}\n     */\n    function onUserMediaError(p) {\n        log.debug('Local media error.', p);\n        var errorMessage = p.code === 1 ? \"Permission denied.\" : \"Unknown.\";\n        deferred.reject(new Error(\"Error getting user media: \" + errorMessage));\n    }\n\n    /**\n     * Whether the video stream is muted, or undefined if no stream of this type exists.\n     *\n     * All video tracks must be muted for this to return `false`.\n     * @returns boolean\n     */\n    that.isVideoMuted = function () {\n        if (!that.stream || !that.stream.getVideoTracks().length) {\n            return undefined;\n        }\n\n        return that.stream.getVideoTracks().every(function (track) {\n            return !track.enabled;\n        });\n    };\n\n    /**\n     * Mute local video stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.muteVideo\n     * @fires respoke.LocalMedia#mute\n     */\n    that.muteVideo = function () {\n        if (that.isVideoMuted()) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });\n        /**\n         * Indicate that the mute status of local audio or video has changed.\n         * @event respoke.LocalMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'video',\n            muted: true\n        });\n    };\n\n    /**\n     * Unmute local video stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.unmuteVideo\n     * @fires respoke.LocalMedia#mute\n     */\n    that.unmuteVideo = function () {\n        if (!that.isVideoMuted()) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });\n        /**\n         * Indicate that the mute status of local audio or video has changed.\n         * @event respoke.LocalMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'video',\n            muted: false\n        });\n    };\n\n    /**\n     * Whether the audio stream is muted, or undefined if no track of this type exists.\n     *\n     * All audio tracks must be muted for this to return `false`.\n     * @returns boolean\n     */\n    that.isAudioMuted = function () {\n        if (!that.stream || !that.stream.getAudioTracks().length) {\n            return undefined;\n        }\n        return that.stream.getAudioTracks().every(function (track) {\n            return !track.enabled;\n        });\n    };\n\n    /**\n     * Mute local audio stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.muteAudio\n     * @fires respoke.LocalMedia#mute\n     */\n    that.muteAudio = function () {\n        if (that.isAudioMuted()) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });\n        /**\n         * Indicate that the mute status of local audio or video has changed.\n         * @event respoke.LocalMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'audio',\n            muted: true\n        });\n    };\n\n    /**\n     * Unmute local audio stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.unmuteAudio\n     * @fires respoke.LocalMedia#mute\n     */\n    that.unmuteAudio = function () {\n        if (!that.isAudioMuted()) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });\n        /**\n         * Indicate that the mute status of local audio or video has changed.\n         * @event respoke.LocalMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'audio',\n            muted: false\n        });\n    };\n\n    /**\n     * Stop the stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.stop\n     * @fires respoke.LocalMedia#stop\n     */\n    that.stop = function () {\n        if (!that.stream) {\n            return;\n        }\n\n        that.stream.numPc -= 1;\n        if (that.stream.numPc === 0) {\n            that.stream.getTracks().forEach(function (track) {\n                track.stop();\n            });\n            removeStream(that.constraints);\n        }\n        that.stream = null;\n        /**\n         * Indicate that local media has stopped.\n         * @event respoke.LocalMedia#stop\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         */\n        that.fire('stop');\n    };\n\n    /**\n     * Indicate whether we are sending a screenshare.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.hasScreenShare\n     * @return {boolean}\n     */\n    that.hasScreenShare = function () {\n        if (that.stream) {\n            return (that.stream.getVideoTracks().length > 0 && hasScreenShare);\n        }\n        return hasScreenShare;\n    };\n\n    /**\n     * Indicate whether we are sending video.\n     *\n     * Note: This method will return true when the video is a screenshare.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.hasVideo\n     * @return {boolean}\n     */\n    that.hasVideo = function () {\n        if (that.stream) {\n            return (that.stream.getVideoTracks().length > 0);\n        }\n        return sdpHasVideo;\n    };\n\n    /**\n     * Indicate whether we are sending audio.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.hasAudio\n     * @return {boolean}\n     */\n    that.hasAudio = function () {\n        if (that.stream) {\n            return (that.stream.getAudioTracks().length > 0);\n        }\n        return sdpHasAudio;\n    };\n\n    /**\n     * Indicate whether we have media yet.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.hasMedia\n     * @return {boolean}\n     */\n    that.hasMedia = function () {\n        return !!that.stream;\n    };\n\n    /**\n     * Save and parse the SDP.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.setSDP\n     * @param {RTCSessionDescription} oSession\n     * @private\n     */\n    that.setSDP = function (oSession) {\n        sdpHasVideo = respoke.sdpHasVideo(oSession.sdp);\n        sdpHasAudio = respoke.sdpHasAudio(oSession.sdp);\n        sdpHasDataChannel = respoke.sdpHasDataChannel(oSession.sdp);\n\n        // We don't have media yet & this can still be changed so create the defaults based on what the sdp says.\n        if (that.temporary) {\n            that.constraints = {\n                video: sdpHasVideo,\n                audio: sdpHasAudio,\n                mandatory: {},\n                optional: []\n            };\n        }\n    };\n\n    /**\n     * Parse the constraints.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.setConstraints\n     * @param {MediaConstraints} constraints\n     * @private\n     */\n    that.setConstraints = function (constraints) {\n        that.constraints = constraints;\n        sdpHasVideo = respoke.constraintsHasVideo(that.constraints);\n        sdpHasAudio = respoke.constraintsHasAudio(that.constraints);\n    };\n\n    /**\n     * Start the stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.start\n     * @fires respoke.LocalMedia#start\n     * @param {object} [params]\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    that.start = function (params) {\n        var retVal;\n        params = params || {};\n\n        if (that.temporary) {\n            deferred.reject(new Error(\"Temporary local media started!\"));\n        } else {\n            requestMedia();\n        }\n\n        retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n        return retVal;\n    };\n\n    return that;\n}; // End respoke.LocalMedia\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/localMedia.js\n ** module id = 22\n ** module chunks = 0\n **/","/*\n * Copyright 2015, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n */\n\nvar respoke = require('./respoke');\n\n/**\n * Class for managing the remote media stream,\n * which is attached to a call at `call.outgoingMedia`.\n *\n * @class respoke.RemoteMedia\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {object} params.constraints\n * @param {boolean} params.temporary - whether this instance represents our best guess of future media. If so,\n * this object will be deleted when real media comes in. It will be replaced by different instance of\n * respoke.RemoteMedia representing the actual state of media.\n * @param {HTMLVideoElement} params.element - Pass in an optional html video element to have remote\n * video attached to it.\n * @returns {respoke.RemoteMedia}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var that = respoke.EventEmitter(params);\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.RemoteMedia';\n    /**\n     * Respoke media ID (different from a `MediaStream.id`).\n     * @memberof! respoke.RemoteMedia\n     * @name id\n     * @type {string}\n     */\n    that.id = respoke.makeGUID();\n    /**\n     * The HTML element with attached video.\n     * @memberof! respoke.RemoteMedia\n     * @name element\n     * @type {HTMLVideoElement}\n     */\n    that.element = params.element || document.createElement('video');\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name hasScreenShare\n     * @private\n     * @type {boolean}\n     */\n    var hasScreenShare = params.hasScreenShare;\n    delete params.hasScreenShare;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name sdpHasAudio\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasAudio = false;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name sdpHasVideo\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasVideo = false;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name sdpHasDataChannel\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasDataChannel = false;\n    /**\n     * A timer to make sure we only fire {respoke.RemoteMedia#requesting-media} if the browser doesn't\n     * automatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.\n     * @memberof! respoke.RemoteMedia\n     * @name allowTimer\n     * @private\n     * @type {number}\n     */\n    var allowTimer = 0;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name mediaOptions\n     * @private\n     * @type {object}\n     */\n    var mediaOptions = {\n        optional: [\n            { DtlsSrtpKeyAgreement: true },\n            { RtpDataChannels: false }\n        ]\n    };\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name pc\n     * @private\n     * @type {respoke.PeerConnection}\n     */\n    var pc = params.pc;\n    delete that.pc;\n    /**\n     * The remote `MediaStream`.\n     * @memberof! respoke.RemoteMedia\n     * @name stream\n     * @type {RTCMediaStream}\n     */\n    that.stream = params.stream;\n\n    if (!that.temporary) {\n        attachMediaStream(that.element, that.stream);\n        that.element.autoplay = true;\n        setTimeout(that.element.play.bind(that.element)); // stupid Firefox requires this.\n    }\n\n    /**\n     * Indicate whether we are receiving a screenshare.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.hasScreenShare\n     * @return {boolean}\n     */\n    that.hasScreenShare = function () {\n        if (that.stream) {\n            return (that.stream.getVideoTracks().length > 0 && hasScreenShare);\n        }\n        return hasScreenShare;\n    };\n\n    /**\n     * Indicate whether we are receiving video.\n     *\n     * Note: This method will return true when the video is a screenshare.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.hasVideo\n     * @return {boolean}\n     */\n    that.hasVideo = function () {\n        if (that.stream) {\n            return (that.stream.getVideoTracks().length > 0);\n        }\n        return sdpHasVideo;\n    };\n\n    /**\n     * Indicate whether we are receiving audio.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.hasAudio\n     * @return {boolean}\n     */\n    that.hasAudio = function () {\n        if (that.stream) {\n            return (that.stream.getAudioTracks().length > 0);\n        }\n        return sdpHasAudio;\n    };\n\n    /**\n     * Indicate whether we have media yet.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.hasMedia\n     * @return {boolean}\n     */\n    that.hasMedia = function () {\n        return !!that.stream;\n    };\n\n    /**\n     * Save and parse the SDP\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.setSDP\n     * @param {RTCSessionDescription} oSession\n     * @private\n     */\n    that.setSDP = function (oSession) {\n        sdpHasVideo = respoke.sdpHasVideo(oSession.sdp);\n        sdpHasAudio = respoke.sdpHasAudio(oSession.sdp);\n        sdpHasDataChannel = respoke.sdpHasDataChannel(oSession.sdp);\n    };\n\n    /**\n     * Parse the constraints.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.setConstraints\n     * @param {MediaConstraints} constraints\n     * @private\n     */\n    that.setConstraints = function (constraints) {\n        that.constraints = constraints;\n        sdpHasVideo = respoke.constraintsHasVideo(that.constraints);\n        sdpHasAudio = respoke.constraintsHasAudio(that.constraints);\n    };\n\n    /**\n     * Expose getAudioTracks.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.getAudioTracks\n     */\n    that.getAudioTracks = function () {\n        if (that.stream) {\n            return that.stream.getAudioTracks();\n        }\n        return [];\n    };\n\n    /**\n     * Expose getVideoTracks.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.getVideoTracks\n     */\n    that.getVideoTracks = function () {\n        if (that.stream) {\n            return that.stream.getVideoTracks();\n        }\n        return [];\n    };\n\n    /**\n     * Stop the stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.stop\n     * @fires respoke.RemoteMedia#stop\n     */\n    that.stop = function () {\n        if (!that.stream) {\n            return;\n        }\n\n        that.stream.numPc -= 1;\n        if (that.stream.numPc === 0) {\n            that.stream.getTracks().forEach(function (track) {\n                track.stop();\n            });\n        }\n        that.stream = null;\n        /**\n         * Indicate that remote media has stopped.\n         * @event respoke.RemoteMedia#stop\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         */\n        that.fire('stop');\n    };\n\n    /**\n     * Whether the video stream is muted.\n     *\n     * All video tracks must be muted for this to return `false`.\n     * @returns boolean\n     */\n    that.isVideoMuted = function () {\n        if (!that.stream) {\n            return false;\n        }\n        return that.stream.getVideoTracks().every(function (track) {\n            return !track.enabled;\n        });\n    };\n\n    /**\n     * Mute remote video stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.muteVideo\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.muteVideo = function () {\n        if (that.isVideoMuted()) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });\n        /**\n         * Indicate that the muted status of remote video or audio has changed.\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'video',\n            muted: true\n        });\n    };\n\n    /**\n     * Unmute remote video stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.unmuteVideo\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.unmuteVideo = function () {\n        if (!that.isVideoMuted()) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });\n        /**\n         * Indicate that the muted status of remote video or audio has changed.\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'video',\n            muted: false\n        });\n    };\n\n    /**\n     * Whether the audio stream is muted.\n     *\n     * All audio tracks must be muted for this to return `false`.\n     * @returns boolean\n     */\n    that.isAudioMuted = function () {\n        if (!that.stream) {\n            return false;\n        }\n        return that.stream.getAudioTracks().every(function (track) {\n            return !track.enabled;\n        });\n    };\n\n    /**\n     * Mute remote audio stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.muteAudio\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.muteAudio = function () {\n        if (that.isAudioMuted()) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });\n        /**\n         * Indicate that the muted status of remote video or audio has changed.\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'audio',\n            muted: true\n        });\n    };\n\n    /**\n     * Unmute remote audio stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.unmuteAudio\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.unmuteAudio = function () {\n        if (!that.isAudioMuted()) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });\n        /**\n         * Indicate that the muted status of remote video or audio has changed.\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'audio',\n            muted: false\n        });\n    };\n\n    return that;\n}; // End respoke.RemoteMedia\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/remoteMedia.js\n ** module id = 23\n ** module chunks = 0\n **/","/*\n * Copyright 2015, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\n\n/**\n * A conference call to one or more people with audio. Eventually this will handle video, too.\n * @class respoke.Conference\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.id - The id that should be used to create the conference call or the ID\n * of the call to join.\n * @param {string} params.instanceId - client id\n * @param {boolean} params.caller - whether or not we initiated the call\n * @param {boolean} [params.receiveOnly] - whether or not we accept media\n * @param {boolean} [params.sendOnly] - whether or not we send media\n * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n * relay servers. If it cannot flow through relay servers, the call will fail.\n * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n * required to flow peer-to-peer. If it cannot, the call will fail.\n * @param {respoke.Endpoint} params.remoteEndpoint - The endpoint who is being called.\n * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint.\n * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n * wants to perform an action between local media becoming available and calling approve().\n * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n * @param {function} params.signalReport - Signaling action from SignalingChannel.\n * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n * @param {Array<RTCConstraints>} params.constraints - Array of WebRTC constraints.\n * @param {respoke.Conference.onJoin} [params.onJoin] - Callback for when a participant joins the conference.\n * @param {respoke.Conference.onLeave} [params.onLeave] - Callback for when a participant leaves the conference.\n * @param {respoke.Conference.onMessage} [params.onMessage] - Callback for when a message is sent to the conference.\n * @param {respoke.Conference.onMute} [params.onMute] - Callback for when local or remote media is muted or unmuted.\n * @param {respoke.Conference.onTopic} [params.onTopic] - Callback for the conference topic changes.\n * @param {respoke.Conference.onPresenter} [params.onPresenter] - Callback for when the presenter changes.\n * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n * media renegotiation.\n * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n * element with the local audio and/or video attached.\n * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n * it was ended in a graceful manner.\n * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n * This callback will be called when media is muted or unmuted.\n * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n * for the user to give permission to start getting audio or video.\n * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n * the approval was automatic.\n * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n * granted by the browser without asking the user to approve it.\n * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n * video attached to it.\n * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n * video attached to it.\n * @returns {respoke.Conference}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Client\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var signalingChannel = params.signalingChannel;\n    var that = respoke.EventEmitter({\n        id: params.id\n    });\n\n    that.listen('join', params.onJoin);\n    that.listen('leave', params.onLeave);\n    that.listen('message', params.onMessage);\n    that.listen('mute', params.onMute);\n    that.listen('topic', params.onTopic);\n    that.listen('presenter', params.onPresenter);\n    delete params.onJoin;\n    delete params.onLeave;\n    delete params.onMessage;\n    delete params.onMute;\n    delete params.onTopic;\n    delete params.onPresenter;\n\n    params.caller = true;\n    params.conferenceId = params.id;\n    delete params.id;\n    params.remoteEndpoint = that;\n    that.call = respoke.Call(params);\n\n    // Redirect a bunch of events.\n    [\n        'mute', 'hangup', 'connect', 'stats', 'error', 'local-stream-received',\n         'remote-stream-received', 'requesting-media', 'approve', 'allow'\n    ].forEach(function (eventName) {\n        that.call.listen(eventName, function (evt) {\n            evt.call = that.call; // target will be updated to point to this conference object.\n            that.fire(eventName, evt);\n        });\n    });\n\n    delete that.instanceId;\n\n    /**\n     * A name to identify this class\n     * @memberof! respoke.Conference\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Conference';\n\n    /**\n     * @memberof! respoke.Conference\n     * @name client\n     * @type {respoke.Client}\n     * @private\n     */\n    var client = respoke.getClient(instanceId);\n\n    /**\n     * Leave the conference.\n     * @memberof! respoke.Conference\n     * @method respoke.Conference.leave\n     */\n    that.leave = that.call.hangup;\n\n    /**\n     * Mute local user's audio.\n     * @memberof! respoke.Conference\n     * @method respoke.Conference.muteAudio\n     */\n    that.muteAudio = that.call.muteAudio;\n\n    /**\n     * ## The plugin `respoke.MediaStats` must be loaded before using this method.\n     *\n     * Start the process of listening for a continuous stream of statistics about the flow of audio and/or video.\n     * Since we have to wait for both the answer and offer to be available before starting\n     * statistics, the library returns a promise for the stats object. The statistics object does not contain the\n     * statistics; rather it contains methods of interacting with the actions of obtaining statistics. To obtain\n     * the actual statistics one time, use stats.getStats(); use the onStats callback to obtain a continuous\n     * stream of statistics every `interval` seconds.  Returns null if stats module is not loaded.\n     *\n     *     conference.getStats({\n     *         onStats: function (evt) {\n     *             console.log('Stats', evt.stats);\n     *         }\n     *     }).done(function () {\n     *         console.log('Stats started');\n     *     }, function (err) {\n     *         console.log('Call is already hung up.');\n     *     });\n     *\n     * @memberof! respoke.Conference\n     * @method respoke.Conference.getStats\n     * @param {object} params\n     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive\n     * the stats. If no callback is provided, the call's report will contain stats but the developer will not\n     * receive them on the client-side.\n     * @param {respoke.Call.statsSuccessHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Call.errorHandler} [params.onError] - Error handler for this invocation of this method only.\n     * @returns {Promise<object>|null}\n     */\n    if (respoke.MediaStats) {\n        that.getStats = that.call.getStats;\n    }\n\n    /**\n     * Get an array containing a Connection object for each participant in the conference.\n     * @memberof! respoke.Conference\n     * @method respoke.Conference.getParticipants\n     * @returns {Promise<Array>}\n     */\n    that.getParticipants = function () {\n        return signalingChannel.getConferenceParticipants({\n            id: that.id\n        });\n    };\n\n    /**\n     * If the logged-in endpoint has permission through its Respoke role, forcibly remove another participant\n     * from the conference, ending its conference call.\n     * @memberof! respoke.Conference\n     * @method respoke.Conference.removeParticipant\n     * @param {object} params\n     * @param {string} [endpointId] - The endpoint id of the endpoint to be removed\n     * @param {string} [connectionId] - The connection id of the connection to be removed\n     * @returns {Promise}\n     */\n    that.removeParticipant = function (params) {\n        params = params || {};\n        params.conferenceId = that.id;\n        return signalingChannel.removeConferenceParticipant(params);\n    };\n\n    /**\n     * If the logged-in endpoint has permission through its Respoke role, shut down the conference, removing all\n     * participants.\n     * @memberof! respoke.Conference\n     * @method respoke.Conference.destroy\n     * @returns {Promise}\n     */\n    that.destroy = function (params) {\n        return signalingChannel.destroyConference({\n            conferenceId: that.id\n        });\n    };\n\n    return that;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/conference.js\n ** module id = 24\n ** module chunks = 0\n **/"],"sourceRoot":""}
{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///respoke.min.js","webpack:///webpack/bootstrap a4afed6702f40f900abe","webpack:///./index.js","webpack:///./respoke/respoke.js","webpack:///./respoke/deps/adapter.js","webpack:///./respoke/event.js","webpack:///./respoke/client.js","webpack:///./respoke/presentable.js","webpack:///./respoke/connection.js","webpack:///./respoke/endpoint.js","webpack:///./respoke/textMessage.js","webpack:///./respoke/signalingMessage.js","webpack:///./respoke/group.js","webpack:///./respoke/signalingChannel.js","webpack:///./respoke/directConnection.js","webpack:///./respoke/peerConnection.js","webpack:///./respoke/callState.js","webpack:///./respoke/call.js","webpack:///./respoke/localMedia.js","webpack:///./respoke/remoteMedia.js","webpack:///./~/loglevel/lib/loglevel.js","webpack:///./~/q/q.js","webpack:///./~/statechart/lib/statechart.js","webpack:///./~/socket.io-client/dist/socket.io.js","webpack:///(webpack)/~/node-libs-browser/~/timers-browserify/main.js","webpack:///(webpack)/buildin/module.js","webpack:///(webpack)/~/node-libs-browser/~/process/browser.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","log","setLevel","Q","longStackSupport","stackJumpLimit","longStackJumpLimit","stopUnhandledRejectionTracking","respoke","buildNumber","streams","instances","needsChromeExtension","window","chrome","opera","navigator","webkitGetUserMedia","isNwjs","process","hasChromeExtension","extEvent","type","data","evt","document","createEvent","initCustomEvent","version","EventEmitter","Client","Presentable","Connection","Endpoint","TextMessage","SignalingMessage","Group","SignalingChannel","DirectConnection","PeerConnection","CallState","Call","LocalMedia","RemoteMedia","addEventListener","detail","available","chooseDesktopMedia","callback","sourceIdListener","screenSourceId","sourceId","removeEventListener","Error","dispatchEvent","info","skipErrorReporting","airbrake","createElement","first","getElementsByTagName","parentNode","insertBefore","src","setAttribute","onload","onerror","message","file","line","match","Airbrake","push","error","fileName","lineNumber","connect","params","client","warn","getClient","undefined","debug","stack","createClient","instanceId","once","func","called","apply","arguments","makeGUID","r","chars","split","uuid","Array","rnd","i","Math","random","join","handlePromise","promise","onSuccess","onError","returnUndef","done","Class","that","className","Object","keys","forEach","name","hasUserMedia","getUserMedia","mozGetUserMedia","Function","hasRTCPeerConnection","RTCPeerConnection","webkitRTCPeerConnection","mozRTCPeerConnection","hasWebsocket","WebSocket","webkitWebSocket","MozWebSocket","clone","source","JSON","parse","stringify","isEqual","a","b","aKeys","hasOwnProperty","splice","length","sdpHasAudio","sdp","indexOf","sdpHasVideo","sdpHasDataChannel","sdpHasSendOnly","sdpHasReceiveOnly","constraintsHasAudio","constraints","audio","constraintsHasVideo","video","constraintsHasScreenShare","mandatory","chromeMediaSource","mediaSource","convertConstraints","defaults","queueFactory","queue","trigger","action","safeAction","item","err","maybeFixConfiguration","pcConfig","iceServers","url","urls","attachMediaStream","reattachMediaStream","webrtcDetectedBrowser","webrtcDetectedVersion","console","parseInt","userAgent","pcConstraints","RTCSessionDescription","mozRTCSessionDescription","RTCIceCandidate","mozRTCIceCandidate","bind","createIceServer","username","password","iceServer","urlParts","turnUrlParts","credential","createIceServers","element","stream","mozSrcObject","setTimeout","play","to","from","result","srcObject","URL","createObjectURL","listenerBuilder","listener","eventType","e","eventList","isInternal","string","toString","listen","invalidEventType","invalidListener","fn","isNotAlreadyAdded","map","ignore","fire","count","toRemove","target","hasListeners","every","saveParameters","key","clientSettings","developmentMode","enableCallDebugReport","reconnect","actuallyConnect","deferred","defer","token","appId","endpointId","signalingChannel","open","then","authenticate","presence","setPresence","onCall","onDirectConnection","onJoin","onLeave","onMessage","onConnect","onDisconnect","calls","hangup","signal","onReconnect","resolve","reject","addCall","removeCall","checkEndpointForRemoval","all","groups","group","getMembers","connectionsByGroup","absent","connectionList","conn","endpoints","ept","index","connectTries","superClass","location","hostname","port","baseURL","resolveEndpointPresence","retVal","disconnect","verifyConnected","leaveGroups","leave","fin","close","sendPresence","getCall","methods","screenshare","did","web","sip","callParams","fromType","one","remoteEndpoint","create","caller","toType","number","uri","setOnline","setOffline","sendMessage","endpoint","getEndpoint","skipPresence","startScreenShare","startCall","startAudioCall","optional","startVideoCall","startPhoneCall","recipient","signalOffer","signalParams","signalType","callerId","sendSDP","signalAnswer","signalConnected","connectionId","sendConnected","signalModify","sendModify","signalCandidate","sendCandidate","signalHangup","sendHangup","signalReport","report","sendReport","startSIPCall","isConnected","joinGroup","groupList","getGroup","addGroup","addMember","connection","getConnection","newGroup","removeMember","endpt","getGroups","grp","skipCreate","registerPresence","endpointList","onPresence","endpointsToSearch","connections","getEndpoints","resolvePresence","getPresence","startDirectConnection","directConnection","screenConstraint","maxWidth","maxHeight","sendOnly","thing","googTemporalLayeredScreencast","receiveOnly","sessionId","needDirectConnection","offerOptions","OfferToReceiveAudio","presenceList","idList","options","sort","indexA","indexB","rawMessage","header","fromConnection","timestamp","body","channel","toConnection","requestConnectionReply","fromEndpoint","required","attr","allowed","validateConnection","validateMembership","isJoined","leaveGroup","skipEvent","publish","getGroupMembers","list","now","performance","io","Date","getTime","PendingRequests","contents","counter","add","obj","remove","reset","isConnecting","socket","connecting","doOpen","path","httpMethod","parameters","tokenId","response","code","appToken","firstUpper","str","toUpperCase","slice","reconnectTimeout","maxReconnectTimeout","wsCall","handleResponse","thisHandler","statusCode","request","tries","isPending","start","sendWebsocketRequest","durationMillis","pendingRequests","failWebsocketRequest","status","errors","logRequest","method","bodyLength","paramaters","encodeURI","bodySizeLimit","toLowerCase","objectId","replace","emit","headers","App-Token","paramString","makeParamString","xhr","setRequestHeader","send","onreadystatechange","limit","unit","readyState","getResponseHeader","strings","value","presenceRegistered","XMLHttpRequest","routingMethods","handlerQueue",400,401,403,404,409,429,500,"connected","isSendingReport","fcall","getToken","newToken","ttl","removeAllListeners","show","toRun","saveDeferred","ep","sendACK","sendSignal","signalId","ackedSignalType","debugData","routeSignal","doOffer","doConnected","doModify","doAnswer","doIceCandidates","doBye","doUnknown","addHandler","on","handler","onPubSub","groupMessage","generateConnectHandler","category","res","pieces","protocol","host","connectParams","connect timeout","force new connection","sync disconnect on unload","secure","query","knownSignals","pendingRequest","getTurnCredentials","creds","uris","cred","listenDataChannel","dataChannel","onDataChannelError","onmessage","onDataChannelMessage","onopen","onDataChannelOpen","onOpen","onClose","onStart","pc","stats","createDataChannel","binaryType","getStats","onStats","MediaStats","accept","state","answer","skipRemove","removeDirectConnection","isActive","object","iceCandidates","candidate","signalCandidateOrig","candidatesSent","initOffer","makeOptionsReceiveOnly","makeOptionsSendOnly","createOffer","saveOfferAndSend","OfferToReceiveVideo","offerToReceiveVideo","offerToReceiveAudio","OfferToSendVideo","OfferToSendAudio","offerToSendVideo","offerToSendAudio","MediaStatsParser","peerConnection","interval","stopStats","onIceCandidate","oCan","forceTurn","disableTurn","candidateSendingQueue","onIceConnectionStateChange","iceConnectionState","onNegotiationNeeded","processSendingQueue","can","processReceivingQueue","candidateReceivingQueue","addIceCandidate","candidatesReceived","oSession","sdpsSent","setLocalDescription","sessionDescription","sentSDP","saveAnswerAndSend","callerconnection","listenAnswer","sdpsReceived","lastSDPString","calleeconnection","setRemoteDescription","dispatch","newErr","callStoppedReason","listenConnected","listenModify","defModify","isState","toSendHangup","previewLocalMedia","pcOptions","DtlsSrtpKeyAgreement","RtpDataChannels","callStarted","callStopped","callerendpoint","calleeendpoint","os","platform","processOffer","oOffer","hasDataChannel","createAnswer","processedRemoteSDP","init","servers","onicecandidate","onnegotiationneeded","oniceconnectionstatechange","onaddstream","onremovestream","ondatachannel","getRemoteStreams","prototype","getLocalStreams","addStream","sentSignal","startModify","addRemoteCandidate","receivedSDP","Statechart","assert","condition","rejectModify","modifyTimer","clear","clearReceiveAnswerTimer","receiveAnswerTimer","needToObtainMedia","needToApproveDirectConnection","automaticOffering","hasListener","createTimer","time","timer","clearTimeout","allTimers","fsm","answerTimer","connectionTimer","oldRole","answerTimeout","receiveAnswerTimeout","connectionTimeout","modifyTimeout","nontransitionEvents","hasLocalMediaApproval","hasLocalMedia","receivedBye","isAnswered","rejectEvent","guard","hasMedia","hangupReason","reason","hangupEvent","signalBye","stateParams","initialState","receiveLocalMedia","states","idle","exit","initiate","receiveOffer","negotiatingContainer","modify","preparing","entry","isModifying","approve","gettingMedia","approvingDeviceAccess","approvingContent","offeringContainer","sentOffer","offering","receiveRemoteMedia","receiveAnswer","connectingContainer","modifyingContainer","modifying","connectedContainer","receive","terminatedContainer","terminated","run","debugOff","args","getState","currentState","oldState","newState","modifyingStates","defMedia","actuallyAddDirectConnection","onLocalMedia","onHangup","onAllow","onAnswer","onApprove","onMute","onRequestingMedia","videoLocalElement","videoRemoteElement","outgoingMediaStreams","updateOutgoingMediaEstimate","incomingMediaStreams","updateIncomingMediaEstimate","buildLocalMedia","constraint","localMedia","streamId","hasScreenShare","used","streamReceivedHandler","noLocalMediaHandler","onRemoteStreamRemoved","onRemoteStreamAdded","remoteMedia","useEl","hasAudio","hasVideo","temporary","getAudioTracks","getVideoTracks","muted","doAddVideo","skipModify","setSDP","setConstraints","listenOffer","outgoingMedia","onModifyAccept","dc","onModifyReject","listenHangup","defineProperty","configurable","enumerable","get","set","videoIsMuted","audioIsMuted","getLocalElement","getRemoteElement","addVideo","isFulfilled","addAudio","getDirectConnection","addDirectConnection","closeDirectConnection","doHangup","stop","toggleVideo","unmuteVideo","muteVideo","toggleAudio","unmuteAudio","muteAudio","local","remote","shift","getStream","theConstraints","s","removeStream","toRemoveIndex","onReceiveUserMedia","theStream","allowTimer","aStream","numPc","autoplay","requestMedia","useFakeMedia","fake","chromeMediaSourceId","onUserMediaError","isVideoMuted","track","enabled","isAudioMuted","undefinedType","definition","realMethod","methodName","noop","boundToConsole","clearMethods","ii","logMethods","self","cookiesAvailable","cookie","setLevelInCookie","levelNum","levelName","levels","loadLevelFromCookie","cookieLevel","cookieMatch","cookieRegex","exec","WARN","TRACE","DEBUG","INFO","ERROR","SILENT","level","enableAll","disableAll","setImmediate","bootstrap","uncurryThis","f","isObject","isStopIteration","exception","object_toString","QReturnValue","makeStackTraceLong","hasStacks","STACK_JUMP_SEPARATOR","stacks","unshift","concatedStacks","filterStackString","stackString","lines","desiredLines","isInternalFrame","isNodeFrame","stackLine","getFileNameAndLineNumber","attempt1","Number","attempt2","attempt3","fileNameAndLineNumber","qFileName","qStartingLine","qEndingLine","captureLine","firstLine","deprecate","alternative","Promise","isPromiseAlike","coerce","fulfill","become","newPromise","resolvedPromise","array_reduce","messages","nextTick","promiseDispatch","progressListeners","object_create","op","operands","array_slice","valueOf","nearerValue","nearer","isPromise","inspect","substring","notify","progress","progressListener","resolver","TypeError","race","answerPs","len","descriptor","fallback","inspected","when","fulfilled","rejected","progressed","isRejected","resetUnhandledRejections","unhandledReasons","unhandledRejections","trackUnhandledRejections","trackRejection","untrackRejection","at","array_indexOf","rejection","rhs","delete","post","thisp","object_keys","master","isDef","spread","async","makeGenerator","continuer","verb","arg","StopIteration","generator","errback","spawn","_return","promised","promises","countDown","snapshot","allResolved","array_map","allSettled","nodeify","nodeback","flush","head","next","task","domain","enter","isNodeJS","flushing","tail","requestTick","MessageChannel","port1","requestPortTick","port2","postMessage","reduce","basis","collect","Type","object_hasOwnProperty","ReturnValue","env","Q_DEBUG","makeNodeResolver","passByCopy","x","y","makePromise","_fulfilled","_rejected","newException","_progressed","newValue","threw","tap","thenResolve","thenReject","getUnhandledReasons","array","del","mapply","mcall","invoke","fapply","fbind","concat","regardless","fail","onUnhandledError","timeout","ms","timeoutId","delay","nfapply","nodeArgs","nfcall","nfbind","denodeify","baseArgs","nbind","bound","nmapply","npost","nsend","nmcall","ninvoke","QState","QEvent","assertion","opt","construct","myState","top","mySource","Initial","empty","newInitialState","handled","TOP","flatten","anEventOrNull","equals","superstate","stateOrName","_topState","statesTable","_flatten","parent","selectState","stateName","anEvent","act","handleUnhandledEvent","aStateName","transition","aStateOrName","enterVia","q","pop","lca","entryLength","idx","QEventEmpty","QEventEntry","QEventExit","QEventInit","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","global","transports","j","sockets","details","uuri","util","parseUri","uniqueUri","merge","Socket","of","re","parts","base","addition","chunkQuery","components","part","qs","kv","l","pageLoaded","load","event","capture","attachEvent","xdomain","XDomainRequest","ua","hasCORS","webkit","importScripts","additional","deep","lastseen","prop","seen","depth","mixin","ctor","ctor2","inherit","isArray","intersect","arr","arr2","ret","longest","shortest","o","toArray","enu","withCredentials","test","iDevice","$events","addListener","removeListener","pos","listeners","nativeJSON","n","date","d","isFinite","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","quote","escapable","lastIndex","meta","charCodeAt","holder","k","v","partial","mind","gap","rep","String","indent","cx","\b","\t","\n","\f","\r","\"","\\","replacer","space","text","reviver","walk","eval","SyntaxError","parser","packets","reasons","advice","encodePacket","packet","ack","adv","ev","ackId","encoded","encodePayload","decoded","regexp","decodePacket","opts","decodePayload","charAt","substr","Transport","sessid","heartbeats","onData","clearCloseTimeout","reconnecting","setCloseTimeout","msgs","onPacket","setHeartbeatTimeout","onHeartbeat","isOpen","closeTimeout","clearTimeouts","reopenTimeout","prepareUrl","scheme","resource","ready","try multiple transports","reconnection delay","reconnection limit","reopen delay","max reconnection attempts","auto connect","flash policy port","manualFlush","namespaces","buffer","doBuffer","isXDomain","disconnectSync","SocketNamespace","nsp","$emit","handshake","complete","insertAt","script","removeChild","responseText","getTransport","override","transport","check","xdomainCheck","sessionid","sid","heartbeat","connectTimeoutTimer","remaining","heartbeatTimeout","origTransports","heartbeatTimeoutTimer","setBuffer","flushBuffer","payload","wasConnected","wasConnecting","reconnectionAttempts","reconnectionTimer","maybeReconnect","reconnectionDelay","redoTransports","tryMultiple","maxAttempts","flags","json","Flag","ackPackets","acks","namespace","lastArg","WS","websocket","onclose","Flashsocket","flashsocket","__addTask","__tasks","WEB_SOCKET_SWF_LOCATION","loadFlashPolicyFile","__initialize","swfobject","getFlashPlayerVersion","major","WEB_SOCKET_DISABLE_AUTO_INITIALIZATION","J","Z","appendChild","C","aa","X","U","Y","K","O","D","h","T","V","H","GetVariable","ab","M","pv","callee","ag","af","callbackFn","success","ae","F","swfVersion","wk","expressInstall","A","ai","width","getAttribute","height","styleclass","align","ah","ac","ad","P","w","ref","z","SetVariable","nodeName","win","mac","E","B","g","R","title","ie","flashvars","style","display","u","replaceChild","innerHTML","childNodes","nodeType","cloneNode","movie","outerHTML","N","getElementById","I","G","styleSheets","addRule","createTextNode","visibility","L","encodeURIComponent","S","W","t","parseFloat","plugins","description","mimeTypes","enabledPlugin","w3","detachEvent","documentElement","doScroll","registerObject","getObjectById","embedSWF","aj","al","am","ak","an","switchOffAutoHideShow","minor","release","hasFlashPlayerVersion","createSWF","showExpressInstall","removeSWF","createCSS","addDomLoadEvent","addLoadEvent","getQueryParamValue","search","hash","expressInstallCallback","protocols","proxyHost","proxyPort","__id","__nextId","__instances","CONNECTING","bufferedAmount","__events","__flash","CLOSED","CLOSING","events","__handleEvent","flashEvent","jsEvent","__createSimpleEvent","decodeURIComponent","__createMessageEvent","Event","initEvent","bubbles","cancelable","MessageEvent","initMessageEvent","OPEN","loadManualPolicyFile","__swfLocation","container","position","__isFlashLite","left","hasPriority","swliveconnect","allowScriptAccess","__onFlashInitialized","setCallerUrl","href","setDebug","WEB_SOCKET_DEBUG","__onFlashEvent","receiveEvents","webSocketId","__log","__error","mimeType","filename","XHR","sendBuffer","stateChange","posting","sendXHR","req","contentType","usesXDomReq","socketProtocol","isXProtocol","HTMLFile","htmlfile","doc","write","parentWindow","iframeC","iframe","destroy","_","CollectGarbage","XHRPolling","retryCounter","abort","JSONPPolling","msg","indicator","initIframe","form","iframeId","area","submit","clearImmediate","Timeout","clearFn","_id","_clearFn","immediateIds","nextImmediateId","setInterval","clearInterval","unref","enroll","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","webpackPolyfill","paths","children","drainQueue","draining","currentQueue","fun","browser","argv","versions","off","binding","cwd","chdir","umask"],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"respoke\"] = factory();\n\telse\n\t\troot[\"respoke\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"respoke\"] = factory();\n\telse\n\t\troot[\"respoke\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/*global Bugsnag: true*/\n\t/*jshint bitwise: false*/\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\n\tvar log = __webpack_require__(18);\n\tlog.setLevel('warn');\n\n\tvar Q = __webpack_require__(19);\n\tQ.longStackSupport = true;\n\tQ.stackJumpLimit = 5;\n\tQ.longStackJumpLimit = 20;\n\tQ.stopUnhandledRejectionTracking();\n\n\t__webpack_require__(2);\n\n\t/**\n\t * `respoke` is a global static class.\n\t *\n\t *\n\t * Include the [latest version](https://cdn.respoke.io/respoke.min.js) or\n\t * [choose a previous release](http://cdn.respoke.io/list.html).\n\t *\n\t * Or use `npm install --save respoke`.\n\t *\n\t * Interact with Respoke primarily via [`respoke.Client`](respoke.Client.html):\n\t *\n\t *      var client = respoke.createClient();\n\t *\n\t *\n\t * **Development mode without brokered auth**\n\t *\n\t *      var client = respoke.createClient({\n\t *          appId: \"XXXXXXX-my-app-id-XXXXXX\",\n\t *          developmentMode: true,\n\t *          endpointId: \"billy\"\n\t *      });\n\t *\n\t *      client.listen('connect', function () {\n\t *          console.log('connected to respoke!');\n\t *      });\n\t *\n\t *      client.listen('error', function (err) {\n\t *          console.error('Connection to Respoke failed.', err);\n\t *      });\n\t *\n\t *      client.connect();\n\t *\n\t *\n\t * **Production mode with brokered auth**\n\t *\n\t *      var client = respoke.createClient();\n\t *\n\t *      client.listen('connect', function () {\n\t *          console.log('connected to respoke!');\n\t *      });\n\t *\n\t *      client.listen('error', function (err) {\n\t *          console.error('Connection to Respoke failed.', err);\n\t *      });\n\t *\n\t *      // Respoke auth token obtained by your server.\n\t *      // This is how you control who can connect to Respoke app.\n\t *      // See API docs for POST [base]/tokens\n\t *      var tokenId = \"XXXX-XXXX-brokered-auth-token-XXXXX\";\n\t *\n\t *      // connect to respoke with the token\n\t *      client.connect({\n\t *          token: tokenId\n\t *      });\n\t *\n\t *      // fetch a new token from your server if it expires\n\t *      client.listen('disconnect', function (evt) {\n\t *          // fetch another token from your server.\n\t *          var newTokenId = \"XXXX-XXXX-brokered-auth-token2-XXXXX\";\n\t *          client.connect({\n\t *              token: newTokenId\n\t *          });\n\t *      });\n\t *\n\t *\n\t *\n\t * ### Event listeners vs callback handlers\n\t *\n\t * There are two ways to attach listeners. It is highly recommended that you choose one pattern\n\t * and stick to it throughout your app.\n\t *\n\t * For every `event-name`, there is a corresponding callback `onEventName`.\n\t *\n\t * **With a listener**\n\t *\n\t *      var client = respoke.createClient();\n\t *      client.listen('connect', function () { });\n\t *\n\t * **or with a callback**\n\t *\n\t *      var client = respoke.createClient({\n\t *          // other options go here\n\t *\n\t *          onConnect: function () { }\n\t *      });\n\t *\n\t *\n\t * @namespace respoke\n\t * @class respoke\n\t * @global\n\t * @link https://cdn.respoke.io/respoke.min.js\n\t */\n\tvar respoke = module.exports = {\n\t    buildNumber: 'v1.24.0',\n\t    streams: []\n\t};\n\n\t/**\n\t * A map of respoke.Client instances available for use. This is useful if you would like to separate some\n\t * functionality of your app into a separate Respoke app which would require a separate appId.\n\t * @type {boolean}\n\t */\n\trespoke.instances = {};\n\n\t/**\n\t * Indicate whether the user's browser is Chrome and requires the Respoke Chrome extension to do screen sharing.\n\t * @type {boolean}\n\t */\n\trespoke.needsChromeExtension = !!(window.chrome && !window.opera && navigator.webkitGetUserMedia);\n\n\t/**\n\t * Indicate whether we are dealing with node-webkit\n\t * @type {boolean}\n\t */\n\trespoke.isNwjs = (typeof process !== 'undefined');\n\n\t/**\n\t * Indicate whether the user has a Respoke Chrome extension installed and running correcty on this domain.\n\t * @type {boolean}\n\t */\n\trespoke.hasChromeExtension = false;\n\n\t/**\n\t * Create an Event. This is used in the Chrome extension to communicate between the library and extension.\n\t * @private\n\t * @type {function}\n\t */\n\trespoke.extEvent = function (type, data) {\n\t    var evt = document.createEvent(\"CustomEvent\");\n\t    evt.initCustomEvent(type, true, true, data);\n\t    return evt;\n\t};\n\n\t/**\n\t * `\"v0.0.0\"`\n\t *\n\t * The respoke.min.js version.\n\t *\n\t * Past versions can be found at [cdn.respoke.io/list.html](http://cdn.respoke.io/list.html)\n\t * @type {string}\n\t */\n\trespoke.version = respoke.buildNumber + \"\";\n\n\trespoke.EventEmitter = __webpack_require__(3);\n\trespoke.Client = __webpack_require__(4);\n\trespoke.Presentable = __webpack_require__(5);\n\trespoke.Connection = __webpack_require__(6);\n\trespoke.Endpoint = __webpack_require__(7);\n\trespoke.TextMessage = __webpack_require__(8);\n\trespoke.SignalingMessage = __webpack_require__(9);\n\trespoke.Group = __webpack_require__(10);\n\trespoke.SignalingChannel = __webpack_require__(11);\n\trespoke.DirectConnection = __webpack_require__(12);\n\trespoke.PeerConnection = __webpack_require__(13);\n\trespoke.CallState = __webpack_require__(14);\n\trespoke.Call = __webpack_require__(15);\n\trespoke.LocalMedia = __webpack_require__(16);\n\trespoke.RemoteMedia = __webpack_require__(17);\n\trespoke.log = log;\n\trespoke.Q = Q;\n\n\t/*\n\t * Get information from the Respoke Screen Sharing Chrome extension if it is installed.\n\t */\n\tdocument.addEventListener('respoke-available', function (evt) {\n\t    var data = evt.detail;\n\t    if (data.available !== true) {\n\t        return;\n\t    }\n\n\t    respoke.hasChromeExtension = true;\n\t    respoke.chooseDesktopMedia = function (callback) {\n\t        if (!callback) {\n\t            throw new Error(\"Can't choose desktop media without callback parameter.\");\n\t        }\n\n\t        function sourceIdListener(evt) {\n\t            var data = evt.detail;\n\n\t            respoke.screenSourceId = data.sourceId;\n\t            callback(data);\n\t            document.removeEventListener(\"respoke-source-id\", sourceIdListener);\n\t        }\n\n\t        document.dispatchEvent(respoke.extEvent('ct-respoke-source-id'));\n\t        document.addEventListener(\"respoke-source-id\", sourceIdListener);\n\t    };\n\n\t    respoke.log.info(\"Respoke Screen Share Chrome extension available for use.\");\n\t});\n\n\tif (!window.skipErrorReporting) {\n\t    // Use airbrake.\n\t    var airbrake = document.createElement('script');\n\t    var first = document.getElementsByTagName('script')[0];\n\t    first.parentNode.insertBefore(airbrake, first);\n\n\t    airbrake.src = \"https://ssljscdn.airbrake.io/0.3/airbrake.min.js\";\n\t    airbrake.setAttribute('data-airbrake-project-id', '98133');\n\t    airbrake.setAttribute('data-airbrake-project-key', 'cd3e085acc5e554658ebcdabd112a6f4');\n\t    airbrake.setAttribute('data-airbrake-project-environment-name', 'production');\n\n\t    airbrake.onload = function () {\n\t        window.onerror = function (message, file, line) {\n\t            //Only send errors from the respoke.js file to Airbrake\n\t            if (file.match(/respoke/) && !window.skipErrorReporting) {\n\t                Airbrake.push({error: {message: message, fileName: file, lineNumber: line}});\n\t            }\n\t        };\n\t    };\n\t}\n\n\t/**\n\t * This is one of two possible entry points for interating with the library.\n\t *\n\t * This method creates a new Client object\n\t * which represents your user's connection to your Respoke app.\n\t *\n\t * This method **automatically calls client.connect(params)** after the client is created.\n\t *\n\t * @static\n\t * @memberof respoke\n\t * @param {object} params Parameters to the respoke.Client constructor.\n\t * @param {string} [params.appId]\n\t * @param {string} [params.baseURL]\n\t * @param {string} [params.token]\n\t * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n\t * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n\t * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t * operation and will limit the services you will be able to use.\n\t * @param {boolean} [params.reconnect=false] - Whether or not to automatically reconnect to the Respoke service\n\t * when a disconnect occurs.\n\t * @param {function} [params.onSuccess] - Success handler for this invocation of this method only.\n\t * @param {function} [params.onError] - Error handler for this invocation of this method only.\n\t * @param {function} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t * @param {function} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n\t * @param {function} [params.onMessage] - Callback for when any message is received from anywhere on the system.\n\t * @param {function} [params.onDisconnect] - Callback for Client disconnect.\n\t * @param {function} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n\t * @param {function} [params.onCall] - Callback for when this client's user receives a call.\n\t * @param {function} [params.onDirectConnection] - Callback for when this client's user receives a request for a\n\t * direct connection.\n\t * @param {boolean} [params.enableCallDebugReport=true] - Optional flag defaulting to true which allows sending\n\t * debugging information.\n\t * @returns {respoke.Client}\n\t */\n\trespoke.connect = function (params) {\n\t    var client = respoke.Client(params);\n\t    client.connect(params);\n\t    return client;\n\t};\n\n\t/**\n\t * This method will be overridden in the case that an extension or plugin is available for screen sharing.\n\t *\n\t * @static\n\t * @private\n\t * @memberof respoke\n\t */\n\trespoke.chooseDesktopMedia = function () {\n\t    log.warn(\"Screen sharing is not implemented for this browser.\");\n\t};\n\n\t/**\n\t * Getter for the respoke client.\n\t *\n\t * You can have more than one active client, so this method provides a way to retrieve a specific instance.\n\t *\n\t * @static\n\t * @memberof respoke\n\t * @param {number} id The Client ID.\n\t * @returns {respoke.Client}\n\t */\n\trespoke.getClient = function (id) {\n\t    if (id === undefined) {\n\t        log.debug(\"Can't call getClient with no client ID.\", new Error().stack);\n\t    }\n\t    if (!respoke.instances[id]) {\n\t        log.debug(\"No client instance with id\", id);\n\t    }\n\t    return respoke.instances[id];\n\t};\n\n\t/**\n\t * This is one of two possible entry points for interating with the library.\n\t *\n\t * This method creates a new Client object which represents your user's connection to your Respoke app.\n\t *\n\t * It **does NOT automatically call the client.connect() method** after the client is created.\n\t *\n\t * The `params` argument is the same as `respoke.connect(params)`.\n\t *\n\t * @static\n\t * @memberof respoke\n\t * @param {object} params Parameters to respoke.Client - same as respoke.connect()\n\t * @returns {respoke.Client}\n\t */\n\trespoke.createClient = function (params) {\n\t    var client;\n\t    params = params || {};\n\t    if (params.instanceId) {\n\t        client = respoke.getClient(params.instanceId);\n\t        if (client) {\n\t            return client;\n\t        }\n\t    }\n\t    return respoke.Client(params);\n\t};\n\n\t/**\n\t * Build a closure from a listener that will ensure the listener can only be called once.\n\t * @static\n\t * @private\n\t * @memberof respoke\n\t * @param {function} func\n\t * @return {function}\n\t */\n\trespoke.once = function (func) {\n\t    return (function () {\n\t        var called = false;\n\t        return function () {\n\t            if (called === false) {\n\t                func.apply(null, arguments);\n\t                called = true;\n\t            }\n\t        };\n\t    })();\n\t};\n\n\t/**\n\t * @static\n\t * @private\n\t * @memberof respoke\n\t * @returns {number}\n\t */\n\trespoke.makeGUID = function () {\n\t    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n\t    var uuid = new Array(36);\n\t    var rnd = 0;\n\t    var r;\n\t    for (var i = 0; i < 36; i += 1) {\n\t        if (i === 8 || i === 13 ||  i === 18 || i === 23) {\n\t            uuid[i] = '-';\n\t        } else if (i === 14) {\n\t            uuid[i] = '4';\n\t        } else {\n\t            if (rnd <= 0x02) {\n\t                rnd = 0x2000000 + (Math.random() * 0x1000000) | 0;\n\t            }\n\t            r = rnd & 0xf;\n\t            rnd = rnd >> 4;\n\t            uuid[i] = chars[(i === 19) ? (r & 0x3) | 0x8 : r];\n\t        }\n\t    }\n\t    return uuid.join('');\n\t};\n\n\t/**\n\t * This method is used internally to attach handlers to promises that are returned by many methods in the library.\n\t * It's not recommended that this method be used by developers and apps.\n\t * @private\n\t * @static\n\t * @memberof respoke\n\t * @param {Promise} promise\n\t * @param {function} onSuccess\n\t * @param {function} onError\n\t * @returns {Promise|undefined}\n\t */\n\trespoke.handlePromise = function (promise, onSuccess, onError) {\n\t    var returnUndef = false;\n\t    if (onSuccess || onError) {\n\t        returnUndef = true;\n\t    }\n\n\t    onSuccess = typeof onSuccess === 'function' ? onSuccess : function () {};\n\t    onError = typeof onError === 'function' ? onError : function () {};\n\t    promise.done(onSuccess, onError);\n\t    return (returnUndef ? undefined : promise);\n\t};\n\n\t/**\n\t * Empty base class. Use params.that (if exists) for the base object, but delete it from the instance.  Copy all\n\t * params that were passed in onto the base object. Add the class name.\n\t * @class respoke.Class\n\t * @classdesc Empty base class.\n\t * @constructor\n\t * @private\n\t */\n\trespoke.Class = function (params) {\n\t    params = params || {};\n\t    var that = params.that || {};\n\t    var client = params.client;\n\n\t    that.className = 'respoke.Class';\n\t    delete params.that;\n\t    delete that.client;\n\n\t    Object.keys(params).forEach(function copyParam(name) {\n\t        that[name] = params[name];\n\t    });\n\n\t    return that;\n\t}; // end of respoke.Class\n\n\t/**\n\t * Does the browser support `UserMedia`?\n\t * @static\n\t * @memberof respoke\n\t * @returns {boolean}\n\t */\n\trespoke.hasUserMedia = function () {\n\t    return (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia) instanceof Function;\n\t};\n\n\t/**\n\t * Does the browser support `RTCPeerConnection`?\n\t * @static\n\t * @memberof respoke\n\t * @returns {boolean}\n\t */\n\trespoke.hasRTCPeerConnection = function () {\n\t    return (window.RTCPeerConnection || window.webkitRTCPeerConnection ||\n\t            window.mozRTCPeerConnection) instanceof Function;\n\t};\n\n\t/**\n\t * Does the browser support `WebSocket`?\n\t * @static\n\t * @memberof respoke\n\t * @returns {boolean}\n\t */\n\trespoke.hasWebsocket = function () {\n\t    return (window.WebSocket || window.webkitWebSocket || window.MozWebSocket) instanceof Function;\n\t};\n\n\t/**\n\t * Clone an object.\n\t * @static\n\t * @memberof respoke\n\t * @private\n\t * @param {Object} source - The object to clone\n\t * @returns {Object}\n\t */\n\trespoke.clone = function (source) {\n\t    if (source) {\n\t        return JSON.parse(JSON.stringify(source));\n\t    }\n\t    return source;\n\t};\n\n\t/**\n\t * Compares two objects for equality\n\t * @static\n\t * @memberof respoke\n\t * @private\n\t * @param {Object} a\n\t * @param {Object} b\n\t * @returns {boolean}\n\t */\n\trespoke.isEqual = function (a, b) {\n\t    var aKeys;\n\n\t    //check if arrays\n\t    if (a && b && a.hasOwnProperty('length') && b.hasOwnProperty('length') && a.splice && b.splice) {\n\t        if (a.length !== b.length) {\n\t            //short circuit if arrays are different length\n\t            return false;\n\t        }\n\n\t        for (var i = 0; i < a.length; i += 1) {\n\t            if (!respoke.isEqual(a[i], b[i])) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    }\n\n\t    if (typeof a === 'object' && typeof b === 'object' && Object.keys(a).length === Object.keys(b).length) {\n\t        aKeys = Object.keys(a);\n\t        for (var i = 0; i < aKeys.length; i += 1) {\n\t            if (!respoke.isEqual(a[aKeys[i]], b[aKeys[i]])) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    }\n\n\t    return a === b;\n\t};\n\n\t/*\n\t * Does the sdp indicate an audio stream?\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {boolean}\n\t */\n\trespoke.sdpHasAudio = function (sdp) {\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasAudio called with no parameters.\");\n\t    }\n\t    return (sdp.indexOf('m=audio') !== -1 && sdp.indexOf('a=recvonly') === -1);\n\t};\n\n\t/**\n\t * Does the sdp indicate a video stream?\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {boolean}\n\t */\n\trespoke.sdpHasVideo = function (sdp) {\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasVideo called with no parameters.\");\n\t    }\n\t    return (sdp.indexOf('m=video') !== -1 && sdp.indexOf('a=recvonly') === -1);\n\t};\n\n\t/**\n\t * Does the sdp indicate a data channel?\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {boolean}\n\t */\n\trespoke.sdpHasDataChannel = function (sdp) {\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasDataChannel called with no parameters.\");\n\t    }\n\t    return sdp.indexOf('m=application') !== -1;\n\t};\n\n\t/**\n\t * Does the sdp indicate the creator is sendOnly?\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {boolean}\n\t */\n\trespoke.sdpHasSendOnly = function (sdp) {\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasSendOnly called with no parameters.\");\n\t    }\n\t    return sdp.indexOf('a=sendonly') !== -1;\n\t};\n\n\t/**\n\t * Does the sdp indicate the creator is receiveOnly?\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {boolean}\n\t */\n\trespoke.sdpHasReceiveOnly = function (sdp) {\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasReceiveOnly called with no parameters.\");\n\t    }\n\t    return sdp.indexOf('a=recvonly') !== -1;\n\t};\n\n\t/**\n\t * Do the constraints indicate an audio stream?\n\t * @static\n\t * @memberof respoke\n\t * @params {RTCConstraints}\n\t * @returns {boolean}\n\t */\n\trespoke.constraintsHasAudio = function (constraints) {\n\t    if (!constraints) {\n\t        throw new Error(\"respoke.constraintsHasAudio called with no parameters.\");\n\t    }\n\t    return (constraints.audio === true);\n\t};\n\n\t/**\n\t * Does the constraints indicate a video stream?\n\t * @static\n\t * @memberof respoke\n\t * @params {RTCConstraints}\n\t * @returns {boolean}\n\t */\n\trespoke.constraintsHasVideo = function (constraints) {\n\t    if (!constraints) {\n\t        throw new Error(\"respoke.constraintsHasVideo called with no parameters.\");\n\t    }\n\t    return (constraints.video === true || typeof constraints.video === 'object');\n\t};\n\n\t/**\n\t * Does the constraints indicate a screenshare?\n\t * @static\n\t * @memberof respoke\n\t * @params {RTCConstraints}\n\t * @returns {boolean}\n\t */\n\trespoke.constraintsHasScreenShare = function (constraints) {\n\t    if (!constraints) {\n\t        throw new Error(\"respoke.constraintsHasScreenShare called with no parameters.\");\n\t    }\n\n\t    return (constraints.video && constraints.video.mandatory &&\n\t            (constraints.video.mandatory.chromeMediaSource || constraints.video.mediaSource));\n\t};\n\n\t/**\n\t * Convert old-style constraints parameter into a constraints array.\n\t * @static\n\t * @memberof respoke\n\t * @params {Array<RTCConstraints>|RTCConstraints} [constraints]\n\t * @params {Array<RTCConstraints>} [defaults]\n\t * @returns {Array<RTCConstraints>}\n\t */\n\trespoke.convertConstraints = function (constraints, defaults) {\n\t    constraints = constraints || [];\n\t    defaults = defaults || [];\n\n\t    if (!constraints.splice) {\n\t        if (typeof constraints === 'object') {\n\t            constraints = [constraints];\n\t        } else {\n\t            constraints = [];\n\t        }\n\t    }\n\n\t    if (constraints.length === 0 && defaults.length > 0) {\n\t        return defaults;\n\t    }\n\n\t    return constraints;\n\t};\n\n\t/**\n\t * Queue items until a trigger is called, then process them all with an action. Before trigger, hold items for\n\t * processing. After trigger, process new items immediately.\n\t * @static\n\t * @memberof respoke\n\t * @returns {Array}\n\t * @private\n\t */\n\trespoke.queueFactory = function () {\n\t    \"use strict\";\n\t    var queue = [];\n\t    /**\n\t     * @param {function} action - the action to perform on each item. Thrown errors will be caught and logged.\n\t     */\n\t    queue.trigger = function (action) {\n\t        if (!action) {\n\t            throw new Error(\"Trigger function requires an action parameter.\");\n\t        }\n\n\t        function safeAction(item) {\n\t            try {\n\t                action(item);\n\t            } catch (err) {\n\t                log.error(\"Error calling queue action.\", err);\n\t            }\n\t        }\n\t        queue.forEach(safeAction);\n\t        queue.length = 0;\n\t        queue.push = safeAction;\n\t    };\n\n\t    return queue;\n\t}\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t *  Copyright (c) 2014 The WebRTC project authors. All Rights Reserved.\n\t *\n\t *  Use of this source code is governed by a BSD-style license\n\t *  that can be found in the LICENSE file in the same directory as\n\t *  this source file.\n\t * @ignore\n\t */\n\n\t/* More information about these options at jshint.com/docs/options */\n\n\t/* jshint browser: true, camelcase: true, curly: true, devel: true,\n\teqeqeq: true, forin: false, globalstrict: true, quotmark: single,\n\tundef: true, unused: strict */\n\n\t/* global mozRTCIceCandidate, mozRTCPeerConnection,\n\tmozRTCSessionDescription, webkitRTCPeerConnection */\n\n\t/* exported trace */\n\n\t'use strict';\n\n\tvar RTCPeerConnection = null;\n\tvar getUserMedia = null;\n\tvar attachMediaStream = null;\n\tvar reattachMediaStream = null;\n\tvar webrtcDetectedBrowser = null;\n\tvar webrtcDetectedVersion = null;\n\n\tfunction trace(text) {\n\t  // This function is used for logging.\n\t  if (text[text.length - 1] === '\\n') {\n\t    text = text.substring(0, text.length - 1);\n\t  }\n\t  console.log((window.performance.now() / 1000).toFixed(3) + ': ' + text);\n\t}\n\n\tfunction maybeFixConfiguration(pcConfig) {\n\t  if (!pcConfig) {\n\t    return;\n\t  }\n\t  for (var i = 0; i < pcConfig.iceServers.length; i++) {\n\t    if (pcConfig.iceServers[i].hasOwnProperty('urls')) {\n\t      pcConfig.iceServers[i].url = pcConfig.iceServers[i].urls;\n\t      delete pcConfig.iceServers[i].urls;\n\t    }\n\t  }\n\t}\n\n\tif (navigator.mozGetUserMedia) {\n\t  console.log('This appears to be Firefox');\n\n\t  webrtcDetectedBrowser = 'firefox';\n\n\t  webrtcDetectedVersion =\n\t    parseInt(navigator.userAgent.match(/Firefox\\/([0-9]+)\\./)[1], 10);\n\n\t  // The RTCPeerConnection object.\n\t  RTCPeerConnection = function(pcConfig, pcConstraints) {\n\t    // .urls is not supported in FF yet.\n\t    maybeFixConfiguration(pcConfig);\n\t    return new mozRTCPeerConnection(pcConfig, pcConstraints);\n\t  };\n\n\t  // The RTCSessionDescription object.\n\t  window.RTCSessionDescription = mozRTCSessionDescription;\n\n\t  // The RTCIceCandidate object.\n\t  window.RTCIceCandidate = mozRTCIceCandidate;\n\n\t  // getUserMedia shim (only difference is the prefix).\n\t  // Code from Adam Barth.\n\t  getUserMedia = navigator.mozGetUserMedia.bind(navigator);\n\t  navigator.getUserMedia = getUserMedia;\n\n\t  // Creates ICE server from the URL for FF.\n\t  window.createIceServer = function(url, username, password) {\n\t    var iceServer = null;\n\t    var urlParts = url.split(':');\n\t    if (urlParts[0].indexOf('stun') === 0) {\n\t      // Create ICE server with STUN URL.\n\t      iceServer = {\n\t        'url': url\n\t      };\n\t    } else if (urlParts[0].indexOf('turn') === 0) {\n\t      if (webrtcDetectedVersion < 27) {\n\t        // Create iceServer with turn url.\n\t        // Ignore the transport parameter from TURN url for FF version <=27.\n\t        var turnUrlParts = url.split('?');\n\t        // Return null for createIceServer if transport=tcp.\n\t        if (turnUrlParts.length === 1 ||\n\t          turnUrlParts[1].indexOf('transport=udp') === 0) {\n\t          iceServer = {\n\t            'url': turnUrlParts[0],\n\t            'credential': password,\n\t            'username': username\n\t          };\n\t        }\n\t      } else {\n\t        // FF 27 and above supports transport parameters in TURN url,\n\t        // So passing in the full url to create iceServer.\n\t        iceServer = {\n\t          'url': url,\n\t          'credential': password,\n\t          'username': username\n\t        };\n\t      }\n\t    }\n\t    return iceServer;\n\t  };\n\n\t  window.createIceServers = function(urls, username, password) {\n\t    var iceServers = [];\n\t    // Use .url for FireFox.\n\t    for (var i = 0; i < urls.length; i++) {\n\t      var iceServer =\n\t        window.createIceServer(urls[i], username, password);\n\t      if (iceServer !== null) {\n\t        iceServers.push(iceServer);\n\t      }\n\t    }\n\t    return iceServers;\n\t  };\n\n\t  // Attach a media stream to an element.\n\t  attachMediaStream = function(element, stream) {\n\t    //console.log('Attaching media stream');\n\t    element.mozSrcObject = stream;\n\t    setTimeout(function () {\n\t      element.play();\n\t    }, 100);\n\t  };\n\n\t  reattachMediaStream = function(to, from) {\n\t    //console.log('Reattaching media stream');\n\t    to.mozSrcObject = from.mozSrcObject;\n\t  };\n\n\t} else if (navigator.webkitGetUserMedia) {\n\t  console.log('This appears to be Chrome');\n\n\t  webrtcDetectedBrowser = 'chrome';\n\t  // Temporary fix until crbug/374263 is fixed.\n\t  // Setting Chrome version to 999, if version is unavailable.\n\t  var result = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n\t  if (result !== null) {\n\t    webrtcDetectedVersion = parseInt(result[2], 10);\n\t  } else {\n\t    webrtcDetectedVersion = 999;\n\t  }\n\n\t  // Creates iceServer from the url for Chrome M33 and earlier.\n\t  window.createIceServer = function(url, username, password) {\n\t    var iceServer = null;\n\t    var urlParts = url.split(':');\n\t    if (urlParts[0].indexOf('stun') === 0) {\n\t      // Create iceServer with stun url.\n\t      iceServer = {\n\t        'url': url\n\t      };\n\t    } else if (urlParts[0].indexOf('turn') === 0) {\n\t      // Chrome M28 & above uses below TURN format.\n\t      iceServer = {\n\t        'url': url,\n\t        'credential': password,\n\t        'username': username\n\t      };\n\t    }\n\t    return iceServer;\n\t  };\n\n\t  // Creates iceServers from the urls for Chrome M34 and above.\n\t  window.createIceServers = function(urls, username, password) {\n\t    var iceServers = [];\n\t    if (webrtcDetectedVersion >= 34) {\n\t      // .urls is supported since Chrome M34.\n\t      iceServers = {\n\t        'urls': urls,\n\t        'credential': password,\n\t        'username': username\n\t      };\n\t    } else {\n\t      for (var i = 0; i < urls.length; i++) {\n\t        var iceServer =\n\t          window.createIceServer(urls[i], username, password);\n\t        if (iceServer !== null) {\n\t          iceServers.push(iceServer);\n\t        }\n\t      }\n\t    }\n\t    return iceServers;\n\t  };\n\n\t  // The RTCPeerConnection object.\n\t  RTCPeerConnection = function(pcConfig, pcConstraints) {\n\t    // .urls is supported since Chrome M34.\n\t    if (webrtcDetectedVersion < 34) {\n\t      maybeFixConfiguration(pcConfig);\n\t    }\n\t    return new webkitRTCPeerConnection(pcConfig, pcConstraints);\n\t  };\n\n\t  // Get UserMedia (only difference is the prefix).\n\t  // Code from Adam Barth.\n\t  getUserMedia = navigator.webkitGetUserMedia.bind(navigator);\n\t  navigator.getUserMedia = getUserMedia;\n\n\t  // Attach a media stream to an element.\n\t  attachMediaStream = function(element, stream) {\n\t    if (typeof element.srcObject !== 'undefined') {\n\t      element.srcObject = stream;\n\t    } else if (typeof element.mozSrcObject !== 'undefined') {\n\t      element.mozSrcObject = stream;\n\t    } else if (typeof element.src !== 'undefined') {\n\t      element.src = URL.createObjectURL(stream);\n\t    } else {\n\t      console.log('Error attaching stream to element.');\n\t    }\n\t  };\n\n\t  reattachMediaStream = function(to, from) {\n\t    to.src = from.src;\n\t  };\n\t} else {\n\t  console.log('Browser does not appear to be WebRTC-capable');\n\t}\n\n\n\twindow.RTCPeerConnection = RTCPeerConnection;\n\twindow.getUserMedia = getUserMedia;\n\twindow.attachMediaStream = attachMediaStream;\n\twindow.reattachMediaStream = reattachMediaStream;\n\twindow.webrtcDetectedBrowser = webrtcDetectedBrowser;\n\twindow.webrtcDetectedVersion = webrtcDetectedVersion;\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\n\tvar respoke = __webpack_require__(1);\n\tvar log = __webpack_require__(18);\n\n\t/**\n\t * A generic class for emitting and listening to events. This is used internally by respoke.js\n\t * to provide evented behavior. You can add custom events and inherit your own objects from\n\t * the EventEmitter.\n\t *\n\t * ```\n\t * // Adding a custom event to a respoke.Client instance\n\t * client.listen('my-event', function (evt) { });\n\t * client.fire('my-event', { name: 'my-event', asdf: 'jkl' });\n\t * ```\n\t *\n\t * ```\n\t * // Custom EventEmitter\n\t * var MyCustomEmitter = respoke.EventEmitter();\n\t * var emitterInstance = MyCustomEmitter();\n\t * emitterInstance.fire('hi', { name: 'hi', message: 'hello' });\n\t * emitterInstance.listen('hi', function (evt) { });\n\t * ```\n\t *\n\t * @class respoke.EventEmitter\n\t * @inherits respoke.Class\n\t * @constructor\n\t * @param {object} params\n\t * @param {string} params.instanceId\n\t * @returns {respoke.EventEmitter}\n\t */\n\tvar EventEmitter = module.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = respoke.Class(params);\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.EventEmitter\n\t     * @name className\n\t     * @type {string}\n\t     * @private\n\t     */\n\t    that.className = 'respoke.EventEmitter';\n\n\t    /**\n\t     * @memberof! respoke.EventEmitter\n\t     * @name eventList\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var eventList = {};\n\n\t    /**\n\t     * Add a listener that will only be called once to an object.  This method adds the given listener to the given\n\t     * event in the case that the same\n\t     * listener is not already registered to this event and the listener is a function.  The third argument 'isInternal'\n\t     * is used only internally by the library to indicate that this listener is a library-used listener and should not\n\t     * count when we are trying to determine if an event has listeners placed by the developer.\n\t     *\n\t     *     client.once('connect', function (evt) {\n\t     *         console.log(\"This is the first time we connected.\");\n\t     *     });\n\t     *\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.listen\n\t     * @param {string} eventType - A developer-specified string identifying the event.\n\t     * @param {respoke.EventEmitter.eventListener} listener - A function to call when the event is fire.\n\t     * @param {boolean} [isInternal] - A flag to indicate this listener was added by the library. This parameter should\n\t     * not be used by developers who are using the library, only by developers who are working on the library itself.\n\t     */\n\t    that.once = function (eventType, listener, isInternal) {\n\t        var string = listener.toString();\n\t        listener = respoke.once(listener);\n\t        listener.toString = function () { return string; };\n\t        listener.once = true;\n\t        that.listen(eventType, listener, isInternal);\n\t    };\n\n\t    /**\n\t     * Add a `listener` function to an object.\n\t     *\n\t     * This method adds the `listener` to the event `eventName`.\n\t     *\n\t     * If an identical listener already registered to this event, it will **not** be added.\n\t     *\n\t     * ##### Example of adding an event listener.\n\t     *\n\t     *     client.listen('connect', function (evt) {\n\t     *         console.log(\"We've connected!\", evt);\n\t     *     });\n\t     *\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.listen\n\t     * @param {string} eventType - The name of the event.\n\t     * @param {respoke.EventEmitter.eventListener} listener - A function to call when the event is\n\t     * fired.\n\t     * @arg {boolean} isInternal - Internal use only. A flag to indicate this listener was\n\t     * added by the library. This parameter should not be used by developers who are using\n\t     * the library, only by developers who are working on the library itself.\n\t     */\n\t    that.listen = function (eventType, listener, isInternal) {\n\t        if (listener === undefined) {\n\t            return;\n\t        }\n\t        var invalidEventType = typeof eventType !== 'string' || !eventType;\n\t        var invalidListener = typeof listener !== 'function';\n\t        if (invalidEventType || invalidListener) {\n\t            log.error(\"Invalid request to add event listener to\", eventType, listener);\n\t            return;\n\t        }\n\n\t        eventList[eventType] = eventList[eventType] || [];\n\t        listener.isInternal = !!isInternal; // boolify\n\n\t        var toString = function (fn) {\n\t            return fn.toString();\n\t        };\n\t        var isNotAlreadyAdded = eventList[eventType].map(toString).indexOf(listener.toString()) === -1;\n\n\t        if (isNotAlreadyAdded) {\n\t            eventList[eventType].push(listener);\n\t        } else {\n\t            log.warn(\"Not adding duplicate listener to\", eventType, listener);\n\t        }\n\t    };\n\n\t    /**\n\t     * Remove a listener from an object. If no eventType is specified, all eventTypes will be\n\t     * cleared. If an eventType is specified but no listener is specified, all listeners will be\n\t     * removed from the specified eventType.  If a listener is also specified, only that listener\n\t     * will be removed.\n\t     *\n\t     *     client.ignore('connect', connectHandler);\n\t     *\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.ignore\n\t     * @param {string} [eventType] - An optional developer-specified string identifying the event.\n\t     * @param {function} [listener] - An optional function to remove from the specified event.\n\t     */\n\t    that.ignore = function (eventType, listener) {\n\t        // Remove all events from this object\n\t        if (eventType === undefined) {\n\t            eventList = {};\n\t            return;\n\t        }\n\n\t        // Remove all listeners from this event.\n\t        if (listener === undefined || !eventList[eventType]) {\n\t            eventList[eventType] = [];\n\t            return;\n\t        }\n\n\t        // Remove only one listener from this event.\n\t        for (var i = eventList[eventType].length - 1; i >= 0; i -= 1) {\n\t            if (listener === eventList[eventType][i]) {\n\t                eventList[eventType].splice(i, 1);\n\t                return;\n\t            }\n\t        }\n\t    };\n\n\t    /**\n\t     * Trigger an event on an object. All listeners for the specified eventType will be called.\n\t     * Listeners will be bound to the object ('this' will refer to the object), and additional\n\t     * arguments to fire() will be passed into each listener.\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.fire\n\t     * @param {string} eventType - A developer-specified string identifying the event to fire.\n\t     * @param {string|number|object|array} evt - Any number of optional parameters to be passed to\n\t     * the listener\n\t     * @private\n\t     */\n\t    that.fire = function (eventType, evt) {\n\t        var args = null;\n\t        var count = 0;\n\t        var toRemove = [];\n\n\t        evt = evt || {};\n\t        evt.name = eventType;\n\t        evt.target = that;\n\n\t        if (!eventType) {\n\t            return;\n\t        }\n\n\t        if (!eventList[eventType]) {\n\t            log.debug(\"fired \" + that.className + \"#\" + eventType + \" 0 listeners called with params\", evt);\n\t            return;\n\t        }\n\n\t        for (var i = 0; i < eventList[eventType].length; i += 1) {\n\t            var listener = eventList[eventType][i];\n\t            if (typeof listener === 'function') {\n\t                setTimeout(listenerBuilder(listener, evt, eventType));\n\n\t                count += 1;\n\t                if (listener.once === true) {\n\t                    toRemove.push(i);\n\t                }\n\t            }\n\t        }\n\n\t        for (var i = (toRemove.length - 1); i >= 0; i -= 1) {\n\t            eventList[eventType].splice(toRemove[i], 1);\n\t        }\n\n\t        log.debug(\"fired \" + that.className + \"#\" + eventType + \" \" + count + \" listeners called with params\", evt);\n\t    };\n\n\t    function listenerBuilder(listener, evt, eventType) {\n\t        return function () {\n\t            try {\n\t                listener.call(that, evt);\n\t            } catch (e) {\n\t                log.error('Error in ' + that.className + \"#\" + eventType, e.message, e.stack);\n\t            }\n\t        };\n\t    }\n\n\t    /**\n\t     * Determine if an object has had any listeners registered for a given event outside the library. This method\n\t     * checks for the isInternal flag on each listener and doesn't count it toward an event being listened to. This\n\t     * method is used in the library to handle situations where an action is needed if an event won't be acted on.\n\t     * For instance, if a call comes in for the logged-in user, but the developer isn't listening to\n\t     * {respoke.Client#call}, we'll need to reject the call immediately.\n\t     *\n\t     *     if (client.hasListeners('call')) {\n\t     *         // already handled!\n\t     *     }\n\t     *\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.hasListeners\n\t     * @param {string} eventType - The name of the event\n\t     * @returns {boolean} Whether this event has any listeners that are external to this library.\n\t     */\n\t    that.hasListeners = function (eventType) {\n\t        if (eventType === undefined) {\n\t            throw new Error(\"Missing required parameter event type.\");\n\t        }\n\n\t        if (!eventList[eventType]) {\n\t            return false;\n\t        }\n\n\t        return !eventList[eventType].every(function eachListener(listener) {\n\t            return listener.isInternal;\n\t        });\n\t    };\n\n\t    return that;\n\t}; // End respoke.EventEmitter\n\t/**\n\t * @callback respoke.EventEmitter.eventListener\n\t * @param {respoke.Event} evt\n\t */\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\n\tvar log = __webpack_require__(18);\n\tvar Q = __webpack_require__(19);\n\tvar respoke = __webpack_require__(1);\n\n\t/**\n\t * `respoke.Client` is the top-level interface to the API. Interacting with Respoke should be done using\n\t * a `respoke.Client` instance.\n\t *\n\t * There are two ways to get a client:\n\t *\n\t *      var client = respoke.createClient(clientParams);\n\t *      // . . . set stuff up, then . . .\n\t *      client.connect(connectParams);\n\t *\n\t * or\n\t *\n\t *      // creates client and connects to Respoke all at once\n\t *      var client = respoke.connect(allParams);\n\t *\n\t * A client does the following things:\n\t *\n\t * 1. authentication with the Respoke API\n\t * 1. receives server-side app-specific information\n\t * 1. tracks connections and presence\n\t * 1. provides methods to get and interact with tracked entities (like groups and endpoints)\n\t * 1. stores default settings for calls and direct connections\n\t * 1. automatically reconnects to the API when network activity is lost*\n\t *\n\t * *If `developmentMode` is set to true. If not using `developmentMode`, disable automatic\n\t * reconnect by sending `reconnect: false` and listening to the Client's disconnect event\n\t * to fetch a new brokered auth token, then call `client.connect()` with the new token.\n\t *\n\t * @class respoke.Client\n\t * @constructor\n\t * @augments respoke.Presentable\n\t * @param {object} params\n\t * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n\t * respoke.connect, respoke.createClient, or to client.connect.\n\t * @param {string} [params.token] - The endpoint's authentication token.\n\t * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t * endpoint. This is only used when `developmentMode` is set to `true`.\n\t * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n\t * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t * operation and will limit the services you will be able to use.\n\t * @param {string|number|object|Array} [params.presence=unavailable] The initial presence to set once connected.\n\t * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n\t * when a disconnect occurs.\n\t * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n\t * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is received\n\t * from anywhere on the system.\n\t * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n\t * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n\t * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect.\n\t * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client's user receives a call.\n\t * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this client's user\n\t * receives a request for a direct connection.\n\t * @returns {respoke.Client}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId || respoke.makeGUID();\n\t    params.instanceId = instanceId;\n\t    var that = respoke.Presentable(params);\n\t    respoke.instances[instanceId] = that;\n\t    delete that.instanceId;\n\t    that.connectTries = 0;\n\t    /**\n\t     * A name to identify this class\n\t     * @memberof! respoke.Client\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Client';\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name host\n\t     * @type {string}\n\t     * @private\n\t     */\n\t    var host = window.location.hostname;\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name port\n\t     * @type {number}\n\t     * @private\n\t     */\n\t    var port = window.location.port;\n\t    /**\n\t     * A simple POJO to store some methods we will want to override but reference later.\n\t     * @memberof! respoke.Client\n\t     * @name superClass\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var superClass = {\n\t        setPresence: that.setPresence\n\t    };\n\t    /**\n\t     * A container for baseURL, token, and appId so they won't be accidentally viewable in any JavaScript debugger.\n\t     * @memberof! respoke.Client\n\t     * @name clientSettings\n\t     * @type {object}\n\t     * @private\n\t     * @property {string} [baseURL] - the URL of the cloud infrastructure's REST API.\n\t     * @property {string} [token] - The endpoint's authentication token.\n\t     * @property {string} [appId] - The id of your Respoke app.\n\t     * @property {string} [endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @property {boolean} [developmentMode=false] - Indication to obtain an authentication token from the service.\n\t     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t     * operation and will limit the services you will be able to use.\n\t     * @property {boolean} [reconnect=false] - Whether or not to automatically reconnect to the Respoke service\n\t     * when a disconnect occurs.\n\t     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n\t     * @property {respoke.Client.onClientMessage} [onMessage] - Callback for when any message is received\n\t     * from anywhere on the system.\n\t     * @property {respoke.Client.onConnect} [onConnect] - Callback for Client connect.\n\t     * @property {respoke.Client.onDisconnect} [onDisconnect] - Callback for Client disconnect.\n\t     * @property {respoke.Client.onReconnect} [onReconnect] - Callback for Client reconnect. Not Implemented.\n\t     * @property {respoke.Client.onCall} [onCall] - Callback for when this client receives a call.\n\t     * @property {respoke.Client.onDirectConnection} [onDirectConnection] - Callback for when this client\n\t     * receives a request for a direct connection.\n\t     * @property {boolean} enableCallDebugReport=true - Upon finishing a call, should the client send debugging\n\t     * information to the API? Defaults to `true`.\n\t     */\n\t    var clientSettings = {};\n\n\t    delete that.appId;\n\t    delete that.baseURL;\n\t    delete that.developmentMode;\n\t    delete that.token;\n\t    delete that.resolveEndpointPresence;\n\n\t    /**\n\t     * Internal list of known groups.\n\t     * @memberof! respoke.Client\n\t     * @name groups\n\t     * @type {Array<respoke.Group>}\n\t     * @private\n\t     */\n\t    var groups = [];\n\t    /**\n\t     * Internal list of known endpoints.\n\t     * @memberof! respoke.Client\n\t     * @name endpoints\n\t     * @type {Array<respoke.Endpoint>}\n\t     * @private\n\t     */\n\t    var endpoints = [];\n\t    /**\n\t     * Array of calls in progress, made accessible for informational purposes only.\n\t     * **Never modify this array directly.**\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @name calls\n\t     * @type {array}\n\t     */\n\t    that.calls = [];\n\t    log.debug(\"Client ID is \", instanceId);\n\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name signalingChannel\n\t     * @type {respoke.SignalingChannel}\n\t     * @private\n\t     */\n\t    var signalingChannel = respoke.SignalingChannel({\n\t        instanceId: instanceId,\n\t        clientSettings: clientSettings\n\t    });\n\n\t    /**\n\t     * Save parameters of the constructor or client.connect() onto the clientSettings object\n\t     * @memberof! respoke.Client\n\t     * @method respoke.saveParameters\n\t     * @param {object} params\n\t     * @param {respoke.Client.connectSuccessHandler} [params.onSuccess] - Success handler for this invocation\n\t     * of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n\t     * respoke.connect, respoke.createClient, or to client.connect.\n\t     * @param {string} [params.token] - The endpoint's authentication token.\n\t     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n\t     * @param {respoke.client.resolveEndpointPresence} [params.resolveEndpointPresence] An optional function for\n\t     * resolving presence for an endpoint.  An endpoint can have multiple Connections this function will be used\n\t     * to decide which Connection's presence gets precedence for the Endpoint.\n\t     * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n\t     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t     * operation and will limit the services you will be able to use.\n\t     * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n\t     * when a disconnect occurs.\n\t     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves\n\t     * a group.\n\t     * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is\n\t     * received from anywhere on the system.\n\t     * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n\t     * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n\t     * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n\t     * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client receives a call.\n\t     * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this\n\t     * client receives a request for a direct connection.\n\t     * @private\n\t     */\n\t    function saveParameters(params) {\n\t        Object.keys(params).forEach(function eachParam(key) {\n\t            if (['onSuccess', 'onError', 'reconnect'].indexOf(key) === -1 && params[key] !== undefined) {\n\t                clientSettings[key] = params[key];\n\t            }\n\t        });\n\n\t        clientSettings.developmentMode = !!clientSettings.developmentMode;\n\t        clientSettings.enableCallDebugReport = typeof clientSettings.enableCallDebugReport === 'boolean' ?\n\t            clientSettings.enableCallDebugReport : true;\n\n\t        if (typeof params.reconnect !== 'boolean') {\n\t            clientSettings.reconnect = typeof clientSettings.developmentMode === 'boolean' ? clientSettings.developmentMode : false;\n\t        } else {\n\t            clientSettings.reconnect = !!params.reconnect;\n\t        }\n\t    }\n\t    saveParameters(params);\n\n\t    /**\n\t     * Connect to the Respoke infrastructure and authenticate using `params.token`.\n\t     *\n\t     * After `connect`, the app auth session token is stored so it can be used in API requests.\n\t     *\n\t     * This method attaches quite a few event listeners for things like group joining and connection status changes.\n\t     *\n\t     * #### Usage\n\t     *\n\t     *      client.connect({\n\t     *          appId: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\",\n\t     *          token: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\", // if not developmentMode\n\t     *          developmentMode: false || true,\n\t     *          // if developmentMode, otherwise your server will set endpointId\n\t     *          endpointId: \"billy\"\n\t     *      });\n\t     *      client.listen(\"connect\", function () { } );\n\t     *\n\t     *\n\t     * If no `params.token` is given and `developmentMode` is set to true, it will attempt to obtain a token\n\t     * automatically. You must set an `endpointId`.\n\t     *\n\t     *\n\t     * #### App auth session token expiration\n\t     *\n\t     * If `params.reconnect` is set to true (which it is by default for `developmentMode`), the `client`\n\t     * will attempt to keep reconnecting each time the app auth session expires.\n\t     *\n\t     * If not using `developmentMode`, automatic reconnect will be disabled. You will need to\n\t     * listen to the Client's `disconnect` event to fetch a new brokered auth token and call\n\t     * `client.connect()` with the new token.\n\t     *\n\t     *      client.listen('disconnect', function () {\n\t     *\n\t     *          // example method you implemented to get a new token from your server\n\t     *          myServer.getNewRespokeAccessToken(function (newToken) {\n\t     *              // reconnect with respoke.Client\n\t     *              client.connect({ token: newToken });\n\t     *          });\n\t     *\n\t     *      });\n\t     *\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.connect\n\t     * @param {object} params\n\t     * @param {respoke.Client.connectSuccessHandler} [params.onSuccess] - Success handler for this invocation\n\t     * of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n\t     * respoke.connect, respoke.createClient, or to client.connect.\n\t     * @param {string} [params.token] - The endpoint's authentication token.\n\t     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n\t     * @param {respoke.client.resolveEndpointPresence} [params.resolveEndpointPresence] An optional function for\n\t     * resolving presence for an endpoint.  An endpoint can have multiple Connections this function will be used\n\t     * to decide which Connection's presence gets precedence for the Endpoint.\n\t     * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n\t     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t     * operation and will limit the services you will be able to use.\n\t     * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n\t     * when a disconnect occurs.\n\t     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves\n\t     * a group.\n\t     * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is\n\t     * received from anywhere on the system.\n\t     * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n\t     * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n\t     * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n\t     * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client receives a call.\n\t     * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this\n\t     * client receives a request for a direct connection.\n\t     * @returns {Promise|undefined}\n\t     * @fires respoke.Client#connect\n\t     */\n\t    that.connect = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        params = params || {};\n\t        log.debug('Client.connect');\n\t        that.connectTries += 1;\n\n\t        saveParameters(params);\n\n\t        that.endpointId = clientSettings.endpointId;\n\t        promise = actuallyConnect(params);\n\t        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        promise.then(function successHandler() {\n\t            /**\n\t             * This event is fired the first time the library connects to the cloud infrastructure.\n\t             * @event respoke.Client#connect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.fire('connect');\n\n\t            /**\n\t             * This event fires only when the initial `connect` fails.\n\t             *\n\t             * @ignore **This comment is for documentation purposes**, since #error bubbles\n\t             * up from other classes, but it should show on `respoke.Client` docs.\n\t             *\n\t             * @event respoke.Client#error\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t        });\n\t        return retVal;\n\t    };\n\n\t    /**\n\t     * This function contains the meat of the connection, the portions which can be repeated again on reconnect.\n\t     *\n\t     * When `reconnect` is true, this function will be added in an event listener to the Client#disconnect event.\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.actuallyConnect\n\t     * @private\n\t     * @param {object} params\n\t     * @param {connectSuccessHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    function actuallyConnect(params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\n\t        if (!clientSettings.token &&\n\t                (!clientSettings.appId || !clientSettings.endpointId || clientSettings.developmentMode !== true)) {\n\t            deferred.reject(new Error(\"Must pass either endpointID & appId & developmentMode=true, or a token, \" +\n\t                \"to client.connect().\"));\n\t            return deferred.promise;\n\t        }\n\n\t        signalingChannel.open({\n\t            actuallyConnect: actuallyConnect,\n\t            endpointId: that.endpointId,\n\t            token: clientSettings.token\n\t        }).then(function successHandler() {\n\t            return signalingChannel.authenticate();\n\t        }).done(function successHandler() {\n\t            // set initial presence for the connection\n\t            if (clientSettings.presence) {\n\t                that.setPresence({presence: clientSettings.presence});\n\t            }\n\n\t            /*\n\t             * These rely on the EventEmitter checking for duplicate event listeners in order for these\n\t             * not to be duplicated on reconnect.\n\t             */\n\n\t            /**\n\t             * This event provides notification for when an incoming call is being received.  If the user wishes\n\t             * to allow the call, `evt.call.answer()`.\n\t             * @event respoke.Client#call\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Call} call\n\t             * @property {respoke.Endpoint} endpoint\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.listen('call', clientSettings.onCall);\n\t            /**\n\t             * This event is fired when the local end of the directConnection is available. It still will not be\n\t             * ready to send and receive messages until the 'open' event fires.\n\t             * @event respoke.Client#direct-connection\n\t             * @type {respoke.Event}\n\t             * @property {respoke.DirectConnection} directConnection\n\t             * @property {respoke.Endpoint} endpoint\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.listen('direct-connection', clientSettings.onDirectConnection);\n\t            that.listen('join', clientSettings.onJoin);\n\t            /**\n\t             * This event is fired every time the client leaves a group.\n\t             * @event respoke.Client#leave\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Group} group\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.listen('leave', clientSettings.onLeave);\n\t            /**\n\t             * A generic message handler when a message was received by the client.\n\t             *\n\t             * @event respoke.Client#message\n\t             * @type {respoke.Event}\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Endpoint} endpoint - If the message was private, this is the Endpoint who sent it.\n\t             * @property {respoke.Group} group - If the message was to a group, this is the group.\n\t             * @property {respoke.TextMessage} message - The generic message object.\n\t             * @property {string} message.connectionId\n\t             * @property {string} message.endpointId\n\t             * @property {string} message.message - Message body text.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.listen('message', clientSettings.onMessage);\n\t            that.listen('connect', clientSettings.onConnect);\n\t            /**\n\t             * Client has disconnected from Respoke.\n\t             *\n\t             * @event respoke.Client#disconnect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.listen('disconnect', clientSettings.onDisconnect);\n\t            that.listen('disconnect', function () {\n\t                that.calls.forEach(function (call) {\n\t                    call.hangup({signal: false});\n\t                });\n\t            }, true);\n\t            /**\n\t             * Client has reconnected to Respoke.\n\t             *\n\t             * @event respoke.Client#reconnect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.listen('reconnect', clientSettings.onReconnect);\n\n\t            log.info('logged in as ' + that.endpointId, that);\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t            log.error(err.message, err.stack);\n\t        });\n\n\t        return deferred.promise;\n\t    }\n\n\t    /**\n\t     * Disconnect from the Respoke infrastructure, leave all groups, invalidate the token, and disconnect the websocket.\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.disconnect\n\t     * @returns {Promise|undefined}\n\t     * @param {object} params\n\t     * @param {disconnectSuccessHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @fires respoke.Client#disconnect\n\t     */\n\t    that.disconnect = function (params) {\n\t        // TODO: also call this on socket disconnect\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            deferred.reject(e);\n\t            return retVal;\n\t        }\n\n\t        var leaveGroups = groups.map(function eachGroup(group) {\n\t            group.leave();\n\t        });\n\n\t        Q.all(leaveGroups).fin(function successHandler() {\n\t            return signalingChannel.close();\n\t        }).fin(function finallyHandler() {\n\t            that.presence = 'unavailable';\n\t            endpoints = [];\n\t            groups = [];\n\t            /**\n\t             * This event is fired when the library has disconnected from the cloud infrastructure.\n\t             * @event respoke.Client#disconnect\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.fire('disconnect');\n\t            deferred.resolve();\n\t        }).done();\n\n\t        return retVal;\n\t    };\n\n\t    /**\n\t     * Set the presence for this client.\n\t     *\n\t     * The value of presence can be a string, number, object, or array - in any format -\n\t     * depending on the needs of your application. The only requirement is that\n\t     * `JSON.stringify()` must work (no circular references).\n\t     *\n\t     *      var myPresence = 'At lunch'\n\t     *                      || 4\n\t     *                      || { status: 'Away', message: 'At lunch' }\n\t     *                      || ['Away', 'At lunch'];\n\t     *\n\t     *      client.setPresence({\n\t     *          presence: myPresence,\n\t     *          onSuccess: function (evt) {\n\t     *              // successfully updated my presence\n\t     *          }\n\t     *      });\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.setPresence\n\t     * @param {object} params\n\t     * @param {string|number|object|array} params.presence\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @overrides Presentable.setPresence\n\t     * @return {Promise|undefined}\n\t     */\n\t    that.setPresence = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        params = params || {};\n\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        }\n\n\t        log.info('sending my presence update ' + params.presence);\n\n\t        promise = signalingChannel.sendPresence({\n\t            presence: params.presence\n\t        });\n\n\t        promise.then(function successHandler(p) {\n\t            superClass.setPresence(params);\n\t            clientSettings.presence = params.presence;\n\t        });\n\t        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        return retVal;\n\t    };\n\n\t    /**\n\t     * Get the Call with the endpoint specified.\n\t     *\n\t     *     // hang up on chad\n\t     *     var call = client.getCall({\n\t     *         endpointId: 'chad'\n\t     *     });\n\t     *\n\t     *     if (call) {\n\t     *         call.hangup()\n\t     *     }\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getCall\n\t     * @param {object} params\n\t     * @param {string} [params.id] - Call ID.\n\t     * @param {string} [params.endpointId] - Endpoint ID. Warning: If you pass only the endpointId, this method\n\t     * will just return the first call that matches. If you are placing multiple calls to the same endpoint,\n\t     * pass in the call ID, too.\n\t     * @param {boolean} params.create - whether or not to create a new call if the specified endpointId isn't found\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.getCall = function (params) {\n\t        var call = null;\n\t        var endpoint = null;\n\t        var methods = {\n\t            screenshare: \"startScreenShare\",\n\t            did: \"startPhoneCall\",\n\t            web: \"startCall\",\n\t            sip: \"startSIPCall\"\n\t        };\n\t        var callParams = {};\n\t        params.fromType = params.fromType || \"web\";\n\n\t        that.calls.every(function findCall(one) {\n\t            if (params.id && one.id === params.id) {\n\t                call = one;\n\t                return false;\n\t            }\n\n\t            if (!params.id && params.endpointId && one.remoteEndpoint.id === params.endpointId) {\n\t                call = one;\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\n\t        if (call || params.create !== true) {\n\t            return call;\n\t        }\n\n\t        callParams.id = params.id;\n\t        callParams.caller = false;\n\t        callParams.fromType = \"web\";\n\n\t        switch (params.type) {\n\t            case \"screenshare\":\n\t            case \"web\":\n\t                callParams.toType = \"web\"; // overwrite \"screenshare\"\n\t                callParams.endpointId = params.endpointId;\n\t                break;\n\t            case \"did\":\n\t                callParams.number = params.endpointId;\n\t                callParams.toType = \"did\";\n\t                break;\n\t            case \"sip\":\n\t                callParams.uri = params.endpointId;\n\t                callParams.toType = \"sip\";\n\t                break;\n\t        }\n\n\t        try {\n\t            call = that[methods[params.type]](callParams);\n\t        } catch (e) {\n\t            log.error(\"Couldn't create Call.\", e.message, e.stack);\n\t        }\n\t        return call;\n\t    };\n\n\t    /**\n\t     * Add the call to internal record-keeping.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.addCall\n\t     * @param {object} evt\n\t     * @param {respoke.Call} evt.call\n\t     * @param {respoke.Endpoint} evt.endpoint\n\t     * @private\n\t     */\n\t    function addCall(evt) {\n\t        log.debug('addCall');\n\t        if (!evt.call) {\n\t            throw new Error(\"Can't add call without a call parameter.\");\n\t        }\n\t        if (that.calls.indexOf(evt.call) === -1) {\n\t            that.calls.push(evt.call);\n\t        }\n\n\t        evt.call.listen('hangup', function () {\n\t            removeCall({call: evt.call});\n\t        });\n\t    }\n\n\t    /**\n\t     * Remove the call or direct connection from internal record-keeping.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.removeCall\n\t     * @param {object} evt\n\t     * @param {respoke.Call} evt.target\n\t     * @private\n\t     */\n\t    function removeCall(evt) {\n\t        var match = 0;\n\t        if (!evt.call) {\n\t            throw new Error(\"Can't remove call without a call parameter.\");\n\t        }\n\n\t        // Loop backward since we're modifying the array in place.\n\t        for (var i = that.calls.length - 1; i >= 0; i -= 1) {\n\t            if (that.calls[i].id === evt.call.id) {\n\t                that.calls.splice(i, 1);\n\t                match += 1;\n\t            }\n\t        }\n\n\t        if (match !== 1) {\n\t            log.warn(\"Something went wrong.\", match, \"calls were removed!\");\n\t        }\n\t    }\n\n\t    /**\n\t     * Convenience method for setting presence to `\"available\"`.\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.setOnline\n\t     * @param {object} params\n\t     * @param {string|number|object|Array} [params.presence=available] - The presence to set.\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.setOnline = function (params) {\n\t        var promise;\n\n\t        params = params || {};\n\t        params.presence = params.presence || 'available';\n\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        }\n\n\t        return that.setPresence(params);\n\t    };\n\n\t    /**\n\t     * Convenience method for setting presence to `\"unavailable\"`.\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.setOffline\n\t     * @param {object} params\n\t     * @param {string|number|object|Array} [params.presence=unavailable] - The presence to set.\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.setOffline = function (params) {\n\t        var promise;\n\n\t        params = params || {};\n\t        params.presence = params.presence || 'unavailable';\n\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        }\n\n\t        return that.setPresence(params);\n\t    };\n\n\t    /**\n\t     * Send a message to an endpoint.\n\t     *\n\t     *     client.sendMessage({\n\t     *         endpointId: 'dan',\n\t     *         message: \"Jolly good.\"\n\t     *     });\n\t     *\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.sendMessage\n\t     * @param {object} params\n\t     * @param {string} params.endpointId - The endpoint id of the recipient.\n\t     * @param {string} [params.connectionId] - The optional connection id of the receipient. If not set, message will be\n\t     * broadcast to all connections for this endpoint.\n\t     * @param {string} params.message - a string message.\n\t     * @param {sendHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        var endpoint;\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t            return retVal;\n\t        }\n\t        endpoint = that.getEndpoint({\n\t            skipPresence: true,\n\t            id: params.endpointId\n\t        });\n\t        delete params.endpointId;\n\t        return endpoint.sendMessage(params);\n\t    };\n\n\t    /**\n\t     * Create a new screen sharing call. Screenshares are inherently unidirectional video only. This may change\n\t     * in the future when Chrome adds the ability to obtain screen video and microphone audio at the same time. For\n\t     * now, if you also need audio, place a second audio only call.\n\t     *\n\t     * The endpoint who calls `client.startScreenShare` will be the one whose screen is shared. If you'd like to\n\t     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n\t     * not the sharer, it is recommened that you use `endpoint.sendMessage` to send a control message to the user\n\t     * whose screenshare is being requested so that user's app can call `client.startScreenShare`.\n\t     *\n\t     * NOTE: At this time, screen sharing only works with Chrome, and Chrome requires a Chrome extension to\n\t     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension.\n\t     * Support for additional browsers will be added in the future.\n\t     *\n\t     *     client.startScreenShare({\n\t     *         endpointId: 'tian',\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startScreenShare\n\t     * @param {object} params\n\t     * @param {string} params.endpointId - The id of the endpoint that should be called.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n\t     * and the remote party has received the video.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startScreenShare = function (params) {\n\t        that.verifyConnected();\n\t        var endpoint = that.getEndpoint({\n\t            skipPresence: true,\n\t            id: params.endpointId\n\t        });\n\t        delete params.endpointId;\n\t        return endpoint.startScreenShare(params);\n\t    };\n\n\t    /**\n\t     * Place an audio and/or video call to an endpoint.\n\t     *\n\t     *     // defaults to video when no constraints are supplied\n\t     *     client.startCall({\n\t     *         endpointId: 'erin',\n\t     *         onConnect: function (evt) { },\n\t     *         onLocalMedia: function (evt) { }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startCall\n\t     * @param {object} params\n\t     * @param {string} params.endpointId - The id of the endpoint that should be called.\n\t     * @param {Array<RTCConstraints>} [params.constraints]\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n\t     * with the local audio and/or video attached.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n\t     * with the remote audio and/or video attached.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n\t     * up.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have\n\t     * local video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have\n\t     * remote video attached to it.\n\t     * @return {respoke.Call}\n\t     */\n\t    that.startCall = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        var endpoint;\n\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t            return retVal;\n\t        }\n\n\t        endpoint = that.getEndpoint({\n\t            skipPresence: true,\n\t            id: params.endpointId\n\t        });\n\t        delete params.endpointId;\n\t        return endpoint.startCall(params);\n\t    };\n\n\t    /**\n\t     * Place an audio only call to an endpoint.\n\t     *\n\t     *     client.startAudioCall({\n\t     *         endpointId: 'erin',\n\t     *         onConnect: function (evt) { },\n\t     *         onLocalMedia: function (evt) { }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startAudioCall\n\t     * @param {object} params\n\t     * @param {string} params.endpointId - The id of the endpoint that should be called.\n\t     * @param {string} [params.connectionId]\n\t     * @param {Array<RTCConstraints>} [params.constraints]\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 element\n\t     * with the local audio and/or video attached.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 element\n\t     * with the remote audio and/or video attached.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n\t     * up.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     * @return {respoke.Call}\n\t     */\n\t    that.startAudioCall = function (params) {\n\t        params = params || {};\n\t        params.constraints = respoke.convertConstraints(params.constraints, [{\n\t            video: false,\n\t            audio: true,\n\t            optional: [],\n\t            mandatory: {}\n\t        }]);\n\n\t        return that.startCall(params);\n\t    };\n\n\t    /**\n\t     * Place a video call to an endpoint.\n\t     *\n\t     *     client.startVideoCall({\n\t     *         endpointId: 'erin',\n\t     *         onConnect: function (evt) { },\n\t     *         onLocalMedia: function (evt) { }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startVideoCall\n\t     * @param {object} params\n\t     * @param {string} params.endpointId - The id of the endpoint that should be called.\n\t     * @param {Array<RTCConstraints>} [params.constraints]\n\t     * @param {string} [params.connectionId]\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n\t     * with the local audio and/or video attached.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n\t     * with the remote audio and/or video attached.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n\t     * up.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     * @return {respoke.Call}\n\t     */\n\t    that.startVideoCall = function (params) {\n\t        params = params || {};\n\t        params.constraints = respoke.convertConstraints(params.constraints, [{\n\t            video: true,\n\t            audio: true,\n\t            optional: [],\n\t            mandatory: {}\n\t        }]);\n\n\t        return that.startCall(params);\n\t    };\n\n\t    /**\n\t     * Place an audio call with a phone number.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startPhoneCall\n\t     * @param {object} params\n\t     * @param {string} params.number - The phone number that should be called.\n\t     * @arg {string} params.callerId - The phone number to use as the caller ID for this phone call. This must\n\t     * be a phone number listed in your Respoke account, associated with your app, and allowed by the role\n\t     * that this client is authenticated with. If the role contains a list of numbers and the token does not contain\n\t     * callerId, this field must be used to set caller ID selected from the list of numbers or no caller ID will be set.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n\t     * with the local audio and/or video attached.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n\t     * with the remote audio and/or video attached.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n\t     * up.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @return {respoke.Call}\n\t     */\n\t    that.startPhoneCall = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        var call = null;\n\t        var recipient = {};\n\t        params = params || {};\n\t        params.constraints = [{\n\t            video: false,\n\t            audio: true,\n\t            mandatory: {},\n\t            optional: []\n\t        }];\n\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t            return retVal;\n\t        }\n\n\t        if (typeof params.caller !== 'boolean') {\n\t            params.caller = true;\n\t        }\n\n\t        if (!params.number) {\n\t            log.error(\"Can't start a phone call without a number.\");\n\t            promise = Q.reject(new Error(\"Can't start a phone call without a number.\"));\n\t            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t            return retVal;\n\t        }\n\n\t        recipient.id = params.number;\n\n\t        params.instanceId = instanceId;\n\t        params.remoteEndpoint = recipient;\n\n\t        params.toType = params.toType || 'did';\n\t        params.fromType = params.fromType || 'web';\n\n\t        params.signalOffer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\n\t            signalParams.signalType = 'offer';\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            if (params.callerId) {\n\t                signalParams.callerId = {number: params.callerId};\n\t            }\n\t            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n\t        };\n\t        params.signalAnswer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\n\t            signalParams.signalType = 'answer';\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't answer the call.\", err.message, err.stack);\n\t                signalParams.call.hangup({signal: false});\n\t            });\n\t        };\n\t        params.signalConnected = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.connectionId = signalParams.connectionId;\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send connected.\", err.message, err.stack);\n\t                signalParams.call.hangup();\n\t            });\n\t        };\n\t        params.signalModify = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendModify(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send modify.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalCandidate = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendCandidate(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send candidate.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalHangup = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendHangup(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send hangup.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalReport = function (signalParams) {\n\t            log.debug(\"Sending debug report\", signalParams.report);\n\t            signalingChannel.sendReport(signalParams);\n\t        };\n\n\t        params.signalingChannel = signalingChannel;\n\t        call = respoke.Call(params);\n\t        addCall({call: call});\n\t        return call;\n\t    };\n\n\t    /**\n\t     * Place an audio call to a SIP URI.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startSIPCall\n\t     * @param {object} params\n\t     * @param {string} params.uri - The SIP URI to call.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n\t     * with the local audio and/or video attached.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n\t     * with the remote audio and/or video attached.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n\t     * up.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @return {respoke.Call}\n\t     */\n\t    that.startSIPCall = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        var call = null;\n\t        var recipient = {};\n\t        params = params || {};\n\t        params.constraints = [{\n\t            video: false,\n\t            audio: true,\n\t            mandatory: {},\n\t            optional: []\n\t        }];\n\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t            return retVal;\n\t        }\n\n\t        if (typeof params.caller !== 'boolean') {\n\t            params.caller = true;\n\t        }\n\n\t        if (!params.uri) {\n\t            log.error(\"Can't start a phone call without a SIP URI.\");\n\t            promise = Q.reject(new Error(\"Can't start a phone call without a SIP URI.\"));\n\t            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t            return retVal;\n\t        }\n\n\t        recipient.id = params.uri;\n\n\t        params.instanceId = instanceId;\n\t        params.remoteEndpoint = recipient;\n\n\t        params.toType = params.toType || 'sip';\n\t        params.fromType = params.fromType || 'web';\n\n\t        params.signalOffer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\n\t            signalParams.signalType = 'offer';\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n\t        };\n\t        params.signalAnswer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\n\t            signalParams.signalType = 'answer';\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't answer the call.\", err.message, err.stack);\n\t                signalParams.call.hangup({signal: false});\n\t            });\n\t        };\n\t        params.signalConnected = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.connectionId = signalParams.connectionId;\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send connected.\", err.message, err.stack);\n\t                signalParams.call.hangup();\n\t            });\n\t        };\n\t        params.signalModify = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendModify(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send modify.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalCandidate = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendCandidate(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send candidate.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalHangup = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendHangup(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send hangup.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalReport = function (signalParams) {\n\t            log.debug(\"Sending debug report\", signalParams.report);\n\t            signalingChannel.sendReport(signalParams);\n\t        };\n\n\t        params.signalingChannel = signalingChannel;\n\t        call = respoke.Call(params);\n\t        addCall({call: call});\n\t        return call;\n\t    };\n\n\t    /**\n\t     * Assert that we are connected to the backend infrastructure.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.verifyConnected\n\t     * @throws {Error}\n\t     * @private\n\t     */\n\t    that.verifyConnected = function () {\n\t        if (!signalingChannel.isConnected()) {\n\t            throw new Error(\"Can't complete request when not connected. Please reconnect!\");\n\t        }\n\t    };\n\n\t    /**\n\t     * Check whether this client is connected to the Respoke API.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.isConnected\n\t     * @returns boolean\n\t     */\n\t    that.isConnected = function () {\n\t        return signalingChannel.isConnected();\n\t    };\n\n\t    /**\n\t     * Join a group and begin keeping track of it. If this method is called multiple times synchronously, it will\n\t     * batch requests and only make one API call to Respoke.\n\t     *\n\t     * You can leave the group by calling `group.leave()`;\n\t     *\n\t     * ##### Joining and leaving a group\n\t     *\n\t     *      var group;\n\t     *\n\t     *      client.join({\n\t     *          id: \"book-club\",\n\t     *          onSuccess: function (evt) {\n\t     *              console.log('I joined', evt.group.id);\n\t     *              // \"I joined book-club\"\n\t     *              group = evt.group;\n\t     *              group.sendMessage({\n\t     *                  message: 'sup'\n\t     *              });\n\t     *          }\n\t     *      });\n\t     *\n\t     *      // . . .\n\t     *      // Some time later, leave the group.\n\t     *      // . . .\n\t     *      group.leave({\n\t     *          onSuccess: function (evt) {\n\t     *              console.log('I left', evt.group.id);\n\t     *              // \"I left book-club\"\n\t     *          }\n\t     *      });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.join\n\t     * @param {object} params\n\t     * @param {string} params.id - The name of the group.\n\t     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {respoke.Group.onMessage} [params.onMessage] - Message handler for messages from this group only.\n\t     * @param {respoke.Group.onJoin} [params.onJoin] - Join event listener for endpoints who join this group only.\n\t     * @param {respoke.Group.onLeave} [params.onLeave] - Leave event listener for endpoints who leave\n\t     * this group only.\n\t     * @returns {Promise<respoke.Group>|undefined} The instance of the respoke.Group which the client joined.\n\t     * @fires respoke.Client#join\n\t     */\n\t    that.join = function (params) {\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            deferred.reject(e);\n\t            return retVal;\n\t        }\n\n\t        if (!params.id) {\n\t            deferred.reject(new Error(\"Can't join a group with no group id.\"));\n\t            return retVal;\n\t        }\n\n\t        signalingChannel.joinGroup({\n\t            groupList: [params.id]\n\t        }).done(function successHandler() {\n\t            var group;\n\t            params.signalingChannel = signalingChannel;\n\t            params.instanceId = instanceId;\n\n\t            group = that.getGroup({id: params.id});\n\n\t            if (!group) {\n\t                group = respoke.Group(params);\n\t                that.addGroup(group);\n\t            }\n\n\t            group.listen('join', params.onJoin);\n\t            group.listen('leave', params.onLeave);\n\t            group.listen('message', params.onMessage);\n\n\t            group.addMember({\n\t                connection: that.getConnection({\n\t                    endpointId: that.endpointId,\n\t                    connectionId: that.connectionId\n\t                })\n\t            });\n\n\t            /**\n\t             * This event is fired every time the client joins a group. If the client leaves\n\t             * a group, this event will be fired again on the next time the client joins the group.\n\t             * @event respoke.Client#join\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Group} group\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.fire('join', {\n\t                group: group\n\t            });\n\t            deferred.resolve(group);\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return retVal;\n\t    };\n\n\t    /**\n\t     * Add a Group. This is called when we join a group and need to begin keeping track of it.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.addGroup\n\t     * @param {respoke.Group}\n\t     * @private\n\t     */\n\t    that.addGroup = function (newGroup) {\n\t        if (!newGroup || newGroup.className !== 'respoke.Group') {\n\t            throw new Error(\"Can't add group to internal tracking without a group.\");\n\t        }\n\n\t        newGroup.listen('leave', function leaveHandler(evt) {\n\t            newGroup.removeMember({connectionId: evt.connection.id});\n\t            var endpt = evt.connection.getEndpoint();\n\t            if (!endpt.hasListeners('presence')) {\n\t                checkEndpointForRemoval(endpt);\n\t            }\n\t        }, true);\n\n\t        groups.push(newGroup);\n\t    };\n\n\t    /**\n\t     * Get a list of all the groups the client is currently a member of.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getGroups\n\t     * @returns {Array<respoke.Group>} All of the groups the library is aware of.\n\t     */\n\t    that.getGroups = function () {\n\t        return groups;\n\t    };\n\n\t    /**\n\t     * Find a group by id and return it.\n\t     *\n\t     *     var group = client.getGroup({\n\t     *         id: \"resistance\"\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getGroup\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     * @param {respoke.Group.onJoin} [params.onJoin] - Receive notification that an endpoint has joined this group.\n\t     * @param {respoke.Group.onLeave} [params.onLeave] - Receive notification that an endpoint has left this group.\n\t     * @param {respoke.Group.onMessage} [params.onMessage] - Receive notification that a message has been\n\t     * received to a group.\n\t     * @returns {respoke.Group|undefined} The group whose ID was specified.\n\t     */\n\t    that.getGroup = function (params) {\n\t        var group;\n\t        if (!params || !params.id) {\n\t            throw new Error(\"Can't get a group without group id.\");\n\t        }\n\n\t        groups.every(function eachGroup(grp) {\n\t            if (grp.id === params.id) {\n\t                group = grp;\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\n\t        if (group) {\n\t            group.listen('join', params.onJoin);\n\t            group.listen('leave', params.onLeave);\n\t            group.listen('message', params.onMessage);\n\t        }\n\n\t        return group;\n\t    };\n\n\t    /**\n\t     * Remove an Endpoint. Since an endpoint can be a member of multiple groups, we can't just remove it from\n\t     * our list on respoke.Endpoint#leave. We must see if it's a member of any more groups. If it's not\n\t     * a member of any other groups, we can stop keeping track of it.\n\t     * @todo TODO Need to account for Endpoints not created as part of a group. These do not need to be\n\t     * deleted based on group membership.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.checkEndpointForRemoval\n\t     * @param {object} params\n\t     * @param {string} params.id - The ID of the Endpoint to check for removal.\n\t     * @private\n\t     */\n\t    function checkEndpointForRemoval(params) {\n\t        params = params || {};\n\t        if (!params.id) {\n\t            throw new Error(\"Can't remove endpoint from internal tracking without group id.\");\n\t        }\n\n\t        Q.all(groups.map(function eachGroup(group) {\n\t            return group.getMembers();\n\t        })).done(function successHandler(connectionsByGroup) {\n\t            // connectionsByGroup is a two-dimensional array where the first dimension is a group\n\t            // and the second dimension is a connection.\n\t            var absent = connectionsByGroup.every(function eachConnectionList(connectionList) {\n\t                return connectionList.every(function eachConnection(conn) {\n\t                    return (conn.endpointId !== params.id);\n\t                });\n\t            });\n\t            if (absent) {\n\t                endpoints.every(function eachEndpoint(ept, index) {\n\t                    if (ept.id === params.id) {\n\t                        endpoints.splice(index, 1);\n\t                        return false;\n\t                    }\n\t                    return true;\n\t                });\n\t            }\n\t        });\n\t    }\n\n\t    /**\n\t     * Find an endpoint by id and return the `respoke.Endpoint` object.\n\t     *\n\t     * If it is not already cached locally, will be added to the local cache of tracked endpoints,\n\t     * its presence will be determined, and will be available in `client.getEndpoints()`.\n\t     *\n\t     *     var endpoint = client.getEndpoint({\n\t     *         id: \"dlee\"\n\t     *     });\n\t     *\n\t     * @ignore If the endpoint is not found in the local cache of endpoint objects (see `client.getEndpoints()`),\n\t     * it will be created. This is useful, for example, in the case of dynamic endpoints where groups are\n\t     * not in use. Override dynamic endpoint creation by setting `params.skipCreate = true`.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getEndpoint\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     * @param {respoke.Endpoint.onMessage} [params.onMessage] - Handle messages sent to the logged-in user\n\t     * from this one Endpoint.\n\t     * @param {respoke.Endpoint.onPresence} [params.onPresence] - Handle presence notifications from this one\n\t     * Endpoint.\n\t     * @arg {boolean} [params.skipCreate] - Skip the creation step and return undefined if we don't yet\n\t     * @arg {boolean} [params.skipPresence] - Skip registering for this endpoint's presence.\n\t     * @returns {respoke.Endpoint} The endpoint whose ID was specified.\n\t     */\n\t    that.getEndpoint = function (params) {\n\t        var endpoint;\n\t        if (!params || !params.id) {\n\t            throw new Error(\"Can't get an endpoint without endpoint id.\");\n\t        }\n\n\t        endpoints.every(function eachEndpoint(ept) {\n\t            if (ept.id === params.id) {\n\t                endpoint = ept;\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\n\t        if (!endpoint && params && !params.skipCreate) {\n\t            params.instanceId = instanceId;\n\t            params.signalingChannel = signalingChannel;\n\t            params.resolveEndpointPresence = clientSettings.resolveEndpointPresence;\n\t            params.addCall = addCall;\n\n\t            endpoint = respoke.Endpoint(params);\n\t            endpoints.push(endpoint);\n\t        }\n\n\t        if (!endpoint) {\n\t            return;\n\t        }\n\n\t        if (params.skipPresence !== true) {\n\t            signalingChannel.registerPresence({\n\t                endpointList: [endpoint.id]\n\t            }).done(null, function (err) {\n\t                log.error(\"Couldn't register for presence on\", endpoint.id, err.message);\n\t            });\n\t        }\n\t        endpoint.listen('presence', params.onPresence);\n\t        endpoint.listen('message', params.onMessage);\n\n\t        return endpoint;\n\t    };\n\n\t    /**\n\t     * Find a Connection by id and return it.\n\t     *\n\t     *     var connection = client.getConnection({\n\t     *         id: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\"\n\t     *     });\n\t     *\n\t     * @ignore In most cases, if we don't find it we will create it. This is useful\n\t     * in the case of dynamic endpoints where groups are not in use. Set skipCreate=true\n\t     * to return undefined if the Connection is not already known.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getConnection\n\t     * @param {object} params\n\t     * @param {string} params.connectionId\n\t     * @param {string} [params.endpointId] - An endpointId to use in the creation of this connection.\n\t     * @param {respoke.Endpoint.onMessage} [params.onMessage] - Handle messages sent to the logged-in user\n\t     * from this one Connection.\n\t     * @param {respoke.Endpoint.onPresence} [params.onPresence] - Handle presence notifications from this one\n\t     * Connection.\n\t     * @returns {respoke.Connection} The connection whose ID was specified.\n\t     */\n\t    that.getConnection = function (params) {\n\t        var connection;\n\t        var endpoint;\n\t        var endpointsToSearch = endpoints;\n\n\t        params = params || {};\n\t        if (!params.connectionId) {\n\t            throw new Error(\"Can't get a connection without connection id.\");\n\t        }\n\t        if (!params.endpointId && !params.skipCreate) {\n\t            throw new Error(\"Can't create a connection without endpoint id.\");\n\t        }\n\n\t        if (params.endpointId) {\n\t            endpoint = that.getEndpoint({\n\t                id: params.endpointId,\n\t                skipPresence: true,\n\t                skipCreate: params.skipCreate\n\t            });\n\n\t            endpointsToSearch = [];\n\t            if (endpoint) {\n\t                endpointsToSearch = [endpoint];\n\t            }\n\t        }\n\n\t        endpointsToSearch.every(function eachEndpoint(ept) {\n\t            connection = ept.getConnection(params);\n\t            return !connection;\n\t        });\n\n\t        if (!connection && !params.skipCreate) {\n\t            params.instanceId = instanceId;\n\t            connection = respoke.Connection(params);\n\t            endpoint.connections.push(connection);\n\t        }\n\n\t        return connection;\n\t    };\n\n\t    /**\n\t     * Get the list of **all endpoints** that the library has knowledge of.\n\t     * These are `respoke.Endpoint` objects, not just the endpointIds.\n\t     *\n\t     * The library gains knowledge of an endpoint in two ways:\n\t     * 1. when an endpoint joins a group that the user (currently logged-in endpoint) is a member of (if group presence is enabled)\n\t     * 2. when an endpoint that the user (currently logged-in endpoint) is watching*\n\t     *\n\t     * *If an endpoint that the library does not know about sends a message to the client, you\n\t     * can immediately call the `client.getEndpoint()` method on the sender of the message to enable\n\t     * watching of the sender's endpoint.\n\t     *\n\t     *      client.on('message', function (data) {\n\t     *          if (data.endpoint) {\n\t     *              // start tracking this endpoint.\n\t     *              client.getEndpoint({ id: data.endpoint.id });\n\t     *          }\n\t     *      });\n\t     *\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getEndpoints\n\t     * @returns {Array<respoke.Endpoint>}\n\t     */\n\t    that.getEndpoints = function () {\n\t        return endpoints;\n\t    };\n\n\t    return that;\n\t}; // End respoke.Client\n\n\t/**\n\t * Handle sending successfully.\n\t * @callback respoke.Client.successHandler\n\t */\n\t/**\n\t * Handle joining a group successfully. This callback is called only once when Client.join() is called.\n\t * @callback respoke.Client.joinHandler\n\t * @param {respoke.Group} group\n\t */\n\t/**\n\t * Receive notification that the client has joined a group. This callback is called everytime\n\t * respoke.Client#join is fired.\n\t * @callback respoke.Client.onJoin\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Group} evt.group\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * Receive notification that the client has left a group. This callback is called everytime\n\t * respoke.Client#leave is fired.\n\t * @callback respoke.Client.onLeave\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Group} evt.group\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * Receive notification that a message has been received. This callback is called every time\n\t * respoke.Client#message is fired.\n\t * @callback respoke.Client.onClientMessage\n\t * @param {respoke.Event} evt\n\t * @param {respoke.TextMessage} evt.message\n\t * @param {respoke.Group} [evt.group] - If the message is to a group we already know about,\n\t * this will be set. If null, the developer can use client.join({id: evt.message.header.channel}) to join\n\t * the group. From that point forward, Group#message will fire when a message is received as well. If\n\t * group is undefined instead of null, the message is not a group message at all.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Client} evt.target\n\t */\n\t/**\n\t * Receive notification that the client is receiving a call from a remote party. This callback is called every\n\t * time respoke.Client#call is fired.\n\t * @callback respoke.Client.onCall\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Call} evt.call\n\t * @param {respoke.Endpoint} evt.endpoint\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * Receive notification that the client is receiving a request for a direct connection from a remote party.\n\t * This callback is called every time respoke.Client#direct-connection is fired.\n\t * @callback respoke.Client.onDirectConnection\n\t * @param {respoke.Event} evt\n\t * @param {respoke.DirectConnection} evt.directConnection\n\t * @param {respoke.Endpoint} evt.endpoint\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * Receive notification Respoke has successfully connected to the cloud. This callback is called every time\n\t * respoke.Client#connect is fired.\n\t * @callback respoke.Client.onConnect\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Client} evt.target\n\t */\n\t/**\n\t * Receive notification Respoke has successfully disconnected from the cloud. This callback is called every time\n\t * respoke.Client#disconnect is fired.\n\t * @callback respoke.Client.onDisconnect\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Client} evt.target\n\t */\n\t/**\n\t * Receive notification Respoke has successfully reconnected to the cloud. This callback is called every time\n\t * respoke.Client#reconnect is fired.\n\t * @callback respoke.Client.onReconnect\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Client} evt.target\n\t */\n\t/**\n\t * Handle disconnection to the cloud successfully.\n\t * @callback respoke.Client.disconnectSuccessHandler\n\t */\n\t/**\n\t * Handle an error that resulted from a method call.\n\t * @callback respoke.Client.errorHandler\n\t * @params {Error} err\n\t */\n\t/**\n\t * Handle connection to the cloud successfully.\n\t * @callback respoke.Client.connectSuccessHandler\n\t */\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\n\tvar respoke = __webpack_require__(1);\n\n\t/**\n\t * The purpose of the class is to allow multiple types of entities to expose presence functionality.\n\t *\n\t * Setting the presence on a client is provided via `client.setPresence({ presence: \"At lunch\" })`.\n\t *\n\t * @class respoke.Presentable\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.instanceId\n\t * @param {string} params.id\n\t * @returns {respoke.Presentable}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Presentable\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.Presentable\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Presentable';\n\t    /**\n\t     * Represents the presence status. Typically a string, but other types are supported.\n\t     * Defaults to `'unavailable'`.\n\t     *\n\t     * **Do not modify this directly** - it won't update presence with Respoke. Use `setPresence()`.\n\t     *\n\t     * @memberof! respoke.Presentable\n\t     * @name presence\n\t     * @type {string|number|object|Array}\n\t     * @private\n\t     */\n\t    that.presence = 'unavailable';\n\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name client\n\t     * @type {respoke.Client}\n\t     * @private\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\n\t    /**\n\t     * Set the presence on the object for this session.\n\t     *\n\t     * @memberof! respoke.Presentable\n\t     * @method respoke.Presentable.setPresence\n\t     * @param {object} params\n\t     * @param {string|number|object|Array} [params.presence=available]\n\t     * @param {string} params.connectionId\n\t     * @fires respoke.Presentable#presence\n\t     * @private\n\t     */\n\t    that.setPresence = function (params) {\n\t        var connection;\n\t        params = params || {};\n\t        params.presence = params.presence || 'available';\n\t        params.connectionId = params.connectionId || that.connectionId;\n\n\t        if (that.className === 'respoke.Client' || that.className === 'respoke.Connection') {\n\t            that.presence = params.presence;\n\t            if (that.className === 'respoke.Connection') {\n\t                that.getEndpoint().resolvePresence();\n\t            }\n\t        } else if (that.className === 'respoke.Endpoint') {\n\t            if (!params.connectionId) {\n\t                throw new Error(\"Can't set Endpoint presence without a connectionId.\");\n\t            }\n\n\t            connection = that.getConnection({connectionId: params.connectionId}) || client.getConnection({\n\t                connectionId: params.connectionId,\n\t                skipCreate: false,\n\t                endpointId: that.id\n\t            });\n\n\t            connection.presence = params.presence;\n\t            that.resolvePresence();\n\t        }\n\n\t        /**\n\t         * This event indicates that the presence for this endpoint has been updated.\n\t         * @event respoke.Presentable#presence\n\t         * @type {respoke.Event}\n\t         * @property {string|number|object|Array} presence\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Presentable} target\n\t         */\n\t        that.fire('presence', {\n\t            presence: that.presence\n\t        });\n\t    };\n\n\t    /**\n\t     * Get the presence of a Presentable instance.\n\t     *\n\t     *      var billy = client.getEndpoint({ id: \"billychia\" });\n\t     *      var pres = billy.getPresence();\n\t     *      console.log('Billy is', pres); // \"Billy is available\"\n\t     *\n\t     * @memberof! respoke.Presentable\n\t     * @method respoke.Presentable.getPresence\n\t     * @returns {string|number|object|array} the current presence of this endpoint.\n\t     */\n\t    that.getPresence = function () {\n\t        return that.presence;\n\t    };\n\n\t    return that;\n\t}; // End respoke.Presentable\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\n\tvar respoke = __webpack_require__(1);\n\n\t/**\n\t * A `respoke.Connection` always belongs to an Endpoint.\n\t *\n\t * There is a distinction between Endpoint and Connection because an Endpoint can be authenticated\n\t * from multiple devices, browsers, or browser tabs. Each of these separate authentications is a Connection.\n\t * A Client can choose to interact with connections of the same endpoint in different ways.\n\t *\n\t * @constructor\n\t * @class respoke.Connection\n\t * @augments respoke.Presentable\n\t * @param {object} params\n\t * @param {string} params.id\n\t * @returns {respoke.Connection}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Connection\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.Presentable(params);\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name client\n\t     * @type {respoke.Client}\n\t     * @private\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\n\t    /**\n\t     * The connection id.\n\t     * @memberof! respoke.Connection\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = that.id || that.connectionId;\n\t    if (!that.id) {\n\t        throw new Error(\"Can't make a connection without an id.\");\n\t    }\n\t    delete that.instanceId;\n\t    delete that.connectionId;\n\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.Connection\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Connection';\n\n\t    /**\n\t     * Send a message to this connection of an endpoint. If the endpoint has multiple connections,\n\t     * it will only receive the message at this connection.\n\t     *\n\t     *     connection.sendMessage({\n\t     *         message: \"PJ, put that PBR down!\"\n\t     *     });\n\t     *\n\t     * **Using callbacks** will disable promises.\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.sendMessage\n\t     * @param {object} params\n\t     * @param {string} params.message\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation\n\t     * of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        params = params || {};\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().sendMessage(params);\n\t    };\n\n\t    /**\n\t     * Create a new screen sharing call. Screenshares are inherently unidirectional video only. This may change\n\t     * in the future when Chrome adds the ability to obtain screen video and microphone audio at the same time. For\n\t     * now, if you also need audio, place a second audio only call.\n\t     *\n\t     * The endpoint who calls `connection.startScreenShare` will be the one whose screen is shared. If you'd like to\n\t     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n\t     * not the sharer, it is recommened that you use `endpoint.sendMessage` to send a control message to the user\n\t     * whose screenshare is being requested so that user's app can call `connection.startScreenShare`.\n\t     *\n\t     * NOTE: At this time, screen sharing only works with Chrome, and Chrome requires a Chrome extension to\n\t     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension.\n\t     * Support for additional browsers will be added in the future.\n\t     *\n\t     *     connection.startScreenShare({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startScreenShare\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n\t     * and the remote party has received the video.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startScreenShare = function (params) {\n\t        that.verifyConnected();\n\t        params = params || {};\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().startScreenShare(params);\n\t    };\n\n\t    /**\n\t     * Create a new Call for a voice and/or video call this particular connection, only. The Call cannot be answered\n\t     * by another connection of this Endpoint.\n\t     *\n\t     *     connection.startCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {RTCConstraints} [params.constraints]\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote video attached to it.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startCall = function (params) {\n\t        params = params || {};\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().startCall(params);\n\t    };\n\n\t    /**\n\t     * Create a new audio-only call.\n\t     *\n\t     *     connection.startAudioCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startAudioCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startAudioCall = function (params) {\n\t        params = params || {};\n\t        params.connectionId = that.id;\n\t        params.constraints = respoke.convertConstraints(params.constraints, [{\n\t            video: false,\n\t            audio: true,\n\t            optional: [],\n\t            mandatory: {}\n\t        }]);\n\t        return that.startCall(params);\n\t    };\n\n\t    /**\n\t     * Create a new call with audio and video.\n\t     *\n\t     *     connection.startVideoCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startVideoCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has\n\t     * been hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startVideoCall = function (params) {\n\t        params = params || {};\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().startCall(params);\n\t    };\n\n\t    /**\n\t     * Create a new DirectConnection with this particular connection, only. The DirectConnection cannot be answered\n\t     * by another connection of this Endpoint.  This method creates a new Call as well, attaching this\n\t     * DirectConnection to it for the purposes of creating a peer-to-peer link for sending data such as messages to\n\t     * the other endpoint. Information sent through a DirectConnection is not handled by the cloud infrastructure.\n\t     *\n\t     *     connection.startDirectConnection({\n\t     *         onOpen: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startDirectConnection\n\t     * @param {object} params\n\t     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess] - Success handler for this\n\t     * invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {respoke.DirectConnection.onStart} [params.onStart] - A callback for when setup of the direct\n\t     * connection begins. The direct connection will not be open yet.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - A callback for receiving notification of when\n\t     * the DirectConnection is open and ready to be used.\n\t     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n\t     * connection.\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - A callback for receiving notification of\n\t     * when the DirectConnection is closed and the two Endpoints are disconnected.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - A callback for receiving messages sent\n\t     * through the DirectConnection.\n\t     * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the\n\t     * request for a direct connection and setup begins.\n\t     * @returns {respoke.DirectConnection} The DirectConnection which can be used to send data and messages\n\t     * directly to the other endpoint.\n\t     */\n\t    that.startDirectConnection = function (params) {\n\t        params = params || {};\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().startDirectConnection(params);\n\t    };\n\n\t    /**\n\t     * Get the Endpoint that this Connection belongs to.\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.getEndpoint\n\t     * @returns {respoke.Endpoint}\n\t     */\n\t    that.getEndpoint = function () {\n\t        return client.getEndpoint({\n\t            id: that.endpointId,\n\t            skipPresence: true\n\t        });\n\t    };\n\n\t    return that;\n\t}; // End respoke.Connection\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t */\n\n\tvar log = __webpack_require__(18);\n\tvar Q = __webpack_require__(19);\n\tvar respoke = __webpack_require__(1);\n\n\t/**\n\t * `respoke.Endpoint`s are users of a Respoke app.\n\t * An Endpoint can be a person in a browser or device, or an app using Respoke APIs from a server.\n\t * A Client can interact with endpoints through messages, audio or video calls, or direct connections.\n\t * An Endpoint may be authenticated from multiple devices to the same app (each of which is\n\t * represented by a Connection).\n\t *\n\t * ```\n\t * var jim = client.getEndpoint({ id: 'jim' });\n\t * ```\n\t *\n\t * @constructor\n\t * @class respoke.Endpoint\n\t * @augments respoke.Presentable\n\t * @param {object} params\n\t * @param {string} params.id\n\t * @param {string} params.instanceId\n\t * @param {respoke.client.resolvePresence} [params.resolvePresence] An optional function for resolving presence\n\t * for an endpoint.\n\t * @returns {respoke.Endpoint}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Endpoint\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.Presentable(params);\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name client\n\t     * @type {respoke.Client}\n\t     * @private\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name signalingChannel\n\t     * @type {respoke.SignalingChannel}\n\t     * @private\n\t     */\n\t    var signalingChannel = params.signalingChannel;\n\n\t    var addCall = params.addCall;\n\n\t    delete that.signalingChannel;\n\t    delete that.instanceId;\n\t    delete that.connectionId;\n\t    delete that.addCall;\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.Endpoint\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Endpoint';\n\t    /**\n\t     * A direct connection to this endpoint. This can be used to send direct messages.\n\t     * @memberof! respoke.Endpoint\n\t     * @name directConnection\n\t     * @type {respoke.DirectConnection}\n\t     */\n\t    that.directConnection = null;\n\n\t    /**\n\t     * Array of connections for this endpoint.\n\t     * @memberof! respoke.Endpoint\n\t     * @name connections\n\t     * @type {Array<respoke.Connection>}\n\t     */\n\t    that.connections = [];\n\t    client.listen('disconnect', function disconnectHandler() {\n\t        that.connections = [];\n\t    });\n\n\t    var resolveEndpointPresence = params.resolveEndpointPresence;\n\t    delete that.resolveEndpointPresence;\n\n\t    /**\n\t     * Send a message to the endpoint through the infrastructure.\n\t     * \n\t     * ```\n\t     * endpoint.sendMessage({\n\t     *     message: \"wassuuuuup\"\n\t     * });\n\t     * ```\n\t     *\n\t     * **Using callbacks** will disable promises.\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.sendMessage\n\t     * @param {object} params\n\t     * @param {string} params.message\n\t     * @param {string} [params.connectionId]\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of this\n\t     * method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this method\n\t     * only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        params = params || {};\n\n\t        promise = signalingChannel.sendMessage({\n\t            connectionId: params.connectionId,\n\t            message: params.message,\n\t            recipient: that\n\t        });\n\n\t        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        return retVal;\n\t    };\n\n\t    /**\n\t     * Create a new audio-only call.\n\t     *\n\t     *     endpoint.startAudioCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startAudioCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startAudioCall = function (params) {\n\t        params = params || {};\n\n\t        params.constraints = respoke.convertConstraints(params.constraints, [{\n\t            video: false,\n\t            audio: true,\n\t            optional: [],\n\t            mandatory: {}\n\t        }]);\n\n\t        return that.startCall(params);\n\t    };\n\n\t    /**\n\t     * Create a new call with audio and video.\n\t     *\n\t     *     endpoint.startVideoCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startVideoCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startVideoCall = function (params) {\n\t        params = params || {};\n\n\t        params.constraints = respoke.convertConstraints(params.constraints, [{\n\t            video: true,\n\t            audio: true,\n\t            optional: [],\n\t            mandatory: {}\n\t        }]);\n\n\t        return that.startCall(params);\n\t    };\n\n\t    /**\n\t     * Create a new screen sharing call. Screenshares are inherently unidirectional video only. This may change\n\t     * in the future when Chrome adds the ability to obtain screen video and microphone audio at the same time. For\n\t     * now, if you also need audio, place a second audio only call.\n\t     *\n\t     * The endpoint who calls `endpoint.startScreenShare` will be the one whose screen is shared. If you'd like to\n\t     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n\t     * not the sharer, it is recommened that you use `endpoint.sendMessage` to send a control message to the user\n\t     * whose screenshare is being requested so that user's app can call `endpoint.startScreenShare`.\n\t     *\n\t     * NOTE: At this time, screen sharing only works with Chrome, and Chrome requires a Chrome extension to\n\t     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension.\n\t     * Support for additional browsers will be added in the future.\n\t     *\n\t     *     endpoint.startScreenShare({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startScreenShare\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n\t     * and the remote party has received the video.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startScreenShare = function (params) {\n\t        var screenConstraint;\n\t        params = params || {};\n\t        if (typeof params.caller !== 'boolean') {\n\t            params.caller = true;\n\t        }\n\t        params.target = \"screenshare\";\n\t        params.constraints = respoke.convertConstraints(params.constraints, [{\n\t            audio: true,\n\t            video: {},\n\t            mandatory: {},\n\t            optional: []\n\t        }]);\n\t        screenConstraint = params.constraints[0];\n\n\t        if (params.caller) {\n\t            if (respoke.needsChromeExtension || respoke.isNwjs) {\n\t                screenConstraint.video = typeof screenConstraint.video === 'object' ? screenConstraint.video : {};\n\t                screenConstraint.video.optional = screenConstraint.video.optional || [];\n\t                screenConstraint.video.mandatory = typeof screenConstraint.video.mandatory === 'object' ?\n\t                    screenConstraint.video.mandatory : {};\n\t                screenConstraint.video.mandatory.chromeMediaSource = 'desktop';\n\t                screenConstraint.video.mandatory.maxWidth =\n\t                    typeof screenConstraint.video.mandatory.maxWidth === 'number' ?\n\t                    screenConstraint.video.mandatory.maxWidth : 2000;\n\t                screenConstraint.video.mandatory.maxHeight =\n\t                    typeof screenConstraint.video.mandatory.maxHeight === 'number' ?\n\t                    screenConstraint.video.mandatory.maxHeight : 2000;\n\t                screenConstraint.audio = false;\n\n\t                if (respoke.isNwjs) {\n\t                    screenConstraint.video.mandatory.chromeMediaSource = 'screen';\n\t                } else {\n\t                    params.sendOnly = true;\n\t                    if (typeof screenConstraint.video.optional === 'object' &&\n\t                            screenConstraint.video.optional.length !== undefined) {\n\t                        if (screenConstraint.length > 0) {\n\t                            screenConstraint.forEach(function (thing) {\n\t                                thing.googTemporalLayeredScreencast = true;\n\t                            });\n\t                        } else {\n\t                            screenConstraint.video.optional[0] = {\n\t                                googTemporalLayeredScreencast: true\n\t                            };\n\t                        }\n\t                    }\n\t                }\n\t            } else {\n\t                screenConstraint.video = {\n\t                    mediaSource: params.source || \"window\"\n\t                };\n\t            }\n\t        } else {\n\t            screenConstraint.video = false;\n\n\t            if (respoke.needsChromeExtension || respoke.isNwjs) {\n\t                params.receiveOnly = true;\n\t                screenConstraint.audio = false;\n\t            } else {\n\t                screenConstraint.audio = true;\n\t            }\n\t        }\n\t        return that.startCall(params);\n\t    };\n\n\t    /**\n\t     * Create a new call.\n\t     *\n\t     *     endpoint.startCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {Array<RTCConstraints>} [params.constraints]\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startCall = function (params) {\n\t        var call = null;\n\t        params = params || {};\n\n\t        params.constraints = respoke.convertConstraints(params.constraints, [{\n\t            video: true,\n\t            audio: true,\n\t            mandatory: {},\n\t            optional: []\n\t        }]);\n\n\t        // If they are requesting a screen share by constraints without having called startScreenShare\n\t        if (params.target !== 'screenshare' && params.constraints[0] &&\n\t                respoke.constraintsHasScreenShare(params.constraints[0])) {\n\t            return that.startScreenShare(params);\n\t        }\n\n\t        params.target = params.target || \"call\";\n\n\t        log.debug('Endpoint.call', params);\n\t        client.verifyConnected();\n\t        if (typeof params.caller !== 'boolean') {\n\t            params.caller = true;\n\t        }\n\n\t        if (!that.id) {\n\t            log.error(\"Can't start a call without endpoint ID!\");\n\t            return;\n\t        }\n\n\t        params.instanceId = instanceId;\n\t        params.remoteEndpoint = that;\n\n\t        params.signalOffer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\n\t            signalParams.signalType = 'offer';\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = that;\n\n\t            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n\t        };\n\t        params.signalAnswer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\n\t            signalParams.signalType = 'answer';\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = that;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n\t                signalParams.call.hangup({signal: false});\n\t            });\n\t        };\n\t        params.signalConnected = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.connectionId = signalParams.call.connectionId;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalParams.recipient = that;\n\t            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n\t                signalParams.call.hangup();\n\t            });\n\t        };\n\t        params.signalModify = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = that;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalingChannel.sendModify(signalParams).done();\n\t        };\n\t        params.signalCandidate = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = that;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalingChannel.sendCandidate(signalParams).done();\n\t        };\n\t        params.signalHangup = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = that;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalingChannel.sendHangup(signalParams).done();\n\t        };\n\t        params.signalReport = function (signalParams) {\n\t            log.debug(\"Sending debug report\", signalParams.report);\n\t            signalingChannel.sendReport(signalParams).done();\n\t        };\n\n\t        params.signalingChannel = signalingChannel;\n\t        call = respoke.Call(params);\n\t        addCall({call: call});\n\t        return call;\n\t    };\n\n\t    /**\n\t     * Create a new DirectConnection.  This method creates a new Call as well, attaching this DirectConnection to\n\t     * it for the purposes of creating a peer-to-peer link for sending data such as messages to the other endpoint.\n\t     * Information sent through a DirectConnection is not handled by the cloud infrastructure.  If there is already\n\t     * a direct connection open, this method will resolve the promise with that direct connection instead of\n\t     * attempting to create a new one.\n\t     *\n\t     *     endpoint.startDirectConnection({\n\t     *         onOpen: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startDirectConnection\n\t     * @param {object} params\n\t     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess] - Success handler for this\n\t     * invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {respoke.DirectConnection.onStart} [params.onStart] - A callback for when setup of the direct\n\t     * connection begins. The direct connection will not be open yet.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - A callback for receiving notification of when\n\t     * the DirectConnection is open and ready to be used.\n\t     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n\t     * connection.\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - A callback for receiving notification of\n\t     * when the DirectConnection is closed and the two Endpoints are disconnected.\n\t     * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the\n\t     * request for a direct connection and setup begins.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - A callback for receiving messages sent\n\t     * through the DirectConnection.\n\t     * @param {string} [params.connectionId] - An optional connection ID to use for this connection. This allows\n\t     * the connection to be made to a specific instance of an endpoint in the case that the same endpoint is logged\n\t     * in from multiple locations.\n\t     * @returns {respoke.DirectConnection} The DirectConnection which can be used to send data and messages\n\t     * directly to the other endpoint.\n\t     */\n\t    that.startDirectConnection = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t        var call;\n\n\t        try {\n\t            client.verifyConnected();\n\t        } catch (err) {\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\n\t        if (that.directConnection || params.create === false) {\n\t            deferred.resolve(that.directConnection);\n\t            return retVal;\n\t        }\n\n\t        if (typeof params.caller !== 'boolean') {\n\t            params.caller = true;\n\t        }\n\n\t        if (!that.id) {\n\t            deferred.reject(new Error(\"Can't start a direct connection without endpoint ID!\"));\n\t            return retVal;\n\t        }\n\n\t        params.instanceId = instanceId;\n\t        params.remoteEndpoint = that;\n\n\t        params.signalOffer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\n\t            signalParams.signalType = 'offer';\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\n\t            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n\t        };\n\t        params.signalConnected = function (signalParams) {\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n\t                signalParams.call.hangup();\n\t            });\n\t        };\n\t        params.signalAnswer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t            signalParams.signalType = 'answer';\n\t            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n\t                signalParams.call.hangup({signal: false});\n\t            });\n\t        };\n\t        params.signalCandidate = function (signalParams) {\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t            signalingChannel.sendCandidate(signalParams).done();\n\t        };\n\t        params.signalHangup = function (signalParams) {\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t            signalingChannel.sendHangup(signalParams).done();\n\t        };\n\t        params.signalReport = function (signalParams) {\n\t            signalParams.report.target = 'directConnection';\n\t            log.debug(\"Not sending report\");\n\t            log.debug(signalParams.report);\n\t        };\n\t        params.needDirectConnection = true;\n\t        // Don't include audio in the offer SDP\n\t        params.offerOptions = {\n\t            mandatory: {\n\t                OfferToReceiveAudio: false\n\t            }\n\t        };\n\n\t        params.signalingChannel = signalingChannel;\n\t        call = respoke.Call(params);\n\t        addCall({call: call});\n\t        call.listen('direct-connection', function directConnectionHandler(evt) {\n\t            that.directConnection = evt.directConnection;\n\t            if (params.caller !== true) {\n\t                if (!client.hasListeners('direct-connection') &&\n\t                        !client.hasListeners('direct-connection') &&\n\t                        !call.hasListeners('direct-connection')) {\n\t                    that.directConnection.reject();\n\t                    deferred.reject(new Error(\"Got an incoming direct connection with no handlers to accept it!\"));\n\t                    return;\n\t                }\n\n\t                deferred.resolve(that.directConnection);\n\t                that.directConnection.listen('close', function closeHandler(evt) {\n\t                    that.directConnection = undefined;\n\t                }, true);\n\t            }\n\t        }, true);\n\n\t        return retVal;\n\t    };\n\n\t    /**\n\t     * Find the presence out of all known connections with the highest priority (most availability)\n\t     * and set it as the endpoint's resolved presence.\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.resolvePresence\n\t     * @private\n\t     */\n\t    that.resolvePresence = function () {\n\n\t        var presenceList = that.connections.map(function (connection) {\n\t            return connection.presence;\n\t        });\n\n\t        if (resolveEndpointPresence !== undefined) {\n\t            that.presence = resolveEndpointPresence(presenceList);\n\t        } else {\n\t            var options = ['chat', 'available', 'away', 'dnd', 'xa', 'unavailable'];\n\t            var idList;\n\n\t            /*\n\t             * Sort the connections array by the priority of the value of the presence of that\n\t             * connectionId. This will cause the first element in the list to be the id of the\n\t             * session with the highest priority presence so we can access it by the 0 index.\n\t             * TODO: If we don't really care about the sorting and only about the highest priority\n\t             * we could use Array.prototype.every to improve this algorithm.\n\t             */\n\t            idList = that.connections.sort(function sorter(a, b) {\n\t                var indexA = options.indexOf(a.presence);\n\t                var indexB = options.indexOf(b.presence);\n\t                // Move it to the end of the list if it isn't one of our accepted presence values\n\t                indexA = indexA === -1 ? 1000 : indexA;\n\t                indexB = indexB === -1 ? 1000 : indexB;\n\t                return indexA < indexB ? -1 : (indexB < indexA ? 1 : 0);\n\t            });\n\n\t            if (idList[0]) {\n\t                that.presence = idList[0].presence;\n\t            } else {\n\t                that.presence = 'unavailable';\n\t            }\n\t        }\n\t    };\n\n\t    /**\n\t     * Get the Connection with the specified id. The connection ID is optional if only one connection exists.\n\t     *\n\t     *     var connection = endpoint.getConnection({\n\t     *         connectionId: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\"\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.getConnection\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} [params.connectionId]\n\t     * @return {respoke.Connection}\n\t     */\n\t    that.getConnection = function (params) {\n\t        var connection = null;\n\t        params = params || {};\n\t        if (that.connections.length === 1 &&\n\t                (!params.connectionId || that.connections[0] === params.connectionId)) {\n\t            return that.connections[0];\n\t        }\n\n\t        if (!params || !params.connectionId) {\n\t            throw new Error(\"Can't find a connection without the connectionId.\");\n\t        }\n\n\t        that.connections.every(function eachConnection(conn) {\n\t            if (conn.id === params.connectionId) {\n\t                connection = conn;\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\n\t        return connection;\n\t    };\n\n\t    return that;\n\t}; // End respoke.Endpoint\n\t/**\n\t * Handle messages sent to the logged-in user from this one Endpoint.  This callback is called every time\n\t * respoke.Endpoint#message fires.\n\t * @callback respoke.Endpoint.onMessage\n\t * @param {respoke.Event} evt\n\t * @param {respoke.TextMessage} evt.message - the message\n\t * @param {respoke.Endpoint} evt.target\n\t * @param {string} evt.name - the event name\n\t */\n\t/**\n\t * Handle presence notifications from this one Endpoint.  This callback is called every time\n\t * respoke.Endpoint#message fires.\n\t * @callback respoke.Endpoint.onPresence\n\t * @param {respoke.Event} evt\n\t * @param {string|number|object|Array} evt.presence - the Endpoint's presence\n\t * @param {respoke.Endpoint} evt.target\n\t * @param {string} evt.name - the event name\n\t */\n\t /**\n\t * Handle resolving presence for this endpoint\n\t * @callback respoke.Client.resolveEndpointPresence\n\t * @param {Array<object>} connectionPresence\n\t * @returns {object|string|number}\n\t */\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\n\t/**\n\t * A text message and the information needed to route it.\n\t * @class respoke.TextMessage\n\t * @constructor\n\t * @param {object} params\n\t * @param {string} [params.endpointId] - If sending, endpoint ID of the thing we're sending a message to.\n\t * @param {string} [params.connectionId] - If sending, connection ID of the thing we're sending a message to.\n\t * @param {string} [params.message] - If sending, a message to send\n\t * @param {object} [params.rawMessage] - If receiving, the parsed JSON we got from the server\n\t * @private\n\t * @returns {respoke.TextMessage}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = {};\n\n\t    /**\n\t     * Parse rawMessage and set attributes required for message delivery.\n\t     * @memberof! respoke.TextMessage\n\t     * @method respoke.TextMessage.parse\n\t     * @private\n\t     */\n\t    function parse() {\n\t        if (params.rawMessage) {\n\t            try {\n\t                that.endpointId = params.rawMessage.header.from;\n\t                that.connectionId = params.rawMessage.header.fromConnection;\n\t                that.timestamp = params.rawMessage.header.timestamp;\n\t            } catch (e) {\n\t                throw new Error(e);\n\t            }\n\t            that.message = params.rawMessage.message || params.rawMessage.body;\n\t            if (params.rawMessage.header.channel) {\n\t                that.recipient = params.rawMessage.header.channel;\n\t            }\n\t        } else {\n\t            try {\n\t                that.to = params.endpointId;\n\t                that.toConnection = params.connectionId;\n\t                that.requestConnectionReply = (params.requestConnectionReply === true);\n\t            } catch (e) {\n\t                throw new Error(e);\n\t            }\n\t            that.message = params.message;\n\t        }\n\t    }\n\n\t    parse();\n\t    return that;\n\t}; // End respoke.TextMessage\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\n\t/**\n\t * A signaling message and the information needed to route it.\n\t * @class respoke.SignalingMessage\n\t * @constructor\n\t * @param {object} params\n\t * @param {string} [params.fromEndpoint] - If sending, the endpoint ID of the recipient\n\t * @param {string} [params.fromConnection] - If sending, the connection ID of the recipient\n\t * @param {string} [params.connectionId] - The connectionId of the endpoint whose answer signal has been accepted.\n\t * @param {string} [params.signal] - If sending, a message to send\n\t * @param {respoke.Endpoint} [params.recipient]\n\t * @param {string} [params.signalType]\n\t * @param {string} [params.sessionId] - A globally unique ID to identify this call.\n\t * @param {string} [params.target] - Either 'call' or 'directConnection', TODO remove the need for this.\n\t * @param {string} [params.callerId] - Human readable caller ID. Not implemented.\n\t * @param {RTCSessionDescription} [params.sdp]\n\t * @param {Array<RTCIceCandidate>} [params.iceCandidates]\n\t * @param {object} [params.offering] - Object describing the media we're offering to send the remote party in a more\n\t * usable way than SDP. Not implemented.\n\t * @param {object} [params.requesting] - Object describing the media we're requesting from the remote party in a more\n\t * usable way than SDP. Not implemented.\n\t * @param {string} [params.reason] - Human readable reason for hanging up.\n\t * @param {string} [params.error] - String indicating that a previous signal was malformed or received in the wrong\n\t * state. Not implemented.\n\t * @param {string} [params.status] - \"Ringing\". Not implemented.\n\t * @param {object} [params.rawMessage] - If receiving, the parsed JSON we got from the server\n\t * @private\n\t * @returns {respoke.SignalingMessage}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = {};\n\t    /**\n\t     * Attributes without which we cannot build a signaling message.\n\t     * @memberof! respoke.SignalingMessage\n\t     * @name required\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var required = ['recipient', 'signalType', 'sessionId', 'target', 'signalId'];\n\t    /**\n\t     * Attributes which we will copy onto the signal if defined.\n\t     * @memberof! respoke.SignalingMessage\n\t     * @name required\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var allowed = [\n\t        'signalType', 'sessionId', 'sessionDescription', 'iceCandidates', 'offering', 'target', 'signalId', 'callerId',\n\t        'requesting', 'reason', 'error', 'status', 'connectionId', 'version'\n\t    ];\n\n\t    params.version = '1.0';\n\n\t    /**\n\t     * Parse rawMessage and set attributes required for message delivery.\n\t     * @memberof! respoke.SignalingMessage\n\t     * @method respoke.SignalingMessage.parse\n\t     * @private\n\t     */\n\t    function parse() {\n\t        if (params.rawMessage) {\n\t            try {\n\t                that = JSON.parse(params.rawMessage.body); // Incoming message\n\t            } catch (e) {\n\t                that = params.rawMessage.body;\n\t            }\n\t            that.fromType = params.rawMessage.header.fromType;\n\t            that.fromEndpoint = params.rawMessage.header.from;\n\t            that.fromConnection = params.rawMessage.header.fromConnection;\n\t            that.timestamp = params.rawMessage.header.timestamp;\n\n\t            if (!that.target) {\n\t                that.target = 'call';\n\t            }\n\t        } else {\n\t            required.forEach(function eachAttr(attr) {\n\t                if (params[attr] === 0 || !params[attr]) {\n\t                    throw new Error(\"Can't build a signaling without \" + attr);\n\t                }\n\t            });\n\n\t            allowed.forEach(function eachAttr(attr) {\n\t                if (params[attr] === 0 || params[attr]) {\n\t                    that[attr] = params[attr];\n\t                }\n\t            });\n\t        }\n\t    }\n\n\t    parse();\n\t    return that;\n\t}; // End respoke.SignalingMessage\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\n\tvar Q = __webpack_require__(19);\n\tvar respoke = __webpack_require__(1);\n\n\t/**\n\t * A `respoke.Group` represents a collection of endpoints.\n\t *\n\t * There are methods to communicate with the endpoints at the group level and track\n\t * their presence in the group.\n\t *\n\t * @class respoke.Group\n\t * @augments respoke.EventEmitter\n\t * @constructor\n\t * @param {object} params\n\t * @param {string} params.instanceId\n\t * @param {respoke.Group.onJoin} params.onJoin - A callback to receive notifications every time a new\n\t * endpoint has joined the group. This callback does not get called when the client joins the group.\n\t * @param {respoke.Group.onMessage} params.onMessage - A callback to receive messages sent to the group from\n\t * remote endpoints.\n\t * @param {respoke.Group.onLeave} params.onLeave - A callback to receive notifications every time a new\n\t * endpoint has left the group. This callback does not get called when the client leaves the group.\n\t * @returns {respoke.Group}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\n\t    var that = respoke.EventEmitter(params);\n\t    /**\n\t     * @memberof! respoke.Group\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var client = respoke.getClient(instanceId);\n\n\t    if (!that.id) {\n\t        throw new Error(\"Can't create a group without an ID.\");\n\t    }\n\n\t    /**\n\t     * Internal reference to the api signaling channel.\n\t     * @memberof! respoke.Group\n\t     * @name signalingChannel\n\t     * @type respoke.SignalingChannel\n\t     * @private\n\t     */\n\t    var signalingChannel = params.signalingChannel;\n\t    delete params.signalingChannel;\n\n\t    /**\n\t     * The connections to members of this group.\n\t     * @memberof! respoke.Group\n\t     * @name endpoints\n\t     * @type {array<respoke.Connection>}\n\t     */\n\t    that.connections = [];\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.Group\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Group';\n\t    that.listen('join', params.onJoin);\n\t    /**\n\t     * Indicates that a message has been sent to this group.\n\t     * @event respoke.Group#message\n\t     * @type {respoke.Event}\n\t     * @property {respoke.TextMessage} message\n\t     * @property {string} name - The event name.\n\t     * @property {respoke.Group} target\n\t     */\n\t    that.listen('message', params.onMessage);\n\t    that.listen('leave', params.onLeave);\n\t    client.listen('disconnect', function disconnectHandler() {\n\t        that.connections = [];\n\t    });\n\n\t    delete that.instanceId;\n\t    delete that.onMessage;\n\t    delete that.onPresence;\n\t    delete that.onJoin;\n\t    delete that.onLeave;\n\n\t    /**\n\t     * Join this group.\n\t     *\n\t     *     group.join().done(function () {\n\t     *         group.sendMessage({\n\t     *             message: \"Hey, ppl! I'm here!\"\n\t     *         });\n\t     *     }, function (err) {\n\t     *         // Couldn't join the group, possibly permissions error\n\t     *     });\n\t     *\n\t     * **Using callbacks** will disable promises.\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.join\n\t     * @return {Promise|undefined}\n\t     * @param {object} params\n\t     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @fires respoke.Client#join\n\t     */\n\t    that.join = function () {\n\t        var params = {\n\t            id: that.id\n\t        };\n\t        var promise;\n\t        var deferred;\n\t        var retVal;\n\n\t        try {\n\t            validateConnection();\n\t        } catch (err) {\n\t            deferred = Q.defer();\n\t            retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\n\t        promise = client.join(params);\n\t        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        return retVal;\n\t    };\n\n\t    /**\n\t     * Leave this group. If this method is called multiple times synchronously, it will batch requests and\n\t     * only make one API call to Respoke.\n\t     *\n\t     *     group.leave({\n\t     *         onSuccess: function () {\n\t     *             // good riddance\n\t     *         },\n\t     *         onError: function (err) {\n\t     *             // Couldn't leave the group, possibly a permissions error\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.leave\n\t     * @param {object} params\n\t     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @return {Promise|undefined}\n\t     * @fires respoke.Client#leave\n\t     */\n\t    that.leave = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n\t        try {\n\t            validateConnection();\n\t            validateMembership();\n\t        } catch (err) {\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\n\t        signalingChannel.leaveGroup({\n\t            groupList: [that.id]\n\t        }).done(function successHandler() {\n\t            that.connections = [];\n\t            deferred.resolve();\n\n\t            /**\n\t             * This event is fired when the client leaves a group.\n\t             * @event respoke.Client#leave\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Group} group\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             * @private\n\t             */\n\t            client.fire('leave', {\n\t                group: that\n\t            });\n\t        }, function errorHandler(err) {\n\t            deferred.reject();\n\t        });\n\t        return retVal;\n\t    };\n\n\t    /**\n\t     * Remove a Connection from a Group. This does not change the status of the remote Endpoint, it only changes the\n\t     * internal representation of the Group membership. This method should only be used internally.\n\t     * @private\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.removeMember\n\t     * @param {object} params\n\t     * @param {string} [params.connectionId] - Endpoint's connection id\n\t     * @fires respoke.Group#leave\n\t     */\n\t    that.removeMember = function (params) {\n\t        params = params || {};\n\n\t        try {\n\t            validateConnection();\n\t            validateMembership();\n\t        } catch (err) {\n\t            return;\n\t        }\n\n\t        if (!params.connectionId) {\n\t            throw new Error(\"Can't remove a member to the group without it's Connection id.\");\n\t        }\n\n\t        that.connections.every(function eachConnection(conn, index) {\n\t            if (conn.id === params.connectionId) {\n\t                that.connections.splice(index, 1);\n\n\t                /**\n\t                 * This event is fired when a member leaves a group the client is a member of.\n\t                 * @event respoke.Group#leave\n\t                 * @type {respoke.Event}\n\t                 * @property {respoke.Connection} connection - The connection that left the group.\n\t                 * @property {string} name - The event name.\n\t                 * @property {respoke.Group} target\n\t                 */\n\t                that.fire('leave', {\n\t                    connection: conn\n\t                });\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t    };\n\n\t    /**\n\t     * Return true if the logged-in user is a member of this group and false if not.\n\t     *\n\t     *     if (group.isJoined()) {\n\t     *         // I'm a member!\n\t     *     } else {\n\t     *         // Maybe join here\n\t     *     }\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.isJoined\n\t     * @returns {boolean}\n\t     */\n\t    that.isJoined = function () {\n\t        // connections array contains some connections and ours is among them.\n\t        return (that.connections.length > 0 && !that.connections.every(function (conn) {\n\t            return conn.id !== client.connectionId;\n\t        }));\n\t    };\n\n\t    /**\n\t     * Add a Connection to a group. This does not change the status of the remote Endpoint, it only changes the\n\t     * internal representation of the Group membership. This method should only be used internally.\n\t     * @memberof! respoke.Group\n\t     * @private\n\t     * @method respoke.Group.addMember\n\t     * @param {object} params\n\t     * @param {respoke.Connection} params.connection\n\t     * @fires respoke.Group#join\n\t     */\n\t    that.addMember = function (params) {\n\t        params = params || {};\n\t        var absent;\n\n\t        validateConnection();\n\n\t        if (!params.connection) {\n\t            throw new Error(\"Can't add a member to the group without it's Connection object.\");\n\t        }\n\n\t        absent = that.connections.every(function eachConnection(conn) {\n\t            return (conn.id !== params.connection.id);\n\t        });\n\n\t        if (absent) {\n\t            that.connections.push(params.connection);\n\t            if (params.skipEvent) {\n\t                return;\n\t            }\n\n\t            /**\n\t             * This event is fired when a member joins a Group that the currently logged-in endpoint is a member\n\t             * of.\n\t             * @event respoke.Group#join\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Connection} connection - The connection that joined the group.\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Group} target\n\t             */\n\t            that.fire('join', {\n\t                connection: params.connection\n\t            });\n\t        }\n\t    };\n\n\t    /**\n\t     * Validate that the client is connected to the Respoke infrastructure.\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.validateConnection\n\t     * @private\n\t     */\n\t    function validateConnection() {\n\t        if (!signalingChannel || !signalingChannel.isConnected()) {\n\t            throw new Error(\"Can't complete request when not connected. Please reconnect!\");\n\t        }\n\t    }\n\n\t    /**\n\t     * Validate that the client is a member of this group.\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.validateMembership\n\t     * @private\n\t     */\n\t    function validateMembership() {\n\t        if (!that.isJoined()) {\n\t            throw new Error(\"Not a member of this group anymore.\");\n\t        }\n\t    }\n\n\t    /**\n\t     *\n\t     * Send a message to all of the endpoints in the group.\n\t     *\n\t     *      var group = client.getGroup({ id: 'js-enthusiasts'});\n\t     *\n\t     *      group.sendMessage({\n\t     *          message: \"Cat on keyboard\",\n\t     *          onSuccess: function (evt) {\n\t     *              console.log('Message was sent');\n\t     *          }\n\t     *      });\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.sendMessage\n\t     * @param {object} params\n\t     * @param {string} params.message - The message.\n\t     * @param {function} params.onSuccess - Success handler indicating that the message was delivered.\n\t     * @param {function} params.onError - Error handler indicating that the message was not delivered.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        params = params || {};\n\t        params.id = that.id;\n\t        var promise;\n\n\t        try {\n\t            validateConnection();\n\t            validateMembership();\n\t        } catch (err) {\n\t            promise = Q.reject(err);\n\t        }\n\n\t        return respoke.handlePromise(promise ? promise : signalingChannel.publish(params),\n\t                params.onSuccess, params.onError);\n\t    };\n\n\t    /**\n\t     * Get group members\n\t     *\n\t     * Get an array containing all connections subscribed to the group. Accepts onSuccess or onError parameters,\n\t     * or it returns a promise that you can observe. An endpoint may have more than one connection subscribed to\n\t\t * a group, so if you're interested in unique endpoints, you may want to filter the connections by endpointId.\n\t     *\n\t     *     group.getMembers({\n\t     *         onSuccess: function (connections) {\n\t     *             connections.forEach(function (connection) {\n\t     *                 console.log(connection.endpoint.id);\n\t     *             });\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.getMembers\n\t     * @param {object} params\n\t     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Success handler for this invocation of this method only.\n\t     * @returns {Promise<Array>} A promise to an array of Connections.\n\t     */\n\t    that.getMembers = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n\t        try {\n\t            validateConnection();\n\t            validateMembership();\n\t        } catch (err) {\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\n\t        signalingChannel.getGroupMembers({\n\t            id: that.id\n\t        }).done(function successHandler(list) {\n\t            var endpointList = [];\n\t            list.forEach(function eachMember(params) {\n\t                var connection = client.getConnection({\n\t                    endpointId: params.endpointId,\n\t                    connectionId: params.connectionId,\n\t                    skipCreate: true\n\t                });\n\n\t                if (!connection) {\n\t                    // Create the connection\n\t                    connection = client.getConnection({\n\t                        endpointId: params.endpointId,\n\t                        connectionId: params.connectionId\n\t                    });\n\t                }\n\n\t                if (endpointList.indexOf(params.endpointId) === -1) {\n\t                    endpointList.push(params.endpointId);\n\t                }\n\t                that.addMember({\n\t                    connection: connection,\n\t                    skipEvent: true\n\t                });\n\t            });\n\n\t            deferred.resolve(that.connections);\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return retVal;\n\t    };\n\n\t    return that;\n\t}; // End respoke.Group\n\t/**\n\t * Receive notification that an endpoint has joined this group. This callback is called everytime\n\t * respoke.Group#join is fired.\n\t * @callback respoke.Group.onJoin\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Connection} evt.connection\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Group} evt.target\n\t */\n\t/**\n\t * Receive notification that an endpoint has left this group. This callback is called everytime\n\t * respoke.Group#leave is fired.\n\t * @callback respoke.Group.onLeave\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Connection} evt.connection\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Group} evt.target\n\t */\n\t/**\n\t * Receive notification that a message has been received to a group. This callback is called every time\n\t * respoke.Group#message is fired.\n\t * @callback respoke.Group.onMessage\n\t * @param {respoke.Event} evt\n\t * @param {respoke.TextMessage} evt.message\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Group} evt.target\n\t */\n\t/**\n\t * Get a list of the Connections which are members of this Group.\n\t * @callback respoke.Group.connectionsHandler\n\t * @param {Array<respoke.Connection>} connections\n\t */\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\n\tvar log = __webpack_require__(18);\n\tvar Q = __webpack_require__(19);\n\tvar io = __webpack_require__(21);\n\tvar respoke = __webpack_require__(1);\n\n\t/**\n\t * Returns a timestamp, measured in milliseconds.\n\t *\n\t * This method will use high resolution time, if available. Otherwise it falls back to just\n\t * using the wall clock.\n\t *\n\t * @return {number} Number of milliseconds that have passed since some point in the past.\n\t * @private\n\t */\n\tvar now;\n\tvar performance;\n\tif (performance && performance.now) {\n\t    now = performance.now.bind(performance);\n\t} else if (Date.now) {\n\t    now = Date.now.bind(Date);\n\t} else {\n\t    now = function () {\n\t        return new Date().getTime();\n\t    };\n\t}\n\n\t/**\n\t * Container for holding requests that are currently waiting on responses.\n\t * @returns {PendingRequests}\n\t * @private\n\t * @constructor\n\t */\n\tvar PendingRequests = function () {\n\t    /**\n\t     * Pending requests.\n\t     * @private\n\t     * @type {Array}\n\t     */\n\t    var contents = [];\n\t    /**\n\t     * Counter to provide the next id.\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var counter = 0;\n\t    var that = {};\n\n\t    /**\n\t     * Add a new pending request.\n\t     *\n\t     * @memberof PendingRequests\n\t     * @param obj\n\t     * @returns {*} The key to use for the `remove` method.\n\t     */\n\t    that.add = function (obj) {\n\t        contents[counter] = obj;\n\t        counter++;\n\t        return counter;\n\t    };\n\n\t    /**\n\t     * Remove a pending request.\n\t     *\n\t     * @param {*} key Key returned from `add` method.\n\t     */\n\t    that.remove = function (key) {\n\t        delete contents[key];\n\t    };\n\n\t    /**\n\t     * Disposes of any currently pending requests, synchronously invoking the provided function on\n\t     * each.\n\t     *\n\t     * @param {function} [fn] Callback for pending requests.\n\t     */\n\t    that.reset = function (fn) {\n\t        if (fn) {\n\t            contents.forEach(fn);\n\t        }\n\t        contents = [];\n\t    };\n\n\t    return that;\n\t};\n\n\t/**\n\t * The purpose of this class is to make a method call for each API call\n\t * to the backend REST interface.  This class takes care of App authentication, websocket connection,\n\t * Endpoint authentication, and all App interactions thereafter.  Almost all methods return a Promise.\n\t * @class respoke.SignalingChannel\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.instanceId - client id\n\t * @private\n\t * @returns {respoke.SignalingChannel}\n\t */\n\tmodule.exports = function (params) {\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name className\n\t     * @type {string}\n\t     * @private\n\t     */\n\t    that.className = 'respoke.SignalingChannel';\n\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name client\n\t     * @private\n\t     * @type {respoke.Client}\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name socket\n\t     * @private\n\t     * @type {Socket.io.Socket}\n\t     */\n\t    var socket = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name clientSettings\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var clientSettings = params.clientSettings;\n\t    delete that.clientSettings;\n\t    clientSettings.baseURL = clientSettings.baseURL || 'https://api.respoke.io';\n\t    /**\n\t     * A map to avoid duplicate endpoint presence registrations.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name presenceRegistered\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var presenceRegistered = {};\n\t    /**\n\t     * A reference to the private function Client.actuallyConnect that gets set in SignalingChannel.open() so we\n\t     * don't have to make it public.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name actuallyConnect\n\t     * @private\n\t     * @type {function}\n\t     */\n\t    var actuallyConnect = null;\n\t    /**\n\t     * Set of promises for any pending requests on the WebSocket.\n\t     * @private\n\t     * @type {PendingRequests}\n\t     */\n\t    var pendingRequests = PendingRequests();\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name reconnectTimeout\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var reconnectTimeout = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name maxReconnectTimeout\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var maxReconnectTimeout = 5 * 60 * 1000;\n\t    /**\n\t     * Rejects a message if the body size is greater than this. It is enforced servcer side, so changing this\n\t     * won't make the bodySizeLimit any bigger, this just gives you a senseable error if it's too big.\n\t     * @memberof! respoke.signalingChannel\n\t     * @name bodySizeLimit\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var bodySizeLimit = 20000;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name appId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var appId = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name endpointId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var endpointId = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name token\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var token = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name appToken\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var appToken = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name xhr\n\t     * @private\n\t     * @type {XMLHttpRequest}\n\t     */\n\t    var xhr = new XMLHttpRequest();\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name routingMethods\n\t     * @private\n\t     * @type {object}\n\t     * @desc The methods contained in this object are statically defined methods that are called by constructing\n\t     * their names dynamically. 'do' + $className + $signalType == 'doCallOffer', et. al.\n\t     */\n\t    var routingMethods = {};\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name handlerQueue\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var handlerQueue = {\n\t        'message': [],\n\t        'signal': [],\n\t        'presence': []\n\t    };\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name errors\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var errors = {\n\t        400: \"Can't perform this action: missing or invalid parameters.\",\n\t        401: \"Can't perform this action: not authenticated.\",\n\t        403: \"Can't perform this action: not authorized.\",\n\t        404: \"Item not found.\",\n\t        409: \"Can't perform this action: item in the wrong state.\",\n\t        429: \"API rate limit was exceeded.\",\n\t        500: \"Can't perform this action: server problem.\"\n\t    };\n\n\t    /**\n\t     * Indicate whether the signaling channel has a valid connection to Respoke.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.isConnected\n\t     * @return {boolean}\n\t     */\n\t    that.isConnected = function () {\n\t        return !!(socket && socket.socket.connected);\n\t    };\n\n\t    /**\n\t     * Indicate whether the signaling channel is currently waiting on a websocket to connect.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.isConnecting\n\t     * @private\n\t     * @return {boolean}\n\t     */\n\t    function isConnecting() {\n\t        return !!(socket && socket.socket.connecting);\n\t    }\n\n\t    /**\n\t     * Get the call debug preference.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.isSendingReport\n\t     * @private\n\t     * @return {boolean}\n\t     */\n\t    that.isSendingReport = function (params) {\n\t        return clientSettings.enableCallDebugReport;\n\t    };\n\n\t    /**\n\t     * Open a connection to the REST API and validate the app, creating a session token.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.open\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} [params.token] - The Endpoint's auth token\n\t     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @return {Promise}\n\t     */\n\t    that.open = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug('SignalingChannel.open', params, clientSettings);\n\t        token = params.token || token;\n\t        actuallyConnect = typeof params.actuallyConnect === 'function' ? params.actuallyConnect : actuallyConnect;\n\n\t        Q.fcall(function tokenPromise() {\n\t            if (clientSettings.developmentMode === true && clientSettings.appId && params.endpointId) {\n\t                return that.getToken({\n\t                    appId: clientSettings.appId,\n\t                    endpointId: params.endpointId\n\t                });\n\t            }\n\t            return null;\n\t        }).then(function successHandler(newToken) {\n\t            token = newToken || token;\n\t            return doOpen({token: token});\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t            log.debug('client', client);\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\n\t        return deferred.promise;\n\t    };\n\n\t    /**\n\t     * Get a developer mode token for an endpoint. App must be in developer mode.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getToken\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @return {Promise<String>}\n\t     */\n\t    that.getToken = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug('SignalingChannel.getToken', params);\n\n\t        var callParams = {\n\t            path: '/v1/tokens',\n\t            httpMethod: 'POST',\n\t            parameters: {\n\t                appId: clientSettings.appId,\n\t                endpointId: params.endpointId,\n\t                ttl: 60 * 60 * 6\n\t            }\n\t        };\n\n\t        call(callParams).done(function (response) {\n\t            if (response.code === 200 && response.result && response.result.tokenId) {\n\t                token = response.result.tokenId;\n\t                deferred.resolve(response.result.tokenId);\n\t                return;\n\t            }\n\t            deferred.reject(new Error(\"Couldn't get a developer mode token: \" + response.error));\n\t        }, function (err) {\n\t            deferred.reject(new Error(\"Couldn't get a developer mode token: \" + err));\n\t        });\n\t        return deferred.promise;\n\t    };\n\n\t    /**\n\t     * Open a connection to the REST API and validate the app, creating a session token.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.doOpen\n\t     * @param {object} params\n\t     * @param {string} params.token - The Endpoint's auth token\n\t     * @return {Promise}\n\t     * @private\n\t     */\n\t    function doOpen(params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug('SignalingChannel.doOpen', params);\n\n\t        if (!params.token) {\n\t            deferred.reject(new Error(\"Can't open connection to Respoke without a token.\"));\n\t            return deferred.promise;\n\t        }\n\n\t        call({\n\t            path: '/v1/session-tokens',\n\t            httpMethod: 'POST',\n\t            parameters: {\n\t                tokenId: params.token\n\t            }\n\t        }).done(function (response) {\n\t            if (response.code === 200) {\n\t                appToken = response.result.token;\n\t                deferred.resolve();\n\t                log.debug(\"Signaling connection open to\", clientSettings.baseURL);\n\t            } else {\n\t                deferred.reject(new Error(\"Couldn't authenticate app: \" + response.error));\n\t            }\n\t        }, function (err) {\n\t            log.error(\"Network call failed:\", err.message);\n\t            deferred.reject(new Error(\"Couldn't authenticate app: \" + err.message));\n\t        });\n\n\t        return deferred.promise;\n\t    }\n\n\t    /**\n\t     * Close a connection to the REST API. Invalidate the session token.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.close\n\t     * @private\n\t     * @param {object} params\n\t     * @return {Promise}\n\t     */\n\t    that.close = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\n\t        wsCall({\n\t            path: '/v1/connections/%s/',\n\t            httpMethod: 'DELETE',\n\t            objectId: client.endpointId\n\t        }).fin(function finallyHandler() {\n\t            return call({\n\t                path: '/v1/session-tokens',\n\t                httpMethod: 'DELETE'\n\t            });\n\t        }).fin(function finallyHandler() {\n\t            if (socket) {\n\t                socket.removeAllListeners();\n\t                socket.disconnect();\n\t            }\n\t            deferred.resolve();\n\t        }).done();\n\n\t        return deferred.promise;\n\t    };\n\n\t    /**\n\t     * Generate and send a presence message representing the client's current status. This triggers\n\t     * the server to send the client's endpoint's presence.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendPresence\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string|number|object|Array} [params.presence=available]\n\t     * @param {string} [params.status] - Non-enumeration human-readable status.\n\t     * @param {string} [params.show] - I can't remember what this is.\n\t     * @returns {Promise}\n\t     */\n\t    that.sendPresence = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug(\"Signaling sendPresence\");\n\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\n\t        wsCall({\n\t            path: '/v1/presence',\n\t            httpMethod: 'POST',\n\t            parameters: {\n\t                'presence': {\n\t                    show: params.show,\n\t                    'status': params.status,\n\t                    type: params.presence || \"available\"\n\t                }\n\t            }\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return deferred.promise;\n\t    };\n\n\t    /**\n\t     * Get or create a group in the infrastructure.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getGroup\n\t     * @private\n\t     * @returns {Promise<respoke.Group>}\n\t     * @param {object} params\n\t     * @param {string} name\n\t     */\n\t    that.getGroup = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug('signalingChannel.getGroup');\n\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\n\t        wsCall({\n\t            httpMethod: 'POST',\n\t            path: '/v1/channels/',\n\t            parameters: {\n\t                name: params.name\n\t            }\n\t        }).then(function successHandler(group) {\n\t            deferred.resolve(group);\n\t        }, function errorHandler(err) {\n\t            // Group was already created, just return back the same params we were given.\n\t            deferred.resolve({id: params.name});\n\t        });\n\n\t        return deferred.promise;\n\t    };\n\n\t    /**\n\t     * Leave a group. In order to aggregate subsequent repeated requests, this function, when called synchronously,\n\t     * will continue to accumulate group ids until the next tick of the event loop, when the request will be\n\t     * issued. The same instance of Promise is returned each time.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @private\n\t     * @method respoke.SignalingChannel.leaveGroup\n\t     * @returns {Promise}\n\t     * @param {object} params\n\t     * @param {array} params.groupList\n\t     */\n\t    that.leaveGroup = (function () {\n\t        var groups = {};\n\t        var deferred = Q.defer();\n\n\t        return function (params) {\n\t            params = params || {};\n\t            params.groupList = params.groupList || [];\n\n\t            var toRun = (Object.keys(groups).length === 0);\n\n\t            if (!that.isConnected()) {\n\t                deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t                return deferred.promise;\n\t            }\n\n\t            params.groupList.forEach(function (id) {\n\t                if (typeof id === 'string') {\n\t                    groups[id] = true;\n\t                }\n\t            });\n\n\t            if (!toRun) {\n\t                return deferred.promise;\n\t            }\n\n\t            setTimeout(function () {\n\t                // restart accumulation\n\t                var groupList = Object.keys(groups);\n\t                groups = {};\n\t                var saveDeferred = deferred;\n\t                deferred = Q.defer();\n\n\t                if (groupList.length === 0) {\n\t                    saveDeferred.resolve();\n\t                    return;\n\t                }\n\n\t                wsCall({\n\t                    path: '/v1/groups/',\n\t                    parameters: {\n\t                        groups: groupList\n\t                    },\n\t                    httpMethod: 'DELETE'\n\t                }).done(function successHandler() {\n\t                    saveDeferred.resolve();\n\t                }, function errorHandler(err) {\n\t                    saveDeferred.reject(err);\n\t                });\n\t            });\n\t            return deferred.promise;\n\t        };\n\t    })();\n\n\t    /**\n\t     * Join a group. In order to aggregate subsequent repeated requests, this function, when called synchronously,\n\t     * will continue to accumulate group ids until the next tick of the event loop, when the request will be\n\t     * issued. The same instance of Promise is returned each time.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.joinGroup\n\t     * @private\n\t     * @returns {Promise}\n\t     * @param {object} params\n\t     * @param {array} params.groupList\n\t     */\n\t    that.joinGroup = (function () {\n\t        var groups = {};\n\t        var deferred = Q.defer();\n\n\t        return function (params) {\n\t            params = params || {};\n\t            params.groupList = params.groupList || [];\n\n\t            var toRun = (Object.keys(groups).length === 0);\n\n\t            if (!that.isConnected()) {\n\t                deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t                return deferred.promise;\n\t            }\n\n\t            params.groupList.forEach(function (id) {\n\t                if (typeof id === 'string') {\n\t                    groups[id] = true;\n\t                }\n\t            });\n\n\t            if (!toRun) {\n\t                return deferred.promise;\n\t            }\n\n\t            setTimeout(function () {\n\t                // restart accumulation\n\t                var groupList = Object.keys(groups);\n\t                groups = {};\n\t                var saveDeferred = deferred;\n\t                deferred = Q.defer();\n\n\t                if (groupList.length === 0) {\n\t                    saveDeferred.resolve();\n\t                    return;\n\t                }\n\n\t                wsCall({\n\t                    path: '/v1/groups/',\n\t                    parameters: {\n\t                        groups: groupList\n\t                    },\n\t                    httpMethod: 'POST'\n\t                }).done(function successHandler() {\n\t                    saveDeferred.resolve();\n\t                }, function errorHandler(err) {\n\t                    saveDeferred.reject(err);\n\t                });\n\t            });\n\t            return deferred.promise;\n\t        };\n\t    })();\n\n\t    /**\n\t     * Publish a message to a group.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @private\n\t     * @method respoke.SignalingChannel.publish\n\t     * @returns {Promise}\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     * @param {string} params.message\n\t     */\n\t    that.publish = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var message = respoke.TextMessage({\n\t            endpointId: params.id,\n\t            message: params.message\n\t        });\n\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\n\t        wsCall({\n\t            path: '/v1/channels/%s/publish/',\n\t            objectId: params.id,\n\t            httpMethod: 'POST',\n\t            parameters: message\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return deferred.promise;\n\t    };\n\n\t    /**\n\t     * Register as an observer of presence for the specified endpoint ids. In order to aggregate subsequent repeated\n\t     * requests, this function, when called synchronously, will continue to accumulate endpoint ids until the next\n\t     * tick of the event loop, when the request will be issued. The same instance of Promise is returned each time.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.registerPresence\n\t     * @private\n\t     * @param {object} params\n\t     * @param {Array<string>} params.endpointList\n\t     * @returns {Promise}\n\t     */\n\t    that.registerPresence = (function () {\n\t        var endpoints = {};\n\t        var deferred = Q.defer();\n\n\t        return function (params) {\n\t            params = params || {};\n\t            params.endpointList = params.endpointList || [];\n\t            var toRun = (Object.keys(endpoints).length === 0);\n\n\t            if (!that.isConnected()) {\n\t                return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            }\n\n\t            params.endpointList.forEach(function (ep) {\n\t                if (typeof ep === 'string' && presenceRegistered[ep] !== true) {\n\t                    endpoints[ep] = true;\n\t                }\n\t            });\n\n\t            if (!toRun) {\n\t                return deferred.promise;\n\t            }\n\n\t            setTimeout(function () {\n\t                // restart accumulation\n\t                var endpointList = Object.keys(endpoints);\n\t                endpoints = {};\n\t                var saveDeferred = deferred;\n\t                deferred = Q.defer();\n\n\t                if (endpointList.length === 0) {\n\t                    saveDeferred.resolve();\n\t                    return;\n\t                }\n\n\t                wsCall({\n\t                    httpMethod: 'POST',\n\t                    path: '/v1/presenceobservers',\n\t                    parameters: {\n\t                        endpointList: endpointList\n\t                    }\n\t                }).done(function successHandler() {\n\t                    params.endpointList.forEach(function eachId(id) {\n\t                        presenceRegistered[id] = true;\n\t                    });\n\t                    saveDeferred.resolve();\n\t                }, function (err) {\n\t                    saveDeferred.reject(err);\n\t                });\n\t            // We could even add a tiny delay like 10ms if we want to get more conservative and\n\t            // catch asychronous calls to client.getEndpoint() and other methods which call\n\t            // this method.\n\t            });\n\n\t            return deferred.promise;\n\t        };\n\t    })();\n\n\t    /**\n\t     * Join a group.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getGroupMembers\n\t     * @private\n\t     * @returns {Promise<Array>}\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     */\n\t    that.getGroupMembers = function (params) {\n\t        var deferred = Q.defer();\n\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\n\t        if (!params.id) {\n\t            deferred.reject(new Error(\"Can't get group's endpoints without group ID.\"));\n\t            return deferred.promise;\n\t        }\n\n\t        return wsCall({\n\t            path: '/v1/channels/%s/subscribers/',\n\t            objectId: params.id,\n\t            httpMethod: 'GET'\n\t        });\n\t    };\n\n\t    /**\n\t     * Send a chat message.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendMessage\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.SignalingMessage} params.message - The string text message to send.\n\t     * @param {respoke.Endpoint} params.recipient\n\t     * @param {string} [params.connectionId]\n\t     * @returns {Promise}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var message = respoke.TextMessage({\n\t            endpointId: params.recipient.id,\n\t            connectionId: params.connectionId,\n\t            message: params.message\n\t        });\n\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\n\t        wsCall({\n\t            path: '/v1/messages',\n\t            httpMethod: 'POST',\n\t            parameters: message\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return deferred.promise;\n\t    };\n\n\t    /**\n\t     * Send an ACK signal to acknowlege reception of a signal.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendACK\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.SignalingMessage} params.signal\n\t     * @return {Promise}\n\t     */\n\t    that.sendACK = function (params) {\n\t        var endpoint;\n\t        params = params || {};\n\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\n\t        if (!params.signal) {\n\t            return Q.reject(new Error(\"Can't send ACK, no signal was given.\"));\n\t        }\n\n\t        endpoint = client.getEndpoint({\n\t            id: params.signal.fromEndpoint,\n\t            skipPresence: true\n\t        });\n\t        if (!endpoint) {\n\t            return Q.reject(new Error(\"Can't send ACK, can't get endpoint.\"));\n\t        }\n\n\t        return that.sendSignal({\n\t            recipient: endpoint,\n\t            signalType: 'ack',\n\t            signalId: params.signal.signalId,\n\t            sessionId: params.signal.sessionId,\n\t            target: params.signal.target,\n\t            ackedSignalType: params.signal.signalType\n\t        });\n\t    };\n\n\t    /**\n\t     * Send a signaling message.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendSignal\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Call} [params.call] - For getting the sessionId & connectionId. Not required for 'ack'.\n\t     * @return {Promise}\n\t     */\n\t    that.sendSignal = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var signal;\n\t        var to;\n\t        var toConnection;\n\t        var toType;\n\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\n\t        if (params.call) {\n\t            params.sessionId = params.call.id;\n\t            if (params.call.connectionId) { // the recipient's connectionId\n\t                params.connectionId = params.call.connectionId;\n\t            }\n\t        }\n\n\t        to = params.recipient.id;\n\t        toConnection = params.connectionId;\n\t        toType = params.toType || 'web';\n\n\t        try {\n\t            params.signalId = respoke.makeGUID();\n\t            // This will strip off non-signaling attributes.\n\t            signal = respoke.SignalingMessage(params);\n\t        } catch (e) {\n\t            deferred.reject(e);\n\t            return deferred.promise;\n\t        }\n\n\t        wsCall({\n\t            path: '/v1/signaling',\n\t            httpMethod: 'POST',\n\t            parameters: {\n\t                signal: JSON.stringify(signal),\n\t                to: to,\n\t                toConnection: toConnection,\n\t                toType: toType\n\t            }\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\n\t        return deferred.promise;\n\t    };\n\n\t    /**\n\t     * Send an ICE candidate.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendCandidate\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @param {string} [params.connectionId]\n\t     * @param {Array<RTCIceCandidate>} params.iceCandidates - An array of ICE candidate.\n\t     * @return {Promise}\n\t     */\n\t    that.sendCandidate = function (params) {\n\t        params = params || {};\n\t        params.signalType = 'iceCandidates';\n\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\n\t        return that.sendSignal(params);\n\t    };\n\n\t    /**\n\t     * Send an SDP.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendSDP\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @param {string} [params.connectionId]\n\t     * @param {RTCSessionDescription} params.sessionDescription - An SDP to JSONify and send.\n\t     * @return {Promise}\n\t     */\n\t    that.sendSDP = function (params) {\n\t        params = params || {};\n\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\n\t        if (['offer', 'answer'].indexOf(params.signalType) === -1) {\n\t            return Q.reject(\"Not an SDP type signal.\");\n\t        }\n\n\t        return that.sendSignal(params);\n\t    };\n\n\t    /**\n\t     * Send a call report to the cloud infrastructure.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendReport\n\t     * @private\n\t     * @param {object} params\n\t     * @todo TODO document the params.\n\t     * @return {Promise}\n\t     */\n\t    that.sendReport = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var message = {\n\t            debugData: params\n\t        };\n\n\t        if (!clientSettings.enableCallDebugReport) {\n\t            log.debug('not sending call debugs - disabled');\n\t            deferred.resolve();\n\t            return deferred.promise;\n\t        }\n\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\n\t        wsCall({\n\t            path: '/v1/call-debugs',\n\t            httpMethod: 'POST',\n\t            parameters: message\n\t        }).done(function () {\n\t            deferred.resolve();\n\t        }, function (err) {\n\t            deferred.reject(err);\n\t        });\n\n\t        return deferred.promise;\n\t    };\n\n\t    /**\n\t     * Send a message hanging up the WebRTC session.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendHangup\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @param {string} [params.connectionId]\n\t     * @param {string} params.reason - The reason the session is being hung up.\n\t     * @return {Promise}\n\t     */\n\t    that.sendHangup = function (params) {\n\t        params = params || {};\n\t        params.signalType = 'bye';\n\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\n\t        return that.sendSignal(params);\n\t    };\n\n\t    /**\n\t     * Send a message to all connection ids indicating we have negotiated a call with one connection.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendConnected\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @return {Promise}\n\t     */\n\t    that.sendConnected = function (params) {\n\t        params = params || {};\n\t        params.signalType = 'connected';\n\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\n\t        return that.sendSignal(params);\n\t    };\n\n\t    /**\n\t     * Send a message to the remote party indicating a desire to renegotiate media.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendModify\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @param {string} params.action - The state of the modify request, one of: 'initiate', 'accept', 'reject'\n\t     * @return {Promise}\n\t     */\n\t    that.sendModify = function (params) {\n\t        params = params || {};\n\t        params.signalType = 'modify';\n\n\t        if (['initiate', 'accept', 'reject'].indexOf(params.action) === -1) {\n\t            return Q.reject(\"No valid action in modify signal.\");\n\t        }\n\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\n\t        return that.sendSignal(params);\n\t    };\n\n\t    /**\n\t     * Uppercase the first letter of the word.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.firstUpper\n\t     * @private\n\t     */\n\t    function firstUpper(str) {\n\t        return str[0].toUpperCase() + str.slice(1);\n\t    }\n\n\t    /**\n\t     * Route different types of signaling messages via events.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routeSignal\n\t     * @private\n\t     * @param {respoke.SignalingMessage} message - A message to route\n\t     * @fires respoke.Call#offer\n\t     * @fires respoke.Call#connected\n\t     * @fires respoke.Call#answer\n\t     * @fires respoke.Call#iceCandidates\n\t     * @fires respoke.Call#hangup\n\t     * @fires respoke.DirectConnection#offer\n\t     * @fires respoke.DirectConnection#connected\n\t     * @fires respoke.DirectConnection#answer\n\t     * @fires respoke.DirectConnection#iceCandidates\n\t     * @fires respoke.DirectConnection#hangup\n\t     */\n\t    that.routeSignal = function (signal) {\n\t        var target = null;\n\t        var method = 'do';\n\n\t        if (signal.signalType !== 'iceCandidates') { // Too many of these!\n\t            log.debug(signal.signalType, signal);\n\t        }\n\n\t        if (signal.target === undefined) {\n\t            throw new Error(\"target undefined\");\n\t        }\n\n\t        // Only create if this signal is an offer.\n\t        Q.fcall(function makePromise() {\n\t            var endpoint;\n\t            /*\n\t             * This will return calls regardless of whether they are associated\n\t             * with a direct connection or not, and it will create a call if no\n\t             * call is found and this signal is an offer. Direct connections get\n\t             * created in the next step.\n\t             */\n\t            target = client.getCall({\n\t                id: signal.sessionId,\n\t                endpointId: signal.fromEndpoint,\n\t                type: (signal.target === 'screenshare') ? 'screenshare' : signal.fromType,\n\t                create: (signal.target !== 'directConnection' && signal.signalType === 'offer')\n\t            });\n\t            if (target) {\n\t                return target;\n\t            }\n\n\t            if (signal.target === 'directConnection') {\n\t                // return a promise\n\t                endpoint = client.getEndpoint({\n\t                    id: signal.fromEndpoint,\n\t                    skipPresence: true\n\t                });\n\n\t                if (endpoint.directConnection && endpoint.directConnection.call.id === signal.sessionId) {\n\t                    return endpoint.directConnection;\n\t                }\n\n\t                return endpoint.startDirectConnection({\n\t                    id: signal.sessionId,\n\t                    create: (signal.signalType === 'offer'),\n\t                    caller: (signal.signalType !== 'offer')\n\t                });\n\t            }\n\t        }).done(function successHandler(target) {\n\t            // target might be null, a Call, or a DirectConnection.\n\t            if (target) {\n\t                target = target.call || target;\n\t            }\n\t            if (!target || target.id !== signal.sessionId) {\n\t                // orphaned signal\n\t                log.warn(\"Couldn't associate signal with a call.\", signal);\n\t                return;\n\t            }\n\n\t            method += firstUpper(signal.signalType);\n\t            routingMethods[method]({\n\t                call: target,\n\t                signal: signal\n\t            });\n\t        }, null);\n\t    };\n\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doOffer\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-offer\n\t     */\n\t    routingMethods.doOffer = function (params) {\n\t        params.call.connectionId = params.signal.fromConnection;\n\t        /**\n\t         * Send the `offer` signal into the Call.\n\t         * @event respoke.Call#signal-offer\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-offer', {\n\t            signal: params.signal\n\t        });\n\t    };\n\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doConnected\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-connected\n\t     */\n\t    routingMethods.doConnected = function (params) {\n\t        /**\n\t         * Send the `connected` signal into the Call.\n\t         * @event respoke.Call#signal-connected\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-connected', {\n\t            signal: params.signal\n\t        });\n\t    };\n\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.dModify\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-modify\n\t     */\n\t    routingMethods.doModify = function (params) {\n\t        /**\n\t         * Send the `modify` signal into the Call.\n\t         * @event respoke.Call#signal-modify\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-modify', {\n\t            signal: params.signal\n\t        });\n\t    };\n\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doAnswer\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-answer\n\t     */\n\t    routingMethods.doAnswer = function (params) {\n\t        params.call.connectionId = params.signal.fromConnection;\n\t        /**\n\t         * Send the `answer` signal into the Call.\n\t         * @event respoke.Call#signal-answer\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-answer', {\n\t            signal: params.signal\n\t        });\n\t    };\n\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doIceCandidates\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-icecandidates\n\t     */\n\t    routingMethods.doIceCandidates = function (params) {\n\t        /**\n\t         * Send the `icecandidates` signal into the Call.\n\t         * @event respoke.Call#signal-icecandidates\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-icecandidates', {\n\t            signal: params.signal\n\t        });\n\t    };\n\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doBye\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-hangup\n\t     */\n\t    routingMethods.doBye = function (params) {\n\t        /**\n\t         *  We may receive hangup from one or more parties after connectionId is set if the call is rejected\n\t         *  by a connection that didn't win the call. In this case, we have to ignore the signal since\n\t         *  we are already on a call. TODO: this should really be inside PeerConnection.\n\t         */\n\t        if (params.call.connectionId && params.call.connectionId !== params.signal.fromConnection) {\n\t            return;\n\t        }\n\t        /**\n\t         * Send the `hangup` signal into the Call.\n\t         * @event respoke.Call#signal-hangup\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-hangup', {\n\t            signal: params.signal\n\t        });\n\t    };\n\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doUnknown\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     */\n\t    routingMethods.doUnknown = function (params) {\n\t        log.error(\"Don't know what to do with\", params.signal.target, \"msg of unknown type\", params.signal.signalType);\n\t    };\n\n\t    /**\n\t     * Add a handler to the connection for messages of different types.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.addHandler\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} params.type - The type of socket message, i. e., 'message', 'presence', 'join'\n\t     * @param {function} params.handler - A function to which to pass the message\n\t     * @todo TODO See if this is necessary anymore\n\t     */\n\t    that.addHandler = function (params) {\n\t        if (socket.socket && socket.socket.open) {\n\t            socket.on(params.type, params.handler);\n\t        } else {\n\t            handlerQueue[params.type].push(params.handler);\n\t        }\n\t    };\n\n\t    /**\n\t     * Socket handler for pub-sub messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onPubSub\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     * @fires respoke.Group#message\n\t     * @fires respoke.Client#message\n\t     */\n\t    var onPubSub = function onPubSub(message) {\n\t        var group;\n\t        var groupMessage;\n\n\t        if (message.header.from === client.endpointId) {\n\t            return;\n\t        }\n\n\t        groupMessage = respoke.TextMessage({\n\t            rawMessage: message\n\t        });\n\n\t        group = client.getGroup({id: message.header.channel});\n\t        if (group) {\n\t            /**\n\t             * Indicate that a message has been received to a group.\n\t             * @event respoke.Group#message\n\t             * @type {respoke.Event}\n\t             * @property {respoke.TextMessage} message\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Group} target\n\t             */\n\t            group.fire('message', {\n\t                message: groupMessage\n\t            });\n\t        }\n\t        /**\n\t         * Indicate that a message has been received.\n\t         * @event respoke.Client#message\n\t         * @type {respoke.Event}\n\t         * @property {respoke.TextMessage} message\n\t         * @property {respoke.Group} [group] - If the message is to a group we already know about,\n\t         * this will be set. If null, the developer can use client.join({id: evt.message.header.channel}) to join\n\t         * the group. From that point forward, Group#message will fire when a message is received as well. If\n\t         * group is undefined instead of null, the message is not a group message at all.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Client} target\n\t         */\n\t        client.fire('message', {\n\t            message: groupMessage,\n\t            group: group || null\n\t        });\n\t    };\n\n\t    /**\n\t     * Socket handler for join messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onJoin\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     */\n\t    var onJoin = function onJoin(message) {\n\t        var group;\n\t        var presenceMessage;\n\t        var endpoint;\n\t        var connection;\n\n\t        if (message.connectionId === client.connectionId) {\n\t            connection = client.getConnection({connectionId: message.connectionId, endpointId: message.endpointId});\n\t            group = client.getGroup({id: message.header.channel});\n\t            if (!group) {\n\t                group = respoke.Group({\n\t                    id: message.header.channel,\n\t                    instanceId: instanceId,\n\t                    signalingChannel: that\n\t                });\n\t                client.addGroup(group);\n\t            }\n\t            if (!group.isJoined()) {\n\t                group.addMember({connection: connection});\n\t                client.fire('join', {\n\t                    group: group\n\t                });\n\t            }\n\t        } else {\n\n\t            endpoint = client.getEndpoint({\n\t                skipPresence: true,\n\t                id: message.endpointId,\n\t                instanceId: instanceId,\n\t                name: message.endpointId\n\t            });\n\n\t            // Handle presence not associated with a channel\n\t            if (!connection) {\n\t                endpoint.setPresence({\n\t                    connectionId: message.connectionId\n\t                });\n\t                connection = client.getConnection({\n\t                    connectionId: message.connectionId,\n\t                    endpointId: message.endpointId\n\t                });\n\t            }\n\n\t            group = client.getGroup({id: message.header.channel});\n\n\t            if (group && connection) {\n\t                group.addMember({connection: connection});\n\t            } else {\n\t                log.error(\"Can't add endpoint to group:\", message, group, endpoint, connection);\n\t            }\n\t        }\n\t    };\n\n\t    /**\n\t     * Socket handler for leave messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onLeave\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     */\n\t    var onLeave = function onLeave(message) {\n\t        var group;\n\t        var presenceMessage;\n\t        var endpoint;\n\t        if (message.connectionId === client.connectionId) {\n\t            group = client.getGroup({id: message.header.channel});\n\t            client.fire('leave', {\n\t                group: group\n\t            });\n\t        } else {\n\n\t            endpoint = client.getEndpoint({\n\t                skipPresence: true,\n\t                id: message.endpointId\n\t            });\n\n\t            endpoint.connections.every(function eachConnection(conn, index) {\n\t                if (conn.id === message.connectionId) {\n\t                    endpoint.connections.splice(index, 1);\n\t                    return false;\n\t                }\n\t                return true;\n\t            });\n\n\t            group = client.getGroup({id: message.header.channel});\n\t            group.removeMember({connectionId: message.connectionId});\n\t        }\n\t    };\n\n\t    /**\n\t     * Socket handler for presence messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onMessage\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     * @fires respoke.Endpoint#message\n\t     * @fires respoke.Client#message\n\t     */\n\t    var onMessage = function onMessage(message) {\n\t        var endpoint;\n\t        message = respoke.TextMessage({rawMessage: message});\n\t        if (message.endpointId) {\n\t            endpoint = client.getEndpoint({\n\t                id: message.endpointId,\n\t                skipCreate: true\n\t            });\n\t        }\n\t        if (endpoint) {\n\t            /**\n\t             * Indicate that a message has been received.\n\t             * @event respoke.Endpoint#message\n\t             * @type {respoke.Event}\n\t             * @property {respoke.TextMessage} message\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Endpoint} target\n\t             */\n\t            endpoint.fire('message', {\n\t                message: message\n\t            });\n\t        }\n\t        /**\n\t         * Indicate that a message has been received.\n\t         * @event respoke.Client#message\n\t         * @type {respoke.Event}\n\t         * @property {respoke.TextMessage} message\n\t         * @property {respoke.Endpoint} [endpoint] - If the message is from an endpoint we already know about,\n\t         * this will be set. If null, the developer can use client.getEndpoint({id: evt.message.endpointId}) to get\n\t         * the Endpoint. From that point forward, Endpoint#message will fire when a message is received as well.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Client} target\n\t         */\n\t        client.fire('message', {\n\t            endpoint: endpoint || null,\n\t            message: message\n\t        });\n\t    };\n\n\t    /**\n\t     * Create a socket handler for the onConnect event with all the right things in scope.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.generateConnectHandler\n\t     * @param {respoke.Client.successHandler} [onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @private\n\t     */\n\t    var generateConnectHandler = function generateConnectHandler(onSuccess, onError) {\n\t        onSuccess = onSuccess || function () {};\n\t        onError = onError || function () {};\n\t        return function onConnect() {\n\t            Object.keys(handlerQueue).forEach(function addEachHandlerType(category) {\n\t                if (!handlerQueue[category]) {\n\t                    return;\n\t                }\n\n\t                handlerQueue[category].forEach(function addEachHandler(handler) {\n\t                    socket.on(category, handler);\n\t                });\n\t                handlerQueue[category] = [];\n\t            });\n\n\t            wsCall({\n\t                path: '/v1/connections',\n\t                httpMethod: 'POST'\n\t            }).done(function successHandler(res) {\n\t                log.debug('connections result', res);\n\t                client.endpointId = res.endpointId;\n\t                client.connectionId = res.id;\n\t                onSuccess();\n\t            }, onError);\n\t        };\n\t    };\n\n\t    /**\n\t     * Socket handler for presence messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onPresence\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     */\n\t    function onPresence(message) {\n\t        var endpoint;\n\t        var groups;\n\n\t        if (message.header.from === client.endpointId) {\n\t            // Skip ourselves\n\t            return;\n\t        }\n\t        log.debug('socket.on presence', message);\n\n\t        endpoint = client.getEndpoint({\n\t            skipPresence: true,\n\t            id: message.header.from,\n\t            instanceId: instanceId,\n\t            name: message.header.from,\n\t            connection: message.header.fromConnection\n\t        });\n\n\t        endpoint.setPresence({\n\t            connectionId: message.header.fromConnection,\n\t            presence: message.type\n\t        });\n\n\t        if (endpoint.getPresence() === 'unavailable') {\n\t            var groups = client.getGroups();\n\t            if (groups) {\n\t                groups.forEach(function eachGroup(group) {\n\t                    group.removeMember({connectionId: message.header.fromConnection});\n\t                });\n\t            }\n\t        }\n\t    }\n\n\t    /*\n\t     * On reconnect, start with a reconnect interval of 2000ms. Every time reconnect fails, the interval\n\t     * is doubled up to a maximum of 5 minutes. From then on, it will attempt to reconnect every 5 minutes forever.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.reconnect\n\t     * @private\n\t     */\n\t    function reconnect() {\n\t        appToken = undefined;\n\t        token = undefined;\n\t        reconnectTimeout = (reconnectTimeout === null) ? 2500 : 2 * reconnectTimeout;\n\n\t        if (reconnectTimeout > (maxReconnectTimeout)) {\n\t            reconnectTimeout = maxReconnectTimeout;\n\t        }\n\n\t        setTimeout(function doReconnect() {\n\t            actuallyConnect().then(function successHandler() {\n\t                reconnectTimeout = null;\n\t                log.debug('socket reconnected');\n\t                return Q.all(client.getGroups().map(function iterGroups(group) {\n\t                    client.join({\n\t                        id: group.id,\n\t                        onMessage: clientSettings.onMessage,\n\t                        onJoin: clientSettings.onJoin,\n\t                        onLeave: clientSettings.onLeave\n\t                    });\n\t                }));\n\t            }).done(function successHandler(user) {\n\t                /**\n\t                 * Indicate that a reconnect has succeeded.\n\t                 * @event respoke.Client#reconnect\n\t                 * @property {string} name - the event name.\n\t                 * @property {respoke.Client}\n\t                 */\n\t                client.fire('reconnect');\n\t            }, function (err) {\n\t                log.error(\"Couldn't rejoin previous groups.\", err.message, err.stack);\n\t                reconnect();\n\t            });\n\t        }, reconnectTimeout);\n\t    }\n\n\t    /**\n\t     * Authenticate to the cloud and call the handler on state change.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.authenticate\n\t     * @private\n\t     * @param {object} params\n\t     * @return {Promise}\n\t     */\n\t    that.authenticate = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var pieces = [];\n\t        var protocol = null;\n\t        var host = null;\n\t        var port = null;\n\n\t        if (!appToken) {\n\t            deferred.reject(new Error(\"Can't open a websocket without an app token.\"));\n\t        }\n\n\t        pieces = clientSettings.baseURL.split(/:\\/\\//);\n\t        protocol = pieces[0];\n\t        pieces = pieces[1].split(/:/);\n\t        host = pieces[0];\n\t        port = pieces[1];\n\n\t        /*\n\t         * Try to connect for 2 seconds before failing.\n\t         * @private\n\t         */\n\t        var connectParams = {\n\t            'connect timeout': 2000,\n\t            'force new connection': true, // Don't try to reuse old connection.\n\t            'sync disconnect on unload': true, // have Socket.io call disconnect() on the browser unload event.\n\t            reconnect: false,\n\t            host: host,\n\t            port: port || '443',\n\t            protocol: protocol,\n\t            secure: (protocol === 'https'),\n\t            query: '__sails_io_sdk_version=0.10.0&app-token=' + appToken\n\t        };\n\n\t        if (that.isConnected() || isConnecting()) {\n\t            return;\n\t        }\n\t        socket = io.connect(clientSettings.baseURL, connectParams);\n\n\t        socket.on('connect', generateConnectHandler(function onSuccess() {\n\t            deferred.resolve();\n\t        }, function onError(err) {\n\t            deferred.reject(err);\n\t        }));\n\n\t        socket.on('join', onJoin);\n\t        socket.on('leave', onLeave);\n\t        socket.on('pubsub', onPubSub);\n\t        socket.on('message', onMessage);\n\t        socket.on('presence', onPresence);\n\n\t        // connection timeout\n\t        socket.on('connect_failed', function connectFailedHandler(res) {\n\t            deferred.reject(new Error(\"WebSocket connection failed.\"));\n\t            log.error('Socket.io connect timeout.', res || \"\");\n\t            reconnect();\n\t        });\n\n\t        // handshake error, 403\n\t        socket.on('error', function errorHandler(res) {\n\t            log.debug('Socket.io request failed.', res || \"\");\n\t            reconnect();\n\t        });\n\n\t        that.addHandler({\n\t            type: 'signal',\n\t            handler: function signalHandler(message) {\n\t                var knownSignals = ['offer', 'answer', 'connected', 'modify', 'iceCandidates', 'bye'];\n\t                var signal = respoke.SignalingMessage({\n\t                    rawMessage: message\n\t                });\n\n\t                if (signal.signalType === 'ack') {\n\t                    return;\n\t                }\n\n\t                if (!signal.target || !signal.signalType || knownSignals.indexOf(signal.signalType) === -1) {\n\t                    log.error(\"Got malformed signal.\", signal);\n\t                    throw new Error(\"Can't route signal without target or type.\");\n\t                }\n\n\t                that.routeSignal(signal);\n\t            }\n\t        });\n\n\t        socket.on('disconnect', function onDisconnect() {\n\t            pendingRequests.reset(function (pendingRequest) {\n\t                log.debug('Failing pending requests');\n\t                pendingRequest.reject(new Error(\"WebSocket disconnected\"));\n\t            });\n\n\t            /**\n\t             * Indicate that this client has been disconnected from the Respoke service.\n\t             * @event respoke.Client#disconnect\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            client.fire('disconnect');\n\n\t            if (clientSettings.reconnect !== true) {\n\t                socket = null;\n\t                return;\n\t            }\n\t            reconnect();\n\t        });\n\n\t        return deferred.promise;\n\t    };\n\n\t    /**\n\t     * Get ephemeral TURN credentials.  This method is called whenever a call is either\n\t     * sent or received, prior to creating a PeerConnection\n\t     *\n\t     * @memberof! respoke.SignalingChannel\n\t     * @private\n\t     * @method respoke.SignalingChannel.getTurnCredentials\n\t     * @return {Promise<Array>}\n\t     */\n\t    that.getTurnCredentials = function () {\n\t        var deferred = Q.defer();\n\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\n\t        wsCall({\n\t            httpMethod: 'GET',\n\t            path: '/v1/turn'\n\t        }).done(function successHandler(creds) {\n\t            var result = [];\n\n\t            if (!creds || !creds.uris) {\n\t                deferred.reject(new Error(\"Turn credentials empty.\"));\n\t                return;\n\t            }\n\n\t            creds.uris.forEach(function saveTurnUri(uri) {\n\t                var cred = null;\n\n\t                if (!uri) {\n\t                    return;\n\t                }\n\n\t                cred = createIceServer(uri, creds.username, creds.password);\n\t                result.push(cred);\n\t            });\n\n\t            if (result.length === 0) {\n\t                deferred.reject(new Error(\"Got no TURN credentials.\"));\n\t            }\n\n\t            log.debug('TURN creds', result);\n\t            deferred.resolve(result);\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\n\t        return deferred.promise;\n\t    };\n\n\t    /**\n\t     * Construct a websocket API call and return the formatted response and errors. The 'success'\n\t     * attribute indicates the success or failure of the API call. The 'response' attribute\n\t     * is an associative array constructed by json.decode. The 'error' attriute is a message.\n\t     * If the API call is successful but the server returns invalid JSON, error will be\n\t     * \"Invalid JSON.\" and response will be the unchanged content of the response body.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.wsCall\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} params.httpMethod\n\t     * @param {string} params.path\n\t     * @param {string} params.objectId\n\t     * @param {object} params.parameters\n\t     * @return {Promise<object>}\n\t     */\n\t    function wsCall(params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var start = now();\n\t        // Too many of these!\n\t        var logRequest = params.path.indexOf('messages') === -1 && params.path.indexOf('signaling') === -1;\n\t        var request;\n\t        var bodyLength = 0;\n\t        if (params.paramaters) {\n\t            bodyLength = encodeURI(JSON.stringify(params.parameters)).split(/%..|./).length - 1;\n\t        }\n\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\n\t        if (!params) {\n\t            deferred.reject(new Error('No params.'));\n\t            return deferred.promise;\n\t        }\n\n\t        if (!params.path) {\n\t            deferred.reject(new Error('No request path.'));\n\t            return deferred.promise;\n\t        }\n\n\t        if (bodyLength > bodySizeLimit) {\n\t            deferred.reject(new Error('Request body exceeds maximum size of ' + bodySizeLimit + ' bytes'));\n\t            return deferred.promise;\n\t        }\n\n\t        params.httpMethod = (params.httpMethod || 'get').toLowerCase();\n\n\t        if (params.objectId) {\n\t            params.path = params.path.replace(/\\%s/ig, params.objectId);\n\t        }\n\n\t        if (logRequest) {\n\t            log.debug('socket request', {\n\t                method: params.httpMethod,\n\t                path: params.path,\n\t                parameters: params.parameters\n\t            });\n\t        }\n\n\t        request = {\n\t            method: params.httpMethod,\n\t            path: params.path,\n\t            parameters: params.parameters,\n\t            tries: 0,\n\t            durationMillis: 0\n\t        };\n\n\t        request.id = pendingRequests.add(deferred);\n\n\t        function handleResponse(response) {\n\t            var thisHandler = this; // jshint ignore:line\n\t            /*\n\t             * Response:\n\t             *  {\n\t             *      body: {},\n\t             *      headers: {},\n\t             *      statusCode: 200\n\t             *  }\n\t             */\n\t            try {\n\t                response.body = JSON.parse(response.body);\n\t            } catch (e) {\n\t                if (typeof response.body !== 'object') {\n\t                    deferred.reject(new Error(\"Server response could not be parsed!\" + response.body));\n\t                    return;\n\t                }\n\t            }\n\n\t            if (response.statusCode === 429) {\n\t                if (request.tries < 3 && deferred.promise.isPending()) {\n\t                    setTimeout(function () {\n\t                        start = now();\n\t                        sendWebsocketRequest(request, handleResponse);\n\t                    }, 1000); // one day this will be response.interval or something\n\t                } else {\n\t                    request.durationMillis = now() - start;\n\t                    pendingRequests.remove(request.id);\n\t                    failWebsocketRequest(request, response.body,\n\t                            \"Too many retries after rate limit exceeded.\", deferred);\n\t                }\n\t                return;\n\t            }\n\n\t            request.durationMillis = now() - start;\n\t            pendingRequests.remove(request.id);\n\n\t            if ([200, 204, 205, 302, 401, 403, 404, 418].indexOf(thisHandler.status) === -1) {\n\t                failWebsocketRequest(request, response.body,\n\t                        response.body.error || errors[thisHandler.status] || \"Unknown error\", deferred);\n\t            } else {\n\t                deferred.resolve(response.body);\n\t            }\n\n\t            if (logRequest) {\n\t                log.debug('socket response', {\n\t                    method: request.method,\n\t                    path: request.path,\n\t                    durationMillis: request.durationMillis,\n\t                    response: response.body\n\t                });\n\t            }\n\t        }\n\n\t        start = now();\n\t        sendWebsocketRequest(request, handleResponse);\n\t        return deferred.promise;\n\t    }\n\n\t    function failWebsocketRequest(request, response, error, deferred) {\n\t        if (response && response.error) {\n\t            deferred.reject(new Error(error + '(' + request.method + ' ' + request.path + ')'));\n\t        } else {\n\t            deferred.resolve(response);\n\t        }\n\t    }\n\n\t    function sendWebsocketRequest(request, handleResponse) {\n\t        request.tries += 1;\n\t        socket.emit(request.method, JSON.stringify({\n\t            url: request.path,\n\t            data: request.parameters,\n\t            headers: {'App-Token': appToken}\n\t        }), handleResponse);\n\t    }\n\n\t    /**\n\t     * Construct an API call and return the formatted response and errors. The 'success'\n\t     * attribute indicates the success or failure of the API call. The 'response' attribute\n\t     * is an associative array constructed by json.decode. The 'error' attribute is a message.\n\t     * If the API call is successful but the server returns invalid JSON, error will be\n\t     * \"Invalid JSON.\" and response will be the unchanged content of the response body.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.call\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} params.httpMethod\n\t     * @param {string} params.objectId\n\t     * @param {string} params.path\n\t     * @param {object} params.parameters\n\t     * @returns {Promise}\n\t     */\n\t    function call(params) {\n\t        /* Params go in the URI for GET, DELETE, same format for\n\t         * POST and PUT, but they must be sent separately after the\n\t         * request is opened. */\n\t        var deferred = Q.defer();\n\t        var paramString = null;\n\t        var uri = null;\n\t        var response = {\n\t            'result': null,\n\t            'code': null\n\t        };\n\t        var start;\n\n\t        uri = clientSettings.baseURL + params.path;\n\n\t        if (!params) {\n\t            deferred.reject(new Error('No params.'));\n\t            return;\n\t        }\n\n\t        if (!params.httpMethod) {\n\t            deferred.reject(new Error('No HTTP method.'));\n\t            return;\n\t        }\n\n\t        if (!params.path) {\n\t            deferred.reject(new Error('No request path.'));\n\t            return;\n\t        }\n\n\t        if (params.objectId) {\n\t            params.path = params.path.replace(/\\%s/ig, params.objectId);\n\t        }\n\n\t        if (['GET', 'DELETE'].indexOf(params.httpMethod) > -1) {\n\t            uri += makeParamString(params.parameters);\n\t        }\n\n\t        xhr.open(params.httpMethod, uri);\n\t        if (appToken) {\n\t            xhr.setRequestHeader(\"App-Token\", appToken);\n\t        }\n\t        if (['POST', 'PUT'].indexOf(params.httpMethod) > -1) {\n\t            paramString = JSON.stringify(params.parameters);\n\t            if (paramString.length > bodySizeLimit) {\n\t                deferred.reject(new Error('Request body exceeds maximum size of ' + bodySizeLimit + ' bytes'));\n\t                return;\n\t            }\n\t            xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n\t        } else if (['GET', 'DELETE'].indexOf(params.httpMethod) === -1) {\n\t            deferred.reject(new Error('Illegal HTTP request method ' + params.httpMethod));\n\t            return;\n\t        }\n\t        log.debug('request', {\n\t            method: params.httpMethod,\n\t            uri: uri,\n\t            params: paramString\n\t        });\n\n\t        try {\n\t            xhr.send(paramString);\n\t        } catch (err) {\n\t            deferred.reject(err);\n\t            return;\n\t        }\n\n\t        xhr.onreadystatechange = function () {\n\t            var durationMillis = now() - start;\n\t            var limit;\n\t            var unit;\n\n\t            if (this.readyState !== 4) {\n\t                return;\n\t            }\n\t            if (this.status === 0) {\n\t                deferred.reject(new Error(\"Status is 0: Incomplete request, SSL error, or CORS error.\"));\n\t                return;\n\t            }\n\t            if ([200, 204, 205, 302, 401, 403, 404, 418].indexOf(this.status) > -1) {\n\t                response.code = this.status;\n\t                response.uri = uri;\n\t                response.params = params.parameters;\n\t                response.error = errors[this.status];\n\t                if (this.response) {\n\t                    try {\n\t                        response.result = JSON.parse(this.response);\n\t                    } catch (e) {\n\t                        response.result = this.response;\n\t                        response.error = \"Invalid JSON.\";\n\t                    }\n\t                }\n\t                log.debug('response', {\n\t                    method: params.httpMethod,\n\t                    durationMillis: durationMillis,\n\t                    response: response\n\t                });\n\t                deferred.resolve(response);\n\t            } else if (this.status === 429) {\n\t                unit = this.getResponseHeader('RateLimit-Time-Units');\n\t                limit = this.getResponseHeader('RateLimit-Limit');\n\t                deferred.reject(new Error(\"Rate limit of \" + limit + \"/\" + unit +\n\t                    \" exceeded. Try again in 1 \" + unit + \".\"));\n\t                return;\n\t            } else {\n\t                deferred.reject(new Error('unexpected response ' + this.status));\n\t                return;\n\t            }\n\t        };\n\n\t        return deferred.promise;\n\t    }\n\n\t    /**\n\t     * Turn key/value and key/list pairs into an HTTP URL parameter string.\n\t     * var1=value1&var2=value2,value3,value4\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.makeParamString\n\t     * @private\n\t     * @param {object} params - Arbitrary collection of strings and arrays to serialize.\n\t     * @returns {string}\n\t     */\n\t    function makeParamString(params) {\n\t        var strings = [];\n\t        if (!params) {\n\t            return '';\n\t        }\n\n\t        Object.keys(params).forEach(function formatParam(name) {\n\t            var value = params[name];\n\t            /* Skip objects -- We won't know how to name these. */\n\t            if (value instanceof Array) {\n\t                strings.push([name, value.join(',')].join('='));\n\t            } else if (typeof value !== 'object' && typeof value !== 'function') {\n\t                strings.push([name, value].join('='));\n\t            }\n\t        });\n\n\t        if (strings.length > 0) {\n\t            return '?' + strings.join('&');\n\t        } else {\n\t            return '';\n\t        }\n\t    }\n\n\t    return that;\n\t}; // End respoke.SignalingChannel\n\t/**\n\t * Handle an error that resulted from a method call.\n\t * @callback respoke.SignalingChannel.errorHandler\n\t * @params {Error} err\n\t */\n\t/**\n\t * Handle sending successfully.\n\t * @callback respoke.SignalingChannel.sendHandler\n\t */\n\t/**\n\t * Receive a group.\n\t * @callback respoke.SignalingChannel.groupHandler\n\t * @param {respoke.Group}\n\t */\n\t/**\n\t * Receive a list of groups.\n\t * @callback respoke.SignalingChannel.groupListHandler\n\t * @param {Array}\n\t */\n\t/**\n\t * Receive a list of TURN credentials.\n\t * @callback respoke.SignalingChannel.turnSuccessHandler\n\t * @param {Array}\n\t */\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t */\n\n\tvar log = __webpack_require__(18);\n\tvar Q = __webpack_require__(19);\n\tvar respoke = __webpack_require__(1);\n\n\t/**\n\t * A direct connection via RTCDataChannel, including state and path negotation.\n\t * @class respoke.DirectConnection\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {string} params\n\t * @param {string} params.instanceId - client id\n\t * @param {respoke.Call} params.call - The call that is handling state for this direct connection.\n\t * @param {boolean} [params.forceTurn] - If true, force the data to flow through relay servers instead of allowing\n\t * it to flow peer-to-peer. The relay acts like a blind proxy.\n\t * @param {string} params.connectionId - The connection ID of the remoteEndpoint.\n\t * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n\t * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n\t * @param {function} params.signalReport - Signaling action from SignalingChannel.\n\t * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n\t * @param {respoke.DirectConnection.onStart} [params.onStart] - Callback for when setup of the direct connection\n\t * begins. The direct connection will not be open yet.\n\t * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors that happen during\n\t * direct connection setup or media renegotiation.\n\t * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for closing the direct connection.\n\t * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for opening the direct connection.\n\t * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the request\n\t * for a direct connection and setup is about to begin.\n\t * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for incoming messages. Not usually\n\t * necessary to listen to this event if you are already listening to respoke.Endpoint#message.\n\t * @returns {respoke.DirectConnection}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\n\t    /**\n\t     * A name to identify this class\n\t     * @memberof! respoke.DirectConnection\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.DirectConnection';\n\t    /**\n\t     * The unique identifier of the direct connection.\n\t     *\n\t     * @memberof! respoke.DirectConnection\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = respoke.makeGUID();\n\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name call\n\t     * @type {respoke.Call}\n\t     */\n\t    if (!that.call.caller) {\n\t        that.call.caller = false;\n\t    }\n\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name dataChannel\n\t     * @type {RTCDataChannel}\n\t     * @private\n\t     */\n\t    var dataChannel = null;\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name client\n\t     * @type {respoke.Client}\n\t     * @private\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name pc\n\t     * @type {RTCPeerConnection}\n\t     * @private\n\t     */\n\t    var pc = params.pc;\n\t    delete params.pc;\n\n\t    /**\n\t     * When the datachannel is availble, we need to attach the callbacks. The event this function is attached to\n\t     * only fires for the callee.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.listenDataChannel\n\t     * @param {respoke.Event} evt\n\t     * @private\n\t     */\n\t    function listenDataChannel(evt) {\n\t        dataChannel = evt.channel;\n\t        dataChannel.onerror = onDataChannelError;\n\t        dataChannel.onmessage = onDataChannelMessage;\n\t        if (dataChannel.readyState === 'open') {\n\t            dataChannel.onopen = null;\n\t            onDataChannelOpen();\n\t        } else {\n\t            dataChannel.onopen = onDataChannelOpen;\n\t        }\n\t    }\n\n\t    /**\n\t     * Register any event listeners passed in as callbacks\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.saveParameters\n\t     * @param {object} params\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for when the direct connection\n\t     * is closed.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for when the direct connection\n\t     * is open.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for incoming messages.\n\t     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n\t     * connection.\n\t     * @param {respoke.DirectConnection.onStart} [params.onStart] - Callback for when the direct connection\n\t     * is being set up. The direct connection will not be open yet.\n\t     * @param {boolean} [params.forceTurn] - If true, force the data to flow through relay servers instead of allowing\n\t     * it to flow peer-to-peer. The relay acts like a blind proxy.\n\t     * @private\n\t     */\n\t    function saveParameters(params) {\n\t        /**\n\t         * The direct connection is open.\n\t         * @event respoke.DirectConnection#open\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.listen('open', params.onOpen);\n\t        /**\n\t         * The direct connection is closed.\n\t         * @event respoke.DirectConnection#close\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.listen('close', params.onClose);\n\t        /**\n\t         * Incoming message on this direct connection.\n\t         * @event respoke.DirectConnection#message\n\t         * @type {respoke.Event}\n\t         * @property {respoke.TextMessage} message\n\t         * @property {respoke.Endpoint} endpoint\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.listen('message', params.onMessage);\n\t        // documented elsewhere\n\t        that.listen('start', params.onStart);\n\t        /**\n\t         * An error occurred while setting up the direct connection.\n\t         * @event respoke.DirectConnection#error\n\t         * @type {respoke.Event}\n\t         * @property {string} reason - A human-readable description of the error.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.listen('error', params.onError);\n\t        pc.listen('direct-connection', listenDataChannel, true);\n\t        pc.listen('stats', function fireStats(evt) {\n\t            /**\n\t             * This event is fired every time statistical information about the direct connection\n\t             * becomes available.\n\t             * @event respoke.DirectConnection#stats\n\t             * @type {respoke.Event}\n\t             * @property {object} stats - an object with stats in it.\n\t             * @property {respoke.DirectConnection} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.fire('stats', {stats: evt.stats});\n\t        }, true);\n\n\t    }\n\t    saveParameters(params);\n\n\t    delete that.onOpen;\n\t    delete that.onClose;\n\t    delete that.onMessage;\n\n\t    /**\n\t     * Return media stats. Since we have to wait for both the answer and offer to be available before starting\n\t     * statistics, we'll return a promise for the stats object.\n\t     *\n\t     *     directConnection.getStats({\n\t     *         onStats: function (evt) {\n\t     *             console.log('Stats', evt.stats);\n\t     *         }\n\t     *     }).done(function () {\n\t     *         console.log('Stats started.');\n\t     *     }, function (err) {\n\t     *         console.log('Direct connection is already closed.');\n\t     *     });\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.getStats\n\t     * @returns {Promise<object>|undefined}\n\t     * @param {object} params\n\t     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive the\n\t     * stats if the Respoke stats module is loaded. If no callback is provided, the connection's report will\n\t     * contain stats but the developer will not receive them on the client-side.\n\t     * @param {respoke.DirectConnection.statsSuccessHandler} [params.onSuccess] - Success handler for this\n\t     * invocation of this method only.\n\t     * @param {respoke.DirectConnection.errorHandler} [params.onError] - Error handler for this invocation of\n\t     * this method only.\n\t     */\n\t    that.getStats = function (params) {\n\t        if (pc && pc.getStats) {\n\t            that.listen('stats', params.onStats);\n\t            delete params.onStats;\n\t            return pc.getStats(params);\n\t        }\n\t        return null;\n\t    };\n\n\t    if (!respoke.MediaStats) {\n\t        delete that.getStats;\n\t    }\n\n\t    /**\n\t     * Detect datachannel errors for internal state.\n\t     * @memberof! respoke.DirectConnection\n\t     * @private\n\t     * @method respoke.DirectConnection.onDataChannelError\n\t     */\n\t    function onDataChannelError(error) {\n\t        /**\n\t         * Indicate that an error has occurred setting up the direct connection.\n\t         * @event respoke.DirectConnection#error\n\t         * @type {respoke.Event}\n\t         * @property {object} error\n\t         * @property {respoke.DirectConnection} directConnection\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('error', {\n\t            error: error\n\t        });\n\t        that.close();\n\t    }\n\n\t    /**\n\t     * Receive and route messages to the Endpoint.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.onDataChannelMessage\n\t     * @private\n\t     * @param {MessageEvent}\n\t     * @fires respoke.DirectConnection#message\n\t     */\n\t    function onDataChannelMessage(evt) {\n\t        var message;\n\t        try {\n\t            message = JSON.parse(evt.data);\n\t        } catch (e) {\n\t            message = evt.data;\n\t        }\n\t        /**\n\t         * A message has been received over the direct connection.\n\t         * @event respoke.Endpoint#message\n\t         * @type {respoke.Event}\n\t         * @property {object} message\n\t         * @property {respoke.DirectConnection} directConnection\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.call.remoteEndpoint.fire('message', {\n\t            message: message,\n\t            directConnection: that\n\t        });\n\t        /**\n\t         * A message has been received over the direct connection.\n\t         * @event respoke.DirectConnection#message\n\t         * @type {respoke.Event}\n\t         * @property {object} message\n\t         * @property {respoke.Endpoint} endpoint\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('message', {\n\t            message: message,\n\t            endpoint: that.call.remoteEndpoint\n\t        });\n\t    }\n\n\t    /**\n\t     * Detect when the channel is open.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.onDataChannelOpen\n\t     * @private\n\t     * @param {MessageEvent}\n\t     * @fires respoke.DirectConnection#open\n\t     */\n\t    function onDataChannelOpen(evt) {\n\t        //dataChannel = evt.target || evt.channel;\n\t        /**\n\t         * The direct connection is open.\n\t         * @event respoke.DirectConnection#open\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('open');\n\t    }\n\n\t    /**\n\t     * Detect when the channel is closed.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.onDataChannelClose\n\t     * @private\n\t     * @param {MessageEvent}\n\t     * @fires respoke.DirectConnection#close\n\t     */\n\t    function onDataChannelClose(evt) {\n\t        //dataChannel = evt.target || evt.channel;\n\t        /**\n\t         * The direct connection is closed.\n\t         * @event respoke.DirectConnection#close\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('close');\n\t    }\n\n\t    /**\n\t     * Create the datachannel. For the caller, set up all the handlers we'll need to keep track of the\n\t     * datachannel's state and to receive messages.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.createDataChannel\n\t     * @private\n\t     */\n\t    function createDataChannel() {\n\t        dataChannel = pc.createDataChannel(\"respokeDataChannel\");\n\t        dataChannel.binaryType = 'arraybuffer';\n\t        dataChannel.onerror = onDataChannelError;\n\t        dataChannel.onmessage = onDataChannelMessage;\n\t        dataChannel.onopen = onDataChannelOpen;\n\n\t        /**\n\t         * The direct connection setup has begun. This does NOT mean it's ready to send messages yet. Listen to\n\t         * DirectConnection#open for that notification.\n\t         * @event respoke.DirectConnection#start\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('start');\n\t    }\n\n\t    /**\n\t     * Start the process of obtaining media. saveParameters will only be meaningful for the callee,\n\t     * since the library calls this method for the caller. Developers will use this method to pass in\n\t     * callbacks for the callee.\n\t     *\n\t     *     directConnection.accept({\n\t     *         onOpen: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.accept\n\t     * @fires respoke.DirectConnection#accept\n\t     * @param {object} params\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen]\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose]\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage]\n\t     */\n\t    that.accept = function (params) {\n\t        params = params || {};\n\t        log.debug('DirectConnection.accept');\n\t        saveParameters(params);\n\n\t        log.debug(\"I am \" + (pc.state.caller ? '' : 'not ') + \"the caller.\");\n\n\t        if (pc.state.caller === true) {\n\t            createDataChannel();\n\t        }\n\t        that.call.answer();\n\n\t        /**\n\t         * The request to open a direct connection has been accepted.\n\t         * @event respoke.DirectConnection#accept\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('accept');\n\t    };\n\n\t    /**\n\t     * Tear down the connection.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.close\n\t     * @fires respoke.DirectConnection#close\n\t     */\n\t    that.close = function (params) {\n\t        params = params || {};\n\t        log.debug(\"DirectConnection.close\");\n\n\t        if (that.call && that.call.remoteEndpoint) {\n\t            that.call.remoteEndpoint.directConnection = null;\n\t        }\n\n\t        if (dataChannel) {\n\t            dataChannel.close();\n\t        }\n\n\t        /**\n\t         * The direct connection has been closed.\n\t         * @event respoke.DirectConnection#close\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('close');\n\n\t        that.ignore();\n\n\t        if (that.call && params.skipRemove !== true) {\n\t            that.call.removeDirectConnection();\n\t        }\n\n\t        dataChannel = null;\n\t        that.call = null;\n\t        pc = null;\n\t    };\n\n\t    /**\n\t     * Send a message over the datachannel in the form of a JSON-encoded plain old JavaScript object. Only one\n\t     * attribute may be given: either a string 'message' or an object 'object'.\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     *\n\t     *     directConnection.sendMessage({\n\t     *         message: \"And they say HTTP is stateless!\"\n\t     *     });\n\t     *\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.sendMessage\n\t     * @param {object} params\n\t     * @param {string} [params.message] - The message to send.\n\t     * @param {object} [params.object] - An object to send.\n\t     * @param {respoke.DirectConnection.sendHandler} [params.onSuccess] - Success handler for this invocation\n\t     * of this method only.\n\t     * @param {respoke.DirectConnection.errorHandler} [params.onError] - Error handler for this invocation\n\t     * of this method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t        if (that.isActive()) {\n\t            dataChannel.send(JSON.stringify(params.object || {\n\t                message: params.message\n\t            }));\n\t            deferred.resolve();\n\t        } else {\n\t            deferred.reject(new Error(\"dataChannel not in an open state.\"));\n\t        }\n\t        return retVal;\n\t    };\n\n\t    /**\n\t     * Expose close as reject for approve/reject workflow.\n\t     *\n\t     *     client.listen('direct-connection, function (evt) {\n\t     *         if (iDontLikeThisPerson()) {\n\t     *             evt.directConnection.reject();\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.reject\n\t     * @param {boolean} signal - Optional flag to indicate whether to send or suppress sending\n\t     * a hangup signal to the remote side.\n\t     */\n\t    that.reject = that.close;\n\n\t    /**\n\t     * Indicate whether a datachannel is being setup or is in progress.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.isActive\n\t     * @returns {boolean}\n\t     */\n\t    that.isActive = function () {\n\t        // Why does pc.iceConnectionState not transition into 'connected' even though media is flowing?\n\t        //return (pc && pc.isActive() && dataChannel && dataChannel.readyState === 'open');\n\t        return (dataChannel && dataChannel.readyState === 'open');\n\t    };\n\n\t    return that;\n\t}; // End respoke.DirectConnection\n\n\t/**\n\t * Called when the direct connection is closed.  This callback is called every time respoke.DirectConnection#close\n\t * fires.\n\t * @callback respoke.DirectConnection.onClose\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Called when the setup of the direct connection has begun. The direct connection will not be open yet. This\n\t * callback is called every time respoke.DirectConnection#start fires.\n\t * @callback respoke.DirectConnection.onStart\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Called when the direct connection is opened.  This callback is called every time respoke.DirectConnection#open\n\t * fires.\n\t * @callback respoke.DirectConnection.onOpen\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Called when a message is received over the direct connection.  This callback is called every time\n\t * respoke.DirectConnection#message fires.\n\t * @callback respoke.DirectConnection.onMessage\n\t * @param {respoke.Event} evt\n\t * @param {object} evt.message\n\t * @param {respoke.Endpoint} evt.endpoint\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Handle an error that resulted from a specific method call. This handler will not fire more than once.\n\t * @callback respoke.DirectConnection.errorHandler\n\t * @param {Error} err\n\t */\n\t/**\n\t * When a call is in setup or media renegotiation happens. This callback will be called every time\n\t * respoke.DirectConnection#error.\n\t * @callback respoke.DirectConnection.onError\n\t * @param {respoke.Event} evt\n\t * @param {boolean} evt.reason - A human-readable description of the error.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Called when the callee accepts the direct connection. This callback is called every time\n\t * respoke.DirectConnection#accept is fired.\n\t * @callback respoke.DirectConnection.onAccept\n\t * @param {respoke.Event} evt\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Handle the successful kick-off of stats on a call.\n\t * @callback respoke.DirectConnection.statsSuccessHandler\n\t * @param {respoke.Event} evt\n\t * @param {object} evt.stats - an object with stats in it.\n\t * @param {respoke.DirectConnection} evt.target\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * Handle sending successfully.\n\t * @callback respoke.DirectConnection.sendHandler\n\t */\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\n\tvar log = __webpack_require__(18);\n\tvar Q = __webpack_require__(19);\n\tvar respoke = __webpack_require__(1);\n\n\t/**\n\t * WebRTC PeerConnection. This class handles all the state and connectivity for Call and DirectConnection.\n\t * This class cannot be used alone, but is instantiated by and must be given media by either Call, DirectConnection,\n\t * or the not-yet-implemented ScreenShare.\n\t * @class respoke.PeerConnection\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.instanceId - client id\n\t * @param {boolean} [params.forceTurn] - If true, delete all 'host' and 'srvflx' candidates and send only 'relay'\n\t * candidates.\n\t * @param {boolean} [params.disableTurn] - If true, delete all 'relay' candidates and send only 'host' and 'srvflx'\n\t * candidates.\n\t * @param {respoke.Call} params.call\n\t * @param {string} params.connectionId - The connection ID of the remoteEndpoint.\n\t * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n\t * @param {function} params.signalModify - Signaling action from SignalingChannel.\n\t * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n\t * @param {function} params.signalReport - Signaling action from SignalingChannel.\n\t * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n\t * @param {respoke.Call.onHangup} [params.onHangup] - Callback for the developer to be notified about hangup.\n\t * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for the developer to receive\n\t * statistics about the call. This is only used if call.getStats() is called and the stats module is loaded.\n\t * @param {object} [params.pcOptions]\n\t * @param {object} [params.offerOptions]\n\t * @returns {respoke.PeerConnection}\n\t */\n\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.PeerConnection';\n\n\t    /**\n\t     * Whether or not we will send a 'hangup' signal to the other side during hangup.\n\t     * @memberof! respoke.PeerConnection\n\t     * @name toSendHangup\n\t     * @type {respoke.Endpoint}\n\t     */\n\t    var toSendHangup;\n\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @private\n\t     * @name pc\n\t     * @type RTCPeerConnection\n\t     * @desc The RTCPeerConnection as provided by the browser API. All internal state, networking functionality, and\n\t     * raw data transfer occurs within the PeerConnection.\n\t     */\n\t    var pc = null;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name defModify\n\t     * @private\n\t     * @type {Promise}\n\t     * @desc Used in the state machine to trigger methods or functions whose execution depends on the reception,\n\t     * handling, or sending of some information.\n\t     */\n\t    var defModify;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name previewLocalMedia\n\t     * @private\n\t     * @type {respoke.Call.previewLocalMedia}\n\t     * @desc A callback provided by the developer that we'll call after receiving local media and before\n\t     * approve() is called.\n\t     */\n\t    var previewLocalMedia = typeof params.previewLocalMedia === 'function' ? params.previewLocalMedia : undefined;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name candidateSendingQueue\n\t     * @private\n\t     * @type {array}\n\t     * @desc An array to save candidates between offer and answer so that both parties can process them simultaneously.\n\t     */\n\t    var candidateSendingQueue = respoke.queueFactory();\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name candidateReceivingQueue\n\t     * @private\n\t     * @type {array}\n\t     * @desc An array to save candidates between offer and answer so that both parties can process them simultaneously.\n\t     */\n\t    var candidateReceivingQueue = respoke.queueFactory();\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name client\n\t     * @private\n\t     * @type {respoke.Client}\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalOffer\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalOffer = params.signalOffer;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalConnected\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalConnected = params.signalConnected;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalModify\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalModify = params.signalModify;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalAnswer\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalAnswer = params.signalAnswer;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalHangup\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalHangup = respoke.once(params.signalHangup);\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalReport\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalReport = params.signalReport;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalCandidateOrig\n\t     * @private\n\t     * @type {function}\n\t     * @desc A temporary function saved from params in order to construct the candidate signaling function.\n\t     */\n\t    var signalCandidateOrig = params.signalCandidate;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalCandidate\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed from the one passed to us by the signaling channel with additions\n\t     * to facilitate candidate logging.\n\t     */\n\t    function signalCandidate(params) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\n\t        params.iceCandidates = [params.candidate];\n\t        signalCandidateOrig(params);\n\t        that.report.candidatesSent.push({candidate: params.candidate});\n\t    }\n\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name offerOptions\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var offerOptions = params.offerOptions || {};\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name pcOptions\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var pcOptions = params.pcOptions || {\n\t        optional: [\n\t            { DtlsSrtpKeyAgreement: true },\n\t            { RtpDataChannels: false }\n\t        ]\n\t    };\n\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name report\n\t     * @type {object}\n\t     */\n\t    that.report = {\n\t        callStarted: 0,\n\t        callStopped: 0,\n\t        callerendpoint: that.call.caller ? client.name : that.call.remoteEndpoint.id,\n\t        callerconnection: that.call.caller ? client.id : that.call.connectionId,\n\t        calleeendpoint: that.call.caller ? that.call.remoteEndpoint.id : client.id,\n\t        calleeconnection: that.call.caller ? that.call.connectionId : client.connectionId,\n\t        sessionId: that.call.id,\n\t        lastSDPString: '',\n\t        sdpsSent: [],\n\t        sdpsReceived: [],\n\t        candidatesSent: [],\n\t        candidatesReceived: [],\n\t        userAgent: navigator.userAgent,\n\t        os: navigator.platform\n\t    };\n\n\t    /**\n\t     * Start the process of network and media negotiation. Called after local video approved.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.initOffer\n\t     * @fires respoke.PeerConnection#initOffer\n\t     * @private\n\t     */\n\t    function initOffer() {\n\t        if (!pc) {\n\t            return;\n\t        }\n\n\t        if (that.state.receiveOnly) {\n\t            makeOptionsReceiveOnly(offerOptions);\n\t        }\n\n\t        if (that.state.sendOnly) {\n\t            makeOptionsSendOnly(offerOptions);\n\t        }\n\n\t        log.info('creating offer', offerOptions);\n\t        pc.createOffer(saveOfferAndSend, function errorHandler(p) {\n\t            log.error('createOffer failed');\n\t        }, offerOptions);\n\t    }\n\n\t    function makeOptionsReceiveOnly(options) {\n\t        if (navigator.webkitGetUserMedia) {\n\t            offerOptions = {\n\t                mandatory: {\n\t                    OfferToReceiveVideo: true,\n\t                    OfferToReceiveAudio: true\n\t                }\n\t            };\n\t        } else {\n\t            offerOptions.offerToReceiveVideo = true;\n\t            offerOptions.offerToReceiveAudio = true;\n\t        }\n\t    }\n\n\t    function makeOptionsSendOnly(options) {\n\t        if (navigator.webkitGetUserMedia) {\n\t            offerOptions = {\n\t                mandatory: {\n\t                    OfferToSendVideo: true,\n\t                    OfferToSendAudio: true\n\t                }\n\t            };\n\t        } else {\n\t            offerOptions.offerToSendVideo = true;\n\t            offerOptions.offerToSendAudio = true;\n\t        }\n\t    }\n\n\t    /**\n\t     * Process a remote offer if we are not the caller. This is necessary because we don't process the offer until\n\t     * the callee has answered the call.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.processOffer\n\t     * @param {RTCSessionDescriptor}\n\t     * @returns {Promise}\n\t     */\n\t    that.processOffer = function (oOffer) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        log.debug('processOffer', oOffer);\n\n\t        that.report.sdpsReceived.push(oOffer);\n\t        that.report.lastSDPString = oOffer.sdp;\n\n\t        //set flags for audio / video being offered\n\t        that.call.hasDataChannel = respoke.sdpHasDataChannel(oOffer.sdp);\n\n\t        try {\n\t            pc.setRemoteDescription(new RTCSessionDescription(oOffer),\n\t                function successHandler() {\n\t                    if (!pc) {\n\t                        return;\n\t                    }\n\n\t                    processReceivingQueue();\n\t                    log.debug('set remote desc of offer succeeded');\n\t                    pc.createAnswer(function successHandler(oSession) {\n\t                        that.state.processedRemoteSDP = true;\n\t                        saveAnswerAndSend(oSession);\n\t                    }, function errorHandler(err) {\n\t                        err = new Error(\"Error creating SDP answer.\" + err.message);\n\t                        that.report.callStoppedReason = err.message;\n\t                        /**\n\t                         * This event is fired on errors that occur during call setup or media negotiation.\n\t                         * @event respoke.Call#error\n\t                         * @type {respoke.Event}\n\t                         * @property {string} reason - A human readable description about the error.\n\t                         * @property {respoke.Call} target\n\t                         * @property {string} name - the event name.\n\t                         */\n\t                        that.call.fire('error', {\n\t                            message: err.message\n\t                        });\n\t                        log.error('create answer failed');\n\t                        that.report.callStoppedReason = 'setRemoteDescription failed at answer.';\n\t                        that.close();\n\t                    });\n\t                }, function errorHandler(err) {\n\t                    err = new Error('Error calling setRemoteDescription on offer I received.' + err.message);\n\t                    that.report.callStoppedReason = err.message;\n\t                    /**\n\t                     * This event is fired on errors that occur during call setup or media negotiation.\n\t                     * @event respoke.Call#error\n\t                     * @type {respoke.Event}\n\t                     * @property {string} reason - A human readable description about the error.\n\t                     * @property {respoke.Call} target\n\t                     * @property {string} name - the event name.\n\t                     */\n\t                    that.call.fire('error', {\n\t                        message: err.message\n\t                    });\n\t                }\n\t            );\n\t        } catch (err) {\n\t            var newErr = new Error(\"Exception calling setRemoteDescription on offer I received.\" + err.message);\n\t            that.report.callStoppedReason = newErr.message;\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.call.fire('error', {\n\t                message: newErr.message\n\t            });\n\t        }\n\t    };\n\n\t    /**\n\t     * Return media stats. Since we have to wait for both the answer and offer to be available before starting\n\t     * statistics, we'll return a promise for the stats object.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.getStats\n\t     * @returns {Promise<{respoke.MediaStatsParser}>|undefined}\n\t     * @param {object} params\n\t     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onSuccess] - Success handler for this\n\t     * invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @fires respoke.PeerConnection#stats\n\t     */\n\t    function getStats(params) {\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n\t        if (!respoke.MediaStats) {\n\t            deferred.reject(new Error(\"Statistics module is not loaded.\"));\n\t            return retVal;\n\t        }\n\n\t        function onConnect() {\n\t            var stats = respoke.MediaStatsParser({\n\t                peerConnection: pc,\n\t                interval: params.interval,\n\t                onStats: function statsHandler(stats) {\n\t                    if (!pc) {\n\t                        return;\n\t                    }\n\n\t                    /**\n\t                     * This event is fired every 5 seconds by default, configurable by the 'interval' property to\n\t                     * `call.startStats` and reports the current state of media statistics.\n\t                     * @event respoke.PeerConnection#stats\n\t                     * @type {respoke.Event}\n\t                     * @property {object} stats - an object with stats in it.\n\t                     * @property {string} name - the event name.\n\t                     * @property {respoke.PeerConnection}\n\t                     */\n\t                    that.fire('stats', {\n\t                        stats: stats\n\t                    });\n\t                }\n\t            });\n\t            that.listen('close', function closeHandler(evt) {\n\n\t                stats.stopStats();\n\t            }, true);\n\t            deferred.resolve();\n\t        }\n\n\t        if (!pc) {\n\t            that.once('stream-received', onConnect);\n\t        } else {\n\t            onConnect();\n\t        }\n\n\t        return retVal;\n\t    }\n\n\t    if (respoke.MediaStats) {\n\t        that.getStats = getStats;\n\t    }\n\n\t    /**\n\t     * Create the RTCPeerConnection and add handlers. Process any offer we have already received.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.init\n\t     */\n\t    that.init = function init() {\n\t        log.debug('PC.init');\n\n\t        if (pc) {\n\t            return;\n\t        }\n\n\t        that.report.callStarted = new Date().getTime();\n\n\t        pc = new RTCPeerConnection(that.servers, pcOptions);\n\t        pc.onicecandidate = onIceCandidate;\n\t        pc.onnegotiationneeded = onNegotiationNeeded;\n\t        pc.oniceconnectionstatechange = onIceConnectionStateChange;\n\t        pc.onaddstream = function onaddstream(evt) {\n\t            /**\n\t             * Indicate the RTCPeerConnection has received remote media.\n\t             * @event respoke.PeerConnection#remote-stream-received\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('remote-stream-received', {\n\t                stream: evt.stream\n\t            });\n\t        };\n\t        pc.onremovestream = function onremovestream(evt) {\n\t            /**\n\t             * Indicate the remote side has stopped sending media.\n\t             * @event respoke.PeerConnection#remote-stream-removed\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('remote-stream-removed', {\n\t                stream: evt.stream\n\t            });\n\t        };\n\t        pc.ondatachannel = function ondatachannel(evt) {\n\t            /**\n\t             * CAUTION: This event is only called for the callee because RTCPeerConnection#ondatachannel\n\t             * is only called for the callee.\n\t             * @event respoke.PeerConnection#direct-connection\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('direct-connection', {\n\t                channel: evt.channel\n\t            });\n\t        };\n\n\t        that.state.listen('offering:entry', function (evt) {\n\t            if (that.state.caller) {\n\t                initOffer();\n\t            }\n\t        });\n\t    };\n\n\t    /**\n\t     * Return an array of remote media streams.\n\t     * @muremberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.getRemoteStreams\n\t     */\n\t    that.getRemoteStreams = function () {\n\t        if (!pc) {\n\t            return [];\n\t        }\n\t        return pc.getRemoteStreams.apply(pc, Array.prototype.slice.call(arguments));\n\t    };\n\n\t    /**\n\t     * Return an array of local media streams.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.getLocalStreams\n\t     */\n\t    that.getLocalStreams = function () {\n\t        if (!pc) {\n\t            return [];\n\t        }\n\t        return pc.getLocalStreams.apply(pc, Array.prototype.slice.call(arguments));\n\t    };\n\n\t    /**\n\t     * Create a data channel.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.createDataChannel\n\t     */\n\t    that.createDataChannel = function () {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        return pc.createDataChannel.apply(pc, Array.prototype.slice.call(arguments));\n\t    };\n\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.addStream\n\t     * Expose addStream.\n\t     * @param {RTCMediaStream}\n\t     */\n\t    that.addStream = function (stream) {\n\t        if (!pc) {\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.call.fire('error', {\n\t                message: \"Got local stream in a precall state.\"\n\t            });\n\t            return;\n\t        }\n\t        pc.addStream(stream);\n\t    };\n\n\t    /**\n\t     * Process a local ICE Candidate\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.onIceCandidate\n\t     * @private\n\t     * @param {RTCIceCandidate}\n\t     */\n\t    function onIceCandidate(oCan) {\n\t        var candidate = oCan.candidate; // {candidate: ..., sdpMLineIndex: ... }\n\t        if (!pc || !candidate || !candidate.candidate) {\n\t            return;\n\t        }\n\n\t        if (that.forceTurn === true && candidate.candidate.indexOf(\"typ relay\") === -1) {\n\t            log.debug(\"Dropping candidate because forceTurn is on.\");\n\t            return;\n\t        } else if (that.disableTurn === true && candidate.candidate.indexOf(\"typ relay\") !== -1) {\n\t            log.debug(\"Dropping candidate because disableTurn is on.\");\n\t            return;\n\t        }\n\n\t        candidateSendingQueue.push(candidate);\n\t    }\n\n\t    /**\n\t     * Handle ICE state change\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.onIceConnectionStateChange\n\t     * @private\n\t     */\n\t    function onIceConnectionStateChange(evt) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\n\t        if (pc.iceConnectionState === 'connected') {\n\t            /**\n\t             * Indicate that we've successfully connected to the remote side. This is only helpful for the\n\t             * outgoing connection.\n\t             * @event respoke.PeerConnection#connect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('connect');\n\t        }\n\t    }\n\n\t    /**\n\t     * Handle renegotiation\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.onNegotiationNeeded\n\t     * @private\n\t     */\n\t    function onNegotiationNeeded() {\n\t        log.warn(\"Negotiation needed.\");\n\t    }\n\n\t    /**\n\t     * Process any ICE candidates that we received from our browser before we were able to send\n\t     * our SDP to the other side.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.processSendingQueue\n\t     * @private\n\t     */\n\t    function processSendingQueue() {\n\t        candidateSendingQueue.trigger(function sendIce(can) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\n\t            signalCandidate({\n\t                candidate: can,\n\t                call: that.call\n\t            });\n\t        });\n\t    }\n\n\t    /**\n\t     * Process any ICE candidates that we received from the other side while we were waiting on the other\n\t     * party's SDP to arrive and be processed.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.processReceivingQueue\n\t     * @private\n\t     */\n\t    function processReceivingQueue() {\n\t        candidateReceivingQueue.trigger(function processIce(can) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\n\t            pc.addIceCandidate(new RTCIceCandidate(can.candidate), function onSuccess() {\n\t                log.debug((that.state.caller ? 'caller' : 'callee'), 'got a remote candidate.', can.candidate);\n\t                that.report.candidatesReceived.push(can.candidate);\n\t            }, function onError(e) {\n\t                log.error(\"Couldn't add ICE candidate: \" + e.message, can.candidate);\n\t            });\n\t        });\n\t    }\n\n\t    /**\n\t     * Save an SDP we've gotten from the browser which will be an offer and send it to the other\n\t     * side.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.saveOfferAndSend\n\t     * @param {RTCSessionDescription}\n\t     * @private\n\t     */\n\t    function saveOfferAndSend(oSession) {\n\t        oSession.type = 'offer';\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        log.debug('setting and sending offer', oSession);\n\t        that.report.sdpsSent.push(oSession);\n\n\t        pc.setLocalDescription(oSession, function successHandler(p) {\n\t            oSession.type = 'offer';\n\t            signalOffer({\n\t                call: that.call,\n\t                sessionDescription: oSession,\n\t                onSuccess: function () {\n\t                    that.state.sentSDP = true;\n\t                    processSendingQueue();\n\t                },\n\t                onError: function (err) {\n\t                    respoke.log.error('offer could not be sent', err);\n\t                    that.call.hangup({signal: false});\n\t                }\n\t            });\n\t        }, function errorHandler(p) {\n\t            var err = new Error('Error calling setLocalDescription on offer I created.');\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.call.fire('error', {\n\t                message: err.message\n\t            });\n\t        });\n\t    }\n\n\t    /**\n\t     * Save our SDP we've gotten from the browser which will be an answer and send it to the\n\t     * other side.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.saveAnswerAndSend\n\t     * @param {RTCSessionDescription}\n\t     * @private\n\t     */\n\t    function saveAnswerAndSend(oSession) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\n\t        if (!that.state.caller) {\n\t            that.report.callerconnection = that.call.connectionId;\n\t        }\n\n\t        oSession.type = 'answer';\n\t        log.debug('setting and sending answer', oSession);\n\t        that.report.sdpsSent.push(oSession);\n\n\t        pc.setLocalDescription(oSession, function successHandler(p) {\n\t            oSession.type = 'answer';\n\t            signalAnswer({\n\t                sessionDescription: oSession,\n\t                call: that.call,\n\t                onSuccess: processSendingQueue\n\t            });\n\t            that.state.sentSDP = true;\n\t        }, function errorHandler(p) {\n\t            var err = new Error('Error calling setLocalDescription on answer I created.');\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.call.fire('error', {\n\t                message: err.message\n\t            });\n\t        });\n\t    }\n\n\t    /**\n\t     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n\t     * signal is not false and we have not received a hangup signal from the remote party.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.close\n\t     * @fires respoke.PeerConnection#destoy\n\t     * @param {object} param\n\t     * @param {boolean} [param.signal] - Optional flag to indicate whether to send or suppress sending\n\t     * a hangup signal to the remote side. This is set to false by the library if we're responding to a\n\t     * hangup signal.\n\t     * @fires respoke.PeerConnection#close\n\t     */\n\t    that.close = function (params) {\n\t        params = params || {};\n\t        toSendHangup = true;\n\n\t        if (that.state.caller === true) {\n\t            if (!that.state.sentSDP) {\n\t                // Never send hangup if we are the caller but we haven't sent any other signal yet.\n\t                toSendHangup = false;\n\t            }\n\t        }\n\n\t        toSendHangup = (typeof params.signal === 'boolean' ? params.signal : toSendHangup);\n\t        if (toSendHangup) {\n\t            log.info('sending hangup');\n\t            signalHangup({\n\t                call: that.call\n\t            });\n\t        }\n\n\t        that.report.callStopped = new Date().getTime();\n\n\t        /**\n\t         * Indicate that the RTCPeerConnection is closed.\n\t         * @event respoke.PeerConnection#close\n\t         * @type {respoke.Event}\n\t         * @property {boolean} sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.PeerConnection}\n\t         */\n\t        that.fire('close', {\n\t            sentSignal: toSendHangup\n\t        });\n\t        that.ignore();\n\n\t        if (pc && that.report) {\n\t            pc.close();\n\t        }\n\t        pc = null;\n\n\t        if (that.call.enableCallDebugReport) {\n\t            signalReport({\n\t                report: that.report\n\t            });\n\t        }\n\t        that.report = null;\n\t    };\n\t    that.close = respoke.once(that.close);\n\n\t    /**\n\t     * Indicate whether a call is being setup or is in progress.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.isActive\n\t     * @returns {boolean}\n\t     */\n\t    that.isActive = function () {\n\t        return !!(pc && ['completed', 'connected', 'new', 'checking'].indexOf(pc.iceConnectionState) > -1);\n\t    };\n\n\t    /**\n\t     * Save the answer and tell the browser about it.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.listenAnswer\n\t     * @param {object} evt\n\t     * @param {object} evt.signal - The signal, including the remote SDP and the connectionId of the endpoint who\n\t     * answered the call.\n\t     * @private\n\t     */\n\t    function listenAnswer(evt) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        log.debug('got answer', evt.signal);\n\n\t        that.report.sdpsReceived.push(evt.signal.sessionDescription);\n\t        that.state.sendOnly = respoke.sdpHasReceiveOnly(evt.signal.sessionDescription.sdp);\n\t        that.report.lastSDPString = evt.signal.sessionDescription.sdp;\n\n\t        if (that.state.caller) {\n\t            that.report.calleeconnection = evt.signal.fromConnection;\n\t        }\n\n\t        that.call.connectionId = evt.signal.fromConnection;\n\t        // TODO don't signal connected more than once.\n\t        signalConnected({\n\t            call: that.call\n\t        });\n\n\t        pc.setRemoteDescription(\n\t            new RTCSessionDescription(evt.signal.sessionDescription),\n\t            function successHandler() {\n\t                processReceivingQueue();\n\t                that.state.dispatch('receiveAnswer');\n\t            }, function errorHandler(p) {\n\t                var newErr = new Error(\"Exception calling setRemoteDescription on answer I received.\");\n\t                that.report.callStoppedReason = newErr.message;\n\t                /**\n\t                 * This event is fired on errors that occur during call setup or media negotiation.\n\t                 * @event respoke.Call#error\n\t                 * @type {respoke.Event}\n\t                 * @property {string} reason - A human readable description about the error.\n\t                 * @property {respoke.Call} target\n\t                 * @property {string} name - the event name.\n\t                 */\n\t                that.call.fire('error', {\n\t                    message: newErr.message\n\t                });\n\t                log.error('set remote desc of answer failed', evt.signal.sessionDescription);\n\t                that.report.callStoppedReason = 'setRemoteDescription failed at answer.';\n\t                that.close();\n\t            }\n\t        );\n\t    }\n\n\t    /**\n\t     * Figure out who won the call. This necessary to prevent two connections of the same endpoint from thinking\n\t     * they are both on the same call.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.listenConnected\n\t     * @private\n\t     */\n\t    function listenConnected(evt) {\n\t        if (evt.signal.connectionId !== client.connectionId) {\n\t            log.debug(\"Hanging up because I didn't win the call.\", evt.signal, client);\n\t            that.call.hangup({signal: false});\n\t        }\n\t    }\n\n\t    /**\n\t     * Send the initiate signal to start the modify process. This method is only called by the caller of the\n\t     * renegotiation.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.startModify\n\t     * @param {object} params\n\t     * @param {object} [params.constraints] - Indicate this is a request for media and what type of media.\n\t     * @param {boolean} [params.directConnection] - Indicate this is a request for a direct connection.\n\t     */\n\t    that.startModify = function (params) {\n\t        defModify = Q.defer();\n\t        signalModify({\n\t            action: 'initiate',\n\t            call: that.call,\n\t            constraints: params.constraints,\n\t            directConnection: params.directConnection\n\t        });\n\t    };\n\n\t    /**\n\t     * Indicate a desire from the other side to renegotiate media.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.listenModify\n\t     * @param {object} evt\n\t     * @param {object} evt.signal\n\t     * @private\n\t     */\n\t    function listenModify(evt) {\n\t        var err;\n\t        log.debug('PC.listenModify', evt.signal);\n\n\t        if (evt.signal.action === 'accept') {\n\t            if (defModify.promise.isPending()) {\n\t                defModify.resolve();\n\t                /**\n\t                 * Indicate that the remote party has accepted our invitation to begin renegotiating media.\n\t                 * @event respoke.PeerConnection#modify-accept\n\t                 * @type {respoke.Event}\n\t                 * @property {string} name - the event name.\n\t                 * @property {respoke.PeerConnection}\n\t                 */\n\t                that.fire('modify-accept', {signal: evt.signal});\n\t            }\n\t            return;\n\t        } else if (evt.signal.action === 'reject') {\n\t            if (defModify.promise.isPending()) {\n\t                err = new Error(\"Remote party cannot negotiate.\");\n\t                log.debug(err.message);\n\t                defModify.reject(err);\n\t                /**\n\t                 * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n\t                 * @event respoke.PeerConnection#modify-reject\n\t                 * @type {respoke.Event}\n\t                 * @property {Error} err\n\t                 * @property {string} name - the event name.\n\t                 * @property {respoke.PeerConnection}\n\t                 */\n\t                that.fire('modify-reject', {err: err});\n\t            }\n\t            return;\n\t        }\n\n\t        // This code only gets executed if signal.action === 'initiate'\n\t        if (defModify && defModify.promise.isPending()) {\n\t            // TODO compare signal request ID and accept if we have the higher request ID,\n\t            // reject if we have the lower request ID.\n\t            err = new Error(\"Got modify in a negotiating state.\");\n\t            log.debug(err.message);\n\t            defModify.reject(err);\n\t            /**\n\t             * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n\t             * @event respoke.PeerConnection#modify-reject\n\t             * @type {respoke.Event}\n\t             * @property {Error} err\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('modify-reject', {err: err});\n\t            signalModify({\n\t                action: 'reject',\n\t                call: that.call\n\t            });\n\t            return;\n\t        }\n\n\t        defModify = Q.defer();\n\n\t        if (!that.state.sentSDP || that.state.isState('idle')) {\n\t            err = new Error(\"Got modify in a precall state.\");\n\t            /**\n\t             * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n\t             * @event respoke.PeerConnection#modify-reject\n\t             * @type {respoke.Event}\n\t             * @property {Error} err\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('modify-reject', {err: err});\n\t            signalModify({\n\t                action: 'reject',\n\t                call: that.call\n\t            });\n\t            defModify.reject(err);\n\t            return;\n\t        }\n\n\t       /**\n\t         * Indicate that the remote party has accepted our invitation to begin renegotiating media.\n\t         * @event respoke.PeerConnection#modify-accept\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.PeerConnection}\n\t         */\n\t        that.fire('modify-accept', {signal: evt.signal});\n\t        signalModify({\n\t            action: 'accept',\n\t            call: that.call\n\t        });\n\t        defModify.resolve();\n\t    }\n\n\t    /**\n\t     * Save the candidate. If we initiated the call, place the candidate into the queue so\n\t     * we can process them after we receive the answer.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.addRemoteCandidate\n\t     * @param {object} params\n\t     * @param {RTCIceCandidate} params.candidate\n\t     */\n\t    that.addRemoteCandidate = function (params) {\n\t        if (!pc && (that.state.sentSDP || that.state.receivedSDP)) { // we hung up.\n\t            return;\n\t        }\n\n\t        if (!params || !params.candidate || !params.candidate.hasOwnProperty('sdpMLineIndex')) {\n\t            log.warn(\"addRemoteCandidate got wrong format!\", params);\n\t            return;\n\t        }\n\n\t        candidateReceivingQueue.push(params);\n\t    };\n\n\t    that.call.listen('signal-answer', listenAnswer, true);\n\t    that.call.listen('signal-connected', listenConnected, true);\n\t    that.call.listen('signal-modify', listenModify, true);\n\n\t    return that;\n\t}; // End respoke.PeerConnection\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\n\tvar log = __webpack_require__(18);\n\tvar respoke = __webpack_require__(1);\n\tvar Statechart = __webpack_require__(20);\n\tvar Q = __webpack_require__(19);\n\n\t/**\n\t * State machine for WebRTC calling, data channels, and screen sharing.\n\t * NOTE: All state transitions are synchronous! However, listeners to the events this class fires will be called\n\t * asynchronously.\n\t * @class respoke.CallState\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {respoke.Call} call\n\t * @link https://cdn.respoke.io/respoke.min.js\n\t * @returns {respoke.CallState}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var fsm;\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    that.className = 'respoke.CallState';\n\t    delete that.instanceId;\n\n\t    var client = respoke.getClient(instanceId);\n\t    var allTimers = [];\n\t    var answerTimer;\n\t    var answerTimeout = params.answerTimeout || 10000;\n\t    var receiveAnswerTimer;\n\t    var receiveAnswerTimeout = params.receiveAnswerTimeout || 60000;\n\t    var connectionTimer;\n\t    var connectionTimeout = params.connectionTimeout || 10000;\n\t    var modifyTimer;\n\t    var modifyTimeout = params.modifyTimeout || 60000;\n\t    var oldRole;\n\n\t    /*\n\t     * These can quite often result in a condition in which they do not cause a transition to occur.\n\t     * There is at least one \"universal\" (air quotes) event which probably? shouldn't? but may\n\t     * result in a non-transition error when it's OK, and that is the 'reject' event.\n\t     */\n\t    var nontransitionEvents = ['receiveLocalMedia', 'receiveRemoteMedia', 'approve', 'answer', 'sentOffer',\n\t        'receiveAnswer'];\n\n\t    function assert(condition) {\n\t        if (!condition) {\n\t            throw new Error(\"Assertion failed.\");\n\t        }\n\t    }\n\n\t    that.hasLocalMediaApproval = false;\n\t    that.hasLocalMedia = false;\n\t    that.receivedBye = false;\n\t    that.isAnswered = false;\n\t    that.sentSDP = false;\n\t    that.receivedSDP = false;\n\t    that.processedRemoteSDP = false;\n\t    that.needDirectConnection = !!that.needDirectConnection;\n\t    that.sendOnly = !!that.sendOnly;\n\t    that.receiveOnly = !!that.receiveOnly;\n\n\t    // Event\n\t    var rejectEvent = [{\n\t        target: 'connected',\n\t        guard: function (params) {\n\t            // we have any media flowing or data channel open\n\t            if (typeof oldRole === 'boolean') {\n\t                // Reset the role if we have aborted a modify.\n\t                that.caller = oldRole;\n\t            }\n\n\t            if (modifyTimer) {\n\t                modifyTimer.clear();\n\t            }\n\n\t            return that.hasMedia();\n\t        }\n\t    }, {\n\t        target: 'terminated',\n\t        guard: function (params) {\n\t            params = params || {};\n\t            // we have no media flowing or data channel open\n\t            that.hangupReason = params.reason || \"no media\";\n\t            return !that.hasMedia();\n\t        }\n\t    }];\n\n\t    // Event\n\t    function rejectModify() {\n\t        // reject modification\n\t        if (modifyTimer) {\n\t            modifyTimer.clear();\n\t        }\n\t    }\n\n\t    // Event\n\t    function clearReceiveAnswerTimer() {\n\t        that.processedRemoteSDP = true;\n\t        if (receiveAnswerTimer) {\n\t            receiveAnswerTimer.clear();\n\t        }\n\t    }\n\n\t    // Event\n\t    var hangupEvent = {\n\t        target: 'terminated',\n\t        action: function (params) {\n\t            params = params || {};\n\t            that.signalBye = params.signal;\n\t            that.hangupReason = that.hangupReason || params.reason || \"none\";\n\t        }\n\t    };\n\n\t    function needToObtainMedia(params) {\n\t        return (that.needDirectConnection !== true && that.receiveOnly !== true);\n\t    }\n\n\t    function needToApproveDirectConnection(params) {\n\t        return (that.needDirectConnection === true && typeof params.previewLocalMedia === 'function');\n\t    }\n\n\t    function automaticOffering(params) {\n\t        if (that.caller !== true) {\n\t            return false;\n\t        }\n\n\t        if (!that.needDirectConnection && that.receiveOnly) {\n\t            return true;\n\t        }\n\t        return (that.needDirectConnection === true && typeof params.previewLocalMedia !== 'function');\n\t    }\n\n\t    function hasListener() {\n\t        if ((client.hasListeners('call') && !that.needDirectConnection) ||\n\t                (client.hasListeners('direct-connection') && that.needDirectConnection)) {\n\t            return true;\n\t        } else {\n\t            return false;\n\t        }\n\t    }\n\n\t    function createTimer(func, name, time) {\n\t        var id = setTimeout(function () {\n\t            id = null;\n\t            respoke.log.error((that.caller ? \"caller's\" : \"callee's\"), name, \"timer expired.\");\n\t            func();\n\t        }, time);\n\t        respoke.log.debug('setting timer', name, 'for', time / 1000, 'secs');\n\t        var timer  = {\n\t            name: name,\n\t            clear: function () {\n\t                if (id === null) {\n\t                    return;\n\t                }\n\t                respoke.log.debug('clearing', (that.caller ? \"caller's\" : \"callee's\"), 'timer', name);\n\t                clearTimeout(id);\n\t                id = null;\n\t            }\n\t        };\n\t        allTimers.push(timer);\n\t        return timer;\n\t    }\n\n\t    var stateParams = {\n\t        initialState: 'idle',\n\t        receiveLocalMedia: function () {\n\t            that.hasLocalMedia = true;\n\t        },\n\t        states: {\n\t            // State\n\t            idle: {\n\t                // Event\n\t                exit: function () {\n\t                    that.fire('idle:exit');\n\t                },\n\t                // Event\n\t                initiate: [{\n\t                    target: 'negotiatingContainer',\n\t                    guard: function (params) {\n\t                        assert(typeof params.caller === 'boolean');\n\t                        return (params.caller === true || hasListener());\n\t                    }\n\t                }, {\n\t                    target: 'terminated',\n\t                    guard: function (params) {\n\t                        return (params.caller !== true && !hasListener());\n\t                    }\n\t                }],\n\t                // Event\n\t                receiveOffer: {\n\t                    action: function (params) {\n\t                        that.receivedSDP = true;\n\t                    }\n\t                },\n\t                // Event\n\t                hangup: hangupEvent\n\t            },\n\t            // State\n\t            negotiatingContainer: {\n\t                init: \"preparing\",\n\t                // Event\n\t                hangup: hangupEvent,\n\t                // Event\n\t                modify: rejectModify,\n\t                states: {\n\t                    preparing: {\n\t                        // Event\n\t                        entry: {\n\t                            action: function () {\n\t                                that.hasLocalMediaApproval = false;\n\t                                that.hasLocalMedia = false;\n\t                                that.sentSDP = false;\n\t                                that.receivedSDP = false;\n\t                                that.processedRemoteSDP = false;\n\t                                that.isAnswered = false;\n\t                                if (!that.isModifying()) {\n\t                                    answerTimer = createTimer(function () {\n\t                                        that.dispatch('reject', {reason: \"answer own call timer \" + that.caller});\n\t                                    }, 'answer own call', answerTimeout);\n\t                                }\n\t                                that.fire('preparing:entry');\n\t                            }\n\t                        },\n\t                        // Event\n\t                        exit: function () {\n\t                            that.fire('preparing:exit');\n\t                            if (answerTimer) {\n\t                                answerTimer.clear();\n\t                            }\n\t                        },\n\t                        // Event\n\t                        reject: rejectEvent,\n\t                        // Event\n\t                        receiveOffer: {\n\t                            action: function (params) {\n\t                                that.receivedSDP = true;\n\t                                if (that.isAnswered) {\n\t                                    // If we get here, we are the callee and we've answered the call before the call\n\t                                    // creation/receive offer promise chain completed.\n\t                                    setTimeout(function () {\n\t                                        that.dispatch('answer', params);\n\t                                    });\n\t                                }\n\t                            }\n\t                        },\n\t                        // Event\n\t                        answer: [{\n\t                            action: function (params) {\n\t                                assert(!params.previewLocalMedia || typeof params.previewLocalMedia === 'function');\n\t                                that.isAnswered = true;\n\t                                if (typeof params.previewLocalMedia !== 'function') {\n\t                                    that.hasLocalMediaApproval = true;\n\t                                }\n\t                            }\n\t                        }, {\n\t                            // we are going to send media\n\t                            target: 'approvingDeviceAccess',\n\t                            guard: needToObtainMedia\n\t                        }, {\n\t                            // we are sending a direct connection & developer wants to approve\n\t                            target: 'approvingContent',\n\t                            guard: needToApproveDirectConnection\n\t                        }, {\n\t                            target: 'offering',\n\t                            guard: automaticOffering\n\t                        }, {\n\t                            // we are not sending anything or developer does not want to approve media.\n\t                            target: 'connecting',\n\t                            guard: function (params) {\n\t                                // caller will always answer before sending offer.\n\t                                // callee will usually answer after receiving offer if media is requested.\n\t                                if (!that.receivedSDP) {\n\t                                    return false;\n\t                                }\n\n\t                                if (needToObtainMedia(params) || needToApproveDirectConnection(params) ||\n\t                                        automaticOffering(params)) {\n\t                                    return false;\n\t                                }\n\n\t                                if (!params.previewLocalMedia || that.receiveOnly) {\n\t                                    setTimeout(function () {\n\t                                        params.approve();\n\t                                    });\n\t                                }\n\t                                return (that.receiveOnly === true || that.needDirectConnection === true);\n\t                            }\n\t                        }]\n\t                    },\n\t                    // State\n\t                    gettingMedia: {\n\t                        reject: rejectEvent,\n\t                        // Event\n\t                        receiveLocalMedia: [{\n\t                            action: function () {\n\t                                that.hasLocalMedia = true;\n\t                            }\n\t                        }, {\n\t                            target: 'offering',\n\t                            guard: function (params) {\n\t                                return (that.caller === true && that.hasLocalMediaApproval === true &&\n\t                                    that.hasLocalMedia === true);\n\t                            }\n\t                        }, {\n\t                            target: 'connecting',\n\t                            guard: function (params) {\n\t                                return (that.caller === false && that.hasLocalMediaApproval === true &&\n\t                                    that.hasLocalMedia === true);\n\t                            }\n\t                        }],\n\t                        states: {\n\t                            // State\n\t                            approvingDeviceAccess: {\n\t                                // Event\n\t                                entry: function () {\n\t                                    that.fire('approving-device-access:entry');\n\t                                },\n\t                                // Event\n\t                                approve: [{\n\t                                    target: 'approvingContent',\n\t                                    guard: function (params) {\n\t                                        return (typeof params.previewLocalMedia === 'function');\n\t                                    }\n\t                                }, {\n\t                                    target: 'connecting',\n\t                                    guard: function (params) {\n\t                                        return (that.caller === false &&\n\t                                            (that.hasLocalMedia === true || that.needDirectConnection === true) &&\n\t                                            typeof params.previewLocalMedia !== 'function');\n\t                                    }\n\t                                }, {\n\t                                    target: 'offering',\n\t                                    guard: function (params) {\n\t                                        return (that.caller === true && that.hasLocalMedia === true &&\n\t                                            typeof params.previewLocalMedia !== 'function');\n\t                                    }\n\t                                }]\n\t                            },\n\t                            // State\n\t                            approvingContent: {\n\t                                // Event\n\t                                entry: function () {\n\t                                    that.fire('approving-content:entry');\n\t                                },\n\t                                // Event\n\t                                exit: function () {\n\t                                    that.fire('approving-content:exit');\n\t                                },\n\t                                // Event\n\t                                approve: [function (params) {\n\t                                    that.hasLocalMediaApproval = true;\n\t                                }, {\n\t                                    target: 'offering',\n\t                                    guard: function (params) {\n\t                                        return (that.caller === true && that.hasLocalMedia === true);\n\t                                    }\n\t                                }, {\n\t                                    target: 'connecting',\n\t                                    guard: function (params) {\n\t                                        return (that.caller === false && that.hasLocalMedia === true);\n\t                                    }\n\t                                }]\n\t                            }\n\t                        }\n\t                    },\n\t                    // State\n\t                    offeringContainer: {\n\t                        init: 'offering',\n\t                        reject: rejectEvent,\n\t                        sentOffer: function () {\n\t                            // start answer timer\n\t                            receiveAnswerTimer = createTimer(function () {\n\t                                that.dispatch('reject', {reason: \"receive answer timer\"});\n\t                            }, 'receive answer', receiveAnswerTimeout);\n\t                        },\n\t                        states: {\n\t                            offering: {\n\t                                // Event\n\t                                entry: function () {\n\t                                    that.fire('offering:entry');\n\t                                },\n\t                                // Event\n\t                                exit: function () {\n\t                                    that.fire('offering:exit');\n\t                                },\n\t                                // Event\n\t                                receiveLocalMedia: [function () {\n\t                                    that.hasLocalMedia = true;\n\t                                }, {\n\t                                    target: 'connected',\n\t                                    guard: function (params) {\n\t                                        // for direct connection, local media is the same as remote media\n\t                                        return (that.needDirectConnection === true);\n\t                                    }\n\t                                }],\n\t                                // Event\n\t                                receiveRemoteMedia: {\n\t                                    target: 'connected'\n\t                                },\n\t                                // Event\n\t                                receiveAnswer: [clearReceiveAnswerTimer, {\n\t                                    target: 'connecting'\n\t                                }]\n\t                            }\n\t                        }\n\t                    },\n\t                    // State\n\t                    connectingContainer: {\n\t                        init: 'connecting',\n\t                        reject: rejectEvent,\n\t                        receiveAnswer: clearReceiveAnswerTimer,\n\t                        states: {\n\t                            connecting: {\n\t                                // Event\n\t                                entry: function () {\n\t                                    that.fire('connecting:entry');\n\n\t                                    // set connection timer\n\t                                    connectionTimer = createTimer(function () {\n\t                                        that.dispatch('reject', {reason: \"connection timer\"});\n\t                                    }, 'connection', connectionTimeout);\n\t                                },\n\t                                // Event\n\t                                exit: function () {\n\t                                    if (connectionTimer) {\n\t                                        connectionTimer.clear();\n\t                                    }\n\t                                    if (modifyTimer) {\n\t                                        modifyTimer.clear();\n\t                                    }\n\t                                    that.fire('connecting:exit');\n\t                                },\n\t                                // Event\n\t                                receiveLocalMedia: [{\n\t                                    action: function () {\n\t                                        that.hasLocalMedia = true;\n\t                                    }\n\t                                }, {\n\t                                    target: 'connected',\n\t                                    guard: function (params) {\n\t                                        // for direct connection, local media is the same as remote media\n\t                                        return (that.needDirectConnection === true && that.caller === false);\n\t                                    }\n\t                                }],\n\t                                // Event\n\t                                receiveRemoteMedia: {\n\t                                    target: 'connected'\n\t                                }\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            },\n\t            // State\n\t            // This state is for when we are in limbo between connected and negotiating and we are\n\t            // trying to figure out if the other side will allow us to modify. If we receive modify in\n\t            // this state, we will reject it. If the other party is in connected, we will be able to modify.\n\t            modifyingContainer: {\n\t                init: 'modifying',\n\t                reject: rejectEvent,\n\t                // Event\n\t                modify: rejectModify,\n\t                // Event\n\t                hangup: hangupEvent,\n\t                states: {\n\t                    modifying: {\n\t                        // Event\n\t                        entry: function () {\n\t                            modifyTimer = createTimer(function () {\n\t                                that.dispatch('reject', {reason: \"modify timer\"});\n\t                            }, 'modify for caller', modifyTimeout);\n\t                            that.fire('modifying:entry');\n\t                        },\n\t                        // Event\n\t                        accept: [function () {\n\t                            that.caller = true;\n\t                        }, {\n\t                            target: 'preparing'\n\t                        }],\n\t                        // Event\n\t                        exit: function () {\n\t                            that.fire('modifying:exit');\n\t                        }\n\t                    }\n\t                }\n\t            },\n\t            // State\n\t            connectedContainer: {\n\t                init: 'connected',\n\t                reject: {\n\t                    target: 'terminated',\n\t                    action: function (params) {\n\t                        that.hangupReason = params.reason || \"got reject while connected\";\n\t                    }\n\t                },\n\t                receiveAnswer: clearReceiveAnswerTimer,\n\t                // Event\n\t                hangup: hangupEvent,\n\t                states: {\n\t                    connected: {\n\t                        // Event\n\t                        entry: function () {\n\t                            oldRole = that.caller;\n\t                            that.needDirectConnection = false;\n\t                            that.fire('connected:entry');\n\t                        },\n\t                        // Event\n\t                        exit: function () {\n\t                            that.fire('connected:exit');\n\t                        },\n\t                        // Event\n\t                        modify: [{\n\t                            // be notified that the other side would like modification\n\t                            target: 'preparing',\n\t                            guard: function (params) {\n\t                                params = params || {};\n\t                                if (params.receive === true) {\n\t                                    that.caller = false;\n\t                                    modifyTimer = createTimer(function () {\n\t                                        // If modify gets interrupted, go back to previous roles.\n\t                                        that.dispatch('reject', {reason: \"modify timer\"});\n\t                                    }, 'modify', modifyTimeout);\n\t                                    return true;\n\t                                }\n\t                            }\n\t                        }, {\n\t                            // request to begin modification\n\t                            target: 'modifying',\n\t                            guard: function (params) {\n\t                                params = params || {};\n\t                                return (params.receive !== true);\n\t                            }\n\t                        }]\n\t                    }\n\t                }\n\t            },\n\t            // State\n\t            terminatedContainer: {\n\t                init: 'terminated',\n\t                states: {\n\t                    terminated: {\n\t                        // Event\n\t                        entry: {\n\t                            action: function () {\n\t                                that.fire('terminated:entry');\n\t                                allTimers.forEach(function (timer) {\n\t                                    timer.clear();\n\t                                });\n\t                                setTimeout(function () {\n\t                                    fsm = null;\n\t                                    that.ignore();\n\t                                });\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    };\n\n\t    stateParams.that = Object.create(Statechart);\n\t    fsm = respoke.Class(stateParams);\n\t    fsm.run({\n\t        // rename to 'debug' to enable\n\t        debugOff: function () {\n\t            // So we can print the caller. Debug most often used when testing & tests run in the same tab.\n\t            var args = Array.prototype.slice.call(arguments);\n\t            args.splice(0, 0, that.caller);\n\t            respoke.log.debug.apply(respoke.log, args);\n\t        }\n\t    });\n\n\t    /**\n\t     * Return the name of the current state.\n\t     * @memberof! respoke.CallState\n\t     * @method respoke.Call.getState\n\t     * @returns {string}\n\t     */\n\t    that.getState = function () {\n\t        if (!fsm) {\n\t            return 'terminated';\n\t        }\n\t        return fsm.currentState().name;\n\t    };\n\n\t    /**\n\t     * Synchronously dispatch an event, which may or may not change the state.\n\t     * @memberof! respoke.CallState\n\t     * @method respoke.Call.dispatch\n\t     */\n\t    that.dispatch = function (evt, args) {\n\t        var oldState;\n\t        var newState;\n\n\t        if (!fsm) {\n\t            return;\n\t        }\n\n\t        oldState = that.getState();\n\t        try {\n\t            fsm.dispatch(evt, args);\n\t        } catch (err) {\n\t            respoke.log.debug('error dispatching', evt, 'from', oldState, \"with\", args, err);\n\t            throw err;\n\t        }\n\t        newState = that.getState();\n\t        if (oldState === newState && nontransitionEvents.indexOf(evt) === -1) {\n\t            respoke.log.debug(that.caller, \"Possible bad event \" + evt + \", no transition occured.\");\n\t        }\n\t        respoke.log.debug(that.caller, 'dispatching', evt, 'moving from ', oldState, 'to', newState, args);\n\t    };\n\n\t    /**\n\t     * Determine whether or not we are in the middle of a call modification.\n\t     * @memberof! respoke.CallState\n\t     * @method respoke.Call.isModifying\n\t     * @returns {boolean}\n\t     */\n\t    that.isModifying = function () {\n\t        var modifyingStates = ['preparing', 'modifying', 'approvingDeviceAccess', 'approvingMedia', 'offering'];\n\t        return (modifyingStates.indexOf(that.getState()) > -1 && that.hasMedia());\n\t    };\n\n\t    /**\n\t     * Helper for testing state name\n\t     * @memberof! respoke.CallState\n\t     * @method respoke.Call.isState\n\t     * @param {string} name\n\t     * @returns {boolean}\n\t     */\n\t    that.isState = function (name) {\n\t        return (that.getState() === name);\n\t    };\n\n\t    assert(typeof that.hasMedia === 'function');\n\t    assert(typeof that.caller === 'boolean');\n\t    return that;\n\t};\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\n\tvar Q = __webpack_require__(19);\n\tvar log = __webpack_require__(18);\n\tvar respoke = __webpack_require__(1);\n\n\t/**\n\t * A `respoke.Call` is Respoke's interface into a WebRTC call, including getUserMedia,\n\t * path and codec negotation, and call state.\n\t * There are several methods on an instance of `respoke.Client` which return a `respoke.Call`.\n\t *\n\t * ```\n\t * var jim = client.getEndpoint({ id: 'jim' });\n\t * var call = jim.startAudioCall();\n\t * ```\n\t *\n\t * @class respoke.Call\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.instanceId - client id\n\t * @param {boolean} params.caller - whether or not we initiated the call\n\t * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t * @param {boolean} [params.sendOnly] - whether or not we send media\n\t * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t * relay servers. If it cannot flow through relay servers, the call will fail.\n\t * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t * required to flow peer-to-peer. If it cannot, the call will fail.\n\t * @param {respoke.Endpoint} params.remoteEndpoint - The endpoint who is being called.\n\t * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint.\n\t * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t * wants to perform an action between local media becoming available and calling approve().\n\t * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n\t * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n\t * @param {function} params.signalReport - Signaling action from SignalingChannel.\n\t * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n\t * @param {Array<RTCConstraints>} params.constraints - Array of WebRTC constraints.\n\t * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t * media renegotiation.\n\t * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t * element with the local audio and/or video attached.\n\t * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n\t * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n\t * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n\t * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t * This callback will be called when media is muted or unmuted.\n\t * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t * for the user to give permission to start getting audio or video.\n\t * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t * the approval was automatic.\n\t * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n\t * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n\t * granted by the browser without asking the user to approve it.\n\t * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n\t * video attached to it.\n\t * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n\t * video attached to it.\n\t * @returns {respoke.Call}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t    /**\n\t     * A name to identify the type of object.\n\t     * @memberof! respoke.Call\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Call';\n\n\t    /**\n\t     * Whether or not the client is the caller of the call.\n\t     * @memberof! respoke.Call\n\t     * @name caller\n\t     * @type {boolean}\n\t     */\n\t    that.caller = !!that.caller;\n\t    Object.defineProperty(that, \"initiator\", {\n\t        configurable: true,\n\t        enumerable: true,\n\t        get: function () {\n\t            log.warn(\"The call.initiator flag is deprecated. Please use call.caller instead.\");\n\t            return that.caller;\n\t        },\n\t        set: function () {\n\t            // ignore\n\t        }\n\t    });\n\n\t    if (!that.caller) {\n\t        // Don't let Respoke.js pass any default constraints if we're accepting the call. We have no freaking clue\n\t        // what kind of media we are expected to provide at this point.\n\t        delete params.constraints;\n\t        that.constraints = [];\n\t    }\n\n\t    /**\n\t     * The call ID.\n\t     * @memberof! respoke.Call\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = that.caller ? respoke.makeGUID() : that.id;\n\n\t    if (!that.id) {\n\t        throw new Error(\"Can't start a new call without a call id.\");\n\t    }\n\n\t    /**\n\t     * Promise used to trigger actions dependant upon having received media or a datachannel.\n\t     * @memberof! respoke.Call\n\t     * @name defMedia\n\t     * @private\n\t     * @type {Promise}\n\t     */\n\t    var defMedia = Q.defer();\n\t    /**\n\t     * Promise used to trigger notification of a request for renegotiating media. For the caller of the\n\t     * renegotiation (which doesn't have to be the same as the caller of the call), this is resolved\n\t     * or rejected as soon as the 'accept' or 'reject' signal is received. For the callee, it is\n\t     * resolved or rejected only after the developer or user approves or rejects the modify.\n\t     * @memberof! respoke.Call\n\t     * @name defModify\n\t     * @private\n\t     * @type {Promise}\n\t     */\n\t    var defModify;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name previewLocalMedia\n\t     * @private\n\t     * @type {respoke.Call.previewLocalMedia}\n\t     */\n\t    var previewLocalMedia = params.previewLocalMedia;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name client\n\t     * @private\n\t     * @type {respoke.getClient}\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name signalingChannel\n\t     * @private\n\t     * @type {respoke.signalingChannel}\n\t     */\n\t    var signalingChannel = params.signalingChannel;\n\n\t    /**\n\t     * Informational property. Whether call debugs were enabled on the client during creation.\n\t     * Changing this value will do nothing.\n\t     * @name enableCallDebugReport\n\t     * @type {boolean}\n\t     */\n\t    that.enableCallDebugReport = params.signalingChannel.isSendingReport();\n\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name pc\n\t     * @private\n\t     * @type {respoke.PeerConnection}\n\t     */\n\t    var pc = respoke.PeerConnection({\n\t        instanceId: instanceId,\n\t        state: respoke.CallState({\n\t            instanceId: instanceId,\n\t            caller: that.caller,\n\t            needDirectConnection: params.needDirectConnection,\n\t            sendOnly: params.sendOnly,\n\t            receiveOnly: params.receiveOnly,\n\t            // hasMedia is not defined yet.\n\t            hasMedia: function () {\n\t                return that.hasMedia();\n\t            }\n\t        }),\n\t        forceTurn: !!params.forceTurn,\n\t        call: that,\n\t        pcOptions: {\n\t            optional: [\n\t                { DtlsSrtpKeyAgreement: true },\n\t                { RtpDataChannels: false }\n\t            ]\n\t        },\n\t        offerOptions: params.offerOptions || null,\n\t        signalOffer: function (args) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\n\t            params.signalOffer(args);\n\t            pc.state.dispatch('sentOffer');\n\t        },\n\t        signalConnected: params.signalConnected,\n\t        signalAnswer: params.signalAnswer,\n\t        signalModify: params.signalModify,\n\t        signalHangup: params.signalHangup,\n\t        signalReport: params.signalReport,\n\t        signalCandidate: params.signalCandidate\n\t    });\n\n\t    /**\n\t     * Array of streams of local media that we are sending to the remote party.\n\t     * @name outgoingMediaStreams\n\t     * @type {Array<respoke.LocalMedia>}\n\t     */\n\t    that.outgoingMediaStreams = [];\n\t    that.outgoingMediaStreams.hasAudio = function () {\n\t        if (that.outgoingMediaStreams.length === 0) {\n\t            return false;\n\t        }\n\n\t        return !that.outgoingMediaStreams.every(function (stream) {\n\t            return stream.getAudioTracks().length === 0;\n\t        });\n\t    };\n\t    that.outgoingMediaStreams.hasVideo = function () {\n\t        if (that.outgoingMediaStreams.length === 0) {\n\t            return false;\n\t        }\n\n\t        return !that.outgoingMediaStreams.every(function (stream) {\n\t            return stream.getVideoTracks().length === 0;\n\t        });\n\t    };\n\n\t    /**\n\t     * Local media that we are sending to the remote party. This will be undefined if we are sending no media.\n\t     * This property is just the first item in the `outgoingMediaStreams` array. If multiple streams are present,\n\t     * use that array to find the stream you need instead of relying on this property.\n\t     * @name outgoingMedia\n\t     * @type {respoke.LocalMedia}\n\t     */\n\t    Object.defineProperty(that, \"outgoingMedia\", {\n\t        configurable: false,\n\t        enumerable: true,\n\t        get: function () {\n\t            return that.outgoingMediaStreams[0];\n\t        },\n\t        set: function () {\n\t            // ignore\n\t        }\n\t    });\n\n\t    /**\n\t     * Array of streams of remote media that we are receiving from the remote party.\n\t     * @name incomingMediaStreams\n\t     * @type {Array<respoke.RemoteMedia>}\n\t     */\n\t    that.incomingMediaStreams = [];\n\t    that.incomingMediaStreams.hasAudio = function () {\n\t        if (that.incomingMediaStreams.length === 0) {\n\t            return false;\n\t        }\n\n\t        return !that.incomingMediaStreams.every(function (stream) {\n\t            return stream.getAudioTracks().length === 0;\n\t        });\n\t    };\n\t    that.incomingMediaStreams.hasVideo = function () {\n\t        if (that.incomingMediaStreams.length === 0) {\n\t            return false;\n\t        }\n\n\t        return !that.incomingMediaStreams.every(function (stream) {\n\t            return stream.getVideoTracks().length === 0;\n\t        });\n\t    };\n\n\t    /**\n\t     * Remote media that we are receiving from the remote party.  This will be undefined if we\n\t     * are receiving no media. This property is just the first item in the `incomingMediaStreams` array. If multiple\n\t     * streams are present, use that array to find the stream you need instead of relying on this property.\n\t     * @name incomingMedia\n\t     * @type {respoke.RemoteMedia}\n\t     */\n\t    Object.defineProperty(that, \"incomingMedia\", {\n\t        configurable: false,\n\t        enumerable: true,\n\t        get: function () {\n\t            return that.incomingMediaStreams[0];\n\t        },\n\t        set: function () {\n\t            // ignore\n\t        }\n\t    });\n\n\t    /**\n\t     * A flag indicating whether this call has audio or is expected to have audio coming in from the other side.\n\t     *\n\t     * @name hasAudio\n\t     * @type {boolean}\n\t     */\n\t    Object.defineProperty(that, \"hasAudio\", {\n\t        configurable: false,\n\t        enumerable: true,\n\t        get: that.incomingMediaStreams.hasAudio,\n\t        set: function () {\n\t            // ignore\n\t        }\n\t    });\n\n\t    /**\n\t     * A flag indicating whether this call has video or is expected to have video coming in from the other side.\n\t     *\n\t     * @name hasVideo\n\t     * @type {boolean}\n\t     */\n\t    Object.defineProperty(that, \"hasVideo\", {\n\t        configurable: false,\n\t        enumerable: true,\n\t        get: that.incomingMediaStreams.hasVideo,\n\t        set: function () {\n\t            // ignore\n\t        }\n\t    });\n\n\t    delete params.signalingChannel;\n\t    delete that.signalingChannel;\n\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name videoIsMuted\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var videoIsMuted = false;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name audioIsMuted\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var audioIsMuted = false;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name directConnection\n\t     * @private\n\t     * @type {respoke.DirectConnection}\n\t     */\n\t    var directConnection = null;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name toSendHangup\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var toSendHangup = null;\n\n\t    /**\n\t     * Set up promises. If we're not the caller, we need to listen for approval AND the remote SDP to come in\n\t     * before we can act on the call. Save parameters sent in with the constructor, then delete them off the call.\n\t     * If this call was initiated with a DirectConnection, set it up so answer() will be the approval mechanism.\n\t     * @method respoke.Call.init\n\t     * @memberof! respoke.Call\n\t     * @fires respoke.Client#call\n\t     * @private\n\t     */\n\t    function init() {\n\t        log.debug('Call.init');\n\n\t        if (defModify !== undefined) {\n\t            defMedia = Q.defer();\n\t        }\n\n\t        pc.init(); // instantiates RTCPeerConnection, can't call on modify\n\t        if (defModify === undefined && pc.state.needDirectConnection === true) {\n\t            actuallyAddDirectConnection(params);\n\t        }\n\t    }\n\n\t    /**\n\t     * Register any event listeners passed in as callbacks, save other params to answer() and accept().\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.saveParameters\n\t     * @param {object} params\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n\t     * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will fire even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n\t     * user's media.  This event gets fired even if the allow process is automatic, i. e., permission and media is\n\t     * granted by the browser without asking the user to approve it.\n\t     * @param {Array<RTCConstraints>} [params.constraints]\n\t     * @param {boolean} [params.forceTurn]\n\t     * @param {boolean} [params.receiveOnly]\n\t     * @param {boolean} [params.sendOnly]\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     * @private\n\t     * @fires respoke.Call#stats\n\t     */\n\t    function saveParameters(params) {\n\t        var isNewConstraint;\n\n\t        /* This happens when the call is hung up automatically, for instance due to the lack of an onCall\n\t         * handler. In this case, pc has been set to null in hangup. The call has already failed, and the\n\t         * invocation of this function is an artifact of async code not being finished yet, so we can just\n\t         * skip all of this setup.\n\t         */\n\t        if (!pc) {\n\t            return;\n\t        }\n\n\t        that.listen('local-stream-received', params.onLocalMedia);\n\t        that.listen('connect', params.onConnect);\n\t        that.listen('hangup', params.onHangup);\n\t        that.listen('allow', params.onAllow);\n\t        that.listen('answer', params.onAnswer);\n\t        that.listen('approve', params.onApprove);\n\t        that.listen('mute', params.onMute);\n\t        that.listen('requesting-media', params.onRequestingMedia);\n\n\t        previewLocalMedia = typeof params.previewLocalMedia === 'function' ?\n\t            params.previewLocalMedia : previewLocalMedia;\n\n\t        pc.state.receiveOnly = typeof params.receiveOnly === 'boolean' ? params.receiveOnly : pc.state.receiveOnly;\n\t        pc.state.sendOnly = typeof params.sendOnly === 'boolean' ? params.sendOnly : pc.state.sendOnly;\n\t        pc.state.needDirectConnection = typeof params.needDirectConnection === 'boolean' ?\n\t            params.needDirectConnection : pc.state.needDirectConnection;\n\t        pc.disableTurn = typeof params.disableTurn === 'boolean' ? params.disableTurn : !!pc.disableTurn;\n\t        pc.forceTurn = typeof params.forceTurn === 'boolean' ? params.forceTurn : !!pc.forceTurn;\n\n\t        that.videoLocalElement = params.videoLocalElement ? params.videoLocalElement : that.videoLocalElement;\n\t        that.videoRemoteElement = params.videoRemoteElement ? params.videoRemoteElement : that.videoRemoteElement;\n\n\t        if (pc.state.receiveOnly) {\n\t            that.outgoingMediaStreams.length = 0;\n\t            that.constraints = [];\n\t        } else if (params.constraints) {\n\t            that.constraints = respoke.convertConstraints(params.constraints);\n\t            updateOutgoingMediaEstimate({constraints: that.constraints[0]});\n\t        }\n\n\t        if (pc.state.sendOnly) {\n\t            that.incomingMediaStreams.length = 0;\n\t        } else if (params.constraints && pc.state.caller === true && that.incomingMediaStreams.length === 0) {\n\t            // TODO above condition is not good enough for media renegotiation.\n\t            // Only the person who initiated this round of media negotiation needs to estimate remote\n\t            // media based on what constraints local media is using.\n\t            // Also don't try to guess what media they'll send back if we're sending more than one stream.\n\t            that.constraints = respoke.convertConstraints(params.constraints);\n\t            updateIncomingMediaEstimate({constraints: params.constraints[0]});\n\t        }\n\n\t        pc.listen('stats', function fireStats(evt) {\n\t            /**\n\t             * This event is fired every time statistical information about audio and/or video on a call\n\t             * becomes available.\n\t             * @event respoke.Call#stats\n\t             * @type {respoke.Event}\n\t             * @property {respoke.MediaStats} stats - an object with stats in it.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.fire('stats', {stats: evt.stats});\n\t        }, true);\n\n\t        delete that.signalOffer;\n\t        delete that.signalConnected;\n\t        delete that.signalAnswer;\n\t        delete that.signalHangup;\n\t        delete that.signalReport;\n\t        delete that.signalCandidate;\n\t    }\n\n\t    /**\n\t     * Build respoke.LocalMedia after the call is answered.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.buildLocalMedia\n\t     * @param {RTCConstraint} constraint\n\t     * @private\n\t     */\n\t    function buildLocalMedia(constraint) {\n\t        var localMedia;\n\n\t        if (pc.state.receiveOnly) {\n\t            return;\n\t        }\n\n\t        if (constraint.className === 'respoke.LocalMedia') {\n\t            localMedia = constraint;\n\t        } else {\n\t            localMedia = respoke.LocalMedia({\n\t                streamId: that.remoteEndpoint.id,\n\t                state: pc.state,\n\t                hasScreenShare: respoke.constraintsHasScreenShare(constraint),\n\t                constraints: constraint\n\t            });\n\t            that.outgoingMediaStreams.push(localMedia);\n\t        }\n\n\t        // Use the element for only one set of constraints, and make sure its one that has video.\n\t        if (respoke.constraintsHasVideo(localMedia.constraints) &&\n\t                that.videoLocalElement && !that.videoLocalElement.used) {\n\t            that.videoLocalElement.used = true;\n\t            localMedia.element = that.videoLocalElement;\n\t        }\n\n\t        localMedia.listen('requesting-media', function waitAllowHandler(evt) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\n\t            /**\n\t             * The browser is asking for permission to access the User's media. This would be an ideal time\n\t             * to modify the UI of the application so that the user notices the request for permissions\n\t             * and approves it.\n\t             * @event respoke.Call#requesting-media\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.fire('requesting-media');\n\t        }, true);\n\n\t        localMedia.listen('allow', function allowHandler(evt) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\n\t            /**\n\t             * The user has approved the request for media. Any UI changes made to remind the user to click Allow\n\t             * should be canceled now. This event is the same as the `onAllow` callback.  This event gets fired\n\t             * even if the allow process is automatic, i. e., permission and media is granted by the browser\n\t             * without asking the user to approve it.\n\t             * @event respoke.Call#allow\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.fire('allow');\n\t            pc.state.dispatch('approve', {\n\t                previewLocalMedia: previewLocalMedia\n\t            });\n\t        }, true);\n\t        localMedia.listen('stream-received', streamReceivedHandler, true);\n\t        localMedia.listen('no-local-media', noLocalMediaHandler, true);\n\t        localMedia.listen('error', function errorHandler(evt) {\n\t            pc.state.dispatch('reject', {reason: 'media stream error'});\n\t            pc.report.callStoppedReason = evt.reason;\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.fire('error', {\n\t                reason: evt.reason\n\t            });\n\t        }, true);\n\n\t        localMedia.start();\n\t    }\n\n\t    /**\n\t     * Answer the call and start the process of obtaining media. This method is called automatically on the caller's\n\t     * side. This method must be called on the callee's side to indicate that the endpoint does wish to accept the\n\t     * call. The app will have a later opportunity, by passing a callback named previewLocalMedia, to approve or\n\t     * reject the call based on whether audio and/or video is working and is working at an acceptable level.\n\t     *\n\t     *     client.listen('call', function (evt) {\n\t     *         if (!evt.call.caller) {\n\t     *             evt.call.answer();\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.answer\n\t     * @fires respoke.Call#answer\n\t     * @param {object} [params]\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n\t     * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n\t     * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n\t     * granted by the browser without asking the user to approve it.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {boolean} [params.receiveOnly] - Whether or not we accept media.\n\t     * @param {boolean} [params.sendOnly] - Whether or not we send media.\n\t     * @param {Array<RTCConstraints>} [params.constraints] - Information about the media for this call.\n\t     * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     */\n\t    that.answer = function (params) {\n\t        params = params || {};\n\t        log.debug('Call.answer', params);\n\n\t        saveParameters(params);\n\n\t        pc.listen('remote-stream-received', onRemoteStreamAdded, true);\n\t        pc.listen('remote-stream-removed', onRemoteStreamRemoved, true);\n\n\t        pc.state.once('approving-device-access:entry', function (evt) {\n\t            doAddVideo(params);\n\t        });\n\t        pc.state.dispatch('answer', {\n\t            previewLocalMedia: previewLocalMedia,\n\t            approve: that.approve\n\t        });\n\t        /**\n\t         * The call was answered.\n\t         * @event respoke.Call#answer\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('answer');\n\t    };\n\n\t    /**\n\t     * Accept a request to modify the media on the call. This method should be called within the Call#modify\n\t     * event listener, which gives the developer or website user a chance to see what changes are proposed and\n\t     * to accept or reject them.\n\t     *\n\t     *     call.listen('modify', function (evt) {\n\t     *         evt.call.accept();\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.accept\n\t     * @fires respoke.Call#accept\n\t     * @private\n\t     * @param {object} [params]\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the developer to receive the\n\t     * remote video element.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for the developer to be notified about hangup.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {boolean} [params.receiveOnly] - Whether or not we accept media.\n\t     * @param {boolean} [params.sendOnly] - Whether or not we send media.\n\t     * @param {Array<RTCConstraints>} [params.constraints] - Information about the media for this call.\n\t     */\n\t    that.accept = that.answer;\n\n\t    /**\n\t     * Start the process of network and media negotiation. If the app passes in a callback named previewLocalMedia\n\t     * in order to allow the logged-in person a chance to base their decision to continue the call on whether\n\t     * audio and/or video is working correctly,\n\t     * this method must be called on both sides in order to begin the call. If call.approve() is called, the call\n\t     * will progress as expected. If call.reject() is called, the call will be aborted.\n\t     *\n\t     *     call.listen('local-stream-received', function (evt) {\n\t     *         if (userLikesVideo()) {\n\t     *             evt.call.approve();\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.approve\n\t     * @fires respoke.Call#approve\n\t     */\n\t    that.approve = function () {\n\t        log.debug('Call.approve');\n\t        /**\n\t         * Fired when the local media access is approved.\n\t         * @event respoke.Call#approve\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('approve');\n\t        pc.state.dispatch('approve', {\n\t            previewLocalMedia: previewLocalMedia\n\t        });\n\n\t        if (defModify && defModify.promise.isPending()) {\n\t            defModify.resolve(true);\n\t            defModify = undefined;\n\t        }\n\t    };\n\n\t    /**\n\t     * Listen for the remote side to remove media in the middle of the call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.onRemoteStreamRemoved\n\t     * @private\n\t     * @param {object}\n\t     */\n\t    function onRemoteStreamRemoved(evt) {\n\t        log.debug('pc event: remote stream removed');\n\t    }\n\n\t    /**\n\t     * Listen for the remote side to add additional media in the middle of the call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.onRemoteStreamAdded\n\t     * @private\n\t     * @param {object}\n\t     * @fires respoke.Call#connect\n\t     */\n\t    function onRemoteStreamAdded(evt) {\n\t        var hasAudio = false;\n\t        var hasVideo = false;\n\t        var hasScreenShare = false;\n\t        var remoteMedia;\n\t        var useEl;\n\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        log.debug('received remote media', evt);\n\n\t        // This is the first remote media we have received. The one we currently have is a guess. Rip it\n\t        // out and replace it with reality.\n\t        if (that.incomingMediaStreams.length === 1 && that.incomingMediaStreams[0].temporary === true) {\n\t            // have to do it this way because assigning a blank array to that.incomingMediaStreams will\n\t            // clobber the methods like hasAudio that we have added to the array.\n\t            that.incomingMediaStreams.length = 0;\n\t        }\n\n\t        hasAudio = evt.stream.getAudioTracks().length > 0;\n\t        hasVideo = evt.stream.getVideoTracks().length > 0;\n\t        // TODO this is not good enough long term.\n\t        hasScreenShare = hasVideo && that.target === 'screenshare';\n\n\t        if (that.videoRemoteElement && !that.videoRemoteElement.used) {\n\t            that.videoRemoteElement.used = true;\n\t            useEl = that.videoRemoteElement;\n\t        }\n\n\t        remoteMedia = respoke.RemoteMedia({\n\t            element: useEl,\n\t            stream: evt.stream,\n\t            hasScreenShare: hasScreenShare,\n\t            constraints: {\n\t                audio: hasAudio,\n\t                video: hasVideo\n\t            }\n\t        });\n\t        that.incomingMediaStreams.push(remoteMedia);\n\n\t        /**\n\t         * Indicates that either remote media stream has been added to the call or if no\n\t         * media is expected, the other side is receiving our media.\n\t         * @event respoke.Call#connect\n\t         * @type {respoke.Event}\n\t         * @property {Element} element - The HTML5 Video element with the remote stream attached.\n\t         * @property {respoke.RemoteMedia} stream - The incomingMedia property on the call.\n\t         * @property {string} name - The event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        pc.state.dispatch('receiveRemoteMedia');\n\t        that.fire('connect', {\n\t            stream: remoteMedia.stream,\n\t            element: remoteMedia.element\n\t        });\n\t    }\n\n\t    /**\n\t     * ## The plugin `respoke.MediaStats` must be loaded before using this method.\n\t     *\n\t     * Start the process of listening for a continuous stream of statistics about the flow of audio and/or video.\n\t     * Since we have to wait for both the answer and offer to be available before starting\n\t     * statistics, the library returns a promise for the stats object. The statistics object does not contain the\n\t     * statistics; rather it contains methods of interacting with the actions of obtaining statistics. To obtain\n\t     * the actual statistics one time, use stats.getStats(); use the onStats callback to obtain a continuous\n\t     * stream of statistics every `interval` seconds.  Returns null if stats module is not loaded.\n\t     *\n\t     *     call.getStats({\n\t     *         onStats: function (evt) {\n\t     *             console.log('Stats', evt.stats);\n\t     *         }\n\t     *     }).done(function () {\n\t     *         console.log('Stats started');\n\t     *     }, function (err) {\n\t     *         console.log('Call is already hung up.');\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.getStats\n\t     * @param {object} params\n\t     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive\n\t     * the stats. If no callback is provided, the call's report will contain stats but the developer will not\n\t     * receive them on the client-side.\n\t     * @param {respoke.Call.statsSuccessHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Call.errorHandler} [params.onError] - Error handler for this invocation of this method only.\n\t     * @returns {Promise<object>|null}\n\t     */\n\t    function getStats(params) {\n\t        if (pc && pc.getStats) {\n\t            that.listen('stats', params.onStats);\n\t            return pc.getStats(params);\n\t        }\n\t        return null;\n\t    }\n\t    if (respoke.MediaStats) {\n\t        that.getStats = getStats;\n\t    }\n\n\t    /**\n\t     * Return local video element with the logged-in endpoint's audio and/or video streams attached to it.\n\t     *\n\t     *     var el = call.getLocalElement();\n\t     *     container.append(el);\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.getLocalElement\n\t     * @returns {Video} An HTML5 video element.\n\t     */\n\t    that.getLocalElement = function () {\n\t        return that.outgoingMediaStreams[0] ? that.outgoingMediaStreams[0].element : undefined;\n\t    };\n\n\t    /**\n\t     * Return remote video element with the remote endpoint's audio and/or video streams attached to it.\n\t     *\n\t     *     var el = call.getRemoteElement();\n\t     *     container.append(el);\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.getRemoteElement\n\t     * @returns {Video} An HTML5 video element.\n\t     */\n\t    that.getRemoteElement = function () {\n\t        return that.incomingMediaStreams[0] ? that.incomingMediaStreams[0].element : undefined;\n\t    };\n\n\t    function streamReceivedHandler(evt) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\n\t        defMedia.resolve(evt.target);\n\t        pc.addStream(evt.stream);\n\t        pc.state.dispatch('receiveLocalMedia');\n\t        if (typeof previewLocalMedia === 'function') {\n\t            previewLocalMedia(evt.element, that);\n\t        }\n\n\t        /**\n\t         * Indicate that the call has received local media from the browser.\n\t         * @event respoke.Call#local-stream-received\n\t         * @type {respoke.Event}\n\t         * @property {Element} element\n\t         * @property {respoke.LocalMedia} stream\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('local-stream-received', {\n\t            element: evt.element,\n\t            stream: evt.target\n\t        });\n\n\t        /**\n\t         * This event indicates that local video has been unmuted.\n\t         * @event respoke.Call#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        evt.target.listen('mute', function (evt) {\n\t            that.fire('mute', {\n\t                type: evt.type,\n\t                muted: evt.muted\n\t            });\n\t        });\n\t    }\n\n\t    function noLocalMediaHandler(evt) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\n\t        defMedia.resolve();\n\t        pc.state.dispatch('receiveLocalMedia');\n\t    }\n\n\t    /**\n\t     * Create the RTCPeerConnection and add handlers. Process any offer we have already received. This method is called\n\t     * after answer() so we cannot use this method to set up the DirectConnection.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.doAddVideo\n\t     * @private\n\t     * @param {object} params\n\t     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect]\n\t     * @param {respoke.Call.onHangup} [params.onHangup]\n\t     * @fires respoke.Call#requesting-media\n\t     * @fires respoke.Call#allow\n\t     * @fires respoke.Call#local-stream-received\n\t     */\n\t    function doAddVideo(params) {\n\t        log.debug('Call.doAddVideo');\n\t        saveParameters(params);\n\t    }\n\n\t    /**\n\t     * Add a video and audio stream to the existing call. By default, this method adds both video AND audio.\n\t     * If audio is not desired, pass {audio: false}.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.addVideo\n\t     * @private\n\t     * @param {object} params\n\t     * @param {boolean} [params.audio=true]\n\t     * @param {boolean} [params.video=true]\n\t     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints, indicating the media\n\t     * being requested is\n\t     * an audio and/or video stream.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect]\n\t     * @param {respoke.Call.onHangup} [params.onHangup]\n\t     * @param {respoke.Call.mediaSuccessHandler} [params.onSuccess]\n\t     * @param {respoke.Client.errorHandler} [params.onError]\n\t     * @returns {Promise<respoke.LocalMedia>}\n\t     */\n\t    that.addVideo = function (params) {\n\t        log.debug('Call.addVideo');\n\t        params = params || {};\n\t        if (!params.constraints || !params.constraints.length) {\n\t            params.constraints = [{video: true, audio: true}];\n\t        }\n\t        params.instanceId = instanceId;\n\n\t        if (!defMedia.promise.isFulfilled()) { // we're the callee & have just accepted to modify\n\t            doAddVideo(params);\n\t        } else { // we're the caller and need to see if we can modify\n\t            pc.startModify({\n\t                constraints: params.constraints\n\t            });\n\t            defModify = Q.defer();\n\t            defModify.promise.then(function modifyAccepted() {\n\t                doAddVideo(params);\n\t            });\n\t        }\n\t        return defModify.promise;\n\t    };\n\n\t    /**\n\t     * Add an audio stream to the existing call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.addAudio\n\t     * @private\n\t     * @param {object} params\n\t     * @param {boolean} [params.audio=true]\n\t     * @param {boolean} [params.video=false]\n\t     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints, indicating the media\n\t     * being requested is an audio and/or video stream.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect]\n\t     * @param {respoke.Call.onHangup} [params.onHangup]\n\t     * @param {respoke.Call.mediaSuccessHandler} [params.onSuccess]\n\t     * @param {respoke.Client.errorHandler} [params.onError]\n\t     * @returns {Promise<respoke.LocalMedia>}\n\t     */\n\t    that.addAudio = function (params) {\n\t        params = params || {};\n\t        if (!params.constraints || !params.constraints.length) {\n\t            params.constraints = [{video: false, audio: true}];\n\t        }\n\n\t        return that.addVideo(params);\n\t    };\n\n\t    /**\n\t     * Get the direct connection on this call, if it exists.\n\t     *\n\t     *     var dc = call.getDirectConnection();\n\t     *     if (!dc) {\n\t     *         console.log(\"No direct connection has been started.\");\n\t     *     } else {\n\t     *         dc.sendMessage({message: 'hi'});\n\t     *     }\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.getDirectConnection\n\t     * @returns {respoke.DirectConnection}\n\t     */\n\t    that.getDirectConnection = function () {\n\t        return directConnection || null;\n\t    };\n\n\t    /**\n\t     * Remove a direct connection from the existing call. If there is no other media, this will hang up the call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.removeDirectConnection\n\t     * @private\n\t     * @param {object} params\n\t     * @arg {boolean} [params.skipModify] Do not restart media negotiation.\n\t     */\n\t    that.removeDirectConnection = function (params) {\n\t        params = params || {};\n\t        log.debug('Call.removeDirectConnection');\n\n\t        if (directConnection) {\n\t            directConnection.close({skipRemove: true});\n\t        }\n\n\t        if (!that.hasMedia()) {\n\t            log.debug('Hanging up because there are no local streams.');\n\t            that.hangup();\n\t            return;\n\t        }\n\n\t        if (params.skipModify === true) {\n\t            return;\n\t        }\n\n\t        pc.startModify({\n\t            directConnection: false\n\t        });\n\t        defModify = Q.defer();\n\t        defModify.promise.done(function onModifySuccess() {\n\t            defMedia.resolve();\n\t            defModify = undefined;\n\t        });\n\t    };\n\n\t    /**\n\t     * Add a direct connection to the existing call.\n\t     *\n\t     *     call.addDirectConnection({\n\t     *         onOpen: function (evt) {\n\t     *             console.log(\"Direct connection open!\");\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.addDirectConnection\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for the developer to be notified about\n\t     * closing the connection.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for the developer to be notified about\n\t     * opening the connection.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for the developer to be notified\n\t     * about incoming messages. Not usually necessary to listen to this event if you are already listening to\n\t     * respoke.Endpoint#message.\n\t     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess]\n\t     * @param {respoke.Client.errorHandler} [params.onError]\n\t     * @returns {Promise<respoke.DirectConnection>}\n\t     */\n\t    that.addDirectConnection = function (params) {\n\t        log.debug('Call.addDirectConnection');\n\t        pc.startModify({\n\t            directConnection: true\n\t        });\n\t        defModify = Q.defer();\n\t        return defModify.promise.then(function onModifySuccess() {\n\t            return actuallyAddDirectConnection(params);\n\t        }, function onModifyError(err) {\n\t            throw err;\n\t        });\n\t    };\n\n\t    /**\n\t     * Add a direct connection to the existing call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.actuallyAddDirectConnection\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for the developer to be notified about\n\t     * closing the connection.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for the developer to be notified about\n\t     * opening the connection.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for the developer to be notified\n\t     * about incoming messages. Not usually necessary to listen to this event if you are already listening to\n\t     * respoke.Endpoint#message.\n\t     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess]\n\t     * @param {respoke.Client.errorHandler} [params.onError]\n\t     * @returns {Promise<respoke.DirectConnection>}\n\t     * @fires respoke.Client#direct-connection\n\t     * @fires respoke.Call#direct-connection\n\t     */\n\t    function actuallyAddDirectConnection(params) {\n\t        log.debug('Call.actuallyAddDirectConnection', params);\n\t        params = params || {};\n\t        defMedia.promise.then(params.onSuccess, params.onError);\n\n\t        if (directConnection && directConnection.isActive()) {\n\t            if (defMedia.promise.isPending()) {\n\t                defMedia.resolve(directConnection);\n\t            } else {\n\t                log.warn(\"Not creating a new direct connection.\");\n\t            }\n\t            return defMedia.promise;\n\t        }\n\n\t        params.instanceId = instanceId;\n\t        params.pc = pc;\n\t        params.call = that;\n\n\t        directConnection = respoke.DirectConnection(params);\n\n\t        directConnection.listen('close', function closeHandler() {\n\t            if (!that.hasMedia()) {\n\t                log.debug('Hanging up because there are no local streams.');\n\t                that.hangup();\n\t            } else {\n\t                that.removeDirectConnection({skipModify: true});\n\t            }\n\t        }, true);\n\n\t        directConnection.listen('accept', function acceptHandler() {\n\t            if (pc.state.caller === false) {\n\t                log.debug('Answering as a result of approval.');\n\t            } else {\n\t                defMedia.resolve(directConnection);\n\t            }\n\t        }, true);\n\n\t        directConnection.listen('open', function openHandler() {\n\t            pc.state.dispatch('receiveRemoteMedia');\n\t        }, true);\n\n\t        directConnection.listen('error', function errorHandler(err) {\n\t            defMedia.reject(new Error(err));\n\t        }, true);\n\n\t        that.remoteEndpoint.directConnection = directConnection;\n\n\t        /**\n\t         * This event is fired when the local end of the directConnection is available. It still will not be\n\t         * ready to send and receive messages until the 'open' event fires.\n\t         * @event respoke.Call#direct-connection\n\t         * @type {respoke.Event}\n\t         * @property {respoke.DirectConnection} directConnection\n\t         * @property {respoke.Endpoint} endpoint\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('direct-connection', {\n\t            directConnection: directConnection,\n\t            endpoint: that.remoteEndpoint\n\t        });\n\n\t        /**\n\t         * This event is fired when the logged-in endpoint is receiving a request to open a direct connection\n\t         * to another endpoint.  If the user wishes to allow the direct connection, calling\n\t         * evt.directConnection.accept() will allow the connection to be set up.\n\t         * @event respoke.Client#direct-connection\n\t         * @type {respoke.Event}\n\t         * @property {respoke.DirectConnection} directConnection\n\t         * @property {respoke.Endpoint} endpoint\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         * @private\n\t         */\n\t        client.fire('direct-connection', {\n\t            directConnection: directConnection,\n\t            endpoint: that.remoteEndpoint\n\t        });\n\n\t        if (pc.state.caller === true) {\n\t            directConnection.accept();\n\t        }\n\n\t        return defMedia.promise;\n\t    }\n\n\t    /**\n\t     * Close the direct connection.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.closeDirectConnection\n\t     */\n\t    that.closeDirectConnection = function () {\n\t        if (directConnection) {\n\t            directConnection.close();\n\t            directConnection = null;\n\t        }\n\t    };\n\n\t    /**\n\t     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n\t     * signal is not false and we have not received a hangup signal from the remote party.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.hangup\n\t     * @fires respoke.Call#hangup\n\t     * @param {object} params\n\t     * @arg {boolean} params.signal Optional flag to indicate whether to send or suppress sending\n\t     * a hangup signal to the remote side.\n\t     */\n\t    that.hangup = function (params) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        params = params || {};\n\t        params.reason = params.reason || \"hangup method called.\";\n\t        pc.state.dispatch('hangup', params);\n\t    };\n\t    that.hangup = respoke.once(that.hangup);\n\n\t    /**\n\t     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n\t     * signal is not false and we have not received a hangup signal from the remote party. This is an event\n\t     * handler added to the state machine via `once`.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.hangup\n\t     * @fires respoke.Call#hangup\n\t     * @private\n\t     */\n\t    var doHangup = function () {\n\t        log.debug('hangup', that.caller);\n\n\t        that.outgoingMediaStreams.forEach(function (stream) {\n\t            stream.stop();\n\t        });\n\n\t        if (directConnection) {\n\t            directConnection.close();\n\t            directConnection = null;\n\t        }\n\n\t        if (pc) {\n\t            pc.close({signal: (pc.state.receivedBye ? false : pc.state.signalBye)});\n\t        }\n\n\t        /**\n\t         * This event is fired when the call has hung up.\n\t         * @event respoke.Call#hangup\n\t         * @type {respoke.Event}\n\t         * @property {boolean} sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('hangup', {\n\t            reason: pc.state.hangupReason || \"No reason specified.\"\n\t        });\n\n\t        pc.state.ignore();\n\t        pc.ignore();\n\t        that.ignore();\n\t        pc = null;\n\t    };\n\t    doHangup = respoke.once(doHangup);\n\n\t    /**\n\t     * Expose hangup as reject for approve/reject workflow.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.reject\n\t     * @param {object} params\n\t     */\n\t    that.reject = function () {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        pc.state.dispatch('reject', {reason: 'call.reject() called'});\n\t    };\n\n\t    /**\n\t     * Indicate whether a call is being setup or is in progress.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.isActive\n\t     * @returns {boolean}\n\t     */\n\t    that.isActive = function () {\n\t        return !!(pc && pc.isActive() && (\n\t            that.outgoingMediaStreams.length > 0 ||\n\t            that.incomingMediaStreams.length > 0 ||\n\t            (directConnection && directConnection.isActive())\n\t        ));\n\t    };\n\n\t    /**\n\t     * Set the estimated media status on incoming media.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.listenAnswer\n\t     * @param {object} evt\n\t     * @param {object} evt.signal - The offer signal including the sdp\n\t     * @private\n\t     */\n\t    function listenAnswer(evt) {\n\t        log.debug('listenAnswer', evt.signal);\n\n\t        that.hasDataChannel = respoke.sdpHasDataChannel(evt.signal.sessionDescription.sdp);\n\t        updateIncomingMediaEstimate({sdp: evt.signal.sessionDescription});\n\t    }\n\n\t    /**\n\t     * Set the estimated media status on incoming media.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.updateIncomingMediaEstimate\n\t     * @param {object} params\n\t     * @param {RTCSessionDescriptor} [params.sdp] - optional sdp to use to estimate media\n\t     * @param {RTCConstraints} [params.constraints] - optional constraints to use to estimate media\n\t     * @private\n\t     */\n\t    function updateIncomingMediaEstimate(params) {\n\t        if (pc.state.sendOnly) {\n\t            that.incomingMediaStreams.length = 0;\n\t            return;\n\t        }\n\n\t        if (!params.sdp && !params.constraints) {\n\t            throw new Error(\"Can't estimate incoming media without sdp or constraints\");\n\t        }\n\n\t        if (that.incomingMediaStreams.length === 0) {\n\t            that.incomingMediaStreams.push(respoke.RemoteMedia({\n\t                temporary: true\n\t            }));\n\t        }\n\n\t        if (params.sdp) {\n\t            if (that.incomingMediaStreams[0] && that.incomingMediaStreams[0].temporary) {\n\t                that.incomingMediaStreams[0].setSDP(params.sdp);\n\t            }\n\t        }\n\n\t        if (params.constraints) {\n\t            if (that.incomingMediaStreams[0] && that.incomingMediaStreams[0].temporary) {\n\t                that.incomingMediaStreams[0].setConstraints(params.constraints);\n\t            }\n\t        }\n\t    }\n\n\t    /**\n\t     * Set the estimated media status on outgoing media. For this method, by the time we have constraints, we're\n\t     * already calling getUserMedia so we will have exactly the right information. No need to use constraints\n\t     * to estimate.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.updateOutgoingMediaEstimate\n\t     * @param {object} params\n\t     * @param {RTCSessionDescriptor} [params.sdp] - optional sdp to use to estimate media\n\t     * @param {RTCConstraints} [params.constraints] - optional constraints to use to estimate media\n\t     * @private\n\t     */\n\t    function updateOutgoingMediaEstimate(params) {\n\t        if (pc.state.receiveOnly) {\n\t            that.outgoingMediaStreams.length = 0;\n\t            that.constraints = [];\n\t            return;\n\t        }\n\n\t        if (!params.sdp && !params.constraints) {\n\t            throw new Error(\"Can't estimate outgoing media without sdp or constraints\");\n\t        }\n\n\t        if (that.outgoingMediaStreams.length === 0) {\n\t            that.outgoingMediaStreams.push(respoke.LocalMedia({\n\t                instanceId: instanceId,\n\t                state: pc.state,\n\t                temporary: true\n\t            }));\n\t        }\n\n\t        if (params.sdp) {\n\t            if (that.outgoingMediaStreams[0] && that.outgoingMediaStreams[0].temporary) {\n\t                that.outgoingMediaStreams[0].setSDP(params.sdp);\n\t            }\n\t        }\n\n\t        if (params.constraints) {\n\t            if (that.outgoingMediaStreams[0] && that.outgoingMediaStreams[0].temporary) {\n\t                that.outgoingMediaStreams[0].setConstraints(params.constraints);\n\t            }\n\t        }\n\t    }\n\n\t    /**\n\t     * Save the offer so we can tell the browser about it after the PeerConnection is ready.\n\t     * Set the estimated media status on incoming and outgoing media.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.listenOffer\n\t     * @param {object} evt\n\t     * @param {object} evt.signal - The offer signal including the sdp\n\t     * @private\n\t     * @fires respoke.Call#modify\n\t     */\n\t    function listenOffer(evt) {\n\t        log.debug('listenOffer', evt.signal);\n\t        var info = {};\n\n\t        that.sessionId = evt.signal.sessionId;\n\t        pc.state.receiveOnly = respoke.sdpHasSendOnly(evt.signal.sessionDescription.sdp);\n\t        pc.state.sendOnly = respoke.sdpHasReceiveOnly(evt.signal.sessionDescription.sdp);\n\t        pc.state.listen('connecting:entry', function () {\n\t            if (!pc.state.caller) {\n\t                pc.processOffer(evt.signal.sessionDescription);\n\t            }\n\t        });\n\n\t        // Only do this if we're still trying to guess what media is coming in.\n\t        // TODO not good enough for media renegotiation\n\t        updateIncomingMediaEstimate({sdp: evt.signal.sessionDescription});\n\n\t        /*\n\t         * Always overwrite constraints for callee on every offer, since answer() and accept() will\n\t         * always be called after parsing the SDP. However, if the caller isn't sending any media,\n\t         * use audio & video as our estimate.\n\t         * TODO not good enough for media renegotiation\n\t         */\n\t        // If sendOnly, we can't rely on the offer for media estimate. It doesn't have any media in it!\n\t        if (pc.state.sendOnly) {\n\t            updateOutgoingMediaEstimate({constraints: {\n\t                audio: true,\n\t                video: true\n\t            }});\n\t        } else {\n\t            updateOutgoingMediaEstimate({sdp: evt.signal.sessionDescription});\n\t        }\n\t        log.info(\"Default outgoingMedia constraints\", that.outgoingMedia.constraints);\n\n\t        if (pc.state.isModifying()) {\n\t            if (pc.state.needDirectConnection === true) {\n\t                info.directConnection = directConnection;\n\t            } else if (pc.state.needDirectConnection === false) {\n\t                // Nothing\n\t            } else {\n\t                info.call = that;\n\t            }\n\t            /**\n\t             * Indicates a request to add something to an existing call. If 'constraints' is set, evt.constraints\n\t             * describes the media the other side has added. In this case, call.approve() must be called in order\n\t             * to approve the new media and send the same type of media.  If directConnection exists, the other side\n\t             * wishes to to open a direct connection. In order to approve, call directConnection.accept(). In either\n\t             * case, call.reject() and directConnection.reject() can be called to decline the request to add to the\n\t             * call.\n\t             * @event respoke.Call#modify\n\t             * @type {respoke.Event}\n\t             * @property {object} [constraints]\n\t             * @property {boolean} [directConnection]\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.fire('modify', info);\n\t        }\n\n\t        pc.state.dispatch('receiveOffer', {\n\t            previewLocalMedia: previewLocalMedia,\n\t            approve: that.approve\n\t        });\n\t    }\n\n\t    /**\n\t     * Save the answer and tell the browser about it.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.listenModify\n\t     * @private\n\t     */\n\t    function listenModify(evt) {\n\t        log.debug('Call.listenModify', evt);\n\t        if (evt.signal.action === 'initiate') {\n\t            defModify = Q.defer();\n\t            pc.state.dispatch('modify', {receive: true});\n\t        }\n\t    }\n\n\t    /**\n\t     * Set up state and media for the modify.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.onModifyAccept\n\t     * @param {respoke.Event} evt\n\t     * @private\n\t     */\n\t    function onModifyAccept(evt) {\n\t        pc.state.dispatch('accept');\n\n\t        if (evt.signal.action !== 'initiate') {\n\t            defModify.resolve(); // resolved later for callee\n\t            defModify = undefined;\n\t            return;\n\t        }\n\n\t        // callee only from here down\n\n\t        // init the directConnection if necessary. We don't need to do anything with\n\t        // audio or video right now.\n\t        if (evt.signal.directConnection === true) {\n\t            actuallyAddDirectConnection().done(function successHandler(dc) {\n\t                directConnection = dc;\n\t                directConnection.accept();\n\t            });\n\t        } else if (evt.signal.directConnection === false) {\n\t            if (directConnection) {\n\t                that.removeDirectConnection({skipModify: true});\n\t                defMedia.resolve(false);\n\t            }\n\t        }\n\t        pc.state.needDirectConnection = typeof evt.signal.directConnection === 'boolean' ?\n\t            evt.signal.directConnection : null;\n\t        that.outgoingMedia.constraints = evt.signal.constraints || that.outgoingMedia.constraints;\n\t    }\n\n\t    /**\n\t     * Ignore the modify.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.onModifyReject\n\t     * @param {respoke.Event} evt\n\t     * @param {Error} evt.err\n\t     * @private\n\t     */\n\t    function onModifyReject(evt) {\n\t        if (evt.signal.action !== 'initiate') {\n\t            defMedia.reject(evt.err);\n\t            defModify.reject(evt.err);\n\t            defModify = undefined;\n\t        }\n\t    }\n\n\t    /**\n\t     * If video is muted, unmute. If not muted, mute.\n\t     * @deprecated\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.toggleVideo\n\t     */\n\t    that.toggleVideo = function () {\n\t        if (that.isActive()) {\n\t            if (!videoIsMuted) {\n\t                that.muteVideo();\n\t            } else {\n\t                that.unmuteVideo();\n\t            }\n\t        }\n\t    };\n\n\t    /**\n\t     * If audio is muted, unmute. If not muted, mute.\n\t     * @deprecated\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.toggleAudio\n\t     */\n\t    that.toggleAudio = function () {\n\t        if (that.isActive()) {\n\t            if (!audioIsMuted) {\n\t                that.muteAudio();\n\t            } else {\n\t                that.unmuteAudio();\n\t            }\n\t        }\n\t    };\n\n\t    /**\n\t     * Indicate whether the call has media of any type flowing in either direction.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.hasMedia\n\t     * @returns {boolean}\n\t     */\n\t    that.hasMedia = function () {\n\t        var local;\n\t        var remote;\n\n\t        if (!pc || !pc.getLocalStreams) {\n\t            // PeerConnection.init() has not been called yet\n\t            return false;\n\t        }\n\n\t        local = pc.getLocalStreams();\n\t        remote = pc.getRemoteStreams();\n\n\t        if (directConnection && directConnection.isActive()) {\n\t            return true;\n\t        }\n\n\t        return (local.length > 0 || remote.length > 0);\n\t    };\n\n\t    /**\n\t     * Mute all local video streams.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.muteVideo\n\t     * @fires respoke.Call#mute\n\t     */\n\t    that.muteVideo = function () {\n\t        if (videoIsMuted) {\n\t            return;\n\t        }\n\t        that.outgoingMedia.muteVideo();\n\t        videoIsMuted = true;\n\t    };\n\n\t    /**\n\t     * Unmute all local video streams.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.unmuteVideo\n\t     * @fires respoke.Call#mute\n\t     */\n\t    that.unmuteVideo = function () {\n\t        if (!videoIsMuted) {\n\t            return;\n\t        }\n\t        that.outgoingMedia.unmuteVideo();\n\t        videoIsMuted = false;\n\t    };\n\n\t    /**\n\t     * Mute all local audio streams.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.muteAudio\n\t     * @fires respoke.Call#mute\n\t     */\n\t    that.muteAudio = function () {\n\t        if (audioIsMuted) {\n\t            return;\n\t        }\n\t        that.outgoingMedia.muteAudio();\n\t        audioIsMuted = true;\n\t    };\n\n\t    /**\n\t     * Unmute all local audio streams.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.unmuteAudio\n\t     * @fires respoke.Call#mute\n\t     */\n\t    that.unmuteAudio = function () {\n\t        if (!audioIsMuted) {\n\t            return;\n\t        }\n\n\t        that.outgoingMedia.unmuteAudio();\n\t        audioIsMuted = false;\n\t    };\n\n\t    /**\n\t     * Save the hangup reason and hang up.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.listenHangup\n\t     * @params {object} evt\n\t     * @params {object} evt.signal - The hangup signal, including an optional hangup reason.\n\t     * @private\n\t     */\n\t    function listenHangup(evt) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        pc.report.callStoppedReason = evt.signal.reason || \"Remote side hung up\";\n\t        pc.state.receivedBye = true;\n\t        pc.state.dispatch('hangup', {signal: false, reason: pc.report.callStoppedReason});\n\t    }\n\n\t    pc.state.once('terminated:entry', function (evt) {\n\t        doHangup();\n\t    }, true);\n\n\t    that.listen('signal-answer', listenAnswer);\n\t    that.listen('signal-offer', function (evt) {\n\t        if (pc.state.getState() === 'idle') {\n\t            pc.state.once('preparing:entry', function () {\n\t                listenOffer(evt);\n\t            });\n\t        } else {\n\t            listenOffer(evt);\n\t        }\n\t    }, true);\n\t    that.listen('signal-hangup', listenHangup, true);\n\t    that.listen('signal-modify', listenModify, true);\n\t    pc.listen('modify-reject', onModifyReject, true);\n\t    pc.listen('modify-accept', onModifyAccept, true);\n\t    that.listen('signal-icecandidates', function onCandidateSignal(evt) {\n\t        if (!pc || !evt.signal.iceCandidates || !evt.signal.iceCandidates.length) {\n\t            return;\n\t        }\n\t        evt.signal.iceCandidates.forEach(function processCandidate(candidate) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t            pc.addRemoteCandidate({candidate: candidate});\n\t        });\n\t    }, true);\n\n\t    that.listen('answer', function (evt) {\n\t        if (pc.state.receiveOnly || pc.state.needDirectConnection) {\n\t            that.outgoingMediaStreams.length = 0;\n\t            return;\n\t        }\n\n\t        /*\n\t         * By the time we get to here, we could be in a couple of states.\n\t         *\n\t         * If receiveOnly is set to true, we could possibly have constraints (if the developer used the API wrong)\n\t         * but we will not have any media in that.outgoingMediaStreams. We should unset that.constraints and skip\n\t         * building any local media.\n\t         *\n\t         * If we have never received any constraints, and receiveOnly is NOT set to true, we will have an estimate\n\t         * at that.outgoingMediaStreams[0] with temporary set to true. This estimate was set by parsing the SDP.\n\t         *\n\t         * If we have received one or more constraints, that.constraints array will contain the most recent set\n\t         * AND we will have an estimate at that.outgoingMediaStreams[0] with temporary set to true. We must completely\n\t         * rebuild that.outgoingMediaStreams from that.constraints.\n\t         */\n\t        if (pc.state.receiveOnly) {\n\t            that.outgoingMediaStreams.length = 0;\n\t            that.constraints = [];\n\t            return;\n\t        }\n\n\t        if (that.constraints.length === 0) {\n\t            // We didn't get told what to do by constraints; use our guess.\n\t            that.outgoingMediaStreams[0].temporary = undefined;\n\t        } else if (that.outgoingMediaStreams.length > 0 && that.outgoingMediaStreams[0].temporary) {\n\t            // We got told what to do. Discard our guess. It's OK for that.outgoingMediaStreams to be empty now.\n\t            that.outgoingMediaStreams.shift();\n\t        }\n\n\t        if (that.constraints.length > 0) {\n\t            that.outgoingMediaStreams.length = 0;\n\t            that.constraints.forEach(buildLocalMedia);\n\t        } else if (that.outgoingMediaStreams.length > 0) {\n\t            that.outgoingMediaStreams.forEach(buildLocalMedia);\n\t        } else {\n\t            throw new Error(\"I have no idea what type of media I am supposed to build.\");\n\t        }\n\t    }, true);\n\n\t    if (pc.state.needDirectConnection !== true) {\n\t        pc.state.once('preparing:entry', function () {\n\t            /**\n\t             * This event provides notification for when an incoming call is being received.  If the user wishes\n\t             * to allow the call, the app should call evt.call.answer() to answer the call.\n\t             * @event respoke.Client#call\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Call} call\n\t             * @property {respoke.Endpoint} endpoint\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            client.fire('call', {\n\t                endpoint: that.remoteEndpoint,\n\t                call: that\n\t            });\n\t        }, true);\n\t    }\n\n\t    pc.state.listen('idle:exit', function (evt) {\n\t        saveParameters(params);\n\t    });\n\n\t    pc.state.listen('preparing:entry', function (evt) {\n\t        init();\n\n\t        if (pc.state.caller === true) {\n\t            that.answer();\n\t        }\n\t    }, true);\n\n\t    /*\n\t     *  If we are sending media and the other side is not, we have to fire Call#connect manually,\n\t     *  because the RTCPeerConnection will never reach an ICE connection state of \"connected.\"\n\t     *  This will need to be moved when we start handling media renegotiation.\n\t     */\n\t    pc.state.listen('connecting:entry', function connectNoMedia() {\n\t        if (pc.state.sendOnly) {\n\t            /**\n\t             * Indicates that either remote media stream has been added to the call or if no\n\t             * media is expected, the other side is receiving our media.\n\t             * @event respoke.Call#connect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.fire('connect');\n\t            pc.state.dispatch('receiveRemoteMedia');\n\t        }\n\t    });\n\n\t    signalingChannel.getTurnCredentials().then(function (result) {\n\t        if (!pc) {\n\t            throw new Error(\"Already hung up.\");\n\t        }\n\t        if (!result) {\n\t            log.warn(\"Relay service not available.\");\n\t            pc.servers = {iceServers: []};\n\t        } else {\n\t            pc.servers = {iceServers: result};\n\t        }\n\t    }).fin(function () {\n\t        if (!pc) {\n\t            throw new Error(\"Already hung up.\");\n\t        }\n\t        pc.state.dispatch('initiate', {\n\t            caller: that.caller\n\t        });\n\t    }).done(null, function (err) {\n\t        if (err.message !== \"Already hung up.\") {\n\t            log.debug('Unexpected exception', err);\n\t        }\n\t    });\n\n\t    return that;\n\t}; // End respoke.Call\n\n\t/**\n\t * Handle an error that resulted from a method call.\n\t * @callback respoke.Call.errorHandler\n\t * @param {Error} err\n\t */\n\t/**\n\t * Handle the successful kick-off of stats on a call.\n\t * @callback respoke.Call.statsSuccessHandler\n\t * @param {respoke.MediaStatsParser} statsParser\n\t */\n\t/**\n\t * Handle obtaining media successfully.\n\t * @callback respoke.Call.mediaSuccessHandler\n\t * @param {respoke.LocalMedia} localMedia\n\t */\n\t/**\n\t * When on a call, receive local media when it becomes available. This is what you will need to provide if you want\n\t * to show the user their own video during a call. This callback is called every time\n\t * respoke.Call#local-stream-received is fired.\n\t * @callback respoke.Call.onLocalMedia Callback for receiving an HTML5 Video\n\t * element with the local audio and/or video attached.\n\t * @param {respoke.Event} evt\n\t * @param {Element} evt.element\n\t * @param {respoke.LocalMedia} - The outgoingMedia property on the call.\n\t * @param {string} evt.name - The event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When on a call, receive remote media when it becomes available. This is what you will need to provide if you want\n\t * to show the user the other party's video during a call. This callback is called every time\n\t * respoke.Call#connect is fired.\n\t * @callback respoke.Call.onConnect\n\t * @param {respoke.Event} evt\n\t * @param {Element} evt.element - the HTML5 Video element with the new stream attached.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When a call is in setup or media renegotiation happens. This callback will be called every time\n\t * respoke.Call#error.\n\t * @callback respoke.Call.onError\n\t * @param {respoke.Event} evt\n\t * @param {boolean} evt.reason - A human-readable description of the error.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When on a call, receive notification the call has been hung up. This callback is called every time\n\t * respoke.Call#hangup is fired.\n\t * @callback respoke.Call.onHangup\n\t * @param {respoke.Event} evt\n\t * @param {boolean} evt.sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * Called when changing the mute state on any type of media. This callback will be called when media is muted or\n\t * unmuted. This callback is called every time respoke.Call#mute is fired.\n\t * @callback respoke.Call.onMute\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * Called when the callee answers the call. This callback is called every time respoke.Call#answer is fired.\n\t * @callback respoke.Call.onAnswer\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * Called when the user approves local media. This callback will be called whether or not the approval was based\n\t * on user feedback. I. e., it will be called even if the approval was automatic. This callback is called every time\n\t * respoke.Call#approve is fired.\n\t * @callback respoke.Call.onApprove\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When setting up a call, receive notification that the browser has granted access to media.  This callback is\n\t * called every time respoke.Call#allow is fired.\n\t * @callback respoke.Call.onAllow\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When setting up a call, receive notification that the app has asked the browser for permission to get audio or\n\t * video and is waiting on the browser to grant or reject permission. This callback will be called every time\n\t * respoke.Call#requesting-media is fired.\n\t * @callback respoke.Call.onRequestingMedia\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * The use of stats requires an additional module to Respoke. When on a call, receive periodic statistical\n\t * information about the call, including the codec, lost packets, and bandwidth being consumed. This callback is\n\t * called every time respoke.Call#stats is fired.\n\t * @callback respoke.MediaStatsParser.statsHandler\n\t * @param {respoke.Event} evt\n\t * @param {respoke.MediaStats} evt.stats - an object with stats in it.\n\t * @param {respoke.Call} evt.target\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * When on a call, receive local media when it becomes available. This is what you will need to provide if you want\n\t * to allow the user to preview and approve or reject their own video before a call. If this callback is provided,\n\t * Respoke will wait for call.answer() to be called before proceeding. If this callback is not provided,\n\t * Respoke will proceed without waiting for user input. This callback is called every time\n\t * respoke.Call#local-stream-received is fired.\n\t * @callback respoke.Call.previewLocalMedia\n\t * @param {object} element - the HTML5 Video element with the new stream attached.\n\t * @param {respoke.Call} call\n\t */\n\t/**\n\t * Receive the DirectConnection.\n\t * @callback respoke.Call.directConnectionSuccessHandler\n\t * @param {respoke.DirectConnection} directConnection\n\t */\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\n\tvar log = __webpack_require__(18);\n\tvar respoke = __webpack_require__(1);\n\n\t/**\n\t * A wrapper around the stream from `getUserMedia`,\n\t * which is attached to a call at `call.outgoingMedia`.\n\t *\n\t * @class respoke.LocalMedia\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {object} [params.constraints]\n\t * @param {HTMLVideoElement} params.element - Pass in an optional html video element to have local\n\t * video attached to it.\n\t * @returns {respoke.LocalMedia}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = respoke.EventEmitter(params);\n\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.LocalMedia';\n\t    /**\n\t     * Respoke media ID (different from a `MediaStream.id`).\n\t     * @memberof! respoke.LocalMedia\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = respoke.makeGUID();\n\t    /**\n\t     * The HTML element with video attached.\n\t     * @memberof! respoke.LocalMedia\n\t     * @name element\n\t     * @type {HTMLVideoElement}\n\t     */\n\t    that.element = params.element;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name hasScreenShare\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var hasScreenShare = params.hasScreenShare;\n\t    delete params.hasScreenShare;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name sdpHasAudio\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasAudio = false;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name sdpHasVideo\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasVideo = false;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name sdpHasDataChannel\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasDataChannel = false;\n\t    /**\n\t     * A timer to make sure we only fire {respoke.LocalMedia#requesting-media} if the browser doesn't\n\t     * automatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.\n\t     * @memberof! respoke.LocalMedia\n\t     * @name allowTimer\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var allowTimer = 0;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name mediaOptions\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var mediaOptions = {\n\t        optional: [\n\t            { DtlsSrtpKeyAgreement: true },\n\t            { RtpDataChannels: false }\n\t        ]\n\t    };\n\n\t    /**\n\t     * The local `MediaStream` from `getUserMedia()`.\n\t     * @memberof! respoke.LocalMedia\n\t     * @name stream\n\t     * @type {RTCMediaStream}\n\t     */\n\t    that.stream = null;\n\n\t    function getStream(theConstraints) {\n\t        for (var i = 0; i < respoke.streams.length; i++) {\n\t            var s = respoke.streams[i];\n\t            if (respoke.isEqual(s.constraints, theConstraints)) {\n\t                return s.stream;\n\t            }\n\t        }\n\t        return null;\n\t    }\n\n\t    function removeStream(theConstraints) {\n\t        var toRemoveIndex;\n\t        for (var i = 0; i < respoke.streams.length; i++) {\n\t            var s = respoke.streams[i];\n\t            if (respoke.isEqual(s.constraints, theConstraints)) {\n\t                toRemoveIndex = i;\n\t                break;\n\t            }\n\t        }\n\t        if (toRemoveIndex !== undefined) {\n\t            respoke.streams.splice(toRemoveIndex, 1);\n\t        }\n\t    }\n\n\t    /**\n\t     * Save the local stream. Kick off SDP creation.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.onReceiveUserMedia\n\t     * @private\n\t     * @param {RTCMediaStream} theStream\n\t     * @fires respoke.LocalMedia#stream-received\n\t     */\n\t    function onReceiveUserMedia(theStream) {\n\t        that.stream = theStream;\n\t        clearTimeout(allowTimer);\n\t        /**\n\t         * The user has approved the request for media. Any UI changes made to remind the user to click Allow\n\t         * should be canceled now. This event is the same as the `onAllow` callback.  This event gets fired\n\t         * even if the allow process is automatic, i. e., permission and media is granted by the browser\n\t         * without asking the user to approve it.\n\t         * @event respoke.LocalMedia#allow\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         */\n\t        that.fire('allow');\n\t        log.debug('User gave permission to use media.');\n\t        log.debug('onReceiveUserMedia');\n\n\t        that.element = that.element || document.createElement('video');\n\n\t        // This still needs some work. Using cached streams causes an unused video element to be passed\n\t        // back to the App. This is because we assume at the moment that only one local media video element\n\t        // will be needed. The first one passed back will contain media and the others will fake it. Media\n\t        // will still be sent with every peer connection. Also need to study the use of getLocalElement\n\t        // and the implications of passing back a video element with no media attached.\n\t        var aStream = getStream(that.constraints);\n\t        if (aStream) {\n\t            aStream.numPc += 1;\n\n\t            attachMediaStream(that.element, that.stream);\n\t            // We won't want our local video outputting audio.\n\t            that.element.muted = true;\n\t            that.element.autoplay = true;\n\n\t            /**\n\t             * Indicate that we've received media from the browser.\n\t             * @event respoke.LocalMedia#stream-received\n\t             * @type {respoke.Event}\n\t             * @property {Element} element - the HTML5 Video element with the new stream attached.\n\t             * @property {RTCMediaStream} stream - the HTML5 Video stream\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.LocalMedia} target\n\t             */\n\t            that.fire('stream-received', {\n\t                element: that.element,\n\t                stream: that.stream\n\t            });\n\t        } else {\n\t            that.stream.numPc = 1;\n\t            respoke.streams.push({stream: that.stream, constraints: that.constraints});\n\n\t            that.stream.id = that.streamId;\n\t            attachMediaStream(that.element, that.stream);\n\t            // We won't want our local video outputting audio.\n\t            that.element.muted = true;\n\t            that.element.autoplay = true;\n\n\t            /**\n\t             * Indicate that we've received media from the browser.\n\t             * @event respoke.LocalMedia#stream-received\n\t             * @type {respoke.Event}\n\t             * @property {Element} element - the HTML5 Video element with the new stream attached.\n\t             * @property {RTCMediaStream} stream - the HTML5 Video stream\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.LocalMedia} target\n\t             */\n\t            that.fire('stream-received', {\n\t                element: that.element,\n\t                stream: that.stream\n\t            });\n\t        }\n\t    }\n\n\t    /**\n\t     * Expose getAudioTracks.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.getAudioTracks\n\t     */\n\t    that.getAudioTracks = function () {\n\t        if (that.stream) {\n\t            return that.stream.getAudioTracks();\n\t        }\n\t        return [];\n\t    };\n\n\t    /**\n\t     * Expose getVideoTracks.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.getVideoTracks\n\t     */\n\t    that.getVideoTracks = function () {\n\t        if (that.stream) {\n\t            return that.stream.getVideoTracks();\n\t        }\n\t        return [];\n\t    };\n\n\t    /**\n\t     * Create the RTCPeerConnection and add handlers. Process any offer we have already received.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.requestMedia\n\t     * @private\n\t     */\n\t    function requestMedia() {\n\t        if (that.state.receiveOnly === true) {\n\t            /**\n\t             * Indicate there is no need to obtain media at this time.\n\t             * @event respoke.LocalMedia#no-local-media\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.LocalMedia} target\n\t             */\n\t            that.fire('no-local-media');\n\t            return;\n\t        }\n\n\t        log.debug('requestMedia', that.state.caller);\n\n\t        if (!that.constraints) {\n\t            throw new Error('No constraints.');\n\t        }\n\n\t        var theStream = getStream(that.constraints);\n\t        if (theStream) {\n\t            log.debug('using old stream');\n\t            onReceiveUserMedia(theStream);\n\t            return;\n\t        }\n\n\t        // TODO set getStream(that.constraints) = true as a flag that we are already\n\t        // attempting to obtain this media so the race condition where gUM is called twice with\n\t        // the same constraints when calls are placed too quickly together doesn't occur.\n\t        allowTimer = setTimeout(function delayPermissionsRequest() {\n\t            /**\n\t             * The browser is asking for permission to access the User's media. This would be an ideal time\n\t             * to modify the UI of the application so that the user notices the request for permissions\n\t             * and approves it.\n\t             * @event respoke.LocalMedia#requesting-media\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.LocalMedia} target\n\t             */\n\t            that.fire('requesting-media');\n\t        }, 500);\n\t        if (respoke.useFakeMedia === true) {\n\t            that.constraints.fake = true;\n\t        }\n\t        if (!respoke.isNwjs && that.constraints.video.mandatory &&\n\t                that.constraints.video.mandatory.chromeMediaSource) {\n\t            if (respoke.needsChromeExtension && respoke.hasChromeExtension) {\n\t                respoke.chooseDesktopMedia(function (params) {\n\t                    if (!params.sourceId) {\n\t                        respoke.log.error(\"Error trying to get screensharing source.\", params.error);\n\t                        /**\n\t                         * Indicate there has been an error obtaining media.\n\t                         * @event respoke.LocalMedia#error\n\t                         * @type {respoke.Event}\n\t                         * @property {string} name - the event name.\n\t                         * @property {respoke.LocalMedia} target\n\t                         * @property {string} message - a textual description of the error.\n\t                         */\n\t                        that.fire('error', {error: 'Permission denied.'});\n\t                        return;\n\t                    }\n\t                    that.constraints.video.mandatory.chromeMediaSourceId = params.sourceId;\n\t                    log.debug(\"Running getUserMedia with constraints\", that.constraints);\n\t                    getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n\t                });\n\t                return;\n\t            } else {\n\t                throw new Error(\"Screen sharing not implemented on this platform yet.\");\n\t            }\n\t        }\n\t        log.debug(\"Running getUserMedia with constraints\", that.constraints);\n\t        getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n\t    }\n\n\t    /**\n\t     * Handle any error that comes up during the process of getting user media.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.onUserMediaError\n\t     * @private\n\t     * @param {object}\n\t     */\n\t    function onUserMediaError(p) {\n\t        log.debug('onUserMediaError');\n\t        if (p.code === 1) {\n\t            log.warn(\"Permission denied.\");\n\t            /**\n\t             * Indicate there has been an error obtaining media.\n\t             * @event respoke.LocalMedia#error\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.LocalMedia} target\n\t             * @property {string} message - a textual description of the error.\n\t             */\n\t            that.fire('error', {error: 'Permission denied.'});\n\t        } else {\n\t            log.warn(p);\n\t            /**\n\t             * Indicate there has been an error obtaining media.\n\t             * @event respoke.LocalMedia#error\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.LocalMedia} target\n\t             * @property {string} message - a textual description of the error.\n\t             */\n\t            that.fire('error', {error: p.code});\n\t        }\n\t    }\n\n\t    /**\n\t     * Whether the video stream is muted, or undefined if no stream of this type exists.\n\t     *\n\t     * All video tracks must be muted for this to return `false`.\n\t     * @returns boolean\n\t     */\n\t    that.isVideoMuted = function () {\n\t        if (!that.stream || !that.stream.getVideoTracks().length) {\n\t            return undefined;\n\t        }\n\n\t        return that.stream.getVideoTracks().every(function (track) {\n\t            return !track.enabled;\n\t        });\n\t    };\n\n\t    /**\n\t     * Mute local video stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.muteVideo\n\t     * @fires respoke.LocalMedia#mute\n\t     */\n\t    that.muteVideo = function () {\n\t        if (that.isVideoMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n\t            track.enabled = false;\n\t        });\n\t        /**\n\t         * Indicate that the mute status of local audio or video has changed.\n\t         * @event respoke.LocalMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'video',\n\t            muted: true\n\t        });\n\t    };\n\n\t    /**\n\t     * Unmute local video stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.unmuteVideo\n\t     * @fires respoke.LocalMedia#mute\n\t     */\n\t    that.unmuteVideo = function () {\n\t        if (!that.isVideoMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n\t            track.enabled = true;\n\t        });\n\t        /**\n\t         * Indicate that the mute status of local audio or video has changed.\n\t         * @event respoke.LocalMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'video',\n\t            muted: false\n\t        });\n\t    };\n\n\t    /**\n\t     * Whether the audio stream is muted, or undefined if no track of this type exists.\n\t     *\n\t     * All audio tracks must be muted for this to return `false`.\n\t     * @returns boolean\n\t     */\n\t    that.isAudioMuted = function () {\n\t        if (!that.stream || !that.stream.getAudioTracks().length) {\n\t            return undefined;\n\t        }\n\t        return that.stream.getAudioTracks().every(function (track) {\n\t            return !track.enabled;\n\t        });\n\t    };\n\n\t    /**\n\t     * Mute local audio stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.muteAudio\n\t     * @fires respoke.LocalMedia#mute\n\t     */\n\t    that.muteAudio = function () {\n\t        if (that.isAudioMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n\t            track.enabled = false;\n\t        });\n\t        /**\n\t         * Indicate that the mute status of local audio or video has changed.\n\t         * @event respoke.LocalMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'audio',\n\t            muted: true\n\t        });\n\t    };\n\n\t    /**\n\t     * Unmute local audio stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.unmuteAudio\n\t     * @fires respoke.LocalMedia#mute\n\t     */\n\t    that.unmuteAudio = function () {\n\t        if (!that.isAudioMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n\t            track.enabled = true;\n\t        });\n\t        /**\n\t         * Indicate that the mute status of local audio or video has changed.\n\t         * @event respoke.LocalMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'audio',\n\t            muted: false\n\t        });\n\t    };\n\n\t    /**\n\t     * Stop the stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.stop\n\t     * @fires respoke.LocalMedia#stop\n\t     */\n\t    that.stop = function () {\n\t        if (!that.stream) {\n\t            return;\n\t        }\n\n\t        that.stream.numPc -= 1;\n\t        if (that.stream.numPc === 0) {\n\t            that.stream.stop();\n\t            removeStream(that.constraints);\n\t        }\n\t        that.stream = null;\n\t        /**\n\t         * Indicate that local media has stopped.\n\t         * @event respoke.LocalMedia#stop\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         */\n\t        that.fire('stop');\n\t    };\n\n\t    /**\n\t     * Indicate whether we are sending a screenshare.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.hasScreenShare\n\t     * @return {boolean}\n\t     */\n\t    that.hasScreenShare = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getVideoTracks().length > 0 && hasScreenShare);\n\t        }\n\t        return hasScreenShare;\n\t    };\n\n\t    /**\n\t     * Indicate whether we are sending video.\n\t     *\n\t     * Note: This method will return true when the video is a screenshare.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.hasVideo\n\t     * @return {boolean}\n\t     */\n\t    that.hasVideo = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getVideoTracks().length > 0);\n\t        }\n\t        return sdpHasVideo;\n\t    };\n\n\t    /**\n\t     * Indicate whether we are sending audio.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.hasAudio\n\t     * @return {boolean}\n\t     */\n\t    that.hasAudio = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getAudioTracks().length > 0);\n\t        }\n\t        return sdpHasAudio;\n\t    };\n\n\t    /**\n\t     * Indicate whether we have media yet.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.hasMedia\n\t     * @return {boolean}\n\t     */\n\t    that.hasMedia = function () {\n\t        return !!that.stream;\n\t    };\n\n\t    /**\n\t     * Save and parse the SDP.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.setSDP\n\t     * @param {RTCSessionDescription} oSession\n\t     * @private\n\t     */\n\t    that.setSDP = function (oSession) {\n\t        sdpHasVideo = respoke.sdpHasVideo(oSession.sdp);\n\t        sdpHasAudio = respoke.sdpHasAudio(oSession.sdp);\n\t        sdpHasDataChannel = respoke.sdpHasDataChannel(oSession.sdp);\n\n\t        // We don't have media yet & this can still be changed so create the defaults based on what the sdp says.\n\t        if (that.temporary) {\n\t            that.constraints = {\n\t                video: sdpHasVideo,\n\t                audio: sdpHasAudio,\n\t                mandatory: {},\n\t                optional: []\n\t            };\n\t        }\n\t    };\n\n\t    /**\n\t     * Parse the constraints.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.setConstraints\n\t     * @param {MediaConstraints} constraints\n\t     * @private\n\t     */\n\t    that.setConstraints = function (constraints) {\n\t        that.constraints = constraints;\n\t        sdpHasVideo = respoke.constraintsHasVideo(that.constraints);\n\t        sdpHasAudio = respoke.constraintsHasAudio(that.constraints);\n\t    };\n\n\t    /**\n\t     * Start the stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.start\n\t     * @fires respoke.LocalMedia#start\n\t     * @private\n\t     */\n\t    that.start = function () {\n\t        if (that.state.receiveOnly) {\n\t            throw new Error(\"Local media started when receiveOnly is set!\");\n\t        }\n\n\t        if (that.temporary) {\n\t            throw new Error(\"Temporary local media started!\");\n\t        }\n\n\t        try {\n\t            requestMedia();\n\t        } catch (err) {\n\t            clearTimeout(allowTimer);\n\t            /**\n\t             * Indicate there has been an error obtaining media.\n\t             * @event respoke.LocalMedia#error\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.LocalMedia} target\n\t             * @property {string} message - a textual description of the error.\n\t             */\n\t            that.fire('error', {reason: err.message});\n\t        }\n\t    };\n\n\t    return that;\n\t}; // End respoke.LocalMedia\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\n\tvar log = __webpack_require__(18);\n\tvar respoke = __webpack_require__(1);\n\n\t/**\n\t * Class for managing the remote media stream,\n\t * which is attached to a call at `call.outgoingMedia`.\n\t *\n\t * @class respoke.RemoteMedia\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {object} params.constraints\n\t * @param {boolean} params.temporary - whether this instance represents our best guess of future media. If so,\n\t * this object will be deleted when real media comes in. It will be replaced by different instance of\n\t * respoke.RemoteMedia representing the actual state of media.\n\t * @param {HTMLVideoElement} params.element - Pass in an optional html video element to have remote\n\t * video attached to it.\n\t * @returns {respoke.RemoteMedia}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var that = respoke.EventEmitter(params);\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.RemoteMedia';\n\t    /**\n\t     * Respoke media ID (different from a `MediaStream.id`).\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = respoke.makeGUID();\n\t    /**\n\t     * The HTML element with attached video.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name element\n\t     * @type {HTMLVideoElement}\n\t     */\n\t    that.element = params.element || document.createElement('video');\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name hasScreenShare\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var hasScreenShare = params.hasScreenShare;\n\t    delete params.hasScreenShare;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name sdpHasAudio\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasAudio = false;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name sdpHasVideo\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasVideo = false;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name sdpHasDataChannel\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasDataChannel = false;\n\t    /**\n\t     * A timer to make sure we only fire {respoke.RemoteMedia#requesting-media} if the browser doesn't\n\t     * automatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name allowTimer\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var allowTimer = 0;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name mediaOptions\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var mediaOptions = {\n\t        optional: [\n\t            { DtlsSrtpKeyAgreement: true },\n\t            { RtpDataChannels: false }\n\t        ]\n\t    };\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name pc\n\t     * @private\n\t     * @type {respoke.PeerConnection}\n\t     */\n\t    var pc = params.pc;\n\t    delete that.pc;\n\t    /**\n\t     * The remote `MediaStream`.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name stream\n\t     * @type {RTCMediaStream}\n\t     */\n\t    that.stream = params.stream;\n\t    attachMediaStream(that.element, that.stream);\n\t    that.element.autoplay = true;\n\t    setTimeout(that.element.play.bind(that.element)); // stupid Firefox requires this.\n\n\t    /**\n\t     * Indicate whether we are receiving a screenshare.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.hasScreenShare\n\t     * @return {boolean}\n\t     */\n\t    that.hasScreenShare = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getVideoTracks().length > 0 && hasScreenShare);\n\t        }\n\t        return hasScreenShare;\n\t    };\n\n\t    /**\n\t     * Indicate whether we are receiving video.\n\t     *\n\t     * Note: This method will return true when the video is a screenshare.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.hasVideo\n\t     * @return {boolean}\n\t     */\n\t    that.hasVideo = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getVideoTracks().length > 0);\n\t        }\n\t        return sdpHasVideo;\n\t    };\n\n\t    /**\n\t     * Indicate whether we are receiving audio.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.hasAudio\n\t     * @return {boolean}\n\t     */\n\t    that.hasAudio = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getAudioTracks().length > 0);\n\t        }\n\t        return sdpHasAudio;\n\t    };\n\n\t    /**\n\t     * Indicate whether we have media yet.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.hasMedia\n\t     * @return {boolean}\n\t     */\n\t    that.hasMedia = function () {\n\t        return !!that.stream;\n\t    };\n\n\t    /**\n\t     * Save and parse the SDP\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.setSDP\n\t     * @param {RTCSessionDescription} oSession\n\t     * @private\n\t     */\n\t    that.setSDP = function (oSession) {\n\t        sdpHasVideo = respoke.sdpHasVideo(oSession.sdp);\n\t        sdpHasAudio = respoke.sdpHasAudio(oSession.sdp);\n\t        sdpHasDataChannel = respoke.sdpHasDataChannel(oSession.sdp);\n\t    };\n\n\t    /**\n\t     * Parse the constraints.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.setConstraints\n\t     * @param {MediaConstraints} constraints\n\t     * @private\n\t     */\n\t    that.setConstraints = function (constraints) {\n\t        that.constraints = constraints;\n\t        sdpHasVideo = respoke.constraintsHasVideo(that.constraints);\n\t        sdpHasAudio = respoke.constraintsHasAudio(that.constraints);\n\t    };\n\n\t    /**\n\t     * Expose getAudioTracks.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.getAudioTracks\n\t     */\n\t    that.getAudioTracks = function () {\n\t        if (that.stream) {\n\t            return that.stream.getAudioTracks();\n\t        }\n\t        return [];\n\t    };\n\n\t    /**\n\t     * Expose getVideoTracks.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.getVideoTracks\n\t     */\n\t    that.getVideoTracks = function () {\n\t        if (that.stream) {\n\t            return that.stream.getVideoTracks();\n\t        }\n\t        return [];\n\t    };\n\n\t    /**\n\t     * Stop the stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.stop\n\t     * @fires respoke.RemoteMedia#stop\n\t     */\n\t    that.stop = function () {\n\t        if (!that.stream) {\n\t            return;\n\t        }\n\n\t        that.stream.numPc -= 1;\n\t        if (that.stream.numPc === 0) {\n\t            that.stream.stop();\n\t            delete respoke.streams[that.constraints];\n\t        }\n\t        that.stream = null;\n\t        /**\n\t         * Indicate that remote media has stopped.\n\t         * @event respoke.RemoteMedia#stop\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         */\n\t        that.fire('stop');\n\t    };\n\n\t    /**\n\t     * Whether the video stream is muted.\n\t     *\n\t     * All video tracks must be muted for this to return `false`.\n\t     * @returns boolean\n\t     */\n\t    that.isVideoMuted = function () {\n\t        if (!that.stream) {\n\t            return false;\n\t        }\n\t        return that.stream.getVideoTracks().every(function (track) {\n\t            return !track.enabled;\n\t        });\n\t    };\n\n\t    /**\n\t     * Mute remote video stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.muteVideo\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.muteVideo = function () {\n\t        if (that.isVideoMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n\t            track.enabled = false;\n\t        });\n\t        /**\n\t         * Indicate that the muted status of remote video or audio has changed.\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'video',\n\t            muted: true\n\t        });\n\t    };\n\n\t    /**\n\t     * Unmute remote video stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.unmuteVideo\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.unmuteVideo = function () {\n\t        if (!that.isVideoMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n\t            track.enabled = true;\n\t        });\n\t        /**\n\t         * Indicate that the muted status of remote video or audio has changed.\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'video',\n\t            muted: false\n\t        });\n\t    };\n\n\t    /**\n\t     * Whether the audio stream is muted.\n\t     *\n\t     * All audio tracks must be muted for this to return `false`.\n\t     * @returns boolean\n\t     */\n\t    that.isAudioMuted = function () {\n\t        if (!that.stream) {\n\t            return false;\n\t        }\n\t        return that.stream.getAudioTracks().every(function (track) {\n\t            return !track.enabled;\n\t        });\n\t    };\n\n\t    /**\n\t     * Mute remote audio stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.muteAudio\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.muteAudio = function () {\n\t        if (that.isAudioMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n\t            track.enabled = false;\n\t        });\n\t        /**\n\t         * Indicate that the muted status of remote video or audio has changed.\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'audio',\n\t            muted: true\n\t        });\n\t    };\n\n\t    /**\n\t     * Unmute remote audio stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.unmuteAudio\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.unmuteAudio = function () {\n\t        if (!that.isAudioMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n\t            track.enabled = true;\n\t        });\n\t        /**\n\t         * Indicate that the muted status of remote video or audio has changed.\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'audio',\n\t            muted: false\n\t        });\n\t    };\n\n\t    return that;\n\t}; // End respoke.RemoteMedia\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\r\n\t * loglevel - https://github.com/pimterry/loglevel\r\n\t *\r\n\t * Copyright (c) 2013 Tim Perry\r\n\t * Licensed under the MIT license.\r\n\t */\r\n\r\n\t;(function (undefined) {\r\n\t    var undefinedType = \"undefined\";\r\n\t    \r\n\t    (function (name, definition) {\r\n\t        if (true) {\r\n\t            module.exports = definition();\r\n\t        } else if (typeof define === 'function' && typeof define.amd === 'object') {\r\n\t            define(definition);\r\n\t        } else {\r\n\t            this[name] = definition();\r\n\t        }\r\n\t    }('log', function () {\r\n\t        var self = {};\r\n\t        var noop = function() {};\r\n\r\n\t        function realMethod(methodName) {\r\n\t            if (typeof console === undefinedType) {\r\n\t                return noop;\r\n\t            } else if (console[methodName] === undefined) {\r\n\t                return boundToConsole(console, 'log') || noop;\r\n\t            } else {\r\n\t                return boundToConsole(console, methodName);\r\n\t            }\r\n\t        }\r\n\r\n\t        function boundToConsole(console, methodName) {\r\n\t            var method = console[methodName];\r\n\t            if (method.bind === undefined) {\r\n\t                if (Function.prototype.bind === undefined) {\r\n\t                    return function() {\r\n\t                        method.apply(console, arguments);\r\n\t                    };\r\n\t                } else {\r\n\t                    return Function.prototype.bind.call(console[methodName], console);\r\n\t                }\r\n\t            } else {\r\n\t                return console[methodName].bind(console);\r\n\t            }\r\n\t        }\r\n\r\n\t        var logMethods = [\r\n\t            \"trace\",\r\n\t            \"debug\",\r\n\t            \"info\",\r\n\t            \"warn\",\r\n\t            \"error\"\r\n\t        ];\r\n\r\n\t        function clearMethods() {\r\n\t            for (var ii = 0; ii < logMethods.length; ii++) {\r\n\t                self[logMethods[ii]] = noop;\r\n\t            }\r\n\t        }\r\n\r\n\t        function cookiesAvailable() {\r\n\t            return (typeof window !== undefinedType &&\r\n\t                    window.document !== undefined &&\r\n\t                    window.document.cookie !== undefined);\r\n\t        }\r\n\r\n\t        function setLevelInCookie(levelNum) {\r\n\t            if (!cookiesAvailable()) {\r\n\t                return;\r\n\t            }\r\n\r\n\t            var levelName;\r\n\r\n\t            for (var key in self.levels) {\r\n\t                if (self.levels.hasOwnProperty(key) && self.levels[key] === levelNum) {\r\n\t                    levelName = key;\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\r\n\t            if (levelName !== undefined) {\r\n\t                window.document.cookie = \"loglevel=\" + levelName + \";\";\r\n\t            }\r\n\t        }\r\n\r\n\t        var cookieRegex = /loglevel=([^;]+)/;\r\n\r\n\t        function loadLevelFromCookie() {\r\n\t            var cookieLevel;\r\n\r\n\t            if (cookiesAvailable()) {\r\n\t                var cookieMatch = cookieRegex.exec(window.document.cookie) || [];\r\n\t                cookieLevel = cookieMatch[1];\r\n\t            }\r\n\r\n\t            self.setLevel(self.levels[cookieLevel] || self.levels.WARN);\r\n\t        }\r\n\r\n\t        /*\r\n\t         *\r\n\t         * Public API\r\n\t         *\r\n\t         */\r\n\r\n\t        self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\r\n\t            \"ERROR\": 4, \"SILENT\": 5};\r\n\r\n\t        self.setLevel = function (level) {\r\n\t            if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\r\n\t                setLevelInCookie(level);\r\n\r\n\t                if (level === self.levels.SILENT) {\r\n\t                    clearMethods();\r\n\t                    return;\r\n\t                } else if (typeof console === undefinedType) {\r\n\t                    clearMethods();\r\n\t                    throw \"No console available for logging\";\r\n\t                } else {\r\n\t                    for (var ii = 0; ii < logMethods.length; ii++) {\r\n\t                        var methodName = logMethods[ii];\r\n\r\n\t                        if (level <= self.levels[methodName.toUpperCase()]) {\r\n\t                            self[methodName] = realMethod(methodName);\r\n\t                        } else {\r\n\t                            self[methodName] = noop;\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t            } else if (typeof level === \"string\") {\r\n\t                self.setLevel(self.levels[level.toUpperCase()]);\r\n\t            } else {\r\n\t                throw \"log.setLevel() called with invalid level: \" + level;\r\n\t            }\r\n\t        };\r\n\r\n\t        self.enableAll = function() {\r\n\t            self.setLevel(self.levels.TRACE);\r\n\t        };\r\n\r\n\t        self.disableAll = function() {\r\n\t            self.setLevel(self.levels.SILENT);\r\n\t        };\r\n\r\n\t        try {\r\n\t            loadLevelFromCookie();\r\n\t        } catch (e) {\r\n\t            self.setLevel(self.levels.SILENT);\r\n\t        }\r\n\t        return self;\r\n\t    }));\r\n\t})();\r\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(setImmediate) {// vim:ts=4:sts=4:sw=4:\n\t/*!\n\t *\n\t * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n\t * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n\t *\n\t * With parts by Tyler Close\n\t * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n\t * at http://www.opensource.org/licenses/mit-license.html\n\t * Forked at ref_send.js version: 2009-05-11\n\t *\n\t * With parts by Mark Miller\n\t * Copyright (C) 2011 Google Inc.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t *\n\t */\n\n\t(function (definition) {\n\t    \"use strict\";\n\n\t    // This file will function properly as a <script> tag, or a module\n\t    // using CommonJS and NodeJS or RequireJS module formats.  In\n\t    // Common/Node/RequireJS, the module exports the Q API and when\n\t    // executed as a simple <script>, it creates a Q global instead.\n\n\t    // Montage Require\n\t    if (typeof bootstrap === \"function\") {\n\t        bootstrap(\"promise\", definition);\n\n\t    // CommonJS\n\t    } else if (true) {\n\t        module.exports = definition();\n\n\t    // RequireJS\n\t    } else if (typeof define === \"function\" && define.amd) {\n\t        define(definition);\n\n\t    // SES (Secure EcmaScript)\n\t    } else if (typeof ses !== \"undefined\") {\n\t        if (!ses.ok()) {\n\t            return;\n\t        } else {\n\t            ses.makeQ = definition;\n\t        }\n\n\t    // <script>\n\t    } else if (typeof self !== \"undefined\") {\n\t        self.Q = definition();\n\n\t    } else {\n\t        throw new Error(\"This environment was not anticiapted by Q. Please file a bug.\");\n\t    }\n\n\t})(function () {\n\t\"use strict\";\n\n\tvar hasStacks = false;\n\ttry {\n\t    throw new Error();\n\t} catch (e) {\n\t    hasStacks = !!e.stack;\n\t}\n\n\t// All code after this point will be filtered from stack traces reported\n\t// by Q.\n\tvar qStartingLine = captureLine();\n\tvar qFileName;\n\n\t// shims\n\n\t// used for fallback in \"allResolved\"\n\tvar noop = function () {};\n\n\t// Use the fastest possible means to execute a task in a future turn\n\t// of the event loop.\n\tvar nextTick =(function () {\n\t    // linked list of tasks (single, with head node)\n\t    var head = {task: void 0, next: null};\n\t    var tail = head;\n\t    var flushing = false;\n\t    var requestTick = void 0;\n\t    var isNodeJS = false;\n\n\t    function flush() {\n\t        /* jshint loopfunc: true */\n\n\t        while (head.next) {\n\t            head = head.next;\n\t            var task = head.task;\n\t            head.task = void 0;\n\t            var domain = head.domain;\n\n\t            if (domain) {\n\t                head.domain = void 0;\n\t                domain.enter();\n\t            }\n\n\t            try {\n\t                task();\n\n\t            } catch (e) {\n\t                if (isNodeJS) {\n\t                    // In node, uncaught exceptions are considered fatal errors.\n\t                    // Re-throw them synchronously to interrupt flushing!\n\n\t                    // Ensure continuation if the uncaught exception is suppressed\n\t                    // listening \"uncaughtException\" events (as domains does).\n\t                    // Continue in next event to avoid tick recursion.\n\t                    if (domain) {\n\t                        domain.exit();\n\t                    }\n\t                    setTimeout(flush, 0);\n\t                    if (domain) {\n\t                        domain.enter();\n\t                    }\n\n\t                    throw e;\n\n\t                } else {\n\t                    // In browsers, uncaught exceptions are not fatal.\n\t                    // Re-throw them asynchronously to avoid slow-downs.\n\t                    setTimeout(function() {\n\t                       throw e;\n\t                    }, 0);\n\t                }\n\t            }\n\n\t            if (domain) {\n\t                domain.exit();\n\t            }\n\t        }\n\n\t        flushing = false;\n\t    }\n\n\t    nextTick = function (task) {\n\t        tail = tail.next = {\n\t            task: task,\n\t            domain: isNodeJS && process.domain,\n\t            next: null\n\t        };\n\n\t        if (!flushing) {\n\t            flushing = true;\n\t            requestTick();\n\t        }\n\t    };\n\n\t    if (typeof process !== \"undefined\" && process.nextTick) {\n\t        // Node.js before 0.9. Note that some fake-Node environments, like the\n\t        // Mocha test runner, introduce a `process` global without a `nextTick`.\n\t        isNodeJS = true;\n\n\t        requestTick = function () {\n\t            process.nextTick(flush);\n\t        };\n\n\t    } else if (typeof setImmediate === \"function\") {\n\t        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n\t        if (typeof window !== \"undefined\") {\n\t            requestTick = setImmediate.bind(window, flush);\n\t        } else {\n\t            requestTick = function () {\n\t                setImmediate(flush);\n\t            };\n\t        }\n\n\t    } else if (typeof MessageChannel !== \"undefined\") {\n\t        // modern browsers\n\t        // http://www.nonblocking.io/2011/06/windownexttick.html\n\t        var channel = new MessageChannel();\n\t        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n\t        // working message ports the first time a page loads.\n\t        channel.port1.onmessage = function () {\n\t            requestTick = requestPortTick;\n\t            channel.port1.onmessage = flush;\n\t            flush();\n\t        };\n\t        var requestPortTick = function () {\n\t            // Opera requires us to provide a message payload, regardless of\n\t            // whether we use it.\n\t            channel.port2.postMessage(0);\n\t        };\n\t        requestTick = function () {\n\t            setTimeout(flush, 0);\n\t            requestPortTick();\n\t        };\n\n\t    } else {\n\t        // old browsers\n\t        requestTick = function () {\n\t            setTimeout(flush, 0);\n\t        };\n\t    }\n\n\t    return nextTick;\n\t})();\n\n\t// Attempt to make generics safe in the face of downstream\n\t// modifications.\n\t// There is no situation where this is necessary.\n\t// If you need a security guarantee, these primordials need to be\n\t// deeply frozen anyway, and if you don’t need a security guarantee,\n\t// this is just plain paranoid.\n\t// However, this **might** have the nice side-effect of reducing the size of\n\t// the minified code by reducing x.call() to merely x()\n\t// See Mark Miller’s explanation of what this does.\n\t// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n\tvar call = Function.call;\n\tfunction uncurryThis(f) {\n\t    return function () {\n\t        return call.apply(f, arguments);\n\t    };\n\t}\n\t// This is equivalent, but slower:\n\t// uncurryThis = Function_bind.bind(Function_bind.call);\n\t// http://jsperf.com/uncurrythis\n\n\tvar array_slice = uncurryThis(Array.prototype.slice);\n\n\tvar array_reduce = uncurryThis(\n\t    Array.prototype.reduce || function (callback, basis) {\n\t        var index = 0,\n\t            length = this.length;\n\t        // concerning the initial value, if one is not provided\n\t        if (arguments.length === 1) {\n\t            // seek to the first value in the array, accounting\n\t            // for the possibility that is is a sparse array\n\t            do {\n\t                if (index in this) {\n\t                    basis = this[index++];\n\t                    break;\n\t                }\n\t                if (++index >= length) {\n\t                    throw new TypeError();\n\t                }\n\t            } while (1);\n\t        }\n\t        // reduce\n\t        for (; index < length; index++) {\n\t            // account for the possibility that the array is sparse\n\t            if (index in this) {\n\t                basis = callback(basis, this[index], index);\n\t            }\n\t        }\n\t        return basis;\n\t    }\n\t);\n\n\tvar array_indexOf = uncurryThis(\n\t    Array.prototype.indexOf || function (value) {\n\t        // not a very good shim, but good enough for our one use of it\n\t        for (var i = 0; i < this.length; i++) {\n\t            if (this[i] === value) {\n\t                return i;\n\t            }\n\t        }\n\t        return -1;\n\t    }\n\t);\n\n\tvar array_map = uncurryThis(\n\t    Array.prototype.map || function (callback, thisp) {\n\t        var self = this;\n\t        var collect = [];\n\t        array_reduce(self, function (undefined, value, index) {\n\t            collect.push(callback.call(thisp, value, index, self));\n\t        }, void 0);\n\t        return collect;\n\t    }\n\t);\n\n\tvar object_create = Object.create || function (prototype) {\n\t    function Type() { }\n\t    Type.prototype = prototype;\n\t    return new Type();\n\t};\n\n\tvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\n\tvar object_keys = Object.keys || function (object) {\n\t    var keys = [];\n\t    for (var key in object) {\n\t        if (object_hasOwnProperty(object, key)) {\n\t            keys.push(key);\n\t        }\n\t    }\n\t    return keys;\n\t};\n\n\tvar object_toString = uncurryThis(Object.prototype.toString);\n\n\tfunction isObject(value) {\n\t    return value === Object(value);\n\t}\n\n\t// generator related shims\n\n\t// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\n\tfunction isStopIteration(exception) {\n\t    return (\n\t        object_toString(exception) === \"[object StopIteration]\" ||\n\t        exception instanceof QReturnValue\n\t    );\n\t}\n\n\t// FIXME: Remove this helper and Q.return once ES6 generators are in\n\t// SpiderMonkey.\n\tvar QReturnValue;\n\tif (typeof ReturnValue !== \"undefined\") {\n\t    QReturnValue = ReturnValue;\n\t} else {\n\t    QReturnValue = function (value) {\n\t        this.value = value;\n\t    };\n\t}\n\n\t// long stack traces\n\n\tvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\n\tfunction makeStackTraceLong(error, promise) {\n\t    // If possible, transform the error stack trace by removing Node and Q\n\t    // cruft, then concatenating with the stack trace of `promise`. See #57.\n\t    if (hasStacks &&\n\t        promise.stack &&\n\t        typeof error === \"object\" &&\n\t        error !== null &&\n\t        error.stack &&\n\t        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n\t    ) {\n\t        var stacks = [];\n\t        for (var p = promise; !!p; p = p.source) {\n\t            if (p.stack) {\n\t                stacks.unshift(p.stack);\n\t            }\n\t        }\n\t        stacks.unshift(error.stack);\n\n\t        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n\t        error.stack = filterStackString(concatedStacks);\n\t    }\n\t}\n\n\tfunction filterStackString(stackString) {\n\t    var lines = stackString.split(\"\\n\");\n\t    var desiredLines = [];\n\t    for (var i = 0; i < lines.length; ++i) {\n\t        var line = lines[i];\n\n\t        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n\t            desiredLines.push(line);\n\t        }\n\t    }\n\t    return desiredLines.join(\"\\n\");\n\t}\n\n\tfunction isNodeFrame(stackLine) {\n\t    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n\t           stackLine.indexOf(\"(node.js:\") !== -1;\n\t}\n\n\tfunction getFileNameAndLineNumber(stackLine) {\n\t    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n\t    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n\t    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n\t    if (attempt1) {\n\t        return [attempt1[1], Number(attempt1[2])];\n\t    }\n\n\t    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n\t    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n\t    if (attempt2) {\n\t        return [attempt2[1], Number(attempt2[2])];\n\t    }\n\n\t    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n\t    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n\t    if (attempt3) {\n\t        return [attempt3[1], Number(attempt3[2])];\n\t    }\n\t}\n\n\tfunction isInternalFrame(stackLine) {\n\t    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n\t    if (!fileNameAndLineNumber) {\n\t        return false;\n\t    }\n\n\t    var fileName = fileNameAndLineNumber[0];\n\t    var lineNumber = fileNameAndLineNumber[1];\n\n\t    return fileName === qFileName &&\n\t        lineNumber >= qStartingLine &&\n\t        lineNumber <= qEndingLine;\n\t}\n\n\t// discover own file name and line number range for filtering stack\n\t// traces\n\tfunction captureLine() {\n\t    if (!hasStacks) {\n\t        return;\n\t    }\n\n\t    try {\n\t        throw new Error();\n\t    } catch (e) {\n\t        var lines = e.stack.split(\"\\n\");\n\t        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n\t        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n\t        if (!fileNameAndLineNumber) {\n\t            return;\n\t        }\n\n\t        qFileName = fileNameAndLineNumber[0];\n\t        return fileNameAndLineNumber[1];\n\t    }\n\t}\n\n\tfunction deprecate(callback, name, alternative) {\n\t    return function () {\n\t        if (typeof console !== \"undefined\" &&\n\t            typeof console.warn === \"function\") {\n\t            console.warn(name + \" is deprecated, use \" + alternative +\n\t                         \" instead.\", new Error(\"\").stack);\n\t        }\n\t        return callback.apply(callback, arguments);\n\t    };\n\t}\n\n\t// end of shims\n\t// beginning of real work\n\n\t/**\n\t * Constructs a promise for an immediate reference, passes promises through, or\n\t * coerces promises from different systems.\n\t * @param value immediate reference or promise\n\t */\n\tfunction Q(value) {\n\t    // If the object is already a Promise, return it directly.  This enables\n\t    // the resolve function to both be used to created references from objects,\n\t    // but to tolerably coerce non-promises to promises.\n\t    if (value instanceof Promise) {\n\t        return value;\n\t    }\n\n\t    // assimilate thenables\n\t    if (isPromiseAlike(value)) {\n\t        return coerce(value);\n\t    } else {\n\t        return fulfill(value);\n\t    }\n\t}\n\tQ.resolve = Q;\n\n\t/**\n\t * Performs a task in a future turn of the event loop.\n\t * @param {Function} task\n\t */\n\tQ.nextTick = nextTick;\n\n\t/**\n\t * Controls whether or not long stack traces will be on\n\t */\n\tQ.longStackSupport = false;\n\n\t// enable long stacks if Q_DEBUG is set\n\tif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n\t    Q.longStackSupport = true;\n\t}\n\n\t/**\n\t * Constructs a {promise, resolve, reject} object.\n\t *\n\t * `resolve` is a callback to invoke with a more resolved value for the\n\t * promise. To fulfill the promise, invoke `resolve` with any value that is\n\t * not a thenable. To reject the promise, invoke `resolve` with a rejected\n\t * thenable, or invoke `reject` with the reason directly. To resolve the\n\t * promise to another thenable, thus putting it in the same state, invoke\n\t * `resolve` with that other thenable.\n\t */\n\tQ.defer = defer;\n\tfunction defer() {\n\t    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n\t    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n\t    // element of the messages array is itself an array of complete arguments to\n\t    // forward to the resolved promise.  We coerce the resolution value to a\n\t    // promise using the `resolve` function because it handles both fully\n\t    // non-thenable values and other thenables gracefully.\n\t    var messages = [], progressListeners = [], resolvedPromise;\n\n\t    var deferred = object_create(defer.prototype);\n\t    var promise = object_create(Promise.prototype);\n\n\t    promise.promiseDispatch = function (resolve, op, operands) {\n\t        var args = array_slice(arguments);\n\t        if (messages) {\n\t            messages.push(args);\n\t            if (op === \"when\" && operands[1]) { // progress operand\n\t                progressListeners.push(operands[1]);\n\t            }\n\t        } else {\n\t            Q.nextTick(function () {\n\t                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n\t            });\n\t        }\n\t    };\n\n\t    // XXX deprecated\n\t    promise.valueOf = function () {\n\t        if (messages) {\n\t            return promise;\n\t        }\n\t        var nearerValue = nearer(resolvedPromise);\n\t        if (isPromise(nearerValue)) {\n\t            resolvedPromise = nearerValue; // shorten chain\n\t        }\n\t        return nearerValue;\n\t    };\n\n\t    promise.inspect = function () {\n\t        if (!resolvedPromise) {\n\t            return { state: \"pending\" };\n\t        }\n\t        return resolvedPromise.inspect();\n\t    };\n\n\t    if (Q.longStackSupport && hasStacks) {\n\t        try {\n\t            throw new Error();\n\t        } catch (e) {\n\t            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n\t            // accessor around; that causes memory leaks as per GH-111. Just\n\t            // reify the stack trace as a string ASAP.\n\t            //\n\t            // At the same time, cut off the first line; it's always just\n\t            // \"[object Promise]\\n\", as per the `toString`.\n\t            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n\t        }\n\t    }\n\n\t    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n\t    // consolidating them into `become`, since otherwise we'd create new\n\t    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n\t    function become(newPromise) {\n\t        resolvedPromise = newPromise;\n\t        promise.source = newPromise;\n\n\t        array_reduce(messages, function (undefined, message) {\n\t            Q.nextTick(function () {\n\t                newPromise.promiseDispatch.apply(newPromise, message);\n\t            });\n\t        }, void 0);\n\n\t        messages = void 0;\n\t        progressListeners = void 0;\n\t    }\n\n\t    deferred.promise = promise;\n\t    deferred.resolve = function (value) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\n\t        become(Q(value));\n\t    };\n\n\t    deferred.fulfill = function (value) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\n\t        become(fulfill(value));\n\t    };\n\t    deferred.reject = function (reason) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\n\t        become(reject(reason));\n\t    };\n\t    deferred.notify = function (progress) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\n\t        array_reduce(progressListeners, function (undefined, progressListener) {\n\t            Q.nextTick(function () {\n\t                progressListener(progress);\n\t            });\n\t        }, void 0);\n\t    };\n\n\t    return deferred;\n\t}\n\n\t/**\n\t * Creates a Node-style callback that will resolve or reject the deferred\n\t * promise.\n\t * @returns a nodeback\n\t */\n\tdefer.prototype.makeNodeResolver = function () {\n\t    var self = this;\n\t    return function (error, value) {\n\t        if (error) {\n\t            self.reject(error);\n\t        } else if (arguments.length > 2) {\n\t            self.resolve(array_slice(arguments, 1));\n\t        } else {\n\t            self.resolve(value);\n\t        }\n\t    };\n\t};\n\n\t/**\n\t * @param resolver {Function} a function that returns nothing and accepts\n\t * the resolve, reject, and notify functions for a deferred.\n\t * @returns a promise that may be resolved with the given resolve and reject\n\t * functions, or rejected by a thrown exception in resolver\n\t */\n\tQ.Promise = promise; // ES6\n\tQ.promise = promise;\n\tfunction promise(resolver) {\n\t    if (typeof resolver !== \"function\") {\n\t        throw new TypeError(\"resolver must be a function.\");\n\t    }\n\t    var deferred = defer();\n\t    try {\n\t        resolver(deferred.resolve, deferred.reject, deferred.notify);\n\t    } catch (reason) {\n\t        deferred.reject(reason);\n\t    }\n\t    return deferred.promise;\n\t}\n\n\tpromise.race = race; // ES6\n\tpromise.all = all; // ES6\n\tpromise.reject = reject; // ES6\n\tpromise.resolve = Q; // ES6\n\n\t// XXX experimental.  This method is a way to denote that a local value is\n\t// serializable and should be immediately dispatched to a remote upon request,\n\t// instead of passing a reference.\n\tQ.passByCopy = function (object) {\n\t    //freeze(object);\n\t    //passByCopies.set(object, true);\n\t    return object;\n\t};\n\n\tPromise.prototype.passByCopy = function () {\n\t    //freeze(object);\n\t    //passByCopies.set(object, true);\n\t    return this;\n\t};\n\n\t/**\n\t * If two promises eventually fulfill to the same value, promises that value,\n\t * but otherwise rejects.\n\t * @param x {Any*}\n\t * @param y {Any*}\n\t * @returns {Any*} a promise for x and y if they are the same, but a rejection\n\t * otherwise.\n\t *\n\t */\n\tQ.join = function (x, y) {\n\t    return Q(x).join(y);\n\t};\n\n\tPromise.prototype.join = function (that) {\n\t    return Q([this, that]).spread(function (x, y) {\n\t        if (x === y) {\n\t            // TODO: \"===\" should be Object.is or equiv\n\t            return x;\n\t        } else {\n\t            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n\t        }\n\t    });\n\t};\n\n\t/**\n\t * Returns a promise for the first of an array of promises to become settled.\n\t * @param answers {Array[Any*]} promises to race\n\t * @returns {Any*} the first promise to be settled\n\t */\n\tQ.race = race;\n\tfunction race(answerPs) {\n\t    return promise(function(resolve, reject) {\n\t        // Switch to this once we can assume at least ES5\n\t        // answerPs.forEach(function(answerP) {\n\t        //     Q(answerP).then(resolve, reject);\n\t        // });\n\t        // Use this in the meantime\n\t        for (var i = 0, len = answerPs.length; i < len; i++) {\n\t            Q(answerPs[i]).then(resolve, reject);\n\t        }\n\t    });\n\t}\n\n\tPromise.prototype.race = function () {\n\t    return this.then(Q.race);\n\t};\n\n\t/**\n\t * Constructs a Promise with a promise descriptor object and optional fallback\n\t * function.  The descriptor contains methods like when(rejected), get(name),\n\t * set(name, value), post(name, args), and delete(name), which all\n\t * return either a value, a promise for a value, or a rejection.  The fallback\n\t * accepts the operation name, a resolver, and any further arguments that would\n\t * have been forwarded to the appropriate method above had a method been\n\t * provided with the proper name.  The API makes no guarantees about the nature\n\t * of the returned object, apart from that it is usable whereever promises are\n\t * bought and sold.\n\t */\n\tQ.makePromise = Promise;\n\tfunction Promise(descriptor, fallback, inspect) {\n\t    if (fallback === void 0) {\n\t        fallback = function (op) {\n\t            return reject(new Error(\n\t                \"Promise does not support operation: \" + op\n\t            ));\n\t        };\n\t    }\n\t    if (inspect === void 0) {\n\t        inspect = function () {\n\t            return {state: \"unknown\"};\n\t        };\n\t    }\n\n\t    var promise = object_create(Promise.prototype);\n\n\t    promise.promiseDispatch = function (resolve, op, args) {\n\t        var result;\n\t        try {\n\t            if (descriptor[op]) {\n\t                result = descriptor[op].apply(promise, args);\n\t            } else {\n\t                result = fallback.call(promise, op, args);\n\t            }\n\t        } catch (exception) {\n\t            result = reject(exception);\n\t        }\n\t        if (resolve) {\n\t            resolve(result);\n\t        }\n\t    };\n\n\t    promise.inspect = inspect;\n\n\t    // XXX deprecated `valueOf` and `exception` support\n\t    if (inspect) {\n\t        var inspected = inspect();\n\t        if (inspected.state === \"rejected\") {\n\t            promise.exception = inspected.reason;\n\t        }\n\n\t        promise.valueOf = function () {\n\t            var inspected = inspect();\n\t            if (inspected.state === \"pending\" ||\n\t                inspected.state === \"rejected\") {\n\t                return promise;\n\t            }\n\t            return inspected.value;\n\t        };\n\t    }\n\n\t    return promise;\n\t}\n\n\tPromise.prototype.toString = function () {\n\t    return \"[object Promise]\";\n\t};\n\n\tPromise.prototype.then = function (fulfilled, rejected, progressed) {\n\t    var self = this;\n\t    var deferred = defer();\n\t    var done = false;   // ensure the untrusted promise makes at most a\n\t                        // single call to one of the callbacks\n\n\t    function _fulfilled(value) {\n\t        try {\n\t            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n\t        } catch (exception) {\n\t            return reject(exception);\n\t        }\n\t    }\n\n\t    function _rejected(exception) {\n\t        if (typeof rejected === \"function\") {\n\t            makeStackTraceLong(exception, self);\n\t            try {\n\t                return rejected(exception);\n\t            } catch (newException) {\n\t                return reject(newException);\n\t            }\n\t        }\n\t        return reject(exception);\n\t    }\n\n\t    function _progressed(value) {\n\t        return typeof progressed === \"function\" ? progressed(value) : value;\n\t    }\n\n\t    Q.nextTick(function () {\n\t        self.promiseDispatch(function (value) {\n\t            if (done) {\n\t                return;\n\t            }\n\t            done = true;\n\n\t            deferred.resolve(_fulfilled(value));\n\t        }, \"when\", [function (exception) {\n\t            if (done) {\n\t                return;\n\t            }\n\t            done = true;\n\n\t            deferred.resolve(_rejected(exception));\n\t        }]);\n\t    });\n\n\t    // Progress propagator need to be attached in the current tick.\n\t    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n\t        var newValue;\n\t        var threw = false;\n\t        try {\n\t            newValue = _progressed(value);\n\t        } catch (e) {\n\t            threw = true;\n\t            if (Q.onerror) {\n\t                Q.onerror(e);\n\t            } else {\n\t                throw e;\n\t            }\n\t        }\n\n\t        if (!threw) {\n\t            deferred.notify(newValue);\n\t        }\n\t    }]);\n\n\t    return deferred.promise;\n\t};\n\n\tQ.tap = function (promise, callback) {\n\t    return Q(promise).tap(callback);\n\t};\n\n\t/**\n\t * Works almost like \"finally\", but not called for rejections.\n\t * Original resolution value is passed through callback unaffected.\n\t * Callback may return a promise that will be awaited for.\n\t * @param {Function} callback\n\t * @returns {Q.Promise}\n\t * @example\n\t * doSomething()\n\t *   .then(...)\n\t *   .tap(console.log)\n\t *   .then(...);\n\t */\n\tPromise.prototype.tap = function (callback) {\n\t    callback = Q(callback);\n\n\t    return this.then(function (value) {\n\t        return callback.fcall(value).thenResolve(value);\n\t    });\n\t};\n\n\t/**\n\t * Registers an observer on a promise.\n\t *\n\t * Guarantees:\n\t *\n\t * 1. that fulfilled and rejected will be called only once.\n\t * 2. that either the fulfilled callback or the rejected callback will be\n\t *    called, but not both.\n\t * 3. that fulfilled and rejected will not be called in this turn.\n\t *\n\t * @param value      promise or immediate reference to observe\n\t * @param fulfilled  function to be called with the fulfilled value\n\t * @param rejected   function to be called with the rejection exception\n\t * @param progressed function to be called on any progress notifications\n\t * @return promise for the return value from the invoked callback\n\t */\n\tQ.when = when;\n\tfunction when(value, fulfilled, rejected, progressed) {\n\t    return Q(value).then(fulfilled, rejected, progressed);\n\t}\n\n\tPromise.prototype.thenResolve = function (value) {\n\t    return this.then(function () { return value; });\n\t};\n\n\tQ.thenResolve = function (promise, value) {\n\t    return Q(promise).thenResolve(value);\n\t};\n\n\tPromise.prototype.thenReject = function (reason) {\n\t    return this.then(function () { throw reason; });\n\t};\n\n\tQ.thenReject = function (promise, reason) {\n\t    return Q(promise).thenReject(reason);\n\t};\n\n\t/**\n\t * If an object is not a promise, it is as \"near\" as possible.\n\t * If a promise is rejected, it is as \"near\" as possible too.\n\t * If it’s a fulfilled promise, the fulfillment value is nearer.\n\t * If it’s a deferred promise and the deferred has been resolved, the\n\t * resolution is \"nearer\".\n\t * @param object\n\t * @returns most resolved (nearest) form of the object\n\t */\n\n\t// XXX should we re-do this?\n\tQ.nearer = nearer;\n\tfunction nearer(value) {\n\t    if (isPromise(value)) {\n\t        var inspected = value.inspect();\n\t        if (inspected.state === \"fulfilled\") {\n\t            return inspected.value;\n\t        }\n\t    }\n\t    return value;\n\t}\n\n\t/**\n\t * @returns whether the given object is a promise.\n\t * Otherwise it is a fulfilled value.\n\t */\n\tQ.isPromise = isPromise;\n\tfunction isPromise(object) {\n\t    return object instanceof Promise;\n\t}\n\n\tQ.isPromiseAlike = isPromiseAlike;\n\tfunction isPromiseAlike(object) {\n\t    return isObject(object) && typeof object.then === \"function\";\n\t}\n\n\t/**\n\t * @returns whether the given object is a pending promise, meaning not\n\t * fulfilled or rejected.\n\t */\n\tQ.isPending = isPending;\n\tfunction isPending(object) {\n\t    return isPromise(object) && object.inspect().state === \"pending\";\n\t}\n\n\tPromise.prototype.isPending = function () {\n\t    return this.inspect().state === \"pending\";\n\t};\n\n\t/**\n\t * @returns whether the given object is a value or fulfilled\n\t * promise.\n\t */\n\tQ.isFulfilled = isFulfilled;\n\tfunction isFulfilled(object) {\n\t    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n\t}\n\n\tPromise.prototype.isFulfilled = function () {\n\t    return this.inspect().state === \"fulfilled\";\n\t};\n\n\t/**\n\t * @returns whether the given object is a rejected promise.\n\t */\n\tQ.isRejected = isRejected;\n\tfunction isRejected(object) {\n\t    return isPromise(object) && object.inspect().state === \"rejected\";\n\t}\n\n\tPromise.prototype.isRejected = function () {\n\t    return this.inspect().state === \"rejected\";\n\t};\n\n\t//// BEGIN UNHANDLED REJECTION TRACKING\n\n\t// This promise library consumes exceptions thrown in handlers so they can be\n\t// handled by a subsequent promise.  The exceptions get added to this array when\n\t// they are created, and removed when they are handled.  Note that in ES6 or\n\t// shimmed environments, this would naturally be a `Set`.\n\tvar unhandledReasons = [];\n\tvar unhandledRejections = [];\n\tvar trackUnhandledRejections = true;\n\n\tfunction resetUnhandledRejections() {\n\t    unhandledReasons.length = 0;\n\t    unhandledRejections.length = 0;\n\n\t    if (!trackUnhandledRejections) {\n\t        trackUnhandledRejections = true;\n\t    }\n\t}\n\n\tfunction trackRejection(promise, reason) {\n\t    if (!trackUnhandledRejections) {\n\t        return;\n\t    }\n\n\t    unhandledRejections.push(promise);\n\t    if (reason && typeof reason.stack !== \"undefined\") {\n\t        unhandledReasons.push(reason.stack);\n\t    } else {\n\t        unhandledReasons.push(\"(no stack) \" + reason);\n\t    }\n\t}\n\n\tfunction untrackRejection(promise) {\n\t    if (!trackUnhandledRejections) {\n\t        return;\n\t    }\n\n\t    var at = array_indexOf(unhandledRejections, promise);\n\t    if (at !== -1) {\n\t        unhandledRejections.splice(at, 1);\n\t        unhandledReasons.splice(at, 1);\n\t    }\n\t}\n\n\tQ.resetUnhandledRejections = resetUnhandledRejections;\n\n\tQ.getUnhandledReasons = function () {\n\t    // Make a copy so that consumers can't interfere with our internal state.\n\t    return unhandledReasons.slice();\n\t};\n\n\tQ.stopUnhandledRejectionTracking = function () {\n\t    resetUnhandledRejections();\n\t    trackUnhandledRejections = false;\n\t};\n\n\tresetUnhandledRejections();\n\n\t//// END UNHANDLED REJECTION TRACKING\n\n\t/**\n\t * Constructs a rejected promise.\n\t * @param reason value describing the failure\n\t */\n\tQ.reject = reject;\n\tfunction reject(reason) {\n\t    var rejection = Promise({\n\t        \"when\": function (rejected) {\n\t            // note that the error has been handled\n\t            if (rejected) {\n\t                untrackRejection(this);\n\t            }\n\t            return rejected ? rejected(reason) : this;\n\t        }\n\t    }, function fallback() {\n\t        return this;\n\t    }, function inspect() {\n\t        return { state: \"rejected\", reason: reason };\n\t    });\n\n\t    // Note that the reason has not been handled.\n\t    trackRejection(rejection, reason);\n\n\t    return rejection;\n\t}\n\n\t/**\n\t * Constructs a fulfilled promise for an immediate reference.\n\t * @param value immediate reference\n\t */\n\tQ.fulfill = fulfill;\n\tfunction fulfill(value) {\n\t    return Promise({\n\t        \"when\": function () {\n\t            return value;\n\t        },\n\t        \"get\": function (name) {\n\t            return value[name];\n\t        },\n\t        \"set\": function (name, rhs) {\n\t            value[name] = rhs;\n\t        },\n\t        \"delete\": function (name) {\n\t            delete value[name];\n\t        },\n\t        \"post\": function (name, args) {\n\t            // Mark Miller proposes that post with no name should apply a\n\t            // promised function.\n\t            if (name === null || name === void 0) {\n\t                return value.apply(void 0, args);\n\t            } else {\n\t                return value[name].apply(value, args);\n\t            }\n\t        },\n\t        \"apply\": function (thisp, args) {\n\t            return value.apply(thisp, args);\n\t        },\n\t        \"keys\": function () {\n\t            return object_keys(value);\n\t        }\n\t    }, void 0, function inspect() {\n\t        return { state: \"fulfilled\", value: value };\n\t    });\n\t}\n\n\t/**\n\t * Converts thenables to Q promises.\n\t * @param promise thenable promise\n\t * @returns a Q promise\n\t */\n\tfunction coerce(promise) {\n\t    var deferred = defer();\n\t    Q.nextTick(function () {\n\t        try {\n\t            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n\t        } catch (exception) {\n\t            deferred.reject(exception);\n\t        }\n\t    });\n\t    return deferred.promise;\n\t}\n\n\t/**\n\t * Annotates an object such that it will never be\n\t * transferred away from this process over any promise\n\t * communication channel.\n\t * @param object\n\t * @returns promise a wrapping of that object that\n\t * additionally responds to the \"isDef\" message\n\t * without a rejection.\n\t */\n\tQ.master = master;\n\tfunction master(object) {\n\t    return Promise({\n\t        \"isDef\": function () {}\n\t    }, function fallback(op, args) {\n\t        return dispatch(object, op, args);\n\t    }, function () {\n\t        return Q(object).inspect();\n\t    });\n\t}\n\n\t/**\n\t * Spreads the values of a promised array of arguments into the\n\t * fulfillment callback.\n\t * @param fulfilled callback that receives variadic arguments from the\n\t * promised array\n\t * @param rejected callback that receives the exception if the promise\n\t * is rejected.\n\t * @returns a promise for the return value or thrown exception of\n\t * either callback.\n\t */\n\tQ.spread = spread;\n\tfunction spread(value, fulfilled, rejected) {\n\t    return Q(value).spread(fulfilled, rejected);\n\t}\n\n\tPromise.prototype.spread = function (fulfilled, rejected) {\n\t    return this.all().then(function (array) {\n\t        return fulfilled.apply(void 0, array);\n\t    }, rejected);\n\t};\n\n\t/**\n\t * The async function is a decorator for generator functions, turning\n\t * them into asynchronous generators.  Although generators are only part\n\t * of the newest ECMAScript 6 drafts, this code does not cause syntax\n\t * errors in older engines.  This code should continue to work and will\n\t * in fact improve over time as the language improves.\n\t *\n\t * ES6 generators are currently part of V8 version 3.19 with the\n\t * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n\t * for longer, but under an older Python-inspired form.  This function\n\t * works on both kinds of generators.\n\t *\n\t * Decorates a generator function such that:\n\t *  - it may yield promises\n\t *  - execution will continue when that promise is fulfilled\n\t *  - the value of the yield expression will be the fulfilled value\n\t *  - it returns a promise for the return value (when the generator\n\t *    stops iterating)\n\t *  - the decorated function returns a promise for the return value\n\t *    of the generator or the first rejected promise among those\n\t *    yielded.\n\t *  - if an error is thrown in the generator, it propagates through\n\t *    every following yield until it is caught, or until it escapes\n\t *    the generator function altogether, and is translated into a\n\t *    rejection for the promise returned by the decorated generator.\n\t */\n\tQ.async = async;\n\tfunction async(makeGenerator) {\n\t    return function () {\n\t        // when verb is \"send\", arg is a value\n\t        // when verb is \"throw\", arg is an exception\n\t        function continuer(verb, arg) {\n\t            var result;\n\n\t            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n\t            // engine that has a deployed base of browsers that support generators.\n\t            // However, SM's generators use the Python-inspired semantics of\n\t            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n\t            // like to make it possible to use generators in deployed browsers, so\n\t            // we also support Python-style generators.  At some point we can remove\n\t            // this block.\n\n\t            if (typeof StopIteration === \"undefined\") {\n\t                // ES6 Generators\n\t                try {\n\t                    result = generator[verb](arg);\n\t                } catch (exception) {\n\t                    return reject(exception);\n\t                }\n\t                if (result.done) {\n\t                    return Q(result.value);\n\t                } else {\n\t                    return when(result.value, callback, errback);\n\t                }\n\t            } else {\n\t                // SpiderMonkey Generators\n\t                // FIXME: Remove this case when SM does ES6 generators.\n\t                try {\n\t                    result = generator[verb](arg);\n\t                } catch (exception) {\n\t                    if (isStopIteration(exception)) {\n\t                        return Q(exception.value);\n\t                    } else {\n\t                        return reject(exception);\n\t                    }\n\t                }\n\t                return when(result, callback, errback);\n\t            }\n\t        }\n\t        var generator = makeGenerator.apply(this, arguments);\n\t        var callback = continuer.bind(continuer, \"next\");\n\t        var errback = continuer.bind(continuer, \"throw\");\n\t        return callback();\n\t    };\n\t}\n\n\t/**\n\t * The spawn function is a small wrapper around async that immediately\n\t * calls the generator and also ends the promise chain, so that any\n\t * unhandled errors are thrown instead of forwarded to the error\n\t * handler. This is useful because it's extremely common to run\n\t * generators at the top-level to work with libraries.\n\t */\n\tQ.spawn = spawn;\n\tfunction spawn(makeGenerator) {\n\t    Q.done(Q.async(makeGenerator)());\n\t}\n\n\t// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n\t/**\n\t * Throws a ReturnValue exception to stop an asynchronous generator.\n\t *\n\t * This interface is a stop-gap measure to support generator return\n\t * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n\t * generators like Chromium 29, just use \"return\" in your generator\n\t * functions.\n\t *\n\t * @param value the return value for the surrounding generator\n\t * @throws ReturnValue exception with the value.\n\t * @example\n\t * // ES6 style\n\t * Q.async(function* () {\n\t *      var foo = yield getFooPromise();\n\t *      var bar = yield getBarPromise();\n\t *      return foo + bar;\n\t * })\n\t * // Older SpiderMonkey style\n\t * Q.async(function () {\n\t *      var foo = yield getFooPromise();\n\t *      var bar = yield getBarPromise();\n\t *      Q.return(foo + bar);\n\t * })\n\t */\n\tQ[\"return\"] = _return;\n\tfunction _return(value) {\n\t    throw new QReturnValue(value);\n\t}\n\n\t/**\n\t * The promised function decorator ensures that any promise arguments\n\t * are settled and passed as values (`this` is also settled and passed\n\t * as a value).  It will also ensure that the result of a function is\n\t * always a promise.\n\t *\n\t * @example\n\t * var add = Q.promised(function (a, b) {\n\t *     return a + b;\n\t * });\n\t * add(Q(a), Q(B));\n\t *\n\t * @param {function} callback The function to decorate\n\t * @returns {function} a function that has been decorated.\n\t */\n\tQ.promised = promised;\n\tfunction promised(callback) {\n\t    return function () {\n\t        return spread([this, all(arguments)], function (self, args) {\n\t            return callback.apply(self, args);\n\t        });\n\t    };\n\t}\n\n\t/**\n\t * sends a message to a value in a future turn\n\t * @param object* the recipient\n\t * @param op the name of the message operation, e.g., \"when\",\n\t * @param args further arguments to be forwarded to the operation\n\t * @returns result {Promise} a promise for the result of the operation\n\t */\n\tQ.dispatch = dispatch;\n\tfunction dispatch(object, op, args) {\n\t    return Q(object).dispatch(op, args);\n\t}\n\n\tPromise.prototype.dispatch = function (op, args) {\n\t    var self = this;\n\t    var deferred = defer();\n\t    Q.nextTick(function () {\n\t        self.promiseDispatch(deferred.resolve, op, args);\n\t    });\n\t    return deferred.promise;\n\t};\n\n\t/**\n\t * Gets the value of a property in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of property to get\n\t * @return promise for the property value\n\t */\n\tQ.get = function (object, key) {\n\t    return Q(object).dispatch(\"get\", [key]);\n\t};\n\n\tPromise.prototype.get = function (key) {\n\t    return this.dispatch(\"get\", [key]);\n\t};\n\n\t/**\n\t * Sets the value of a property in a future turn.\n\t * @param object    promise or immediate reference for object object\n\t * @param name      name of property to set\n\t * @param value     new value of property\n\t * @return promise for the return value\n\t */\n\tQ.set = function (object, key, value) {\n\t    return Q(object).dispatch(\"set\", [key, value]);\n\t};\n\n\tPromise.prototype.set = function (key, value) {\n\t    return this.dispatch(\"set\", [key, value]);\n\t};\n\n\t/**\n\t * Deletes a property in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of property to delete\n\t * @return promise for the return value\n\t */\n\tQ.del = // XXX legacy\n\tQ[\"delete\"] = function (object, key) {\n\t    return Q(object).dispatch(\"delete\", [key]);\n\t};\n\n\tPromise.prototype.del = // XXX legacy\n\tPromise.prototype[\"delete\"] = function (key) {\n\t    return this.dispatch(\"delete\", [key]);\n\t};\n\n\t/**\n\t * Invokes a method in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of method to invoke\n\t * @param value     a value to post, typically an array of\n\t *                  invocation arguments for promises that\n\t *                  are ultimately backed with `resolve` values,\n\t *                  as opposed to those backed with URLs\n\t *                  wherein the posted value can be any\n\t *                  JSON serializable object.\n\t * @return promise for the return value\n\t */\n\t// bound locally because it is used by other methods\n\tQ.mapply = // XXX As proposed by \"Redsandro\"\n\tQ.post = function (object, name, args) {\n\t    return Q(object).dispatch(\"post\", [name, args]);\n\t};\n\n\tPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\n\tPromise.prototype.post = function (name, args) {\n\t    return this.dispatch(\"post\", [name, args]);\n\t};\n\n\t/**\n\t * Invokes a method in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of method to invoke\n\t * @param ...args   array of invocation arguments\n\t * @return promise for the return value\n\t */\n\tQ.send = // XXX Mark Miller's proposed parlance\n\tQ.mcall = // XXX As proposed by \"Redsandro\"\n\tQ.invoke = function (object, name /*...args*/) {\n\t    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n\t};\n\n\tPromise.prototype.send = // XXX Mark Miller's proposed parlance\n\tPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\n\tPromise.prototype.invoke = function (name /*...args*/) {\n\t    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n\t};\n\n\t/**\n\t * Applies the promised function in a future turn.\n\t * @param object    promise or immediate reference for target function\n\t * @param args      array of application arguments\n\t */\n\tQ.fapply = function (object, args) {\n\t    return Q(object).dispatch(\"apply\", [void 0, args]);\n\t};\n\n\tPromise.prototype.fapply = function (args) {\n\t    return this.dispatch(\"apply\", [void 0, args]);\n\t};\n\n\t/**\n\t * Calls the promised function in a future turn.\n\t * @param object    promise or immediate reference for target function\n\t * @param ...args   array of application arguments\n\t */\n\tQ[\"try\"] =\n\tQ.fcall = function (object /* ...args*/) {\n\t    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n\t};\n\n\tPromise.prototype.fcall = function (/*...args*/) {\n\t    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n\t};\n\n\t/**\n\t * Binds the promised function, transforming return values into a fulfilled\n\t * promise and thrown errors into a rejected one.\n\t * @param object    promise or immediate reference for target function\n\t * @param ...args   array of application arguments\n\t */\n\tQ.fbind = function (object /*...args*/) {\n\t    var promise = Q(object);\n\t    var args = array_slice(arguments, 1);\n\t    return function fbound() {\n\t        return promise.dispatch(\"apply\", [\n\t            this,\n\t            args.concat(array_slice(arguments))\n\t        ]);\n\t    };\n\t};\n\tPromise.prototype.fbind = function (/*...args*/) {\n\t    var promise = this;\n\t    var args = array_slice(arguments);\n\t    return function fbound() {\n\t        return promise.dispatch(\"apply\", [\n\t            this,\n\t            args.concat(array_slice(arguments))\n\t        ]);\n\t    };\n\t};\n\n\t/**\n\t * Requests the names of the owned properties of a promised\n\t * object in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @return promise for the keys of the eventually settled object\n\t */\n\tQ.keys = function (object) {\n\t    return Q(object).dispatch(\"keys\", []);\n\t};\n\n\tPromise.prototype.keys = function () {\n\t    return this.dispatch(\"keys\", []);\n\t};\n\n\t/**\n\t * Turns an array of promises into a promise for an array.  If any of\n\t * the promises gets rejected, the whole array is rejected immediately.\n\t * @param {Array*} an array (or promise for an array) of values (or\n\t * promises for values)\n\t * @returns a promise for an array of the corresponding values\n\t */\n\t// By Mark Miller\n\t// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\n\tQ.all = all;\n\tfunction all(promises) {\n\t    return when(promises, function (promises) {\n\t        var countDown = 0;\n\t        var deferred = defer();\n\t        array_reduce(promises, function (undefined, promise, index) {\n\t            var snapshot;\n\t            if (\n\t                isPromise(promise) &&\n\t                (snapshot = promise.inspect()).state === \"fulfilled\"\n\t            ) {\n\t                promises[index] = snapshot.value;\n\t            } else {\n\t                ++countDown;\n\t                when(\n\t                    promise,\n\t                    function (value) {\n\t                        promises[index] = value;\n\t                        if (--countDown === 0) {\n\t                            deferred.resolve(promises);\n\t                        }\n\t                    },\n\t                    deferred.reject,\n\t                    function (progress) {\n\t                        deferred.notify({ index: index, value: progress });\n\t                    }\n\t                );\n\t            }\n\t        }, void 0);\n\t        if (countDown === 0) {\n\t            deferred.resolve(promises);\n\t        }\n\t        return deferred.promise;\n\t    });\n\t}\n\n\tPromise.prototype.all = function () {\n\t    return all(this);\n\t};\n\n\t/**\n\t * Waits for all promises to be settled, either fulfilled or\n\t * rejected.  This is distinct from `all` since that would stop\n\t * waiting at the first rejection.  The promise returned by\n\t * `allResolved` will never be rejected.\n\t * @param promises a promise for an array (or an array) of promises\n\t * (or values)\n\t * @return a promise for an array of promises\n\t */\n\tQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\n\tfunction allResolved(promises) {\n\t    return when(promises, function (promises) {\n\t        promises = array_map(promises, Q);\n\t        return when(all(array_map(promises, function (promise) {\n\t            return when(promise, noop, noop);\n\t        })), function () {\n\t            return promises;\n\t        });\n\t    });\n\t}\n\n\tPromise.prototype.allResolved = function () {\n\t    return allResolved(this);\n\t};\n\n\t/**\n\t * @see Promise#allSettled\n\t */\n\tQ.allSettled = allSettled;\n\tfunction allSettled(promises) {\n\t    return Q(promises).allSettled();\n\t}\n\n\t/**\n\t * Turns an array of promises into a promise for an array of their states (as\n\t * returned by `inspect`) when they have all settled.\n\t * @param {Array[Any*]} values an array (or promise for an array) of values (or\n\t * promises for values)\n\t * @returns {Array[State]} an array of states for the respective values.\n\t */\n\tPromise.prototype.allSettled = function () {\n\t    return this.then(function (promises) {\n\t        return all(array_map(promises, function (promise) {\n\t            promise = Q(promise);\n\t            function regardless() {\n\t                return promise.inspect();\n\t            }\n\t            return promise.then(regardless, regardless);\n\t        }));\n\t    });\n\t};\n\n\t/**\n\t * Captures the failure of a promise, giving an oportunity to recover\n\t * with a callback.  If the given promise is fulfilled, the returned\n\t * promise is fulfilled.\n\t * @param {Any*} promise for something\n\t * @param {Function} callback to fulfill the returned promise if the\n\t * given promise is rejected\n\t * @returns a promise for the return value of the callback\n\t */\n\tQ.fail = // XXX legacy\n\tQ[\"catch\"] = function (object, rejected) {\n\t    return Q(object).then(void 0, rejected);\n\t};\n\n\tPromise.prototype.fail = // XXX legacy\n\tPromise.prototype[\"catch\"] = function (rejected) {\n\t    return this.then(void 0, rejected);\n\t};\n\n\t/**\n\t * Attaches a listener that can respond to progress notifications from a\n\t * promise's originating deferred. This listener receives the exact arguments\n\t * passed to ``deferred.notify``.\n\t * @param {Any*} promise for something\n\t * @param {Function} callback to receive any progress notifications\n\t * @returns the given promise, unchanged\n\t */\n\tQ.progress = progress;\n\tfunction progress(object, progressed) {\n\t    return Q(object).then(void 0, void 0, progressed);\n\t}\n\n\tPromise.prototype.progress = function (progressed) {\n\t    return this.then(void 0, void 0, progressed);\n\t};\n\n\t/**\n\t * Provides an opportunity to observe the settling of a promise,\n\t * regardless of whether the promise is fulfilled or rejected.  Forwards\n\t * the resolution to the returned promise when the callback is done.\n\t * The callback can return a promise to defer completion.\n\t * @param {Any*} promise\n\t * @param {Function} callback to observe the resolution of the given\n\t * promise, takes no arguments.\n\t * @returns a promise for the resolution of the given promise when\n\t * ``fin`` is done.\n\t */\n\tQ.fin = // XXX legacy\n\tQ[\"finally\"] = function (object, callback) {\n\t    return Q(object)[\"finally\"](callback);\n\t};\n\n\tPromise.prototype.fin = // XXX legacy\n\tPromise.prototype[\"finally\"] = function (callback) {\n\t    callback = Q(callback);\n\t    return this.then(function (value) {\n\t        return callback.fcall().then(function () {\n\t            return value;\n\t        });\n\t    }, function (reason) {\n\t        // TODO attempt to recycle the rejection with \"this\".\n\t        return callback.fcall().then(function () {\n\t            throw reason;\n\t        });\n\t    });\n\t};\n\n\t/**\n\t * Terminates a chain of promises, forcing rejections to be\n\t * thrown as exceptions.\n\t * @param {Any*} promise at the end of a chain of promises\n\t * @returns nothing\n\t */\n\tQ.done = function (object, fulfilled, rejected, progress) {\n\t    return Q(object).done(fulfilled, rejected, progress);\n\t};\n\n\tPromise.prototype.done = function (fulfilled, rejected, progress) {\n\t    var onUnhandledError = function (error) {\n\t        // forward to a future turn so that ``when``\n\t        // does not catch it and turn it into a rejection.\n\t        Q.nextTick(function () {\n\t            makeStackTraceLong(error, promise);\n\t            if (Q.onerror) {\n\t                Q.onerror(error);\n\t            } else {\n\t                throw error;\n\t            }\n\t        });\n\t    };\n\n\t    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n\t    var promise = fulfilled || rejected || progress ?\n\t        this.then(fulfilled, rejected, progress) :\n\t        this;\n\n\t    if (typeof process === \"object\" && process && process.domain) {\n\t        onUnhandledError = process.domain.bind(onUnhandledError);\n\t    }\n\n\t    promise.then(void 0, onUnhandledError);\n\t};\n\n\t/**\n\t * Causes a promise to be rejected if it does not get fulfilled before\n\t * some milliseconds time out.\n\t * @param {Any*} promise\n\t * @param {Number} milliseconds timeout\n\t * @param {Any*} custom error message or Error object (optional)\n\t * @returns a promise for the resolution of the given promise if it is\n\t * fulfilled before the timeout, otherwise rejected.\n\t */\n\tQ.timeout = function (object, ms, error) {\n\t    return Q(object).timeout(ms, error);\n\t};\n\n\tPromise.prototype.timeout = function (ms, error) {\n\t    var deferred = defer();\n\t    var timeoutId = setTimeout(function () {\n\t        if (!error || \"string\" === typeof error) {\n\t            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n\t            error.code = \"ETIMEDOUT\";\n\t        }\n\t        deferred.reject(error);\n\t    }, ms);\n\n\t    this.then(function (value) {\n\t        clearTimeout(timeoutId);\n\t        deferred.resolve(value);\n\t    }, function (exception) {\n\t        clearTimeout(timeoutId);\n\t        deferred.reject(exception);\n\t    }, deferred.notify);\n\n\t    return deferred.promise;\n\t};\n\n\t/**\n\t * Returns a promise for the given value (or promised value), some\n\t * milliseconds after it resolved. Passes rejections immediately.\n\t * @param {Any*} promise\n\t * @param {Number} milliseconds\n\t * @returns a promise for the resolution of the given promise after milliseconds\n\t * time has elapsed since the resolution of the given promise.\n\t * If the given promise rejects, that is passed immediately.\n\t */\n\tQ.delay = function (object, timeout) {\n\t    if (timeout === void 0) {\n\t        timeout = object;\n\t        object = void 0;\n\t    }\n\t    return Q(object).delay(timeout);\n\t};\n\n\tPromise.prototype.delay = function (timeout) {\n\t    return this.then(function (value) {\n\t        var deferred = defer();\n\t        setTimeout(function () {\n\t            deferred.resolve(value);\n\t        }, timeout);\n\t        return deferred.promise;\n\t    });\n\t};\n\n\t/**\n\t * Passes a continuation to a Node function, which is called with the given\n\t * arguments provided as an array, and returns a promise.\n\t *\n\t *      Q.nfapply(FS.readFile, [__filename])\n\t *      .then(function (content) {\n\t *      })\n\t *\n\t */\n\tQ.nfapply = function (callback, args) {\n\t    return Q(callback).nfapply(args);\n\t};\n\n\tPromise.prototype.nfapply = function (args) {\n\t    var deferred = defer();\n\t    var nodeArgs = array_slice(args);\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.fapply(nodeArgs).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\n\t/**\n\t * Passes a continuation to a Node function, which is called with the given\n\t * arguments provided individually, and returns a promise.\n\t * @example\n\t * Q.nfcall(FS.readFile, __filename)\n\t * .then(function (content) {\n\t * })\n\t *\n\t */\n\tQ.nfcall = function (callback /*...args*/) {\n\t    var args = array_slice(arguments, 1);\n\t    return Q(callback).nfapply(args);\n\t};\n\n\tPromise.prototype.nfcall = function (/*...args*/) {\n\t    var nodeArgs = array_slice(arguments);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.fapply(nodeArgs).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\n\t/**\n\t * Wraps a NodeJS continuation passing function and returns an equivalent\n\t * version that returns a promise.\n\t * @example\n\t * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n\t * .then(console.log)\n\t * .done()\n\t */\n\tQ.nfbind =\n\tQ.denodeify = function (callback /*...args*/) {\n\t    var baseArgs = array_slice(arguments, 1);\n\t    return function () {\n\t        var nodeArgs = baseArgs.concat(array_slice(arguments));\n\t        var deferred = defer();\n\t        nodeArgs.push(deferred.makeNodeResolver());\n\t        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n\t        return deferred.promise;\n\t    };\n\t};\n\n\tPromise.prototype.nfbind =\n\tPromise.prototype.denodeify = function (/*...args*/) {\n\t    var args = array_slice(arguments);\n\t    args.unshift(this);\n\t    return Q.denodeify.apply(void 0, args);\n\t};\n\n\tQ.nbind = function (callback, thisp /*...args*/) {\n\t    var baseArgs = array_slice(arguments, 2);\n\t    return function () {\n\t        var nodeArgs = baseArgs.concat(array_slice(arguments));\n\t        var deferred = defer();\n\t        nodeArgs.push(deferred.makeNodeResolver());\n\t        function bound() {\n\t            return callback.apply(thisp, arguments);\n\t        }\n\t        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n\t        return deferred.promise;\n\t    };\n\t};\n\n\tPromise.prototype.nbind = function (/*thisp, ...args*/) {\n\t    var args = array_slice(arguments, 0);\n\t    args.unshift(this);\n\t    return Q.nbind.apply(void 0, args);\n\t};\n\n\t/**\n\t * Calls a method of a Node-style object that accepts a Node-style\n\t * callback with a given array of arguments, plus a provided callback.\n\t * @param object an object that has the named method\n\t * @param {String} name name of the method of object\n\t * @param {Array} args arguments to pass to the method; the callback\n\t * will be provided by Q and appended to these arguments.\n\t * @returns a promise for the value or error\n\t */\n\tQ.nmapply = // XXX As proposed by \"Redsandro\"\n\tQ.npost = function (object, name, args) {\n\t    return Q(object).npost(name, args);\n\t};\n\n\tPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\n\tPromise.prototype.npost = function (name, args) {\n\t    var nodeArgs = array_slice(args || []);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\n\t/**\n\t * Calls a method of a Node-style object that accepts a Node-style\n\t * callback, forwarding the given variadic arguments, plus a provided\n\t * callback argument.\n\t * @param object an object that has the named method\n\t * @param {String} name name of the method of object\n\t * @param ...args arguments to pass to the method; the callback will\n\t * be provided by Q and appended to these arguments.\n\t * @returns a promise for the value or error\n\t */\n\tQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\n\tQ.nmcall = // XXX Based on \"Redsandro's\" proposal\n\tQ.ninvoke = function (object, name /*...args*/) {\n\t    var nodeArgs = array_slice(arguments, 2);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\n\tPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\n\tPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\n\tPromise.prototype.ninvoke = function (name /*...args*/) {\n\t    var nodeArgs = array_slice(arguments, 1);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\n\t/**\n\t * If a function would like to support both Node continuation-passing-style and\n\t * promise-returning-style, it can end its internal promise chain with\n\t * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n\t * elects to use a nodeback, the result will be sent there.  If they do not\n\t * pass a nodeback, they will receive the result promise.\n\t * @param object a result (or a promise for a result)\n\t * @param {Function} nodeback a Node.js-style callback\n\t * @returns either the promise or nothing\n\t */\n\tQ.nodeify = nodeify;\n\tfunction nodeify(object, nodeback) {\n\t    return Q(object).nodeify(nodeback);\n\t}\n\n\tPromise.prototype.nodeify = function (nodeback) {\n\t    if (nodeback) {\n\t        this.then(function (value) {\n\t            Q.nextTick(function () {\n\t                nodeback(null, value);\n\t            });\n\t        }, function (error) {\n\t            Q.nextTick(function () {\n\t                nodeback(error);\n\t            });\n\t        });\n\t    } else {\n\t        return this;\n\t    }\n\t};\n\n\t// All code before this point will be filtered from stack traces.\n\tvar qEndingLine = captureLine();\n\n\treturn Q;\n\n\t});\n\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22).setImmediate))\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Copyright (c) 2010 David Durman\n\t//\n\t// The contents of this file are subject to the MIT License (the \"License\");\n\t// you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\t// http://opensource.org/licenses/MIT.\n\t//\n\t// This hierarchical state machine implementation has been inspired\n\t// by the QP active object framework, see http://www.state-machine.com/\n\n\n\t(function(root, factory){\n\t    \"use strict\";\n\n\t    if (true) {\n\n\t        // Node. Does not work with strict CommonJS, but\n\t        // only CommonJS-like enviroments that support module.exports,\n\t        // like Node.\n\t        module.exports = factory();\n\n\t    } else if (typeof define === 'function' && define.amd) {\n\n\t        // AMD. Register as an anonymous module.\n\t        define(factory);\n\n\t    } else {\n\n\t        // Browser globals (root is window)\n\t        root.Statechart = factory();\n\t    }\n\n\t}(this, function(){\n\n\t    \"use strict\";\n\n\t    var assert = function(assertion){\n\t        if (!assertion) {\n\t            throw new Error(\"Assertion failed.\");\n\t        }\n\t    };\n\n\n\t    // Statechart.\n\t    // -----------\n\n\t    // `myState` - the current state\n\t    // `mySource` - the source of the current transition\n\n\t    var Statechart = {\n\n\t        run: function(opt){\n\t            opt = opt || {};\n\t            this.debug = opt.debug ? opt.debug : function(){};\n\t            this.construct(this.initialState);\n\t            this.init(null);\n\t        },\n\n\t        construct: function(initialState){\n\t            this.myState = this.top();\n\t            this.mySource = this.state(\"Initial\");\n\n\t            // Initial pseudo-state\n\t            this.states.Initial = {\n\t                empty: function(){\n\t                    this.newInitialState(initialState);\n\t                }\n\t            };\n\t            var handled = function(){ return null; };\n\n\t            // TOP state\n\t            this.states.TOP = {\n\t                entry: handled,\n\t                exit:  handled,\n\t                init:  handled,\n\t                empty: handled\n\t            };\n\t            this.flatten();\n\t        },\n\n\t        // Trigger the initial transition and recursively enter the submachine of the top state.\n\t        // Must be called only once for a given Statechart before dispatching any events to it.\n\t        init: function(anEventOrNull){\n\t            assert(this.myState === this.top() && this.mySource !== null);\n\t            var s = this.myState;    // save top in temp\n\t            this.mySource.trigger(anEventOrNull);    // topmost initial transition\n\t            assert(s.equals(this.myState.superstate()));    // verify that we only went one level deep\n\t            s = this.myState;\n\t            s.enter();\n\t            while (s.init() === null) {    // while init is handled (i.e. till we reach a leaf node)\n\t                assert(s.equals(this.myState.superstate()));    // verify that we only went one level deep\n\t                s = this.myState;\n\t                s.enter();\n\t            }\n\t        },\n\n\t        state: function(stateOrName){\n\t            return (stateOrName && stateOrName instanceof QState) ? stateOrName : new QState(this, stateOrName);\n\t        },\n\n\t        top: function(stateOrName){\n\t            // create the top state only once and store it to an auxiliary property\n\t            return (this._topState || (this._topState = new QState(this, \"TOP\")));\n\t        },\n\n\t        currentState: function(){\n\t            return this.myState;\n\t        },\n\n\t        flatten: function(){\n\t            this.statesTable = this.statesTable || {};\n\t            this._flatten(this.states, this.top().name);\n\t        },\n\n\t        _flatten: function(states, parent){\n\t            if (!states) {\n\t                return;\n\t            }\n\n\t            for (var state in states) {\n\t                if (states.hasOwnProperty(state)) {\n\t                    this.statesTable[state] = states[state];\n\t                    this.statesTable[state].parent = parent;\n\t                    this._flatten(states[state].states, state);\n\t                }\n\t            }\n\t        },\n\n\t        selectState: function(stateName){\n\t            return this.statesTable[stateName];\n\t        },\n\n\t        dispatchEvent: function(anEvent, state, act){\n\t            act = act || state[anEvent.type];\n\n\t            // Action might also be an array in which case it is assumed that evaluating guards decides\n\t            // which target to enter.\n\t            if (act instanceof Array) {\n\t                for (var i = 0; i < act.length; i++) {\n\t                    this.dispatchEvent(anEvent, state, act[i]);\n\t                }\n\t            }\n\n\t            // @todo This is terrible edge case used just for more fancy Statechart representation\n\t            // It allows using \"MyState\": { init: \"MySubState\", ... } intead of\n\t            // \"MyState\": { init: function(){ this.newInitialState(\"MySubState\"); }, ... }\n\t            // In some cases the latter form can be useful for better control of the Statechart\n\t            if (anEvent.type === \"init\" && typeof act === \"string\") {\n\t                this.newInitialState(act);\n\t                return null; // handled\n\t            }\n\n\t            if (act instanceof Function){\n\t                act.call(this, anEvent.args);\n\t                return null;  // handled\n\t            } else if (act) {\n\t                // no guard at all or the guard condition is met\n\t                if (!act.guard || (act.guard && act.guard.call(this, anEvent.args))){\n\t                    if (act.action) {\n\t                        act.action.call(this, anEvent.args);\n\t                    }\n\t                    if (act.target) {\n\t                        this.newState(act.target);\n\t                    }\n\t                    return null;  // handled\n\t                }\n\t            } else {        // act is undefined (no handler in state for anEvent)\n\t                if (state === this.selectState(\"TOP\")) {\n\t                    this.handleUnhandledEvent(anEvent); // not-handled\n\t                    return null;    // handled (TOP state handles all events)\n\t                }\n\t            }\n\t            return this.state(state.parent); // not-handled\n\t        },\n\n\t        // Override this when needed.\n\t        handleUnhandledEvent: function(anEvent){\n\t            this.debug(\"Unhandled event: \" + anEvent.type);\n\t            return null;\n\t        },\n\n\t        // Traverse the state hierarchy starting from the currently active state myState.\n\t        // Advance up the state hierarchy (i.e., from substates to superstates), invoking all\n\t        // the state handlers in succession. At each level of state nesting, it intercepts the value\n\t        // returned from a state handler to obtain the superstate needed to advance to the next level.\n\t        dispatch: function(anEvent, args){\n\t            if (!anEvent || !(anEvent instanceof QEvent)) {\n\t                anEvent = new QEvent(anEvent, args);\n\t            }\n\t            this.mySource = this.myState;\n\t            while (this.mySource) {\n\t                this.mySource = this.mySource.trigger(anEvent);\n\t            }\n\t        },\n\n\t        // Performs dynamic transition. (macro Q_TRAN_DYN())\n\t        newState: function(aStateName){\n\t            this.transition(this.state(aStateName));\n\t        },\n\n\t        // Used by handlers only in response to the #init event. (macro Q_INIT())\n\t        // USAGE: return this.newInitialState(\"whatever\");\n\t        // @return null for convenience\n\n\t        newInitialState: function(aStateOrName){\n\t            this.myState = this.state(aStateOrName);\n\t            return null;\n\t        },\n\n\t        // Dynamic transition. (Q_TRAN_DYN())\n\t        transition: function(target){\n\t            assert(!target.equals(this.top()));\n\n\t            var entry = [];\n\t            var mySource = this.mySource;\n\t            var s = this.myState;\n\n\t            // exit all the nested states between myState and mySource\n\t            assert(s !== null);\n\t            assert(mySource !== null);\n\t            while (!s.equals(mySource)) {\n\t                s = s.exit() || s.superstate();\n\t            }\n\n\t            // check all seven possible source/target state combinations\n\n\t\t    entry.push(target);\n\n\t            // (a) mySource == target (self transition)\n\t            if (mySource.equals(target)) {\n\t                mySource.exit();\n\t                return this.enterVia(target, entry);\n\t            }\n\n\t            // (b) mySource == target.superstate (one level deep)\n\t            var p = target.superstate();\n\t            if (mySource.equals(p)) {\n\t                return this.enterVia(target, entry);\n\t            }\n\n\t            assert(mySource !== null);\n\n\t            // (c) mySource.superstate == target.superstate (most common - fsa)\n\t            var q = mySource.superstate();\n\t            if (q.equals(p)) {\n\t                mySource.exit();\n\t                return this.enterVia(target, entry);\n\t            }\n\n\t            // (d) mySource.superstate == target (one level up)\n\t            if (q.equals(target)) {\n\t                mySource.exit();\n\t                entry.pop();    // do not enter the LCA\n\t                return this.enterVia(target, entry);\n\t            }\n\n\t            // (e) mySource == target.superstate.superstate... hierarchy (many levels deep)\n\t\t    entry.push(p);\n\t            s = p.superstate();\n\t            while (s !== null) {\n\t                if (mySource.equals(s)) {\n\t                    return this.enterVia(target, entry);\n\t                }\n\n\t\t\tentry.push(s);\n\t                s = s.superstate();\n\t            }\n\n\t            // otherwise we're definitely exiting mySource\n\t            mySource.exit();\n\n\t            // entry array is complete, save its length to avoid computing it repeatedly\n\t            var entryLength = entry.length;\n\n\t            // (f) mySource.superstate == target.superstate.superstate... hierarchy\n\t            var lca;\n\t            for (lca = entryLength - 1; lca >= 0; lca -= 1) {\n\t                if (q.equals(entry[lca])) {\n\t                    return this.enterVia(target, entry.slice(0, lca)); // do not enter lca\n\t                }\n\t            }\n\n\t            // (g) each mySource.superstate.superstate... for each target.superstate.superstate...\n\t            s = q;\n\t            while (s !== null) {\n\t                for (lca = entryLength - 1; lca >= 0; lca -= 1) {\n\t                    if (s.equals(entry[lca])) {\n\t                        return this.enterVia(target, entry.slice(0, lca)); // do not enter lca\n\t                    }\n\t                }\n\t                s.exit();\n\t                s = s.superstate();\n\t            }\n\t        },\n\n\t        // tail of transition()\n\t        // We are in the LCA of mySource and target.\n\t        enterVia: function(target, entry){\n\n\t            // retrace the entry path in reverse order\n\t            var idx = entry.length;\n\t            while (idx > 0) {\n\t                idx--;\n\t                entry[idx].enter();\n\t            }\n\n\t            this.myState = target;\n\t            while (target.init() === null) {\n\t                // initial transition must go one level deep\n\t                assert(target.equals(this.myState.superstate()));\n\t                target = this.myState;\n\t                target.enter();\n\t            }\n\t        }\n\t    };\n\n\t    // QState.\n\t    // -------\n\n\t    function QState(fsm, name){\n\t        this.fsm = fsm;\n\t        this.name = name;\n\t    }\n\n\t    QState.prototype = {\n\t        equals: function(state){\n\t            return (this.name === state.name && this.fsm === state.fsm);\n\t        },\n\n\t        dispatchEvent: function(anEvent, state){\n\t            return this.fsm.dispatchEvent(anEvent, state);\n\t        },\n\n\t        trigger: function(anEvent){\n\t            var evt = anEvent || QEventEmpty;\n\t            var state = this.fsm.selectState(this.name);\n\t            return this.dispatchEvent(evt, state);\n\t        },\n\n\t        enter: function(){\n\t            this.fsm.debug(\"[\" + this.name + \"] enter\");\n\t            return this.trigger(QEventEntry);\n\t        },\n\n\t        exit: function(){\n\t            this.fsm.debug(\"[\" + this.name + \"] exit\");\n\t            return this.trigger(QEventExit);\n\t        },\n\n\t        init: function(){\n\t            this.fsm.debug(\"[\" + this.name + \"] init\");\n\t            return this.trigger(QEventInit);\n\t        },\n\n\t        // Answer my superstate. Default is to return fsm top state.\n\t        superstate: function(){\n\t            var superstate = this.trigger(QEventEmpty);\n\t            if (superstate && superstate instanceof QState) {\n\t                return superstate;\n\t            }\n\t            superstate = this.fsm.top();\n\t            if (this.name === superstate.name) {\n\t                return null;\n\t            }\n\t            return superstate;\n\t        }\n\t    };\n\n\t    // QEvent\n\t    // ------\n\n\t    function QEvent(type, args){\n\t        this.type = type;\n\t        this.args = args;\n\t    }\n\n\t    // these events are static, they do not carry any arguments\n\t    // -> create them only once\n\t    // moreover, they don't have to be exposed to the outer world\n\t    var QEventEntry = new QEvent(\"entry\");\n\t    var QEventExit = new QEvent(\"exit\");\n\t    var QEventInit = new QEvent(\"init\");\n\t    var QEventEmpty = new QEvent(\"empty\");\n\n\n\t    return Statechart;\n\t}));\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/*! Socket.IO.js build:0.9.17, development. Copyright(c) 2011 LearnBoost <dev@learnboost.com> MIT Licensed */\n\n\tvar io = (false ? {} : module.exports);\n\t(function() {\n\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\n\t(function (exports, global) {\n\n\t  /**\n\t   * IO namespace.\n\t   *\n\t   * @namespace\n\t   */\n\n\t  var io = exports;\n\n\t  /**\n\t   * Socket.IO version\n\t   *\n\t   * @api public\n\t   */\n\n\t  io.version = '0.9.17';\n\n\t  /**\n\t   * Protocol implemented.\n\t   *\n\t   * @api public\n\t   */\n\n\t  io.protocol = 1;\n\n\t  /**\n\t   * Available transports, these will be populated with the available transports\n\t   *\n\t   * @api public\n\t   */\n\n\t  io.transports = [];\n\n\t  /**\n\t   * Keep track of jsonp callbacks.\n\t   *\n\t   * @api private\n\t   */\n\n\t  io.j = [];\n\n\t  /**\n\t   * Keep track of our io.Sockets\n\t   *\n\t   * @api private\n\t   */\n\t  io.sockets = {};\n\n\n\t  /**\n\t   * Manages connections to hosts.\n\t   *\n\t   * @param {String} uri\n\t   * @Param {Boolean} force creation of new socket (defaults to false)\n\t   * @api public\n\t   */\n\n\t  io.connect = function (host, details) {\n\t    var uri = io.util.parseUri(host)\n\t      , uuri\n\t      , socket;\n\n\t    if (global && global.location) {\n\t      uri.protocol = uri.protocol || global.location.protocol.slice(0, -1);\n\t      uri.host = uri.host || (global.document\n\t        ? global.document.domain : global.location.hostname);\n\t      uri.port = uri.port || global.location.port;\n\t    }\n\n\t    uuri = io.util.uniqueUri(uri);\n\n\t    var options = {\n\t        host: uri.host\n\t      , secure: 'https' == uri.protocol\n\t      , port: uri.port || ('https' == uri.protocol ? 443 : 80)\n\t      , query: uri.query || ''\n\t    };\n\n\t    io.util.merge(options, details);\n\n\t    if (options['force new connection'] || !io.sockets[uuri]) {\n\t      socket = new io.Socket(options);\n\t    }\n\n\t    if (!options['force new connection'] && socket) {\n\t      io.sockets[uuri] = socket;\n\t    }\n\n\t    socket = socket || io.sockets[uuri];\n\n\t    // if path is different from '' or /\n\t    return socket.of(uri.path.length > 1 ? uri.path : '');\n\t  };\n\n\t})(true ? module.exports : (this.io = {}), this);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\n\t(function (exports, global) {\n\n\t  /**\n\t   * Utilities namespace.\n\t   *\n\t   * @namespace\n\t   */\n\n\t  var util = exports.util = {};\n\n\t  /**\n\t   * Parses an URI\n\t   *\n\t   * @author Steven Levithan <stevenlevithan.com> (MIT license)\n\t   * @api public\n\t   */\n\n\t  var re = /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\n\t  var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password',\n\t               'host', 'port', 'relative', 'path', 'directory', 'file', 'query',\n\t               'anchor'];\n\n\t  util.parseUri = function (str) {\n\t    var m = re.exec(str || '')\n\t      , uri = {}\n\t      , i = 14;\n\n\t    while (i--) {\n\t      uri[parts[i]] = m[i] || '';\n\t    }\n\n\t    return uri;\n\t  };\n\n\t  /**\n\t   * Produces a unique url that identifies a Socket.IO connection.\n\t   *\n\t   * @param {Object} uri\n\t   * @api public\n\t   */\n\n\t  util.uniqueUri = function (uri) {\n\t    var protocol = uri.protocol\n\t      , host = uri.host\n\t      , port = uri.port;\n\n\t    if ('document' in global) {\n\t      host = host || document.domain;\n\t      port = port || (protocol == 'https'\n\t        && document.location.protocol !== 'https:' ? 443 : document.location.port);\n\t    } else {\n\t      host = host || 'localhost';\n\n\t      if (!port && protocol == 'https') {\n\t        port = 443;\n\t      }\n\t    }\n\n\t    return (protocol || 'http') + '://' + host + ':' + (port || 80);\n\t  };\n\n\t  /**\n\t   * Mergest 2 query strings in to once unique query string\n\t   *\n\t   * @param {String} base\n\t   * @param {String} addition\n\t   * @api public\n\t   */\n\n\t  util.query = function (base, addition) {\n\t    var query = util.chunkQuery(base || '')\n\t      , components = [];\n\n\t    util.merge(query, util.chunkQuery(addition || ''));\n\t    for (var part in query) {\n\t      if (query.hasOwnProperty(part)) {\n\t        components.push(part + '=' + query[part]);\n\t      }\n\t    }\n\n\t    return components.length ? '?' + components.join('&') : '';\n\t  };\n\n\t  /**\n\t   * Transforms a querystring in to an object\n\t   *\n\t   * @param {String} qs\n\t   * @api public\n\t   */\n\n\t  util.chunkQuery = function (qs) {\n\t    var query = {}\n\t      , params = qs.split('&')\n\t      , i = 0\n\t      , l = params.length\n\t      , kv;\n\n\t    for (; i < l; ++i) {\n\t      kv = params[i].split('=');\n\t      if (kv[0]) {\n\t        query[kv[0]] = kv[1];\n\t      }\n\t    }\n\n\t    return query;\n\t  };\n\n\t  /**\n\t   * Executes the given function when the page is loaded.\n\t   *\n\t   *     io.util.load(function () { console.log('page loaded'); });\n\t   *\n\t   * @param {Function} fn\n\t   * @api public\n\t   */\n\n\t  var pageLoaded = false;\n\n\t  util.load = function (fn) {\n\t    if ('document' in global && document.readyState === 'complete' || pageLoaded) {\n\t      return fn();\n\t    }\n\n\t    util.on(global, 'load', fn, false);\n\t  };\n\n\t  /**\n\t   * Adds an event.\n\t   *\n\t   * @api private\n\t   */\n\n\t  util.on = function (element, event, fn, capture) {\n\t    if (element.attachEvent) {\n\t      element.attachEvent('on' + event, fn);\n\t    } else if (element.addEventListener) {\n\t      element.addEventListener(event, fn, capture);\n\t    }\n\t  };\n\n\t  /**\n\t   * Generates the correct `XMLHttpRequest` for regular and cross domain requests.\n\t   *\n\t   * @param {Boolean} [xdomain] Create a request that can be used cross domain.\n\t   * @returns {XMLHttpRequest|false} If we can create a XMLHttpRequest.\n\t   * @api private\n\t   */\n\n\t  util.request = function (xdomain) {\n\n\t    if (xdomain && 'undefined' != typeof XDomainRequest && !util.ua.hasCORS) {\n\t      return new XDomainRequest();\n\t    }\n\n\t    if ('undefined' != typeof XMLHttpRequest && (!xdomain || util.ua.hasCORS)) {\n\t      return new XMLHttpRequest();\n\t    }\n\n\t    if (!xdomain) {\n\t      try {\n\t        return new window[(['Active'].concat('Object').join('X'))]('Microsoft.XMLHTTP');\n\t      } catch(e) { }\n\t    }\n\n\t    return null;\n\t  };\n\n\t  /**\n\t   * XHR based transport constructor.\n\t   *\n\t   * @constructor\n\t   * @api public\n\t   */\n\n\t  /**\n\t   * Change the internal pageLoaded value.\n\t   */\n\n\t  if ('undefined' != typeof window) {\n\t    util.load(function () {\n\t      pageLoaded = true;\n\t    });\n\t  }\n\n\t  /**\n\t   * Defers a function to ensure a spinner is not displayed by the browser\n\t   *\n\t   * @param {Function} fn\n\t   * @api public\n\t   */\n\n\t  util.defer = function (fn) {\n\t    if (!util.ua.webkit || 'undefined' != typeof importScripts) {\n\t      return fn();\n\t    }\n\n\t    util.load(function () {\n\t      setTimeout(fn, 100);\n\t    });\n\t  };\n\n\t  /**\n\t   * Merges two objects.\n\t   *\n\t   * @api public\n\t   */\n\n\t  util.merge = function merge (target, additional, deep, lastseen) {\n\t    var seen = lastseen || []\n\t      , depth = typeof deep == 'undefined' ? 2 : deep\n\t      , prop;\n\n\t    for (prop in additional) {\n\t      if (additional.hasOwnProperty(prop) && util.indexOf(seen, prop) < 0) {\n\t        if (typeof target[prop] !== 'object' || !depth) {\n\t          target[prop] = additional[prop];\n\t          seen.push(additional[prop]);\n\t        } else {\n\t          util.merge(target[prop], additional[prop], depth - 1, seen);\n\t        }\n\t      }\n\t    }\n\n\t    return target;\n\t  };\n\n\t  /**\n\t   * Merges prototypes from objects\n\t   *\n\t   * @api public\n\t   */\n\n\t  util.mixin = function (ctor, ctor2) {\n\t    util.merge(ctor.prototype, ctor2.prototype);\n\t  };\n\n\t  /**\n\t   * Shortcut for prototypical and static inheritance.\n\t   *\n\t   * @api private\n\t   */\n\n\t  util.inherit = function (ctor, ctor2) {\n\t    function f() {};\n\t    f.prototype = ctor2.prototype;\n\t    ctor.prototype = new f;\n\t  };\n\n\t  /**\n\t   * Checks if the given object is an Array.\n\t   *\n\t   *     io.util.isArray([]); // true\n\t   *     io.util.isArray({}); // false\n\t   *\n\t   * @param Object obj\n\t   * @api public\n\t   */\n\n\t  util.isArray = Array.isArray || function (obj) {\n\t    return Object.prototype.toString.call(obj) === '[object Array]';\n\t  };\n\n\t  /**\n\t   * Intersects values of two arrays into a third\n\t   *\n\t   * @api public\n\t   */\n\n\t  util.intersect = function (arr, arr2) {\n\t    var ret = []\n\t      , longest = arr.length > arr2.length ? arr : arr2\n\t      , shortest = arr.length > arr2.length ? arr2 : arr;\n\n\t    for (var i = 0, l = shortest.length; i < l; i++) {\n\t      if (~util.indexOf(longest, shortest[i]))\n\t        ret.push(shortest[i]);\n\t    }\n\n\t    return ret;\n\t  };\n\n\t  /**\n\t   * Array indexOf compatibility.\n\t   *\n\t   * @see bit.ly/a5Dxa2\n\t   * @api public\n\t   */\n\n\t  util.indexOf = function (arr, o, i) {\n\n\t    for (var j = arr.length, i = i < 0 ? i + j < 0 ? 0 : i + j : i || 0;\n\t         i < j && arr[i] !== o; i++) {}\n\n\t    return j <= i ? -1 : i;\n\t  };\n\n\t  /**\n\t   * Converts enumerables to array.\n\t   *\n\t   * @api public\n\t   */\n\n\t  util.toArray = function (enu) {\n\t    var arr = [];\n\n\t    for (var i = 0, l = enu.length; i < l; i++)\n\t      arr.push(enu[i]);\n\n\t    return arr;\n\t  };\n\n\t  /**\n\t   * UA / engines detection namespace.\n\t   *\n\t   * @namespace\n\t   */\n\n\t  util.ua = {};\n\n\t  /**\n\t   * Whether the UA supports CORS for XHR.\n\t   *\n\t   * @api public\n\t   */\n\n\t  util.ua.hasCORS = 'undefined' != typeof XMLHttpRequest && (function () {\n\t    try {\n\t      var a = new XMLHttpRequest();\n\t    } catch (e) {\n\t      return false;\n\t    }\n\n\t    return a.withCredentials != undefined;\n\t  })();\n\n\t  /**\n\t   * Detect webkit.\n\t   *\n\t   * @api public\n\t   */\n\n\t  util.ua.webkit = 'undefined' != typeof navigator\n\t    && /webkit/i.test(navigator.userAgent);\n\n\t   /**\n\t   * Detect iPad/iPhone/iPod.\n\t   *\n\t   * @api public\n\t   */\n\n\t  util.ua.iDevice = 'undefined' != typeof navigator\n\t      && /iPad|iPhone|iPod/i.test(navigator.userAgent);\n\n\t})('undefined' != typeof io ? io : module.exports, this);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\n\t(function (exports, io) {\n\n\t  /**\n\t   * Expose constructor.\n\t   */\n\n\t  exports.EventEmitter = EventEmitter;\n\n\t  /**\n\t   * Event emitter constructor.\n\t   *\n\t   * @api public.\n\t   */\n\n\t  function EventEmitter () {};\n\n\t  /**\n\t   * Adds a listener\n\t   *\n\t   * @api public\n\t   */\n\n\t  EventEmitter.prototype.on = function (name, fn) {\n\t    if (!this.$events) {\n\t      this.$events = {};\n\t    }\n\n\t    if (!this.$events[name]) {\n\t      this.$events[name] = fn;\n\t    } else if (io.util.isArray(this.$events[name])) {\n\t      this.$events[name].push(fn);\n\t    } else {\n\t      this.$events[name] = [this.$events[name], fn];\n\t    }\n\n\t    return this;\n\t  };\n\n\t  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n\t  /**\n\t   * Adds a volatile listener.\n\t   *\n\t   * @api public\n\t   */\n\n\t  EventEmitter.prototype.once = function (name, fn) {\n\t    var self = this;\n\n\t    function on () {\n\t      self.removeListener(name, on);\n\t      fn.apply(this, arguments);\n\t    };\n\n\t    on.listener = fn;\n\t    this.on(name, on);\n\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Removes a listener.\n\t   *\n\t   * @api public\n\t   */\n\n\t  EventEmitter.prototype.removeListener = function (name, fn) {\n\t    if (this.$events && this.$events[name]) {\n\t      var list = this.$events[name];\n\n\t      if (io.util.isArray(list)) {\n\t        var pos = -1;\n\n\t        for (var i = 0, l = list.length; i < l; i++) {\n\t          if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {\n\t            pos = i;\n\t            break;\n\t          }\n\t        }\n\n\t        if (pos < 0) {\n\t          return this;\n\t        }\n\n\t        list.splice(pos, 1);\n\n\t        if (!list.length) {\n\t          delete this.$events[name];\n\t        }\n\t      } else if (list === fn || (list.listener && list.listener === fn)) {\n\t        delete this.$events[name];\n\t      }\n\t    }\n\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Removes all listeners for an event.\n\t   *\n\t   * @api public\n\t   */\n\n\t  EventEmitter.prototype.removeAllListeners = function (name) {\n\t    if (name === undefined) {\n\t      this.$events = {};\n\t      return this;\n\t    }\n\n\t    if (this.$events && this.$events[name]) {\n\t      this.$events[name] = null;\n\t    }\n\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Gets all listeners for a certain event.\n\t   *\n\t   * @api publci\n\t   */\n\n\t  EventEmitter.prototype.listeners = function (name) {\n\t    if (!this.$events) {\n\t      this.$events = {};\n\t    }\n\n\t    if (!this.$events[name]) {\n\t      this.$events[name] = [];\n\t    }\n\n\t    if (!io.util.isArray(this.$events[name])) {\n\t      this.$events[name] = [this.$events[name]];\n\t    }\n\n\t    return this.$events[name];\n\t  };\n\n\t  /**\n\t   * Emits an event.\n\t   *\n\t   * @api public\n\t   */\n\n\t  EventEmitter.prototype.emit = function (name) {\n\t    if (!this.$events) {\n\t      return false;\n\t    }\n\n\t    var handler = this.$events[name];\n\n\t    if (!handler) {\n\t      return false;\n\t    }\n\n\t    var args = Array.prototype.slice.call(arguments, 1);\n\n\t    if ('function' == typeof handler) {\n\t      handler.apply(this, args);\n\t    } else if (io.util.isArray(handler)) {\n\t      var listeners = handler.slice();\n\n\t      for (var i = 0, l = listeners.length; i < l; i++) {\n\t        listeners[i].apply(this, args);\n\t      }\n\t    } else {\n\t      return false;\n\t    }\n\n\t    return true;\n\t  };\n\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\n\t/**\n\t * Based on JSON2 (http://www.JSON.org/js.html).\n\t */\n\n\t(function (exports, nativeJSON) {\n\t  \"use strict\";\n\n\t  // use native JSON if it's available\n\t  if (nativeJSON && nativeJSON.parse){\n\t    return exports.JSON = {\n\t      parse: nativeJSON.parse\n\t    , stringify: nativeJSON.stringify\n\t    };\n\t  }\n\n\t  var JSON = exports.JSON = {};\n\n\t  function f(n) {\n\t      // Format integers to have at least two digits.\n\t      return n < 10 ? '0' + n : n;\n\t  }\n\n\t  function date(d, key) {\n\t    return isFinite(d.valueOf()) ?\n\t        d.getUTCFullYear()     + '-' +\n\t        f(d.getUTCMonth() + 1) + '-' +\n\t        f(d.getUTCDate())      + 'T' +\n\t        f(d.getUTCHours())     + ':' +\n\t        f(d.getUTCMinutes())   + ':' +\n\t        f(d.getUTCSeconds())   + 'Z' : null;\n\t  };\n\n\t  var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n\t      escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n\t      gap,\n\t      indent,\n\t      meta = {    // table of character substitutions\n\t          '\\b': '\\\\b',\n\t          '\\t': '\\\\t',\n\t          '\\n': '\\\\n',\n\t          '\\f': '\\\\f',\n\t          '\\r': '\\\\r',\n\t          '\"' : '\\\\\"',\n\t          '\\\\': '\\\\\\\\'\n\t      },\n\t      rep;\n\n\n\t  function quote(string) {\n\n\t// If the string contains no control characters, no quote characters, and no\n\t// backslash characters, then we can safely slap some quotes around it.\n\t// Otherwise we must also replace the offending characters with safe escape\n\t// sequences.\n\n\t      escapable.lastIndex = 0;\n\t      return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n\t          var c = meta[a];\n\t          return typeof c === 'string' ? c :\n\t              '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n\t      }) + '\"' : '\"' + string + '\"';\n\t  }\n\n\n\t  function str(key, holder) {\n\n\t// Produce a string from holder[key].\n\n\t      var i,          // The loop counter.\n\t          k,          // The member key.\n\t          v,          // The member value.\n\t          length,\n\t          mind = gap,\n\t          partial,\n\t          value = holder[key];\n\n\t// If the value has a toJSON method, call it to obtain a replacement value.\n\n\t      if (value instanceof Date) {\n\t          value = date(key);\n\t      }\n\n\t// If we were called with a replacer function, then call the replacer to\n\t// obtain a replacement value.\n\n\t      if (typeof rep === 'function') {\n\t          value = rep.call(holder, key, value);\n\t      }\n\n\t// What happens next depends on the value's type.\n\n\t      switch (typeof value) {\n\t      case 'string':\n\t          return quote(value);\n\n\t      case 'number':\n\n\t// JSON numbers must be finite. Encode non-finite numbers as null.\n\n\t          return isFinite(value) ? String(value) : 'null';\n\n\t      case 'boolean':\n\t      case 'null':\n\n\t// If the value is a boolean or null, convert it to a string. Note:\n\t// typeof null does not produce 'null'. The case is included here in\n\t// the remote chance that this gets fixed someday.\n\n\t          return String(value);\n\n\t// If the type is 'object', we might be dealing with an object or an array or\n\t// null.\n\n\t      case 'object':\n\n\t// Due to a specification blunder in ECMAScript, typeof null is 'object',\n\t// so watch out for that case.\n\n\t          if (!value) {\n\t              return 'null';\n\t          }\n\n\t// Make an array to hold the partial results of stringifying this object value.\n\n\t          gap += indent;\n\t          partial = [];\n\n\t// Is the value an array?\n\n\t          if (Object.prototype.toString.apply(value) === '[object Array]') {\n\n\t// The value is an array. Stringify every element. Use null as a placeholder\n\t// for non-JSON values.\n\n\t              length = value.length;\n\t              for (i = 0; i < length; i += 1) {\n\t                  partial[i] = str(i, value) || 'null';\n\t              }\n\n\t// Join all of the elements together, separated with commas, and wrap them in\n\t// brackets.\n\n\t              v = partial.length === 0 ? '[]' : gap ?\n\t                  '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n\t                  '[' + partial.join(',') + ']';\n\t              gap = mind;\n\t              return v;\n\t          }\n\n\t// If the replacer is an array, use it to select the members to be stringified.\n\n\t          if (rep && typeof rep === 'object') {\n\t              length = rep.length;\n\t              for (i = 0; i < length; i += 1) {\n\t                  if (typeof rep[i] === 'string') {\n\t                      k = rep[i];\n\t                      v = str(k, value);\n\t                      if (v) {\n\t                          partial.push(quote(k) + (gap ? ': ' : ':') + v);\n\t                      }\n\t                  }\n\t              }\n\t          } else {\n\n\t// Otherwise, iterate through all of the keys in the object.\n\n\t              for (k in value) {\n\t                  if (Object.prototype.hasOwnProperty.call(value, k)) {\n\t                      v = str(k, value);\n\t                      if (v) {\n\t                          partial.push(quote(k) + (gap ? ': ' : ':') + v);\n\t                      }\n\t                  }\n\t              }\n\t          }\n\n\t// Join all of the member texts together, separated with commas,\n\t// and wrap them in braces.\n\n\t          v = partial.length === 0 ? '{}' : gap ?\n\t              '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n\t              '{' + partial.join(',') + '}';\n\t          gap = mind;\n\t          return v;\n\t      }\n\t  }\n\n\t// If the JSON object does not yet have a stringify method, give it one.\n\n\t  JSON.stringify = function (value, replacer, space) {\n\n\t// The stringify method takes a value and an optional replacer, and an optional\n\t// space parameter, and returns a JSON text. The replacer can be a function\n\t// that can replace values, or an array of strings that will select the keys.\n\t// A default replacer method can be provided. Use of the space parameter can\n\t// produce text that is more easily readable.\n\n\t      var i;\n\t      gap = '';\n\t      indent = '';\n\n\t// If the space parameter is a number, make an indent string containing that\n\t// many spaces.\n\n\t      if (typeof space === 'number') {\n\t          for (i = 0; i < space; i += 1) {\n\t              indent += ' ';\n\t          }\n\n\t// If the space parameter is a string, it will be used as the indent string.\n\n\t      } else if (typeof space === 'string') {\n\t          indent = space;\n\t      }\n\n\t// If there is a replacer, it must be a function or an array.\n\t// Otherwise, throw an error.\n\n\t      rep = replacer;\n\t      if (replacer && typeof replacer !== 'function' &&\n\t              (typeof replacer !== 'object' ||\n\t              typeof replacer.length !== 'number')) {\n\t          throw new Error('JSON.stringify');\n\t      }\n\n\t// Make a fake root object containing our value under the key of ''.\n\t// Return the result of stringifying the value.\n\n\t      return str('', {'': value});\n\t  };\n\n\t// If the JSON object does not yet have a parse method, give it one.\n\n\t  JSON.parse = function (text, reviver) {\n\t  // The parse method takes a text and an optional reviver function, and returns\n\t  // a JavaScript value if the text is a valid JSON text.\n\n\t      var j;\n\n\t      function walk(holder, key) {\n\n\t  // The walk method is used to recursively walk the resulting structure so\n\t  // that modifications can be made.\n\n\t          var k, v, value = holder[key];\n\t          if (value && typeof value === 'object') {\n\t              for (k in value) {\n\t                  if (Object.prototype.hasOwnProperty.call(value, k)) {\n\t                      v = walk(value, k);\n\t                      if (v !== undefined) {\n\t                          value[k] = v;\n\t                      } else {\n\t                          delete value[k];\n\t                      }\n\t                  }\n\t              }\n\t          }\n\t          return reviver.call(holder, key, value);\n\t      }\n\n\n\t  // Parsing happens in four stages. In the first stage, we replace certain\n\t  // Unicode characters with escape sequences. JavaScript handles many characters\n\t  // incorrectly, either silently deleting them, or treating them as line endings.\n\n\t      text = String(text);\n\t      cx.lastIndex = 0;\n\t      if (cx.test(text)) {\n\t          text = text.replace(cx, function (a) {\n\t              return '\\\\u' +\n\t                  ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n\t          });\n\t      }\n\n\t  // In the second stage, we run the text against regular expressions that look\n\t  // for non-JSON patterns. We are especially concerned with '()' and 'new'\n\t  // because they can cause invocation, and '=' because it can cause mutation.\n\t  // But just to be safe, we want to reject all unexpected forms.\n\n\t  // We split the second stage into 4 regexp operations in order to work around\n\t  // crippling inefficiencies in IE's and Safari's regexp engines. First we\n\t  // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we\n\t  // replace all simple value tokens with ']' characters. Third, we delete all\n\t  // open brackets that follow a colon or comma or that begin the text. Finally,\n\t  // we look to see that the remaining characters are only whitespace or ']' or\n\t  // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.\n\n\t      if (/^[\\],:{}\\s]*$/\n\t              .test(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')\n\t                  .replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']')\n\t                  .replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))) {\n\n\t  // In the third stage we use the eval function to compile the text into a\n\t  // JavaScript structure. The '{' operator is subject to a syntactic ambiguity\n\t  // in JavaScript: it can begin a block or an object literal. We wrap the text\n\t  // in parens to eliminate the ambiguity.\n\n\t          j = eval('(' + text + ')');\n\n\t  // In the optional fourth stage, we recursively walk the new structure, passing\n\t  // each name/value pair to a reviver function for possible transformation.\n\n\t          return typeof reviver === 'function' ?\n\t              walk({'': j}, '') : j;\n\t      }\n\n\t  // If the text is not JSON parseable, then a SyntaxError is thrown.\n\n\t      throw new SyntaxError('JSON.parse');\n\t  };\n\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , typeof JSON !== 'undefined' ? JSON : undefined\n\t);\n\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\n\t(function (exports, io) {\n\n\t  /**\n\t   * Parser namespace.\n\t   *\n\t   * @namespace\n\t   */\n\n\t  var parser = exports.parser = {};\n\n\t  /**\n\t   * Packet types.\n\t   */\n\n\t  var packets = parser.packets = [\n\t      'disconnect'\n\t    , 'connect'\n\t    , 'heartbeat'\n\t    , 'message'\n\t    , 'json'\n\t    , 'event'\n\t    , 'ack'\n\t    , 'error'\n\t    , 'noop'\n\t  ];\n\n\t  /**\n\t   * Errors reasons.\n\t   */\n\n\t  var reasons = parser.reasons = [\n\t      'transport not supported'\n\t    , 'client not handshaken'\n\t    , 'unauthorized'\n\t  ];\n\n\t  /**\n\t   * Errors advice.\n\t   */\n\n\t  var advice = parser.advice = [\n\t      'reconnect'\n\t  ];\n\n\t  /**\n\t   * Shortcuts.\n\t   */\n\n\t  var JSON = io.JSON\n\t    , indexOf = io.util.indexOf;\n\n\t  /**\n\t   * Encodes a packet.\n\t   *\n\t   * @api private\n\t   */\n\n\t  parser.encodePacket = function (packet) {\n\t    var type = indexOf(packets, packet.type)\n\t      , id = packet.id || ''\n\t      , endpoint = packet.endpoint || ''\n\t      , ack = packet.ack\n\t      , data = null;\n\n\t    switch (packet.type) {\n\t      case 'error':\n\t        var reason = packet.reason ? indexOf(reasons, packet.reason) : ''\n\t          , adv = packet.advice ? indexOf(advice, packet.advice) : '';\n\n\t        if (reason !== '' || adv !== '')\n\t          data = reason + (adv !== '' ? ('+' + adv) : '');\n\n\t        break;\n\n\t      case 'message':\n\t        if (packet.data !== '')\n\t          data = packet.data;\n\t        break;\n\n\t      case 'event':\n\t        var ev = { name: packet.name };\n\n\t        if (packet.args && packet.args.length) {\n\t          ev.args = packet.args;\n\t        }\n\n\t        data = JSON.stringify(ev);\n\t        break;\n\n\t      case 'json':\n\t        data = JSON.stringify(packet.data);\n\t        break;\n\n\t      case 'connect':\n\t        if (packet.qs)\n\t          data = packet.qs;\n\t        break;\n\n\t      case 'ack':\n\t        data = packet.ackId\n\t          + (packet.args && packet.args.length\n\t              ? '+' + JSON.stringify(packet.args) : '');\n\t        break;\n\t    }\n\n\t    // construct packet with required fragments\n\t    var encoded = [\n\t        type\n\t      , id + (ack == 'data' ? '+' : '')\n\t      , endpoint\n\t    ];\n\n\t    // data fragment is optional\n\t    if (data !== null && data !== undefined)\n\t      encoded.push(data);\n\n\t    return encoded.join(':');\n\t  };\n\n\t  /**\n\t   * Encodes multiple messages (payload).\n\t   *\n\t   * @param {Array} messages\n\t   * @api private\n\t   */\n\n\t  parser.encodePayload = function (packets) {\n\t    var decoded = '';\n\n\t    if (packets.length == 1)\n\t      return packets[0];\n\n\t    for (var i = 0, l = packets.length; i < l; i++) {\n\t      var packet = packets[i];\n\t      decoded += '\\ufffd' + packet.length + '\\ufffd' + packets[i];\n\t    }\n\n\t    return decoded;\n\t  };\n\n\t  /**\n\t   * Decodes a packet\n\t   *\n\t   * @api private\n\t   */\n\n\t  var regexp = /([^:]+):([0-9]+)?(\\+)?:([^:]+)?:?([\\s\\S]*)?/;\n\n\t  parser.decodePacket = function (data) {\n\t    var pieces = data.match(regexp);\n\n\t    if (!pieces) return {};\n\n\t    var id = pieces[2] || ''\n\t      , data = pieces[5] || ''\n\t      , packet = {\n\t            type: packets[pieces[1]]\n\t          , endpoint: pieces[4] || ''\n\t        };\n\n\t    // whether we need to acknowledge the packet\n\t    if (id) {\n\t      packet.id = id;\n\t      if (pieces[3])\n\t        packet.ack = 'data';\n\t      else\n\t        packet.ack = true;\n\t    }\n\n\t    // handle different packet types\n\t    switch (packet.type) {\n\t      case 'error':\n\t        var pieces = data.split('+');\n\t        packet.reason = reasons[pieces[0]] || '';\n\t        packet.advice = advice[pieces[1]] || '';\n\t        break;\n\n\t      case 'message':\n\t        packet.data = data || '';\n\t        break;\n\n\t      case 'event':\n\t        try {\n\t          var opts = JSON.parse(data);\n\t          packet.name = opts.name;\n\t          packet.args = opts.args;\n\t        } catch (e) { }\n\n\t        packet.args = packet.args || [];\n\t        break;\n\n\t      case 'json':\n\t        try {\n\t          packet.data = JSON.parse(data);\n\t        } catch (e) { }\n\t        break;\n\n\t      case 'connect':\n\t        packet.qs = data || '';\n\t        break;\n\n\t      case 'ack':\n\t        var pieces = data.match(/^([0-9]+)(\\+)?(.*)/);\n\t        if (pieces) {\n\t          packet.ackId = pieces[1];\n\t          packet.args = [];\n\n\t          if (pieces[3]) {\n\t            try {\n\t              packet.args = pieces[3] ? JSON.parse(pieces[3]) : [];\n\t            } catch (e) { }\n\t          }\n\t        }\n\t        break;\n\n\t      case 'disconnect':\n\t      case 'heartbeat':\n\t        break;\n\t    };\n\n\t    return packet;\n\t  };\n\n\t  /**\n\t   * Decodes data payload. Detects multiple messages\n\t   *\n\t   * @return {Array} messages\n\t   * @api public\n\t   */\n\n\t  parser.decodePayload = function (data) {\n\t    // IE doesn't like data[i] for unicode chars, charAt works fine\n\t    if (data.charAt(0) == '\\ufffd') {\n\t      var ret = [];\n\n\t      for (var i = 1, length = ''; i < data.length; i++) {\n\t        if (data.charAt(i) == '\\ufffd') {\n\t          ret.push(parser.decodePacket(data.substr(i + 1).substr(0, length)));\n\t          i += Number(length) + 1;\n\t          length = '';\n\t        } else {\n\t          length += data.charAt(i);\n\t        }\n\t      }\n\n\t      return ret;\n\t    } else {\n\t      return [parser.decodePacket(data)];\n\t    }\n\t  };\n\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\n\t(function (exports, io) {\n\n\t  /**\n\t   * Expose constructor.\n\t   */\n\n\t  exports.Transport = Transport;\n\n\t  /**\n\t   * This is the transport template for all supported transport methods.\n\t   *\n\t   * @constructor\n\t   * @api public\n\t   */\n\n\t  function Transport (socket, sessid) {\n\t    this.socket = socket;\n\t    this.sessid = sessid;\n\t  };\n\n\t  /**\n\t   * Apply EventEmitter mixin.\n\t   */\n\n\t  io.util.mixin(Transport, io.EventEmitter);\n\n\n\t  /**\n\t   * Indicates whether heartbeats is enabled for this transport\n\t   *\n\t   * @api private\n\t   */\n\n\t  Transport.prototype.heartbeats = function () {\n\t    return true;\n\t  };\n\n\t  /**\n\t   * Handles the response from the server. When a new response is received\n\t   * it will automatically update the timeout, decode the message and\n\t   * forwards the response to the onMessage function for further processing.\n\t   *\n\t   * @param {String} data Response from the server.\n\t   * @api private\n\t   */\n\n\t  Transport.prototype.onData = function (data) {\n\t    this.clearCloseTimeout();\n\n\t    // If the connection in currently open (or in a reopening state) reset the close\n\t    // timeout since we have just received data. This check is necessary so\n\t    // that we don't reset the timeout on an explicitly disconnected connection.\n\t    if (this.socket.connected || this.socket.connecting || this.socket.reconnecting) {\n\t      this.setCloseTimeout();\n\t    }\n\n\t    if (data !== '') {\n\t      // todo: we should only do decodePayload for xhr transports\n\t      var msgs = io.parser.decodePayload(data);\n\n\t      if (msgs && msgs.length) {\n\t        for (var i = 0, l = msgs.length; i < l; i++) {\n\t          this.onPacket(msgs[i]);\n\t        }\n\t      }\n\t    }\n\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Handles packets.\n\t   *\n\t   * @api private\n\t   */\n\n\t  Transport.prototype.onPacket = function (packet) {\n\t    this.socket.setHeartbeatTimeout();\n\n\t    if (packet.type == 'heartbeat') {\n\t      return this.onHeartbeat();\n\t    }\n\n\t    if (packet.type == 'connect' && packet.endpoint == '') {\n\t      this.onConnect();\n\t    }\n\n\t    if (packet.type == 'error' && packet.advice == 'reconnect') {\n\t      this.isOpen = false;\n\t    }\n\n\t    this.socket.onPacket(packet);\n\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Sets close timeout\n\t   *\n\t   * @api private\n\t   */\n\n\t  Transport.prototype.setCloseTimeout = function () {\n\t    if (!this.closeTimeout) {\n\t      var self = this;\n\n\t      this.closeTimeout = setTimeout(function () {\n\t        self.onDisconnect();\n\t      }, this.socket.closeTimeout);\n\t    }\n\t  };\n\n\t  /**\n\t   * Called when transport disconnects.\n\t   *\n\t   * @api private\n\t   */\n\n\t  Transport.prototype.onDisconnect = function () {\n\t    if (this.isOpen) this.close();\n\t    this.clearTimeouts();\n\t    this.socket.onDisconnect();\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Called when transport connects\n\t   *\n\t   * @api private\n\t   */\n\n\t  Transport.prototype.onConnect = function () {\n\t    this.socket.onConnect();\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Clears close timeout\n\t   *\n\t   * @api private\n\t   */\n\n\t  Transport.prototype.clearCloseTimeout = function () {\n\t    if (this.closeTimeout) {\n\t      clearTimeout(this.closeTimeout);\n\t      this.closeTimeout = null;\n\t    }\n\t  };\n\n\t  /**\n\t   * Clear timeouts\n\t   *\n\t   * @api private\n\t   */\n\n\t  Transport.prototype.clearTimeouts = function () {\n\t    this.clearCloseTimeout();\n\n\t    if (this.reopenTimeout) {\n\t      clearTimeout(this.reopenTimeout);\n\t    }\n\t  };\n\n\t  /**\n\t   * Sends a packet\n\t   *\n\t   * @param {Object} packet object.\n\t   * @api private\n\t   */\n\n\t  Transport.prototype.packet = function (packet) {\n\t    this.send(io.parser.encodePacket(packet));\n\t  };\n\n\t  /**\n\t   * Send the received heartbeat message back to server. So the server\n\t   * knows we are still connected.\n\t   *\n\t   * @param {String} heartbeat Heartbeat response from the server.\n\t   * @api private\n\t   */\n\n\t  Transport.prototype.onHeartbeat = function (heartbeat) {\n\t    this.packet({ type: 'heartbeat' });\n\t  };\n\n\t  /**\n\t   * Called when the transport opens.\n\t   *\n\t   * @api private\n\t   */\n\n\t  Transport.prototype.onOpen = function () {\n\t    this.isOpen = true;\n\t    this.clearCloseTimeout();\n\t    this.socket.onOpen();\n\t  };\n\n\t  /**\n\t   * Notifies the base when the connection with the Socket.IO server\n\t   * has been disconnected.\n\t   *\n\t   * @api private\n\t   */\n\n\t  Transport.prototype.onClose = function () {\n\t    var self = this;\n\n\t    /* FIXME: reopen delay causing a infinit loop\n\t    this.reopenTimeout = setTimeout(function () {\n\t      self.open();\n\t    }, this.socket.options['reopen delay']);*/\n\n\t    this.isOpen = false;\n\t    this.socket.onClose();\n\t    this.onDisconnect();\n\t  };\n\n\t  /**\n\t   * Generates a connection url based on the Socket.IO URL Protocol.\n\t   * See <https://github.com/learnboost/socket.io-node/> for more details.\n\t   *\n\t   * @returns {String} Connection url\n\t   * @api private\n\t   */\n\n\t  Transport.prototype.prepareUrl = function () {\n\t    var options = this.socket.options;\n\n\t    return this.scheme() + '://'\n\t      + options.host + ':' + options.port + '/'\n\t      + options.resource + '/' + io.protocol\n\t      + '/' + this.name + '/' + this.sessid;\n\t  };\n\n\t  /**\n\t   * Checks if the transport is ready to start a connection.\n\t   *\n\t   * @param {Socket} socket The socket instance that needs a transport\n\t   * @param {Function} fn The callback\n\t   * @api private\n\t   */\n\n\t  Transport.prototype.ready = function (socket, fn) {\n\t    fn.call(this);\n\t  };\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\n\t(function (exports, io, global) {\n\n\t  /**\n\t   * Expose constructor.\n\t   */\n\n\t  exports.Socket = Socket;\n\n\t  /**\n\t   * Create a new `Socket.IO client` which can establish a persistent\n\t   * connection with a Socket.IO enabled server.\n\t   *\n\t   * @api public\n\t   */\n\n\t  function Socket (options) {\n\t    this.options = {\n\t        port: 80\n\t      , secure: false\n\t      , document: 'document' in global ? document : false\n\t      , resource: 'socket.io'\n\t      , transports: io.transports\n\t      , 'connect timeout': 10000\n\t      , 'try multiple transports': true\n\t      , 'reconnect': true\n\t      , 'reconnection delay': 500\n\t      , 'reconnection limit': Infinity\n\t      , 'reopen delay': 3000\n\t      , 'max reconnection attempts': 10\n\t      , 'sync disconnect on unload': false\n\t      , 'auto connect': true\n\t      , 'flash policy port': 10843\n\t      , 'manualFlush': false\n\t    };\n\n\t    io.util.merge(this.options, options);\n\n\t    this.connected = false;\n\t    this.open = false;\n\t    this.connecting = false;\n\t    this.reconnecting = false;\n\t    this.namespaces = {};\n\t    this.buffer = [];\n\t    this.doBuffer = false;\n\n\t    if (this.options['sync disconnect on unload'] &&\n\t        (!this.isXDomain() || io.util.ua.hasCORS)) {\n\t      var self = this;\n\t      io.util.on(global, 'beforeunload', function () {\n\t        self.disconnectSync();\n\t      }, false);\n\t    }\n\n\t    if (this.options['auto connect']) {\n\t      this.connect();\n\t    }\n\t};\n\n\t  /**\n\t   * Apply EventEmitter mixin.\n\t   */\n\n\t  io.util.mixin(Socket, io.EventEmitter);\n\n\t  /**\n\t   * Returns a namespace listener/emitter for this socket\n\t   *\n\t   * @api public\n\t   */\n\n\t  Socket.prototype.of = function (name) {\n\t    if (!this.namespaces[name]) {\n\t      this.namespaces[name] = new io.SocketNamespace(this, name);\n\n\t      if (name !== '') {\n\t        this.namespaces[name].packet({ type: 'connect' });\n\t      }\n\t    }\n\n\t    return this.namespaces[name];\n\t  };\n\n\t  /**\n\t   * Emits the given event to the Socket and all namespaces\n\t   *\n\t   * @api private\n\t   */\n\n\t  Socket.prototype.publish = function () {\n\t    this.emit.apply(this, arguments);\n\n\t    var nsp;\n\n\t    for (var i in this.namespaces) {\n\t      if (this.namespaces.hasOwnProperty(i)) {\n\t        nsp = this.of(i);\n\t        nsp.$emit.apply(nsp, arguments);\n\t      }\n\t    }\n\t  };\n\n\t  /**\n\t   * Performs the handshake\n\t   *\n\t   * @api private\n\t   */\n\n\t  function empty () { };\n\n\t  Socket.prototype.handshake = function (fn) {\n\t    var self = this\n\t      , options = this.options;\n\n\t    function complete (data) {\n\t      if (data instanceof Error) {\n\t        self.connecting = false;\n\t        self.onError(data.message);\n\t      } else {\n\t        fn.apply(null, data.split(':'));\n\t      }\n\t    };\n\n\t    var url = [\n\t          'http' + (options.secure ? 's' : '') + ':/'\n\t        , options.host + ':' + options.port\n\t        , options.resource\n\t        , io.protocol\n\t        , io.util.query(this.options.query, 't=' + +new Date)\n\t      ].join('/');\n\n\t    if (this.isXDomain() && !io.util.ua.hasCORS) {\n\t      var insertAt = document.getElementsByTagName('script')[0]\n\t        , script = document.createElement('script');\n\n\t      script.src = url + '&jsonp=' + io.j.length;\n\t      insertAt.parentNode.insertBefore(script, insertAt);\n\n\t      io.j.push(function (data) {\n\t        complete(data);\n\t        script.parentNode.removeChild(script);\n\t      });\n\t    } else {\n\t      var xhr = io.util.request();\n\n\t      xhr.open('GET', url, true);\n\t      if (this.isXDomain()) {\n\t        xhr.withCredentials = true;\n\t      }\n\t      xhr.onreadystatechange = function () {\n\t        if (xhr.readyState == 4) {\n\t          xhr.onreadystatechange = empty;\n\n\t          if (xhr.status == 200) {\n\t            complete(xhr.responseText);\n\t          } else if (xhr.status == 403) {\n\t            self.onError(xhr.responseText);\n\t          } else {\n\t            self.connecting = false;            \n\t            !self.reconnecting && self.onError(xhr.responseText);\n\t          }\n\t        }\n\t      };\n\t      xhr.send(null);\n\t    }\n\t  };\n\n\t  /**\n\t   * Find an available transport based on the options supplied in the constructor.\n\t   *\n\t   * @api private\n\t   */\n\n\t  Socket.prototype.getTransport = function (override) {\n\t    var transports = override || this.transports, match;\n\n\t    for (var i = 0, transport; transport = transports[i]; i++) {\n\t      if (io.Transport[transport]\n\t        && io.Transport[transport].check(this)\n\t        && (!this.isXDomain() || io.Transport[transport].xdomainCheck(this))) {\n\t        return new io.Transport[transport](this, this.sessionid);\n\t      }\n\t    }\n\n\t    return null;\n\t  };\n\n\t  /**\n\t   * Connects to the server.\n\t   *\n\t   * @param {Function} [fn] Callback.\n\t   * @returns {io.Socket}\n\t   * @api public\n\t   */\n\n\t  Socket.prototype.connect = function (fn) {\n\t    if (this.connecting) {\n\t      return this;\n\t    }\n\n\t    var self = this;\n\t    self.connecting = true;\n\t    \n\t    this.handshake(function (sid, heartbeat, close, transports) {\n\t      self.sessionid = sid;\n\t      self.closeTimeout = close * 1000;\n\t      self.heartbeatTimeout = heartbeat * 1000;\n\t      if(!self.transports)\n\t          self.transports = self.origTransports = (transports ? io.util.intersect(\n\t              transports.split(',')\n\t            , self.options.transports\n\t          ) : self.options.transports);\n\n\t      self.setHeartbeatTimeout();\n\n\t      function connect (transports){\n\t        if (self.transport) self.transport.clearTimeouts();\n\n\t        self.transport = self.getTransport(transports);\n\t        if (!self.transport) return self.publish('connect_failed');\n\n\t        // once the transport is ready\n\t        self.transport.ready(self, function () {\n\t          self.connecting = true;\n\t          self.publish('connecting', self.transport.name);\n\t          self.transport.open();\n\n\t          if (self.options['connect timeout']) {\n\t            self.connectTimeoutTimer = setTimeout(function () {\n\t              if (!self.connected) {\n\t                self.connecting = false;\n\n\t                if (self.options['try multiple transports']) {\n\t                  var remaining = self.transports;\n\n\t                  while (remaining.length > 0 && remaining.splice(0,1)[0] !=\n\t                         self.transport.name) {}\n\n\t                    if (remaining.length){\n\t                      connect(remaining);\n\t                    } else {\n\t                      self.publish('connect_failed');\n\t                    }\n\t                }\n\t              }\n\t            }, self.options['connect timeout']);\n\t          }\n\t        });\n\t      }\n\n\t      connect(self.transports);\n\n\t      self.once('connect', function (){\n\t        clearTimeout(self.connectTimeoutTimer);\n\n\t        fn && typeof fn == 'function' && fn();\n\t      });\n\t    });\n\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Clears and sets a new heartbeat timeout using the value given by the\n\t   * server during the handshake.\n\t   *\n\t   * @api private\n\t   */\n\n\t  Socket.prototype.setHeartbeatTimeout = function () {\n\t    clearTimeout(this.heartbeatTimeoutTimer);\n\t    if(this.transport && !this.transport.heartbeats()) return;\n\n\t    var self = this;\n\t    this.heartbeatTimeoutTimer = setTimeout(function () {\n\t      self.transport.onClose();\n\t    }, this.heartbeatTimeout);\n\t  };\n\n\t  /**\n\t   * Sends a message.\n\t   *\n\t   * @param {Object} data packet.\n\t   * @returns {io.Socket}\n\t   * @api public\n\t   */\n\n\t  Socket.prototype.packet = function (data) {\n\t    if (this.connected && !this.doBuffer) {\n\t      this.transport.packet(data);\n\t    } else {\n\t      this.buffer.push(data);\n\t    }\n\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Sets buffer state\n\t   *\n\t   * @api private\n\t   */\n\n\t  Socket.prototype.setBuffer = function (v) {\n\t    this.doBuffer = v;\n\n\t    if (!v && this.connected && this.buffer.length) {\n\t      if (!this.options['manualFlush']) {\n\t        this.flushBuffer();\n\t      }\n\t    }\n\t  };\n\n\t  /**\n\t   * Flushes the buffer data over the wire.\n\t   * To be invoked manually when 'manualFlush' is set to true.\n\t   *\n\t   * @api public\n\t   */\n\n\t  Socket.prototype.flushBuffer = function() {\n\t    this.transport.payload(this.buffer);\n\t    this.buffer = [];\n\t  };\n\t  \n\n\t  /**\n\t   * Disconnect the established connect.\n\t   *\n\t   * @returns {io.Socket}\n\t   * @api public\n\t   */\n\n\t  Socket.prototype.disconnect = function () {\n\t    if (this.connected || this.connecting) {\n\t      if (this.open) {\n\t        this.of('').packet({ type: 'disconnect' });\n\t      }\n\n\t      // handle disconnection immediately\n\t      this.onDisconnect('booted');\n\t    }\n\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Disconnects the socket with a sync XHR.\n\t   *\n\t   * @api private\n\t   */\n\n\t  Socket.prototype.disconnectSync = function () {\n\t    // ensure disconnection\n\t    var xhr = io.util.request();\n\t    var uri = [\n\t        'http' + (this.options.secure ? 's' : '') + ':/'\n\t      , this.options.host + ':' + this.options.port\n\t      , this.options.resource\n\t      , io.protocol\n\t      , ''\n\t      , this.sessionid\n\t    ].join('/') + '/?disconnect=1';\n\n\t    xhr.open('GET', uri, false);\n\t    xhr.send(null);\n\n\t    // handle disconnection immediately\n\t    this.onDisconnect('booted');\n\t  };\n\n\t  /**\n\t   * Check if we need to use cross domain enabled transports. Cross domain would\n\t   * be a different port or different domain name.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api private\n\t   */\n\n\t  Socket.prototype.isXDomain = function () {\n\n\t    var port = global.location.port ||\n\t      ('https:' == global.location.protocol ? 443 : 80);\n\n\t    return this.options.host !== global.location.hostname \n\t      || this.options.port != port;\n\t  };\n\n\t  /**\n\t   * Called upon handshake.\n\t   *\n\t   * @api private\n\t   */\n\n\t  Socket.prototype.onConnect = function () {\n\t    if (!this.connected) {\n\t      this.connected = true;\n\t      this.connecting = false;\n\t      if (!this.doBuffer) {\n\t        // make sure to flush the buffer\n\t        this.setBuffer(false);\n\t      }\n\t      this.emit('connect');\n\t    }\n\t  };\n\n\t  /**\n\t   * Called when the transport opens\n\t   *\n\t   * @api private\n\t   */\n\n\t  Socket.prototype.onOpen = function () {\n\t    this.open = true;\n\t  };\n\n\t  /**\n\t   * Called when the transport closes.\n\t   *\n\t   * @api private\n\t   */\n\n\t  Socket.prototype.onClose = function () {\n\t    this.open = false;\n\t    clearTimeout(this.heartbeatTimeoutTimer);\n\t  };\n\n\t  /**\n\t   * Called when the transport first opens a connection\n\t   *\n\t   * @param text\n\t   */\n\n\t  Socket.prototype.onPacket = function (packet) {\n\t    this.of(packet.endpoint).onPacket(packet);\n\t  };\n\n\t  /**\n\t   * Handles an error.\n\t   *\n\t   * @api private\n\t   */\n\n\t  Socket.prototype.onError = function (err) {\n\t    if (err && err.advice) {\n\t      if (err.advice === 'reconnect' && (this.connected || this.connecting)) {\n\t        this.disconnect();\n\t        if (this.options.reconnect) {\n\t          this.reconnect();\n\t        }\n\t      }\n\t    }\n\n\t    this.publish('error', err && err.reason ? err.reason : err);\n\t  };\n\n\t  /**\n\t   * Called when the transport disconnects.\n\t   *\n\t   * @api private\n\t   */\n\n\t  Socket.prototype.onDisconnect = function (reason) {\n\t    var wasConnected = this.connected\n\t      , wasConnecting = this.connecting;\n\n\t    this.connected = false;\n\t    this.connecting = false;\n\t    this.open = false;\n\n\t    if (wasConnected || wasConnecting) {\n\t      this.transport.close();\n\t      this.transport.clearTimeouts();\n\t      if (wasConnected) {\n\t        this.publish('disconnect', reason);\n\n\t        if ('booted' != reason && this.options.reconnect && !this.reconnecting) {\n\t          this.reconnect();\n\t        }\n\t      }\n\t    }\n\t  };\n\n\t  /**\n\t   * Called upon reconnection.\n\t   *\n\t   * @api private\n\t   */\n\n\t  Socket.prototype.reconnect = function () {\n\t    this.reconnecting = true;\n\t    this.reconnectionAttempts = 0;\n\t    this.reconnectionDelay = this.options['reconnection delay'];\n\n\t    var self = this\n\t      , maxAttempts = this.options['max reconnection attempts']\n\t      , tryMultiple = this.options['try multiple transports']\n\t      , limit = this.options['reconnection limit'];\n\n\t    function reset () {\n\t      if (self.connected) {\n\t        for (var i in self.namespaces) {\n\t          if (self.namespaces.hasOwnProperty(i) && '' !== i) {\n\t              self.namespaces[i].packet({ type: 'connect' });\n\t          }\n\t        }\n\t        self.publish('reconnect', self.transport.name, self.reconnectionAttempts);\n\t      }\n\n\t      clearTimeout(self.reconnectionTimer);\n\n\t      self.removeListener('connect_failed', maybeReconnect);\n\t      self.removeListener('connect', maybeReconnect);\n\n\t      self.reconnecting = false;\n\n\t      delete self.reconnectionAttempts;\n\t      delete self.reconnectionDelay;\n\t      delete self.reconnectionTimer;\n\t      delete self.redoTransports;\n\n\t      self.options['try multiple transports'] = tryMultiple;\n\t    };\n\n\t    function maybeReconnect () {\n\t      if (!self.reconnecting) {\n\t        return;\n\t      }\n\n\t      if (self.connected) {\n\t        return reset();\n\t      };\n\n\t      if (self.connecting && self.reconnecting) {\n\t        return self.reconnectionTimer = setTimeout(maybeReconnect, 1000);\n\t      }\n\n\t      if (self.reconnectionAttempts++ >= maxAttempts) {\n\t        if (!self.redoTransports) {\n\t          self.on('connect_failed', maybeReconnect);\n\t          self.options['try multiple transports'] = true;\n\t          self.transports = self.origTransports;\n\t          self.transport = self.getTransport();\n\t          self.redoTransports = true;\n\t          self.connect();\n\t        } else {\n\t          self.publish('reconnect_failed');\n\t          reset();\n\t        }\n\t      } else {\n\t        if (self.reconnectionDelay < limit) {\n\t          self.reconnectionDelay *= 2; // exponential back off\n\t        }\n\n\t        self.connect();\n\t        self.publish('reconnecting', self.reconnectionDelay, self.reconnectionAttempts);\n\t        self.reconnectionTimer = setTimeout(maybeReconnect, self.reconnectionDelay);\n\t      }\n\t    };\n\n\t    this.options['try multiple transports'] = false;\n\t    this.reconnectionTimer = setTimeout(maybeReconnect, this.reconnectionDelay);\n\n\t    this.on('connect', maybeReconnect);\n\t  };\n\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\n\t(function (exports, io) {\n\n\t  /**\n\t   * Expose constructor.\n\t   */\n\n\t  exports.SocketNamespace = SocketNamespace;\n\n\t  /**\n\t   * Socket namespace constructor.\n\t   *\n\t   * @constructor\n\t   * @api public\n\t   */\n\n\t  function SocketNamespace (socket, name) {\n\t    this.socket = socket;\n\t    this.name = name || '';\n\t    this.flags = {};\n\t    this.json = new Flag(this, 'json');\n\t    this.ackPackets = 0;\n\t    this.acks = {};\n\t  };\n\n\t  /**\n\t   * Apply EventEmitter mixin.\n\t   */\n\n\t  io.util.mixin(SocketNamespace, io.EventEmitter);\n\n\t  /**\n\t   * Copies emit since we override it\n\t   *\n\t   * @api private\n\t   */\n\n\t  SocketNamespace.prototype.$emit = io.EventEmitter.prototype.emit;\n\n\t  /**\n\t   * Creates a new namespace, by proxying the request to the socket. This\n\t   * allows us to use the synax as we do on the server.\n\t   *\n\t   * @api public\n\t   */\n\n\t  SocketNamespace.prototype.of = function () {\n\t    return this.socket.of.apply(this.socket, arguments);\n\t  };\n\n\t  /**\n\t   * Sends a packet.\n\t   *\n\t   * @api private\n\t   */\n\n\t  SocketNamespace.prototype.packet = function (packet) {\n\t    packet.endpoint = this.name;\n\t    this.socket.packet(packet);\n\t    this.flags = {};\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Sends a message\n\t   *\n\t   * @api public\n\t   */\n\n\t  SocketNamespace.prototype.send = function (data, fn) {\n\t    var packet = {\n\t        type: this.flags.json ? 'json' : 'message'\n\t      , data: data\n\t    };\n\n\t    if ('function' == typeof fn) {\n\t      packet.id = ++this.ackPackets;\n\t      packet.ack = true;\n\t      this.acks[packet.id] = fn;\n\t    }\n\n\t    return this.packet(packet);\n\t  };\n\n\t  /**\n\t   * Emits an event\n\t   *\n\t   * @api public\n\t   */\n\t  \n\t  SocketNamespace.prototype.emit = function (name) {\n\t    var args = Array.prototype.slice.call(arguments, 1)\n\t      , lastArg = args[args.length - 1]\n\t      , packet = {\n\t            type: 'event'\n\t          , name: name\n\t        };\n\n\t    if ('function' == typeof lastArg) {\n\t      packet.id = ++this.ackPackets;\n\t      packet.ack = 'data';\n\t      this.acks[packet.id] = lastArg;\n\t      args = args.slice(0, args.length - 1);\n\t    }\n\n\t    packet.args = args;\n\n\t    return this.packet(packet);\n\t  };\n\n\t  /**\n\t   * Disconnects the namespace\n\t   *\n\t   * @api private\n\t   */\n\n\t  SocketNamespace.prototype.disconnect = function () {\n\t    if (this.name === '') {\n\t      this.socket.disconnect();\n\t    } else {\n\t      this.packet({ type: 'disconnect' });\n\t      this.$emit('disconnect');\n\t    }\n\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Handles a packet\n\t   *\n\t   * @api private\n\t   */\n\n\t  SocketNamespace.prototype.onPacket = function (packet) {\n\t    var self = this;\n\n\t    function ack () {\n\t      self.packet({\n\t          type: 'ack'\n\t        , args: io.util.toArray(arguments)\n\t        , ackId: packet.id\n\t      });\n\t    };\n\n\t    switch (packet.type) {\n\t      case 'connect':\n\t        this.$emit('connect');\n\t        break;\n\n\t      case 'disconnect':\n\t        if (this.name === '') {\n\t          this.socket.onDisconnect(packet.reason || 'booted');\n\t        } else {\n\t          this.$emit('disconnect', packet.reason);\n\t        }\n\t        break;\n\n\t      case 'message':\n\t      case 'json':\n\t        var params = ['message', packet.data];\n\n\t        if (packet.ack == 'data') {\n\t          params.push(ack);\n\t        } else if (packet.ack) {\n\t          this.packet({ type: 'ack', ackId: packet.id });\n\t        }\n\n\t        this.$emit.apply(this, params);\n\t        break;\n\n\t      case 'event':\n\t        var params = [packet.name].concat(packet.args);\n\n\t        if (packet.ack == 'data')\n\t          params.push(ack);\n\n\t        this.$emit.apply(this, params);\n\t        break;\n\n\t      case 'ack':\n\t        if (this.acks[packet.ackId]) {\n\t          this.acks[packet.ackId].apply(this, packet.args);\n\t          delete this.acks[packet.ackId];\n\t        }\n\t        break;\n\n\t      case 'error':\n\t        if (packet.advice){\n\t          this.socket.onError(packet);\n\t        } else {\n\t          if (packet.reason == 'unauthorized') {\n\t            this.$emit('connect_failed', packet.reason);\n\t          } else {\n\t            this.$emit('error', packet.reason);\n\t          }\n\t        }\n\t        break;\n\t    }\n\t  };\n\n\t  /**\n\t   * Flag interface.\n\t   *\n\t   * @api private\n\t   */\n\n\t  function Flag (nsp, name) {\n\t    this.namespace = nsp;\n\t    this.name = name;\n\t  };\n\n\t  /**\n\t   * Send a message\n\t   *\n\t   * @api public\n\t   */\n\n\t  Flag.prototype.send = function () {\n\t    this.namespace.flags[this.name] = true;\n\t    this.namespace.send.apply(this.namespace, arguments);\n\t  };\n\n\t  /**\n\t   * Emit an event\n\t   *\n\t   * @api public\n\t   */\n\n\t  Flag.prototype.emit = function () {\n\t    this.namespace.flags[this.name] = true;\n\t    this.namespace.emit.apply(this.namespace, arguments);\n\t  };\n\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\n\t(function (exports, io, global) {\n\n\t  /**\n\t   * Expose constructor.\n\t   */\n\n\t  exports.websocket = WS;\n\n\t  /**\n\t   * The WebSocket transport uses the HTML5 WebSocket API to establish an\n\t   * persistent connection with the Socket.IO server. This transport will also\n\t   * be inherited by the FlashSocket fallback as it provides a API compatible\n\t   * polyfill for the WebSockets.\n\t   *\n\t   * @constructor\n\t   * @extends {io.Transport}\n\t   * @api public\n\t   */\n\n\t  function WS (socket) {\n\t    io.Transport.apply(this, arguments);\n\t  };\n\n\t  /**\n\t   * Inherits from Transport.\n\t   */\n\n\t  io.util.inherit(WS, io.Transport);\n\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\n\t  WS.prototype.name = 'websocket';\n\n\t  /**\n\t   * Initializes a new `WebSocket` connection with the Socket.IO server. We attach\n\t   * all the appropriate listeners to handle the responses from the server.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\n\t  WS.prototype.open = function () {\n\t    var query = io.util.query(this.socket.options.query)\n\t      , self = this\n\t      , Socket\n\n\n\t    if (!Socket) {\n\t      Socket = global.MozWebSocket || global.WebSocket;\n\t    }\n\n\t    this.websocket = new Socket(this.prepareUrl() + query);\n\n\t    this.websocket.onopen = function () {\n\t      self.onOpen();\n\t      self.socket.setBuffer(false);\n\t    };\n\t    this.websocket.onmessage = function (ev) {\n\t      self.onData(ev.data);\n\t    };\n\t    this.websocket.onclose = function () {\n\t      self.onClose();\n\t      self.socket.setBuffer(true);\n\t    };\n\t    this.websocket.onerror = function (e) {\n\t      self.onError(e);\n\t    };\n\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Send a message to the Socket.IO server. The message will automatically be\n\t   * encoded in the correct message format.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\n\t  // Do to a bug in the current IDevices browser, we need to wrap the send in a \n\t  // setTimeout, when they resume from sleeping the browser will crash if \n\t  // we don't allow the browser time to detect the socket has been closed\n\t  if (io.util.ua.iDevice) {\n\t    WS.prototype.send = function (data) {\n\t      var self = this;\n\t      setTimeout(function() {\n\t         self.websocket.send(data);\n\t      },0);\n\t      return this;\n\t    };\n\t  } else {\n\t    WS.prototype.send = function (data) {\n\t      this.websocket.send(data);\n\t      return this;\n\t    };\n\t  }\n\n\t  /**\n\t   * Payload\n\t   *\n\t   * @api private\n\t   */\n\n\t  WS.prototype.payload = function (arr) {\n\t    for (var i = 0, l = arr.length; i < l; i++) {\n\t      this.packet(arr[i]);\n\t    }\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Disconnect the established `WebSocket` connection.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\n\t  WS.prototype.close = function () {\n\t    this.websocket.close();\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Handle the errors that `WebSocket` might be giving when we\n\t   * are attempting to connect or send messages.\n\t   *\n\t   * @param {Error} e The error.\n\t   * @api private\n\t   */\n\n\t  WS.prototype.onError = function (e) {\n\t    this.socket.onError(e);\n\t  };\n\n\t  /**\n\t   * Returns the appropriate scheme for the URI generation.\n\t   *\n\t   * @api private\n\t   */\n\t  WS.prototype.scheme = function () {\n\t    return this.socket.options.secure ? 'wss' : 'ws';\n\t  };\n\n\t  /**\n\t   * Checks if the browser has support for native `WebSockets` and that\n\t   * it's not the polyfill created for the FlashSocket transport.\n\t   *\n\t   * @return {Boolean}\n\t   * @api public\n\t   */\n\n\t  WS.check = function () {\n\t    return ('WebSocket' in global && !('__addTask' in WebSocket))\n\t          || 'MozWebSocket' in global;\n\t  };\n\n\t  /**\n\t   * Check if the `WebSocket` transport support cross domain communications.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\n\t  WS.xdomainCheck = function () {\n\t    return true;\n\t  };\n\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\n\t  io.transports.push('websocket');\n\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\n\t(function (exports, io) {\n\n\t  /**\n\t   * Expose constructor.\n\t   */\n\n\t  exports.flashsocket = Flashsocket;\n\n\t  /**\n\t   * The FlashSocket transport. This is a API wrapper for the HTML5 WebSocket\n\t   * specification. It uses a .swf file to communicate with the server. If you want\n\t   * to serve the .swf file from a other server than where the Socket.IO script is\n\t   * coming from you need to use the insecure version of the .swf. More information\n\t   * about this can be found on the github page.\n\t   *\n\t   * @constructor\n\t   * @extends {io.Transport.websocket}\n\t   * @api public\n\t   */\n\n\t  function Flashsocket () {\n\t    io.Transport.websocket.apply(this, arguments);\n\t  };\n\n\t  /**\n\t   * Inherits from Transport.\n\t   */\n\n\t  io.util.inherit(Flashsocket, io.Transport.websocket);\n\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\n\t  Flashsocket.prototype.name = 'flashsocket';\n\n\t  /**\n\t   * Disconnect the established `FlashSocket` connection. This is done by adding a \n\t   * new task to the FlashSocket. The rest will be handled off by the `WebSocket` \n\t   * transport.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\n\t  Flashsocket.prototype.open = function () {\n\t    var self = this\n\t      , args = arguments;\n\n\t    WebSocket.__addTask(function () {\n\t      io.Transport.websocket.prototype.open.apply(self, args);\n\t    });\n\t    return this;\n\t  };\n\t  \n\t  /**\n\t   * Sends a message to the Socket.IO server. This is done by adding a new\n\t   * task to the FlashSocket. The rest will be handled off by the `WebSocket` \n\t   * transport.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\n\t  Flashsocket.prototype.send = function () {\n\t    var self = this, args = arguments;\n\t    WebSocket.__addTask(function () {\n\t      io.Transport.websocket.prototype.send.apply(self, args);\n\t    });\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Disconnects the established `FlashSocket` connection.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\n\t  Flashsocket.prototype.close = function () {\n\t    WebSocket.__tasks.length = 0;\n\t    io.Transport.websocket.prototype.close.call(this);\n\t    return this;\n\t  };\n\n\t  /**\n\t   * The WebSocket fall back needs to append the flash container to the body\n\t   * element, so we need to make sure we have access to it. Or defer the call\n\t   * until we are sure there is a body element.\n\t   *\n\t   * @param {Socket} socket The socket instance that needs a transport\n\t   * @param {Function} fn The callback\n\t   * @api private\n\t   */\n\n\t  Flashsocket.prototype.ready = function (socket, fn) {\n\t    function init () {\n\t      var options = socket.options\n\t        , port = options['flash policy port']\n\t        , path = [\n\t              'http' + (options.secure ? 's' : '') + ':/'\n\t            , options.host + ':' + options.port\n\t            , options.resource\n\t            , 'static/flashsocket'\n\t            , 'WebSocketMain' + (socket.isXDomain() ? 'Insecure' : '') + '.swf'\n\t          ];\n\n\t      // Only start downloading the swf file when the checked that this browser\n\t      // actually supports it\n\t      if (!Flashsocket.loaded) {\n\t        if (typeof WEB_SOCKET_SWF_LOCATION === 'undefined') {\n\t          // Set the correct file based on the XDomain settings\n\t          WEB_SOCKET_SWF_LOCATION = path.join('/');\n\t        }\n\n\t        if (port !== 843) {\n\t          WebSocket.loadFlashPolicyFile('xmlsocket://' + options.host + ':' + port);\n\t        }\n\n\t        WebSocket.__initialize();\n\t        Flashsocket.loaded = true;\n\t      }\n\n\t      fn.call(self);\n\t    }\n\n\t    var self = this;\n\t    if (document.body) return init();\n\n\t    io.util.load(init);\n\t  };\n\n\t  /**\n\t   * Check if the FlashSocket transport is supported as it requires that the Adobe\n\t   * Flash Player plug-in version `10.0.0` or greater is installed. And also check if\n\t   * the polyfill is correctly loaded.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\n\t  Flashsocket.check = function () {\n\t    if (\n\t        typeof WebSocket == 'undefined'\n\t      || !('__initialize' in WebSocket) || !swfobject\n\t    ) return false;\n\n\t    return swfobject.getFlashPlayerVersion().major >= 10;\n\t  };\n\n\t  /**\n\t   * Check if the FlashSocket transport can be used as cross domain / cross origin \n\t   * transport. Because we can't see which type (secure or insecure) of .swf is used\n\t   * we will just return true.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\n\t  Flashsocket.xdomainCheck = function () {\n\t    return true;\n\t  };\n\n\t  /**\n\t   * Disable AUTO_INITIALIZATION\n\t   */\n\n\t  if (typeof window != 'undefined') {\n\t    WEB_SOCKET_DISABLE_AUTO_INITIALIZATION = true;\n\t  }\n\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\n\t  io.transports.push('flashsocket');\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t/*\tSWFObject v2.2 <http://code.google.com/p/swfobject/> \n\t\tis released under the MIT License <http://www.opensource.org/licenses/mit-license.php> \n\t*/\n\tif ('undefined' != typeof window) {\n\tvar swfobject=function(){var D=\"undefined\",r=\"object\",S=\"Shockwave Flash\",W=\"ShockwaveFlash.ShockwaveFlash\",q=\"application/x-shockwave-flash\",R=\"SWFObjectExprInst\",x=\"onreadystatechange\",O=window,j=document,t=navigator,T=false,U=[h],o=[],N=[],I=[],l,Q,E,B,J=false,a=false,n,G,m=true,M=function(){var aa=typeof j.getElementById!=D&&typeof j.getElementsByTagName!=D&&typeof j.createElement!=D,ah=t.userAgent.toLowerCase(),Y=t.platform.toLowerCase(),ae=Y?/win/.test(Y):/win/.test(ah),ac=Y?/mac/.test(Y):/mac/.test(ah),af=/webkit/.test(ah)?parseFloat(ah.replace(/^.*webkit\\/(\\d+(\\.\\d+)?).*$/,\"$1\")):false,X=!+\"\\v1\",ag=[0,0,0],ab=null;if(typeof t.plugins!=D&&typeof t.plugins[S]==r){ab=t.plugins[S].description;if(ab&&!(typeof t.mimeTypes!=D&&t.mimeTypes[q]&&!t.mimeTypes[q].enabledPlugin)){T=true;X=false;ab=ab.replace(/^.*\\s+(\\S+\\s+\\S+$)/,\"$1\");ag[0]=parseInt(ab.replace(/^(.*)\\..*$/,\"$1\"),10);ag[1]=parseInt(ab.replace(/^.*\\.(.*)\\s.*$/,\"$1\"),10);ag[2]=/[a-zA-Z]/.test(ab)?parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/,\"$1\"),10):0}}else{if(typeof O[(['Active'].concat('Object').join('X'))]!=D){try{var ad=new window[(['Active'].concat('Object').join('X'))](W);if(ad){ab=ad.GetVariable(\"$version\");if(ab){X=true;ab=ab.split(\" \")[1].split(\",\");ag=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}}catch(Z){}}}return{w3:aa,pv:ag,wk:af,ie:X,win:ae,mac:ac}}(),k=function(){if(!M.w3){return}if((typeof j.readyState!=D&&j.readyState==\"complete\")||(typeof j.readyState==D&&(j.getElementsByTagName(\"body\")[0]||j.body))){f()}if(!J){if(typeof j.addEventListener!=D){j.addEventListener(\"DOMContentLoaded\",f,false)}if(M.ie&&M.win){j.attachEvent(x,function(){if(j.readyState==\"complete\"){j.detachEvent(x,arguments.callee);f()}});if(O==top){(function(){if(J){return}try{j.documentElement.doScroll(\"left\")}catch(X){setTimeout(arguments.callee,0);return}f()})()}}if(M.wk){(function(){if(J){return}if(!/loaded|complete/.test(j.readyState)){setTimeout(arguments.callee,0);return}f()})()}s(f)}}();function f(){if(J){return}try{var Z=j.getElementsByTagName(\"body\")[0].appendChild(C(\"span\"));Z.parentNode.removeChild(Z)}catch(aa){return}J=true;var X=U.length;for(var Y=0;Y<X;Y++){U[Y]()}}function K(X){if(J){X()}else{U[U.length]=X}}function s(Y){if(typeof O.addEventListener!=D){O.addEventListener(\"load\",Y,false)}else{if(typeof j.addEventListener!=D){j.addEventListener(\"load\",Y,false)}else{if(typeof O.attachEvent!=D){i(O,\"onload\",Y)}else{if(typeof O.onload==\"function\"){var X=O.onload;O.onload=function(){X();Y()}}else{O.onload=Y}}}}}function h(){if(T){V()}else{H()}}function V(){var X=j.getElementsByTagName(\"body\")[0];var aa=C(r);aa.setAttribute(\"type\",q);var Z=X.appendChild(aa);if(Z){var Y=0;(function(){if(typeof Z.GetVariable!=D){var ab=Z.GetVariable(\"$version\");if(ab){ab=ab.split(\" \")[1].split(\",\");M.pv=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}else{if(Y<10){Y++;setTimeout(arguments.callee,10);return}}X.removeChild(aa);Z=null;H()})()}else{H()}}function H(){var ag=o.length;if(ag>0){for(var af=0;af<ag;af++){var Y=o[af].id;var ab=o[af].callbackFn;var aa={success:false,id:Y};if(M.pv[0]>0){var ae=c(Y);if(ae){if(F(o[af].swfVersion)&&!(M.wk&&M.wk<312)){w(Y,true);if(ab){aa.success=true;aa.ref=z(Y);ab(aa)}}else{if(o[af].expressInstall&&A()){var ai={};ai.data=o[af].expressInstall;ai.width=ae.getAttribute(\"width\")||\"0\";ai.height=ae.getAttribute(\"height\")||\"0\";if(ae.getAttribute(\"class\")){ai.styleclass=ae.getAttribute(\"class\")}if(ae.getAttribute(\"align\")){ai.align=ae.getAttribute(\"align\")}var ah={};var X=ae.getElementsByTagName(\"param\");var ac=X.length;for(var ad=0;ad<ac;ad++){if(X[ad].getAttribute(\"name\").toLowerCase()!=\"movie\"){ah[X[ad].getAttribute(\"name\")]=X[ad].getAttribute(\"value\")}}P(ai,ah,Y,ab)}else{p(ae);if(ab){ab(aa)}}}}}else{w(Y,true);if(ab){var Z=z(Y);if(Z&&typeof Z.SetVariable!=D){aa.success=true;aa.ref=Z}ab(aa)}}}}}function z(aa){var X=null;var Y=c(aa);if(Y&&Y.nodeName==\"OBJECT\"){if(typeof Y.SetVariable!=D){X=Y}else{var Z=Y.getElementsByTagName(r)[0];if(Z){X=Z}}}return X}function A(){return !a&&F(\"6.0.65\")&&(M.win||M.mac)&&!(M.wk&&M.wk<312)}function P(aa,ab,X,Z){a=true;E=Z||null;B={success:false,id:X};var ae=c(X);if(ae){if(ae.nodeName==\"OBJECT\"){l=g(ae);Q=null}else{l=ae;Q=X}aa.id=R;if(typeof aa.width==D||(!/%$/.test(aa.width)&&parseInt(aa.width,10)<310)){aa.width=\"310\"}if(typeof aa.height==D||(!/%$/.test(aa.height)&&parseInt(aa.height,10)<137)){aa.height=\"137\"}j.title=j.title.slice(0,47)+\" - Flash Player Installation\";var ad=M.ie&&M.win?(['Active'].concat('').join('X')):\"PlugIn\",ac=\"MMredirectURL=\"+O.location.toString().replace(/&/g,\"%26\")+\"&MMplayerType=\"+ad+\"&MMdoctitle=\"+j.title;if(typeof ab.flashvars!=D){ab.flashvars+=\"&\"+ac}else{ab.flashvars=ac}if(M.ie&&M.win&&ae.readyState!=4){var Y=C(\"div\");X+=\"SWFObjectNew\";Y.setAttribute(\"id\",X);ae.parentNode.insertBefore(Y,ae);ae.style.display=\"none\";(function(){if(ae.readyState==4){ae.parentNode.removeChild(ae)}else{setTimeout(arguments.callee,10)}})()}u(aa,ab,X)}}function p(Y){if(M.ie&&M.win&&Y.readyState!=4){var X=C(\"div\");Y.parentNode.insertBefore(X,Y);X.parentNode.replaceChild(g(Y),X);Y.style.display=\"none\";(function(){if(Y.readyState==4){Y.parentNode.removeChild(Y)}else{setTimeout(arguments.callee,10)}})()}else{Y.parentNode.replaceChild(g(Y),Y)}}function g(ab){var aa=C(\"div\");if(M.win&&M.ie){aa.innerHTML=ab.innerHTML}else{var Y=ab.getElementsByTagName(r)[0];if(Y){var ad=Y.childNodes;if(ad){var X=ad.length;for(var Z=0;Z<X;Z++){if(!(ad[Z].nodeType==1&&ad[Z].nodeName==\"PARAM\")&&!(ad[Z].nodeType==8)){aa.appendChild(ad[Z].cloneNode(true))}}}}}return aa}function u(ai,ag,Y){var X,aa=c(Y);if(M.wk&&M.wk<312){return X}if(aa){if(typeof ai.id==D){ai.id=Y}if(M.ie&&M.win){var ah=\"\";for(var ae in ai){if(ai[ae]!=Object.prototype[ae]){if(ae.toLowerCase()==\"data\"){ag.movie=ai[ae]}else{if(ae.toLowerCase()==\"styleclass\"){ah+=' class=\"'+ai[ae]+'\"'}else{if(ae.toLowerCase()!=\"classid\"){ah+=\" \"+ae+'=\"'+ai[ae]+'\"'}}}}}var af=\"\";for(var ad in ag){if(ag[ad]!=Object.prototype[ad]){af+='<param name=\"'+ad+'\" value=\"'+ag[ad]+'\" />'}}aa.outerHTML='<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"'+ah+\">\"+af+\"</object>\";N[N.length]=ai.id;X=c(ai.id)}else{var Z=C(r);Z.setAttribute(\"type\",q);for(var ac in ai){if(ai[ac]!=Object.prototype[ac]){if(ac.toLowerCase()==\"styleclass\"){Z.setAttribute(\"class\",ai[ac])}else{if(ac.toLowerCase()!=\"classid\"){Z.setAttribute(ac,ai[ac])}}}}for(var ab in ag){if(ag[ab]!=Object.prototype[ab]&&ab.toLowerCase()!=\"movie\"){e(Z,ab,ag[ab])}}aa.parentNode.replaceChild(Z,aa);X=Z}}return X}function e(Z,X,Y){var aa=C(\"param\");aa.setAttribute(\"name\",X);aa.setAttribute(\"value\",Y);Z.appendChild(aa)}function y(Y){var X=c(Y);if(X&&X.nodeName==\"OBJECT\"){if(M.ie&&M.win){X.style.display=\"none\";(function(){if(X.readyState==4){b(Y)}else{setTimeout(arguments.callee,10)}})()}else{X.parentNode.removeChild(X)}}}function b(Z){var Y=c(Z);if(Y){for(var X in Y){if(typeof Y[X]==\"function\"){Y[X]=null}}Y.parentNode.removeChild(Y)}}function c(Z){var X=null;try{X=j.getElementById(Z)}catch(Y){}return X}function C(X){return j.createElement(X)}function i(Z,X,Y){Z.attachEvent(X,Y);I[I.length]=[Z,X,Y]}function F(Z){var Y=M.pv,X=Z.split(\".\");X[0]=parseInt(X[0],10);X[1]=parseInt(X[1],10)||0;X[2]=parseInt(X[2],10)||0;return(Y[0]>X[0]||(Y[0]==X[0]&&Y[1]>X[1])||(Y[0]==X[0]&&Y[1]==X[1]&&Y[2]>=X[2]))?true:false}function v(ac,Y,ad,ab){if(M.ie&&M.mac){return}var aa=j.getElementsByTagName(\"head\")[0];if(!aa){return}var X=(ad&&typeof ad==\"string\")?ad:\"screen\";if(ab){n=null;G=null}if(!n||G!=X){var Z=C(\"style\");Z.setAttribute(\"type\",\"text/css\");Z.setAttribute(\"media\",X);n=aa.appendChild(Z);if(M.ie&&M.win&&typeof j.styleSheets!=D&&j.styleSheets.length>0){n=j.styleSheets[j.styleSheets.length-1]}G=X}if(M.ie&&M.win){if(n&&typeof n.addRule==r){n.addRule(ac,Y)}}else{if(n&&typeof j.createTextNode!=D){n.appendChild(j.createTextNode(ac+\" {\"+Y+\"}\"))}}}function w(Z,X){if(!m){return}var Y=X?\"visible\":\"hidden\";if(J&&c(Z)){c(Z).style.visibility=Y}else{v(\"#\"+Z,\"visibility:\"+Y)}}function L(Y){var Z=/[\\\\\\\"<>\\.;]/;var X=Z.exec(Y)!=null;return X&&typeof encodeURIComponent!=D?encodeURIComponent(Y):Y}var d=function(){if(M.ie&&M.win){window.attachEvent(\"onunload\",function(){var ac=I.length;for(var ab=0;ab<ac;ab++){I[ab][0].detachEvent(I[ab][1],I[ab][2])}var Z=N.length;for(var aa=0;aa<Z;aa++){y(N[aa])}for(var Y in M){M[Y]=null}M=null;for(var X in swfobject){swfobject[X]=null}swfobject=null})}}();return{registerObject:function(ab,X,aa,Z){if(M.w3&&ab&&X){var Y={};Y.id=ab;Y.swfVersion=X;Y.expressInstall=aa;Y.callbackFn=Z;o[o.length]=Y;w(ab,false)}else{if(Z){Z({success:false,id:ab})}}},getObjectById:function(X){if(M.w3){return z(X)}},embedSWF:function(ab,ah,ae,ag,Y,aa,Z,ad,af,ac){var X={success:false,id:ah};if(M.w3&&!(M.wk&&M.wk<312)&&ab&&ah&&ae&&ag&&Y){w(ah,false);K(function(){ae+=\"\";ag+=\"\";var aj={};if(af&&typeof af===r){for(var al in af){aj[al]=af[al]}}aj.data=ab;aj.width=ae;aj.height=ag;var am={};if(ad&&typeof ad===r){for(var ak in ad){am[ak]=ad[ak]}}if(Z&&typeof Z===r){for(var ai in Z){if(typeof am.flashvars!=D){am.flashvars+=\"&\"+ai+\"=\"+Z[ai]}else{am.flashvars=ai+\"=\"+Z[ai]}}}if(F(Y)){var an=u(aj,am,ah);if(aj.id==ah){w(ah,true)}X.success=true;X.ref=an}else{if(aa&&A()){aj.data=aa;P(aj,am,ah,ac);return}else{w(ah,true)}}if(ac){ac(X)}})}else{if(ac){ac(X)}}},switchOffAutoHideShow:function(){m=false},ua:M,getFlashPlayerVersion:function(){return{major:M.pv[0],minor:M.pv[1],release:M.pv[2]}},hasFlashPlayerVersion:F,createSWF:function(Z,Y,X){if(M.w3){return u(Z,Y,X)}else{return undefined}},showExpressInstall:function(Z,aa,X,Y){if(M.w3&&A()){P(Z,aa,X,Y)}},removeSWF:function(X){if(M.w3){y(X)}},createCSS:function(aa,Z,Y,X){if(M.w3){v(aa,Z,Y,X)}},addDomLoadEvent:K,addLoadEvent:s,getQueryParamValue:function(aa){var Z=j.location.search||j.location.hash;if(Z){if(/\\?/.test(Z)){Z=Z.split(\"?\")[1]}if(aa==null){return L(Z)}var Y=Z.split(\"&\");for(var X=0;X<Y.length;X++){if(Y[X].substring(0,Y[X].indexOf(\"=\"))==aa){return L(Y[X].substring((Y[X].indexOf(\"=\")+1)))}}}return\"\"},expressInstallCallback:function(){if(a){var X=c(R);if(X&&l){X.parentNode.replaceChild(l,X);if(Q){w(Q,true);if(M.ie&&M.win){l.style.display=\"block\"}}if(E){E(B)}}a=false}}}}();\n\t}\n\t// Copyright: Hiroshi Ichikawa <http://gimite.net/en/>\n\t// License: New BSD License\n\t// Reference: http://dev.w3.org/html5/websockets/\n\t// Reference: http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol\n\n\t(function() {\n\t  \n\t  if ('undefined' == typeof window || window.WebSocket) return;\n\n\t  var console = window.console;\n\t  if (!console || !console.log || !console.error) {\n\t    console = {log: function(){ }, error: function(){ }};\n\t  }\n\t  \n\t  if (!swfobject.hasFlashPlayerVersion(\"10.0.0\")) {\n\t    console.error(\"Flash Player >= 10.0.0 is required.\");\n\t    return;\n\t  }\n\t  if (location.protocol == \"file:\") {\n\t    console.error(\n\t      \"WARNING: web-socket-js doesn't work in file:///... URL \" +\n\t      \"unless you set Flash Security Settings properly. \" +\n\t      \"Open the page via Web server i.e. http://...\");\n\t  }\n\n\t  /**\n\t   * This class represents a faux web socket.\n\t   * @param {string} url\n\t   * @param {array or string} protocols\n\t   * @param {string} proxyHost\n\t   * @param {int} proxyPort\n\t   * @param {string} headers\n\t   */\n\t  WebSocket = function(url, protocols, proxyHost, proxyPort, headers) {\n\t    var self = this;\n\t    self.__id = WebSocket.__nextId++;\n\t    WebSocket.__instances[self.__id] = self;\n\t    self.readyState = WebSocket.CONNECTING;\n\t    self.bufferedAmount = 0;\n\t    self.__events = {};\n\t    if (!protocols) {\n\t      protocols = [];\n\t    } else if (typeof protocols == \"string\") {\n\t      protocols = [protocols];\n\t    }\n\t    // Uses setTimeout() to make sure __createFlash() runs after the caller sets ws.onopen etc.\n\t    // Otherwise, when onopen fires immediately, onopen is called before it is set.\n\t    setTimeout(function() {\n\t      WebSocket.__addTask(function() {\n\t        WebSocket.__flash.create(\n\t            self.__id, url, protocols, proxyHost || null, proxyPort || 0, headers || null);\n\t      });\n\t    }, 0);\n\t  };\n\n\t  /**\n\t   * Send data to the web socket.\n\t   * @param {string} data  The data to send to the socket.\n\t   * @return {boolean}  True for success, false for failure.\n\t   */\n\t  WebSocket.prototype.send = function(data) {\n\t    if (this.readyState == WebSocket.CONNECTING) {\n\t      throw \"INVALID_STATE_ERR: Web Socket connection has not been established\";\n\t    }\n\t    // We use encodeURIComponent() here, because FABridge doesn't work if\n\t    // the argument includes some characters. We don't use escape() here\n\t    // because of this:\n\t    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Functions#escape_and_unescape_Functions\n\t    // But it looks decodeURIComponent(encodeURIComponent(s)) doesn't\n\t    // preserve all Unicode characters either e.g. \"\\uffff\" in Firefox.\n\t    // Note by wtritch: Hopefully this will not be necessary using ExternalInterface.  Will require\n\t    // additional testing.\n\t    var result = WebSocket.__flash.send(this.__id, encodeURIComponent(data));\n\t    if (result < 0) { // success\n\t      return true;\n\t    } else {\n\t      this.bufferedAmount += result;\n\t      return false;\n\t    }\n\t  };\n\n\t  /**\n\t   * Close this web socket gracefully.\n\t   */\n\t  WebSocket.prototype.close = function() {\n\t    if (this.readyState == WebSocket.CLOSED || this.readyState == WebSocket.CLOSING) {\n\t      return;\n\t    }\n\t    this.readyState = WebSocket.CLOSING;\n\t    WebSocket.__flash.close(this.__id);\n\t  };\n\n\t  /**\n\t   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n\t   *\n\t   * @param {string} type\n\t   * @param {function} listener\n\t   * @param {boolean} useCapture\n\t   * @return void\n\t   */\n\t  WebSocket.prototype.addEventListener = function(type, listener, useCapture) {\n\t    if (!(type in this.__events)) {\n\t      this.__events[type] = [];\n\t    }\n\t    this.__events[type].push(listener);\n\t  };\n\n\t  /**\n\t   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n\t   *\n\t   * @param {string} type\n\t   * @param {function} listener\n\t   * @param {boolean} useCapture\n\t   * @return void\n\t   */\n\t  WebSocket.prototype.removeEventListener = function(type, listener, useCapture) {\n\t    if (!(type in this.__events)) return;\n\t    var events = this.__events[type];\n\t    for (var i = events.length - 1; i >= 0; --i) {\n\t      if (events[i] === listener) {\n\t        events.splice(i, 1);\n\t        break;\n\t      }\n\t    }\n\t  };\n\n\t  /**\n\t   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n\t   *\n\t   * @param {Event} event\n\t   * @return void\n\t   */\n\t  WebSocket.prototype.dispatchEvent = function(event) {\n\t    var events = this.__events[event.type] || [];\n\t    for (var i = 0; i < events.length; ++i) {\n\t      events[i](event);\n\t    }\n\t    var handler = this[\"on\" + event.type];\n\t    if (handler) handler(event);\n\t  };\n\n\t  /**\n\t   * Handles an event from Flash.\n\t   * @param {Object} flashEvent\n\t   */\n\t  WebSocket.prototype.__handleEvent = function(flashEvent) {\n\t    if (\"readyState\" in flashEvent) {\n\t      this.readyState = flashEvent.readyState;\n\t    }\n\t    if (\"protocol\" in flashEvent) {\n\t      this.protocol = flashEvent.protocol;\n\t    }\n\t    \n\t    var jsEvent;\n\t    if (flashEvent.type == \"open\" || flashEvent.type == \"error\") {\n\t      jsEvent = this.__createSimpleEvent(flashEvent.type);\n\t    } else if (flashEvent.type == \"close\") {\n\t      // TODO implement jsEvent.wasClean\n\t      jsEvent = this.__createSimpleEvent(\"close\");\n\t    } else if (flashEvent.type == \"message\") {\n\t      var data = decodeURIComponent(flashEvent.message);\n\t      jsEvent = this.__createMessageEvent(\"message\", data);\n\t    } else {\n\t      throw \"unknown event type: \" + flashEvent.type;\n\t    }\n\t    \n\t    this.dispatchEvent(jsEvent);\n\t  };\n\t  \n\t  WebSocket.prototype.__createSimpleEvent = function(type) {\n\t    if (document.createEvent && window.Event) {\n\t      var event = document.createEvent(\"Event\");\n\t      event.initEvent(type, false, false);\n\t      return event;\n\t    } else {\n\t      return {type: type, bubbles: false, cancelable: false};\n\t    }\n\t  };\n\t  \n\t  WebSocket.prototype.__createMessageEvent = function(type, data) {\n\t    if (document.createEvent && window.MessageEvent && !window.opera) {\n\t      var event = document.createEvent(\"MessageEvent\");\n\t      event.initMessageEvent(\"message\", false, false, data, null, null, window, null);\n\t      return event;\n\t    } else {\n\t      // IE and Opera, the latter one truncates the data parameter after any 0x00 bytes.\n\t      return {type: type, data: data, bubbles: false, cancelable: false};\n\t    }\n\t  };\n\t  \n\t  /**\n\t   * Define the WebSocket readyState enumeration.\n\t   */\n\t  WebSocket.CONNECTING = 0;\n\t  WebSocket.OPEN = 1;\n\t  WebSocket.CLOSING = 2;\n\t  WebSocket.CLOSED = 3;\n\n\t  WebSocket.__flash = null;\n\t  WebSocket.__instances = {};\n\t  WebSocket.__tasks = [];\n\t  WebSocket.__nextId = 0;\n\t  \n\t  /**\n\t   * Load a new flash security policy file.\n\t   * @param {string} url\n\t   */\n\t  WebSocket.loadFlashPolicyFile = function(url){\n\t    WebSocket.__addTask(function() {\n\t      WebSocket.__flash.loadManualPolicyFile(url);\n\t    });\n\t  };\n\n\t  /**\n\t   * Loads WebSocketMain.swf and creates WebSocketMain object in Flash.\n\t   */\n\t  WebSocket.__initialize = function() {\n\t    if (WebSocket.__flash) return;\n\t    \n\t    if (WebSocket.__swfLocation) {\n\t      // For backword compatibility.\n\t      window.WEB_SOCKET_SWF_LOCATION = WebSocket.__swfLocation;\n\t    }\n\t    if (!window.WEB_SOCKET_SWF_LOCATION) {\n\t      console.error(\"[WebSocket] set WEB_SOCKET_SWF_LOCATION to location of WebSocketMain.swf\");\n\t      return;\n\t    }\n\t    var container = document.createElement(\"div\");\n\t    container.id = \"webSocketContainer\";\n\t    // Hides Flash box. We cannot use display: none or visibility: hidden because it prevents\n\t    // Flash from loading at least in IE. So we move it out of the screen at (-100, -100).\n\t    // But this even doesn't work with Flash Lite (e.g. in Droid Incredible). So with Flash\n\t    // Lite, we put it at (0, 0). This shows 1x1 box visible at left-top corner but this is\n\t    // the best we can do as far as we know now.\n\t    container.style.position = \"absolute\";\n\t    if (WebSocket.__isFlashLite()) {\n\t      container.style.left = \"0px\";\n\t      container.style.top = \"0px\";\n\t    } else {\n\t      container.style.left = \"-100px\";\n\t      container.style.top = \"-100px\";\n\t    }\n\t    var holder = document.createElement(\"div\");\n\t    holder.id = \"webSocketFlash\";\n\t    container.appendChild(holder);\n\t    document.body.appendChild(container);\n\t    // See this article for hasPriority:\n\t    // http://help.adobe.com/en_US/as3/mobile/WS4bebcd66a74275c36cfb8137124318eebc6-7ffd.html\n\t    swfobject.embedSWF(\n\t      WEB_SOCKET_SWF_LOCATION,\n\t      \"webSocketFlash\",\n\t      \"1\" /* width */,\n\t      \"1\" /* height */,\n\t      \"10.0.0\" /* SWF version */,\n\t      null,\n\t      null,\n\t      {hasPriority: true, swliveconnect : true, allowScriptAccess: \"always\"},\n\t      null,\n\t      function(e) {\n\t        if (!e.success) {\n\t          console.error(\"[WebSocket] swfobject.embedSWF failed\");\n\t        }\n\t      });\n\t  };\n\t  \n\t  /**\n\t   * Called by Flash to notify JS that it's fully loaded and ready\n\t   * for communication.\n\t   */\n\t  WebSocket.__onFlashInitialized = function() {\n\t    // We need to set a timeout here to avoid round-trip calls\n\t    // to flash during the initialization process.\n\t    setTimeout(function() {\n\t      WebSocket.__flash = document.getElementById(\"webSocketFlash\");\n\t      WebSocket.__flash.setCallerUrl(location.href);\n\t      WebSocket.__flash.setDebug(!!window.WEB_SOCKET_DEBUG);\n\t      for (var i = 0; i < WebSocket.__tasks.length; ++i) {\n\t        WebSocket.__tasks[i]();\n\t      }\n\t      WebSocket.__tasks = [];\n\t    }, 0);\n\t  };\n\t  \n\t  /**\n\t   * Called by Flash to notify WebSockets events are fired.\n\t   */\n\t  WebSocket.__onFlashEvent = function() {\n\t    setTimeout(function() {\n\t      try {\n\t        // Gets events using receiveEvents() instead of getting it from event object\n\t        // of Flash event. This is to make sure to keep message order.\n\t        // It seems sometimes Flash events don't arrive in the same order as they are sent.\n\t        var events = WebSocket.__flash.receiveEvents();\n\t        for (var i = 0; i < events.length; ++i) {\n\t          WebSocket.__instances[events[i].webSocketId].__handleEvent(events[i]);\n\t        }\n\t      } catch (e) {\n\t        console.error(e);\n\t      }\n\t    }, 0);\n\t    return true;\n\t  };\n\t  \n\t  // Called by Flash.\n\t  WebSocket.__log = function(message) {\n\t    console.log(decodeURIComponent(message));\n\t  };\n\t  \n\t  // Called by Flash.\n\t  WebSocket.__error = function(message) {\n\t    console.error(decodeURIComponent(message));\n\t  };\n\t  \n\t  WebSocket.__addTask = function(task) {\n\t    if (WebSocket.__flash) {\n\t      task();\n\t    } else {\n\t      WebSocket.__tasks.push(task);\n\t    }\n\t  };\n\t  \n\t  /**\n\t   * Test if the browser is running flash lite.\n\t   * @return {boolean} True if flash lite is running, false otherwise.\n\t   */\n\t  WebSocket.__isFlashLite = function() {\n\t    if (!window.navigator || !window.navigator.mimeTypes) {\n\t      return false;\n\t    }\n\t    var mimeType = window.navigator.mimeTypes[\"application/x-shockwave-flash\"];\n\t    if (!mimeType || !mimeType.enabledPlugin || !mimeType.enabledPlugin.filename) {\n\t      return false;\n\t    }\n\t    return mimeType.enabledPlugin.filename.match(/flashlite/i) ? true : false;\n\t  };\n\t  \n\t  if (!window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION) {\n\t    if (window.addEventListener) {\n\t      window.addEventListener(\"load\", function(){\n\t        WebSocket.__initialize();\n\t      }, false);\n\t    } else {\n\t      window.attachEvent(\"onload\", function(){\n\t        WebSocket.__initialize();\n\t      });\n\t    }\n\t  }\n\t  \n\t})();\n\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\n\t(function (exports, io, global) {\n\n\t  /**\n\t   * Expose constructor.\n\t   *\n\t   * @api public\n\t   */\n\n\t  exports.XHR = XHR;\n\n\t  /**\n\t   * XHR constructor\n\t   *\n\t   * @costructor\n\t   * @api public\n\t   */\n\n\t  function XHR (socket) {\n\t    if (!socket) return;\n\n\t    io.Transport.apply(this, arguments);\n\t    this.sendBuffer = [];\n\t  };\n\n\t  /**\n\t   * Inherits from Transport.\n\t   */\n\n\t  io.util.inherit(XHR, io.Transport);\n\n\t  /**\n\t   * Establish a connection\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\n\t  XHR.prototype.open = function () {\n\t    this.socket.setBuffer(false);\n\t    this.onOpen();\n\t    this.get();\n\n\t    // we need to make sure the request succeeds since we have no indication\n\t    // whether the request opened or not until it succeeded.\n\t    this.setCloseTimeout();\n\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Check if we need to send data to the Socket.IO server, if we have data in our\n\t   * buffer we encode it and forward it to the `post` method.\n\t   *\n\t   * @api private\n\t   */\n\n\t  XHR.prototype.payload = function (payload) {\n\t    var msgs = [];\n\n\t    for (var i = 0, l = payload.length; i < l; i++) {\n\t      msgs.push(io.parser.encodePacket(payload[i]));\n\t    }\n\n\t    this.send(io.parser.encodePayload(msgs));\n\t  };\n\n\t  /**\n\t   * Send data to the Socket.IO server.\n\t   *\n\t   * @param data The message\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\n\t  XHR.prototype.send = function (data) {\n\t    this.post(data);\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Posts a encoded message to the Socket.IO server.\n\t   *\n\t   * @param {String} data A encoded message.\n\t   * @api private\n\t   */\n\n\t  function empty () { };\n\n\t  XHR.prototype.post = function (data) {\n\t    var self = this;\n\t    this.socket.setBuffer(true);\n\n\t    function stateChange () {\n\t      if (this.readyState == 4) {\n\t        this.onreadystatechange = empty;\n\t        self.posting = false;\n\n\t        if (this.status == 200){\n\t          self.socket.setBuffer(false);\n\t        } else {\n\t          self.onClose();\n\t        }\n\t      }\n\t    }\n\n\t    function onload () {\n\t      this.onload = empty;\n\t      self.socket.setBuffer(false);\n\t    };\n\n\t    this.sendXHR = this.request('POST');\n\n\t    if (global.XDomainRequest && this.sendXHR instanceof XDomainRequest) {\n\t      this.sendXHR.onload = this.sendXHR.onerror = onload;\n\t    } else {\n\t      this.sendXHR.onreadystatechange = stateChange;\n\t    }\n\n\t    this.sendXHR.send(data);\n\t  };\n\n\t  /**\n\t   * Disconnects the established `XHR` connection.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\n\t  XHR.prototype.close = function () {\n\t    this.onClose();\n\t    return this;\n\t  };\n\n\t  /**\n\t   * Generates a configured XHR request\n\t   *\n\t   * @param {String} url The url that needs to be requested.\n\t   * @param {String} method The method the request should use.\n\t   * @returns {XMLHttpRequest}\n\t   * @api private\n\t   */\n\n\t  XHR.prototype.request = function (method) {\n\t    var req = io.util.request(this.socket.isXDomain())\n\t      , query = io.util.query(this.socket.options.query, 't=' + +new Date);\n\n\t    req.open(method || 'GET', this.prepareUrl() + query, true);\n\n\t    if (method == 'POST') {\n\t      try {\n\t        if (req.setRequestHeader) {\n\t          req.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n\t        } else {\n\t          // XDomainRequest\n\t          req.contentType = 'text/plain';\n\t        }\n\t      } catch (e) {}\n\t    }\n\n\t    return req;\n\t  };\n\n\t  /**\n\t   * Returns the scheme to use for the transport URLs.\n\t   *\n\t   * @api private\n\t   */\n\n\t  XHR.prototype.scheme = function () {\n\t    return this.socket.options.secure ? 'https' : 'http';\n\t  };\n\n\t  /**\n\t   * Check if the XHR transports are supported\n\t   *\n\t   * @param {Boolean} xdomain Check if we support cross domain requests.\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\n\t  XHR.check = function (socket, xdomain) {\n\t    try {\n\t      var request = io.util.request(xdomain),\n\t          usesXDomReq = (global.XDomainRequest && request instanceof XDomainRequest),\n\t          socketProtocol = (socket && socket.options && socket.options.secure ? 'https:' : 'http:'),\n\t          isXProtocol = (global.location && socketProtocol != global.location.protocol);\n\t      if (request && !(usesXDomReq && isXProtocol)) {\n\t        return true;\n\t      }\n\t    } catch(e) {}\n\n\t    return false;\n\t  };\n\n\t  /**\n\t   * Check if the XHR transport supports cross domain requests.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\n\t  XHR.xdomainCheck = function (socket) {\n\t    return XHR.check(socket, true);\n\t  };\n\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\n\t(function (exports, io) {\n\n\t  /**\n\t   * Expose constructor.\n\t   */\n\n\t  exports.htmlfile = HTMLFile;\n\n\t  /**\n\t   * The HTMLFile transport creates a `forever iframe` based transport\n\t   * for Internet Explorer. Regular forever iframe implementations will \n\t   * continuously trigger the browsers buzy indicators. If the forever iframe\n\t   * is created inside a `htmlfile` these indicators will not be trigged.\n\t   *\n\t   * @constructor\n\t   * @extends {io.Transport.XHR}\n\t   * @api public\n\t   */\n\n\t  function HTMLFile (socket) {\n\t    io.Transport.XHR.apply(this, arguments);\n\t  };\n\n\t  /**\n\t   * Inherits from XHR transport.\n\t   */\n\n\t  io.util.inherit(HTMLFile, io.Transport.XHR);\n\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\n\t  HTMLFile.prototype.name = 'htmlfile';\n\n\t  /**\n\t   * Creates a new Ac...eX `htmlfile` with a forever loading iframe\n\t   * that can be used to listen to messages. Inside the generated\n\t   * `htmlfile` a reference will be made to the HTMLFile transport.\n\t   *\n\t   * @api private\n\t   */\n\n\t  HTMLFile.prototype.get = function () {\n\t    this.doc = new window[(['Active'].concat('Object').join('X'))]('htmlfile');\n\t    this.doc.open();\n\t    this.doc.write('<html></html>');\n\t    this.doc.close();\n\t    this.doc.parentWindow.s = this;\n\n\t    var iframeC = this.doc.createElement('div');\n\t    iframeC.className = 'socketio';\n\n\t    this.doc.body.appendChild(iframeC);\n\t    this.iframe = this.doc.createElement('iframe');\n\n\t    iframeC.appendChild(this.iframe);\n\n\t    var self = this\n\t      , query = io.util.query(this.socket.options.query, 't='+ +new Date);\n\n\t    this.iframe.src = this.prepareUrl() + query;\n\n\t    io.util.on(window, 'unload', function () {\n\t      self.destroy();\n\t    });\n\t  };\n\n\t  /**\n\t   * The Socket.IO server will write script tags inside the forever\n\t   * iframe, this function will be used as callback for the incoming\n\t   * information.\n\t   *\n\t   * @param {String} data The message\n\t   * @param {document} doc Reference to the context\n\t   * @api private\n\t   */\n\n\t  HTMLFile.prototype._ = function (data, doc) {\n\t    // unescape all forward slashes. see GH-1251\n\t    data = data.replace(/\\\\\\//g, '/');\n\t    this.onData(data);\n\t    try {\n\t      var script = doc.getElementsByTagName('script')[0];\n\t      script.parentNode.removeChild(script);\n\t    } catch (e) { }\n\t  };\n\n\t  /**\n\t   * Destroy the established connection, iframe and `htmlfile`.\n\t   * And calls the `CollectGarbage` function of Internet Explorer\n\t   * to release the memory.\n\t   *\n\t   * @api private\n\t   */\n\n\t  HTMLFile.prototype.destroy = function () {\n\t    if (this.iframe){\n\t      try {\n\t        this.iframe.src = 'about:blank';\n\t      } catch(e){}\n\n\t      this.doc = null;\n\t      this.iframe.parentNode.removeChild(this.iframe);\n\t      this.iframe = null;\n\n\t      CollectGarbage();\n\t    }\n\t  };\n\n\t  /**\n\t   * Disconnects the established connection.\n\t   *\n\t   * @returns {Transport} Chaining.\n\t   * @api public\n\t   */\n\n\t  HTMLFile.prototype.close = function () {\n\t    this.destroy();\n\t    return io.Transport.XHR.prototype.close.call(this);\n\t  };\n\n\t  /**\n\t   * Checks if the browser supports this transport. The browser\n\t   * must have an `Ac...eXObject` implementation.\n\t   *\n\t   * @return {Boolean}\n\t   * @api public\n\t   */\n\n\t  HTMLFile.check = function (socket) {\n\t    if (typeof window != \"undefined\" && (['Active'].concat('Object').join('X')) in window){\n\t      try {\n\t        var a = new window[(['Active'].concat('Object').join('X'))]('htmlfile');\n\t        return a && io.Transport.XHR.check(socket);\n\t      } catch(e){}\n\t    }\n\t    return false;\n\t  };\n\n\t  /**\n\t   * Check if cross domain requests are supported.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\n\t  HTMLFile.xdomainCheck = function () {\n\t    // we can probably do handling for sub-domains, we should\n\t    // test that it's cross domain but a subdomain here\n\t    return false;\n\t  };\n\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\n\t  io.transports.push('htmlfile');\n\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\n\t(function (exports, io, global) {\n\n\t  /**\n\t   * Expose constructor.\n\t   */\n\n\t  exports['xhr-polling'] = XHRPolling;\n\n\t  /**\n\t   * The XHR-polling transport uses long polling XHR requests to create a\n\t   * \"persistent\" connection with the server.\n\t   *\n\t   * @constructor\n\t   * @api public\n\t   */\n\n\t  function XHRPolling () {\n\t    io.Transport.XHR.apply(this, arguments);\n\t  };\n\n\t  /**\n\t   * Inherits from XHR transport.\n\t   */\n\n\t  io.util.inherit(XHRPolling, io.Transport.XHR);\n\n\t  /**\n\t   * Merge the properties from XHR transport\n\t   */\n\n\t  io.util.merge(XHRPolling, io.Transport.XHR);\n\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\n\t  XHRPolling.prototype.name = 'xhr-polling';\n\n\t  /**\n\t   * Indicates whether heartbeats is enabled for this transport\n\t   *\n\t   * @api private\n\t   */\n\n\t  XHRPolling.prototype.heartbeats = function () {\n\t    return false;\n\t  };\n\n\t  /** \n\t   * Establish a connection, for iPhone and Android this will be done once the page\n\t   * is loaded.\n\t   *\n\t   * @returns {Transport} Chaining.\n\t   * @api public\n\t   */\n\n\t  XHRPolling.prototype.open = function () {\n\t    var self = this;\n\n\t    io.Transport.XHR.prototype.open.call(self);\n\t    return false;\n\t  };\n\n\t  /**\n\t   * Starts a XHR request to wait for incoming messages.\n\t   *\n\t   * @api private\n\t   */\n\n\t  function empty () {};\n\n\t  XHRPolling.prototype.get = function () {\n\t    if (!this.isOpen) return;\n\n\t    var self = this;\n\n\t    function stateChange () {\n\t      if (this.readyState == 4) {\n\t        this.onreadystatechange = empty;\n\n\t        if (this.status == 200) {\n\t          self.onData(this.responseText);\n\t          self.get();\n\t        } else {\n\t          self.onClose();\n\t        }\n\t      }\n\t    };\n\n\t    function onload () {\n\t      this.onload = empty;\n\t      this.onerror = empty;\n\t      self.retryCounter = 1;\n\t      self.onData(this.responseText);\n\t      self.get();\n\t    };\n\n\t    function onerror () {\n\t      self.retryCounter ++;\n\t      if(!self.retryCounter || self.retryCounter > 3) {\n\t        self.onClose();  \n\t      } else {\n\t        self.get();\n\t      }\n\t    };\n\n\t    this.xhr = this.request();\n\n\t    if (global.XDomainRequest && this.xhr instanceof XDomainRequest) {\n\t      this.xhr.onload = onload;\n\t      this.xhr.onerror = onerror;\n\t    } else {\n\t      this.xhr.onreadystatechange = stateChange;\n\t    }\n\n\t    this.xhr.send(null);\n\t  };\n\n\t  /**\n\t   * Handle the unclean close behavior.\n\t   *\n\t   * @api private\n\t   */\n\n\t  XHRPolling.prototype.onClose = function () {\n\t    io.Transport.XHR.prototype.onClose.call(this);\n\n\t    if (this.xhr) {\n\t      this.xhr.onreadystatechange = this.xhr.onload = this.xhr.onerror = empty;\n\t      try {\n\t        this.xhr.abort();\n\t      } catch(e){}\n\t      this.xhr = null;\n\t    }\n\t  };\n\n\t  /**\n\t   * Webkit based browsers show a infinit spinner when you start a XHR request\n\t   * before the browsers onload event is called so we need to defer opening of\n\t   * the transport until the onload event is called. Wrapping the cb in our\n\t   * defer method solve this.\n\t   *\n\t   * @param {Socket} socket The socket instance that needs a transport\n\t   * @param {Function} fn The callback\n\t   * @api private\n\t   */\n\n\t  XHRPolling.prototype.ready = function (socket, fn) {\n\t    var self = this;\n\n\t    io.util.defer(function () {\n\t      fn.call(self);\n\t    });\n\t  };\n\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\n\t  io.transports.push('xhr-polling');\n\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\n\t(function (exports, io, global) {\n\t  /**\n\t   * There is a way to hide the loading indicator in Firefox. If you create and\n\t   * remove a iframe it will stop showing the current loading indicator.\n\t   * Unfortunately we can't feature detect that and UA sniffing is evil.\n\t   *\n\t   * @api private\n\t   */\n\n\t  var indicator = global.document && \"MozAppearance\" in\n\t    global.document.documentElement.style;\n\n\t  /**\n\t   * Expose constructor.\n\t   */\n\n\t  exports['jsonp-polling'] = JSONPPolling;\n\n\t  /**\n\t   * The JSONP transport creates an persistent connection by dynamically\n\t   * inserting a script tag in the page. This script tag will receive the\n\t   * information of the Socket.IO server. When new information is received\n\t   * it creates a new script tag for the new data stream.\n\t   *\n\t   * @constructor\n\t   * @extends {io.Transport.xhr-polling}\n\t   * @api public\n\t   */\n\n\t  function JSONPPolling (socket) {\n\t    io.Transport['xhr-polling'].apply(this, arguments);\n\n\t    this.index = io.j.length;\n\n\t    var self = this;\n\n\t    io.j.push(function (msg) {\n\t      self._(msg);\n\t    });\n\t  };\n\n\t  /**\n\t   * Inherits from XHR polling transport.\n\t   */\n\n\t  io.util.inherit(JSONPPolling, io.Transport['xhr-polling']);\n\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\n\t  JSONPPolling.prototype.name = 'jsonp-polling';\n\n\t  /**\n\t   * Posts a encoded message to the Socket.IO server using an iframe.\n\t   * The iframe is used because script tags can create POST based requests.\n\t   * The iframe is positioned outside of the view so the user does not\n\t   * notice it's existence.\n\t   *\n\t   * @param {String} data A encoded message.\n\t   * @api private\n\t   */\n\n\t  JSONPPolling.prototype.post = function (data) {\n\t    var self = this\n\t      , query = io.util.query(\n\t             this.socket.options.query\n\t          , 't='+ (+new Date) + '&i=' + this.index\n\t        );\n\n\t    if (!this.form) {\n\t      var form = document.createElement('form')\n\t        , area = document.createElement('textarea')\n\t        , id = this.iframeId = 'socketio_iframe_' + this.index\n\t        , iframe;\n\n\t      form.className = 'socketio';\n\t      form.style.position = 'absolute';\n\t      form.style.top = '0px';\n\t      form.style.left = '0px';\n\t      form.style.display = 'none';\n\t      form.target = id;\n\t      form.method = 'POST';\n\t      form.setAttribute('accept-charset', 'utf-8');\n\t      area.name = 'd';\n\t      form.appendChild(area);\n\t      document.body.appendChild(form);\n\n\t      this.form = form;\n\t      this.area = area;\n\t    }\n\n\t    this.form.action = this.prepareUrl() + query;\n\n\t    function complete () {\n\t      initIframe();\n\t      self.socket.setBuffer(false);\n\t    };\n\n\t    function initIframe () {\n\t      if (self.iframe) {\n\t        self.form.removeChild(self.iframe);\n\t      }\n\n\t      try {\n\t        // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n\t        iframe = document.createElement('<iframe name=\"'+ self.iframeId +'\">');\n\t      } catch (e) {\n\t        iframe = document.createElement('iframe');\n\t        iframe.name = self.iframeId;\n\t      }\n\n\t      iframe.id = self.iframeId;\n\n\t      self.form.appendChild(iframe);\n\t      self.iframe = iframe;\n\t    };\n\n\t    initIframe();\n\n\t    // we temporarily stringify until we figure out how to prevent\n\t    // browsers from turning `\\n` into `\\r\\n` in form inputs\n\t    this.area.value = io.JSON.stringify(data);\n\n\t    try {\n\t      this.form.submit();\n\t    } catch(e) {}\n\n\t    if (this.iframe.attachEvent) {\n\t      iframe.onreadystatechange = function () {\n\t        if (self.iframe.readyState == 'complete') {\n\t          complete();\n\t        }\n\t      };\n\t    } else {\n\t      this.iframe.onload = complete;\n\t    }\n\n\t    this.socket.setBuffer(true);\n\t  };\n\n\t  /**\n\t   * Creates a new JSONP poll that can be used to listen\n\t   * for messages from the Socket.IO server.\n\t   *\n\t   * @api private\n\t   */\n\n\t  JSONPPolling.prototype.get = function () {\n\t    var self = this\n\t      , script = document.createElement('script')\n\t      , query = io.util.query(\n\t             this.socket.options.query\n\t          , 't='+ (+new Date) + '&i=' + this.index\n\t        );\n\n\t    if (this.script) {\n\t      this.script.parentNode.removeChild(this.script);\n\t      this.script = null;\n\t    }\n\n\t    script.async = true;\n\t    script.src = this.prepareUrl() + query;\n\t    script.onerror = function () {\n\t      self.onClose();\n\t    };\n\n\t    var insertAt = document.getElementsByTagName('script')[0];\n\t    insertAt.parentNode.insertBefore(script, insertAt);\n\t    this.script = script;\n\n\t    if (indicator) {\n\t      setTimeout(function () {\n\t        var iframe = document.createElement('iframe');\n\t        document.body.appendChild(iframe);\n\t        document.body.removeChild(iframe);\n\t      }, 100);\n\t    }\n\t  };\n\n\t  /**\n\t   * Callback function for the incoming message stream from the Socket.IO server.\n\t   *\n\t   * @param {String} data The message\n\t   * @api private\n\t   */\n\n\t  JSONPPolling.prototype._ = function (msg) {\n\t    this.onData(msg);\n\t    if (this.isOpen) {\n\t      this.get();\n\t    }\n\t    return this;\n\t  };\n\n\t  /**\n\t   * The indicator hack only works after onload\n\t   *\n\t   * @param {Socket} socket The socket instance that needs a transport\n\t   * @param {Function} fn The callback\n\t   * @api private\n\t   */\n\n\t  JSONPPolling.prototype.ready = function (socket, fn) {\n\t    var self = this;\n\t    if (!indicator) return fn.call(this);\n\n\t    io.util.load(function () {\n\t      fn.call(self);\n\t    });\n\t  };\n\n\t  /**\n\t   * Checks if browser supports this transport.\n\t   *\n\t   * @return {Boolean}\n\t   * @api public\n\t   */\n\n\t  JSONPPolling.check = function () {\n\t    return 'document' in global;\n\t  };\n\n\t  /**\n\t   * Check if cross domain requests are supported\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\n\t  JSONPPolling.xdomainCheck = function () {\n\t    return true;\n\t  };\n\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\n\t  io.transports.push('jsonp-polling');\n\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\n\tif (true) {\n\t  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () { return io; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}\n\t})();\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(23)(module)))\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(24).nextTick;\n\tvar apply = Function.prototype.apply;\n\tvar slice = Array.prototype.slice;\n\tvar immediateIds = {};\n\tvar nextImmediateId = 0;\n\n\t// DOM APIs, for completeness\n\n\texports.setTimeout = function() {\n\t  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n\t};\n\texports.setInterval = function() {\n\t  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n\t};\n\texports.clearTimeout =\n\texports.clearInterval = function(timeout) { timeout.close(); };\n\n\tfunction Timeout(id, clearFn) {\n\t  this._id = id;\n\t  this._clearFn = clearFn;\n\t}\n\tTimeout.prototype.unref = Timeout.prototype.ref = function() {};\n\tTimeout.prototype.close = function() {\n\t  this._clearFn.call(window, this._id);\n\t};\n\n\t// Does not start the time, just sets up the members needed.\n\texports.enroll = function(item, msecs) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = msecs;\n\t};\n\n\texports.unenroll = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\t  item._idleTimeout = -1;\n\t};\n\n\texports._unrefActive = exports.active = function(item) {\n\t  clearTimeout(item._idleTimeoutId);\n\n\t  var msecs = item._idleTimeout;\n\t  if (msecs >= 0) {\n\t    item._idleTimeoutId = setTimeout(function onTimeout() {\n\t      if (item._onTimeout)\n\t        item._onTimeout();\n\t    }, msecs);\n\t  }\n\t};\n\n\t// That's not how node.js implements it but the exposed api is the same.\n\texports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n\t  var id = nextImmediateId++;\n\t  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n\t  immediateIds[id] = true;\n\n\t  nextTick(function onNextTick() {\n\t    if (immediateIds[id]) {\n\t      // fn.call() is faster so we optimize for the common use-case\n\t      // @see http://jsperf.com/call-apply-segu\n\t      if (args) {\n\t        fn.apply(null, args);\n\t      } else {\n\t        fn.call(null);\n\t      }\n\t      // Prevent ids from leaking\n\t      exports.clearImmediate(id);\n\t    }\n\t  });\n\n\t  return id;\n\t};\n\n\texports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n\t  delete immediateIds[id];\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22).setImmediate, __webpack_require__(22).clearImmediate))\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// shim for using process in browser\n\n\tvar process = module.exports = {};\n\tvar queue = [];\n\tvar draining = false;\n\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    draining = true;\n\t    var currentQueue;\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        var i = -1;\n\t        while (++i < len) {\n\t            currentQueue[i]();\n\t        }\n\t        len = queue.length;\n\t    }\n\t    draining = false;\n\t}\n\tprocess.nextTick = function (fun) {\n\t    queue.push(fun);\n\t    if (!draining) {\n\t        setTimeout(drainQueue, 0);\n\t    }\n\t};\n\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\n\tfunction noop() {}\n\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\n\t// TODO(shtylman)\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** respoke.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap a4afed6702f40f900abe\n **/","module.exports = require('./respoke/respoke');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0\n **/","\"use strict\";\n/*global Bugsnag: true*/\n/*jshint bitwise: false*/\n\n/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar log = require('loglevel');\nlog.setLevel('warn');\n\nvar Q = require('q');\nQ.longStackSupport = true;\nQ.stackJumpLimit = 5;\nQ.longStackJumpLimit = 20;\nQ.stopUnhandledRejectionTracking();\n\nrequire('./deps/adapter');\n\n/**\n * `respoke` is a global static class.\n *\n *\n * Include the [latest version](https://cdn.respoke.io/respoke.min.js) or\n * [choose a previous release](http://cdn.respoke.io/list.html).\n *\n * Or use `npm install --save respoke`.\n *\n * Interact with Respoke primarily via [`respoke.Client`](respoke.Client.html):\n *\n *      var client = respoke.createClient();\n *\n *\n * **Development mode without brokered auth**\n *\n *      var client = respoke.createClient({\n *          appId: \"XXXXXXX-my-app-id-XXXXXX\",\n *          developmentMode: true,\n *          endpointId: \"billy\"\n *      });\n *\n *      client.listen('connect', function () {\n *          console.log('connected to respoke!');\n *      });\n *\n *      client.listen('error', function (err) {\n *          console.error('Connection to Respoke failed.', err);\n *      });\n *\n *      client.connect();\n *\n *\n * **Production mode with brokered auth**\n *\n *      var client = respoke.createClient();\n *\n *      client.listen('connect', function () {\n *          console.log('connected to respoke!');\n *      });\n *\n *      client.listen('error', function (err) {\n *          console.error('Connection to Respoke failed.', err);\n *      });\n *\n *      // Respoke auth token obtained by your server.\n *      // This is how you control who can connect to Respoke app.\n *      // See API docs for POST [base]/tokens\n *      var tokenId = \"XXXX-XXXX-brokered-auth-token-XXXXX\";\n *\n *      // connect to respoke with the token\n *      client.connect({\n *          token: tokenId\n *      });\n *\n *      // fetch a new token from your server if it expires\n *      client.listen('disconnect', function (evt) {\n *          // fetch another token from your server.\n *          var newTokenId = \"XXXX-XXXX-brokered-auth-token2-XXXXX\";\n *          client.connect({\n *              token: newTokenId\n *          });\n *      });\n *\n *\n *\n * ### Event listeners vs callback handlers\n *\n * There are two ways to attach listeners. It is highly recommended that you choose one pattern\n * and stick to it throughout your app.\n *\n * For every `event-name`, there is a corresponding callback `onEventName`.\n *\n * **With a listener**\n *\n *      var client = respoke.createClient();\n *      client.listen('connect', function () { });\n *\n * **or with a callback**\n *\n *      var client = respoke.createClient({\n *          // other options go here\n *\n *          onConnect: function () { }\n *      });\n *\n *\n * @namespace respoke\n * @class respoke\n * @global\n * @link https://cdn.respoke.io/respoke.min.js\n */\nvar respoke = module.exports = {\n    buildNumber: 'NO BUILD NUMBER',\n    streams: []\n};\n\n/**\n * A map of respoke.Client instances available for use. This is useful if you would like to separate some\n * functionality of your app into a separate Respoke app which would require a separate appId.\n * @type {boolean}\n */\nrespoke.instances = {};\n\n/**\n * Indicate whether the user's browser is Chrome and requires the Respoke Chrome extension to do screen sharing.\n * @type {boolean}\n */\nrespoke.needsChromeExtension = !!(window.chrome && !window.opera && navigator.webkitGetUserMedia);\n\n/**\n * Indicate whether we are dealing with node-webkit\n * @type {boolean}\n */\nrespoke.isNwjs = (typeof process !== 'undefined');\n\n/**\n * Indicate whether the user has a Respoke Chrome extension installed and running correcty on this domain.\n * @type {boolean}\n */\nrespoke.hasChromeExtension = false;\n\n/**\n * Create an Event. This is used in the Chrome extension to communicate between the library and extension.\n * @private\n * @type {function}\n */\nrespoke.extEvent = function (type, data) {\n    var evt = document.createEvent(\"CustomEvent\");\n    evt.initCustomEvent(type, true, true, data);\n    return evt;\n};\n\n/**\n * `\"v0.0.0\"`\n *\n * The respoke.min.js version.\n *\n * Past versions can be found at [cdn.respoke.io/list.html](http://cdn.respoke.io/list.html)\n * @type {string}\n */\nrespoke.version = respoke.buildNumber + \"\";\n\nrespoke.EventEmitter = require('./event');\nrespoke.Client = require('./client');\nrespoke.Presentable = require('./presentable');\nrespoke.Connection = require('./connection');\nrespoke.Endpoint = require('./endpoint');\nrespoke.TextMessage = require('./textMessage');\nrespoke.SignalingMessage = require('./signalingMessage');\nrespoke.Group = require('./group');\nrespoke.SignalingChannel = require('./signalingChannel');\nrespoke.DirectConnection = require('./directConnection');\nrespoke.PeerConnection = require('./peerConnection');\nrespoke.CallState = require('./callState');\nrespoke.Call = require('./call');\nrespoke.LocalMedia = require('./localMedia');\nrespoke.RemoteMedia = require('./remoteMedia');\nrespoke.log = log;\nrespoke.Q = Q;\n\n/*\n * Get information from the Respoke Screen Sharing Chrome extension if it is installed.\n */\ndocument.addEventListener('respoke-available', function (evt) {\n    var data = evt.detail;\n    if (data.available !== true) {\n        return;\n    }\n\n    respoke.hasChromeExtension = true;\n    respoke.chooseDesktopMedia = function (callback) {\n        if (!callback) {\n            throw new Error(\"Can't choose desktop media without callback parameter.\");\n        }\n\n        function sourceIdListener(evt) {\n            var data = evt.detail;\n\n            respoke.screenSourceId = data.sourceId;\n            callback(data);\n            document.removeEventListener(\"respoke-source-id\", sourceIdListener);\n        }\n\n        document.dispatchEvent(respoke.extEvent('ct-respoke-source-id'));\n        document.addEventListener(\"respoke-source-id\", sourceIdListener);\n    };\n\n    respoke.log.info(\"Respoke Screen Share Chrome extension available for use.\");\n});\n\nif (!window.skipErrorReporting) {\n    // Use airbrake.\n    var airbrake = document.createElement('script');\n    var first = document.getElementsByTagName('script')[0];\n    first.parentNode.insertBefore(airbrake, first);\n\n    airbrake.src = \"https://ssljscdn.airbrake.io/0.3/airbrake.min.js\";\n    airbrake.setAttribute('data-airbrake-project-id', '98133');\n    airbrake.setAttribute('data-airbrake-project-key', 'cd3e085acc5e554658ebcdabd112a6f4');\n    airbrake.setAttribute('data-airbrake-project-environment-name', 'production');\n\n    airbrake.onload = function () {\n        window.onerror = function (message, file, line) {\n            //Only send errors from the respoke.js file to Airbrake\n            if (file.match(/respoke/) && !window.skipErrorReporting) {\n                Airbrake.push({error: {message: message, fileName: file, lineNumber: line}});\n            }\n        };\n    };\n}\n\n/**\n * This is one of two possible entry points for interating with the library.\n *\n * This method creates a new Client object\n * which represents your user's connection to your Respoke app.\n *\n * This method **automatically calls client.connect(params)** after the client is created.\n *\n * @static\n * @memberof respoke\n * @param {object} params Parameters to the respoke.Client constructor.\n * @param {string} [params.appId]\n * @param {string} [params.baseURL]\n * @param {string} [params.token]\n * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n * operation and will limit the services you will be able to use.\n * @param {boolean} [params.reconnect=false] - Whether or not to automatically reconnect to the Respoke service\n * when a disconnect occurs.\n * @param {function} [params.onSuccess] - Success handler for this invocation of this method only.\n * @param {function} [params.onError] - Error handler for this invocation of this method only.\n * @param {function} [params.onJoin] - Callback for when this client's endpoint joins a group.\n * @param {function} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n * @param {function} [params.onMessage] - Callback for when any message is received from anywhere on the system.\n * @param {function} [params.onDisconnect] - Callback for Client disconnect.\n * @param {function} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n * @param {function} [params.onCall] - Callback for when this client's user receives a call.\n * @param {function} [params.onDirectConnection] - Callback for when this client's user receives a request for a\n * direct connection.\n * @param {boolean} [params.enableCallDebugReport=true] - Optional flag defaulting to true which allows sending\n * debugging information.\n * @returns {respoke.Client}\n */\nrespoke.connect = function (params) {\n    var client = respoke.Client(params);\n    client.connect(params);\n    return client;\n};\n\n/**\n * This method will be overridden in the case that an extension or plugin is available for screen sharing.\n *\n * @static\n * @private\n * @memberof respoke\n */\nrespoke.chooseDesktopMedia = function () {\n    log.warn(\"Screen sharing is not implemented for this browser.\");\n};\n\n/**\n * Getter for the respoke client.\n *\n * You can have more than one active client, so this method provides a way to retrieve a specific instance.\n *\n * @static\n * @memberof respoke\n * @param {number} id The Client ID.\n * @returns {respoke.Client}\n */\nrespoke.getClient = function (id) {\n    if (id === undefined) {\n        log.debug(\"Can't call getClient with no client ID.\", new Error().stack);\n    }\n    if (!respoke.instances[id]) {\n        log.debug(\"No client instance with id\", id);\n    }\n    return respoke.instances[id];\n};\n\n/**\n * This is one of two possible entry points for interating with the library.\n *\n * This method creates a new Client object which represents your user's connection to your Respoke app.\n *\n * It **does NOT automatically call the client.connect() method** after the client is created.\n *\n * The `params` argument is the same as `respoke.connect(params)`.\n *\n * @static\n * @memberof respoke\n * @param {object} params Parameters to respoke.Client - same as respoke.connect()\n * @returns {respoke.Client}\n */\nrespoke.createClient = function (params) {\n    var client;\n    params = params || {};\n    if (params.instanceId) {\n        client = respoke.getClient(params.instanceId);\n        if (client) {\n            return client;\n        }\n    }\n    return respoke.Client(params);\n};\n\n/**\n * Build a closure from a listener that will ensure the listener can only be called once.\n * @static\n * @private\n * @memberof respoke\n * @param {function} func\n * @return {function}\n */\nrespoke.once = function (func) {\n    return (function () {\n        var called = false;\n        return function () {\n            if (called === false) {\n                func.apply(null, arguments);\n                called = true;\n            }\n        };\n    })();\n};\n\n/**\n * @static\n * @private\n * @memberof respoke\n * @returns {number}\n */\nrespoke.makeGUID = function () {\n    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n    var uuid = new Array(36);\n    var rnd = 0;\n    var r;\n    for (var i = 0; i < 36; i += 1) {\n        if (i === 8 || i === 13 ||  i === 18 || i === 23) {\n            uuid[i] = '-';\n        } else if (i === 14) {\n            uuid[i] = '4';\n        } else {\n            if (rnd <= 0x02) {\n                rnd = 0x2000000 + (Math.random() * 0x1000000) | 0;\n            }\n            r = rnd & 0xf;\n            rnd = rnd >> 4;\n            uuid[i] = chars[(i === 19) ? (r & 0x3) | 0x8 : r];\n        }\n    }\n    return uuid.join('');\n};\n\n/**\n * This method is used internally to attach handlers to promises that are returned by many methods in the library.\n * It's not recommended that this method be used by developers and apps.\n * @private\n * @static\n * @memberof respoke\n * @param {Promise} promise\n * @param {function} onSuccess\n * @param {function} onError\n * @returns {Promise|undefined}\n */\nrespoke.handlePromise = function (promise, onSuccess, onError) {\n    var returnUndef = false;\n    if (onSuccess || onError) {\n        returnUndef = true;\n    }\n\n    onSuccess = typeof onSuccess === 'function' ? onSuccess : function () {};\n    onError = typeof onError === 'function' ? onError : function () {};\n    promise.done(onSuccess, onError);\n    return (returnUndef ? undefined : promise);\n};\n\n/**\n * Empty base class. Use params.that (if exists) for the base object, but delete it from the instance.  Copy all\n * params that were passed in onto the base object. Add the class name.\n * @class respoke.Class\n * @classdesc Empty base class.\n * @constructor\n * @private\n */\nrespoke.Class = function (params) {\n    params = params || {};\n    var that = params.that || {};\n    var client = params.client;\n\n    that.className = 'respoke.Class';\n    delete params.that;\n    delete that.client;\n\n    Object.keys(params).forEach(function copyParam(name) {\n        that[name] = params[name];\n    });\n\n    return that;\n}; // end of respoke.Class\n\n/**\n * Does the browser support `UserMedia`?\n * @static\n * @memberof respoke\n * @returns {boolean}\n */\nrespoke.hasUserMedia = function () {\n    return (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia) instanceof Function;\n};\n\n/**\n * Does the browser support `RTCPeerConnection`?\n * @static\n * @memberof respoke\n * @returns {boolean}\n */\nrespoke.hasRTCPeerConnection = function () {\n    return (window.RTCPeerConnection || window.webkitRTCPeerConnection ||\n            window.mozRTCPeerConnection) instanceof Function;\n};\n\n/**\n * Does the browser support `WebSocket`?\n * @static\n * @memberof respoke\n * @returns {boolean}\n */\nrespoke.hasWebsocket = function () {\n    return (window.WebSocket || window.webkitWebSocket || window.MozWebSocket) instanceof Function;\n};\n\n/**\n * Clone an object.\n * @static\n * @memberof respoke\n * @private\n * @param {Object} source - The object to clone\n * @returns {Object}\n */\nrespoke.clone = function (source) {\n    if (source) {\n        return JSON.parse(JSON.stringify(source));\n    }\n    return source;\n};\n\n/**\n * Compares two objects for equality\n * @static\n * @memberof respoke\n * @private\n * @param {Object} a\n * @param {Object} b\n * @returns {boolean}\n */\nrespoke.isEqual = function (a, b) {\n    var aKeys;\n\n    //check if arrays\n    if (a && b && a.hasOwnProperty('length') && b.hasOwnProperty('length') && a.splice && b.splice) {\n        if (a.length !== b.length) {\n            //short circuit if arrays are different length\n            return false;\n        }\n\n        for (var i = 0; i < a.length; i += 1) {\n            if (!respoke.isEqual(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    if (typeof a === 'object' && typeof b === 'object' && Object.keys(a).length === Object.keys(b).length) {\n        aKeys = Object.keys(a);\n        for (var i = 0; i < aKeys.length; i += 1) {\n            if (!respoke.isEqual(a[aKeys[i]], b[aKeys[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    return a === b;\n};\n\n/*\n * Does the sdp indicate an audio stream?\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {boolean}\n */\nrespoke.sdpHasAudio = function (sdp) {\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasAudio called with no parameters.\");\n    }\n    return (sdp.indexOf('m=audio') !== -1 && sdp.indexOf('a=recvonly') === -1);\n};\n\n/**\n * Does the sdp indicate a video stream?\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {boolean}\n */\nrespoke.sdpHasVideo = function (sdp) {\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasVideo called with no parameters.\");\n    }\n    return (sdp.indexOf('m=video') !== -1 && sdp.indexOf('a=recvonly') === -1);\n};\n\n/**\n * Does the sdp indicate a data channel?\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {boolean}\n */\nrespoke.sdpHasDataChannel = function (sdp) {\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasDataChannel called with no parameters.\");\n    }\n    return sdp.indexOf('m=application') !== -1;\n};\n\n/**\n * Does the sdp indicate the creator is sendOnly?\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {boolean}\n */\nrespoke.sdpHasSendOnly = function (sdp) {\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasSendOnly called with no parameters.\");\n    }\n    return sdp.indexOf('a=sendonly') !== -1;\n};\n\n/**\n * Does the sdp indicate the creator is receiveOnly?\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {boolean}\n */\nrespoke.sdpHasReceiveOnly = function (sdp) {\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasReceiveOnly called with no parameters.\");\n    }\n    return sdp.indexOf('a=recvonly') !== -1;\n};\n\n/**\n * Do the constraints indicate an audio stream?\n * @static\n * @memberof respoke\n * @params {RTCConstraints}\n * @returns {boolean}\n */\nrespoke.constraintsHasAudio = function (constraints) {\n    if (!constraints) {\n        throw new Error(\"respoke.constraintsHasAudio called with no parameters.\");\n    }\n    return (constraints.audio === true);\n};\n\n/**\n * Does the constraints indicate a video stream?\n * @static\n * @memberof respoke\n * @params {RTCConstraints}\n * @returns {boolean}\n */\nrespoke.constraintsHasVideo = function (constraints) {\n    if (!constraints) {\n        throw new Error(\"respoke.constraintsHasVideo called with no parameters.\");\n    }\n    return (constraints.video === true || typeof constraints.video === 'object');\n};\n\n/**\n * Does the constraints indicate a screenshare?\n * @static\n * @memberof respoke\n * @params {RTCConstraints}\n * @returns {boolean}\n */\nrespoke.constraintsHasScreenShare = function (constraints) {\n    if (!constraints) {\n        throw new Error(\"respoke.constraintsHasScreenShare called with no parameters.\");\n    }\n\n    return (constraints.video && constraints.video.mandatory &&\n            (constraints.video.mandatory.chromeMediaSource || constraints.video.mediaSource));\n};\n\n/**\n * Convert old-style constraints parameter into a constraints array.\n * @static\n * @memberof respoke\n * @params {Array<RTCConstraints>|RTCConstraints} [constraints]\n * @params {Array<RTCConstraints>} [defaults]\n * @returns {Array<RTCConstraints>}\n */\nrespoke.convertConstraints = function (constraints, defaults) {\n    constraints = constraints || [];\n    defaults = defaults || [];\n\n    if (!constraints.splice) {\n        if (typeof constraints === 'object') {\n            constraints = [constraints];\n        } else {\n            constraints = [];\n        }\n    }\n\n    if (constraints.length === 0 && defaults.length > 0) {\n        return defaults;\n    }\n\n    return constraints;\n};\n\n/**\n * Queue items until a trigger is called, then process them all with an action. Before trigger, hold items for\n * processing. After trigger, process new items immediately.\n * @static\n * @memberof respoke\n * @returns {Array}\n * @private\n */\nrespoke.queueFactory = function () {\n    \"use strict\";\n    var queue = [];\n    /**\n     * @param {function} action - the action to perform on each item. Thrown errors will be caught and logged.\n     */\n    queue.trigger = function (action) {\n        if (!action) {\n            throw new Error(\"Trigger function requires an action parameter.\");\n        }\n\n        function safeAction(item) {\n            try {\n                action(item);\n            } catch (err) {\n                log.error(\"Error calling queue action.\", err);\n            }\n        }\n        queue.forEach(safeAction);\n        queue.length = 0;\n        queue.push = safeAction;\n    };\n\n    return queue;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/respoke.js\n ** module id = 1\n ** module chunks = 0\n **/","/*!\n *  Copyright (c) 2014 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the same directory as\n *  this source file.\n * @ignore\n */\n\n/* More information about these options at jshint.com/docs/options */\n\n/* jshint browser: true, camelcase: true, curly: true, devel: true,\neqeqeq: true, forin: false, globalstrict: true, quotmark: single,\nundef: true, unused: strict */\n\n/* global mozRTCIceCandidate, mozRTCPeerConnection,\nmozRTCSessionDescription, webkitRTCPeerConnection */\n\n/* exported trace */\n\n'use strict';\n\nvar RTCPeerConnection = null;\nvar getUserMedia = null;\nvar attachMediaStream = null;\nvar reattachMediaStream = null;\nvar webrtcDetectedBrowser = null;\nvar webrtcDetectedVersion = null;\n\nfunction trace(text) {\n  // This function is used for logging.\n  if (text[text.length - 1] === '\\n') {\n    text = text.substring(0, text.length - 1);\n  }\n  console.log((window.performance.now() / 1000).toFixed(3) + ': ' + text);\n}\n\nfunction maybeFixConfiguration(pcConfig) {\n  if (!pcConfig) {\n    return;\n  }\n  for (var i = 0; i < pcConfig.iceServers.length; i++) {\n    if (pcConfig.iceServers[i].hasOwnProperty('urls')) {\n      pcConfig.iceServers[i].url = pcConfig.iceServers[i].urls;\n      delete pcConfig.iceServers[i].urls;\n    }\n  }\n}\n\nif (navigator.mozGetUserMedia) {\n  console.log('This appears to be Firefox');\n\n  webrtcDetectedBrowser = 'firefox';\n\n  webrtcDetectedVersion =\n    parseInt(navigator.userAgent.match(/Firefox\\/([0-9]+)\\./)[1], 10);\n\n  // The RTCPeerConnection object.\n  RTCPeerConnection = function(pcConfig, pcConstraints) {\n    // .urls is not supported in FF yet.\n    maybeFixConfiguration(pcConfig);\n    return new mozRTCPeerConnection(pcConfig, pcConstraints);\n  };\n\n  // The RTCSessionDescription object.\n  window.RTCSessionDescription = mozRTCSessionDescription;\n\n  // The RTCIceCandidate object.\n  window.RTCIceCandidate = mozRTCIceCandidate;\n\n  // getUserMedia shim (only difference is the prefix).\n  // Code from Adam Barth.\n  getUserMedia = navigator.mozGetUserMedia.bind(navigator);\n  navigator.getUserMedia = getUserMedia;\n\n  // Creates ICE server from the URL for FF.\n  window.createIceServer = function(url, username, password) {\n    var iceServer = null;\n    var urlParts = url.split(':');\n    if (urlParts[0].indexOf('stun') === 0) {\n      // Create ICE server with STUN URL.\n      iceServer = {\n        'url': url\n      };\n    } else if (urlParts[0].indexOf('turn') === 0) {\n      if (webrtcDetectedVersion < 27) {\n        // Create iceServer with turn url.\n        // Ignore the transport parameter from TURN url for FF version <=27.\n        var turnUrlParts = url.split('?');\n        // Return null for createIceServer if transport=tcp.\n        if (turnUrlParts.length === 1 ||\n          turnUrlParts[1].indexOf('transport=udp') === 0) {\n          iceServer = {\n            'url': turnUrlParts[0],\n            'credential': password,\n            'username': username\n          };\n        }\n      } else {\n        // FF 27 and above supports transport parameters in TURN url,\n        // So passing in the full url to create iceServer.\n        iceServer = {\n          'url': url,\n          'credential': password,\n          'username': username\n        };\n      }\n    }\n    return iceServer;\n  };\n\n  window.createIceServers = function(urls, username, password) {\n    var iceServers = [];\n    // Use .url for FireFox.\n    for (var i = 0; i < urls.length; i++) {\n      var iceServer =\n        window.createIceServer(urls[i], username, password);\n      if (iceServer !== null) {\n        iceServers.push(iceServer);\n      }\n    }\n    return iceServers;\n  };\n\n  // Attach a media stream to an element.\n  attachMediaStream = function(element, stream) {\n    //console.log('Attaching media stream');\n    element.mozSrcObject = stream;\n    setTimeout(function () {\n      element.play();\n    }, 100);\n  };\n\n  reattachMediaStream = function(to, from) {\n    //console.log('Reattaching media stream');\n    to.mozSrcObject = from.mozSrcObject;\n  };\n\n} else if (navigator.webkitGetUserMedia) {\n  console.log('This appears to be Chrome');\n\n  webrtcDetectedBrowser = 'chrome';\n  // Temporary fix until crbug/374263 is fixed.\n  // Setting Chrome version to 999, if version is unavailable.\n  var result = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n  if (result !== null) {\n    webrtcDetectedVersion = parseInt(result[2], 10);\n  } else {\n    webrtcDetectedVersion = 999;\n  }\n\n  // Creates iceServer from the url for Chrome M33 and earlier.\n  window.createIceServer = function(url, username, password) {\n    var iceServer = null;\n    var urlParts = url.split(':');\n    if (urlParts[0].indexOf('stun') === 0) {\n      // Create iceServer with stun url.\n      iceServer = {\n        'url': url\n      };\n    } else if (urlParts[0].indexOf('turn') === 0) {\n      // Chrome M28 & above uses below TURN format.\n      iceServer = {\n        'url': url,\n        'credential': password,\n        'username': username\n      };\n    }\n    return iceServer;\n  };\n\n  // Creates iceServers from the urls for Chrome M34 and above.\n  window.createIceServers = function(urls, username, password) {\n    var iceServers = [];\n    if (webrtcDetectedVersion >= 34) {\n      // .urls is supported since Chrome M34.\n      iceServers = {\n        'urls': urls,\n        'credential': password,\n        'username': username\n      };\n    } else {\n      for (var i = 0; i < urls.length; i++) {\n        var iceServer =\n          window.createIceServer(urls[i], username, password);\n        if (iceServer !== null) {\n          iceServers.push(iceServer);\n        }\n      }\n    }\n    return iceServers;\n  };\n\n  // The RTCPeerConnection object.\n  RTCPeerConnection = function(pcConfig, pcConstraints) {\n    // .urls is supported since Chrome M34.\n    if (webrtcDetectedVersion < 34) {\n      maybeFixConfiguration(pcConfig);\n    }\n    return new webkitRTCPeerConnection(pcConfig, pcConstraints);\n  };\n\n  // Get UserMedia (only difference is the prefix).\n  // Code from Adam Barth.\n  getUserMedia = navigator.webkitGetUserMedia.bind(navigator);\n  navigator.getUserMedia = getUserMedia;\n\n  // Attach a media stream to an element.\n  attachMediaStream = function(element, stream) {\n    if (typeof element.srcObject !== 'undefined') {\n      element.srcObject = stream;\n    } else if (typeof element.mozSrcObject !== 'undefined') {\n      element.mozSrcObject = stream;\n    } else if (typeof element.src !== 'undefined') {\n      element.src = URL.createObjectURL(stream);\n    } else {\n      console.log('Error attaching stream to element.');\n    }\n  };\n\n  reattachMediaStream = function(to, from) {\n    to.src = from.src;\n  };\n} else {\n  console.log('Browser does not appear to be WebRTC-capable');\n}\n\n\nwindow.RTCPeerConnection = RTCPeerConnection;\nwindow.getUserMedia = getUserMedia;\nwindow.attachMediaStream = attachMediaStream;\nwindow.reattachMediaStream = reattachMediaStream;\nwindow.webrtcDetectedBrowser = webrtcDetectedBrowser;\nwindow.webrtcDetectedVersion = webrtcDetectedVersion;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/deps/adapter.js\n ** module id = 2\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar respoke = require('./respoke');\nvar log = require('loglevel');\n\n/**\n * A generic class for emitting and listening to events. This is used internally by respoke.js\n * to provide evented behavior. You can add custom events and inherit your own objects from\n * the EventEmitter.\n *\n * ```\n * // Adding a custom event to a respoke.Client instance\n * client.listen('my-event', function (evt) { });\n * client.fire('my-event', { name: 'my-event', asdf: 'jkl' });\n * ```\n *\n * ```\n * // Custom EventEmitter\n * var MyCustomEmitter = respoke.EventEmitter();\n * var emitterInstance = MyCustomEmitter();\n * emitterInstance.fire('hi', { name: 'hi', message: 'hello' });\n * emitterInstance.listen('hi', function (evt) { });\n * ```\n *\n * @class respoke.EventEmitter\n * @inherits respoke.Class\n * @constructor\n * @param {object} params\n * @param {string} params.instanceId\n * @returns {respoke.EventEmitter}\n */\nvar EventEmitter = module.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = respoke.Class(params);\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.EventEmitter\n     * @name className\n     * @type {string}\n     * @private\n     */\n    that.className = 'respoke.EventEmitter';\n\n    /**\n     * @memberof! respoke.EventEmitter\n     * @name eventList\n     * @private\n     * @type {object}\n     */\n    var eventList = {};\n\n    /**\n     * Add a listener that will only be called once to an object.  This method adds the given listener to the given\n     * event in the case that the same\n     * listener is not already registered to this event and the listener is a function.  The third argument 'isInternal'\n     * is used only internally by the library to indicate that this listener is a library-used listener and should not\n     * count when we are trying to determine if an event has listeners placed by the developer.\n     *\n     *     client.once('connect', function (evt) {\n     *         console.log(\"This is the first time we connected.\");\n     *     });\n     *\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.listen\n     * @param {string} eventType - A developer-specified string identifying the event.\n     * @param {respoke.EventEmitter.eventListener} listener - A function to call when the event is fire.\n     * @param {boolean} [isInternal] - A flag to indicate this listener was added by the library. This parameter should\n     * not be used by developers who are using the library, only by developers who are working on the library itself.\n     */\n    that.once = function (eventType, listener, isInternal) {\n        var string = listener.toString();\n        listener = respoke.once(listener);\n        listener.toString = function () { return string; };\n        listener.once = true;\n        that.listen(eventType, listener, isInternal);\n    };\n\n    /**\n     * Add a `listener` function to an object.\n     *\n     * This method adds the `listener` to the event `eventName`.\n     *\n     * If an identical listener already registered to this event, it will **not** be added.\n     *\n     * ##### Example of adding an event listener.\n     *\n     *     client.listen('connect', function (evt) {\n     *         console.log(\"We've connected!\", evt);\n     *     });\n     *\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.listen\n     * @param {string} eventType - The name of the event.\n     * @param {respoke.EventEmitter.eventListener} listener - A function to call when the event is\n     * fired.\n     * @arg {boolean} isInternal - Internal use only. A flag to indicate this listener was\n     * added by the library. This parameter should not be used by developers who are using\n     * the library, only by developers who are working on the library itself.\n     */\n    that.listen = function (eventType, listener, isInternal) {\n        if (listener === undefined) {\n            return;\n        }\n        var invalidEventType = typeof eventType !== 'string' || !eventType;\n        var invalidListener = typeof listener !== 'function';\n        if (invalidEventType || invalidListener) {\n            log.error(\"Invalid request to add event listener to\", eventType, listener);\n            return;\n        }\n\n        eventList[eventType] = eventList[eventType] || [];\n        listener.isInternal = !!isInternal; // boolify\n\n        var toString = function (fn) {\n            return fn.toString();\n        };\n        var isNotAlreadyAdded = eventList[eventType].map(toString).indexOf(listener.toString()) === -1;\n\n        if (isNotAlreadyAdded) {\n            eventList[eventType].push(listener);\n        } else {\n            log.warn(\"Not adding duplicate listener to\", eventType, listener);\n        }\n    };\n\n    /**\n     * Remove a listener from an object. If no eventType is specified, all eventTypes will be\n     * cleared. If an eventType is specified but no listener is specified, all listeners will be\n     * removed from the specified eventType.  If a listener is also specified, only that listener\n     * will be removed.\n     *\n     *     client.ignore('connect', connectHandler);\n     *\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.ignore\n     * @param {string} [eventType] - An optional developer-specified string identifying the event.\n     * @param {function} [listener] - An optional function to remove from the specified event.\n     */\n    that.ignore = function (eventType, listener) {\n        // Remove all events from this object\n        if (eventType === undefined) {\n            eventList = {};\n            return;\n        }\n\n        // Remove all listeners from this event.\n        if (listener === undefined || !eventList[eventType]) {\n            eventList[eventType] = [];\n            return;\n        }\n\n        // Remove only one listener from this event.\n        for (var i = eventList[eventType].length - 1; i >= 0; i -= 1) {\n            if (listener === eventList[eventType][i]) {\n                eventList[eventType].splice(i, 1);\n                return;\n            }\n        }\n    };\n\n    /**\n     * Trigger an event on an object. All listeners for the specified eventType will be called.\n     * Listeners will be bound to the object ('this' will refer to the object), and additional\n     * arguments to fire() will be passed into each listener.\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.fire\n     * @param {string} eventType - A developer-specified string identifying the event to fire.\n     * @param {string|number|object|array} evt - Any number of optional parameters to be passed to\n     * the listener\n     * @private\n     */\n    that.fire = function (eventType, evt) {\n        var args = null;\n        var count = 0;\n        var toRemove = [];\n\n        evt = evt || {};\n        evt.name = eventType;\n        evt.target = that;\n\n        if (!eventType) {\n            return;\n        }\n\n        if (!eventList[eventType]) {\n            log.debug(\"fired \" + that.className + \"#\" + eventType + \" 0 listeners called with params\", evt);\n            return;\n        }\n\n        for (var i = 0; i < eventList[eventType].length; i += 1) {\n            var listener = eventList[eventType][i];\n            if (typeof listener === 'function') {\n                setTimeout(listenerBuilder(listener, evt, eventType));\n\n                count += 1;\n                if (listener.once === true) {\n                    toRemove.push(i);\n                }\n            }\n        }\n\n        for (var i = (toRemove.length - 1); i >= 0; i -= 1) {\n            eventList[eventType].splice(toRemove[i], 1);\n        }\n\n        log.debug(\"fired \" + that.className + \"#\" + eventType + \" \" + count + \" listeners called with params\", evt);\n    };\n\n    function listenerBuilder(listener, evt, eventType) {\n        return function () {\n            try {\n                listener.call(that, evt);\n            } catch (e) {\n                log.error('Error in ' + that.className + \"#\" + eventType, e.message, e.stack);\n            }\n        };\n    }\n\n    /**\n     * Determine if an object has had any listeners registered for a given event outside the library. This method\n     * checks for the isInternal flag on each listener and doesn't count it toward an event being listened to. This\n     * method is used in the library to handle situations where an action is needed if an event won't be acted on.\n     * For instance, if a call comes in for the logged-in user, but the developer isn't listening to\n     * {respoke.Client#call}, we'll need to reject the call immediately.\n     *\n     *     if (client.hasListeners('call')) {\n     *         // already handled!\n     *     }\n     *\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.hasListeners\n     * @param {string} eventType - The name of the event\n     * @returns {boolean} Whether this event has any listeners that are external to this library.\n     */\n    that.hasListeners = function (eventType) {\n        if (eventType === undefined) {\n            throw new Error(\"Missing required parameter event type.\");\n        }\n\n        if (!eventList[eventType]) {\n            return false;\n        }\n\n        return !eventList[eventType].every(function eachListener(listener) {\n            return listener.isInternal;\n        });\n    };\n\n    return that;\n}; // End respoke.EventEmitter\n/**\n * @callback respoke.EventEmitter.eventListener\n * @param {respoke.Event} evt\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/event.js\n ** module id = 3\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar log = require('loglevel');\nvar Q = require('q');\nvar respoke = require('./respoke');\n\n/**\n * `respoke.Client` is the top-level interface to the API. Interacting with Respoke should be done using\n * a `respoke.Client` instance.\n *\n * There are two ways to get a client:\n *\n *      var client = respoke.createClient(clientParams);\n *      // . . . set stuff up, then . . .\n *      client.connect(connectParams);\n *\n * or\n *\n *      // creates client and connects to Respoke all at once\n *      var client = respoke.connect(allParams);\n *\n * A client does the following things:\n *\n * 1. authentication with the Respoke API\n * 1. receives server-side app-specific information\n * 1. tracks connections and presence\n * 1. provides methods to get and interact with tracked entities (like groups and endpoints)\n * 1. stores default settings for calls and direct connections\n * 1. automatically reconnects to the API when network activity is lost*\n *\n * *If `developmentMode` is set to true. If not using `developmentMode`, disable automatic\n * reconnect by sending `reconnect: false` and listening to the Client's disconnect event\n * to fetch a new brokered auth token, then call `client.connect()` with the new token.\n *\n * @class respoke.Client\n * @constructor\n * @augments respoke.Presentable\n * @param {object} params\n * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n * respoke.connect, respoke.createClient, or to client.connect.\n * @param {string} [params.token] - The endpoint's authentication token.\n * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n * endpoint. This is only used when `developmentMode` is set to `true`.\n * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n * operation and will limit the services you will be able to use.\n * @param {string|number|object|Array} [params.presence=unavailable] The initial presence to set once connected.\n * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n * when a disconnect occurs.\n * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is received\n * from anywhere on the system.\n * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect.\n * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client's user receives a call.\n * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this client's user\n * receives a request for a direct connection.\n * @returns {respoke.Client}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Client\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId || respoke.makeGUID();\n    params.instanceId = instanceId;\n    var that = respoke.Presentable(params);\n    respoke.instances[instanceId] = that;\n    delete that.instanceId;\n    that.connectTries = 0;\n    /**\n     * A name to identify this class\n     * @memberof! respoke.Client\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Client';\n    /**\n     * @memberof! respoke.Client\n     * @name host\n     * @type {string}\n     * @private\n     */\n    var host = window.location.hostname;\n    /**\n     * @memberof! respoke.Client\n     * @name port\n     * @type {number}\n     * @private\n     */\n    var port = window.location.port;\n    /**\n     * A simple POJO to store some methods we will want to override but reference later.\n     * @memberof! respoke.Client\n     * @name superClass\n     * @private\n     * @type {object}\n     */\n    var superClass = {\n        setPresence: that.setPresence\n    };\n    /**\n     * A container for baseURL, token, and appId so they won't be accidentally viewable in any JavaScript debugger.\n     * @memberof! respoke.Client\n     * @name clientSettings\n     * @type {object}\n     * @private\n     * @property {string} [baseURL] - the URL of the cloud infrastructure's REST API.\n     * @property {string} [token] - The endpoint's authentication token.\n     * @property {string} [appId] - The id of your Respoke app.\n     * @property {string} [endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @property {boolean} [developmentMode=false] - Indication to obtain an authentication token from the service.\n     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n     * operation and will limit the services you will be able to use.\n     * @property {boolean} [reconnect=false] - Whether or not to automatically reconnect to the Respoke service\n     * when a disconnect occurs.\n     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n     * @property {respoke.Client.onClientMessage} [onMessage] - Callback for when any message is received\n     * from anywhere on the system.\n     * @property {respoke.Client.onConnect} [onConnect] - Callback for Client connect.\n     * @property {respoke.Client.onDisconnect} [onDisconnect] - Callback for Client disconnect.\n     * @property {respoke.Client.onReconnect} [onReconnect] - Callback for Client reconnect. Not Implemented.\n     * @property {respoke.Client.onCall} [onCall] - Callback for when this client receives a call.\n     * @property {respoke.Client.onDirectConnection} [onDirectConnection] - Callback for when this client\n     * receives a request for a direct connection.\n     * @property {boolean} enableCallDebugReport=true - Upon finishing a call, should the client send debugging\n     * information to the API? Defaults to `true`.\n     */\n    var clientSettings = {};\n\n    delete that.appId;\n    delete that.baseURL;\n    delete that.developmentMode;\n    delete that.token;\n    delete that.resolveEndpointPresence;\n\n    /**\n     * Internal list of known groups.\n     * @memberof! respoke.Client\n     * @name groups\n     * @type {Array<respoke.Group>}\n     * @private\n     */\n    var groups = [];\n    /**\n     * Internal list of known endpoints.\n     * @memberof! respoke.Client\n     * @name endpoints\n     * @type {Array<respoke.Endpoint>}\n     * @private\n     */\n    var endpoints = [];\n    /**\n     * Array of calls in progress, made accessible for informational purposes only.\n     * **Never modify this array directly.**\n     *\n     * @memberof! respoke.Client\n     * @name calls\n     * @type {array}\n     */\n    that.calls = [];\n    log.debug(\"Client ID is \", instanceId);\n\n    /**\n     * @memberof! respoke.Client\n     * @name signalingChannel\n     * @type {respoke.SignalingChannel}\n     * @private\n     */\n    var signalingChannel = respoke.SignalingChannel({\n        instanceId: instanceId,\n        clientSettings: clientSettings\n    });\n\n    /**\n     * Save parameters of the constructor or client.connect() onto the clientSettings object\n     * @memberof! respoke.Client\n     * @method respoke.saveParameters\n     * @param {object} params\n     * @param {respoke.Client.connectSuccessHandler} [params.onSuccess] - Success handler for this invocation\n     * of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n     * respoke.connect, respoke.createClient, or to client.connect.\n     * @param {string} [params.token] - The endpoint's authentication token.\n     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n     * @param {respoke.client.resolveEndpointPresence} [params.resolveEndpointPresence] An optional function for\n     * resolving presence for an endpoint.  An endpoint can have multiple Connections this function will be used\n     * to decide which Connection's presence gets precedence for the Endpoint.\n     * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n     * operation and will limit the services you will be able to use.\n     * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n     * when a disconnect occurs.\n     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves\n     * a group.\n     * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is\n     * received from anywhere on the system.\n     * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n     * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n     * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n     * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client receives a call.\n     * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this\n     * client receives a request for a direct connection.\n     * @private\n     */\n    function saveParameters(params) {\n        Object.keys(params).forEach(function eachParam(key) {\n            if (['onSuccess', 'onError', 'reconnect'].indexOf(key) === -1 && params[key] !== undefined) {\n                clientSettings[key] = params[key];\n            }\n        });\n\n        clientSettings.developmentMode = !!clientSettings.developmentMode;\n        clientSettings.enableCallDebugReport = typeof clientSettings.enableCallDebugReport === 'boolean' ?\n            clientSettings.enableCallDebugReport : true;\n\n        if (typeof params.reconnect !== 'boolean') {\n            clientSettings.reconnect = typeof clientSettings.developmentMode === 'boolean' ? clientSettings.developmentMode : false;\n        } else {\n            clientSettings.reconnect = !!params.reconnect;\n        }\n    }\n    saveParameters(params);\n\n    /**\n     * Connect to the Respoke infrastructure and authenticate using `params.token`.\n     *\n     * After `connect`, the app auth session token is stored so it can be used in API requests.\n     *\n     * This method attaches quite a few event listeners for things like group joining and connection status changes.\n     *\n     * #### Usage\n     *\n     *      client.connect({\n     *          appId: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\",\n     *          token: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\", // if not developmentMode\n     *          developmentMode: false || true,\n     *          // if developmentMode, otherwise your server will set endpointId\n     *          endpointId: \"billy\"\n     *      });\n     *      client.listen(\"connect\", function () { } );\n     *\n     *\n     * If no `params.token` is given and `developmentMode` is set to true, it will attempt to obtain a token\n     * automatically. You must set an `endpointId`.\n     *\n     *\n     * #### App auth session token expiration\n     *\n     * If `params.reconnect` is set to true (which it is by default for `developmentMode`), the `client`\n     * will attempt to keep reconnecting each time the app auth session expires.\n     *\n     * If not using `developmentMode`, automatic reconnect will be disabled. You will need to\n     * listen to the Client's `disconnect` event to fetch a new brokered auth token and call\n     * `client.connect()` with the new token.\n     *\n     *      client.listen('disconnect', function () {\n     *\n     *          // example method you implemented to get a new token from your server\n     *          myServer.getNewRespokeAccessToken(function (newToken) {\n     *              // reconnect with respoke.Client\n     *              client.connect({ token: newToken });\n     *          });\n     *\n     *      });\n     *\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.connect\n     * @param {object} params\n     * @param {respoke.Client.connectSuccessHandler} [params.onSuccess] - Success handler for this invocation\n     * of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n     * respoke.connect, respoke.createClient, or to client.connect.\n     * @param {string} [params.token] - The endpoint's authentication token.\n     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n     * @param {respoke.client.resolveEndpointPresence} [params.resolveEndpointPresence] An optional function for\n     * resolving presence for an endpoint.  An endpoint can have multiple Connections this function will be used\n     * to decide which Connection's presence gets precedence for the Endpoint.\n     * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n     * operation and will limit the services you will be able to use.\n     * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n     * when a disconnect occurs.\n     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves\n     * a group.\n     * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is\n     * received from anywhere on the system.\n     * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n     * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n     * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n     * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client receives a call.\n     * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this\n     * client receives a request for a direct connection.\n     * @returns {Promise|undefined}\n     * @fires respoke.Client#connect\n     */\n    that.connect = function (params) {\n        var promise;\n        var retVal;\n        params = params || {};\n        log.debug('Client.connect');\n        that.connectTries += 1;\n\n        saveParameters(params);\n\n        that.endpointId = clientSettings.endpointId;\n        promise = actuallyConnect(params);\n        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n        promise.then(function successHandler() {\n            /**\n             * This event is fired the first time the library connects to the cloud infrastructure.\n             * @event respoke.Client#connect\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n            that.fire('connect');\n\n            /**\n             * This event fires only when the initial `connect` fails.\n             *\n             * @ignore **This comment is for documentation purposes**, since #error bubbles\n             * up from other classes, but it should show on `respoke.Client` docs.\n             *\n             * @event respoke.Client#error\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n        });\n        return retVal;\n    };\n\n    /**\n     * This function contains the meat of the connection, the portions which can be repeated again on reconnect.\n     *\n     * When `reconnect` is true, this function will be added in an event listener to the Client#disconnect event.\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     * @memberof! respoke.Client\n     * @method respoke.Client.actuallyConnect\n     * @private\n     * @param {object} params\n     * @param {connectSuccessHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    function actuallyConnect(params) {\n        params = params || {};\n        var deferred = Q.defer();\n\n        if (!clientSettings.token &&\n                (!clientSettings.appId || !clientSettings.endpointId || clientSettings.developmentMode !== true)) {\n            deferred.reject(new Error(\"Must pass either endpointID & appId & developmentMode=true, or a token, \" +\n                \"to client.connect().\"));\n            return deferred.promise;\n        }\n\n        signalingChannel.open({\n            actuallyConnect: actuallyConnect,\n            endpointId: that.endpointId,\n            token: clientSettings.token\n        }).then(function successHandler() {\n            return signalingChannel.authenticate();\n        }).done(function successHandler() {\n            // set initial presence for the connection\n            if (clientSettings.presence) {\n                that.setPresence({presence: clientSettings.presence});\n            }\n\n            /*\n             * These rely on the EventEmitter checking for duplicate event listeners in order for these\n             * not to be duplicated on reconnect.\n             */\n\n            /**\n             * This event provides notification for when an incoming call is being received.  If the user wishes\n             * to allow the call, `evt.call.answer()`.\n             * @event respoke.Client#call\n             * @type {respoke.Event}\n             * @property {respoke.Call} call\n             * @property {respoke.Endpoint} endpoint\n             * @property {string} name - The event name.\n             * @property {respoke.Client} target\n             */\n            that.listen('call', clientSettings.onCall);\n            /**\n             * This event is fired when the local end of the directConnection is available. It still will not be\n             * ready to send and receive messages until the 'open' event fires.\n             * @event respoke.Client#direct-connection\n             * @type {respoke.Event}\n             * @property {respoke.DirectConnection} directConnection\n             * @property {respoke.Endpoint} endpoint\n             * @property {string} name - the event name.\n             * @property {respoke.Call} target\n             */\n            that.listen('direct-connection', clientSettings.onDirectConnection);\n            that.listen('join', clientSettings.onJoin);\n            /**\n             * This event is fired every time the client leaves a group.\n             * @event respoke.Client#leave\n             * @type {respoke.Event}\n             * @property {respoke.Group} group\n             * @property {string} name - the event name.\n             */\n            that.listen('leave', clientSettings.onLeave);\n            /**\n             * A generic message handler when a message was received by the client.\n             *\n             * @event respoke.Client#message\n             * @type {respoke.Event}\n             * @property {string} name - The event name.\n             * @property {respoke.Endpoint} endpoint - If the message was private, this is the Endpoint who sent it.\n             * @property {respoke.Group} group - If the message was to a group, this is the group.\n             * @property {respoke.TextMessage} message - The generic message object.\n             * @property {string} message.connectionId\n             * @property {string} message.endpointId\n             * @property {string} message.message - Message body text.\n             * @property {respoke.Client} target\n             */\n            that.listen('message', clientSettings.onMessage);\n            that.listen('connect', clientSettings.onConnect);\n            /**\n             * Client has disconnected from Respoke.\n             *\n             * @event respoke.Client#disconnect\n             * @type {respoke.Event}\n             * @property {string} name - The event name.\n             * @property {respoke.Client} target\n             */\n            that.listen('disconnect', clientSettings.onDisconnect);\n            that.listen('disconnect', function () {\n                that.calls.forEach(function (call) {\n                    call.hangup({signal: false});\n                });\n            }, true);\n            /**\n             * Client has reconnected to Respoke.\n             *\n             * @event respoke.Client#reconnect\n             * @type {respoke.Event}\n             * @property {string} name - The event name.\n             * @property {respoke.Client} target\n             */\n            that.listen('reconnect', clientSettings.onReconnect);\n\n            log.info('logged in as ' + that.endpointId, that);\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n            log.error(err.message, err.stack);\n        });\n\n        return deferred.promise;\n    }\n\n    /**\n     * Disconnect from the Respoke infrastructure, leave all groups, invalidate the token, and disconnect the websocket.\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     * @memberof! respoke.Client\n     * @method respoke.Client.disconnect\n     * @returns {Promise|undefined}\n     * @param {object} params\n     * @param {disconnectSuccessHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @fires respoke.Client#disconnect\n     */\n    that.disconnect = function (params) {\n        // TODO: also call this on socket disconnect\n        params = params || {};\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            deferred.reject(e);\n            return retVal;\n        }\n\n        var leaveGroups = groups.map(function eachGroup(group) {\n            group.leave();\n        });\n\n        Q.all(leaveGroups).fin(function successHandler() {\n            return signalingChannel.close();\n        }).fin(function finallyHandler() {\n            that.presence = 'unavailable';\n            endpoints = [];\n            groups = [];\n            /**\n             * This event is fired when the library has disconnected from the cloud infrastructure.\n             * @event respoke.Client#disconnect\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n            that.fire('disconnect');\n            deferred.resolve();\n        }).done();\n\n        return retVal;\n    };\n\n    /**\n     * Set the presence for this client.\n     *\n     * The value of presence can be a string, number, object, or array - in any format -\n     * depending on the needs of your application. The only requirement is that\n     * `JSON.stringify()` must work (no circular references).\n     *\n     *      var myPresence = 'At lunch'\n     *                      || 4\n     *                      || { status: 'Away', message: 'At lunch' }\n     *                      || ['Away', 'At lunch'];\n     *\n     *      client.setPresence({\n     *          presence: myPresence,\n     *          onSuccess: function (evt) {\n     *              // successfully updated my presence\n     *          }\n     *      });\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.setPresence\n     * @param {object} params\n     * @param {string|number|object|array} params.presence\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @overrides Presentable.setPresence\n     * @return {Promise|undefined}\n     */\n    that.setPresence = function (params) {\n        var promise;\n        var retVal;\n        params = params || {};\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n        }\n\n        log.info('sending my presence update ' + params.presence);\n\n        promise = signalingChannel.sendPresence({\n            presence: params.presence\n        });\n\n        promise.then(function successHandler(p) {\n            superClass.setPresence(params);\n            clientSettings.presence = params.presence;\n        });\n        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n        return retVal;\n    };\n\n    /**\n     * Get the Call with the endpoint specified.\n     *\n     *     // hang up on chad\n     *     var call = client.getCall({\n     *         endpointId: 'chad'\n     *     });\n     *\n     *     if (call) {\n     *         call.hangup()\n     *     }\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getCall\n     * @param {object} params\n     * @param {string} [params.id] - Call ID.\n     * @param {string} [params.endpointId] - Endpoint ID. Warning: If you pass only the endpointId, this method\n     * will just return the first call that matches. If you are placing multiple calls to the same endpoint,\n     * pass in the call ID, too.\n     * @param {boolean} params.create - whether or not to create a new call if the specified endpointId isn't found\n     * @returns {respoke.Call}\n     */\n    that.getCall = function (params) {\n        var call = null;\n        var endpoint = null;\n        var methods = {\n            screenshare: \"startScreenShare\",\n            did: \"startPhoneCall\",\n            web: \"startCall\",\n            sip: \"startSIPCall\"\n        };\n        var callParams = {};\n        params.fromType = params.fromType || \"web\";\n\n        that.calls.every(function findCall(one) {\n            if (params.id && one.id === params.id) {\n                call = one;\n                return false;\n            }\n\n            if (!params.id && params.endpointId && one.remoteEndpoint.id === params.endpointId) {\n                call = one;\n                return false;\n            }\n            return true;\n        });\n\n        if (call || params.create !== true) {\n            return call;\n        }\n\n        callParams.id = params.id;\n        callParams.caller = false;\n        callParams.fromType = \"web\";\n\n        switch (params.type) {\n            case \"screenshare\":\n            case \"web\":\n                callParams.toType = \"web\"; // overwrite \"screenshare\"\n                callParams.endpointId = params.endpointId;\n                break;\n            case \"did\":\n                callParams.number = params.endpointId;\n                callParams.toType = \"did\";\n                break;\n            case \"sip\":\n                callParams.uri = params.endpointId;\n                callParams.toType = \"sip\";\n                break;\n        }\n\n        try {\n            call = that[methods[params.type]](callParams);\n        } catch (e) {\n            log.error(\"Couldn't create Call.\", e.message, e.stack);\n        }\n        return call;\n    };\n\n    /**\n     * Add the call to internal record-keeping.\n     * @memberof! respoke.Client\n     * @method respoke.Client.addCall\n     * @param {object} evt\n     * @param {respoke.Call} evt.call\n     * @param {respoke.Endpoint} evt.endpoint\n     * @private\n     */\n    function addCall(evt) {\n        log.debug('addCall');\n        if (!evt.call) {\n            throw new Error(\"Can't add call without a call parameter.\");\n        }\n        if (that.calls.indexOf(evt.call) === -1) {\n            that.calls.push(evt.call);\n        }\n\n        evt.call.listen('hangup', function () {\n            removeCall({call: evt.call});\n        });\n    }\n\n    /**\n     * Remove the call or direct connection from internal record-keeping.\n     * @memberof! respoke.Client\n     * @method respoke.Client.removeCall\n     * @param {object} evt\n     * @param {respoke.Call} evt.target\n     * @private\n     */\n    function removeCall(evt) {\n        var match = 0;\n        if (!evt.call) {\n            throw new Error(\"Can't remove call without a call parameter.\");\n        }\n\n        // Loop backward since we're modifying the array in place.\n        for (var i = that.calls.length - 1; i >= 0; i -= 1) {\n            if (that.calls[i].id === evt.call.id) {\n                that.calls.splice(i, 1);\n                match += 1;\n            }\n        }\n\n        if (match !== 1) {\n            log.warn(\"Something went wrong.\", match, \"calls were removed!\");\n        }\n    }\n\n    /**\n     * Convenience method for setting presence to `\"available\"`.\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.setOnline\n     * @param {object} params\n     * @param {string|number|object|Array} [params.presence=available] - The presence to set.\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    that.setOnline = function (params) {\n        var promise;\n\n        params = params || {};\n        params.presence = params.presence || 'available';\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n        }\n\n        return that.setPresence(params);\n    };\n\n    /**\n     * Convenience method for setting presence to `\"unavailable\"`.\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.setOffline\n     * @param {object} params\n     * @param {string|number|object|Array} [params.presence=unavailable] - The presence to set.\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    that.setOffline = function (params) {\n        var promise;\n\n        params = params || {};\n        params.presence = params.presence || 'unavailable';\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n        }\n\n        return that.setPresence(params);\n    };\n\n    /**\n     * Send a message to an endpoint.\n     *\n     *     client.sendMessage({\n     *         endpointId: 'dan',\n     *         message: \"Jolly good.\"\n     *     });\n     *\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     * @memberof! respoke.Client\n     * @method respoke.Client.sendMessage\n     * @param {object} params\n     * @param {string} params.endpointId - The endpoint id of the recipient.\n     * @param {string} [params.connectionId] - The optional connection id of the receipient. If not set, message will be\n     * broadcast to all connections for this endpoint.\n     * @param {string} params.message - a string message.\n     * @param {sendHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        var promise;\n        var retVal;\n        var endpoint;\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n            return retVal;\n        }\n        endpoint = that.getEndpoint({\n            skipPresence: true,\n            id: params.endpointId\n        });\n        delete params.endpointId;\n        return endpoint.sendMessage(params);\n    };\n\n    /**\n     * Create a new screen sharing call. Screenshares are inherently unidirectional video only. This may change\n     * in the future when Chrome adds the ability to obtain screen video and microphone audio at the same time. For\n     * now, if you also need audio, place a second audio only call.\n     *\n     * The endpoint who calls `client.startScreenShare` will be the one whose screen is shared. If you'd like to\n     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n     * not the sharer, it is recommened that you use `endpoint.sendMessage` to send a control message to the user\n     * whose screenshare is being requested so that user's app can call `client.startScreenShare`.\n     *\n     * NOTE: At this time, screen sharing only works with Chrome, and Chrome requires a Chrome extension to\n     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension.\n     * Support for additional browsers will be added in the future.\n     *\n     *     client.startScreenShare({\n     *         endpointId: 'tian',\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.startScreenShare\n     * @param {object} params\n     * @param {string} params.endpointId - The id of the endpoint that should be called.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n     * and the remote party has received the video.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @returns {respoke.Call}\n     */\n    that.startScreenShare = function (params) {\n        that.verifyConnected();\n        var endpoint = that.getEndpoint({\n            skipPresence: true,\n            id: params.endpointId\n        });\n        delete params.endpointId;\n        return endpoint.startScreenShare(params);\n    };\n\n    /**\n     * Place an audio and/or video call to an endpoint.\n     *\n     *     // defaults to video when no constraints are supplied\n     *     client.startCall({\n     *         endpointId: 'erin',\n     *         onConnect: function (evt) { },\n     *         onLocalMedia: function (evt) { }\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.startCall\n     * @param {object} params\n     * @param {string} params.endpointId - The id of the endpoint that should be called.\n     * @param {Array<RTCConstraints>} [params.constraints]\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n     * with the local audio and/or video attached.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n     * with the remote audio and/or video attached.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n     * up.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have\n     * local video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have\n     * remote video attached to it.\n     * @return {respoke.Call}\n     */\n    that.startCall = function (params) {\n        var promise;\n        var retVal;\n        var endpoint;\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n            return retVal;\n        }\n\n        endpoint = that.getEndpoint({\n            skipPresence: true,\n            id: params.endpointId\n        });\n        delete params.endpointId;\n        return endpoint.startCall(params);\n    };\n\n    /**\n     * Place an audio only call to an endpoint.\n     *\n     *     client.startAudioCall({\n     *         endpointId: 'erin',\n     *         onConnect: function (evt) { },\n     *         onLocalMedia: function (evt) { }\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.startAudioCall\n     * @param {object} params\n     * @param {string} params.endpointId - The id of the endpoint that should be called.\n     * @param {string} [params.connectionId]\n     * @param {Array<RTCConstraints>} [params.constraints]\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 element\n     * with the local audio and/or video attached.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 element\n     * with the remote audio and/or video attached.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n     * up.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n     * video attached to it.\n     * @return {respoke.Call}\n     */\n    that.startAudioCall = function (params) {\n        params = params || {};\n        params.constraints = respoke.convertConstraints(params.constraints, [{\n            video: false,\n            audio: true,\n            optional: [],\n            mandatory: {}\n        }]);\n\n        return that.startCall(params);\n    };\n\n    /**\n     * Place a video call to an endpoint.\n     *\n     *     client.startVideoCall({\n     *         endpointId: 'erin',\n     *         onConnect: function (evt) { },\n     *         onLocalMedia: function (evt) { }\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.startVideoCall\n     * @param {object} params\n     * @param {string} params.endpointId - The id of the endpoint that should be called.\n     * @param {Array<RTCConstraints>} [params.constraints]\n     * @param {string} [params.connectionId]\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n     * with the local audio and/or video attached.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n     * with the remote audio and/or video attached.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n     * up.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n     * video attached to it.\n     * @return {respoke.Call}\n     */\n    that.startVideoCall = function (params) {\n        params = params || {};\n        params.constraints = respoke.convertConstraints(params.constraints, [{\n            video: true,\n            audio: true,\n            optional: [],\n            mandatory: {}\n        }]);\n\n        return that.startCall(params);\n    };\n\n    /**\n     * Place an audio call with a phone number.\n     * @memberof! respoke.Client\n     * @method respoke.Client.startPhoneCall\n     * @param {object} params\n     * @param {string} params.number - The phone number that should be called.\n     * @arg {string} params.callerId - The phone number to use as the caller ID for this phone call. This must\n     * be a phone number listed in your Respoke account, associated with your app, and allowed by the role\n     * that this client is authenticated with. If the role contains a list of numbers and the token does not contain\n     * callerId, this field must be used to set caller ID selected from the list of numbers or no caller ID will be set.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n     * with the local audio and/or video attached.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n     * with the remote audio and/or video attached.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n     * up.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @return {respoke.Call}\n     */\n    that.startPhoneCall = function (params) {\n        var promise;\n        var retVal;\n        var call = null;\n        var recipient = {};\n        params = params || {};\n        params.constraints = [{\n            video: false,\n            audio: true,\n            mandatory: {},\n            optional: []\n        }];\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n            return retVal;\n        }\n\n        if (typeof params.caller !== 'boolean') {\n            params.caller = true;\n        }\n\n        if (!params.number) {\n            log.error(\"Can't start a phone call without a number.\");\n            promise = Q.reject(new Error(\"Can't start a phone call without a number.\"));\n            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n            return retVal;\n        }\n\n        recipient.id = params.number;\n\n        params.instanceId = instanceId;\n        params.remoteEndpoint = recipient;\n\n        params.toType = params.toType || 'did';\n        params.fromType = params.fromType || 'web';\n\n        params.signalOffer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'offer';\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            if (params.callerId) {\n                signalParams.callerId = {number: params.callerId};\n            }\n            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n        };\n        params.signalAnswer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'answer';\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n                log.error(\"Couldn't answer the call.\", err.message, err.stack);\n                signalParams.call.hangup({signal: false});\n            });\n        };\n        params.signalConnected = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.connectionId = signalParams.connectionId;\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send connected.\", err.message, err.stack);\n                signalParams.call.hangup();\n            });\n        };\n        params.signalModify = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendModify(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send modify.\", err.message, err.stack);\n            });\n        };\n        params.signalCandidate = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendCandidate(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send candidate.\", err.message, err.stack);\n            });\n        };\n        params.signalHangup = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendHangup(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send hangup.\", err.message, err.stack);\n            });\n        };\n        params.signalReport = function (signalParams) {\n            log.debug(\"Sending debug report\", signalParams.report);\n            signalingChannel.sendReport(signalParams);\n        };\n\n        params.signalingChannel = signalingChannel;\n        call = respoke.Call(params);\n        addCall({call: call});\n        return call;\n    };\n\n    /**\n     * Place an audio call to a SIP URI.\n     * @memberof! respoke.Client\n     * @method respoke.Client.startSIPCall\n     * @param {object} params\n     * @param {string} params.uri - The SIP URI to call.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n     * with the local audio and/or video attached.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n     * with the remote audio and/or video attached.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n     * up.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @return {respoke.Call}\n     */\n    that.startSIPCall = function (params) {\n        var promise;\n        var retVal;\n        var call = null;\n        var recipient = {};\n        params = params || {};\n        params.constraints = [{\n            video: false,\n            audio: true,\n            mandatory: {},\n            optional: []\n        }];\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n            return retVal;\n        }\n\n        if (typeof params.caller !== 'boolean') {\n            params.caller = true;\n        }\n\n        if (!params.uri) {\n            log.error(\"Can't start a phone call without a SIP URI.\");\n            promise = Q.reject(new Error(\"Can't start a phone call without a SIP URI.\"));\n            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n            return retVal;\n        }\n\n        recipient.id = params.uri;\n\n        params.instanceId = instanceId;\n        params.remoteEndpoint = recipient;\n\n        params.toType = params.toType || 'sip';\n        params.fromType = params.fromType || 'web';\n\n        params.signalOffer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'offer';\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n        };\n        params.signalAnswer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'answer';\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n                log.error(\"Couldn't answer the call.\", err.message, err.stack);\n                signalParams.call.hangup({signal: false});\n            });\n        };\n        params.signalConnected = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.connectionId = signalParams.connectionId;\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send connected.\", err.message, err.stack);\n                signalParams.call.hangup();\n            });\n        };\n        params.signalModify = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendModify(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send modify.\", err.message, err.stack);\n            });\n        };\n        params.signalCandidate = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendCandidate(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send candidate.\", err.message, err.stack);\n            });\n        };\n        params.signalHangup = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendHangup(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send hangup.\", err.message, err.stack);\n            });\n        };\n        params.signalReport = function (signalParams) {\n            log.debug(\"Sending debug report\", signalParams.report);\n            signalingChannel.sendReport(signalParams);\n        };\n\n        params.signalingChannel = signalingChannel;\n        call = respoke.Call(params);\n        addCall({call: call});\n        return call;\n    };\n\n    /**\n     * Assert that we are connected to the backend infrastructure.\n     * @memberof! respoke.Client\n     * @method respoke.Client.verifyConnected\n     * @throws {Error}\n     * @private\n     */\n    that.verifyConnected = function () {\n        if (!signalingChannel.isConnected()) {\n            throw new Error(\"Can't complete request when not connected. Please reconnect!\");\n        }\n    };\n\n    /**\n     * Check whether this client is connected to the Respoke API.\n     * @memberof! respoke.Client\n     * @method respoke.Client.isConnected\n     * @returns boolean\n     */\n    that.isConnected = function () {\n        return signalingChannel.isConnected();\n    };\n\n    /**\n     * Join a group and begin keeping track of it. If this method is called multiple times synchronously, it will\n     * batch requests and only make one API call to Respoke.\n     *\n     * You can leave the group by calling `group.leave()`;\n     *\n     * ##### Joining and leaving a group\n     *\n     *      var group;\n     *\n     *      client.join({\n     *          id: \"book-club\",\n     *          onSuccess: function (evt) {\n     *              console.log('I joined', evt.group.id);\n     *              // \"I joined book-club\"\n     *              group = evt.group;\n     *              group.sendMessage({\n     *                  message: 'sup'\n     *              });\n     *          }\n     *      });\n     *\n     *      // . . .\n     *      // Some time later, leave the group.\n     *      // . . .\n     *      group.leave({\n     *          onSuccess: function (evt) {\n     *              console.log('I left', evt.group.id);\n     *              // \"I left book-club\"\n     *          }\n     *      });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.join\n     * @param {object} params\n     * @param {string} params.id - The name of the group.\n     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {respoke.Group.onMessage} [params.onMessage] - Message handler for messages from this group only.\n     * @param {respoke.Group.onJoin} [params.onJoin] - Join event listener for endpoints who join this group only.\n     * @param {respoke.Group.onLeave} [params.onLeave] - Leave event listener for endpoints who leave\n     * this group only.\n     * @returns {Promise<respoke.Group>|undefined} The instance of the respoke.Group which the client joined.\n     * @fires respoke.Client#join\n     */\n    that.join = function (params) {\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            deferred.reject(e);\n            return retVal;\n        }\n\n        if (!params.id) {\n            deferred.reject(new Error(\"Can't join a group with no group id.\"));\n            return retVal;\n        }\n\n        signalingChannel.joinGroup({\n            groupList: [params.id]\n        }).done(function successHandler() {\n            var group;\n            params.signalingChannel = signalingChannel;\n            params.instanceId = instanceId;\n\n            group = that.getGroup({id: params.id});\n\n            if (!group) {\n                group = respoke.Group(params);\n                that.addGroup(group);\n            }\n\n            group.listen('join', params.onJoin);\n            group.listen('leave', params.onLeave);\n            group.listen('message', params.onMessage);\n\n            group.addMember({\n                connection: that.getConnection({\n                    endpointId: that.endpointId,\n                    connectionId: that.connectionId\n                })\n            });\n\n            /**\n             * This event is fired every time the client joins a group. If the client leaves\n             * a group, this event will be fired again on the next time the client joins the group.\n             * @event respoke.Client#join\n             * @type {respoke.Event}\n             * @property {respoke.Group} group\n             * @property {string} name - the event name.\n             */\n            that.fire('join', {\n                group: group\n            });\n            deferred.resolve(group);\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return retVal;\n    };\n\n    /**\n     * Add a Group. This is called when we join a group and need to begin keeping track of it.\n     * @memberof! respoke.Client\n     * @method respoke.Client.addGroup\n     * @param {respoke.Group}\n     * @private\n     */\n    that.addGroup = function (newGroup) {\n        if (!newGroup || newGroup.className !== 'respoke.Group') {\n            throw new Error(\"Can't add group to internal tracking without a group.\");\n        }\n\n        newGroup.listen('leave', function leaveHandler(evt) {\n            newGroup.removeMember({connectionId: evt.connection.id});\n            var endpt = evt.connection.getEndpoint();\n            if (!endpt.hasListeners('presence')) {\n                checkEndpointForRemoval(endpt);\n            }\n        }, true);\n\n        groups.push(newGroup);\n    };\n\n    /**\n     * Get a list of all the groups the client is currently a member of.\n     * @memberof! respoke.Client\n     * @method respoke.Client.getGroups\n     * @returns {Array<respoke.Group>} All of the groups the library is aware of.\n     */\n    that.getGroups = function () {\n        return groups;\n    };\n\n    /**\n     * Find a group by id and return it.\n     *\n     *     var group = client.getGroup({\n     *         id: \"resistance\"\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getGroup\n     * @param {object} params\n     * @param {string} params.id\n     * @param {respoke.Group.onJoin} [params.onJoin] - Receive notification that an endpoint has joined this group.\n     * @param {respoke.Group.onLeave} [params.onLeave] - Receive notification that an endpoint has left this group.\n     * @param {respoke.Group.onMessage} [params.onMessage] - Receive notification that a message has been\n     * received to a group.\n     * @returns {respoke.Group|undefined} The group whose ID was specified.\n     */\n    that.getGroup = function (params) {\n        var group;\n        if (!params || !params.id) {\n            throw new Error(\"Can't get a group without group id.\");\n        }\n\n        groups.every(function eachGroup(grp) {\n            if (grp.id === params.id) {\n                group = grp;\n                return false;\n            }\n            return true;\n        });\n\n        if (group) {\n            group.listen('join', params.onJoin);\n            group.listen('leave', params.onLeave);\n            group.listen('message', params.onMessage);\n        }\n\n        return group;\n    };\n\n    /**\n     * Remove an Endpoint. Since an endpoint can be a member of multiple groups, we can't just remove it from\n     * our list on respoke.Endpoint#leave. We must see if it's a member of any more groups. If it's not\n     * a member of any other groups, we can stop keeping track of it.\n     * @todo TODO Need to account for Endpoints not created as part of a group. These do not need to be\n     * deleted based on group membership.\n     * @memberof! respoke.Client\n     * @method respoke.Client.checkEndpointForRemoval\n     * @param {object} params\n     * @param {string} params.id - The ID of the Endpoint to check for removal.\n     * @private\n     */\n    function checkEndpointForRemoval(params) {\n        params = params || {};\n        if (!params.id) {\n            throw new Error(\"Can't remove endpoint from internal tracking without group id.\");\n        }\n\n        Q.all(groups.map(function eachGroup(group) {\n            return group.getMembers();\n        })).done(function successHandler(connectionsByGroup) {\n            // connectionsByGroup is a two-dimensional array where the first dimension is a group\n            // and the second dimension is a connection.\n            var absent = connectionsByGroup.every(function eachConnectionList(connectionList) {\n                return connectionList.every(function eachConnection(conn) {\n                    return (conn.endpointId !== params.id);\n                });\n            });\n            if (absent) {\n                endpoints.every(function eachEndpoint(ept, index) {\n                    if (ept.id === params.id) {\n                        endpoints.splice(index, 1);\n                        return false;\n                    }\n                    return true;\n                });\n            }\n        });\n    }\n\n    /**\n     * Find an endpoint by id and return the `respoke.Endpoint` object.\n     *\n     * If it is not already cached locally, will be added to the local cache of tracked endpoints,\n     * its presence will be determined, and will be available in `client.getEndpoints()`.\n     *\n     *     var endpoint = client.getEndpoint({\n     *         id: \"dlee\"\n     *     });\n     *\n     * @ignore If the endpoint is not found in the local cache of endpoint objects (see `client.getEndpoints()`),\n     * it will be created. This is useful, for example, in the case of dynamic endpoints where groups are\n     * not in use. Override dynamic endpoint creation by setting `params.skipCreate = true`.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getEndpoint\n     * @param {object} params\n     * @param {string} params.id\n     * @param {respoke.Endpoint.onMessage} [params.onMessage] - Handle messages sent to the logged-in user\n     * from this one Endpoint.\n     * @param {respoke.Endpoint.onPresence} [params.onPresence] - Handle presence notifications from this one\n     * Endpoint.\n     * @arg {boolean} [params.skipCreate] - Skip the creation step and return undefined if we don't yet\n     * @arg {boolean} [params.skipPresence] - Skip registering for this endpoint's presence.\n     * @returns {respoke.Endpoint} The endpoint whose ID was specified.\n     */\n    that.getEndpoint = function (params) {\n        var endpoint;\n        if (!params || !params.id) {\n            throw new Error(\"Can't get an endpoint without endpoint id.\");\n        }\n\n        endpoints.every(function eachEndpoint(ept) {\n            if (ept.id === params.id) {\n                endpoint = ept;\n                return false;\n            }\n            return true;\n        });\n\n        if (!endpoint && params && !params.skipCreate) {\n            params.instanceId = instanceId;\n            params.signalingChannel = signalingChannel;\n            params.resolveEndpointPresence = clientSettings.resolveEndpointPresence;\n            params.addCall = addCall;\n\n            endpoint = respoke.Endpoint(params);\n            endpoints.push(endpoint);\n        }\n\n        if (!endpoint) {\n            return;\n        }\n\n        if (params.skipPresence !== true) {\n            signalingChannel.registerPresence({\n                endpointList: [endpoint.id]\n            }).done(null, function (err) {\n                log.error(\"Couldn't register for presence on\", endpoint.id, err.message);\n            });\n        }\n        endpoint.listen('presence', params.onPresence);\n        endpoint.listen('message', params.onMessage);\n\n        return endpoint;\n    };\n\n    /**\n     * Find a Connection by id and return it.\n     *\n     *     var connection = client.getConnection({\n     *         id: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\"\n     *     });\n     *\n     * @ignore In most cases, if we don't find it we will create it. This is useful\n     * in the case of dynamic endpoints where groups are not in use. Set skipCreate=true\n     * to return undefined if the Connection is not already known.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getConnection\n     * @param {object} params\n     * @param {string} params.connectionId\n     * @param {string} [params.endpointId] - An endpointId to use in the creation of this connection.\n     * @param {respoke.Endpoint.onMessage} [params.onMessage] - Handle messages sent to the logged-in user\n     * from this one Connection.\n     * @param {respoke.Endpoint.onPresence} [params.onPresence] - Handle presence notifications from this one\n     * Connection.\n     * @returns {respoke.Connection} The connection whose ID was specified.\n     */\n    that.getConnection = function (params) {\n        var connection;\n        var endpoint;\n        var endpointsToSearch = endpoints;\n\n        params = params || {};\n        if (!params.connectionId) {\n            throw new Error(\"Can't get a connection without connection id.\");\n        }\n        if (!params.endpointId && !params.skipCreate) {\n            throw new Error(\"Can't create a connection without endpoint id.\");\n        }\n\n        if (params.endpointId) {\n            endpoint = that.getEndpoint({\n                id: params.endpointId,\n                skipPresence: true,\n                skipCreate: params.skipCreate\n            });\n\n            endpointsToSearch = [];\n            if (endpoint) {\n                endpointsToSearch = [endpoint];\n            }\n        }\n\n        endpointsToSearch.every(function eachEndpoint(ept) {\n            connection = ept.getConnection(params);\n            return !connection;\n        });\n\n        if (!connection && !params.skipCreate) {\n            params.instanceId = instanceId;\n            connection = respoke.Connection(params);\n            endpoint.connections.push(connection);\n        }\n\n        return connection;\n    };\n\n    /**\n     * Get the list of **all endpoints** that the library has knowledge of.\n     * These are `respoke.Endpoint` objects, not just the endpointIds.\n     *\n     * The library gains knowledge of an endpoint in two ways:\n     * 1. when an endpoint joins a group that the user (currently logged-in endpoint) is a member of (if group presence is enabled)\n     * 2. when an endpoint that the user (currently logged-in endpoint) is watching*\n     *\n     * *If an endpoint that the library does not know about sends a message to the client, you\n     * can immediately call the `client.getEndpoint()` method on the sender of the message to enable\n     * watching of the sender's endpoint.\n     *\n     *      client.on('message', function (data) {\n     *          if (data.endpoint) {\n     *              // start tracking this endpoint.\n     *              client.getEndpoint({ id: data.endpoint.id });\n     *          }\n     *      });\n     *\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getEndpoints\n     * @returns {Array<respoke.Endpoint>}\n     */\n    that.getEndpoints = function () {\n        return endpoints;\n    };\n\n    return that;\n}; // End respoke.Client\n\n/**\n * Handle sending successfully.\n * @callback respoke.Client.successHandler\n */\n/**\n * Handle joining a group successfully. This callback is called only once when Client.join() is called.\n * @callback respoke.Client.joinHandler\n * @param {respoke.Group} group\n */\n/**\n * Receive notification that the client has joined a group. This callback is called everytime\n * respoke.Client#join is fired.\n * @callback respoke.Client.onJoin\n * @param {respoke.Event} evt\n * @param {respoke.Group} evt.group\n * @param {string} evt.name - the event name.\n */\n/**\n * Receive notification that the client has left a group. This callback is called everytime\n * respoke.Client#leave is fired.\n * @callback respoke.Client.onLeave\n * @param {respoke.Event} evt\n * @param {respoke.Group} evt.group\n * @param {string} evt.name - the event name.\n */\n/**\n * Receive notification that a message has been received. This callback is called every time\n * respoke.Client#message is fired.\n * @callback respoke.Client.onClientMessage\n * @param {respoke.Event} evt\n * @param {respoke.TextMessage} evt.message\n * @param {respoke.Group} [evt.group] - If the message is to a group we already know about,\n * this will be set. If null, the developer can use client.join({id: evt.message.header.channel}) to join\n * the group. From that point forward, Group#message will fire when a message is received as well. If\n * group is undefined instead of null, the message is not a group message at all.\n * @param {string} evt.name - the event name.\n * @param {respoke.Client} evt.target\n */\n/**\n * Receive notification that the client is receiving a call from a remote party. This callback is called every\n * time respoke.Client#call is fired.\n * @callback respoke.Client.onCall\n * @param {respoke.Event} evt\n * @param {respoke.Call} evt.call\n * @param {respoke.Endpoint} evt.endpoint\n * @param {string} evt.name - the event name.\n */\n/**\n * Receive notification that the client is receiving a request for a direct connection from a remote party.\n * This callback is called every time respoke.Client#direct-connection is fired.\n * @callback respoke.Client.onDirectConnection\n * @param {respoke.Event} evt\n * @param {respoke.DirectConnection} evt.directConnection\n * @param {respoke.Endpoint} evt.endpoint\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * Receive notification Respoke has successfully connected to the cloud. This callback is called every time\n * respoke.Client#connect is fired.\n * @callback respoke.Client.onConnect\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Client} evt.target\n */\n/**\n * Receive notification Respoke has successfully disconnected from the cloud. This callback is called every time\n * respoke.Client#disconnect is fired.\n * @callback respoke.Client.onDisconnect\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Client} evt.target\n */\n/**\n * Receive notification Respoke has successfully reconnected to the cloud. This callback is called every time\n * respoke.Client#reconnect is fired.\n * @callback respoke.Client.onReconnect\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Client} evt.target\n */\n/**\n * Handle disconnection to the cloud successfully.\n * @callback respoke.Client.disconnectSuccessHandler\n */\n/**\n * Handle an error that resulted from a method call.\n * @callback respoke.Client.errorHandler\n * @params {Error} err\n */\n/**\n * Handle connection to the cloud successfully.\n * @callback respoke.Client.connectSuccessHandler\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/client.js\n ** module id = 4\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar respoke = require('./respoke');\n\n/**\n * The purpose of the class is to allow multiple types of entities to expose presence functionality.\n *\n * Setting the presence on a client is provided via `client.setPresence({ presence: \"At lunch\" })`.\n *\n * @class respoke.Presentable\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.instanceId\n * @param {string} params.id\n * @returns {respoke.Presentable}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Presentable\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.Presentable\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Presentable';\n    /**\n     * Represents the presence status. Typically a string, but other types are supported.\n     * Defaults to `'unavailable'`.\n     *\n     * **Do not modify this directly** - it won't update presence with Respoke. Use `setPresence()`.\n     *\n     * @memberof! respoke.Presentable\n     * @name presence\n     * @type {string|number|object|Array}\n     * @private\n     */\n    that.presence = 'unavailable';\n\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name client\n     * @type {respoke.Client}\n     * @private\n     */\n    var client = respoke.getClient(instanceId);\n\n    /**\n     * Set the presence on the object for this session.\n     *\n     * @memberof! respoke.Presentable\n     * @method respoke.Presentable.setPresence\n     * @param {object} params\n     * @param {string|number|object|Array} [params.presence=available]\n     * @param {string} params.connectionId\n     * @fires respoke.Presentable#presence\n     * @private\n     */\n    that.setPresence = function (params) {\n        var connection;\n        params = params || {};\n        params.presence = params.presence || 'available';\n        params.connectionId = params.connectionId || that.connectionId;\n\n        if (that.className === 'respoke.Client' || that.className === 'respoke.Connection') {\n            that.presence = params.presence;\n            if (that.className === 'respoke.Connection') {\n                that.getEndpoint().resolvePresence();\n            }\n        } else if (that.className === 'respoke.Endpoint') {\n            if (!params.connectionId) {\n                throw new Error(\"Can't set Endpoint presence without a connectionId.\");\n            }\n\n            connection = that.getConnection({connectionId: params.connectionId}) || client.getConnection({\n                connectionId: params.connectionId,\n                skipCreate: false,\n                endpointId: that.id\n            });\n\n            connection.presence = params.presence;\n            that.resolvePresence();\n        }\n\n        /**\n         * This event indicates that the presence for this endpoint has been updated.\n         * @event respoke.Presentable#presence\n         * @type {respoke.Event}\n         * @property {string|number|object|Array} presence\n         * @property {string} name - the event name.\n         * @property {respoke.Presentable} target\n         */\n        that.fire('presence', {\n            presence: that.presence\n        });\n    };\n\n    /**\n     * Get the presence of a Presentable instance.\n     *\n     *      var billy = client.getEndpoint({ id: \"billychia\" });\n     *      var pres = billy.getPresence();\n     *      console.log('Billy is', pres); // \"Billy is available\"\n     *\n     * @memberof! respoke.Presentable\n     * @method respoke.Presentable.getPresence\n     * @returns {string|number|object|array} the current presence of this endpoint.\n     */\n    that.getPresence = function () {\n        return that.presence;\n    };\n\n    return that;\n}; // End respoke.Presentable\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/presentable.js\n ** module id = 5\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar respoke = require('./respoke');\n\n/**\n * A `respoke.Connection` always belongs to an Endpoint.\n *\n * There is a distinction between Endpoint and Connection because an Endpoint can be authenticated\n * from multiple devices, browsers, or browser tabs. Each of these separate authentications is a Connection.\n * A Client can choose to interact with connections of the same endpoint in different ways.\n *\n * @constructor\n * @class respoke.Connection\n * @augments respoke.Presentable\n * @param {object} params\n * @param {string} params.id\n * @returns {respoke.Connection}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Connection\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.Presentable(params);\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name client\n     * @type {respoke.Client}\n     * @private\n     */\n    var client = respoke.getClient(instanceId);\n\n    /**\n     * The connection id.\n     * @memberof! respoke.Connection\n     * @name id\n     * @type {string}\n     */\n    that.id = that.id || that.connectionId;\n    if (!that.id) {\n        throw new Error(\"Can't make a connection without an id.\");\n    }\n    delete that.instanceId;\n    delete that.connectionId;\n\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.Connection\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Connection';\n\n    /**\n     * Send a message to this connection of an endpoint. If the endpoint has multiple connections,\n     * it will only receive the message at this connection.\n     *\n     *     connection.sendMessage({\n     *         message: \"PJ, put that PBR down!\"\n     *     });\n     *\n     * **Using callbacks** will disable promises.\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.sendMessage\n     * @param {object} params\n     * @param {string} params.message\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation\n     * of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        params = params || {};\n        params.connectionId = that.id;\n        return that.getEndpoint().sendMessage(params);\n    };\n\n    /**\n     * Create a new screen sharing call. Screenshares are inherently unidirectional video only. This may change\n     * in the future when Chrome adds the ability to obtain screen video and microphone audio at the same time. For\n     * now, if you also need audio, place a second audio only call.\n     *\n     * The endpoint who calls `connection.startScreenShare` will be the one whose screen is shared. If you'd like to\n     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n     * not the sharer, it is recommened that you use `endpoint.sendMessage` to send a control message to the user\n     * whose screenshare is being requested so that user's app can call `connection.startScreenShare`.\n     *\n     * NOTE: At this time, screen sharing only works with Chrome, and Chrome requires a Chrome extension to\n     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension.\n     * Support for additional browsers will be added in the future.\n     *\n     *     connection.startScreenShare({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startScreenShare\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n     * and the remote party has received the video.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @returns {respoke.Call}\n     */\n    that.startScreenShare = function (params) {\n        that.verifyConnected();\n        params = params || {};\n        params.connectionId = that.id;\n        return that.getEndpoint().startScreenShare(params);\n    };\n\n    /**\n     * Create a new Call for a voice and/or video call this particular connection, only. The Call cannot be answered\n     * by another connection of this Endpoint.\n     *\n     *     connection.startCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {RTCConstraints} [params.constraints]\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote video attached to it.\n     * @returns {respoke.Call}\n     */\n    that.startCall = function (params) {\n        params = params || {};\n        params.connectionId = that.id;\n        return that.getEndpoint().startCall(params);\n    };\n\n    /**\n     * Create a new audio-only call.\n     *\n     *     connection.startAudioCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startAudioCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @returns {respoke.Call}\n     */\n    that.startAudioCall = function (params) {\n        params = params || {};\n        params.connectionId = that.id;\n        params.constraints = respoke.convertConstraints(params.constraints, [{\n            video: false,\n            audio: true,\n            optional: [],\n            mandatory: {}\n        }]);\n        return that.startCall(params);\n    };\n\n    /**\n     * Create a new call with audio and video.\n     *\n     *     connection.startVideoCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startVideoCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has\n     * been hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @returns {respoke.Call}\n     */\n    that.startVideoCall = function (params) {\n        params = params || {};\n        params.connectionId = that.id;\n        return that.getEndpoint().startCall(params);\n    };\n\n    /**\n     * Create a new DirectConnection with this particular connection, only. The DirectConnection cannot be answered\n     * by another connection of this Endpoint.  This method creates a new Call as well, attaching this\n     * DirectConnection to it for the purposes of creating a peer-to-peer link for sending data such as messages to\n     * the other endpoint. Information sent through a DirectConnection is not handled by the cloud infrastructure.\n     *\n     *     connection.startDirectConnection({\n     *         onOpen: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startDirectConnection\n     * @param {object} params\n     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess] - Success handler for this\n     * invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {respoke.DirectConnection.onStart} [params.onStart] - A callback for when setup of the direct\n     * connection begins. The direct connection will not be open yet.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - A callback for receiving notification of when\n     * the DirectConnection is open and ready to be used.\n     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n     * connection.\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - A callback for receiving notification of\n     * when the DirectConnection is closed and the two Endpoints are disconnected.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - A callback for receiving messages sent\n     * through the DirectConnection.\n     * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the\n     * request for a direct connection and setup begins.\n     * @returns {respoke.DirectConnection} The DirectConnection which can be used to send data and messages\n     * directly to the other endpoint.\n     */\n    that.startDirectConnection = function (params) {\n        params = params || {};\n        params.connectionId = that.id;\n        return that.getEndpoint().startDirectConnection(params);\n    };\n\n    /**\n     * Get the Endpoint that this Connection belongs to.\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.getEndpoint\n     * @returns {respoke.Endpoint}\n     */\n    that.getEndpoint = function () {\n        return client.getEndpoint({\n            id: that.endpointId,\n            skipPresence: true\n        });\n    };\n\n    return that;\n}; // End respoke.Connection\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/connection.js\n ** module id = 6\n ** module chunks = 0\n **/","/**!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n */\n\nvar log = require('loglevel');\nvar Q = require('q');\nvar respoke = require('./respoke');\n\n/**\n * `respoke.Endpoint`s are users of a Respoke app.\n * An Endpoint can be a person in a browser or device, or an app using Respoke APIs from a server.\n * A Client can interact with endpoints through messages, audio or video calls, or direct connections.\n * An Endpoint may be authenticated from multiple devices to the same app (each of which is\n * represented by a Connection).\n *\n * ```\n * var jim = client.getEndpoint({ id: 'jim' });\n * ```\n *\n * @constructor\n * @class respoke.Endpoint\n * @augments respoke.Presentable\n * @param {object} params\n * @param {string} params.id\n * @param {string} params.instanceId\n * @param {respoke.client.resolvePresence} [params.resolvePresence] An optional function for resolving presence\n * for an endpoint.\n * @returns {respoke.Endpoint}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Endpoint\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.Presentable(params);\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name client\n     * @type {respoke.Client}\n     * @private\n     */\n    var client = respoke.getClient(instanceId);\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name signalingChannel\n     * @type {respoke.SignalingChannel}\n     * @private\n     */\n    var signalingChannel = params.signalingChannel;\n\n    var addCall = params.addCall;\n\n    delete that.signalingChannel;\n    delete that.instanceId;\n    delete that.connectionId;\n    delete that.addCall;\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.Endpoint\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Endpoint';\n    /**\n     * A direct connection to this endpoint. This can be used to send direct messages.\n     * @memberof! respoke.Endpoint\n     * @name directConnection\n     * @type {respoke.DirectConnection}\n     */\n    that.directConnection = null;\n\n    /**\n     * Array of connections for this endpoint.\n     * @memberof! respoke.Endpoint\n     * @name connections\n     * @type {Array<respoke.Connection>}\n     */\n    that.connections = [];\n    client.listen('disconnect', function disconnectHandler() {\n        that.connections = [];\n    });\n\n    var resolveEndpointPresence = params.resolveEndpointPresence;\n    delete that.resolveEndpointPresence;\n\n    /**\n     * Send a message to the endpoint through the infrastructure.\n     * \n     * ```\n     * endpoint.sendMessage({\n     *     message: \"wassuuuuup\"\n     * });\n     * ```\n     *\n     * **Using callbacks** will disable promises.\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.sendMessage\n     * @param {object} params\n     * @param {string} params.message\n     * @param {string} [params.connectionId]\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of this\n     * method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this method\n     * only.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        var promise;\n        var retVal;\n        params = params || {};\n\n        promise = signalingChannel.sendMessage({\n            connectionId: params.connectionId,\n            message: params.message,\n            recipient: that\n        });\n\n        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n        return retVal;\n    };\n\n    /**\n     * Create a new audio-only call.\n     *\n     *     endpoint.startAudioCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startAudioCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @returns {respoke.Call}\n     */\n    that.startAudioCall = function (params) {\n        params = params || {};\n\n        params.constraints = respoke.convertConstraints(params.constraints, [{\n            video: false,\n            audio: true,\n            optional: [],\n            mandatory: {}\n        }]);\n\n        return that.startCall(params);\n    };\n\n    /**\n     * Create a new call with audio and video.\n     *\n     *     endpoint.startVideoCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startVideoCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @returns {respoke.Call}\n     */\n    that.startVideoCall = function (params) {\n        params = params || {};\n\n        params.constraints = respoke.convertConstraints(params.constraints, [{\n            video: true,\n            audio: true,\n            optional: [],\n            mandatory: {}\n        }]);\n\n        return that.startCall(params);\n    };\n\n    /**\n     * Create a new screen sharing call. Screenshares are inherently unidirectional video only. This may change\n     * in the future when Chrome adds the ability to obtain screen video and microphone audio at the same time. For\n     * now, if you also need audio, place a second audio only call.\n     *\n     * The endpoint who calls `endpoint.startScreenShare` will be the one whose screen is shared. If you'd like to\n     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n     * not the sharer, it is recommened that you use `endpoint.sendMessage` to send a control message to the user\n     * whose screenshare is being requested so that user's app can call `endpoint.startScreenShare`.\n     *\n     * NOTE: At this time, screen sharing only works with Chrome, and Chrome requires a Chrome extension to\n     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension.\n     * Support for additional browsers will be added in the future.\n     *\n     *     endpoint.startScreenShare({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startScreenShare\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n     * and the remote party has received the video.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @returns {respoke.Call}\n     */\n    that.startScreenShare = function (params) {\n        var screenConstraint;\n        params = params || {};\n        if (typeof params.caller !== 'boolean') {\n            params.caller = true;\n        }\n        params.target = \"screenshare\";\n        params.constraints = respoke.convertConstraints(params.constraints, [{\n            audio: true,\n            video: {},\n            mandatory: {},\n            optional: []\n        }]);\n        screenConstraint = params.constraints[0];\n\n        if (params.caller) {\n            if (respoke.needsChromeExtension || respoke.isNwjs) {\n                screenConstraint.video = typeof screenConstraint.video === 'object' ? screenConstraint.video : {};\n                screenConstraint.video.optional = screenConstraint.video.optional || [];\n                screenConstraint.video.mandatory = typeof screenConstraint.video.mandatory === 'object' ?\n                    screenConstraint.video.mandatory : {};\n                screenConstraint.video.mandatory.chromeMediaSource = 'desktop';\n                screenConstraint.video.mandatory.maxWidth =\n                    typeof screenConstraint.video.mandatory.maxWidth === 'number' ?\n                    screenConstraint.video.mandatory.maxWidth : 2000;\n                screenConstraint.video.mandatory.maxHeight =\n                    typeof screenConstraint.video.mandatory.maxHeight === 'number' ?\n                    screenConstraint.video.mandatory.maxHeight : 2000;\n                screenConstraint.audio = false;\n\n                if (respoke.isNwjs) {\n                    screenConstraint.video.mandatory.chromeMediaSource = 'screen';\n                } else {\n                    params.sendOnly = true;\n                    if (typeof screenConstraint.video.optional === 'object' &&\n                            screenConstraint.video.optional.length !== undefined) {\n                        if (screenConstraint.length > 0) {\n                            screenConstraint.forEach(function (thing) {\n                                thing.googTemporalLayeredScreencast = true;\n                            });\n                        } else {\n                            screenConstraint.video.optional[0] = {\n                                googTemporalLayeredScreencast: true\n                            };\n                        }\n                    }\n                }\n            } else {\n                screenConstraint.video = {\n                    mediaSource: params.source || \"window\"\n                };\n            }\n        } else {\n            screenConstraint.video = false;\n\n            if (respoke.needsChromeExtension || respoke.isNwjs) {\n                params.receiveOnly = true;\n                screenConstraint.audio = false;\n            } else {\n                screenConstraint.audio = true;\n            }\n        }\n        return that.startCall(params);\n    };\n\n    /**\n     * Create a new call.\n     *\n     *     endpoint.startCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {Array<RTCConstraints>} [params.constraints]\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n     * video attached to it.\n     * @returns {respoke.Call}\n     */\n    that.startCall = function (params) {\n        var call = null;\n        params = params || {};\n\n        params.constraints = respoke.convertConstraints(params.constraints, [{\n            video: true,\n            audio: true,\n            mandatory: {},\n            optional: []\n        }]);\n\n        // If they are requesting a screen share by constraints without having called startScreenShare\n        if (params.target !== 'screenshare' && params.constraints[0] &&\n                respoke.constraintsHasScreenShare(params.constraints[0])) {\n            return that.startScreenShare(params);\n        }\n\n        params.target = params.target || \"call\";\n\n        log.debug('Endpoint.call', params);\n        client.verifyConnected();\n        if (typeof params.caller !== 'boolean') {\n            params.caller = true;\n        }\n\n        if (!that.id) {\n            log.error(\"Can't start a call without endpoint ID!\");\n            return;\n        }\n\n        params.instanceId = instanceId;\n        params.remoteEndpoint = that;\n\n        params.signalOffer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'offer';\n            signalParams.target = params.target;\n            signalParams.recipient = that;\n\n            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n        };\n        params.signalAnswer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'answer';\n            signalParams.target = params.target;\n            signalParams.recipient = that;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n                signalParams.call.hangup({signal: false});\n            });\n        };\n        params.signalConnected = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.connectionId = signalParams.call.connectionId;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalParams.recipient = that;\n            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n                signalParams.call.hangup();\n            });\n        };\n        params.signalModify = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.recipient = that;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalingChannel.sendModify(signalParams).done();\n        };\n        params.signalCandidate = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.recipient = that;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalingChannel.sendCandidate(signalParams).done();\n        };\n        params.signalHangup = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.recipient = that;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalingChannel.sendHangup(signalParams).done();\n        };\n        params.signalReport = function (signalParams) {\n            log.debug(\"Sending debug report\", signalParams.report);\n            signalingChannel.sendReport(signalParams).done();\n        };\n\n        params.signalingChannel = signalingChannel;\n        call = respoke.Call(params);\n        addCall({call: call});\n        return call;\n    };\n\n    /**\n     * Create a new DirectConnection.  This method creates a new Call as well, attaching this DirectConnection to\n     * it for the purposes of creating a peer-to-peer link for sending data such as messages to the other endpoint.\n     * Information sent through a DirectConnection is not handled by the cloud infrastructure.  If there is already\n     * a direct connection open, this method will resolve the promise with that direct connection instead of\n     * attempting to create a new one.\n     *\n     *     endpoint.startDirectConnection({\n     *         onOpen: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startDirectConnection\n     * @param {object} params\n     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess] - Success handler for this\n     * invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {respoke.DirectConnection.onStart} [params.onStart] - A callback for when setup of the direct\n     * connection begins. The direct connection will not be open yet.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - A callback for receiving notification of when\n     * the DirectConnection is open and ready to be used.\n     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n     * connection.\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - A callback for receiving notification of\n     * when the DirectConnection is closed and the two Endpoints are disconnected.\n     * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the\n     * request for a direct connection and setup begins.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - A callback for receiving messages sent\n     * through the DirectConnection.\n     * @param {string} [params.connectionId] - An optional connection ID to use for this connection. This allows\n     * the connection to be made to a specific instance of an endpoint in the case that the same endpoint is logged\n     * in from multiple locations.\n     * @returns {respoke.DirectConnection} The DirectConnection which can be used to send data and messages\n     * directly to the other endpoint.\n     */\n    that.startDirectConnection = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n        var call;\n\n        try {\n            client.verifyConnected();\n        } catch (err) {\n            deferred.reject(err);\n            return retVal;\n        }\n\n        if (that.directConnection || params.create === false) {\n            deferred.resolve(that.directConnection);\n            return retVal;\n        }\n\n        if (typeof params.caller !== 'boolean') {\n            params.caller = true;\n        }\n\n        if (!that.id) {\n            deferred.reject(new Error(\"Can't start a direct connection without endpoint ID!\"));\n            return retVal;\n        }\n\n        params.instanceId = instanceId;\n        params.remoteEndpoint = that;\n\n        params.signalOffer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'offer';\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n\n            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n        };\n        params.signalConnected = function (signalParams) {\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n                signalParams.call.hangup();\n            });\n        };\n        params.signalAnswer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n            signalParams.signalType = 'answer';\n            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n                signalParams.call.hangup({signal: false});\n            });\n        };\n        params.signalCandidate = function (signalParams) {\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n            signalingChannel.sendCandidate(signalParams).done();\n        };\n        params.signalHangup = function (signalParams) {\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n            signalingChannel.sendHangup(signalParams).done();\n        };\n        params.signalReport = function (signalParams) {\n            signalParams.report.target = 'directConnection';\n            log.debug(\"Not sending report\");\n            log.debug(signalParams.report);\n        };\n        params.needDirectConnection = true;\n        // Don't include audio in the offer SDP\n        params.offerOptions = {\n            mandatory: {\n                OfferToReceiveAudio: false\n            }\n        };\n\n        params.signalingChannel = signalingChannel;\n        call = respoke.Call(params);\n        addCall({call: call});\n        call.listen('direct-connection', function directConnectionHandler(evt) {\n            that.directConnection = evt.directConnection;\n            if (params.caller !== true) {\n                if (!client.hasListeners('direct-connection') &&\n                        !client.hasListeners('direct-connection') &&\n                        !call.hasListeners('direct-connection')) {\n                    that.directConnection.reject();\n                    deferred.reject(new Error(\"Got an incoming direct connection with no handlers to accept it!\"));\n                    return;\n                }\n\n                deferred.resolve(that.directConnection);\n                that.directConnection.listen('close', function closeHandler(evt) {\n                    that.directConnection = undefined;\n                }, true);\n            }\n        }, true);\n\n        return retVal;\n    };\n\n    /**\n     * Find the presence out of all known connections with the highest priority (most availability)\n     * and set it as the endpoint's resolved presence.\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.resolvePresence\n     * @private\n     */\n    that.resolvePresence = function () {\n\n        var presenceList = that.connections.map(function (connection) {\n            return connection.presence;\n        });\n\n        if (resolveEndpointPresence !== undefined) {\n            that.presence = resolveEndpointPresence(presenceList);\n        } else {\n            var options = ['chat', 'available', 'away', 'dnd', 'xa', 'unavailable'];\n            var idList;\n\n            /*\n             * Sort the connections array by the priority of the value of the presence of that\n             * connectionId. This will cause the first element in the list to be the id of the\n             * session with the highest priority presence so we can access it by the 0 index.\n             * TODO: If we don't really care about the sorting and only about the highest priority\n             * we could use Array.prototype.every to improve this algorithm.\n             */\n            idList = that.connections.sort(function sorter(a, b) {\n                var indexA = options.indexOf(a.presence);\n                var indexB = options.indexOf(b.presence);\n                // Move it to the end of the list if it isn't one of our accepted presence values\n                indexA = indexA === -1 ? 1000 : indexA;\n                indexB = indexB === -1 ? 1000 : indexB;\n                return indexA < indexB ? -1 : (indexB < indexA ? 1 : 0);\n            });\n\n            if (idList[0]) {\n                that.presence = idList[0].presence;\n            } else {\n                that.presence = 'unavailable';\n            }\n        }\n    };\n\n    /**\n     * Get the Connection with the specified id. The connection ID is optional if only one connection exists.\n     *\n     *     var connection = endpoint.getConnection({\n     *         connectionId: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\"\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.getConnection\n     * @private\n     * @param {object} params\n     * @param {string} [params.connectionId]\n     * @return {respoke.Connection}\n     */\n    that.getConnection = function (params) {\n        var connection = null;\n        params = params || {};\n        if (that.connections.length === 1 &&\n                (!params.connectionId || that.connections[0] === params.connectionId)) {\n            return that.connections[0];\n        }\n\n        if (!params || !params.connectionId) {\n            throw new Error(\"Can't find a connection without the connectionId.\");\n        }\n\n        that.connections.every(function eachConnection(conn) {\n            if (conn.id === params.connectionId) {\n                connection = conn;\n                return false;\n            }\n            return true;\n        });\n\n        return connection;\n    };\n\n    return that;\n}; // End respoke.Endpoint\n/**\n * Handle messages sent to the logged-in user from this one Endpoint.  This callback is called every time\n * respoke.Endpoint#message fires.\n * @callback respoke.Endpoint.onMessage\n * @param {respoke.Event} evt\n * @param {respoke.TextMessage} evt.message - the message\n * @param {respoke.Endpoint} evt.target\n * @param {string} evt.name - the event name\n */\n/**\n * Handle presence notifications from this one Endpoint.  This callback is called every time\n * respoke.Endpoint#message fires.\n * @callback respoke.Endpoint.onPresence\n * @param {respoke.Event} evt\n * @param {string|number|object|Array} evt.presence - the Endpoint's presence\n * @param {respoke.Endpoint} evt.target\n * @param {string} evt.name - the event name\n */\n /**\n * Handle resolving presence for this endpoint\n * @callback respoke.Client.resolveEndpointPresence\n * @param {Array<object>} connectionPresence\n * @returns {object|string|number}\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/endpoint.js\n ** module id = 7\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\n/**\n * A text message and the information needed to route it.\n * @class respoke.TextMessage\n * @constructor\n * @param {object} params\n * @param {string} [params.endpointId] - If sending, endpoint ID of the thing we're sending a message to.\n * @param {string} [params.connectionId] - If sending, connection ID of the thing we're sending a message to.\n * @param {string} [params.message] - If sending, a message to send\n * @param {object} [params.rawMessage] - If receiving, the parsed JSON we got from the server\n * @private\n * @returns {respoke.TextMessage}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = {};\n\n    /**\n     * Parse rawMessage and set attributes required for message delivery.\n     * @memberof! respoke.TextMessage\n     * @method respoke.TextMessage.parse\n     * @private\n     */\n    function parse() {\n        if (params.rawMessage) {\n            try {\n                that.endpointId = params.rawMessage.header.from;\n                that.connectionId = params.rawMessage.header.fromConnection;\n                that.timestamp = params.rawMessage.header.timestamp;\n            } catch (e) {\n                throw new Error(e);\n            }\n            that.message = params.rawMessage.message || params.rawMessage.body;\n            if (params.rawMessage.header.channel) {\n                that.recipient = params.rawMessage.header.channel;\n            }\n        } else {\n            try {\n                that.to = params.endpointId;\n                that.toConnection = params.connectionId;\n                that.requestConnectionReply = (params.requestConnectionReply === true);\n            } catch (e) {\n                throw new Error(e);\n            }\n            that.message = params.message;\n        }\n    }\n\n    parse();\n    return that;\n}; // End respoke.TextMessage\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/textMessage.js\n ** module id = 8\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\n/**\n * A signaling message and the information needed to route it.\n * @class respoke.SignalingMessage\n * @constructor\n * @param {object} params\n * @param {string} [params.fromEndpoint] - If sending, the endpoint ID of the recipient\n * @param {string} [params.fromConnection] - If sending, the connection ID of the recipient\n * @param {string} [params.connectionId] - The connectionId of the endpoint whose answer signal has been accepted.\n * @param {string} [params.signal] - If sending, a message to send\n * @param {respoke.Endpoint} [params.recipient]\n * @param {string} [params.signalType]\n * @param {string} [params.sessionId] - A globally unique ID to identify this call.\n * @param {string} [params.target] - Either 'call' or 'directConnection', TODO remove the need for this.\n * @param {string} [params.callerId] - Human readable caller ID. Not implemented.\n * @param {RTCSessionDescription} [params.sdp]\n * @param {Array<RTCIceCandidate>} [params.iceCandidates]\n * @param {object} [params.offering] - Object describing the media we're offering to send the remote party in a more\n * usable way than SDP. Not implemented.\n * @param {object} [params.requesting] - Object describing the media we're requesting from the remote party in a more\n * usable way than SDP. Not implemented.\n * @param {string} [params.reason] - Human readable reason for hanging up.\n * @param {string} [params.error] - String indicating that a previous signal was malformed or received in the wrong\n * state. Not implemented.\n * @param {string} [params.status] - \"Ringing\". Not implemented.\n * @param {object} [params.rawMessage] - If receiving, the parsed JSON we got from the server\n * @private\n * @returns {respoke.SignalingMessage}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = {};\n    /**\n     * Attributes without which we cannot build a signaling message.\n     * @memberof! respoke.SignalingMessage\n     * @name required\n     * @private\n     * @type {string}\n     */\n    var required = ['recipient', 'signalType', 'sessionId', 'target', 'signalId'];\n    /**\n     * Attributes which we will copy onto the signal if defined.\n     * @memberof! respoke.SignalingMessage\n     * @name required\n     * @private\n     * @type {string}\n     */\n    var allowed = [\n        'signalType', 'sessionId', 'sessionDescription', 'iceCandidates', 'offering', 'target', 'signalId', 'callerId',\n        'requesting', 'reason', 'error', 'status', 'connectionId', 'version'\n    ];\n\n    params.version = '1.0';\n\n    /**\n     * Parse rawMessage and set attributes required for message delivery.\n     * @memberof! respoke.SignalingMessage\n     * @method respoke.SignalingMessage.parse\n     * @private\n     */\n    function parse() {\n        if (params.rawMessage) {\n            try {\n                that = JSON.parse(params.rawMessage.body); // Incoming message\n            } catch (e) {\n                that = params.rawMessage.body;\n            }\n            that.fromType = params.rawMessage.header.fromType;\n            that.fromEndpoint = params.rawMessage.header.from;\n            that.fromConnection = params.rawMessage.header.fromConnection;\n            that.timestamp = params.rawMessage.header.timestamp;\n\n            if (!that.target) {\n                that.target = 'call';\n            }\n        } else {\n            required.forEach(function eachAttr(attr) {\n                if (params[attr] === 0 || !params[attr]) {\n                    throw new Error(\"Can't build a signaling without \" + attr);\n                }\n            });\n\n            allowed.forEach(function eachAttr(attr) {\n                if (params[attr] === 0 || params[attr]) {\n                    that[attr] = params[attr];\n                }\n            });\n        }\n    }\n\n    parse();\n    return that;\n}; // End respoke.SignalingMessage\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/signalingMessage.js\n ** module id = 9\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\n\n/**\n * A `respoke.Group` represents a collection of endpoints.\n *\n * There are methods to communicate with the endpoints at the group level and track\n * their presence in the group.\n *\n * @class respoke.Group\n * @augments respoke.EventEmitter\n * @constructor\n * @param {object} params\n * @param {string} params.instanceId\n * @param {respoke.Group.onJoin} params.onJoin - A callback to receive notifications every time a new\n * endpoint has joined the group. This callback does not get called when the client joins the group.\n * @param {respoke.Group.onMessage} params.onMessage - A callback to receive messages sent to the group from\n * remote endpoints.\n * @param {respoke.Group.onLeave} params.onLeave - A callback to receive notifications every time a new\n * endpoint has left the group. This callback does not get called when the client leaves the group.\n * @returns {respoke.Group}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n\n    var that = respoke.EventEmitter(params);\n    /**\n     * @memberof! respoke.Group\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var client = respoke.getClient(instanceId);\n\n    if (!that.id) {\n        throw new Error(\"Can't create a group without an ID.\");\n    }\n\n    /**\n     * Internal reference to the api signaling channel.\n     * @memberof! respoke.Group\n     * @name signalingChannel\n     * @type respoke.SignalingChannel\n     * @private\n     */\n    var signalingChannel = params.signalingChannel;\n    delete params.signalingChannel;\n\n    /**\n     * The connections to members of this group.\n     * @memberof! respoke.Group\n     * @name endpoints\n     * @type {array<respoke.Connection>}\n     */\n    that.connections = [];\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.Group\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Group';\n    that.listen('join', params.onJoin);\n    /**\n     * Indicates that a message has been sent to this group.\n     * @event respoke.Group#message\n     * @type {respoke.Event}\n     * @property {respoke.TextMessage} message\n     * @property {string} name - The event name.\n     * @property {respoke.Group} target\n     */\n    that.listen('message', params.onMessage);\n    that.listen('leave', params.onLeave);\n    client.listen('disconnect', function disconnectHandler() {\n        that.connections = [];\n    });\n\n    delete that.instanceId;\n    delete that.onMessage;\n    delete that.onPresence;\n    delete that.onJoin;\n    delete that.onLeave;\n\n    /**\n     * Join this group.\n     *\n     *     group.join().done(function () {\n     *         group.sendMessage({\n     *             message: \"Hey, ppl! I'm here!\"\n     *         });\n     *     }, function (err) {\n     *         // Couldn't join the group, possibly permissions error\n     *     });\n     *\n     * **Using callbacks** will disable promises.\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.join\n     * @return {Promise|undefined}\n     * @param {object} params\n     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @fires respoke.Client#join\n     */\n    that.join = function () {\n        var params = {\n            id: that.id\n        };\n        var promise;\n        var deferred;\n        var retVal;\n\n        try {\n            validateConnection();\n        } catch (err) {\n            deferred = Q.defer();\n            retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n            deferred.reject(err);\n            return retVal;\n        }\n\n        promise = client.join(params);\n        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n        return retVal;\n    };\n\n    /**\n     * Leave this group. If this method is called multiple times synchronously, it will batch requests and\n     * only make one API call to Respoke.\n     *\n     *     group.leave({\n     *         onSuccess: function () {\n     *             // good riddance\n     *         },\n     *         onError: function (err) {\n     *             // Couldn't leave the group, possibly a permissions error\n     *         }\n     *     });\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.leave\n     * @param {object} params\n     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @return {Promise|undefined}\n     * @fires respoke.Client#leave\n     */\n    that.leave = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n        try {\n            validateConnection();\n            validateMembership();\n        } catch (err) {\n            deferred.reject(err);\n            return retVal;\n        }\n\n        signalingChannel.leaveGroup({\n            groupList: [that.id]\n        }).done(function successHandler() {\n            that.connections = [];\n            deferred.resolve();\n\n            /**\n             * This event is fired when the client leaves a group.\n             * @event respoke.Client#leave\n             * @type {respoke.Event}\n             * @property {respoke.Group} group\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             * @private\n             */\n            client.fire('leave', {\n                group: that\n            });\n        }, function errorHandler(err) {\n            deferred.reject();\n        });\n        return retVal;\n    };\n\n    /**\n     * Remove a Connection from a Group. This does not change the status of the remote Endpoint, it only changes the\n     * internal representation of the Group membership. This method should only be used internally.\n     * @private\n     * @memberof! respoke.Group\n     * @method respoke.Group.removeMember\n     * @param {object} params\n     * @param {string} [params.connectionId] - Endpoint's connection id\n     * @fires respoke.Group#leave\n     */\n    that.removeMember = function (params) {\n        params = params || {};\n\n        try {\n            validateConnection();\n            validateMembership();\n        } catch (err) {\n            return;\n        }\n\n        if (!params.connectionId) {\n            throw new Error(\"Can't remove a member to the group without it's Connection id.\");\n        }\n\n        that.connections.every(function eachConnection(conn, index) {\n            if (conn.id === params.connectionId) {\n                that.connections.splice(index, 1);\n\n                /**\n                 * This event is fired when a member leaves a group the client is a member of.\n                 * @event respoke.Group#leave\n                 * @type {respoke.Event}\n                 * @property {respoke.Connection} connection - The connection that left the group.\n                 * @property {string} name - The event name.\n                 * @property {respoke.Group} target\n                 */\n                that.fire('leave', {\n                    connection: conn\n                });\n                return false;\n            }\n            return true;\n        });\n    };\n\n    /**\n     * Return true if the logged-in user is a member of this group and false if not.\n     *\n     *     if (group.isJoined()) {\n     *         // I'm a member!\n     *     } else {\n     *         // Maybe join here\n     *     }\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.isJoined\n     * @returns {boolean}\n     */\n    that.isJoined = function () {\n        // connections array contains some connections and ours is among them.\n        return (that.connections.length > 0 && !that.connections.every(function (conn) {\n            return conn.id !== client.connectionId;\n        }));\n    };\n\n    /**\n     * Add a Connection to a group. This does not change the status of the remote Endpoint, it only changes the\n     * internal representation of the Group membership. This method should only be used internally.\n     * @memberof! respoke.Group\n     * @private\n     * @method respoke.Group.addMember\n     * @param {object} params\n     * @param {respoke.Connection} params.connection\n     * @fires respoke.Group#join\n     */\n    that.addMember = function (params) {\n        params = params || {};\n        var absent;\n\n        validateConnection();\n\n        if (!params.connection) {\n            throw new Error(\"Can't add a member to the group without it's Connection object.\");\n        }\n\n        absent = that.connections.every(function eachConnection(conn) {\n            return (conn.id !== params.connection.id);\n        });\n\n        if (absent) {\n            that.connections.push(params.connection);\n            if (params.skipEvent) {\n                return;\n            }\n\n            /**\n             * This event is fired when a member joins a Group that the currently logged-in endpoint is a member\n             * of.\n             * @event respoke.Group#join\n             * @type {respoke.Event}\n             * @property {respoke.Connection} connection - The connection that joined the group.\n             * @property {string} name - The event name.\n             * @property {respoke.Group} target\n             */\n            that.fire('join', {\n                connection: params.connection\n            });\n        }\n    };\n\n    /**\n     * Validate that the client is connected to the Respoke infrastructure.\n     * @memberof! respoke.Group\n     * @method respoke.Group.validateConnection\n     * @private\n     */\n    function validateConnection() {\n        if (!signalingChannel || !signalingChannel.isConnected()) {\n            throw new Error(\"Can't complete request when not connected. Please reconnect!\");\n        }\n    }\n\n    /**\n     * Validate that the client is a member of this group.\n     * @memberof! respoke.Group\n     * @method respoke.Group.validateMembership\n     * @private\n     */\n    function validateMembership() {\n        if (!that.isJoined()) {\n            throw new Error(\"Not a member of this group anymore.\");\n        }\n    }\n\n    /**\n     *\n     * Send a message to all of the endpoints in the group.\n     *\n     *      var group = client.getGroup({ id: 'js-enthusiasts'});\n     *\n     *      group.sendMessage({\n     *          message: \"Cat on keyboard\",\n     *          onSuccess: function (evt) {\n     *              console.log('Message was sent');\n     *          }\n     *      });\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.sendMessage\n     * @param {object} params\n     * @param {string} params.message - The message.\n     * @param {function} params.onSuccess - Success handler indicating that the message was delivered.\n     * @param {function} params.onError - Error handler indicating that the message was not delivered.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        params = params || {};\n        params.id = that.id;\n        var promise;\n\n        try {\n            validateConnection();\n            validateMembership();\n        } catch (err) {\n            promise = Q.reject(err);\n        }\n\n        return respoke.handlePromise(promise ? promise : signalingChannel.publish(params),\n                params.onSuccess, params.onError);\n    };\n\n    /**\n     * Get group members\n     *\n     * Get an array containing all connections subscribed to the group. Accepts onSuccess or onError parameters,\n     * or it returns a promise that you can observe. An endpoint may have more than one connection subscribed to\n\t * a group, so if you're interested in unique endpoints, you may want to filter the connections by endpointId.\n     *\n     *     group.getMembers({\n     *         onSuccess: function (connections) {\n     *             connections.forEach(function (connection) {\n     *                 console.log(connection.endpoint.id);\n     *             });\n     *         }\n     *     });\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.getMembers\n     * @param {object} params\n     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Success handler for this invocation of this method only.\n     * @returns {Promise<Array>} A promise to an array of Connections.\n     */\n    that.getMembers = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n        try {\n            validateConnection();\n            validateMembership();\n        } catch (err) {\n            deferred.reject(err);\n            return retVal;\n        }\n\n        signalingChannel.getGroupMembers({\n            id: that.id\n        }).done(function successHandler(list) {\n            var endpointList = [];\n            list.forEach(function eachMember(params) {\n                var connection = client.getConnection({\n                    endpointId: params.endpointId,\n                    connectionId: params.connectionId,\n                    skipCreate: true\n                });\n\n                if (!connection) {\n                    // Create the connection\n                    connection = client.getConnection({\n                        endpointId: params.endpointId,\n                        connectionId: params.connectionId\n                    });\n                }\n\n                if (endpointList.indexOf(params.endpointId) === -1) {\n                    endpointList.push(params.endpointId);\n                }\n                that.addMember({\n                    connection: connection,\n                    skipEvent: true\n                });\n            });\n\n            deferred.resolve(that.connections);\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return retVal;\n    };\n\n    return that;\n}; // End respoke.Group\n/**\n * Receive notification that an endpoint has joined this group. This callback is called everytime\n * respoke.Group#join is fired.\n * @callback respoke.Group.onJoin\n * @param {respoke.Event} evt\n * @param {respoke.Connection} evt.connection\n * @param {string} evt.name - the event name.\n * @param {respoke.Group} evt.target\n */\n/**\n * Receive notification that an endpoint has left this group. This callback is called everytime\n * respoke.Group#leave is fired.\n * @callback respoke.Group.onLeave\n * @param {respoke.Event} evt\n * @param {respoke.Connection} evt.connection\n * @param {string} evt.name - the event name.\n * @param {respoke.Group} evt.target\n */\n/**\n * Receive notification that a message has been received to a group. This callback is called every time\n * respoke.Group#message is fired.\n * @callback respoke.Group.onMessage\n * @param {respoke.Event} evt\n * @param {respoke.TextMessage} evt.message\n * @param {string} evt.name - the event name.\n * @param {respoke.Group} evt.target\n */\n/**\n * Get a list of the Connections which are members of this Group.\n * @callback respoke.Group.connectionsHandler\n * @param {Array<respoke.Connection>} connections\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/group.js\n ** module id = 10\n ** module chunks = 0\n **/","'use strict';\n/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar log = require('loglevel');\nvar Q = require('q');\nvar io = require('socket.io-client');\nvar respoke = require('./respoke');\n\n/**\n * Returns a timestamp, measured in milliseconds.\n *\n * This method will use high resolution time, if available. Otherwise it falls back to just\n * using the wall clock.\n *\n * @return {number} Number of milliseconds that have passed since some point in the past.\n * @private\n */\nvar now;\nvar performance;\nif (performance && performance.now) {\n    now = performance.now.bind(performance);\n} else if (Date.now) {\n    now = Date.now.bind(Date);\n} else {\n    now = function () {\n        return new Date().getTime();\n    };\n}\n\n/**\n * Container for holding requests that are currently waiting on responses.\n * @returns {PendingRequests}\n * @private\n * @constructor\n */\nvar PendingRequests = function () {\n    /**\n     * Pending requests.\n     * @private\n     * @type {Array}\n     */\n    var contents = [];\n    /**\n     * Counter to provide the next id.\n     * @private\n     * @type {number}\n     */\n    var counter = 0;\n    var that = {};\n\n    /**\n     * Add a new pending request.\n     *\n     * @memberof PendingRequests\n     * @param obj\n     * @returns {*} The key to use for the `remove` method.\n     */\n    that.add = function (obj) {\n        contents[counter] = obj;\n        counter++;\n        return counter;\n    };\n\n    /**\n     * Remove a pending request.\n     *\n     * @param {*} key Key returned from `add` method.\n     */\n    that.remove = function (key) {\n        delete contents[key];\n    };\n\n    /**\n     * Disposes of any currently pending requests, synchronously invoking the provided function on\n     * each.\n     *\n     * @param {function} [fn] Callback for pending requests.\n     */\n    that.reset = function (fn) {\n        if (fn) {\n            contents.forEach(fn);\n        }\n        contents = [];\n    };\n\n    return that;\n};\n\n/**\n * The purpose of this class is to make a method call for each API call\n * to the backend REST interface.  This class takes care of App authentication, websocket connection,\n * Endpoint authentication, and all App interactions thereafter.  Almost all methods return a Promise.\n * @class respoke.SignalingChannel\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.instanceId - client id\n * @private\n * @returns {respoke.SignalingChannel}\n */\nmodule.exports = function (params) {\n    params = params || {};\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name className\n     * @type {string}\n     * @private\n     */\n    that.className = 'respoke.SignalingChannel';\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name client\n     * @private\n     * @type {respoke.Client}\n     */\n    var client = respoke.getClient(instanceId);\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name socket\n     * @private\n     * @type {Socket.io.Socket}\n     */\n    var socket = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name clientSettings\n     * @private\n     * @type {object}\n     */\n    var clientSettings = params.clientSettings;\n    delete that.clientSettings;\n    clientSettings.baseURL = clientSettings.baseURL || 'https://api.respoke.io';\n    /**\n     * A map to avoid duplicate endpoint presence registrations.\n     * @memberof! respoke.SignalingChannel\n     * @name presenceRegistered\n     * @private\n     * @type {object}\n     */\n    var presenceRegistered = {};\n    /**\n     * A reference to the private function Client.actuallyConnect that gets set in SignalingChannel.open() so we\n     * don't have to make it public.\n     * @memberof! respoke.SignalingChannel\n     * @name actuallyConnect\n     * @private\n     * @type {function}\n     */\n    var actuallyConnect = null;\n    /**\n     * Set of promises for any pending requests on the WebSocket.\n     * @private\n     * @type {PendingRequests}\n     */\n    var pendingRequests = PendingRequests();\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name reconnectTimeout\n     * @private\n     * @type {number}\n     */\n    var reconnectTimeout = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name maxReconnectTimeout\n     * @private\n     * @type {number}\n     */\n    var maxReconnectTimeout = 5 * 60 * 1000;\n    /**\n     * Rejects a message if the body size is greater than this. It is enforced servcer side, so changing this\n     * won't make the bodySizeLimit any bigger, this just gives you a senseable error if it's too big.\n     * @memberof! respoke.signalingChannel\n     * @name bodySizeLimit\n     * @private\n     * @type {number}\n     */\n    var bodySizeLimit = 20000;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name appId\n     * @private\n     * @type {string}\n     */\n    var appId = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name endpointId\n     * @private\n     * @type {string}\n     */\n    var endpointId = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name token\n     * @private\n     * @type {string}\n     */\n    var token = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name appToken\n     * @private\n     * @type {string}\n     */\n    var appToken = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name xhr\n     * @private\n     * @type {XMLHttpRequest}\n     */\n    var xhr = new XMLHttpRequest();\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name routingMethods\n     * @private\n     * @type {object}\n     * @desc The methods contained in this object are statically defined methods that are called by constructing\n     * their names dynamically. 'do' + $className + $signalType == 'doCallOffer', et. al.\n     */\n    var routingMethods = {};\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name handlerQueue\n     * @private\n     * @type {object}\n     */\n    var handlerQueue = {\n        'message': [],\n        'signal': [],\n        'presence': []\n    };\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name errors\n     * @private\n     * @type {object}\n     */\n    var errors = {\n        400: \"Can't perform this action: missing or invalid parameters.\",\n        401: \"Can't perform this action: not authenticated.\",\n        403: \"Can't perform this action: not authorized.\",\n        404: \"Item not found.\",\n        409: \"Can't perform this action: item in the wrong state.\",\n        429: \"API rate limit was exceeded.\",\n        500: \"Can't perform this action: server problem.\"\n    };\n\n    /**\n     * Indicate whether the signaling channel has a valid connection to Respoke.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.isConnected\n     * @return {boolean}\n     */\n    that.isConnected = function () {\n        return !!(socket && socket.socket.connected);\n    };\n\n    /**\n     * Indicate whether the signaling channel is currently waiting on a websocket to connect.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.isConnecting\n     * @private\n     * @return {boolean}\n     */\n    function isConnecting() {\n        return !!(socket && socket.socket.connecting);\n    }\n\n    /**\n     * Get the call debug preference.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.isSendingReport\n     * @private\n     * @return {boolean}\n     */\n    that.isSendingReport = function (params) {\n        return clientSettings.enableCallDebugReport;\n    };\n\n    /**\n     * Open a connection to the REST API and validate the app, creating a session token.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.open\n     * @private\n     * @param {object} params\n     * @param {string} [params.token] - The Endpoint's auth token\n     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @return {Promise}\n     */\n    that.open = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug('SignalingChannel.open', params, clientSettings);\n        token = params.token || token;\n        actuallyConnect = typeof params.actuallyConnect === 'function' ? params.actuallyConnect : actuallyConnect;\n\n        Q.fcall(function tokenPromise() {\n            if (clientSettings.developmentMode === true && clientSettings.appId && params.endpointId) {\n                return that.getToken({\n                    appId: clientSettings.appId,\n                    endpointId: params.endpointId\n                });\n            }\n            return null;\n        }).then(function successHandler(newToken) {\n            token = newToken || token;\n            return doOpen({token: token});\n        }).done(function successHandler() {\n            deferred.resolve();\n            log.debug('client', client);\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Get a developer mode token for an endpoint. App must be in developer mode.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getToken\n     * @private\n     * @param {object} params\n     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @return {Promise<String>}\n     */\n    that.getToken = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug('SignalingChannel.getToken', params);\n\n        var callParams = {\n            path: '/v1/tokens',\n            httpMethod: 'POST',\n            parameters: {\n                appId: clientSettings.appId,\n                endpointId: params.endpointId,\n                ttl: 60 * 60 * 6\n            }\n        };\n\n        call(callParams).done(function (response) {\n            if (response.code === 200 && response.result && response.result.tokenId) {\n                token = response.result.tokenId;\n                deferred.resolve(response.result.tokenId);\n                return;\n            }\n            deferred.reject(new Error(\"Couldn't get a developer mode token: \" + response.error));\n        }, function (err) {\n            deferred.reject(new Error(\"Couldn't get a developer mode token: \" + err));\n        });\n        return deferred.promise;\n    };\n\n    /**\n     * Open a connection to the REST API and validate the app, creating a session token.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.doOpen\n     * @param {object} params\n     * @param {string} params.token - The Endpoint's auth token\n     * @return {Promise}\n     * @private\n     */\n    function doOpen(params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug('SignalingChannel.doOpen', params);\n\n        if (!params.token) {\n            deferred.reject(new Error(\"Can't open connection to Respoke without a token.\"));\n            return deferred.promise;\n        }\n\n        call({\n            path: '/v1/session-tokens',\n            httpMethod: 'POST',\n            parameters: {\n                tokenId: params.token\n            }\n        }).done(function (response) {\n            if (response.code === 200) {\n                appToken = response.result.token;\n                deferred.resolve();\n                log.debug(\"Signaling connection open to\", clientSettings.baseURL);\n            } else {\n                deferred.reject(new Error(\"Couldn't authenticate app: \" + response.error));\n            }\n        }, function (err) {\n            log.error(\"Network call failed:\", err.message);\n            deferred.reject(new Error(\"Couldn't authenticate app: \" + err.message));\n        });\n\n        return deferred.promise;\n    }\n\n    /**\n     * Close a connection to the REST API. Invalidate the session token.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.close\n     * @private\n     * @param {object} params\n     * @return {Promise}\n     */\n    that.close = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n\n        wsCall({\n            path: '/v1/connections/%s/',\n            httpMethod: 'DELETE',\n            objectId: client.endpointId\n        }).fin(function finallyHandler() {\n            return call({\n                path: '/v1/session-tokens',\n                httpMethod: 'DELETE'\n            });\n        }).fin(function finallyHandler() {\n            if (socket) {\n                socket.removeAllListeners();\n                socket.disconnect();\n            }\n            deferred.resolve();\n        }).done();\n\n        return deferred.promise;\n    };\n\n    /**\n     * Generate and send a presence message representing the client's current status. This triggers\n     * the server to send the client's endpoint's presence.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendPresence\n     * @private\n     * @param {object} params\n     * @param {string|number|object|Array} [params.presence=available]\n     * @param {string} [params.status] - Non-enumeration human-readable status.\n     * @param {string} [params.show] - I can't remember what this is.\n     * @returns {Promise}\n     */\n    that.sendPresence = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug(\"Signaling sendPresence\");\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/presence',\n            httpMethod: 'POST',\n            parameters: {\n                'presence': {\n                    show: params.show,\n                    'status': params.status,\n                    type: params.presence || \"available\"\n                }\n            }\n        }).done(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return deferred.promise;\n    };\n\n    /**\n     * Get or create a group in the infrastructure.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getGroup\n     * @private\n     * @returns {Promise<respoke.Group>}\n     * @param {object} params\n     * @param {string} name\n     */\n    that.getGroup = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug('signalingChannel.getGroup');\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            httpMethod: 'POST',\n            path: '/v1/channels/',\n            parameters: {\n                name: params.name\n            }\n        }).then(function successHandler(group) {\n            deferred.resolve(group);\n        }, function errorHandler(err) {\n            // Group was already created, just return back the same params we were given.\n            deferred.resolve({id: params.name});\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Leave a group. In order to aggregate subsequent repeated requests, this function, when called synchronously,\n     * will continue to accumulate group ids until the next tick of the event loop, when the request will be\n     * issued. The same instance of Promise is returned each time.\n     * @memberof! respoke.SignalingChannel\n     * @private\n     * @method respoke.SignalingChannel.leaveGroup\n     * @returns {Promise}\n     * @param {object} params\n     * @param {array} params.groupList\n     */\n    that.leaveGroup = (function () {\n        var groups = {};\n        var deferred = Q.defer();\n\n        return function (params) {\n            params = params || {};\n            params.groupList = params.groupList || [];\n\n            var toRun = (Object.keys(groups).length === 0);\n\n            if (!that.isConnected()) {\n                deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n                return deferred.promise;\n            }\n\n            params.groupList.forEach(function (id) {\n                if (typeof id === 'string') {\n                    groups[id] = true;\n                }\n            });\n\n            if (!toRun) {\n                return deferred.promise;\n            }\n\n            setTimeout(function () {\n                // restart accumulation\n                var groupList = Object.keys(groups);\n                groups = {};\n                var saveDeferred = deferred;\n                deferred = Q.defer();\n\n                if (groupList.length === 0) {\n                    saveDeferred.resolve();\n                    return;\n                }\n\n                wsCall({\n                    path: '/v1/groups/',\n                    parameters: {\n                        groups: groupList\n                    },\n                    httpMethod: 'DELETE'\n                }).done(function successHandler() {\n                    saveDeferred.resolve();\n                }, function errorHandler(err) {\n                    saveDeferred.reject(err);\n                });\n            });\n            return deferred.promise;\n        };\n    })();\n\n    /**\n     * Join a group. In order to aggregate subsequent repeated requests, this function, when called synchronously,\n     * will continue to accumulate group ids until the next tick of the event loop, when the request will be\n     * issued. The same instance of Promise is returned each time.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.joinGroup\n     * @private\n     * @returns {Promise}\n     * @param {object} params\n     * @param {array} params.groupList\n     */\n    that.joinGroup = (function () {\n        var groups = {};\n        var deferred = Q.defer();\n\n        return function (params) {\n            params = params || {};\n            params.groupList = params.groupList || [];\n\n            var toRun = (Object.keys(groups).length === 0);\n\n            if (!that.isConnected()) {\n                deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n                return deferred.promise;\n            }\n\n            params.groupList.forEach(function (id) {\n                if (typeof id === 'string') {\n                    groups[id] = true;\n                }\n            });\n\n            if (!toRun) {\n                return deferred.promise;\n            }\n\n            setTimeout(function () {\n                // restart accumulation\n                var groupList = Object.keys(groups);\n                groups = {};\n                var saveDeferred = deferred;\n                deferred = Q.defer();\n\n                if (groupList.length === 0) {\n                    saveDeferred.resolve();\n                    return;\n                }\n\n                wsCall({\n                    path: '/v1/groups/',\n                    parameters: {\n                        groups: groupList\n                    },\n                    httpMethod: 'POST'\n                }).done(function successHandler() {\n                    saveDeferred.resolve();\n                }, function errorHandler(err) {\n                    saveDeferred.reject(err);\n                });\n            });\n            return deferred.promise;\n        };\n    })();\n\n    /**\n     * Publish a message to a group.\n     * @memberof! respoke.SignalingChannel\n     * @private\n     * @method respoke.SignalingChannel.publish\n     * @returns {Promise}\n     * @param {object} params\n     * @param {string} params.id\n     * @param {string} params.message\n     */\n    that.publish = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var message = respoke.TextMessage({\n            endpointId: params.id,\n            message: params.message\n        });\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/channels/%s/publish/',\n            objectId: params.id,\n            httpMethod: 'POST',\n            parameters: message\n        }).done(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return deferred.promise;\n    };\n\n    /**\n     * Register as an observer of presence for the specified endpoint ids. In order to aggregate subsequent repeated\n     * requests, this function, when called synchronously, will continue to accumulate endpoint ids until the next\n     * tick of the event loop, when the request will be issued. The same instance of Promise is returned each time.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.registerPresence\n     * @private\n     * @param {object} params\n     * @param {Array<string>} params.endpointList\n     * @returns {Promise}\n     */\n    that.registerPresence = (function () {\n        var endpoints = {};\n        var deferred = Q.defer();\n\n        return function (params) {\n            params = params || {};\n            params.endpointList = params.endpointList || [];\n            var toRun = (Object.keys(endpoints).length === 0);\n\n            if (!that.isConnected()) {\n                return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            }\n\n            params.endpointList.forEach(function (ep) {\n                if (typeof ep === 'string' && presenceRegistered[ep] !== true) {\n                    endpoints[ep] = true;\n                }\n            });\n\n            if (!toRun) {\n                return deferred.promise;\n            }\n\n            setTimeout(function () {\n                // restart accumulation\n                var endpointList = Object.keys(endpoints);\n                endpoints = {};\n                var saveDeferred = deferred;\n                deferred = Q.defer();\n\n                if (endpointList.length === 0) {\n                    saveDeferred.resolve();\n                    return;\n                }\n\n                wsCall({\n                    httpMethod: 'POST',\n                    path: '/v1/presenceobservers',\n                    parameters: {\n                        endpointList: endpointList\n                    }\n                }).done(function successHandler() {\n                    params.endpointList.forEach(function eachId(id) {\n                        presenceRegistered[id] = true;\n                    });\n                    saveDeferred.resolve();\n                }, function (err) {\n                    saveDeferred.reject(err);\n                });\n            // We could even add a tiny delay like 10ms if we want to get more conservative and\n            // catch asychronous calls to client.getEndpoint() and other methods which call\n            // this method.\n            });\n\n            return deferred.promise;\n        };\n    })();\n\n    /**\n     * Join a group.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getGroupMembers\n     * @private\n     * @returns {Promise<Array>}\n     * @param {object} params\n     * @param {string} params.id\n     */\n    that.getGroupMembers = function (params) {\n        var deferred = Q.defer();\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        if (!params.id) {\n            deferred.reject(new Error(\"Can't get group's endpoints without group ID.\"));\n            return deferred.promise;\n        }\n\n        return wsCall({\n            path: '/v1/channels/%s/subscribers/',\n            objectId: params.id,\n            httpMethod: 'GET'\n        });\n    };\n\n    /**\n     * Send a chat message.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendMessage\n     * @private\n     * @param {object} params\n     * @param {respoke.SignalingMessage} params.message - The string text message to send.\n     * @param {respoke.Endpoint} params.recipient\n     * @param {string} [params.connectionId]\n     * @returns {Promise}\n     */\n    that.sendMessage = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var message = respoke.TextMessage({\n            endpointId: params.recipient.id,\n            connectionId: params.connectionId,\n            message: params.message\n        });\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/messages',\n            httpMethod: 'POST',\n            parameters: message\n        }).done(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return deferred.promise;\n    };\n\n    /**\n     * Send an ACK signal to acknowlege reception of a signal.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendACK\n     * @private\n     * @param {object} params\n     * @param {respoke.SignalingMessage} params.signal\n     * @return {Promise}\n     */\n    that.sendACK = function (params) {\n        var endpoint;\n        params = params || {};\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        if (!params.signal) {\n            return Q.reject(new Error(\"Can't send ACK, no signal was given.\"));\n        }\n\n        endpoint = client.getEndpoint({\n            id: params.signal.fromEndpoint,\n            skipPresence: true\n        });\n        if (!endpoint) {\n            return Q.reject(new Error(\"Can't send ACK, can't get endpoint.\"));\n        }\n\n        return that.sendSignal({\n            recipient: endpoint,\n            signalType: 'ack',\n            signalId: params.signal.signalId,\n            sessionId: params.signal.sessionId,\n            target: params.signal.target,\n            ackedSignalType: params.signal.signalType\n        });\n    };\n\n    /**\n     * Send a signaling message.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendSignal\n     * @private\n     * @param {object} params\n     * @param {respoke.Call} [params.call] - For getting the sessionId & connectionId. Not required for 'ack'.\n     * @return {Promise}\n     */\n    that.sendSignal = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var signal;\n        var to;\n        var toConnection;\n        var toType;\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        if (params.call) {\n            params.sessionId = params.call.id;\n            if (params.call.connectionId) { // the recipient's connectionId\n                params.connectionId = params.call.connectionId;\n            }\n        }\n\n        to = params.recipient.id;\n        toConnection = params.connectionId;\n        toType = params.toType || 'web';\n\n        try {\n            params.signalId = respoke.makeGUID();\n            // This will strip off non-signaling attributes.\n            signal = respoke.SignalingMessage(params);\n        } catch (e) {\n            deferred.reject(e);\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/signaling',\n            httpMethod: 'POST',\n            parameters: {\n                signal: JSON.stringify(signal),\n                to: to,\n                toConnection: toConnection,\n                toType: toType\n            }\n        }).done(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Send an ICE candidate.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendCandidate\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @param {string} [params.connectionId]\n     * @param {Array<RTCIceCandidate>} params.iceCandidates - An array of ICE candidate.\n     * @return {Promise}\n     */\n    that.sendCandidate = function (params) {\n        params = params || {};\n        params.signalType = 'iceCandidates';\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Send an SDP.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendSDP\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @param {string} [params.connectionId]\n     * @param {RTCSessionDescription} params.sessionDescription - An SDP to JSONify and send.\n     * @return {Promise}\n     */\n    that.sendSDP = function (params) {\n        params = params || {};\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        if (['offer', 'answer'].indexOf(params.signalType) === -1) {\n            return Q.reject(\"Not an SDP type signal.\");\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Send a call report to the cloud infrastructure.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendReport\n     * @private\n     * @param {object} params\n     * @todo TODO document the params.\n     * @return {Promise}\n     */\n    that.sendReport = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var message = {\n            debugData: params\n        };\n\n        if (!clientSettings.enableCallDebugReport) {\n            log.debug('not sending call debugs - disabled');\n            deferred.resolve();\n            return deferred.promise;\n        }\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/call-debugs',\n            httpMethod: 'POST',\n            parameters: message\n        }).done(function () {\n            deferred.resolve();\n        }, function (err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Send a message hanging up the WebRTC session.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendHangup\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @param {string} [params.connectionId]\n     * @param {string} params.reason - The reason the session is being hung up.\n     * @return {Promise}\n     */\n    that.sendHangup = function (params) {\n        params = params || {};\n        params.signalType = 'bye';\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Send a message to all connection ids indicating we have negotiated a call with one connection.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendConnected\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @return {Promise}\n     */\n    that.sendConnected = function (params) {\n        params = params || {};\n        params.signalType = 'connected';\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Send a message to the remote party indicating a desire to renegotiate media.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendModify\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @param {string} params.action - The state of the modify request, one of: 'initiate', 'accept', 'reject'\n     * @return {Promise}\n     */\n    that.sendModify = function (params) {\n        params = params || {};\n        params.signalType = 'modify';\n\n        if (['initiate', 'accept', 'reject'].indexOf(params.action) === -1) {\n            return Q.reject(\"No valid action in modify signal.\");\n        }\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Uppercase the first letter of the word.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.firstUpper\n     * @private\n     */\n    function firstUpper(str) {\n        return str[0].toUpperCase() + str.slice(1);\n    }\n\n    /**\n     * Route different types of signaling messages via events.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routeSignal\n     * @private\n     * @param {respoke.SignalingMessage} message - A message to route\n     * @fires respoke.Call#offer\n     * @fires respoke.Call#connected\n     * @fires respoke.Call#answer\n     * @fires respoke.Call#iceCandidates\n     * @fires respoke.Call#hangup\n     * @fires respoke.DirectConnection#offer\n     * @fires respoke.DirectConnection#connected\n     * @fires respoke.DirectConnection#answer\n     * @fires respoke.DirectConnection#iceCandidates\n     * @fires respoke.DirectConnection#hangup\n     */\n    that.routeSignal = function (signal) {\n        var target = null;\n        var method = 'do';\n\n        if (signal.signalType !== 'iceCandidates') { // Too many of these!\n            log.debug(signal.signalType, signal);\n        }\n\n        if (signal.target === undefined) {\n            throw new Error(\"target undefined\");\n        }\n\n        // Only create if this signal is an offer.\n        Q.fcall(function makePromise() {\n            var endpoint;\n            /*\n             * This will return calls regardless of whether they are associated\n             * with a direct connection or not, and it will create a call if no\n             * call is found and this signal is an offer. Direct connections get\n             * created in the next step.\n             */\n            target = client.getCall({\n                id: signal.sessionId,\n                endpointId: signal.fromEndpoint,\n                type: (signal.target === 'screenshare') ? 'screenshare' : signal.fromType,\n                create: (signal.target !== 'directConnection' && signal.signalType === 'offer')\n            });\n            if (target) {\n                return target;\n            }\n\n            if (signal.target === 'directConnection') {\n                // return a promise\n                endpoint = client.getEndpoint({\n                    id: signal.fromEndpoint,\n                    skipPresence: true\n                });\n\n                if (endpoint.directConnection && endpoint.directConnection.call.id === signal.sessionId) {\n                    return endpoint.directConnection;\n                }\n\n                return endpoint.startDirectConnection({\n                    id: signal.sessionId,\n                    create: (signal.signalType === 'offer'),\n                    caller: (signal.signalType !== 'offer')\n                });\n            }\n        }).done(function successHandler(target) {\n            // target might be null, a Call, or a DirectConnection.\n            if (target) {\n                target = target.call || target;\n            }\n            if (!target || target.id !== signal.sessionId) {\n                // orphaned signal\n                log.warn(\"Couldn't associate signal with a call.\", signal);\n                return;\n            }\n\n            method += firstUpper(signal.signalType);\n            routingMethods[method]({\n                call: target,\n                signal: signal\n            });\n        }, null);\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doOffer\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-offer\n     */\n    routingMethods.doOffer = function (params) {\n        params.call.connectionId = params.signal.fromConnection;\n        /**\n         * Send the `offer` signal into the Call.\n         * @event respoke.Call#signal-offer\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-offer', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doConnected\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-connected\n     */\n    routingMethods.doConnected = function (params) {\n        /**\n         * Send the `connected` signal into the Call.\n         * @event respoke.Call#signal-connected\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-connected', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.dModify\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-modify\n     */\n    routingMethods.doModify = function (params) {\n        /**\n         * Send the `modify` signal into the Call.\n         * @event respoke.Call#signal-modify\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-modify', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doAnswer\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-answer\n     */\n    routingMethods.doAnswer = function (params) {\n        params.call.connectionId = params.signal.fromConnection;\n        /**\n         * Send the `answer` signal into the Call.\n         * @event respoke.Call#signal-answer\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-answer', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doIceCandidates\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-icecandidates\n     */\n    routingMethods.doIceCandidates = function (params) {\n        /**\n         * Send the `icecandidates` signal into the Call.\n         * @event respoke.Call#signal-icecandidates\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-icecandidates', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doBye\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-hangup\n     */\n    routingMethods.doBye = function (params) {\n        /**\n         *  We may receive hangup from one or more parties after connectionId is set if the call is rejected\n         *  by a connection that didn't win the call. In this case, we have to ignore the signal since\n         *  we are already on a call. TODO: this should really be inside PeerConnection.\n         */\n        if (params.call.connectionId && params.call.connectionId !== params.signal.fromConnection) {\n            return;\n        }\n        /**\n         * Send the `hangup` signal into the Call.\n         * @event respoke.Call#signal-hangup\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-hangup', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doUnknown\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     */\n    routingMethods.doUnknown = function (params) {\n        log.error(\"Don't know what to do with\", params.signal.target, \"msg of unknown type\", params.signal.signalType);\n    };\n\n    /**\n     * Add a handler to the connection for messages of different types.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.addHandler\n     * @private\n     * @param {object} params\n     * @param {string} params.type - The type of socket message, i. e., 'message', 'presence', 'join'\n     * @param {function} params.handler - A function to which to pass the message\n     * @todo TODO See if this is necessary anymore\n     */\n    that.addHandler = function (params) {\n        if (socket.socket && socket.socket.open) {\n            socket.on(params.type, params.handler);\n        } else {\n            handlerQueue[params.type].push(params.handler);\n        }\n    };\n\n    /**\n     * Socket handler for pub-sub messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onPubSub\n     * @param {object} message The Socket.io message.\n     * @private\n     * @fires respoke.Group#message\n     * @fires respoke.Client#message\n     */\n    var onPubSub = function onPubSub(message) {\n        var group;\n        var groupMessage;\n\n        if (message.header.from === client.endpointId) {\n            return;\n        }\n\n        groupMessage = respoke.TextMessage({\n            rawMessage: message\n        });\n\n        group = client.getGroup({id: message.header.channel});\n        if (group) {\n            /**\n             * Indicate that a message has been received to a group.\n             * @event respoke.Group#message\n             * @type {respoke.Event}\n             * @property {respoke.TextMessage} message\n             * @property {string} name - the event name.\n             * @property {respoke.Group} target\n             */\n            group.fire('message', {\n                message: groupMessage\n            });\n        }\n        /**\n         * Indicate that a message has been received.\n         * @event respoke.Client#message\n         * @type {respoke.Event}\n         * @property {respoke.TextMessage} message\n         * @property {respoke.Group} [group] - If the message is to a group we already know about,\n         * this will be set. If null, the developer can use client.join({id: evt.message.header.channel}) to join\n         * the group. From that point forward, Group#message will fire when a message is received as well. If\n         * group is undefined instead of null, the message is not a group message at all.\n         * @property {string} name - the event name.\n         * @property {respoke.Client} target\n         */\n        client.fire('message', {\n            message: groupMessage,\n            group: group || null\n        });\n    };\n\n    /**\n     * Socket handler for join messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onJoin\n     * @param {object} message The Socket.io message.\n     * @private\n     */\n    var onJoin = function onJoin(message) {\n        var group;\n        var presenceMessage;\n        var endpoint;\n        var connection;\n\n        if (message.connectionId === client.connectionId) {\n            connection = client.getConnection({connectionId: message.connectionId, endpointId: message.endpointId});\n            group = client.getGroup({id: message.header.channel});\n            if (!group) {\n                group = respoke.Group({\n                    id: message.header.channel,\n                    instanceId: instanceId,\n                    signalingChannel: that\n                });\n                client.addGroup(group);\n            }\n            if (!group.isJoined()) {\n                group.addMember({connection: connection});\n                client.fire('join', {\n                    group: group\n                });\n            }\n        } else {\n\n            endpoint = client.getEndpoint({\n                skipPresence: true,\n                id: message.endpointId,\n                instanceId: instanceId,\n                name: message.endpointId\n            });\n\n            // Handle presence not associated with a channel\n            if (!connection) {\n                endpoint.setPresence({\n                    connectionId: message.connectionId\n                });\n                connection = client.getConnection({\n                    connectionId: message.connectionId,\n                    endpointId: message.endpointId\n                });\n            }\n\n            group = client.getGroup({id: message.header.channel});\n\n            if (group && connection) {\n                group.addMember({connection: connection});\n            } else {\n                log.error(\"Can't add endpoint to group:\", message, group, endpoint, connection);\n            }\n        }\n    };\n\n    /**\n     * Socket handler for leave messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onLeave\n     * @param {object} message The Socket.io message.\n     * @private\n     */\n    var onLeave = function onLeave(message) {\n        var group;\n        var presenceMessage;\n        var endpoint;\n        if (message.connectionId === client.connectionId) {\n            group = client.getGroup({id: message.header.channel});\n            client.fire('leave', {\n                group: group\n            });\n        } else {\n\n            endpoint = client.getEndpoint({\n                skipPresence: true,\n                id: message.endpointId\n            });\n\n            endpoint.connections.every(function eachConnection(conn, index) {\n                if (conn.id === message.connectionId) {\n                    endpoint.connections.splice(index, 1);\n                    return false;\n                }\n                return true;\n            });\n\n            group = client.getGroup({id: message.header.channel});\n            group.removeMember({connectionId: message.connectionId});\n        }\n    };\n\n    /**\n     * Socket handler for presence messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onMessage\n     * @param {object} message The Socket.io message.\n     * @private\n     * @fires respoke.Endpoint#message\n     * @fires respoke.Client#message\n     */\n    var onMessage = function onMessage(message) {\n        var endpoint;\n        message = respoke.TextMessage({rawMessage: message});\n        if (message.endpointId) {\n            endpoint = client.getEndpoint({\n                id: message.endpointId,\n                skipCreate: true\n            });\n        }\n        if (endpoint) {\n            /**\n             * Indicate that a message has been received.\n             * @event respoke.Endpoint#message\n             * @type {respoke.Event}\n             * @property {respoke.TextMessage} message\n             * @property {string} name - the event name.\n             * @property {respoke.Endpoint} target\n             */\n            endpoint.fire('message', {\n                message: message\n            });\n        }\n        /**\n         * Indicate that a message has been received.\n         * @event respoke.Client#message\n         * @type {respoke.Event}\n         * @property {respoke.TextMessage} message\n         * @property {respoke.Endpoint} [endpoint] - If the message is from an endpoint we already know about,\n         * this will be set. If null, the developer can use client.getEndpoint({id: evt.message.endpointId}) to get\n         * the Endpoint. From that point forward, Endpoint#message will fire when a message is received as well.\n         * @property {string} name - the event name.\n         * @property {respoke.Client} target\n         */\n        client.fire('message', {\n            endpoint: endpoint || null,\n            message: message\n        });\n    };\n\n    /**\n     * Create a socket handler for the onConnect event with all the right things in scope.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.generateConnectHandler\n     * @param {respoke.Client.successHandler} [onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [onError] - Error handler for this invocation of this\n     * method only.\n     * @private\n     */\n    var generateConnectHandler = function generateConnectHandler(onSuccess, onError) {\n        onSuccess = onSuccess || function () {};\n        onError = onError || function () {};\n        return function onConnect() {\n            Object.keys(handlerQueue).forEach(function addEachHandlerType(category) {\n                if (!handlerQueue[category]) {\n                    return;\n                }\n\n                handlerQueue[category].forEach(function addEachHandler(handler) {\n                    socket.on(category, handler);\n                });\n                handlerQueue[category] = [];\n            });\n\n            wsCall({\n                path: '/v1/connections',\n                httpMethod: 'POST'\n            }).done(function successHandler(res) {\n                log.debug('connections result', res);\n                client.endpointId = res.endpointId;\n                client.connectionId = res.id;\n                onSuccess();\n            }, onError);\n        };\n    };\n\n    /**\n     * Socket handler for presence messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onPresence\n     * @param {object} message The Socket.io message.\n     * @private\n     */\n    function onPresence(message) {\n        var endpoint;\n        var groups;\n\n        if (message.header.from === client.endpointId) {\n            // Skip ourselves\n            return;\n        }\n        log.debug('socket.on presence', message);\n\n        endpoint = client.getEndpoint({\n            skipPresence: true,\n            id: message.header.from,\n            instanceId: instanceId,\n            name: message.header.from,\n            connection: message.header.fromConnection\n        });\n\n        endpoint.setPresence({\n            connectionId: message.header.fromConnection,\n            presence: message.type\n        });\n\n        if (endpoint.getPresence() === 'unavailable') {\n            var groups = client.getGroups();\n            if (groups) {\n                groups.forEach(function eachGroup(group) {\n                    group.removeMember({connectionId: message.header.fromConnection});\n                });\n            }\n        }\n    }\n\n    /*\n     * On reconnect, start with a reconnect interval of 2000ms. Every time reconnect fails, the interval\n     * is doubled up to a maximum of 5 minutes. From then on, it will attempt to reconnect every 5 minutes forever.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.reconnect\n     * @private\n     */\n    function reconnect() {\n        appToken = undefined;\n        token = undefined;\n        reconnectTimeout = (reconnectTimeout === null) ? 2500 : 2 * reconnectTimeout;\n\n        if (reconnectTimeout > (maxReconnectTimeout)) {\n            reconnectTimeout = maxReconnectTimeout;\n        }\n\n        setTimeout(function doReconnect() {\n            actuallyConnect().then(function successHandler() {\n                reconnectTimeout = null;\n                log.debug('socket reconnected');\n                return Q.all(client.getGroups().map(function iterGroups(group) {\n                    client.join({\n                        id: group.id,\n                        onMessage: clientSettings.onMessage,\n                        onJoin: clientSettings.onJoin,\n                        onLeave: clientSettings.onLeave\n                    });\n                }));\n            }).done(function successHandler(user) {\n                /**\n                 * Indicate that a reconnect has succeeded.\n                 * @event respoke.Client#reconnect\n                 * @property {string} name - the event name.\n                 * @property {respoke.Client}\n                 */\n                client.fire('reconnect');\n            }, function (err) {\n                log.error(\"Couldn't rejoin previous groups.\", err.message, err.stack);\n                reconnect();\n            });\n        }, reconnectTimeout);\n    }\n\n    /**\n     * Authenticate to the cloud and call the handler on state change.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.authenticate\n     * @private\n     * @param {object} params\n     * @return {Promise}\n     */\n    that.authenticate = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var pieces = [];\n        var protocol = null;\n        var host = null;\n        var port = null;\n\n        if (!appToken) {\n            deferred.reject(new Error(\"Can't open a websocket without an app token.\"));\n        }\n\n        pieces = clientSettings.baseURL.split(/:\\/\\//);\n        protocol = pieces[0];\n        pieces = pieces[1].split(/:/);\n        host = pieces[0];\n        port = pieces[1];\n\n        /*\n         * Try to connect for 2 seconds before failing.\n         * @private\n         */\n        var connectParams = {\n            'connect timeout': 2000,\n            'force new connection': true, // Don't try to reuse old connection.\n            'sync disconnect on unload': true, // have Socket.io call disconnect() on the browser unload event.\n            reconnect: false,\n            host: host,\n            port: port || '443',\n            protocol: protocol,\n            secure: (protocol === 'https'),\n            query: '__sails_io_sdk_version=0.10.0&app-token=' + appToken\n        };\n\n        if (that.isConnected() || isConnecting()) {\n            return;\n        }\n        socket = io.connect(clientSettings.baseURL, connectParams);\n\n        socket.on('connect', generateConnectHandler(function onSuccess() {\n            deferred.resolve();\n        }, function onError(err) {\n            deferred.reject(err);\n        }));\n\n        socket.on('join', onJoin);\n        socket.on('leave', onLeave);\n        socket.on('pubsub', onPubSub);\n        socket.on('message', onMessage);\n        socket.on('presence', onPresence);\n\n        // connection timeout\n        socket.on('connect_failed', function connectFailedHandler(res) {\n            deferred.reject(new Error(\"WebSocket connection failed.\"));\n            log.error('Socket.io connect timeout.', res || \"\");\n            reconnect();\n        });\n\n        // handshake error, 403\n        socket.on('error', function errorHandler(res) {\n            log.debug('Socket.io request failed.', res || \"\");\n            reconnect();\n        });\n\n        that.addHandler({\n            type: 'signal',\n            handler: function signalHandler(message) {\n                var knownSignals = ['offer', 'answer', 'connected', 'modify', 'iceCandidates', 'bye'];\n                var signal = respoke.SignalingMessage({\n                    rawMessage: message\n                });\n\n                if (signal.signalType === 'ack') {\n                    return;\n                }\n\n                if (!signal.target || !signal.signalType || knownSignals.indexOf(signal.signalType) === -1) {\n                    log.error(\"Got malformed signal.\", signal);\n                    throw new Error(\"Can't route signal without target or type.\");\n                }\n\n                that.routeSignal(signal);\n            }\n        });\n\n        socket.on('disconnect', function onDisconnect() {\n            pendingRequests.reset(function (pendingRequest) {\n                log.debug('Failing pending requests');\n                pendingRequest.reject(new Error(\"WebSocket disconnected\"));\n            });\n\n            /**\n             * Indicate that this client has been disconnected from the Respoke service.\n             * @event respoke.Client#disconnect\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n            client.fire('disconnect');\n\n            if (clientSettings.reconnect !== true) {\n                socket = null;\n                return;\n            }\n            reconnect();\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Get ephemeral TURN credentials.  This method is called whenever a call is either\n     * sent or received, prior to creating a PeerConnection\n     *\n     * @memberof! respoke.SignalingChannel\n     * @private\n     * @method respoke.SignalingChannel.getTurnCredentials\n     * @return {Promise<Array>}\n     */\n    that.getTurnCredentials = function () {\n        var deferred = Q.defer();\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            httpMethod: 'GET',\n            path: '/v1/turn'\n        }).done(function successHandler(creds) {\n            var result = [];\n\n            if (!creds || !creds.uris) {\n                deferred.reject(new Error(\"Turn credentials empty.\"));\n                return;\n            }\n\n            creds.uris.forEach(function saveTurnUri(uri) {\n                var cred = null;\n\n                if (!uri) {\n                    return;\n                }\n\n                cred = createIceServer(uri, creds.username, creds.password);\n                result.push(cred);\n            });\n\n            if (result.length === 0) {\n                deferred.reject(new Error(\"Got no TURN credentials.\"));\n            }\n\n            log.debug('TURN creds', result);\n            deferred.resolve(result);\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Construct a websocket API call and return the formatted response and errors. The 'success'\n     * attribute indicates the success or failure of the API call. The 'response' attribute\n     * is an associative array constructed by json.decode. The 'error' attriute is a message.\n     * If the API call is successful but the server returns invalid JSON, error will be\n     * \"Invalid JSON.\" and response will be the unchanged content of the response body.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.wsCall\n     * @private\n     * @param {object} params\n     * @param {string} params.httpMethod\n     * @param {string} params.path\n     * @param {string} params.objectId\n     * @param {object} params.parameters\n     * @return {Promise<object>}\n     */\n    function wsCall(params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var start = now();\n        // Too many of these!\n        var logRequest = params.path.indexOf('messages') === -1 && params.path.indexOf('signaling') === -1;\n        var request;\n        var bodyLength = 0;\n        if (params.paramaters) {\n            bodyLength = encodeURI(JSON.stringify(params.parameters)).split(/%..|./).length - 1;\n        }\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        if (!params) {\n            deferred.reject(new Error('No params.'));\n            return deferred.promise;\n        }\n\n        if (!params.path) {\n            deferred.reject(new Error('No request path.'));\n            return deferred.promise;\n        }\n\n        if (bodyLength > bodySizeLimit) {\n            deferred.reject(new Error('Request body exceeds maximum size of ' + bodySizeLimit + ' bytes'));\n            return deferred.promise;\n        }\n\n        params.httpMethod = (params.httpMethod || 'get').toLowerCase();\n\n        if (params.objectId) {\n            params.path = params.path.replace(/\\%s/ig, params.objectId);\n        }\n\n        if (logRequest) {\n            log.debug('socket request', {\n                method: params.httpMethod,\n                path: params.path,\n                parameters: params.parameters\n            });\n        }\n\n        request = {\n            method: params.httpMethod,\n            path: params.path,\n            parameters: params.parameters,\n            tries: 0,\n            durationMillis: 0\n        };\n\n        request.id = pendingRequests.add(deferred);\n\n        function handleResponse(response) {\n            var thisHandler = this; // jshint ignore:line\n            /*\n             * Response:\n             *  {\n             *      body: {},\n             *      headers: {},\n             *      statusCode: 200\n             *  }\n             */\n            try {\n                response.body = JSON.parse(response.body);\n            } catch (e) {\n                if (typeof response.body !== 'object') {\n                    deferred.reject(new Error(\"Server response could not be parsed!\" + response.body));\n                    return;\n                }\n            }\n\n            if (response.statusCode === 429) {\n                if (request.tries < 3 && deferred.promise.isPending()) {\n                    setTimeout(function () {\n                        start = now();\n                        sendWebsocketRequest(request, handleResponse);\n                    }, 1000); // one day this will be response.interval or something\n                } else {\n                    request.durationMillis = now() - start;\n                    pendingRequests.remove(request.id);\n                    failWebsocketRequest(request, response.body,\n                            \"Too many retries after rate limit exceeded.\", deferred);\n                }\n                return;\n            }\n\n            request.durationMillis = now() - start;\n            pendingRequests.remove(request.id);\n\n            if ([200, 204, 205, 302, 401, 403, 404, 418].indexOf(thisHandler.status) === -1) {\n                failWebsocketRequest(request, response.body,\n                        response.body.error || errors[thisHandler.status] || \"Unknown error\", deferred);\n            } else {\n                deferred.resolve(response.body);\n            }\n\n            if (logRequest) {\n                log.debug('socket response', {\n                    method: request.method,\n                    path: request.path,\n                    durationMillis: request.durationMillis,\n                    response: response.body\n                });\n            }\n        }\n\n        start = now();\n        sendWebsocketRequest(request, handleResponse);\n        return deferred.promise;\n    }\n\n    function failWebsocketRequest(request, response, error, deferred) {\n        if (response && response.error) {\n            deferred.reject(new Error(error + '(' + request.method + ' ' + request.path + ')'));\n        } else {\n            deferred.resolve(response);\n        }\n    }\n\n    function sendWebsocketRequest(request, handleResponse) {\n        request.tries += 1;\n        socket.emit(request.method, JSON.stringify({\n            url: request.path,\n            data: request.parameters,\n            headers: {'App-Token': appToken}\n        }), handleResponse);\n    }\n\n    /**\n     * Construct an API call and return the formatted response and errors. The 'success'\n     * attribute indicates the success or failure of the API call. The 'response' attribute\n     * is an associative array constructed by json.decode. The 'error' attribute is a message.\n     * If the API call is successful but the server returns invalid JSON, error will be\n     * \"Invalid JSON.\" and response will be the unchanged content of the response body.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.call\n     * @private\n     * @param {object} params\n     * @param {string} params.httpMethod\n     * @param {string} params.objectId\n     * @param {string} params.path\n     * @param {object} params.parameters\n     * @returns {Promise}\n     */\n    function call(params) {\n        /* Params go in the URI for GET, DELETE, same format for\n         * POST and PUT, but they must be sent separately after the\n         * request is opened. */\n        var deferred = Q.defer();\n        var paramString = null;\n        var uri = null;\n        var response = {\n            'result': null,\n            'code': null\n        };\n        var start;\n\n        uri = clientSettings.baseURL + params.path;\n\n        if (!params) {\n            deferred.reject(new Error('No params.'));\n            return;\n        }\n\n        if (!params.httpMethod) {\n            deferred.reject(new Error('No HTTP method.'));\n            return;\n        }\n\n        if (!params.path) {\n            deferred.reject(new Error('No request path.'));\n            return;\n        }\n\n        if (params.objectId) {\n            params.path = params.path.replace(/\\%s/ig, params.objectId);\n        }\n\n        if (['GET', 'DELETE'].indexOf(params.httpMethod) > -1) {\n            uri += makeParamString(params.parameters);\n        }\n\n        xhr.open(params.httpMethod, uri);\n        if (appToken) {\n            xhr.setRequestHeader(\"App-Token\", appToken);\n        }\n        if (['POST', 'PUT'].indexOf(params.httpMethod) > -1) {\n            paramString = JSON.stringify(params.parameters);\n            if (paramString.length > bodySizeLimit) {\n                deferred.reject(new Error('Request body exceeds maximum size of ' + bodySizeLimit + ' bytes'));\n                return;\n            }\n            xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n        } else if (['GET', 'DELETE'].indexOf(params.httpMethod) === -1) {\n            deferred.reject(new Error('Illegal HTTP request method ' + params.httpMethod));\n            return;\n        }\n        log.debug('request', {\n            method: params.httpMethod,\n            uri: uri,\n            params: paramString\n        });\n\n        try {\n            xhr.send(paramString);\n        } catch (err) {\n            deferred.reject(err);\n            return;\n        }\n\n        xhr.onreadystatechange = function () {\n            var durationMillis = now() - start;\n            var limit;\n            var unit;\n\n            if (this.readyState !== 4) {\n                return;\n            }\n            if (this.status === 0) {\n                deferred.reject(new Error(\"Status is 0: Incomplete request, SSL error, or CORS error.\"));\n                return;\n            }\n            if ([200, 204, 205, 302, 401, 403, 404, 418].indexOf(this.status) > -1) {\n                response.code = this.status;\n                response.uri = uri;\n                response.params = params.parameters;\n                response.error = errors[this.status];\n                if (this.response) {\n                    try {\n                        response.result = JSON.parse(this.response);\n                    } catch (e) {\n                        response.result = this.response;\n                        response.error = \"Invalid JSON.\";\n                    }\n                }\n                log.debug('response', {\n                    method: params.httpMethod,\n                    durationMillis: durationMillis,\n                    response: response\n                });\n                deferred.resolve(response);\n            } else if (this.status === 429) {\n                unit = this.getResponseHeader('RateLimit-Time-Units');\n                limit = this.getResponseHeader('RateLimit-Limit');\n                deferred.reject(new Error(\"Rate limit of \" + limit + \"/\" + unit +\n                    \" exceeded. Try again in 1 \" + unit + \".\"));\n                return;\n            } else {\n                deferred.reject(new Error('unexpected response ' + this.status));\n                return;\n            }\n        };\n\n        return deferred.promise;\n    }\n\n    /**\n     * Turn key/value and key/list pairs into an HTTP URL parameter string.\n     * var1=value1&var2=value2,value3,value4\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.makeParamString\n     * @private\n     * @param {object} params - Arbitrary collection of strings and arrays to serialize.\n     * @returns {string}\n     */\n    function makeParamString(params) {\n        var strings = [];\n        if (!params) {\n            return '';\n        }\n\n        Object.keys(params).forEach(function formatParam(name) {\n            var value = params[name];\n            /* Skip objects -- We won't know how to name these. */\n            if (value instanceof Array) {\n                strings.push([name, value.join(',')].join('='));\n            } else if (typeof value !== 'object' && typeof value !== 'function') {\n                strings.push([name, value].join('='));\n            }\n        });\n\n        if (strings.length > 0) {\n            return '?' + strings.join('&');\n        } else {\n            return '';\n        }\n    }\n\n    return that;\n}; // End respoke.SignalingChannel\n/**\n * Handle an error that resulted from a method call.\n * @callback respoke.SignalingChannel.errorHandler\n * @params {Error} err\n */\n/**\n * Handle sending successfully.\n * @callback respoke.SignalingChannel.sendHandler\n */\n/**\n * Receive a group.\n * @callback respoke.SignalingChannel.groupHandler\n * @param {respoke.Group}\n */\n/**\n * Receive a list of groups.\n * @callback respoke.SignalingChannel.groupListHandler\n * @param {Array}\n */\n/**\n * Receive a list of TURN credentials.\n * @callback respoke.SignalingChannel.turnSuccessHandler\n * @param {Array}\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/signalingChannel.js\n ** module id = 11\n ** module chunks = 0\n **/","/**!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n */\n\nvar log = require('loglevel');\nvar Q = require('q');\nvar respoke = require('./respoke');\n\n/**\n * A direct connection via RTCDataChannel, including state and path negotation.\n * @class respoke.DirectConnection\n * @constructor\n * @augments respoke.EventEmitter\n * @param {string} params\n * @param {string} params.instanceId - client id\n * @param {respoke.Call} params.call - The call that is handling state for this direct connection.\n * @param {boolean} [params.forceTurn] - If true, force the data to flow through relay servers instead of allowing\n * it to flow peer-to-peer. The relay acts like a blind proxy.\n * @param {string} params.connectionId - The connection ID of the remoteEndpoint.\n * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n * @param {function} params.signalReport - Signaling action from SignalingChannel.\n * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n * @param {respoke.DirectConnection.onStart} [params.onStart] - Callback for when setup of the direct connection\n * begins. The direct connection will not be open yet.\n * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors that happen during\n * direct connection setup or media renegotiation.\n * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for closing the direct connection.\n * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for opening the direct connection.\n * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the request\n * for a direct connection and setup is about to begin.\n * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for incoming messages. Not usually\n * necessary to listen to this event if you are already listening to respoke.Endpoint#message.\n * @returns {respoke.DirectConnection}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Client\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n\n    /**\n     * A name to identify this class\n     * @memberof! respoke.DirectConnection\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.DirectConnection';\n    /**\n     * The unique identifier of the direct connection.\n     *\n     * @memberof! respoke.DirectConnection\n     * @name id\n     * @type {string}\n     */\n    that.id = respoke.makeGUID();\n\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name call\n     * @type {respoke.Call}\n     */\n    if (!that.call.caller) {\n        that.call.caller = false;\n    }\n\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name dataChannel\n     * @type {RTCDataChannel}\n     * @private\n     */\n    var dataChannel = null;\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name client\n     * @type {respoke.Client}\n     * @private\n     */\n    var client = respoke.getClient(instanceId);\n\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name pc\n     * @type {RTCPeerConnection}\n     * @private\n     */\n    var pc = params.pc;\n    delete params.pc;\n\n    /**\n     * When the datachannel is availble, we need to attach the callbacks. The event this function is attached to\n     * only fires for the callee.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.listenDataChannel\n     * @param {respoke.Event} evt\n     * @private\n     */\n    function listenDataChannel(evt) {\n        dataChannel = evt.channel;\n        dataChannel.onerror = onDataChannelError;\n        dataChannel.onmessage = onDataChannelMessage;\n        if (dataChannel.readyState === 'open') {\n            dataChannel.onopen = null;\n            onDataChannelOpen();\n        } else {\n            dataChannel.onopen = onDataChannelOpen;\n        }\n    }\n\n    /**\n     * Register any event listeners passed in as callbacks\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.saveParameters\n     * @param {object} params\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for when the direct connection\n     * is closed.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for when the direct connection\n     * is open.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for incoming messages.\n     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n     * connection.\n     * @param {respoke.DirectConnection.onStart} [params.onStart] - Callback for when the direct connection\n     * is being set up. The direct connection will not be open yet.\n     * @param {boolean} [params.forceTurn] - If true, force the data to flow through relay servers instead of allowing\n     * it to flow peer-to-peer. The relay acts like a blind proxy.\n     * @private\n     */\n    function saveParameters(params) {\n        /**\n         * The direct connection is open.\n         * @event respoke.DirectConnection#open\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.listen('open', params.onOpen);\n        /**\n         * The direct connection is closed.\n         * @event respoke.DirectConnection#close\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.listen('close', params.onClose);\n        /**\n         * Incoming message on this direct connection.\n         * @event respoke.DirectConnection#message\n         * @type {respoke.Event}\n         * @property {respoke.TextMessage} message\n         * @property {respoke.Endpoint} endpoint\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.listen('message', params.onMessage);\n        // documented elsewhere\n        that.listen('start', params.onStart);\n        /**\n         * An error occurred while setting up the direct connection.\n         * @event respoke.DirectConnection#error\n         * @type {respoke.Event}\n         * @property {string} reason - A human-readable description of the error.\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.listen('error', params.onError);\n        pc.listen('direct-connection', listenDataChannel, true);\n        pc.listen('stats', function fireStats(evt) {\n            /**\n             * This event is fired every time statistical information about the direct connection\n             * becomes available.\n             * @event respoke.DirectConnection#stats\n             * @type {respoke.Event}\n             * @property {object} stats - an object with stats in it.\n             * @property {respoke.DirectConnection} target\n             * @property {string} name - the event name.\n             */\n            that.fire('stats', {stats: evt.stats});\n        }, true);\n\n    }\n    saveParameters(params);\n\n    delete that.onOpen;\n    delete that.onClose;\n    delete that.onMessage;\n\n    /**\n     * Return media stats. Since we have to wait for both the answer and offer to be available before starting\n     * statistics, we'll return a promise for the stats object.\n     *\n     *     directConnection.getStats({\n     *         onStats: function (evt) {\n     *             console.log('Stats', evt.stats);\n     *         }\n     *     }).done(function () {\n     *         console.log('Stats started.');\n     *     }, function (err) {\n     *         console.log('Direct connection is already closed.');\n     *     });\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.getStats\n     * @returns {Promise<object>|undefined}\n     * @param {object} params\n     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive the\n     * stats if the Respoke stats module is loaded. If no callback is provided, the connection's report will\n     * contain stats but the developer will not receive them on the client-side.\n     * @param {respoke.DirectConnection.statsSuccessHandler} [params.onSuccess] - Success handler for this\n     * invocation of this method only.\n     * @param {respoke.DirectConnection.errorHandler} [params.onError] - Error handler for this invocation of\n     * this method only.\n     */\n    that.getStats = function (params) {\n        if (pc && pc.getStats) {\n            that.listen('stats', params.onStats);\n            delete params.onStats;\n            return pc.getStats(params);\n        }\n        return null;\n    };\n\n    if (!respoke.MediaStats) {\n        delete that.getStats;\n    }\n\n    /**\n     * Detect datachannel errors for internal state.\n     * @memberof! respoke.DirectConnection\n     * @private\n     * @method respoke.DirectConnection.onDataChannelError\n     */\n    function onDataChannelError(error) {\n        /**\n         * Indicate that an error has occurred setting up the direct connection.\n         * @event respoke.DirectConnection#error\n         * @type {respoke.Event}\n         * @property {object} error\n         * @property {respoke.DirectConnection} directConnection\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('error', {\n            error: error\n        });\n        that.close();\n    }\n\n    /**\n     * Receive and route messages to the Endpoint.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.onDataChannelMessage\n     * @private\n     * @param {MessageEvent}\n     * @fires respoke.DirectConnection#message\n     */\n    function onDataChannelMessage(evt) {\n        var message;\n        try {\n            message = JSON.parse(evt.data);\n        } catch (e) {\n            message = evt.data;\n        }\n        /**\n         * A message has been received over the direct connection.\n         * @event respoke.Endpoint#message\n         * @type {respoke.Event}\n         * @property {object} message\n         * @property {respoke.DirectConnection} directConnection\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.call.remoteEndpoint.fire('message', {\n            message: message,\n            directConnection: that\n        });\n        /**\n         * A message has been received over the direct connection.\n         * @event respoke.DirectConnection#message\n         * @type {respoke.Event}\n         * @property {object} message\n         * @property {respoke.Endpoint} endpoint\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('message', {\n            message: message,\n            endpoint: that.call.remoteEndpoint\n        });\n    }\n\n    /**\n     * Detect when the channel is open.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.onDataChannelOpen\n     * @private\n     * @param {MessageEvent}\n     * @fires respoke.DirectConnection#open\n     */\n    function onDataChannelOpen(evt) {\n        //dataChannel = evt.target || evt.channel;\n        /**\n         * The direct connection is open.\n         * @event respoke.DirectConnection#open\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('open');\n    }\n\n    /**\n     * Detect when the channel is closed.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.onDataChannelClose\n     * @private\n     * @param {MessageEvent}\n     * @fires respoke.DirectConnection#close\n     */\n    function onDataChannelClose(evt) {\n        //dataChannel = evt.target || evt.channel;\n        /**\n         * The direct connection is closed.\n         * @event respoke.DirectConnection#close\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('close');\n    }\n\n    /**\n     * Create the datachannel. For the caller, set up all the handlers we'll need to keep track of the\n     * datachannel's state and to receive messages.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.createDataChannel\n     * @private\n     */\n    function createDataChannel() {\n        dataChannel = pc.createDataChannel(\"respokeDataChannel\");\n        dataChannel.binaryType = 'arraybuffer';\n        dataChannel.onerror = onDataChannelError;\n        dataChannel.onmessage = onDataChannelMessage;\n        dataChannel.onopen = onDataChannelOpen;\n\n        /**\n         * The direct connection setup has begun. This does NOT mean it's ready to send messages yet. Listen to\n         * DirectConnection#open for that notification.\n         * @event respoke.DirectConnection#start\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('start');\n    }\n\n    /**\n     * Start the process of obtaining media. saveParameters will only be meaningful for the callee,\n     * since the library calls this method for the caller. Developers will use this method to pass in\n     * callbacks for the callee.\n     *\n     *     directConnection.accept({\n     *         onOpen: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.accept\n     * @fires respoke.DirectConnection#accept\n     * @param {object} params\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen]\n     * @param {respoke.DirectConnection.onClose} [params.onClose]\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage]\n     */\n    that.accept = function (params) {\n        params = params || {};\n        log.debug('DirectConnection.accept');\n        saveParameters(params);\n\n        log.debug(\"I am \" + (pc.state.caller ? '' : 'not ') + \"the caller.\");\n\n        if (pc.state.caller === true) {\n            createDataChannel();\n        }\n        that.call.answer();\n\n        /**\n         * The request to open a direct connection has been accepted.\n         * @event respoke.DirectConnection#accept\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('accept');\n    };\n\n    /**\n     * Tear down the connection.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.close\n     * @fires respoke.DirectConnection#close\n     */\n    that.close = function (params) {\n        params = params || {};\n        log.debug(\"DirectConnection.close\");\n\n        if (that.call && that.call.remoteEndpoint) {\n            that.call.remoteEndpoint.directConnection = null;\n        }\n\n        if (dataChannel) {\n            dataChannel.close();\n        }\n\n        /**\n         * The direct connection has been closed.\n         * @event respoke.DirectConnection#close\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('close');\n\n        that.ignore();\n\n        if (that.call && params.skipRemove !== true) {\n            that.call.removeDirectConnection();\n        }\n\n        dataChannel = null;\n        that.call = null;\n        pc = null;\n    };\n\n    /**\n     * Send a message over the datachannel in the form of a JSON-encoded plain old JavaScript object. Only one\n     * attribute may be given: either a string 'message' or an object 'object'.\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     *\n     *     directConnection.sendMessage({\n     *         message: \"And they say HTTP is stateless!\"\n     *     });\n     *\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.sendMessage\n     * @param {object} params\n     * @param {string} [params.message] - The message to send.\n     * @param {object} [params.object] - An object to send.\n     * @param {respoke.DirectConnection.sendHandler} [params.onSuccess] - Success handler for this invocation\n     * of this method only.\n     * @param {respoke.DirectConnection.errorHandler} [params.onError] - Error handler for this invocation\n     * of this method only.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n        if (that.isActive()) {\n            dataChannel.send(JSON.stringify(params.object || {\n                message: params.message\n            }));\n            deferred.resolve();\n        } else {\n            deferred.reject(new Error(\"dataChannel not in an open state.\"));\n        }\n        return retVal;\n    };\n\n    /**\n     * Expose close as reject for approve/reject workflow.\n     *\n     *     client.listen('direct-connection, function (evt) {\n     *         if (iDontLikeThisPerson()) {\n     *             evt.directConnection.reject();\n     *         }\n     *     });\n     *\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.reject\n     * @param {boolean} signal - Optional flag to indicate whether to send or suppress sending\n     * a hangup signal to the remote side.\n     */\n    that.reject = that.close;\n\n    /**\n     * Indicate whether a datachannel is being setup or is in progress.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.isActive\n     * @returns {boolean}\n     */\n    that.isActive = function () {\n        // Why does pc.iceConnectionState not transition into 'connected' even though media is flowing?\n        //return (pc && pc.isActive() && dataChannel && dataChannel.readyState === 'open');\n        return (dataChannel && dataChannel.readyState === 'open');\n    };\n\n    return that;\n}; // End respoke.DirectConnection\n\n/**\n * Called when the direct connection is closed.  This callback is called every time respoke.DirectConnection#close\n * fires.\n * @callback respoke.DirectConnection.onClose\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Called when the setup of the direct connection has begun. The direct connection will not be open yet. This\n * callback is called every time respoke.DirectConnection#start fires.\n * @callback respoke.DirectConnection.onStart\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Called when the direct connection is opened.  This callback is called every time respoke.DirectConnection#open\n * fires.\n * @callback respoke.DirectConnection.onOpen\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Called when a message is received over the direct connection.  This callback is called every time\n * respoke.DirectConnection#message fires.\n * @callback respoke.DirectConnection.onMessage\n * @param {respoke.Event} evt\n * @param {object} evt.message\n * @param {respoke.Endpoint} evt.endpoint\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Handle an error that resulted from a specific method call. This handler will not fire more than once.\n * @callback respoke.DirectConnection.errorHandler\n * @param {Error} err\n */\n/**\n * When a call is in setup or media renegotiation happens. This callback will be called every time\n * respoke.DirectConnection#error.\n * @callback respoke.DirectConnection.onError\n * @param {respoke.Event} evt\n * @param {boolean} evt.reason - A human-readable description of the error.\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Called when the callee accepts the direct connection. This callback is called every time\n * respoke.DirectConnection#accept is fired.\n * @callback respoke.DirectConnection.onAccept\n * @param {respoke.Event} evt\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Handle the successful kick-off of stats on a call.\n * @callback respoke.DirectConnection.statsSuccessHandler\n * @param {respoke.Event} evt\n * @param {object} evt.stats - an object with stats in it.\n * @param {respoke.DirectConnection} evt.target\n * @param {string} evt.name - the event name.\n */\n/**\n * Handle sending successfully.\n * @callback respoke.DirectConnection.sendHandler\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/directConnection.js\n ** module id = 12\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar log = require('loglevel');\nvar Q = require('q');\nvar respoke = require('./respoke');\n\n/**\n * WebRTC PeerConnection. This class handles all the state and connectivity for Call and DirectConnection.\n * This class cannot be used alone, but is instantiated by and must be given media by either Call, DirectConnection,\n * or the not-yet-implemented ScreenShare.\n * @class respoke.PeerConnection\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.instanceId - client id\n * @param {boolean} [params.forceTurn] - If true, delete all 'host' and 'srvflx' candidates and send only 'relay'\n * candidates.\n * @param {boolean} [params.disableTurn] - If true, delete all 'relay' candidates and send only 'host' and 'srvflx'\n * candidates.\n * @param {respoke.Call} params.call\n * @param {string} params.connectionId - The connection ID of the remoteEndpoint.\n * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n * @param {function} params.signalModify - Signaling action from SignalingChannel.\n * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n * @param {function} params.signalReport - Signaling action from SignalingChannel.\n * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n * @param {respoke.Call.onHangup} [params.onHangup] - Callback for the developer to be notified about hangup.\n * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for the developer to receive\n * statistics about the call. This is only used if call.getStats() is called and the stats module is loaded.\n * @param {object} [params.pcOptions]\n * @param {object} [params.offerOptions]\n * @returns {respoke.PeerConnection}\n */\n\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.PeerConnection';\n\n    /**\n     * Whether or not we will send a 'hangup' signal to the other side during hangup.\n     * @memberof! respoke.PeerConnection\n     * @name toSendHangup\n     * @type {respoke.Endpoint}\n     */\n    var toSendHangup;\n\n    /**\n     * @memberof! respoke.PeerConnection\n     * @private\n     * @name pc\n     * @type RTCPeerConnection\n     * @desc The RTCPeerConnection as provided by the browser API. All internal state, networking functionality, and\n     * raw data transfer occurs within the PeerConnection.\n     */\n    var pc = null;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name defModify\n     * @private\n     * @type {Promise}\n     * @desc Used in the state machine to trigger methods or functions whose execution depends on the reception,\n     * handling, or sending of some information.\n     */\n    var defModify;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name previewLocalMedia\n     * @private\n     * @type {respoke.Call.previewLocalMedia}\n     * @desc A callback provided by the developer that we'll call after receiving local media and before\n     * approve() is called.\n     */\n    var previewLocalMedia = typeof params.previewLocalMedia === 'function' ? params.previewLocalMedia : undefined;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name candidateSendingQueue\n     * @private\n     * @type {array}\n     * @desc An array to save candidates between offer and answer so that both parties can process them simultaneously.\n     */\n    var candidateSendingQueue = respoke.queueFactory();\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name candidateReceivingQueue\n     * @private\n     * @type {array}\n     * @desc An array to save candidates between offer and answer so that both parties can process them simultaneously.\n     */\n    var candidateReceivingQueue = respoke.queueFactory();\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name client\n     * @private\n     * @type {respoke.Client}\n     */\n    var client = respoke.getClient(instanceId);\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalOffer\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalOffer = params.signalOffer;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalConnected\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalConnected = params.signalConnected;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalModify\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalModify = params.signalModify;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalAnswer\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalAnswer = params.signalAnswer;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalHangup\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalHangup = respoke.once(params.signalHangup);\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalReport\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalReport = params.signalReport;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalCandidateOrig\n     * @private\n     * @type {function}\n     * @desc A temporary function saved from params in order to construct the candidate signaling function.\n     */\n    var signalCandidateOrig = params.signalCandidate;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalCandidate\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed from the one passed to us by the signaling channel with additions\n     * to facilitate candidate logging.\n     */\n    function signalCandidate(params) {\n        if (!pc) {\n            return;\n        }\n\n        params.iceCandidates = [params.candidate];\n        signalCandidateOrig(params);\n        that.report.candidatesSent.push({candidate: params.candidate});\n    }\n\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name offerOptions\n     * @private\n     * @type {object}\n     */\n    var offerOptions = params.offerOptions || {};\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name pcOptions\n     * @private\n     * @type {object}\n     */\n    var pcOptions = params.pcOptions || {\n        optional: [\n            { DtlsSrtpKeyAgreement: true },\n            { RtpDataChannels: false }\n        ]\n    };\n\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name report\n     * @type {object}\n     */\n    that.report = {\n        callStarted: 0,\n        callStopped: 0,\n        callerendpoint: that.call.caller ? client.name : that.call.remoteEndpoint.id,\n        callerconnection: that.call.caller ? client.id : that.call.connectionId,\n        calleeendpoint: that.call.caller ? that.call.remoteEndpoint.id : client.id,\n        calleeconnection: that.call.caller ? that.call.connectionId : client.connectionId,\n        sessionId: that.call.id,\n        lastSDPString: '',\n        sdpsSent: [],\n        sdpsReceived: [],\n        candidatesSent: [],\n        candidatesReceived: [],\n        userAgent: navigator.userAgent,\n        os: navigator.platform\n    };\n\n    /**\n     * Start the process of network and media negotiation. Called after local video approved.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.initOffer\n     * @fires respoke.PeerConnection#initOffer\n     * @private\n     */\n    function initOffer() {\n        if (!pc) {\n            return;\n        }\n\n        if (that.state.receiveOnly) {\n            makeOptionsReceiveOnly(offerOptions);\n        }\n\n        if (that.state.sendOnly) {\n            makeOptionsSendOnly(offerOptions);\n        }\n\n        log.info('creating offer', offerOptions);\n        pc.createOffer(saveOfferAndSend, function errorHandler(p) {\n            log.error('createOffer failed');\n        }, offerOptions);\n    }\n\n    function makeOptionsReceiveOnly(options) {\n        if (navigator.webkitGetUserMedia) {\n            offerOptions = {\n                mandatory: {\n                    OfferToReceiveVideo: true,\n                    OfferToReceiveAudio: true\n                }\n            };\n        } else {\n            offerOptions.offerToReceiveVideo = true;\n            offerOptions.offerToReceiveAudio = true;\n        }\n    }\n\n    function makeOptionsSendOnly(options) {\n        if (navigator.webkitGetUserMedia) {\n            offerOptions = {\n                mandatory: {\n                    OfferToSendVideo: true,\n                    OfferToSendAudio: true\n                }\n            };\n        } else {\n            offerOptions.offerToSendVideo = true;\n            offerOptions.offerToSendAudio = true;\n        }\n    }\n\n    /**\n     * Process a remote offer if we are not the caller. This is necessary because we don't process the offer until\n     * the callee has answered the call.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.processOffer\n     * @param {RTCSessionDescriptor}\n     * @returns {Promise}\n     */\n    that.processOffer = function (oOffer) {\n        if (!pc) {\n            return;\n        }\n        log.debug('processOffer', oOffer);\n\n        that.report.sdpsReceived.push(oOffer);\n        that.report.lastSDPString = oOffer.sdp;\n\n        //set flags for audio / video being offered\n        that.call.hasDataChannel = respoke.sdpHasDataChannel(oOffer.sdp);\n\n        try {\n            pc.setRemoteDescription(new RTCSessionDescription(oOffer),\n                function successHandler() {\n                    if (!pc) {\n                        return;\n                    }\n\n                    processReceivingQueue();\n                    log.debug('set remote desc of offer succeeded');\n                    pc.createAnswer(function successHandler(oSession) {\n                        that.state.processedRemoteSDP = true;\n                        saveAnswerAndSend(oSession);\n                    }, function errorHandler(err) {\n                        err = new Error(\"Error creating SDP answer.\" + err.message);\n                        that.report.callStoppedReason = err.message;\n                        /**\n                         * This event is fired on errors that occur during call setup or media negotiation.\n                         * @event respoke.Call#error\n                         * @type {respoke.Event}\n                         * @property {string} reason - A human readable description about the error.\n                         * @property {respoke.Call} target\n                         * @property {string} name - the event name.\n                         */\n                        that.call.fire('error', {\n                            message: err.message\n                        });\n                        log.error('create answer failed');\n                        that.report.callStoppedReason = 'setRemoteDescription failed at answer.';\n                        that.close();\n                    });\n                }, function errorHandler(err) {\n                    err = new Error('Error calling setRemoteDescription on offer I received.' + err.message);\n                    that.report.callStoppedReason = err.message;\n                    /**\n                     * This event is fired on errors that occur during call setup or media negotiation.\n                     * @event respoke.Call#error\n                     * @type {respoke.Event}\n                     * @property {string} reason - A human readable description about the error.\n                     * @property {respoke.Call} target\n                     * @property {string} name - the event name.\n                     */\n                    that.call.fire('error', {\n                        message: err.message\n                    });\n                }\n            );\n        } catch (err) {\n            var newErr = new Error(\"Exception calling setRemoteDescription on offer I received.\" + err.message);\n            that.report.callStoppedReason = newErr.message;\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.call.fire('error', {\n                message: newErr.message\n            });\n        }\n    };\n\n    /**\n     * Return media stats. Since we have to wait for both the answer and offer to be available before starting\n     * statistics, we'll return a promise for the stats object.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.getStats\n     * @returns {Promise<{respoke.MediaStatsParser}>|undefined}\n     * @param {object} params\n     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onSuccess] - Success handler for this\n     * invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @fires respoke.PeerConnection#stats\n     */\n    function getStats(params) {\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n        if (!respoke.MediaStats) {\n            deferred.reject(new Error(\"Statistics module is not loaded.\"));\n            return retVal;\n        }\n\n        function onConnect() {\n            var stats = respoke.MediaStatsParser({\n                peerConnection: pc,\n                interval: params.interval,\n                onStats: function statsHandler(stats) {\n                    if (!pc) {\n                        return;\n                    }\n\n                    /**\n                     * This event is fired every 5 seconds by default, configurable by the 'interval' property to\n                     * `call.startStats` and reports the current state of media statistics.\n                     * @event respoke.PeerConnection#stats\n                     * @type {respoke.Event}\n                     * @property {object} stats - an object with stats in it.\n                     * @property {string} name - the event name.\n                     * @property {respoke.PeerConnection}\n                     */\n                    that.fire('stats', {\n                        stats: stats\n                    });\n                }\n            });\n            that.listen('close', function closeHandler(evt) {\n\n                stats.stopStats();\n            }, true);\n            deferred.resolve();\n        }\n\n        if (!pc) {\n            that.once('stream-received', onConnect);\n        } else {\n            onConnect();\n        }\n\n        return retVal;\n    }\n\n    if (respoke.MediaStats) {\n        that.getStats = getStats;\n    }\n\n    /**\n     * Create the RTCPeerConnection and add handlers. Process any offer we have already received.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.init\n     */\n    that.init = function init() {\n        log.debug('PC.init');\n\n        if (pc) {\n            return;\n        }\n\n        that.report.callStarted = new Date().getTime();\n\n        pc = new RTCPeerConnection(that.servers, pcOptions);\n        pc.onicecandidate = onIceCandidate;\n        pc.onnegotiationneeded = onNegotiationNeeded;\n        pc.oniceconnectionstatechange = onIceConnectionStateChange;\n        pc.onaddstream = function onaddstream(evt) {\n            /**\n             * Indicate the RTCPeerConnection has received remote media.\n             * @event respoke.PeerConnection#remote-stream-received\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('remote-stream-received', {\n                stream: evt.stream\n            });\n        };\n        pc.onremovestream = function onremovestream(evt) {\n            /**\n             * Indicate the remote side has stopped sending media.\n             * @event respoke.PeerConnection#remote-stream-removed\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('remote-stream-removed', {\n                stream: evt.stream\n            });\n        };\n        pc.ondatachannel = function ondatachannel(evt) {\n            /**\n             * CAUTION: This event is only called for the callee because RTCPeerConnection#ondatachannel\n             * is only called for the callee.\n             * @event respoke.PeerConnection#direct-connection\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('direct-connection', {\n                channel: evt.channel\n            });\n        };\n\n        that.state.listen('offering:entry', function (evt) {\n            if (that.state.caller) {\n                initOffer();\n            }\n        });\n    };\n\n    /**\n     * Return an array of remote media streams.\n     * @muremberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.getRemoteStreams\n     */\n    that.getRemoteStreams = function () {\n        if (!pc) {\n            return [];\n        }\n        return pc.getRemoteStreams.apply(pc, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Return an array of local media streams.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.getLocalStreams\n     */\n    that.getLocalStreams = function () {\n        if (!pc) {\n            return [];\n        }\n        return pc.getLocalStreams.apply(pc, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Create a data channel.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.createDataChannel\n     */\n    that.createDataChannel = function () {\n        if (!pc) {\n            return;\n        }\n        return pc.createDataChannel.apply(pc, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.addStream\n     * Expose addStream.\n     * @param {RTCMediaStream}\n     */\n    that.addStream = function (stream) {\n        if (!pc) {\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.call.fire('error', {\n                message: \"Got local stream in a precall state.\"\n            });\n            return;\n        }\n        pc.addStream(stream);\n    };\n\n    /**\n     * Process a local ICE Candidate\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.onIceCandidate\n     * @private\n     * @param {RTCIceCandidate}\n     */\n    function onIceCandidate(oCan) {\n        var candidate = oCan.candidate; // {candidate: ..., sdpMLineIndex: ... }\n        if (!pc || !candidate || !candidate.candidate) {\n            return;\n        }\n\n        if (that.forceTurn === true && candidate.candidate.indexOf(\"typ relay\") === -1) {\n            log.debug(\"Dropping candidate because forceTurn is on.\");\n            return;\n        } else if (that.disableTurn === true && candidate.candidate.indexOf(\"typ relay\") !== -1) {\n            log.debug(\"Dropping candidate because disableTurn is on.\");\n            return;\n        }\n\n        candidateSendingQueue.push(candidate);\n    }\n\n    /**\n     * Handle ICE state change\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.onIceConnectionStateChange\n     * @private\n     */\n    function onIceConnectionStateChange(evt) {\n        if (!pc) {\n            return;\n        }\n\n        if (pc.iceConnectionState === 'connected') {\n            /**\n             * Indicate that we've successfully connected to the remote side. This is only helpful for the\n             * outgoing connection.\n             * @event respoke.PeerConnection#connect\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('connect');\n        }\n    }\n\n    /**\n     * Handle renegotiation\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.onNegotiationNeeded\n     * @private\n     */\n    function onNegotiationNeeded() {\n        log.warn(\"Negotiation needed.\");\n    }\n\n    /**\n     * Process any ICE candidates that we received from our browser before we were able to send\n     * our SDP to the other side.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.processSendingQueue\n     * @private\n     */\n    function processSendingQueue() {\n        candidateSendingQueue.trigger(function sendIce(can) {\n            if (!pc) {\n                return;\n            }\n\n            signalCandidate({\n                candidate: can,\n                call: that.call\n            });\n        });\n    }\n\n    /**\n     * Process any ICE candidates that we received from the other side while we were waiting on the other\n     * party's SDP to arrive and be processed.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.processReceivingQueue\n     * @private\n     */\n    function processReceivingQueue() {\n        candidateReceivingQueue.trigger(function processIce(can) {\n            if (!pc) {\n                return;\n            }\n\n            pc.addIceCandidate(new RTCIceCandidate(can.candidate), function onSuccess() {\n                log.debug((that.state.caller ? 'caller' : 'callee'), 'got a remote candidate.', can.candidate);\n                that.report.candidatesReceived.push(can.candidate);\n            }, function onError(e) {\n                log.error(\"Couldn't add ICE candidate: \" + e.message, can.candidate);\n            });\n        });\n    }\n\n    /**\n     * Save an SDP we've gotten from the browser which will be an offer and send it to the other\n     * side.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.saveOfferAndSend\n     * @param {RTCSessionDescription}\n     * @private\n     */\n    function saveOfferAndSend(oSession) {\n        oSession.type = 'offer';\n        if (!pc) {\n            return;\n        }\n        log.debug('setting and sending offer', oSession);\n        that.report.sdpsSent.push(oSession);\n\n        pc.setLocalDescription(oSession, function successHandler(p) {\n            oSession.type = 'offer';\n            signalOffer({\n                call: that.call,\n                sessionDescription: oSession,\n                onSuccess: function () {\n                    that.state.sentSDP = true;\n                    processSendingQueue();\n                },\n                onError: function (err) {\n                    respoke.log.error('offer could not be sent', err);\n                    that.call.hangup({signal: false});\n                }\n            });\n        }, function errorHandler(p) {\n            var err = new Error('Error calling setLocalDescription on offer I created.');\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.call.fire('error', {\n                message: err.message\n            });\n        });\n    }\n\n    /**\n     * Save our SDP we've gotten from the browser which will be an answer and send it to the\n     * other side.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.saveAnswerAndSend\n     * @param {RTCSessionDescription}\n     * @private\n     */\n    function saveAnswerAndSend(oSession) {\n        if (!pc) {\n            return;\n        }\n\n        if (!that.state.caller) {\n            that.report.callerconnection = that.call.connectionId;\n        }\n\n        oSession.type = 'answer';\n        log.debug('setting and sending answer', oSession);\n        that.report.sdpsSent.push(oSession);\n\n        pc.setLocalDescription(oSession, function successHandler(p) {\n            oSession.type = 'answer';\n            signalAnswer({\n                sessionDescription: oSession,\n                call: that.call,\n                onSuccess: processSendingQueue\n            });\n            that.state.sentSDP = true;\n        }, function errorHandler(p) {\n            var err = new Error('Error calling setLocalDescription on answer I created.');\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.call.fire('error', {\n                message: err.message\n            });\n        });\n    }\n\n    /**\n     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n     * signal is not false and we have not received a hangup signal from the remote party.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.close\n     * @fires respoke.PeerConnection#destoy\n     * @param {object} param\n     * @param {boolean} [param.signal] - Optional flag to indicate whether to send or suppress sending\n     * a hangup signal to the remote side. This is set to false by the library if we're responding to a\n     * hangup signal.\n     * @fires respoke.PeerConnection#close\n     */\n    that.close = function (params) {\n        params = params || {};\n        toSendHangup = true;\n\n        if (that.state.caller === true) {\n            if (!that.state.sentSDP) {\n                // Never send hangup if we are the caller but we haven't sent any other signal yet.\n                toSendHangup = false;\n            }\n        }\n\n        toSendHangup = (typeof params.signal === 'boolean' ? params.signal : toSendHangup);\n        if (toSendHangup) {\n            log.info('sending hangup');\n            signalHangup({\n                call: that.call\n            });\n        }\n\n        that.report.callStopped = new Date().getTime();\n\n        /**\n         * Indicate that the RTCPeerConnection is closed.\n         * @event respoke.PeerConnection#close\n         * @type {respoke.Event}\n         * @property {boolean} sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n         * @property {string} name - the event name.\n         * @property {respoke.PeerConnection}\n         */\n        that.fire('close', {\n            sentSignal: toSendHangup\n        });\n        that.ignore();\n\n        if (pc && that.report) {\n            pc.close();\n        }\n        pc = null;\n\n        if (that.call.enableCallDebugReport) {\n            signalReport({\n                report: that.report\n            });\n        }\n        that.report = null;\n    };\n    that.close = respoke.once(that.close);\n\n    /**\n     * Indicate whether a call is being setup or is in progress.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.isActive\n     * @returns {boolean}\n     */\n    that.isActive = function () {\n        return !!(pc && ['completed', 'connected', 'new', 'checking'].indexOf(pc.iceConnectionState) > -1);\n    };\n\n    /**\n     * Save the answer and tell the browser about it.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.listenAnswer\n     * @param {object} evt\n     * @param {object} evt.signal - The signal, including the remote SDP and the connectionId of the endpoint who\n     * answered the call.\n     * @private\n     */\n    function listenAnswer(evt) {\n        if (!pc) {\n            return;\n        }\n        log.debug('got answer', evt.signal);\n\n        that.report.sdpsReceived.push(evt.signal.sessionDescription);\n        that.state.sendOnly = respoke.sdpHasReceiveOnly(evt.signal.sessionDescription.sdp);\n        that.report.lastSDPString = evt.signal.sessionDescription.sdp;\n\n        if (that.state.caller) {\n            that.report.calleeconnection = evt.signal.fromConnection;\n        }\n\n        that.call.connectionId = evt.signal.fromConnection;\n        // TODO don't signal connected more than once.\n        signalConnected({\n            call: that.call\n        });\n\n        pc.setRemoteDescription(\n            new RTCSessionDescription(evt.signal.sessionDescription),\n            function successHandler() {\n                processReceivingQueue();\n                that.state.dispatch('receiveAnswer');\n            }, function errorHandler(p) {\n                var newErr = new Error(\"Exception calling setRemoteDescription on answer I received.\");\n                that.report.callStoppedReason = newErr.message;\n                /**\n                 * This event is fired on errors that occur during call setup or media negotiation.\n                 * @event respoke.Call#error\n                 * @type {respoke.Event}\n                 * @property {string} reason - A human readable description about the error.\n                 * @property {respoke.Call} target\n                 * @property {string} name - the event name.\n                 */\n                that.call.fire('error', {\n                    message: newErr.message\n                });\n                log.error('set remote desc of answer failed', evt.signal.sessionDescription);\n                that.report.callStoppedReason = 'setRemoteDescription failed at answer.';\n                that.close();\n            }\n        );\n    }\n\n    /**\n     * Figure out who won the call. This necessary to prevent two connections of the same endpoint from thinking\n     * they are both on the same call.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.listenConnected\n     * @private\n     */\n    function listenConnected(evt) {\n        if (evt.signal.connectionId !== client.connectionId) {\n            log.debug(\"Hanging up because I didn't win the call.\", evt.signal, client);\n            that.call.hangup({signal: false});\n        }\n    }\n\n    /**\n     * Send the initiate signal to start the modify process. This method is only called by the caller of the\n     * renegotiation.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.startModify\n     * @param {object} params\n     * @param {object} [params.constraints] - Indicate this is a request for media and what type of media.\n     * @param {boolean} [params.directConnection] - Indicate this is a request for a direct connection.\n     */\n    that.startModify = function (params) {\n        defModify = Q.defer();\n        signalModify({\n            action: 'initiate',\n            call: that.call,\n            constraints: params.constraints,\n            directConnection: params.directConnection\n        });\n    };\n\n    /**\n     * Indicate a desire from the other side to renegotiate media.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.listenModify\n     * @param {object} evt\n     * @param {object} evt.signal\n     * @private\n     */\n    function listenModify(evt) {\n        var err;\n        log.debug('PC.listenModify', evt.signal);\n\n        if (evt.signal.action === 'accept') {\n            if (defModify.promise.isPending()) {\n                defModify.resolve();\n                /**\n                 * Indicate that the remote party has accepted our invitation to begin renegotiating media.\n                 * @event respoke.PeerConnection#modify-accept\n                 * @type {respoke.Event}\n                 * @property {string} name - the event name.\n                 * @property {respoke.PeerConnection}\n                 */\n                that.fire('modify-accept', {signal: evt.signal});\n            }\n            return;\n        } else if (evt.signal.action === 'reject') {\n            if (defModify.promise.isPending()) {\n                err = new Error(\"Remote party cannot negotiate.\");\n                log.debug(err.message);\n                defModify.reject(err);\n                /**\n                 * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n                 * @event respoke.PeerConnection#modify-reject\n                 * @type {respoke.Event}\n                 * @property {Error} err\n                 * @property {string} name - the event name.\n                 * @property {respoke.PeerConnection}\n                 */\n                that.fire('modify-reject', {err: err});\n            }\n            return;\n        }\n\n        // This code only gets executed if signal.action === 'initiate'\n        if (defModify && defModify.promise.isPending()) {\n            // TODO compare signal request ID and accept if we have the higher request ID,\n            // reject if we have the lower request ID.\n            err = new Error(\"Got modify in a negotiating state.\");\n            log.debug(err.message);\n            defModify.reject(err);\n            /**\n             * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n             * @event respoke.PeerConnection#modify-reject\n             * @type {respoke.Event}\n             * @property {Error} err\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('modify-reject', {err: err});\n            signalModify({\n                action: 'reject',\n                call: that.call\n            });\n            return;\n        }\n\n        defModify = Q.defer();\n\n        if (!that.state.sentSDP || that.state.isState('idle')) {\n            err = new Error(\"Got modify in a precall state.\");\n            /**\n             * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n             * @event respoke.PeerConnection#modify-reject\n             * @type {respoke.Event}\n             * @property {Error} err\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('modify-reject', {err: err});\n            signalModify({\n                action: 'reject',\n                call: that.call\n            });\n            defModify.reject(err);\n            return;\n        }\n\n       /**\n         * Indicate that the remote party has accepted our invitation to begin renegotiating media.\n         * @event respoke.PeerConnection#modify-accept\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.PeerConnection}\n         */\n        that.fire('modify-accept', {signal: evt.signal});\n        signalModify({\n            action: 'accept',\n            call: that.call\n        });\n        defModify.resolve();\n    }\n\n    /**\n     * Save the candidate. If we initiated the call, place the candidate into the queue so\n     * we can process them after we receive the answer.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.addRemoteCandidate\n     * @param {object} params\n     * @param {RTCIceCandidate} params.candidate\n     */\n    that.addRemoteCandidate = function (params) {\n        if (!pc && (that.state.sentSDP || that.state.receivedSDP)) { // we hung up.\n            return;\n        }\n\n        if (!params || !params.candidate || !params.candidate.hasOwnProperty('sdpMLineIndex')) {\n            log.warn(\"addRemoteCandidate got wrong format!\", params);\n            return;\n        }\n\n        candidateReceivingQueue.push(params);\n    };\n\n    that.call.listen('signal-answer', listenAnswer, true);\n    that.call.listen('signal-connected', listenConnected, true);\n    that.call.listen('signal-modify', listenModify, true);\n\n    return that;\n}; // End respoke.PeerConnection\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/peerConnection.js\n ** module id = 13\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar log = require('loglevel');\nvar respoke = require('./respoke');\nvar Statechart = require('statechart');\nvar Q = require('q');\n\n/**\n * State machine for WebRTC calling, data channels, and screen sharing.\n * NOTE: All state transitions are synchronous! However, listeners to the events this class fires will be called\n * asynchronously.\n * @class respoke.CallState\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {respoke.Call} call\n * @link https://cdn.respoke.io/respoke.min.js\n * @returns {respoke.CallState}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var fsm;\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    that.className = 'respoke.CallState';\n    delete that.instanceId;\n\n    var client = respoke.getClient(instanceId);\n    var allTimers = [];\n    var answerTimer;\n    var answerTimeout = params.answerTimeout || 10000;\n    var receiveAnswerTimer;\n    var receiveAnswerTimeout = params.receiveAnswerTimeout || 60000;\n    var connectionTimer;\n    var connectionTimeout = params.connectionTimeout || 10000;\n    var modifyTimer;\n    var modifyTimeout = params.modifyTimeout || 60000;\n    var oldRole;\n\n    /*\n     * These can quite often result in a condition in which they do not cause a transition to occur.\n     * There is at least one \"universal\" (air quotes) event which probably? shouldn't? but may\n     * result in a non-transition error when it's OK, and that is the 'reject' event.\n     */\n    var nontransitionEvents = ['receiveLocalMedia', 'receiveRemoteMedia', 'approve', 'answer', 'sentOffer',\n        'receiveAnswer'];\n\n    function assert(condition) {\n        if (!condition) {\n            throw new Error(\"Assertion failed.\");\n        }\n    }\n\n    that.hasLocalMediaApproval = false;\n    that.hasLocalMedia = false;\n    that.receivedBye = false;\n    that.isAnswered = false;\n    that.sentSDP = false;\n    that.receivedSDP = false;\n    that.processedRemoteSDP = false;\n    that.needDirectConnection = !!that.needDirectConnection;\n    that.sendOnly = !!that.sendOnly;\n    that.receiveOnly = !!that.receiveOnly;\n\n    // Event\n    var rejectEvent = [{\n        target: 'connected',\n        guard: function (params) {\n            // we have any media flowing or data channel open\n            if (typeof oldRole === 'boolean') {\n                // Reset the role if we have aborted a modify.\n                that.caller = oldRole;\n            }\n\n            if (modifyTimer) {\n                modifyTimer.clear();\n            }\n\n            return that.hasMedia();\n        }\n    }, {\n        target: 'terminated',\n        guard: function (params) {\n            params = params || {};\n            // we have no media flowing or data channel open\n            that.hangupReason = params.reason || \"no media\";\n            return !that.hasMedia();\n        }\n    }];\n\n    // Event\n    function rejectModify() {\n        // reject modification\n        if (modifyTimer) {\n            modifyTimer.clear();\n        }\n    }\n\n    // Event\n    function clearReceiveAnswerTimer() {\n        that.processedRemoteSDP = true;\n        if (receiveAnswerTimer) {\n            receiveAnswerTimer.clear();\n        }\n    }\n\n    // Event\n    var hangupEvent = {\n        target: 'terminated',\n        action: function (params) {\n            params = params || {};\n            that.signalBye = params.signal;\n            that.hangupReason = that.hangupReason || params.reason || \"none\";\n        }\n    };\n\n    function needToObtainMedia(params) {\n        return (that.needDirectConnection !== true && that.receiveOnly !== true);\n    }\n\n    function needToApproveDirectConnection(params) {\n        return (that.needDirectConnection === true && typeof params.previewLocalMedia === 'function');\n    }\n\n    function automaticOffering(params) {\n        if (that.caller !== true) {\n            return false;\n        }\n\n        if (!that.needDirectConnection && that.receiveOnly) {\n            return true;\n        }\n        return (that.needDirectConnection === true && typeof params.previewLocalMedia !== 'function');\n    }\n\n    function hasListener() {\n        if ((client.hasListeners('call') && !that.needDirectConnection) ||\n                (client.hasListeners('direct-connection') && that.needDirectConnection)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function createTimer(func, name, time) {\n        var id = setTimeout(function () {\n            id = null;\n            respoke.log.error((that.caller ? \"caller's\" : \"callee's\"), name, \"timer expired.\");\n            func();\n        }, time);\n        respoke.log.debug('setting timer', name, 'for', time / 1000, 'secs');\n        var timer  = {\n            name: name,\n            clear: function () {\n                if (id === null) {\n                    return;\n                }\n                respoke.log.debug('clearing', (that.caller ? \"caller's\" : \"callee's\"), 'timer', name);\n                clearTimeout(id);\n                id = null;\n            }\n        };\n        allTimers.push(timer);\n        return timer;\n    }\n\n    var stateParams = {\n        initialState: 'idle',\n        receiveLocalMedia: function () {\n            that.hasLocalMedia = true;\n        },\n        states: {\n            // State\n            idle: {\n                // Event\n                exit: function () {\n                    that.fire('idle:exit');\n                },\n                // Event\n                initiate: [{\n                    target: 'negotiatingContainer',\n                    guard: function (params) {\n                        assert(typeof params.caller === 'boolean');\n                        return (params.caller === true || hasListener());\n                    }\n                }, {\n                    target: 'terminated',\n                    guard: function (params) {\n                        return (params.caller !== true && !hasListener());\n                    }\n                }],\n                // Event\n                receiveOffer: {\n                    action: function (params) {\n                        that.receivedSDP = true;\n                    }\n                },\n                // Event\n                hangup: hangupEvent\n            },\n            // State\n            negotiatingContainer: {\n                init: \"preparing\",\n                // Event\n                hangup: hangupEvent,\n                // Event\n                modify: rejectModify,\n                states: {\n                    preparing: {\n                        // Event\n                        entry: {\n                            action: function () {\n                                that.hasLocalMediaApproval = false;\n                                that.hasLocalMedia = false;\n                                that.sentSDP = false;\n                                that.receivedSDP = false;\n                                that.processedRemoteSDP = false;\n                                that.isAnswered = false;\n                                if (!that.isModifying()) {\n                                    answerTimer = createTimer(function () {\n                                        that.dispatch('reject', {reason: \"answer own call timer \" + that.caller});\n                                    }, 'answer own call', answerTimeout);\n                                }\n                                that.fire('preparing:entry');\n                            }\n                        },\n                        // Event\n                        exit: function () {\n                            that.fire('preparing:exit');\n                            if (answerTimer) {\n                                answerTimer.clear();\n                            }\n                        },\n                        // Event\n                        reject: rejectEvent,\n                        // Event\n                        receiveOffer: {\n                            action: function (params) {\n                                that.receivedSDP = true;\n                                if (that.isAnswered) {\n                                    // If we get here, we are the callee and we've answered the call before the call\n                                    // creation/receive offer promise chain completed.\n                                    setTimeout(function () {\n                                        that.dispatch('answer', params);\n                                    });\n                                }\n                            }\n                        },\n                        // Event\n                        answer: [{\n                            action: function (params) {\n                                assert(!params.previewLocalMedia || typeof params.previewLocalMedia === 'function');\n                                that.isAnswered = true;\n                                if (typeof params.previewLocalMedia !== 'function') {\n                                    that.hasLocalMediaApproval = true;\n                                }\n                            }\n                        }, {\n                            // we are going to send media\n                            target: 'approvingDeviceAccess',\n                            guard: needToObtainMedia\n                        }, {\n                            // we are sending a direct connection & developer wants to approve\n                            target: 'approvingContent',\n                            guard: needToApproveDirectConnection\n                        }, {\n                            target: 'offering',\n                            guard: automaticOffering\n                        }, {\n                            // we are not sending anything or developer does not want to approve media.\n                            target: 'connecting',\n                            guard: function (params) {\n                                // caller will always answer before sending offer.\n                                // callee will usually answer after receiving offer if media is requested.\n                                if (!that.receivedSDP) {\n                                    return false;\n                                }\n\n                                if (needToObtainMedia(params) || needToApproveDirectConnection(params) ||\n                                        automaticOffering(params)) {\n                                    return false;\n                                }\n\n                                if (!params.previewLocalMedia || that.receiveOnly) {\n                                    setTimeout(function () {\n                                        params.approve();\n                                    });\n                                }\n                                return (that.receiveOnly === true || that.needDirectConnection === true);\n                            }\n                        }]\n                    },\n                    // State\n                    gettingMedia: {\n                        reject: rejectEvent,\n                        // Event\n                        receiveLocalMedia: [{\n                            action: function () {\n                                that.hasLocalMedia = true;\n                            }\n                        }, {\n                            target: 'offering',\n                            guard: function (params) {\n                                return (that.caller === true && that.hasLocalMediaApproval === true &&\n                                    that.hasLocalMedia === true);\n                            }\n                        }, {\n                            target: 'connecting',\n                            guard: function (params) {\n                                return (that.caller === false && that.hasLocalMediaApproval === true &&\n                                    that.hasLocalMedia === true);\n                            }\n                        }],\n                        states: {\n                            // State\n                            approvingDeviceAccess: {\n                                // Event\n                                entry: function () {\n                                    that.fire('approving-device-access:entry');\n                                },\n                                // Event\n                                approve: [{\n                                    target: 'approvingContent',\n                                    guard: function (params) {\n                                        return (typeof params.previewLocalMedia === 'function');\n                                    }\n                                }, {\n                                    target: 'connecting',\n                                    guard: function (params) {\n                                        return (that.caller === false &&\n                                            (that.hasLocalMedia === true || that.needDirectConnection === true) &&\n                                            typeof params.previewLocalMedia !== 'function');\n                                    }\n                                }, {\n                                    target: 'offering',\n                                    guard: function (params) {\n                                        return (that.caller === true && that.hasLocalMedia === true &&\n                                            typeof params.previewLocalMedia !== 'function');\n                                    }\n                                }]\n                            },\n                            // State\n                            approvingContent: {\n                                // Event\n                                entry: function () {\n                                    that.fire('approving-content:entry');\n                                },\n                                // Event\n                                exit: function () {\n                                    that.fire('approving-content:exit');\n                                },\n                                // Event\n                                approve: [function (params) {\n                                    that.hasLocalMediaApproval = true;\n                                }, {\n                                    target: 'offering',\n                                    guard: function (params) {\n                                        return (that.caller === true && that.hasLocalMedia === true);\n                                    }\n                                }, {\n                                    target: 'connecting',\n                                    guard: function (params) {\n                                        return (that.caller === false && that.hasLocalMedia === true);\n                                    }\n                                }]\n                            }\n                        }\n                    },\n                    // State\n                    offeringContainer: {\n                        init: 'offering',\n                        reject: rejectEvent,\n                        sentOffer: function () {\n                            // start answer timer\n                            receiveAnswerTimer = createTimer(function () {\n                                that.dispatch('reject', {reason: \"receive answer timer\"});\n                            }, 'receive answer', receiveAnswerTimeout);\n                        },\n                        states: {\n                            offering: {\n                                // Event\n                                entry: function () {\n                                    that.fire('offering:entry');\n                                },\n                                // Event\n                                exit: function () {\n                                    that.fire('offering:exit');\n                                },\n                                // Event\n                                receiveLocalMedia: [function () {\n                                    that.hasLocalMedia = true;\n                                }, {\n                                    target: 'connected',\n                                    guard: function (params) {\n                                        // for direct connection, local media is the same as remote media\n                                        return (that.needDirectConnection === true);\n                                    }\n                                }],\n                                // Event\n                                receiveRemoteMedia: {\n                                    target: 'connected'\n                                },\n                                // Event\n                                receiveAnswer: [clearReceiveAnswerTimer, {\n                                    target: 'connecting'\n                                }]\n                            }\n                        }\n                    },\n                    // State\n                    connectingContainer: {\n                        init: 'connecting',\n                        reject: rejectEvent,\n                        receiveAnswer: clearReceiveAnswerTimer,\n                        states: {\n                            connecting: {\n                                // Event\n                                entry: function () {\n                                    that.fire('connecting:entry');\n\n                                    // set connection timer\n                                    connectionTimer = createTimer(function () {\n                                        that.dispatch('reject', {reason: \"connection timer\"});\n                                    }, 'connection', connectionTimeout);\n                                },\n                                // Event\n                                exit: function () {\n                                    if (connectionTimer) {\n                                        connectionTimer.clear();\n                                    }\n                                    if (modifyTimer) {\n                                        modifyTimer.clear();\n                                    }\n                                    that.fire('connecting:exit');\n                                },\n                                // Event\n                                receiveLocalMedia: [{\n                                    action: function () {\n                                        that.hasLocalMedia = true;\n                                    }\n                                }, {\n                                    target: 'connected',\n                                    guard: function (params) {\n                                        // for direct connection, local media is the same as remote media\n                                        return (that.needDirectConnection === true && that.caller === false);\n                                    }\n                                }],\n                                // Event\n                                receiveRemoteMedia: {\n                                    target: 'connected'\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            // State\n            // This state is for when we are in limbo between connected and negotiating and we are\n            // trying to figure out if the other side will allow us to modify. If we receive modify in\n            // this state, we will reject it. If the other party is in connected, we will be able to modify.\n            modifyingContainer: {\n                init: 'modifying',\n                reject: rejectEvent,\n                // Event\n                modify: rejectModify,\n                // Event\n                hangup: hangupEvent,\n                states: {\n                    modifying: {\n                        // Event\n                        entry: function () {\n                            modifyTimer = createTimer(function () {\n                                that.dispatch('reject', {reason: \"modify timer\"});\n                            }, 'modify for caller', modifyTimeout);\n                            that.fire('modifying:entry');\n                        },\n                        // Event\n                        accept: [function () {\n                            that.caller = true;\n                        }, {\n                            target: 'preparing'\n                        }],\n                        // Event\n                        exit: function () {\n                            that.fire('modifying:exit');\n                        }\n                    }\n                }\n            },\n            // State\n            connectedContainer: {\n                init: 'connected',\n                reject: {\n                    target: 'terminated',\n                    action: function (params) {\n                        that.hangupReason = params.reason || \"got reject while connected\";\n                    }\n                },\n                receiveAnswer: clearReceiveAnswerTimer,\n                // Event\n                hangup: hangupEvent,\n                states: {\n                    connected: {\n                        // Event\n                        entry: function () {\n                            oldRole = that.caller;\n                            that.needDirectConnection = false;\n                            that.fire('connected:entry');\n                        },\n                        // Event\n                        exit: function () {\n                            that.fire('connected:exit');\n                        },\n                        // Event\n                        modify: [{\n                            // be notified that the other side would like modification\n                            target: 'preparing',\n                            guard: function (params) {\n                                params = params || {};\n                                if (params.receive === true) {\n                                    that.caller = false;\n                                    modifyTimer = createTimer(function () {\n                                        // If modify gets interrupted, go back to previous roles.\n                                        that.dispatch('reject', {reason: \"modify timer\"});\n                                    }, 'modify', modifyTimeout);\n                                    return true;\n                                }\n                            }\n                        }, {\n                            // request to begin modification\n                            target: 'modifying',\n                            guard: function (params) {\n                                params = params || {};\n                                return (params.receive !== true);\n                            }\n                        }]\n                    }\n                }\n            },\n            // State\n            terminatedContainer: {\n                init: 'terminated',\n                states: {\n                    terminated: {\n                        // Event\n                        entry: {\n                            action: function () {\n                                that.fire('terminated:entry');\n                                allTimers.forEach(function (timer) {\n                                    timer.clear();\n                                });\n                                setTimeout(function () {\n                                    fsm = null;\n                                    that.ignore();\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    stateParams.that = Object.create(Statechart);\n    fsm = respoke.Class(stateParams);\n    fsm.run({\n        // rename to 'debug' to enable\n        debugOff: function () {\n            // So we can print the caller. Debug most often used when testing & tests run in the same tab.\n            var args = Array.prototype.slice.call(arguments);\n            args.splice(0, 0, that.caller);\n            respoke.log.debug.apply(respoke.log, args);\n        }\n    });\n\n    /**\n     * Return the name of the current state.\n     * @memberof! respoke.CallState\n     * @method respoke.Call.getState\n     * @returns {string}\n     */\n    that.getState = function () {\n        if (!fsm) {\n            return 'terminated';\n        }\n        return fsm.currentState().name;\n    };\n\n    /**\n     * Synchronously dispatch an event, which may or may not change the state.\n     * @memberof! respoke.CallState\n     * @method respoke.Call.dispatch\n     */\n    that.dispatch = function (evt, args) {\n        var oldState;\n        var newState;\n\n        if (!fsm) {\n            return;\n        }\n\n        oldState = that.getState();\n        try {\n            fsm.dispatch(evt, args);\n        } catch (err) {\n            respoke.log.debug('error dispatching', evt, 'from', oldState, \"with\", args, err);\n            throw err;\n        }\n        newState = that.getState();\n        if (oldState === newState && nontransitionEvents.indexOf(evt) === -1) {\n            respoke.log.debug(that.caller, \"Possible bad event \" + evt + \", no transition occured.\");\n        }\n        respoke.log.debug(that.caller, 'dispatching', evt, 'moving from ', oldState, 'to', newState, args);\n    };\n\n    /**\n     * Determine whether or not we are in the middle of a call modification.\n     * @memberof! respoke.CallState\n     * @method respoke.Call.isModifying\n     * @returns {boolean}\n     */\n    that.isModifying = function () {\n        var modifyingStates = ['preparing', 'modifying', 'approvingDeviceAccess', 'approvingMedia', 'offering'];\n        return (modifyingStates.indexOf(that.getState()) > -1 && that.hasMedia());\n    };\n\n    /**\n     * Helper for testing state name\n     * @memberof! respoke.CallState\n     * @method respoke.Call.isState\n     * @param {string} name\n     * @returns {boolean}\n     */\n    that.isState = function (name) {\n        return (that.getState() === name);\n    };\n\n    assert(typeof that.hasMedia === 'function');\n    assert(typeof that.caller === 'boolean');\n    return that;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/callState.js\n ** module id = 14\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar Q = require('q');\nvar log = require('loglevel');\nvar respoke = require('./respoke');\n\n/**\n * A `respoke.Call` is Respoke's interface into a WebRTC call, including getUserMedia,\n * path and codec negotation, and call state.\n * There are several methods on an instance of `respoke.Client` which return a `respoke.Call`.\n *\n * ```\n * var jim = client.getEndpoint({ id: 'jim' });\n * var call = jim.startAudioCall();\n * ```\n *\n * @class respoke.Call\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.instanceId - client id\n * @param {boolean} params.caller - whether or not we initiated the call\n * @param {boolean} [params.receiveOnly] - whether or not we accept media\n * @param {boolean} [params.sendOnly] - whether or not we send media\n * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n * relay servers. If it cannot flow through relay servers, the call will fail.\n * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n * required to flow peer-to-peer. If it cannot, the call will fail.\n * @param {respoke.Endpoint} params.remoteEndpoint - The endpoint who is being called.\n * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint.\n * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n * wants to perform an action between local media becoming available and calling approve().\n * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n * @param {function} params.signalReport - Signaling action from SignalingChannel.\n * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n * @param {Array<RTCConstraints>} params.constraints - Array of WebRTC constraints.\n * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n * media renegotiation.\n * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n * element with the local audio and/or video attached.\n * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n * This callback will be called when media is muted or unmuted.\n * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n * for the user to give permission to start getting audio or video.\n * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n * the approval was automatic.\n * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n * granted by the browser without asking the user to approve it.\n * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n * video attached to it.\n * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n * video attached to it.\n * @returns {respoke.Call}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Call\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n    /**\n     * A name to identify the type of object.\n     * @memberof! respoke.Call\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Call';\n\n    /**\n     * Whether or not the client is the caller of the call.\n     * @memberof! respoke.Call\n     * @name caller\n     * @type {boolean}\n     */\n    that.caller = !!that.caller;\n    Object.defineProperty(that, \"initiator\", {\n        configurable: true,\n        enumerable: true,\n        get: function () {\n            log.warn(\"The call.initiator flag is deprecated. Please use call.caller instead.\");\n            return that.caller;\n        },\n        set: function () {\n            // ignore\n        }\n    });\n\n    if (!that.caller) {\n        // Don't let Respoke.js pass any default constraints if we're accepting the call. We have no freaking clue\n        // what kind of media we are expected to provide at this point.\n        delete params.constraints;\n        that.constraints = [];\n    }\n\n    /**\n     * The call ID.\n     * @memberof! respoke.Call\n     * @name id\n     * @type {string}\n     */\n    that.id = that.caller ? respoke.makeGUID() : that.id;\n\n    if (!that.id) {\n        throw new Error(\"Can't start a new call without a call id.\");\n    }\n\n    /**\n     * Promise used to trigger actions dependant upon having received media or a datachannel.\n     * @memberof! respoke.Call\n     * @name defMedia\n     * @private\n     * @type {Promise}\n     */\n    var defMedia = Q.defer();\n    /**\n     * Promise used to trigger notification of a request for renegotiating media. For the caller of the\n     * renegotiation (which doesn't have to be the same as the caller of the call), this is resolved\n     * or rejected as soon as the 'accept' or 'reject' signal is received. For the callee, it is\n     * resolved or rejected only after the developer or user approves or rejects the modify.\n     * @memberof! respoke.Call\n     * @name defModify\n     * @private\n     * @type {Promise}\n     */\n    var defModify;\n    /**\n     * @memberof! respoke.Call\n     * @name previewLocalMedia\n     * @private\n     * @type {respoke.Call.previewLocalMedia}\n     */\n    var previewLocalMedia = params.previewLocalMedia;\n    /**\n     * @memberof! respoke.Call\n     * @name client\n     * @private\n     * @type {respoke.getClient}\n     */\n    var client = respoke.getClient(instanceId);\n    /**\n     * @memberof! respoke.Call\n     * @name signalingChannel\n     * @private\n     * @type {respoke.signalingChannel}\n     */\n    var signalingChannel = params.signalingChannel;\n\n    /**\n     * Informational property. Whether call debugs were enabled on the client during creation.\n     * Changing this value will do nothing.\n     * @name enableCallDebugReport\n     * @type {boolean}\n     */\n    that.enableCallDebugReport = params.signalingChannel.isSendingReport();\n\n    /**\n     * @memberof! respoke.Call\n     * @name pc\n     * @private\n     * @type {respoke.PeerConnection}\n     */\n    var pc = respoke.PeerConnection({\n        instanceId: instanceId,\n        state: respoke.CallState({\n            instanceId: instanceId,\n            caller: that.caller,\n            needDirectConnection: params.needDirectConnection,\n            sendOnly: params.sendOnly,\n            receiveOnly: params.receiveOnly,\n            // hasMedia is not defined yet.\n            hasMedia: function () {\n                return that.hasMedia();\n            }\n        }),\n        forceTurn: !!params.forceTurn,\n        call: that,\n        pcOptions: {\n            optional: [\n                { DtlsSrtpKeyAgreement: true },\n                { RtpDataChannels: false }\n            ]\n        },\n        offerOptions: params.offerOptions || null,\n        signalOffer: function (args) {\n            if (!pc) {\n                return;\n            }\n\n            params.signalOffer(args);\n            pc.state.dispatch('sentOffer');\n        },\n        signalConnected: params.signalConnected,\n        signalAnswer: params.signalAnswer,\n        signalModify: params.signalModify,\n        signalHangup: params.signalHangup,\n        signalReport: params.signalReport,\n        signalCandidate: params.signalCandidate\n    });\n\n    /**\n     * Array of streams of local media that we are sending to the remote party.\n     * @name outgoingMediaStreams\n     * @type {Array<respoke.LocalMedia>}\n     */\n    that.outgoingMediaStreams = [];\n    that.outgoingMediaStreams.hasAudio = function () {\n        if (that.outgoingMediaStreams.length === 0) {\n            return false;\n        }\n\n        return !that.outgoingMediaStreams.every(function (stream) {\n            return stream.getAudioTracks().length === 0;\n        });\n    };\n    that.outgoingMediaStreams.hasVideo = function () {\n        if (that.outgoingMediaStreams.length === 0) {\n            return false;\n        }\n\n        return !that.outgoingMediaStreams.every(function (stream) {\n            return stream.getVideoTracks().length === 0;\n        });\n    };\n\n    /**\n     * Local media that we are sending to the remote party. This will be undefined if we are sending no media.\n     * This property is just the first item in the `outgoingMediaStreams` array. If multiple streams are present,\n     * use that array to find the stream you need instead of relying on this property.\n     * @name outgoingMedia\n     * @type {respoke.LocalMedia}\n     */\n    Object.defineProperty(that, \"outgoingMedia\", {\n        configurable: false,\n        enumerable: true,\n        get: function () {\n            return that.outgoingMediaStreams[0];\n        },\n        set: function () {\n            // ignore\n        }\n    });\n\n    /**\n     * Array of streams of remote media that we are receiving from the remote party.\n     * @name incomingMediaStreams\n     * @type {Array<respoke.RemoteMedia>}\n     */\n    that.incomingMediaStreams = [];\n    that.incomingMediaStreams.hasAudio = function () {\n        if (that.incomingMediaStreams.length === 0) {\n            return false;\n        }\n\n        return !that.incomingMediaStreams.every(function (stream) {\n            return stream.getAudioTracks().length === 0;\n        });\n    };\n    that.incomingMediaStreams.hasVideo = function () {\n        if (that.incomingMediaStreams.length === 0) {\n            return false;\n        }\n\n        return !that.incomingMediaStreams.every(function (stream) {\n            return stream.getVideoTracks().length === 0;\n        });\n    };\n\n    /**\n     * Remote media that we are receiving from the remote party.  This will be undefined if we\n     * are receiving no media. This property is just the first item in the `incomingMediaStreams` array. If multiple\n     * streams are present, use that array to find the stream you need instead of relying on this property.\n     * @name incomingMedia\n     * @type {respoke.RemoteMedia}\n     */\n    Object.defineProperty(that, \"incomingMedia\", {\n        configurable: false,\n        enumerable: true,\n        get: function () {\n            return that.incomingMediaStreams[0];\n        },\n        set: function () {\n            // ignore\n        }\n    });\n\n    /**\n     * A flag indicating whether this call has audio or is expected to have audio coming in from the other side.\n     *\n     * @name hasAudio\n     * @type {boolean}\n     */\n    Object.defineProperty(that, \"hasAudio\", {\n        configurable: false,\n        enumerable: true,\n        get: that.incomingMediaStreams.hasAudio,\n        set: function () {\n            // ignore\n        }\n    });\n\n    /**\n     * A flag indicating whether this call has video or is expected to have video coming in from the other side.\n     *\n     * @name hasVideo\n     * @type {boolean}\n     */\n    Object.defineProperty(that, \"hasVideo\", {\n        configurable: false,\n        enumerable: true,\n        get: that.incomingMediaStreams.hasVideo,\n        set: function () {\n            // ignore\n        }\n    });\n\n    delete params.signalingChannel;\n    delete that.signalingChannel;\n\n    /**\n     * @memberof! respoke.Call\n     * @name videoIsMuted\n     * @private\n     * @type {boolean}\n     */\n    var videoIsMuted = false;\n    /**\n     * @memberof! respoke.Call\n     * @name audioIsMuted\n     * @private\n     * @type {boolean}\n     */\n    var audioIsMuted = false;\n    /**\n     * @memberof! respoke.Call\n     * @name directConnection\n     * @private\n     * @type {respoke.DirectConnection}\n     */\n    var directConnection = null;\n    /**\n     * @memberof! respoke.Call\n     * @name toSendHangup\n     * @private\n     * @type {boolean}\n     */\n    var toSendHangup = null;\n\n    /**\n     * Set up promises. If we're not the caller, we need to listen for approval AND the remote SDP to come in\n     * before we can act on the call. Save parameters sent in with the constructor, then delete them off the call.\n     * If this call was initiated with a DirectConnection, set it up so answer() will be the approval mechanism.\n     * @method respoke.Call.init\n     * @memberof! respoke.Call\n     * @fires respoke.Client#call\n     * @private\n     */\n    function init() {\n        log.debug('Call.init');\n\n        if (defModify !== undefined) {\n            defMedia = Q.defer();\n        }\n\n        pc.init(); // instantiates RTCPeerConnection, can't call on modify\n        if (defModify === undefined && pc.state.needDirectConnection === true) {\n            actuallyAddDirectConnection(params);\n        }\n    }\n\n    /**\n     * Register any event listeners passed in as callbacks, save other params to answer() and accept().\n     * @memberof! respoke.Call\n     * @method respoke.Call.saveParameters\n     * @param {object} params\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n     * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will fire even if\n     * the approval was automatic.\n     * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n     * user's media.  This event gets fired even if the allow process is automatic, i. e., permission and media is\n     * granted by the browser without asking the user to approve it.\n     * @param {Array<RTCConstraints>} [params.constraints]\n     * @param {boolean} [params.forceTurn]\n     * @param {boolean} [params.receiveOnly]\n     * @param {boolean} [params.sendOnly]\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n     * video attached to it.\n     * @private\n     * @fires respoke.Call#stats\n     */\n    function saveParameters(params) {\n        var isNewConstraint;\n\n        /* This happens when the call is hung up automatically, for instance due to the lack of an onCall\n         * handler. In this case, pc has been set to null in hangup. The call has already failed, and the\n         * invocation of this function is an artifact of async code not being finished yet, so we can just\n         * skip all of this setup.\n         */\n        if (!pc) {\n            return;\n        }\n\n        that.listen('local-stream-received', params.onLocalMedia);\n        that.listen('connect', params.onConnect);\n        that.listen('hangup', params.onHangup);\n        that.listen('allow', params.onAllow);\n        that.listen('answer', params.onAnswer);\n        that.listen('approve', params.onApprove);\n        that.listen('mute', params.onMute);\n        that.listen('requesting-media', params.onRequestingMedia);\n\n        previewLocalMedia = typeof params.previewLocalMedia === 'function' ?\n            params.previewLocalMedia : previewLocalMedia;\n\n        pc.state.receiveOnly = typeof params.receiveOnly === 'boolean' ? params.receiveOnly : pc.state.receiveOnly;\n        pc.state.sendOnly = typeof params.sendOnly === 'boolean' ? params.sendOnly : pc.state.sendOnly;\n        pc.state.needDirectConnection = typeof params.needDirectConnection === 'boolean' ?\n            params.needDirectConnection : pc.state.needDirectConnection;\n        pc.disableTurn = typeof params.disableTurn === 'boolean' ? params.disableTurn : !!pc.disableTurn;\n        pc.forceTurn = typeof params.forceTurn === 'boolean' ? params.forceTurn : !!pc.forceTurn;\n\n        that.videoLocalElement = params.videoLocalElement ? params.videoLocalElement : that.videoLocalElement;\n        that.videoRemoteElement = params.videoRemoteElement ? params.videoRemoteElement : that.videoRemoteElement;\n\n        if (pc.state.receiveOnly) {\n            that.outgoingMediaStreams.length = 0;\n            that.constraints = [];\n        } else if (params.constraints) {\n            that.constraints = respoke.convertConstraints(params.constraints);\n            updateOutgoingMediaEstimate({constraints: that.constraints[0]});\n        }\n\n        if (pc.state.sendOnly) {\n            that.incomingMediaStreams.length = 0;\n        } else if (params.constraints && pc.state.caller === true && that.incomingMediaStreams.length === 0) {\n            // TODO above condition is not good enough for media renegotiation.\n            // Only the person who initiated this round of media negotiation needs to estimate remote\n            // media based on what constraints local media is using.\n            // Also don't try to guess what media they'll send back if we're sending more than one stream.\n            that.constraints = respoke.convertConstraints(params.constraints);\n            updateIncomingMediaEstimate({constraints: params.constraints[0]});\n        }\n\n        pc.listen('stats', function fireStats(evt) {\n            /**\n             * This event is fired every time statistical information about audio and/or video on a call\n             * becomes available.\n             * @event respoke.Call#stats\n             * @type {respoke.Event}\n             * @property {respoke.MediaStats} stats - an object with stats in it.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.fire('stats', {stats: evt.stats});\n        }, true);\n\n        delete that.signalOffer;\n        delete that.signalConnected;\n        delete that.signalAnswer;\n        delete that.signalHangup;\n        delete that.signalReport;\n        delete that.signalCandidate;\n    }\n\n    /**\n     * Build respoke.LocalMedia after the call is answered.\n     * @memberof! respoke.Call\n     * @method respoke.Call.buildLocalMedia\n     * @param {RTCConstraint} constraint\n     * @private\n     */\n    function buildLocalMedia(constraint) {\n        var localMedia;\n\n        if (pc.state.receiveOnly) {\n            return;\n        }\n\n        if (constraint.className === 'respoke.LocalMedia') {\n            localMedia = constraint;\n        } else {\n            localMedia = respoke.LocalMedia({\n                streamId: that.remoteEndpoint.id,\n                state: pc.state,\n                hasScreenShare: respoke.constraintsHasScreenShare(constraint),\n                constraints: constraint\n            });\n            that.outgoingMediaStreams.push(localMedia);\n        }\n\n        // Use the element for only one set of constraints, and make sure its one that has video.\n        if (respoke.constraintsHasVideo(localMedia.constraints) &&\n                that.videoLocalElement && !that.videoLocalElement.used) {\n            that.videoLocalElement.used = true;\n            localMedia.element = that.videoLocalElement;\n        }\n\n        localMedia.listen('requesting-media', function waitAllowHandler(evt) {\n            if (!pc) {\n                return;\n            }\n\n            /**\n             * The browser is asking for permission to access the User's media. This would be an ideal time\n             * to modify the UI of the application so that the user notices the request for permissions\n             * and approves it.\n             * @event respoke.Call#requesting-media\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.Call} target\n             */\n            that.fire('requesting-media');\n        }, true);\n\n        localMedia.listen('allow', function allowHandler(evt) {\n            if (!pc) {\n                return;\n            }\n\n            /**\n             * The user has approved the request for media. Any UI changes made to remind the user to click Allow\n             * should be canceled now. This event is the same as the `onAllow` callback.  This event gets fired\n             * even if the allow process is automatic, i. e., permission and media is granted by the browser\n             * without asking the user to approve it.\n             * @event respoke.Call#allow\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.Call} target\n             */\n            that.fire('allow');\n            pc.state.dispatch('approve', {\n                previewLocalMedia: previewLocalMedia\n            });\n        }, true);\n        localMedia.listen('stream-received', streamReceivedHandler, true);\n        localMedia.listen('no-local-media', noLocalMediaHandler, true);\n        localMedia.listen('error', function errorHandler(evt) {\n            pc.state.dispatch('reject', {reason: 'media stream error'});\n            pc.report.callStoppedReason = evt.reason;\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.fire('error', {\n                reason: evt.reason\n            });\n        }, true);\n\n        localMedia.start();\n    }\n\n    /**\n     * Answer the call and start the process of obtaining media. This method is called automatically on the caller's\n     * side. This method must be called on the callee's side to indicate that the endpoint does wish to accept the\n     * call. The app will have a later opportunity, by passing a callback named previewLocalMedia, to approve or\n     * reject the call based on whether audio and/or video is working and is working at an acceptable level.\n     *\n     *     client.listen('call', function (evt) {\n     *         if (!evt.call.caller) {\n     *             evt.call.answer();\n     *         }\n     *     });\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.answer\n     * @fires respoke.Call#answer\n     * @param {object} [params]\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n     * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n     * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n     * granted by the browser without asking the user to approve it.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {boolean} [params.receiveOnly] - Whether or not we accept media.\n     * @param {boolean} [params.sendOnly] - Whether or not we send media.\n     * @param {Array<RTCConstraints>} [params.constraints] - Information about the media for this call.\n     * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n     * video attached to it.\n     */\n    that.answer = function (params) {\n        params = params || {};\n        log.debug('Call.answer', params);\n\n        saveParameters(params);\n\n        pc.listen('remote-stream-received', onRemoteStreamAdded, true);\n        pc.listen('remote-stream-removed', onRemoteStreamRemoved, true);\n\n        pc.state.once('approving-device-access:entry', function (evt) {\n            doAddVideo(params);\n        });\n        pc.state.dispatch('answer', {\n            previewLocalMedia: previewLocalMedia,\n            approve: that.approve\n        });\n        /**\n         * The call was answered.\n         * @event respoke.Call#answer\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('answer');\n    };\n\n    /**\n     * Accept a request to modify the media on the call. This method should be called within the Call#modify\n     * event listener, which gives the developer or website user a chance to see what changes are proposed and\n     * to accept or reject them.\n     *\n     *     call.listen('modify', function (evt) {\n     *         evt.call.accept();\n     *     });\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.accept\n     * @fires respoke.Call#accept\n     * @private\n     * @param {object} [params]\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the developer to receive the\n     * remote video element.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for the developer to be notified about hangup.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {boolean} [params.receiveOnly] - Whether or not we accept media.\n     * @param {boolean} [params.sendOnly] - Whether or not we send media.\n     * @param {Array<RTCConstraints>} [params.constraints] - Information about the media for this call.\n     */\n    that.accept = that.answer;\n\n    /**\n     * Start the process of network and media negotiation. If the app passes in a callback named previewLocalMedia\n     * in order to allow the logged-in person a chance to base their decision to continue the call on whether\n     * audio and/or video is working correctly,\n     * this method must be called on both sides in order to begin the call. If call.approve() is called, the call\n     * will progress as expected. If call.reject() is called, the call will be aborted.\n     *\n     *     call.listen('local-stream-received', function (evt) {\n     *         if (userLikesVideo()) {\n     *             evt.call.approve();\n     *         }\n     *     });\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.approve\n     * @fires respoke.Call#approve\n     */\n    that.approve = function () {\n        log.debug('Call.approve');\n        /**\n         * Fired when the local media access is approved.\n         * @event respoke.Call#approve\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('approve');\n        pc.state.dispatch('approve', {\n            previewLocalMedia: previewLocalMedia\n        });\n\n        if (defModify && defModify.promise.isPending()) {\n            defModify.resolve(true);\n            defModify = undefined;\n        }\n    };\n\n    /**\n     * Listen for the remote side to remove media in the middle of the call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.onRemoteStreamRemoved\n     * @private\n     * @param {object}\n     */\n    function onRemoteStreamRemoved(evt) {\n        log.debug('pc event: remote stream removed');\n    }\n\n    /**\n     * Listen for the remote side to add additional media in the middle of the call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.onRemoteStreamAdded\n     * @private\n     * @param {object}\n     * @fires respoke.Call#connect\n     */\n    function onRemoteStreamAdded(evt) {\n        var hasAudio = false;\n        var hasVideo = false;\n        var hasScreenShare = false;\n        var remoteMedia;\n        var useEl;\n\n        if (!pc) {\n            return;\n        }\n        log.debug('received remote media', evt);\n\n        // This is the first remote media we have received. The one we currently have is a guess. Rip it\n        // out and replace it with reality.\n        if (that.incomingMediaStreams.length === 1 && that.incomingMediaStreams[0].temporary === true) {\n            // have to do it this way because assigning a blank array to that.incomingMediaStreams will\n            // clobber the methods like hasAudio that we have added to the array.\n            that.incomingMediaStreams.length = 0;\n        }\n\n        hasAudio = evt.stream.getAudioTracks().length > 0;\n        hasVideo = evt.stream.getVideoTracks().length > 0;\n        // TODO this is not good enough long term.\n        hasScreenShare = hasVideo && that.target === 'screenshare';\n\n        if (that.videoRemoteElement && !that.videoRemoteElement.used) {\n            that.videoRemoteElement.used = true;\n            useEl = that.videoRemoteElement;\n        }\n\n        remoteMedia = respoke.RemoteMedia({\n            element: useEl,\n            stream: evt.stream,\n            hasScreenShare: hasScreenShare,\n            constraints: {\n                audio: hasAudio,\n                video: hasVideo\n            }\n        });\n        that.incomingMediaStreams.push(remoteMedia);\n\n        /**\n         * Indicates that either remote media stream has been added to the call or if no\n         * media is expected, the other side is receiving our media.\n         * @event respoke.Call#connect\n         * @type {respoke.Event}\n         * @property {Element} element - The HTML5 Video element with the remote stream attached.\n         * @property {respoke.RemoteMedia} stream - The incomingMedia property on the call.\n         * @property {string} name - The event name.\n         * @property {respoke.Call} target\n         */\n        pc.state.dispatch('receiveRemoteMedia');\n        that.fire('connect', {\n            stream: remoteMedia.stream,\n            element: remoteMedia.element\n        });\n    }\n\n    /**\n     * ## The plugin `respoke.MediaStats` must be loaded before using this method.\n     *\n     * Start the process of listening for a continuous stream of statistics about the flow of audio and/or video.\n     * Since we have to wait for both the answer and offer to be available before starting\n     * statistics, the library returns a promise for the stats object. The statistics object does not contain the\n     * statistics; rather it contains methods of interacting with the actions of obtaining statistics. To obtain\n     * the actual statistics one time, use stats.getStats(); use the onStats callback to obtain a continuous\n     * stream of statistics every `interval` seconds.  Returns null if stats module is not loaded.\n     *\n     *     call.getStats({\n     *         onStats: function (evt) {\n     *             console.log('Stats', evt.stats);\n     *         }\n     *     }).done(function () {\n     *         console.log('Stats started');\n     *     }, function (err) {\n     *         console.log('Call is already hung up.');\n     *     });\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.getStats\n     * @param {object} params\n     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive\n     * the stats. If no callback is provided, the call's report will contain stats but the developer will not\n     * receive them on the client-side.\n     * @param {respoke.Call.statsSuccessHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Call.errorHandler} [params.onError] - Error handler for this invocation of this method only.\n     * @returns {Promise<object>|null}\n     */\n    function getStats(params) {\n        if (pc && pc.getStats) {\n            that.listen('stats', params.onStats);\n            return pc.getStats(params);\n        }\n        return null;\n    }\n    if (respoke.MediaStats) {\n        that.getStats = getStats;\n    }\n\n    /**\n     * Return local video element with the logged-in endpoint's audio and/or video streams attached to it.\n     *\n     *     var el = call.getLocalElement();\n     *     container.append(el);\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.getLocalElement\n     * @returns {Video} An HTML5 video element.\n     */\n    that.getLocalElement = function () {\n        return that.outgoingMediaStreams[0] ? that.outgoingMediaStreams[0].element : undefined;\n    };\n\n    /**\n     * Return remote video element with the remote endpoint's audio and/or video streams attached to it.\n     *\n     *     var el = call.getRemoteElement();\n     *     container.append(el);\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.getRemoteElement\n     * @returns {Video} An HTML5 video element.\n     */\n    that.getRemoteElement = function () {\n        return that.incomingMediaStreams[0] ? that.incomingMediaStreams[0].element : undefined;\n    };\n\n    function streamReceivedHandler(evt) {\n        if (!pc) {\n            return;\n        }\n\n        defMedia.resolve(evt.target);\n        pc.addStream(evt.stream);\n        pc.state.dispatch('receiveLocalMedia');\n        if (typeof previewLocalMedia === 'function') {\n            previewLocalMedia(evt.element, that);\n        }\n\n        /**\n         * Indicate that the call has received local media from the browser.\n         * @event respoke.Call#local-stream-received\n         * @type {respoke.Event}\n         * @property {Element} element\n         * @property {respoke.LocalMedia} stream\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('local-stream-received', {\n            element: evt.element,\n            stream: evt.target\n        });\n\n        /**\n         * This event indicates that local video has been unmuted.\n         * @event respoke.Call#mute\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        evt.target.listen('mute', function (evt) {\n            that.fire('mute', {\n                type: evt.type,\n                muted: evt.muted\n            });\n        });\n    }\n\n    function noLocalMediaHandler(evt) {\n        if (!pc) {\n            return;\n        }\n\n        defMedia.resolve();\n        pc.state.dispatch('receiveLocalMedia');\n    }\n\n    /**\n     * Create the RTCPeerConnection and add handlers. Process any offer we have already received. This method is called\n     * after answer() so we cannot use this method to set up the DirectConnection.\n     * @memberof! respoke.Call\n     * @method respoke.Call.doAddVideo\n     * @private\n     * @param {object} params\n     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect]\n     * @param {respoke.Call.onHangup} [params.onHangup]\n     * @fires respoke.Call#requesting-media\n     * @fires respoke.Call#allow\n     * @fires respoke.Call#local-stream-received\n     */\n    function doAddVideo(params) {\n        log.debug('Call.doAddVideo');\n        saveParameters(params);\n    }\n\n    /**\n     * Add a video and audio stream to the existing call. By default, this method adds both video AND audio.\n     * If audio is not desired, pass {audio: false}.\n     * @memberof! respoke.Call\n     * @method respoke.Call.addVideo\n     * @private\n     * @param {object} params\n     * @param {boolean} [params.audio=true]\n     * @param {boolean} [params.video=true]\n     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints, indicating the media\n     * being requested is\n     * an audio and/or video stream.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect]\n     * @param {respoke.Call.onHangup} [params.onHangup]\n     * @param {respoke.Call.mediaSuccessHandler} [params.onSuccess]\n     * @param {respoke.Client.errorHandler} [params.onError]\n     * @returns {Promise<respoke.LocalMedia>}\n     */\n    that.addVideo = function (params) {\n        log.debug('Call.addVideo');\n        params = params || {};\n        if (!params.constraints || !params.constraints.length) {\n            params.constraints = [{video: true, audio: true}];\n        }\n        params.instanceId = instanceId;\n\n        if (!defMedia.promise.isFulfilled()) { // we're the callee & have just accepted to modify\n            doAddVideo(params);\n        } else { // we're the caller and need to see if we can modify\n            pc.startModify({\n                constraints: params.constraints\n            });\n            defModify = Q.defer();\n            defModify.promise.then(function modifyAccepted() {\n                doAddVideo(params);\n            });\n        }\n        return defModify.promise;\n    };\n\n    /**\n     * Add an audio stream to the existing call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.addAudio\n     * @private\n     * @param {object} params\n     * @param {boolean} [params.audio=true]\n     * @param {boolean} [params.video=false]\n     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints, indicating the media\n     * being requested is an audio and/or video stream.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect]\n     * @param {respoke.Call.onHangup} [params.onHangup]\n     * @param {respoke.Call.mediaSuccessHandler} [params.onSuccess]\n     * @param {respoke.Client.errorHandler} [params.onError]\n     * @returns {Promise<respoke.LocalMedia>}\n     */\n    that.addAudio = function (params) {\n        params = params || {};\n        if (!params.constraints || !params.constraints.length) {\n            params.constraints = [{video: false, audio: true}];\n        }\n\n        return that.addVideo(params);\n    };\n\n    /**\n     * Get the direct connection on this call, if it exists.\n     *\n     *     var dc = call.getDirectConnection();\n     *     if (!dc) {\n     *         console.log(\"No direct connection has been started.\");\n     *     } else {\n     *         dc.sendMessage({message: 'hi'});\n     *     }\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.getDirectConnection\n     * @returns {respoke.DirectConnection}\n     */\n    that.getDirectConnection = function () {\n        return directConnection || null;\n    };\n\n    /**\n     * Remove a direct connection from the existing call. If there is no other media, this will hang up the call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.removeDirectConnection\n     * @private\n     * @param {object} params\n     * @arg {boolean} [params.skipModify] Do not restart media negotiation.\n     */\n    that.removeDirectConnection = function (params) {\n        params = params || {};\n        log.debug('Call.removeDirectConnection');\n\n        if (directConnection) {\n            directConnection.close({skipRemove: true});\n        }\n\n        if (!that.hasMedia()) {\n            log.debug('Hanging up because there are no local streams.');\n            that.hangup();\n            return;\n        }\n\n        if (params.skipModify === true) {\n            return;\n        }\n\n        pc.startModify({\n            directConnection: false\n        });\n        defModify = Q.defer();\n        defModify.promise.done(function onModifySuccess() {\n            defMedia.resolve();\n            defModify = undefined;\n        });\n    };\n\n    /**\n     * Add a direct connection to the existing call.\n     *\n     *     call.addDirectConnection({\n     *         onOpen: function (evt) {\n     *             console.log(\"Direct connection open!\");\n     *         }\n     *     });\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.addDirectConnection\n     * @private\n     * @param {object} params\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for the developer to be notified about\n     * closing the connection.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for the developer to be notified about\n     * opening the connection.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for the developer to be notified\n     * about incoming messages. Not usually necessary to listen to this event if you are already listening to\n     * respoke.Endpoint#message.\n     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess]\n     * @param {respoke.Client.errorHandler} [params.onError]\n     * @returns {Promise<respoke.DirectConnection>}\n     */\n    that.addDirectConnection = function (params) {\n        log.debug('Call.addDirectConnection');\n        pc.startModify({\n            directConnection: true\n        });\n        defModify = Q.defer();\n        return defModify.promise.then(function onModifySuccess() {\n            return actuallyAddDirectConnection(params);\n        }, function onModifyError(err) {\n            throw err;\n        });\n    };\n\n    /**\n     * Add a direct connection to the existing call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.actuallyAddDirectConnection\n     * @private\n     * @param {object} params\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for the developer to be notified about\n     * closing the connection.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for the developer to be notified about\n     * opening the connection.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for the developer to be notified\n     * about incoming messages. Not usually necessary to listen to this event if you are already listening to\n     * respoke.Endpoint#message.\n     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess]\n     * @param {respoke.Client.errorHandler} [params.onError]\n     * @returns {Promise<respoke.DirectConnection>}\n     * @fires respoke.Client#direct-connection\n     * @fires respoke.Call#direct-connection\n     */\n    function actuallyAddDirectConnection(params) {\n        log.debug('Call.actuallyAddDirectConnection', params);\n        params = params || {};\n        defMedia.promise.then(params.onSuccess, params.onError);\n\n        if (directConnection && directConnection.isActive()) {\n            if (defMedia.promise.isPending()) {\n                defMedia.resolve(directConnection);\n            } else {\n                log.warn(\"Not creating a new direct connection.\");\n            }\n            return defMedia.promise;\n        }\n\n        params.instanceId = instanceId;\n        params.pc = pc;\n        params.call = that;\n\n        directConnection = respoke.DirectConnection(params);\n\n        directConnection.listen('close', function closeHandler() {\n            if (!that.hasMedia()) {\n                log.debug('Hanging up because there are no local streams.');\n                that.hangup();\n            } else {\n                that.removeDirectConnection({skipModify: true});\n            }\n        }, true);\n\n        directConnection.listen('accept', function acceptHandler() {\n            if (pc.state.caller === false) {\n                log.debug('Answering as a result of approval.');\n            } else {\n                defMedia.resolve(directConnection);\n            }\n        }, true);\n\n        directConnection.listen('open', function openHandler() {\n            pc.state.dispatch('receiveRemoteMedia');\n        }, true);\n\n        directConnection.listen('error', function errorHandler(err) {\n            defMedia.reject(new Error(err));\n        }, true);\n\n        that.remoteEndpoint.directConnection = directConnection;\n\n        /**\n         * This event is fired when the local end of the directConnection is available. It still will not be\n         * ready to send and receive messages until the 'open' event fires.\n         * @event respoke.Call#direct-connection\n         * @type {respoke.Event}\n         * @property {respoke.DirectConnection} directConnection\n         * @property {respoke.Endpoint} endpoint\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('direct-connection', {\n            directConnection: directConnection,\n            endpoint: that.remoteEndpoint\n        });\n\n        /**\n         * This event is fired when the logged-in endpoint is receiving a request to open a direct connection\n         * to another endpoint.  If the user wishes to allow the direct connection, calling\n         * evt.directConnection.accept() will allow the connection to be set up.\n         * @event respoke.Client#direct-connection\n         * @type {respoke.Event}\n         * @property {respoke.DirectConnection} directConnection\n         * @property {respoke.Endpoint} endpoint\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         * @private\n         */\n        client.fire('direct-connection', {\n            directConnection: directConnection,\n            endpoint: that.remoteEndpoint\n        });\n\n        if (pc.state.caller === true) {\n            directConnection.accept();\n        }\n\n        return defMedia.promise;\n    }\n\n    /**\n     * Close the direct connection.\n     * @memberof! respoke.Call\n     * @method respoke.Call.closeDirectConnection\n     */\n    that.closeDirectConnection = function () {\n        if (directConnection) {\n            directConnection.close();\n            directConnection = null;\n        }\n    };\n\n    /**\n     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n     * signal is not false and we have not received a hangup signal from the remote party.\n     * @memberof! respoke.Call\n     * @method respoke.Call.hangup\n     * @fires respoke.Call#hangup\n     * @param {object} params\n     * @arg {boolean} params.signal Optional flag to indicate whether to send or suppress sending\n     * a hangup signal to the remote side.\n     */\n    that.hangup = function (params) {\n        if (!pc) {\n            return;\n        }\n        params = params || {};\n        params.reason = params.reason || \"hangup method called.\";\n        pc.state.dispatch('hangup', params);\n    };\n    that.hangup = respoke.once(that.hangup);\n\n    /**\n     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n     * signal is not false and we have not received a hangup signal from the remote party. This is an event\n     * handler added to the state machine via `once`.\n     * @memberof! respoke.Call\n     * @method respoke.Call.hangup\n     * @fires respoke.Call#hangup\n     * @private\n     */\n    var doHangup = function () {\n        log.debug('hangup', that.caller);\n\n        that.outgoingMediaStreams.forEach(function (stream) {\n            stream.stop();\n        });\n\n        if (directConnection) {\n            directConnection.close();\n            directConnection = null;\n        }\n\n        if (pc) {\n            pc.close({signal: (pc.state.receivedBye ? false : pc.state.signalBye)});\n        }\n\n        /**\n         * This event is fired when the call has hung up.\n         * @event respoke.Call#hangup\n         * @type {respoke.Event}\n         * @property {boolean} sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('hangup', {\n            reason: pc.state.hangupReason || \"No reason specified.\"\n        });\n\n        pc.state.ignore();\n        pc.ignore();\n        that.ignore();\n        pc = null;\n    };\n    doHangup = respoke.once(doHangup);\n\n    /**\n     * Expose hangup as reject for approve/reject workflow.\n     * @memberof! respoke.Call\n     * @method respoke.Call.reject\n     * @param {object} params\n     */\n    that.reject = function () {\n        if (!pc) {\n            return;\n        }\n        pc.state.dispatch('reject', {reason: 'call.reject() called'});\n    };\n\n    /**\n     * Indicate whether a call is being setup or is in progress.\n     * @memberof! respoke.Call\n     * @method respoke.Call.isActive\n     * @returns {boolean}\n     */\n    that.isActive = function () {\n        return !!(pc && pc.isActive() && (\n            that.outgoingMediaStreams.length > 0 ||\n            that.incomingMediaStreams.length > 0 ||\n            (directConnection && directConnection.isActive())\n        ));\n    };\n\n    /**\n     * Set the estimated media status on incoming media.\n     * @memberof! respoke.Call\n     * @method respoke.Call.listenAnswer\n     * @param {object} evt\n     * @param {object} evt.signal - The offer signal including the sdp\n     * @private\n     */\n    function listenAnswer(evt) {\n        log.debug('listenAnswer', evt.signal);\n\n        that.hasDataChannel = respoke.sdpHasDataChannel(evt.signal.sessionDescription.sdp);\n        updateIncomingMediaEstimate({sdp: evt.signal.sessionDescription});\n    }\n\n    /**\n     * Set the estimated media status on incoming media.\n     * @memberof! respoke.Call\n     * @method respoke.Call.updateIncomingMediaEstimate\n     * @param {object} params\n     * @param {RTCSessionDescriptor} [params.sdp] - optional sdp to use to estimate media\n     * @param {RTCConstraints} [params.constraints] - optional constraints to use to estimate media\n     * @private\n     */\n    function updateIncomingMediaEstimate(params) {\n        if (pc.state.sendOnly) {\n            that.incomingMediaStreams.length = 0;\n            return;\n        }\n\n        if (!params.sdp && !params.constraints) {\n            throw new Error(\"Can't estimate incoming media without sdp or constraints\");\n        }\n\n        if (that.incomingMediaStreams.length === 0) {\n            that.incomingMediaStreams.push(respoke.RemoteMedia({\n                temporary: true\n            }));\n        }\n\n        if (params.sdp) {\n            if (that.incomingMediaStreams[0] && that.incomingMediaStreams[0].temporary) {\n                that.incomingMediaStreams[0].setSDP(params.sdp);\n            }\n        }\n\n        if (params.constraints) {\n            if (that.incomingMediaStreams[0] && that.incomingMediaStreams[0].temporary) {\n                that.incomingMediaStreams[0].setConstraints(params.constraints);\n            }\n        }\n    }\n\n    /**\n     * Set the estimated media status on outgoing media. For this method, by the time we have constraints, we're\n     * already calling getUserMedia so we will have exactly the right information. No need to use constraints\n     * to estimate.\n     * @memberof! respoke.Call\n     * @method respoke.Call.updateOutgoingMediaEstimate\n     * @param {object} params\n     * @param {RTCSessionDescriptor} [params.sdp] - optional sdp to use to estimate media\n     * @param {RTCConstraints} [params.constraints] - optional constraints to use to estimate media\n     * @private\n     */\n    function updateOutgoingMediaEstimate(params) {\n        if (pc.state.receiveOnly) {\n            that.outgoingMediaStreams.length = 0;\n            that.constraints = [];\n            return;\n        }\n\n        if (!params.sdp && !params.constraints) {\n            throw new Error(\"Can't estimate outgoing media without sdp or constraints\");\n        }\n\n        if (that.outgoingMediaStreams.length === 0) {\n            that.outgoingMediaStreams.push(respoke.LocalMedia({\n                instanceId: instanceId,\n                state: pc.state,\n                temporary: true\n            }));\n        }\n\n        if (params.sdp) {\n            if (that.outgoingMediaStreams[0] && that.outgoingMediaStreams[0].temporary) {\n                that.outgoingMediaStreams[0].setSDP(params.sdp);\n            }\n        }\n\n        if (params.constraints) {\n            if (that.outgoingMediaStreams[0] && that.outgoingMediaStreams[0].temporary) {\n                that.outgoingMediaStreams[0].setConstraints(params.constraints);\n            }\n        }\n    }\n\n    /**\n     * Save the offer so we can tell the browser about it after the PeerConnection is ready.\n     * Set the estimated media status on incoming and outgoing media.\n     * @memberof! respoke.Call\n     * @method respoke.Call.listenOffer\n     * @param {object} evt\n     * @param {object} evt.signal - The offer signal including the sdp\n     * @private\n     * @fires respoke.Call#modify\n     */\n    function listenOffer(evt) {\n        log.debug('listenOffer', evt.signal);\n        var info = {};\n\n        that.sessionId = evt.signal.sessionId;\n        pc.state.receiveOnly = respoke.sdpHasSendOnly(evt.signal.sessionDescription.sdp);\n        pc.state.sendOnly = respoke.sdpHasReceiveOnly(evt.signal.sessionDescription.sdp);\n        pc.state.listen('connecting:entry', function () {\n            if (!pc.state.caller) {\n                pc.processOffer(evt.signal.sessionDescription);\n            }\n        });\n\n        // Only do this if we're still trying to guess what media is coming in.\n        // TODO not good enough for media renegotiation\n        updateIncomingMediaEstimate({sdp: evt.signal.sessionDescription});\n\n        /*\n         * Always overwrite constraints for callee on every offer, since answer() and accept() will\n         * always be called after parsing the SDP. However, if the caller isn't sending any media,\n         * use audio & video as our estimate.\n         * TODO not good enough for media renegotiation\n         */\n        // If sendOnly, we can't rely on the offer for media estimate. It doesn't have any media in it!\n        if (pc.state.sendOnly) {\n            updateOutgoingMediaEstimate({constraints: {\n                audio: true,\n                video: true\n            }});\n        } else {\n            updateOutgoingMediaEstimate({sdp: evt.signal.sessionDescription});\n        }\n        log.info(\"Default outgoingMedia constraints\", that.outgoingMedia.constraints);\n\n        if (pc.state.isModifying()) {\n            if (pc.state.needDirectConnection === true) {\n                info.directConnection = directConnection;\n            } else if (pc.state.needDirectConnection === false) {\n                // Nothing\n            } else {\n                info.call = that;\n            }\n            /**\n             * Indicates a request to add something to an existing call. If 'constraints' is set, evt.constraints\n             * describes the media the other side has added. In this case, call.approve() must be called in order\n             * to approve the new media and send the same type of media.  If directConnection exists, the other side\n             * wishes to to open a direct connection. In order to approve, call directConnection.accept(). In either\n             * case, call.reject() and directConnection.reject() can be called to decline the request to add to the\n             * call.\n             * @event respoke.Call#modify\n             * @type {respoke.Event}\n             * @property {object} [constraints]\n             * @property {boolean} [directConnection]\n             * @property {string} name - the event name.\n             * @property {respoke.Call} target\n             */\n            that.fire('modify', info);\n        }\n\n        pc.state.dispatch('receiveOffer', {\n            previewLocalMedia: previewLocalMedia,\n            approve: that.approve\n        });\n    }\n\n    /**\n     * Save the answer and tell the browser about it.\n     * @memberof! respoke.Call\n     * @method respoke.Call.listenModify\n     * @private\n     */\n    function listenModify(evt) {\n        log.debug('Call.listenModify', evt);\n        if (evt.signal.action === 'initiate') {\n            defModify = Q.defer();\n            pc.state.dispatch('modify', {receive: true});\n        }\n    }\n\n    /**\n     * Set up state and media for the modify.\n     * @memberof! respoke.Call\n     * @method respoke.Call.onModifyAccept\n     * @param {respoke.Event} evt\n     * @private\n     */\n    function onModifyAccept(evt) {\n        pc.state.dispatch('accept');\n\n        if (evt.signal.action !== 'initiate') {\n            defModify.resolve(); // resolved later for callee\n            defModify = undefined;\n            return;\n        }\n\n        // callee only from here down\n\n        // init the directConnection if necessary. We don't need to do anything with\n        // audio or video right now.\n        if (evt.signal.directConnection === true) {\n            actuallyAddDirectConnection().done(function successHandler(dc) {\n                directConnection = dc;\n                directConnection.accept();\n            });\n        } else if (evt.signal.directConnection === false) {\n            if (directConnection) {\n                that.removeDirectConnection({skipModify: true});\n                defMedia.resolve(false);\n            }\n        }\n        pc.state.needDirectConnection = typeof evt.signal.directConnection === 'boolean' ?\n            evt.signal.directConnection : null;\n        that.outgoingMedia.constraints = evt.signal.constraints || that.outgoingMedia.constraints;\n    }\n\n    /**\n     * Ignore the modify.\n     * @memberof! respoke.Call\n     * @method respoke.Call.onModifyReject\n     * @param {respoke.Event} evt\n     * @param {Error} evt.err\n     * @private\n     */\n    function onModifyReject(evt) {\n        if (evt.signal.action !== 'initiate') {\n            defMedia.reject(evt.err);\n            defModify.reject(evt.err);\n            defModify = undefined;\n        }\n    }\n\n    /**\n     * If video is muted, unmute. If not muted, mute.\n     * @deprecated\n     * @memberof! respoke.Call\n     * @method respoke.Call.toggleVideo\n     */\n    that.toggleVideo = function () {\n        if (that.isActive()) {\n            if (!videoIsMuted) {\n                that.muteVideo();\n            } else {\n                that.unmuteVideo();\n            }\n        }\n    };\n\n    /**\n     * If audio is muted, unmute. If not muted, mute.\n     * @deprecated\n     * @memberof! respoke.Call\n     * @method respoke.Call.toggleAudio\n     */\n    that.toggleAudio = function () {\n        if (that.isActive()) {\n            if (!audioIsMuted) {\n                that.muteAudio();\n            } else {\n                that.unmuteAudio();\n            }\n        }\n    };\n\n    /**\n     * Indicate whether the call has media of any type flowing in either direction.\n     * @memberof! respoke.Call\n     * @method respoke.Call.hasMedia\n     * @returns {boolean}\n     */\n    that.hasMedia = function () {\n        var local;\n        var remote;\n\n        if (!pc || !pc.getLocalStreams) {\n            // PeerConnection.init() has not been called yet\n            return false;\n        }\n\n        local = pc.getLocalStreams();\n        remote = pc.getRemoteStreams();\n\n        if (directConnection && directConnection.isActive()) {\n            return true;\n        }\n\n        return (local.length > 0 || remote.length > 0);\n    };\n\n    /**\n     * Mute all local video streams.\n     * @memberof! respoke.Call\n     * @method respoke.Call.muteVideo\n     * @fires respoke.Call#mute\n     */\n    that.muteVideo = function () {\n        if (videoIsMuted) {\n            return;\n        }\n        that.outgoingMedia.muteVideo();\n        videoIsMuted = true;\n    };\n\n    /**\n     * Unmute all local video streams.\n     * @memberof! respoke.Call\n     * @method respoke.Call.unmuteVideo\n     * @fires respoke.Call#mute\n     */\n    that.unmuteVideo = function () {\n        if (!videoIsMuted) {\n            return;\n        }\n        that.outgoingMedia.unmuteVideo();\n        videoIsMuted = false;\n    };\n\n    /**\n     * Mute all local audio streams.\n     * @memberof! respoke.Call\n     * @method respoke.Call.muteAudio\n     * @fires respoke.Call#mute\n     */\n    that.muteAudio = function () {\n        if (audioIsMuted) {\n            return;\n        }\n        that.outgoingMedia.muteAudio();\n        audioIsMuted = true;\n    };\n\n    /**\n     * Unmute all local audio streams.\n     * @memberof! respoke.Call\n     * @method respoke.Call.unmuteAudio\n     * @fires respoke.Call#mute\n     */\n    that.unmuteAudio = function () {\n        if (!audioIsMuted) {\n            return;\n        }\n\n        that.outgoingMedia.unmuteAudio();\n        audioIsMuted = false;\n    };\n\n    /**\n     * Save the hangup reason and hang up.\n     * @memberof! respoke.Call\n     * @method respoke.Call.listenHangup\n     * @params {object} evt\n     * @params {object} evt.signal - The hangup signal, including an optional hangup reason.\n     * @private\n     */\n    function listenHangup(evt) {\n        if (!pc) {\n            return;\n        }\n        pc.report.callStoppedReason = evt.signal.reason || \"Remote side hung up\";\n        pc.state.receivedBye = true;\n        pc.state.dispatch('hangup', {signal: false, reason: pc.report.callStoppedReason});\n    }\n\n    pc.state.once('terminated:entry', function (evt) {\n        doHangup();\n    }, true);\n\n    that.listen('signal-answer', listenAnswer);\n    that.listen('signal-offer', function (evt) {\n        if (pc.state.getState() === 'idle') {\n            pc.state.once('preparing:entry', function () {\n                listenOffer(evt);\n            });\n        } else {\n            listenOffer(evt);\n        }\n    }, true);\n    that.listen('signal-hangup', listenHangup, true);\n    that.listen('signal-modify', listenModify, true);\n    pc.listen('modify-reject', onModifyReject, true);\n    pc.listen('modify-accept', onModifyAccept, true);\n    that.listen('signal-icecandidates', function onCandidateSignal(evt) {\n        if (!pc || !evt.signal.iceCandidates || !evt.signal.iceCandidates.length) {\n            return;\n        }\n        evt.signal.iceCandidates.forEach(function processCandidate(candidate) {\n            if (!pc) {\n                return;\n            }\n            pc.addRemoteCandidate({candidate: candidate});\n        });\n    }, true);\n\n    that.listen('answer', function (evt) {\n        if (pc.state.receiveOnly || pc.state.needDirectConnection) {\n            that.outgoingMediaStreams.length = 0;\n            return;\n        }\n\n        /*\n         * By the time we get to here, we could be in a couple of states.\n         *\n         * If receiveOnly is set to true, we could possibly have constraints (if the developer used the API wrong)\n         * but we will not have any media in that.outgoingMediaStreams. We should unset that.constraints and skip\n         * building any local media.\n         *\n         * If we have never received any constraints, and receiveOnly is NOT set to true, we will have an estimate\n         * at that.outgoingMediaStreams[0] with temporary set to true. This estimate was set by parsing the SDP.\n         *\n         * If we have received one or more constraints, that.constraints array will contain the most recent set\n         * AND we will have an estimate at that.outgoingMediaStreams[0] with temporary set to true. We must completely\n         * rebuild that.outgoingMediaStreams from that.constraints.\n         */\n        if (pc.state.receiveOnly) {\n            that.outgoingMediaStreams.length = 0;\n            that.constraints = [];\n            return;\n        }\n\n        if (that.constraints.length === 0) {\n            // We didn't get told what to do by constraints; use our guess.\n            that.outgoingMediaStreams[0].temporary = undefined;\n        } else if (that.outgoingMediaStreams.length > 0 && that.outgoingMediaStreams[0].temporary) {\n            // We got told what to do. Discard our guess. It's OK for that.outgoingMediaStreams to be empty now.\n            that.outgoingMediaStreams.shift();\n        }\n\n        if (that.constraints.length > 0) {\n            that.outgoingMediaStreams.length = 0;\n            that.constraints.forEach(buildLocalMedia);\n        } else if (that.outgoingMediaStreams.length > 0) {\n            that.outgoingMediaStreams.forEach(buildLocalMedia);\n        } else {\n            throw new Error(\"I have no idea what type of media I am supposed to build.\");\n        }\n    }, true);\n\n    if (pc.state.needDirectConnection !== true) {\n        pc.state.once('preparing:entry', function () {\n            /**\n             * This event provides notification for when an incoming call is being received.  If the user wishes\n             * to allow the call, the app should call evt.call.answer() to answer the call.\n             * @event respoke.Client#call\n             * @type {respoke.Event}\n             * @property {respoke.Call} call\n             * @property {respoke.Endpoint} endpoint\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n            client.fire('call', {\n                endpoint: that.remoteEndpoint,\n                call: that\n            });\n        }, true);\n    }\n\n    pc.state.listen('idle:exit', function (evt) {\n        saveParameters(params);\n    });\n\n    pc.state.listen('preparing:entry', function (evt) {\n        init();\n\n        if (pc.state.caller === true) {\n            that.answer();\n        }\n    }, true);\n\n    /*\n     *  If we are sending media and the other side is not, we have to fire Call#connect manually,\n     *  because the RTCPeerConnection will never reach an ICE connection state of \"connected.\"\n     *  This will need to be moved when we start handling media renegotiation.\n     */\n    pc.state.listen('connecting:entry', function connectNoMedia() {\n        if (pc.state.sendOnly) {\n            /**\n             * Indicates that either remote media stream has been added to the call or if no\n             * media is expected, the other side is receiving our media.\n             * @event respoke.Call#connect\n             * @type {respoke.Event}\n             * @property {string} name - The event name.\n             * @property {respoke.Call} target\n             */\n            that.fire('connect');\n            pc.state.dispatch('receiveRemoteMedia');\n        }\n    });\n\n    signalingChannel.getTurnCredentials().then(function (result) {\n        if (!pc) {\n            throw new Error(\"Already hung up.\");\n        }\n        if (!result) {\n            log.warn(\"Relay service not available.\");\n            pc.servers = {iceServers: []};\n        } else {\n            pc.servers = {iceServers: result};\n        }\n    }).fin(function () {\n        if (!pc) {\n            throw new Error(\"Already hung up.\");\n        }\n        pc.state.dispatch('initiate', {\n            caller: that.caller\n        });\n    }).done(null, function (err) {\n        if (err.message !== \"Already hung up.\") {\n            log.debug('Unexpected exception', err);\n        }\n    });\n\n    return that;\n}; // End respoke.Call\n\n/**\n * Handle an error that resulted from a method call.\n * @callback respoke.Call.errorHandler\n * @param {Error} err\n */\n/**\n * Handle the successful kick-off of stats on a call.\n * @callback respoke.Call.statsSuccessHandler\n * @param {respoke.MediaStatsParser} statsParser\n */\n/**\n * Handle obtaining media successfully.\n * @callback respoke.Call.mediaSuccessHandler\n * @param {respoke.LocalMedia} localMedia\n */\n/**\n * When on a call, receive local media when it becomes available. This is what you will need to provide if you want\n * to show the user their own video during a call. This callback is called every time\n * respoke.Call#local-stream-received is fired.\n * @callback respoke.Call.onLocalMedia Callback for receiving an HTML5 Video\n * element with the local audio and/or video attached.\n * @param {respoke.Event} evt\n * @param {Element} evt.element\n * @param {respoke.LocalMedia} - The outgoingMedia property on the call.\n * @param {string} evt.name - The event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * When on a call, receive remote media when it becomes available. This is what you will need to provide if you want\n * to show the user the other party's video during a call. This callback is called every time\n * respoke.Call#connect is fired.\n * @callback respoke.Call.onConnect\n * @param {respoke.Event} evt\n * @param {Element} evt.element - the HTML5 Video element with the new stream attached.\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * When a call is in setup or media renegotiation happens. This callback will be called every time\n * respoke.Call#error.\n * @callback respoke.Call.onError\n * @param {respoke.Event} evt\n * @param {boolean} evt.reason - A human-readable description of the error.\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * When on a call, receive notification the call has been hung up. This callback is called every time\n * respoke.Call#hangup is fired.\n * @callback respoke.Call.onHangup\n * @param {respoke.Event} evt\n * @param {boolean} evt.sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * Called when changing the mute state on any type of media. This callback will be called when media is muted or\n * unmuted. This callback is called every time respoke.Call#mute is fired.\n * @callback respoke.Call.onMute\n * @param {respoke.Event} evt\n * @param {respoke.Call} evt.target\n */\n/**\n * Called when the callee answers the call. This callback is called every time respoke.Call#answer is fired.\n * @callback respoke.Call.onAnswer\n * @param {respoke.Event} evt\n * @param {respoke.Call} evt.target\n */\n/**\n * Called when the user approves local media. This callback will be called whether or not the approval was based\n * on user feedback. I. e., it will be called even if the approval was automatic. This callback is called every time\n * respoke.Call#approve is fired.\n * @callback respoke.Call.onApprove\n * @param {respoke.Event} evt\n * @param {respoke.Call} evt.target\n */\n/**\n * When setting up a call, receive notification that the browser has granted access to media.  This callback is\n * called every time respoke.Call#allow is fired.\n * @callback respoke.Call.onAllow\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * When setting up a call, receive notification that the app has asked the browser for permission to get audio or\n * video and is waiting on the browser to grant or reject permission. This callback will be called every time\n * respoke.Call#requesting-media is fired.\n * @callback respoke.Call.onRequestingMedia\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * The use of stats requires an additional module to Respoke. When on a call, receive periodic statistical\n * information about the call, including the codec, lost packets, and bandwidth being consumed. This callback is\n * called every time respoke.Call#stats is fired.\n * @callback respoke.MediaStatsParser.statsHandler\n * @param {respoke.Event} evt\n * @param {respoke.MediaStats} evt.stats - an object with stats in it.\n * @param {respoke.Call} evt.target\n * @param {string} evt.name - the event name.\n */\n/**\n * When on a call, receive local media when it becomes available. This is what you will need to provide if you want\n * to allow the user to preview and approve or reject their own video before a call. If this callback is provided,\n * Respoke will wait for call.answer() to be called before proceeding. If this callback is not provided,\n * Respoke will proceed without waiting for user input. This callback is called every time\n * respoke.Call#local-stream-received is fired.\n * @callback respoke.Call.previewLocalMedia\n * @param {object} element - the HTML5 Video element with the new stream attached.\n * @param {respoke.Call} call\n */\n/**\n * Receive the DirectConnection.\n * @callback respoke.Call.directConnectionSuccessHandler\n * @param {respoke.DirectConnection} directConnection\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/call.js\n ** module id = 15\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar log = require('loglevel');\nvar respoke = require('./respoke');\n\n/**\n * A wrapper around the stream from `getUserMedia`,\n * which is attached to a call at `call.outgoingMedia`.\n *\n * @class respoke.LocalMedia\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {object} [params.constraints]\n * @param {HTMLVideoElement} params.element - Pass in an optional html video element to have local\n * video attached to it.\n * @returns {respoke.LocalMedia}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = respoke.EventEmitter(params);\n\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.LocalMedia';\n    /**\n     * Respoke media ID (different from a `MediaStream.id`).\n     * @memberof! respoke.LocalMedia\n     * @name id\n     * @type {string}\n     */\n    that.id = respoke.makeGUID();\n    /**\n     * The HTML element with video attached.\n     * @memberof! respoke.LocalMedia\n     * @name element\n     * @type {HTMLVideoElement}\n     */\n    that.element = params.element;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name hasScreenShare\n     * @private\n     * @type {boolean}\n     */\n    var hasScreenShare = params.hasScreenShare;\n    delete params.hasScreenShare;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name sdpHasAudio\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasAudio = false;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name sdpHasVideo\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasVideo = false;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name sdpHasDataChannel\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasDataChannel = false;\n    /**\n     * A timer to make sure we only fire {respoke.LocalMedia#requesting-media} if the browser doesn't\n     * automatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.\n     * @memberof! respoke.LocalMedia\n     * @name allowTimer\n     * @private\n     * @type {number}\n     */\n    var allowTimer = 0;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name mediaOptions\n     * @private\n     * @type {object}\n     */\n    var mediaOptions = {\n        optional: [\n            { DtlsSrtpKeyAgreement: true },\n            { RtpDataChannels: false }\n        ]\n    };\n\n    /**\n     * The local `MediaStream` from `getUserMedia()`.\n     * @memberof! respoke.LocalMedia\n     * @name stream\n     * @type {RTCMediaStream}\n     */\n    that.stream = null;\n\n    function getStream(theConstraints) {\n        for (var i = 0; i < respoke.streams.length; i++) {\n            var s = respoke.streams[i];\n            if (respoke.isEqual(s.constraints, theConstraints)) {\n                return s.stream;\n            }\n        }\n        return null;\n    }\n\n    function removeStream(theConstraints) {\n        var toRemoveIndex;\n        for (var i = 0; i < respoke.streams.length; i++) {\n            var s = respoke.streams[i];\n            if (respoke.isEqual(s.constraints, theConstraints)) {\n                toRemoveIndex = i;\n                break;\n            }\n        }\n        if (toRemoveIndex !== undefined) {\n            respoke.streams.splice(toRemoveIndex, 1);\n        }\n    }\n\n    /**\n     * Save the local stream. Kick off SDP creation.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.onReceiveUserMedia\n     * @private\n     * @param {RTCMediaStream} theStream\n     * @fires respoke.LocalMedia#stream-received\n     */\n    function onReceiveUserMedia(theStream) {\n        that.stream = theStream;\n        clearTimeout(allowTimer);\n        /**\n         * The user has approved the request for media. Any UI changes made to remind the user to click Allow\n         * should be canceled now. This event is the same as the `onAllow` callback.  This event gets fired\n         * even if the allow process is automatic, i. e., permission and media is granted by the browser\n         * without asking the user to approve it.\n         * @event respoke.LocalMedia#allow\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         */\n        that.fire('allow');\n        log.debug('User gave permission to use media.');\n        log.debug('onReceiveUserMedia');\n\n        that.element = that.element || document.createElement('video');\n\n        // This still needs some work. Using cached streams causes an unused video element to be passed\n        // back to the App. This is because we assume at the moment that only one local media video element\n        // will be needed. The first one passed back will contain media and the others will fake it. Media\n        // will still be sent with every peer connection. Also need to study the use of getLocalElement\n        // and the implications of passing back a video element with no media attached.\n        var aStream = getStream(that.constraints);\n        if (aStream) {\n            aStream.numPc += 1;\n\n            attachMediaStream(that.element, that.stream);\n            // We won't want our local video outputting audio.\n            that.element.muted = true;\n            that.element.autoplay = true;\n\n            /**\n             * Indicate that we've received media from the browser.\n             * @event respoke.LocalMedia#stream-received\n             * @type {respoke.Event}\n             * @property {Element} element - the HTML5 Video element with the new stream attached.\n             * @property {RTCMediaStream} stream - the HTML5 Video stream\n             * @property {string} name - the event name.\n             * @property {respoke.LocalMedia} target\n             */\n            that.fire('stream-received', {\n                element: that.element,\n                stream: that.stream\n            });\n        } else {\n            that.stream.numPc = 1;\n            respoke.streams.push({stream: that.stream, constraints: that.constraints});\n\n            that.stream.id = that.streamId;\n            attachMediaStream(that.element, that.stream);\n            // We won't want our local video outputting audio.\n            that.element.muted = true;\n            that.element.autoplay = true;\n\n            /**\n             * Indicate that we've received media from the browser.\n             * @event respoke.LocalMedia#stream-received\n             * @type {respoke.Event}\n             * @property {Element} element - the HTML5 Video element with the new stream attached.\n             * @property {RTCMediaStream} stream - the HTML5 Video stream\n             * @property {string} name - the event name.\n             * @property {respoke.LocalMedia} target\n             */\n            that.fire('stream-received', {\n                element: that.element,\n                stream: that.stream\n            });\n        }\n    }\n\n    /**\n     * Expose getAudioTracks.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.getAudioTracks\n     */\n    that.getAudioTracks = function () {\n        if (that.stream) {\n            return that.stream.getAudioTracks();\n        }\n        return [];\n    };\n\n    /**\n     * Expose getVideoTracks.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.getVideoTracks\n     */\n    that.getVideoTracks = function () {\n        if (that.stream) {\n            return that.stream.getVideoTracks();\n        }\n        return [];\n    };\n\n    /**\n     * Create the RTCPeerConnection and add handlers. Process any offer we have already received.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.requestMedia\n     * @private\n     */\n    function requestMedia() {\n        if (that.state.receiveOnly === true) {\n            /**\n             * Indicate there is no need to obtain media at this time.\n             * @event respoke.LocalMedia#no-local-media\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.LocalMedia} target\n             */\n            that.fire('no-local-media');\n            return;\n        }\n\n        log.debug('requestMedia', that.state.caller);\n\n        if (!that.constraints) {\n            throw new Error('No constraints.');\n        }\n\n        var theStream = getStream(that.constraints);\n        if (theStream) {\n            log.debug('using old stream');\n            onReceiveUserMedia(theStream);\n            return;\n        }\n\n        // TODO set getStream(that.constraints) = true as a flag that we are already\n        // attempting to obtain this media so the race condition where gUM is called twice with\n        // the same constraints when calls are placed too quickly together doesn't occur.\n        allowTimer = setTimeout(function delayPermissionsRequest() {\n            /**\n             * The browser is asking for permission to access the User's media. This would be an ideal time\n             * to modify the UI of the application so that the user notices the request for permissions\n             * and approves it.\n             * @event respoke.LocalMedia#requesting-media\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.LocalMedia} target\n             */\n            that.fire('requesting-media');\n        }, 500);\n        if (respoke.useFakeMedia === true) {\n            that.constraints.fake = true;\n        }\n        if (!respoke.isNwjs && that.constraints.video.mandatory &&\n                that.constraints.video.mandatory.chromeMediaSource) {\n            if (respoke.needsChromeExtension && respoke.hasChromeExtension) {\n                respoke.chooseDesktopMedia(function (params) {\n                    if (!params.sourceId) {\n                        respoke.log.error(\"Error trying to get screensharing source.\", params.error);\n                        /**\n                         * Indicate there has been an error obtaining media.\n                         * @event respoke.LocalMedia#error\n                         * @type {respoke.Event}\n                         * @property {string} name - the event name.\n                         * @property {respoke.LocalMedia} target\n                         * @property {string} message - a textual description of the error.\n                         */\n                        that.fire('error', {error: 'Permission denied.'});\n                        return;\n                    }\n                    that.constraints.video.mandatory.chromeMediaSourceId = params.sourceId;\n                    log.debug(\"Running getUserMedia with constraints\", that.constraints);\n                    getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n                });\n                return;\n            } else {\n                throw new Error(\"Screen sharing not implemented on this platform yet.\");\n            }\n        }\n        log.debug(\"Running getUserMedia with constraints\", that.constraints);\n        getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n    }\n\n    /**\n     * Handle any error that comes up during the process of getting user media.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.onUserMediaError\n     * @private\n     * @param {object}\n     */\n    function onUserMediaError(p) {\n        log.debug('onUserMediaError');\n        if (p.code === 1) {\n            log.warn(\"Permission denied.\");\n            /**\n             * Indicate there has been an error obtaining media.\n             * @event respoke.LocalMedia#error\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.LocalMedia} target\n             * @property {string} message - a textual description of the error.\n             */\n            that.fire('error', {error: 'Permission denied.'});\n        } else {\n            log.warn(p);\n            /**\n             * Indicate there has been an error obtaining media.\n             * @event respoke.LocalMedia#error\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.LocalMedia} target\n             * @property {string} message - a textual description of the error.\n             */\n            that.fire('error', {error: p.code});\n        }\n    }\n\n    /**\n     * Whether the video stream is muted, or undefined if no stream of this type exists.\n     *\n     * All video tracks must be muted for this to return `false`.\n     * @returns boolean\n     */\n    that.isVideoMuted = function () {\n        if (!that.stream || !that.stream.getVideoTracks().length) {\n            return undefined;\n        }\n\n        return that.stream.getVideoTracks().every(function (track) {\n            return !track.enabled;\n        });\n    };\n\n    /**\n     * Mute local video stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.muteVideo\n     * @fires respoke.LocalMedia#mute\n     */\n    that.muteVideo = function () {\n        if (that.isVideoMuted()) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });\n        /**\n         * Indicate that the mute status of local audio or video has changed.\n         * @event respoke.LocalMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'video',\n            muted: true\n        });\n    };\n\n    /**\n     * Unmute local video stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.unmuteVideo\n     * @fires respoke.LocalMedia#mute\n     */\n    that.unmuteVideo = function () {\n        if (!that.isVideoMuted()) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });\n        /**\n         * Indicate that the mute status of local audio or video has changed.\n         * @event respoke.LocalMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'video',\n            muted: false\n        });\n    };\n\n    /**\n     * Whether the audio stream is muted, or undefined if no track of this type exists.\n     *\n     * All audio tracks must be muted for this to return `false`.\n     * @returns boolean\n     */\n    that.isAudioMuted = function () {\n        if (!that.stream || !that.stream.getAudioTracks().length) {\n            return undefined;\n        }\n        return that.stream.getAudioTracks().every(function (track) {\n            return !track.enabled;\n        });\n    };\n\n    /**\n     * Mute local audio stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.muteAudio\n     * @fires respoke.LocalMedia#mute\n     */\n    that.muteAudio = function () {\n        if (that.isAudioMuted()) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });\n        /**\n         * Indicate that the mute status of local audio or video has changed.\n         * @event respoke.LocalMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'audio',\n            muted: true\n        });\n    };\n\n    /**\n     * Unmute local audio stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.unmuteAudio\n     * @fires respoke.LocalMedia#mute\n     */\n    that.unmuteAudio = function () {\n        if (!that.isAudioMuted()) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });\n        /**\n         * Indicate that the mute status of local audio or video has changed.\n         * @event respoke.LocalMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'audio',\n            muted: false\n        });\n    };\n\n    /**\n     * Stop the stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.stop\n     * @fires respoke.LocalMedia#stop\n     */\n    that.stop = function () {\n        if (!that.stream) {\n            return;\n        }\n\n        that.stream.numPc -= 1;\n        if (that.stream.numPc === 0) {\n            that.stream.stop();\n            removeStream(that.constraints);\n        }\n        that.stream = null;\n        /**\n         * Indicate that local media has stopped.\n         * @event respoke.LocalMedia#stop\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         */\n        that.fire('stop');\n    };\n\n    /**\n     * Indicate whether we are sending a screenshare.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.hasScreenShare\n     * @return {boolean}\n     */\n    that.hasScreenShare = function () {\n        if (that.stream) {\n            return (that.stream.getVideoTracks().length > 0 && hasScreenShare);\n        }\n        return hasScreenShare;\n    };\n\n    /**\n     * Indicate whether we are sending video.\n     *\n     * Note: This method will return true when the video is a screenshare.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.hasVideo\n     * @return {boolean}\n     */\n    that.hasVideo = function () {\n        if (that.stream) {\n            return (that.stream.getVideoTracks().length > 0);\n        }\n        return sdpHasVideo;\n    };\n\n    /**\n     * Indicate whether we are sending audio.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.hasAudio\n     * @return {boolean}\n     */\n    that.hasAudio = function () {\n        if (that.stream) {\n            return (that.stream.getAudioTracks().length > 0);\n        }\n        return sdpHasAudio;\n    };\n\n    /**\n     * Indicate whether we have media yet.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.hasMedia\n     * @return {boolean}\n     */\n    that.hasMedia = function () {\n        return !!that.stream;\n    };\n\n    /**\n     * Save and parse the SDP.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.setSDP\n     * @param {RTCSessionDescription} oSession\n     * @private\n     */\n    that.setSDP = function (oSession) {\n        sdpHasVideo = respoke.sdpHasVideo(oSession.sdp);\n        sdpHasAudio = respoke.sdpHasAudio(oSession.sdp);\n        sdpHasDataChannel = respoke.sdpHasDataChannel(oSession.sdp);\n\n        // We don't have media yet & this can still be changed so create the defaults based on what the sdp says.\n        if (that.temporary) {\n            that.constraints = {\n                video: sdpHasVideo,\n                audio: sdpHasAudio,\n                mandatory: {},\n                optional: []\n            };\n        }\n    };\n\n    /**\n     * Parse the constraints.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.setConstraints\n     * @param {MediaConstraints} constraints\n     * @private\n     */\n    that.setConstraints = function (constraints) {\n        that.constraints = constraints;\n        sdpHasVideo = respoke.constraintsHasVideo(that.constraints);\n        sdpHasAudio = respoke.constraintsHasAudio(that.constraints);\n    };\n\n    /**\n     * Start the stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.start\n     * @fires respoke.LocalMedia#start\n     * @private\n     */\n    that.start = function () {\n        if (that.state.receiveOnly) {\n            throw new Error(\"Local media started when receiveOnly is set!\");\n        }\n\n        if (that.temporary) {\n            throw new Error(\"Temporary local media started!\");\n        }\n\n        try {\n            requestMedia();\n        } catch (err) {\n            clearTimeout(allowTimer);\n            /**\n             * Indicate there has been an error obtaining media.\n             * @event respoke.LocalMedia#error\n             * @property {string} name - the event name.\n             * @property {respoke.LocalMedia} target\n             * @property {string} message - a textual description of the error.\n             */\n            that.fire('error', {reason: err.message});\n        }\n    };\n\n    return that;\n}; // End respoke.LocalMedia\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/localMedia.js\n ** module id = 16\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar log = require('loglevel');\nvar respoke = require('./respoke');\n\n/**\n * Class for managing the remote media stream,\n * which is attached to a call at `call.outgoingMedia`.\n *\n * @class respoke.RemoteMedia\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {object} params.constraints\n * @param {boolean} params.temporary - whether this instance represents our best guess of future media. If so,\n * this object will be deleted when real media comes in. It will be replaced by different instance of\n * respoke.RemoteMedia representing the actual state of media.\n * @param {HTMLVideoElement} params.element - Pass in an optional html video element to have remote\n * video attached to it.\n * @returns {respoke.RemoteMedia}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var that = respoke.EventEmitter(params);\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.RemoteMedia';\n    /**\n     * Respoke media ID (different from a `MediaStream.id`).\n     * @memberof! respoke.RemoteMedia\n     * @name id\n     * @type {string}\n     */\n    that.id = respoke.makeGUID();\n    /**\n     * The HTML element with attached video.\n     * @memberof! respoke.RemoteMedia\n     * @name element\n     * @type {HTMLVideoElement}\n     */\n    that.element = params.element || document.createElement('video');\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name hasScreenShare\n     * @private\n     * @type {boolean}\n     */\n    var hasScreenShare = params.hasScreenShare;\n    delete params.hasScreenShare;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name sdpHasAudio\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasAudio = false;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name sdpHasVideo\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasVideo = false;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name sdpHasDataChannel\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasDataChannel = false;\n    /**\n     * A timer to make sure we only fire {respoke.RemoteMedia#requesting-media} if the browser doesn't\n     * automatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.\n     * @memberof! respoke.RemoteMedia\n     * @name allowTimer\n     * @private\n     * @type {number}\n     */\n    var allowTimer = 0;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name mediaOptions\n     * @private\n     * @type {object}\n     */\n    var mediaOptions = {\n        optional: [\n            { DtlsSrtpKeyAgreement: true },\n            { RtpDataChannels: false }\n        ]\n    };\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name pc\n     * @private\n     * @type {respoke.PeerConnection}\n     */\n    var pc = params.pc;\n    delete that.pc;\n    /**\n     * The remote `MediaStream`.\n     * @memberof! respoke.RemoteMedia\n     * @name stream\n     * @type {RTCMediaStream}\n     */\n    that.stream = params.stream;\n    attachMediaStream(that.element, that.stream);\n    that.element.autoplay = true;\n    setTimeout(that.element.play.bind(that.element)); // stupid Firefox requires this.\n\n    /**\n     * Indicate whether we are receiving a screenshare.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.hasScreenShare\n     * @return {boolean}\n     */\n    that.hasScreenShare = function () {\n        if (that.stream) {\n            return (that.stream.getVideoTracks().length > 0 && hasScreenShare);\n        }\n        return hasScreenShare;\n    };\n\n    /**\n     * Indicate whether we are receiving video.\n     *\n     * Note: This method will return true when the video is a screenshare.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.hasVideo\n     * @return {boolean}\n     */\n    that.hasVideo = function () {\n        if (that.stream) {\n            return (that.stream.getVideoTracks().length > 0);\n        }\n        return sdpHasVideo;\n    };\n\n    /**\n     * Indicate whether we are receiving audio.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.hasAudio\n     * @return {boolean}\n     */\n    that.hasAudio = function () {\n        if (that.stream) {\n            return (that.stream.getAudioTracks().length > 0);\n        }\n        return sdpHasAudio;\n    };\n\n    /**\n     * Indicate whether we have media yet.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.hasMedia\n     * @return {boolean}\n     */\n    that.hasMedia = function () {\n        return !!that.stream;\n    };\n\n    /**\n     * Save and parse the SDP\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.setSDP\n     * @param {RTCSessionDescription} oSession\n     * @private\n     */\n    that.setSDP = function (oSession) {\n        sdpHasVideo = respoke.sdpHasVideo(oSession.sdp);\n        sdpHasAudio = respoke.sdpHasAudio(oSession.sdp);\n        sdpHasDataChannel = respoke.sdpHasDataChannel(oSession.sdp);\n    };\n\n    /**\n     * Parse the constraints.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.setConstraints\n     * @param {MediaConstraints} constraints\n     * @private\n     */\n    that.setConstraints = function (constraints) {\n        that.constraints = constraints;\n        sdpHasVideo = respoke.constraintsHasVideo(that.constraints);\n        sdpHasAudio = respoke.constraintsHasAudio(that.constraints);\n    };\n\n    /**\n     * Expose getAudioTracks.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.getAudioTracks\n     */\n    that.getAudioTracks = function () {\n        if (that.stream) {\n            return that.stream.getAudioTracks();\n        }\n        return [];\n    };\n\n    /**\n     * Expose getVideoTracks.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.getVideoTracks\n     */\n    that.getVideoTracks = function () {\n        if (that.stream) {\n            return that.stream.getVideoTracks();\n        }\n        return [];\n    };\n\n    /**\n     * Stop the stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.stop\n     * @fires respoke.RemoteMedia#stop\n     */\n    that.stop = function () {\n        if (!that.stream) {\n            return;\n        }\n\n        that.stream.numPc -= 1;\n        if (that.stream.numPc === 0) {\n            that.stream.stop();\n            delete respoke.streams[that.constraints];\n        }\n        that.stream = null;\n        /**\n         * Indicate that remote media has stopped.\n         * @event respoke.RemoteMedia#stop\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         */\n        that.fire('stop');\n    };\n\n    /**\n     * Whether the video stream is muted.\n     *\n     * All video tracks must be muted for this to return `false`.\n     * @returns boolean\n     */\n    that.isVideoMuted = function () {\n        if (!that.stream) {\n            return false;\n        }\n        return that.stream.getVideoTracks().every(function (track) {\n            return !track.enabled;\n        });\n    };\n\n    /**\n     * Mute remote video stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.muteVideo\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.muteVideo = function () {\n        if (that.isVideoMuted()) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });\n        /**\n         * Indicate that the muted status of remote video or audio has changed.\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'video',\n            muted: true\n        });\n    };\n\n    /**\n     * Unmute remote video stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.unmuteVideo\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.unmuteVideo = function () {\n        if (!that.isVideoMuted()) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });\n        /**\n         * Indicate that the muted status of remote video or audio has changed.\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'video',\n            muted: false\n        });\n    };\n\n    /**\n     * Whether the audio stream is muted.\n     *\n     * All audio tracks must be muted for this to return `false`.\n     * @returns boolean\n     */\n    that.isAudioMuted = function () {\n        if (!that.stream) {\n            return false;\n        }\n        return that.stream.getAudioTracks().every(function (track) {\n            return !track.enabled;\n        });\n    };\n\n    /**\n     * Mute remote audio stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.muteAudio\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.muteAudio = function () {\n        if (that.isAudioMuted()) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });\n        /**\n         * Indicate that the muted status of remote video or audio has changed.\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'audio',\n            muted: true\n        });\n    };\n\n    /**\n     * Unmute remote audio stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.unmuteAudio\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.unmuteAudio = function () {\n        if (!that.isAudioMuted()) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });\n        /**\n         * Indicate that the muted status of remote video or audio has changed.\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'audio',\n            muted: false\n        });\n    };\n\n    return that;\n}; // End respoke.RemoteMedia\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/remoteMedia.js\n ** module id = 17\n ** module chunks = 0\n **/","/*\r\n * loglevel - https://github.com/pimterry/loglevel\r\n *\r\n * Copyright (c) 2013 Tim Perry\r\n * Licensed under the MIT license.\r\n */\r\n\r\n;(function (undefined) {\r\n    var undefinedType = \"undefined\";\r\n    \r\n    (function (name, definition) {\r\n        if (typeof module !== 'undefined') {\r\n            module.exports = definition();\r\n        } else if (typeof define === 'function' && typeof define.amd === 'object') {\r\n            define(definition);\r\n        } else {\r\n            this[name] = definition();\r\n        }\r\n    }('log', function () {\r\n        var self = {};\r\n        var noop = function() {};\r\n\r\n        function realMethod(methodName) {\r\n            if (typeof console === undefinedType) {\r\n                return noop;\r\n            } else if (console[methodName] === undefined) {\r\n                return boundToConsole(console, 'log') || noop;\r\n            } else {\r\n                return boundToConsole(console, methodName);\r\n            }\r\n        }\r\n\r\n        function boundToConsole(console, methodName) {\r\n            var method = console[methodName];\r\n            if (method.bind === undefined) {\r\n                if (Function.prototype.bind === undefined) {\r\n                    return function() {\r\n                        method.apply(console, arguments);\r\n                    };\r\n                } else {\r\n                    return Function.prototype.bind.call(console[methodName], console);\r\n                }\r\n            } else {\r\n                return console[methodName].bind(console);\r\n            }\r\n        }\r\n\r\n        var logMethods = [\r\n            \"trace\",\r\n            \"debug\",\r\n            \"info\",\r\n            \"warn\",\r\n            \"error\"\r\n        ];\r\n\r\n        function clearMethods() {\r\n            for (var ii = 0; ii < logMethods.length; ii++) {\r\n                self[logMethods[ii]] = noop;\r\n            }\r\n        }\r\n\r\n        function cookiesAvailable() {\r\n            return (typeof window !== undefinedType &&\r\n                    window.document !== undefined &&\r\n                    window.document.cookie !== undefined);\r\n        }\r\n\r\n        function setLevelInCookie(levelNum) {\r\n            if (!cookiesAvailable()) {\r\n                return;\r\n            }\r\n\r\n            var levelName;\r\n\r\n            for (var key in self.levels) {\r\n                if (self.levels.hasOwnProperty(key) && self.levels[key] === levelNum) {\r\n                    levelName = key;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (levelName !== undefined) {\r\n                window.document.cookie = \"loglevel=\" + levelName + \";\";\r\n            }\r\n        }\r\n\r\n        var cookieRegex = /loglevel=([^;]+)/;\r\n\r\n        function loadLevelFromCookie() {\r\n            var cookieLevel;\r\n\r\n            if (cookiesAvailable()) {\r\n                var cookieMatch = cookieRegex.exec(window.document.cookie) || [];\r\n                cookieLevel = cookieMatch[1];\r\n            }\r\n\r\n            self.setLevel(self.levels[cookieLevel] || self.levels.WARN);\r\n        }\r\n\r\n        /*\r\n         *\r\n         * Public API\r\n         *\r\n         */\r\n\r\n        self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\r\n            \"ERROR\": 4, \"SILENT\": 5};\r\n\r\n        self.setLevel = function (level) {\r\n            if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\r\n                setLevelInCookie(level);\r\n\r\n                if (level === self.levels.SILENT) {\r\n                    clearMethods();\r\n                    return;\r\n                } else if (typeof console === undefinedType) {\r\n                    clearMethods();\r\n                    throw \"No console available for logging\";\r\n                } else {\r\n                    for (var ii = 0; ii < logMethods.length; ii++) {\r\n                        var methodName = logMethods[ii];\r\n\r\n                        if (level <= self.levels[methodName.toUpperCase()]) {\r\n                            self[methodName] = realMethod(methodName);\r\n                        } else {\r\n                            self[methodName] = noop;\r\n                        }\r\n                    }\r\n                }\r\n            } else if (typeof level === \"string\") {\r\n                self.setLevel(self.levels[level.toUpperCase()]);\r\n            } else {\r\n                throw \"log.setLevel() called with invalid level: \" + level;\r\n            }\r\n        };\r\n\r\n        self.enableAll = function() {\r\n            self.setLevel(self.levels.TRACE);\r\n        };\r\n\r\n        self.disableAll = function() {\r\n            self.setLevel(self.levels.SILENT);\r\n        };\r\n\r\n        try {\r\n            loadLevelFromCookie();\r\n        } catch (e) {\r\n            self.setLevel(self.levels.SILENT);\r\n        }\r\n        return self;\r\n    }));\r\n})();\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/loglevel/lib/loglevel.js\n ** module id = 18\n ** module chunks = 0\n **/","// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    \"use strict\";\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\" && typeof module === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else if (typeof self !== \"undefined\") {\n        self.Q = definition();\n\n    } else {\n        throw new Error(\"This environment was not anticiapted by Q. Please file a bug.\");\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n\n    function flush() {\n        /* jshint loopfunc: true */\n\n        while (head.next) {\n            head = head.next;\n            var task = head.task;\n            head.task = void 0;\n            var domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n\n            try {\n                task();\n\n            } catch (e) {\n                if (isNodeJS) {\n                    // In node, uncaught exceptions are considered fatal errors.\n                    // Re-throw them synchronously to interrupt flushing!\n\n                    // Ensure continuation if the uncaught exception is suppressed\n                    // listening \"uncaughtException\" events (as domains does).\n                    // Continue in next event to avoid tick recursion.\n                    if (domain) {\n                        domain.exit();\n                    }\n                    setTimeout(flush, 0);\n                    if (domain) {\n                        domain.enter();\n                    }\n\n                    throw e;\n\n                } else {\n                    // In browsers, uncaught exceptions are not fatal.\n                    // Re-throw them asynchronously to avoid slow-downs.\n                    setTimeout(function() {\n                       throw e;\n                    }, 0);\n                }\n            }\n\n            if (domain) {\n                domain.exit();\n            }\n        }\n\n        flushing = false;\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process !== \"undefined\" && process.nextTick) {\n        // Node.js before 0.9. Note that some fake-Node environments, like the\n        // Mocha test runner, introduce a `process` global without a `nextTick`.\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack &&\n        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack) {\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        error.stack = filterStackString(concatedStacks);\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n// enable long stacks if Q_DEBUG is set\nif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n}\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            Q.nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n        promise.source = newPromise;\n\n        array_reduce(messages, function (undefined, message) {\n            Q.nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            Q.nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become settled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be settled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function(resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function(answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\nQ.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n};\n\n/**\n * Works almost like \"finally\", but not called for rejections.\n * Original resolution value is passed through callback unaffected.\n * Callback may return a promise that will be awaited for.\n * @param {Function} callback\n * @returns {Q.Promise}\n * @example\n * doSomething()\n *   .then(...)\n *   .tap(console.log)\n *   .then(...);\n */\nPromise.prototype.tap = function (callback) {\n    callback = Q(callback);\n\n    return this.then(function (value) {\n        return callback.fcall(value).thenResolve(value);\n    });\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return object instanceof Promise;\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return Q(result.value);\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return Q(exception.value);\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var countDown = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++countDown;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--countDown === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (countDown === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        Q.nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {Any*} custom error message or Error object (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n};\n\nPromise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        if (!error || \"string\" === typeof error) {\n            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n            error.code = \"ETIMEDOUT\";\n        }\n        deferred.reject(error);\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            Q.nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            Q.nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/q/q.js\n ** module id = 19\n ** module chunks = 0\n **/","// Copyright (c) 2010 David Durman\n//\n// The contents of this file are subject to the MIT License (the \"License\");\n// you may not use this file except in compliance with the License. You may obtain a copy of the License at\n// http://opensource.org/licenses/MIT.\n//\n// This hierarchical state machine implementation has been inspired\n// by the QP active object framework, see http://www.state-machine.com/\n\n\n(function(root, factory){\n    \"use strict\";\n\n    if (typeof exports === 'object') {\n\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like enviroments that support module.exports,\n        // like Node.\n        module.exports = factory();\n\n    } else if (typeof define === 'function' && define.amd) {\n\n        // AMD. Register as an anonymous module.\n        define(factory);\n\n    } else {\n\n        // Browser globals (root is window)\n        root.Statechart = factory();\n    }\n\n}(this, function(){\n\n    \"use strict\";\n\n    var assert = function(assertion){\n        if (!assertion) {\n            throw new Error(\"Assertion failed.\");\n        }\n    };\n\n\n    // Statechart.\n    // -----------\n\n    // `myState` - the current state\n    // `mySource` - the source of the current transition\n\n    var Statechart = {\n\n        run: function(opt){\n            opt = opt || {};\n            this.debug = opt.debug ? opt.debug : function(){};\n            this.construct(this.initialState);\n            this.init(null);\n        },\n\n        construct: function(initialState){\n            this.myState = this.top();\n            this.mySource = this.state(\"Initial\");\n\n            // Initial pseudo-state\n            this.states.Initial = {\n                empty: function(){\n                    this.newInitialState(initialState);\n                }\n            };\n            var handled = function(){ return null; };\n\n            // TOP state\n            this.states.TOP = {\n                entry: handled,\n                exit:  handled,\n                init:  handled,\n                empty: handled\n            };\n            this.flatten();\n        },\n\n        // Trigger the initial transition and recursively enter the submachine of the top state.\n        // Must be called only once for a given Statechart before dispatching any events to it.\n        init: function(anEventOrNull){\n            assert(this.myState === this.top() && this.mySource !== null);\n            var s = this.myState;    // save top in temp\n            this.mySource.trigger(anEventOrNull);    // topmost initial transition\n            assert(s.equals(this.myState.superstate()));    // verify that we only went one level deep\n            s = this.myState;\n            s.enter();\n            while (s.init() === null) {    // while init is handled (i.e. till we reach a leaf node)\n                assert(s.equals(this.myState.superstate()));    // verify that we only went one level deep\n                s = this.myState;\n                s.enter();\n            }\n        },\n\n        state: function(stateOrName){\n            return (stateOrName && stateOrName instanceof QState) ? stateOrName : new QState(this, stateOrName);\n        },\n\n        top: function(stateOrName){\n            // create the top state only once and store it to an auxiliary property\n            return (this._topState || (this._topState = new QState(this, \"TOP\")));\n        },\n\n        currentState: function(){\n            return this.myState;\n        },\n\n        flatten: function(){\n            this.statesTable = this.statesTable || {};\n            this._flatten(this.states, this.top().name);\n        },\n\n        _flatten: function(states, parent){\n            if (!states) {\n                return;\n            }\n\n            for (var state in states) {\n                if (states.hasOwnProperty(state)) {\n                    this.statesTable[state] = states[state];\n                    this.statesTable[state].parent = parent;\n                    this._flatten(states[state].states, state);\n                }\n            }\n        },\n\n        selectState: function(stateName){\n            return this.statesTable[stateName];\n        },\n\n        dispatchEvent: function(anEvent, state, act){\n            act = act || state[anEvent.type];\n\n            // Action might also be an array in which case it is assumed that evaluating guards decides\n            // which target to enter.\n            if (act instanceof Array) {\n                for (var i = 0; i < act.length; i++) {\n                    this.dispatchEvent(anEvent, state, act[i]);\n                }\n            }\n\n            // @todo This is terrible edge case used just for more fancy Statechart representation\n            // It allows using \"MyState\": { init: \"MySubState\", ... } intead of\n            // \"MyState\": { init: function(){ this.newInitialState(\"MySubState\"); }, ... }\n            // In some cases the latter form can be useful for better control of the Statechart\n            if (anEvent.type === \"init\" && typeof act === \"string\") {\n                this.newInitialState(act);\n                return null; // handled\n            }\n\n            if (act instanceof Function){\n                act.call(this, anEvent.args);\n                return null;  // handled\n            } else if (act) {\n                // no guard at all or the guard condition is met\n                if (!act.guard || (act.guard && act.guard.call(this, anEvent.args))){\n                    if (act.action) {\n                        act.action.call(this, anEvent.args);\n                    }\n                    if (act.target) {\n                        this.newState(act.target);\n                    }\n                    return null;  // handled\n                }\n            } else {        // act is undefined (no handler in state for anEvent)\n                if (state === this.selectState(\"TOP\")) {\n                    this.handleUnhandledEvent(anEvent); // not-handled\n                    return null;    // handled (TOP state handles all events)\n                }\n            }\n            return this.state(state.parent); // not-handled\n        },\n\n        // Override this when needed.\n        handleUnhandledEvent: function(anEvent){\n            this.debug(\"Unhandled event: \" + anEvent.type);\n            return null;\n        },\n\n        // Traverse the state hierarchy starting from the currently active state myState.\n        // Advance up the state hierarchy (i.e., from substates to superstates), invoking all\n        // the state handlers in succession. At each level of state nesting, it intercepts the value\n        // returned from a state handler to obtain the superstate needed to advance to the next level.\n        dispatch: function(anEvent, args){\n            if (!anEvent || !(anEvent instanceof QEvent)) {\n                anEvent = new QEvent(anEvent, args);\n            }\n            this.mySource = this.myState;\n            while (this.mySource) {\n                this.mySource = this.mySource.trigger(anEvent);\n            }\n        },\n\n        // Performs dynamic transition. (macro Q_TRAN_DYN())\n        newState: function(aStateName){\n            this.transition(this.state(aStateName));\n        },\n\n        // Used by handlers only in response to the #init event. (macro Q_INIT())\n        // USAGE: return this.newInitialState(\"whatever\");\n        // @return null for convenience\n\n        newInitialState: function(aStateOrName){\n            this.myState = this.state(aStateOrName);\n            return null;\n        },\n\n        // Dynamic transition. (Q_TRAN_DYN())\n        transition: function(target){\n            assert(!target.equals(this.top()));\n\n            var entry = [];\n            var mySource = this.mySource;\n            var s = this.myState;\n\n            // exit all the nested states between myState and mySource\n            assert(s !== null);\n            assert(mySource !== null);\n            while (!s.equals(mySource)) {\n                s = s.exit() || s.superstate();\n            }\n\n            // check all seven possible source/target state combinations\n\n\t    entry.push(target);\n\n            // (a) mySource == target (self transition)\n            if (mySource.equals(target)) {\n                mySource.exit();\n                return this.enterVia(target, entry);\n            }\n\n            // (b) mySource == target.superstate (one level deep)\n            var p = target.superstate();\n            if (mySource.equals(p)) {\n                return this.enterVia(target, entry);\n            }\n\n            assert(mySource !== null);\n\n            // (c) mySource.superstate == target.superstate (most common - fsa)\n            var q = mySource.superstate();\n            if (q.equals(p)) {\n                mySource.exit();\n                return this.enterVia(target, entry);\n            }\n\n            // (d) mySource.superstate == target (one level up)\n            if (q.equals(target)) {\n                mySource.exit();\n                entry.pop();    // do not enter the LCA\n                return this.enterVia(target, entry);\n            }\n\n            // (e) mySource == target.superstate.superstate... hierarchy (many levels deep)\n\t    entry.push(p);\n            s = p.superstate();\n            while (s !== null) {\n                if (mySource.equals(s)) {\n                    return this.enterVia(target, entry);\n                }\n\n\t\tentry.push(s);\n                s = s.superstate();\n            }\n\n            // otherwise we're definitely exiting mySource\n            mySource.exit();\n\n            // entry array is complete, save its length to avoid computing it repeatedly\n            var entryLength = entry.length;\n\n            // (f) mySource.superstate == target.superstate.superstate... hierarchy\n            var lca;\n            for (lca = entryLength - 1; lca >= 0; lca -= 1) {\n                if (q.equals(entry[lca])) {\n                    return this.enterVia(target, entry.slice(0, lca)); // do not enter lca\n                }\n            }\n\n            // (g) each mySource.superstate.superstate... for each target.superstate.superstate...\n            s = q;\n            while (s !== null) {\n                for (lca = entryLength - 1; lca >= 0; lca -= 1) {\n                    if (s.equals(entry[lca])) {\n                        return this.enterVia(target, entry.slice(0, lca)); // do not enter lca\n                    }\n                }\n                s.exit();\n                s = s.superstate();\n            }\n        },\n\n        // tail of transition()\n        // We are in the LCA of mySource and target.\n        enterVia: function(target, entry){\n\n            // retrace the entry path in reverse order\n            var idx = entry.length;\n            while (idx > 0) {\n                idx--;\n                entry[idx].enter();\n            }\n\n            this.myState = target;\n            while (target.init() === null) {\n                // initial transition must go one level deep\n                assert(target.equals(this.myState.superstate()));\n                target = this.myState;\n                target.enter();\n            }\n        }\n    };\n\n    // QState.\n    // -------\n\n    function QState(fsm, name){\n        this.fsm = fsm;\n        this.name = name;\n    }\n\n    QState.prototype = {\n        equals: function(state){\n            return (this.name === state.name && this.fsm === state.fsm);\n        },\n\n        dispatchEvent: function(anEvent, state){\n            return this.fsm.dispatchEvent(anEvent, state);\n        },\n\n        trigger: function(anEvent){\n            var evt = anEvent || QEventEmpty;\n            var state = this.fsm.selectState(this.name);\n            return this.dispatchEvent(evt, state);\n        },\n\n        enter: function(){\n            this.fsm.debug(\"[\" + this.name + \"] enter\");\n            return this.trigger(QEventEntry);\n        },\n\n        exit: function(){\n            this.fsm.debug(\"[\" + this.name + \"] exit\");\n            return this.trigger(QEventExit);\n        },\n\n        init: function(){\n            this.fsm.debug(\"[\" + this.name + \"] init\");\n            return this.trigger(QEventInit);\n        },\n\n        // Answer my superstate. Default is to return fsm top state.\n        superstate: function(){\n            var superstate = this.trigger(QEventEmpty);\n            if (superstate && superstate instanceof QState) {\n                return superstate;\n            }\n            superstate = this.fsm.top();\n            if (this.name === superstate.name) {\n                return null;\n            }\n            return superstate;\n        }\n    };\n\n    // QEvent\n    // ------\n\n    function QEvent(type, args){\n        this.type = type;\n        this.args = args;\n    }\n\n    // these events are static, they do not carry any arguments\n    // -> create them only once\n    // moreover, they don't have to be exposed to the outer world\n    var QEventEntry = new QEvent(\"entry\");\n    var QEventExit = new QEvent(\"exit\");\n    var QEventInit = new QEvent(\"init\");\n    var QEventEmpty = new QEvent(\"empty\");\n\n\n    return Statechart;\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/statechart/lib/statechart.js\n ** module id = 20\n ** module chunks = 0\n **/","/*! Socket.IO.js build:0.9.17, development. Copyright(c) 2011 LearnBoost <dev@learnboost.com> MIT Licensed */\n\nvar io = ('undefined' === typeof module ? {} : module.exports);\n(function() {\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, global) {\n\n  /**\n   * IO namespace.\n   *\n   * @namespace\n   */\n\n  var io = exports;\n\n  /**\n   * Socket.IO version\n   *\n   * @api public\n   */\n\n  io.version = '0.9.17';\n\n  /**\n   * Protocol implemented.\n   *\n   * @api public\n   */\n\n  io.protocol = 1;\n\n  /**\n   * Available transports, these will be populated with the available transports\n   *\n   * @api public\n   */\n\n  io.transports = [];\n\n  /**\n   * Keep track of jsonp callbacks.\n   *\n   * @api private\n   */\n\n  io.j = [];\n\n  /**\n   * Keep track of our io.Sockets\n   *\n   * @api private\n   */\n  io.sockets = {};\n\n\n  /**\n   * Manages connections to hosts.\n   *\n   * @param {String} uri\n   * @Param {Boolean} force creation of new socket (defaults to false)\n   * @api public\n   */\n\n  io.connect = function (host, details) {\n    var uri = io.util.parseUri(host)\n      , uuri\n      , socket;\n\n    if (global && global.location) {\n      uri.protocol = uri.protocol || global.location.protocol.slice(0, -1);\n      uri.host = uri.host || (global.document\n        ? global.document.domain : global.location.hostname);\n      uri.port = uri.port || global.location.port;\n    }\n\n    uuri = io.util.uniqueUri(uri);\n\n    var options = {\n        host: uri.host\n      , secure: 'https' == uri.protocol\n      , port: uri.port || ('https' == uri.protocol ? 443 : 80)\n      , query: uri.query || ''\n    };\n\n    io.util.merge(options, details);\n\n    if (options['force new connection'] || !io.sockets[uuri]) {\n      socket = new io.Socket(options);\n    }\n\n    if (!options['force new connection'] && socket) {\n      io.sockets[uuri] = socket;\n    }\n\n    socket = socket || io.sockets[uuri];\n\n    // if path is different from '' or /\n    return socket.of(uri.path.length > 1 ? uri.path : '');\n  };\n\n})('object' === typeof module ? module.exports : (this.io = {}), this);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, global) {\n\n  /**\n   * Utilities namespace.\n   *\n   * @namespace\n   */\n\n  var util = exports.util = {};\n\n  /**\n   * Parses an URI\n   *\n   * @author Steven Levithan <stevenlevithan.com> (MIT license)\n   * @api public\n   */\n\n  var re = /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\n  var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password',\n               'host', 'port', 'relative', 'path', 'directory', 'file', 'query',\n               'anchor'];\n\n  util.parseUri = function (str) {\n    var m = re.exec(str || '')\n      , uri = {}\n      , i = 14;\n\n    while (i--) {\n      uri[parts[i]] = m[i] || '';\n    }\n\n    return uri;\n  };\n\n  /**\n   * Produces a unique url that identifies a Socket.IO connection.\n   *\n   * @param {Object} uri\n   * @api public\n   */\n\n  util.uniqueUri = function (uri) {\n    var protocol = uri.protocol\n      , host = uri.host\n      , port = uri.port;\n\n    if ('document' in global) {\n      host = host || document.domain;\n      port = port || (protocol == 'https'\n        && document.location.protocol !== 'https:' ? 443 : document.location.port);\n    } else {\n      host = host || 'localhost';\n\n      if (!port && protocol == 'https') {\n        port = 443;\n      }\n    }\n\n    return (protocol || 'http') + '://' + host + ':' + (port || 80);\n  };\n\n  /**\n   * Mergest 2 query strings in to once unique query string\n   *\n   * @param {String} base\n   * @param {String} addition\n   * @api public\n   */\n\n  util.query = function (base, addition) {\n    var query = util.chunkQuery(base || '')\n      , components = [];\n\n    util.merge(query, util.chunkQuery(addition || ''));\n    for (var part in query) {\n      if (query.hasOwnProperty(part)) {\n        components.push(part + '=' + query[part]);\n      }\n    }\n\n    return components.length ? '?' + components.join('&') : '';\n  };\n\n  /**\n   * Transforms a querystring in to an object\n   *\n   * @param {String} qs\n   * @api public\n   */\n\n  util.chunkQuery = function (qs) {\n    var query = {}\n      , params = qs.split('&')\n      , i = 0\n      , l = params.length\n      , kv;\n\n    for (; i < l; ++i) {\n      kv = params[i].split('=');\n      if (kv[0]) {\n        query[kv[0]] = kv[1];\n      }\n    }\n\n    return query;\n  };\n\n  /**\n   * Executes the given function when the page is loaded.\n   *\n   *     io.util.load(function () { console.log('page loaded'); });\n   *\n   * @param {Function} fn\n   * @api public\n   */\n\n  var pageLoaded = false;\n\n  util.load = function (fn) {\n    if ('document' in global && document.readyState === 'complete' || pageLoaded) {\n      return fn();\n    }\n\n    util.on(global, 'load', fn, false);\n  };\n\n  /**\n   * Adds an event.\n   *\n   * @api private\n   */\n\n  util.on = function (element, event, fn, capture) {\n    if (element.attachEvent) {\n      element.attachEvent('on' + event, fn);\n    } else if (element.addEventListener) {\n      element.addEventListener(event, fn, capture);\n    }\n  };\n\n  /**\n   * Generates the correct `XMLHttpRequest` for regular and cross domain requests.\n   *\n   * @param {Boolean} [xdomain] Create a request that can be used cross domain.\n   * @returns {XMLHttpRequest|false} If we can create a XMLHttpRequest.\n   * @api private\n   */\n\n  util.request = function (xdomain) {\n\n    if (xdomain && 'undefined' != typeof XDomainRequest && !util.ua.hasCORS) {\n      return new XDomainRequest();\n    }\n\n    if ('undefined' != typeof XMLHttpRequest && (!xdomain || util.ua.hasCORS)) {\n      return new XMLHttpRequest();\n    }\n\n    if (!xdomain) {\n      try {\n        return new window[(['Active'].concat('Object').join('X'))]('Microsoft.XMLHTTP');\n      } catch(e) { }\n    }\n\n    return null;\n  };\n\n  /**\n   * XHR based transport constructor.\n   *\n   * @constructor\n   * @api public\n   */\n\n  /**\n   * Change the internal pageLoaded value.\n   */\n\n  if ('undefined' != typeof window) {\n    util.load(function () {\n      pageLoaded = true;\n    });\n  }\n\n  /**\n   * Defers a function to ensure a spinner is not displayed by the browser\n   *\n   * @param {Function} fn\n   * @api public\n   */\n\n  util.defer = function (fn) {\n    if (!util.ua.webkit || 'undefined' != typeof importScripts) {\n      return fn();\n    }\n\n    util.load(function () {\n      setTimeout(fn, 100);\n    });\n  };\n\n  /**\n   * Merges two objects.\n   *\n   * @api public\n   */\n\n  util.merge = function merge (target, additional, deep, lastseen) {\n    var seen = lastseen || []\n      , depth = typeof deep == 'undefined' ? 2 : deep\n      , prop;\n\n    for (prop in additional) {\n      if (additional.hasOwnProperty(prop) && util.indexOf(seen, prop) < 0) {\n        if (typeof target[prop] !== 'object' || !depth) {\n          target[prop] = additional[prop];\n          seen.push(additional[prop]);\n        } else {\n          util.merge(target[prop], additional[prop], depth - 1, seen);\n        }\n      }\n    }\n\n    return target;\n  };\n\n  /**\n   * Merges prototypes from objects\n   *\n   * @api public\n   */\n\n  util.mixin = function (ctor, ctor2) {\n    util.merge(ctor.prototype, ctor2.prototype);\n  };\n\n  /**\n   * Shortcut for prototypical and static inheritance.\n   *\n   * @api private\n   */\n\n  util.inherit = function (ctor, ctor2) {\n    function f() {};\n    f.prototype = ctor2.prototype;\n    ctor.prototype = new f;\n  };\n\n  /**\n   * Checks if the given object is an Array.\n   *\n   *     io.util.isArray([]); // true\n   *     io.util.isArray({}); // false\n   *\n   * @param Object obj\n   * @api public\n   */\n\n  util.isArray = Array.isArray || function (obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  };\n\n  /**\n   * Intersects values of two arrays into a third\n   *\n   * @api public\n   */\n\n  util.intersect = function (arr, arr2) {\n    var ret = []\n      , longest = arr.length > arr2.length ? arr : arr2\n      , shortest = arr.length > arr2.length ? arr2 : arr;\n\n    for (var i = 0, l = shortest.length; i < l; i++) {\n      if (~util.indexOf(longest, shortest[i]))\n        ret.push(shortest[i]);\n    }\n\n    return ret;\n  };\n\n  /**\n   * Array indexOf compatibility.\n   *\n   * @see bit.ly/a5Dxa2\n   * @api public\n   */\n\n  util.indexOf = function (arr, o, i) {\n\n    for (var j = arr.length, i = i < 0 ? i + j < 0 ? 0 : i + j : i || 0;\n         i < j && arr[i] !== o; i++) {}\n\n    return j <= i ? -1 : i;\n  };\n\n  /**\n   * Converts enumerables to array.\n   *\n   * @api public\n   */\n\n  util.toArray = function (enu) {\n    var arr = [];\n\n    for (var i = 0, l = enu.length; i < l; i++)\n      arr.push(enu[i]);\n\n    return arr;\n  };\n\n  /**\n   * UA / engines detection namespace.\n   *\n   * @namespace\n   */\n\n  util.ua = {};\n\n  /**\n   * Whether the UA supports CORS for XHR.\n   *\n   * @api public\n   */\n\n  util.ua.hasCORS = 'undefined' != typeof XMLHttpRequest && (function () {\n    try {\n      var a = new XMLHttpRequest();\n    } catch (e) {\n      return false;\n    }\n\n    return a.withCredentials != undefined;\n  })();\n\n  /**\n   * Detect webkit.\n   *\n   * @api public\n   */\n\n  util.ua.webkit = 'undefined' != typeof navigator\n    && /webkit/i.test(navigator.userAgent);\n\n   /**\n   * Detect iPad/iPhone/iPod.\n   *\n   * @api public\n   */\n\n  util.ua.iDevice = 'undefined' != typeof navigator\n      && /iPad|iPhone|iPod/i.test(navigator.userAgent);\n\n})('undefined' != typeof io ? io : module.exports, this);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.EventEmitter = EventEmitter;\n\n  /**\n   * Event emitter constructor.\n   *\n   * @api public.\n   */\n\n  function EventEmitter () {};\n\n  /**\n   * Adds a listener\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.on = function (name, fn) {\n    if (!this.$events) {\n      this.$events = {};\n    }\n\n    if (!this.$events[name]) {\n      this.$events[name] = fn;\n    } else if (io.util.isArray(this.$events[name])) {\n      this.$events[name].push(fn);\n    } else {\n      this.$events[name] = [this.$events[name], fn];\n    }\n\n    return this;\n  };\n\n  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n  /**\n   * Adds a volatile listener.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.once = function (name, fn) {\n    var self = this;\n\n    function on () {\n      self.removeListener(name, on);\n      fn.apply(this, arguments);\n    };\n\n    on.listener = fn;\n    this.on(name, on);\n\n    return this;\n  };\n\n  /**\n   * Removes a listener.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.removeListener = function (name, fn) {\n    if (this.$events && this.$events[name]) {\n      var list = this.$events[name];\n\n      if (io.util.isArray(list)) {\n        var pos = -1;\n\n        for (var i = 0, l = list.length; i < l; i++) {\n          if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {\n            pos = i;\n            break;\n          }\n        }\n\n        if (pos < 0) {\n          return this;\n        }\n\n        list.splice(pos, 1);\n\n        if (!list.length) {\n          delete this.$events[name];\n        }\n      } else if (list === fn || (list.listener && list.listener === fn)) {\n        delete this.$events[name];\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Removes all listeners for an event.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.removeAllListeners = function (name) {\n    if (name === undefined) {\n      this.$events = {};\n      return this;\n    }\n\n    if (this.$events && this.$events[name]) {\n      this.$events[name] = null;\n    }\n\n    return this;\n  };\n\n  /**\n   * Gets all listeners for a certain event.\n   *\n   * @api publci\n   */\n\n  EventEmitter.prototype.listeners = function (name) {\n    if (!this.$events) {\n      this.$events = {};\n    }\n\n    if (!this.$events[name]) {\n      this.$events[name] = [];\n    }\n\n    if (!io.util.isArray(this.$events[name])) {\n      this.$events[name] = [this.$events[name]];\n    }\n\n    return this.$events[name];\n  };\n\n  /**\n   * Emits an event.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.emit = function (name) {\n    if (!this.$events) {\n      return false;\n    }\n\n    var handler = this.$events[name];\n\n    if (!handler) {\n      return false;\n    }\n\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    if ('function' == typeof handler) {\n      handler.apply(this, args);\n    } else if (io.util.isArray(handler)) {\n      var listeners = handler.slice();\n\n      for (var i = 0, l = listeners.length; i < l; i++) {\n        listeners[i].apply(this, args);\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Based on JSON2 (http://www.JSON.org/js.html).\n */\n\n(function (exports, nativeJSON) {\n  \"use strict\";\n\n  // use native JSON if it's available\n  if (nativeJSON && nativeJSON.parse){\n    return exports.JSON = {\n      parse: nativeJSON.parse\n    , stringify: nativeJSON.stringify\n    };\n  }\n\n  var JSON = exports.JSON = {};\n\n  function f(n) {\n      // Format integers to have at least two digits.\n      return n < 10 ? '0' + n : n;\n  }\n\n  function date(d, key) {\n    return isFinite(d.valueOf()) ?\n        d.getUTCFullYear()     + '-' +\n        f(d.getUTCMonth() + 1) + '-' +\n        f(d.getUTCDate())      + 'T' +\n        f(d.getUTCHours())     + ':' +\n        f(d.getUTCMinutes())   + ':' +\n        f(d.getUTCSeconds())   + 'Z' : null;\n  };\n\n  var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n      escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n      gap,\n      indent,\n      meta = {    // table of character substitutions\n          '\\b': '\\\\b',\n          '\\t': '\\\\t',\n          '\\n': '\\\\n',\n          '\\f': '\\\\f',\n          '\\r': '\\\\r',\n          '\"' : '\\\\\"',\n          '\\\\': '\\\\\\\\'\n      },\n      rep;\n\n\n  function quote(string) {\n\n// If the string contains no control characters, no quote characters, and no\n// backslash characters, then we can safely slap some quotes around it.\n// Otherwise we must also replace the offending characters with safe escape\n// sequences.\n\n      escapable.lastIndex = 0;\n      return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n          var c = meta[a];\n          return typeof c === 'string' ? c :\n              '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n      }) + '\"' : '\"' + string + '\"';\n  }\n\n\n  function str(key, holder) {\n\n// Produce a string from holder[key].\n\n      var i,          // The loop counter.\n          k,          // The member key.\n          v,          // The member value.\n          length,\n          mind = gap,\n          partial,\n          value = holder[key];\n\n// If the value has a toJSON method, call it to obtain a replacement value.\n\n      if (value instanceof Date) {\n          value = date(key);\n      }\n\n// If we were called with a replacer function, then call the replacer to\n// obtain a replacement value.\n\n      if (typeof rep === 'function') {\n          value = rep.call(holder, key, value);\n      }\n\n// What happens next depends on the value's type.\n\n      switch (typeof value) {\n      case 'string':\n          return quote(value);\n\n      case 'number':\n\n// JSON numbers must be finite. Encode non-finite numbers as null.\n\n          return isFinite(value) ? String(value) : 'null';\n\n      case 'boolean':\n      case 'null':\n\n// If the value is a boolean or null, convert it to a string. Note:\n// typeof null does not produce 'null'. The case is included here in\n// the remote chance that this gets fixed someday.\n\n          return String(value);\n\n// If the type is 'object', we might be dealing with an object or an array or\n// null.\n\n      case 'object':\n\n// Due to a specification blunder in ECMAScript, typeof null is 'object',\n// so watch out for that case.\n\n          if (!value) {\n              return 'null';\n          }\n\n// Make an array to hold the partial results of stringifying this object value.\n\n          gap += indent;\n          partial = [];\n\n// Is the value an array?\n\n          if (Object.prototype.toString.apply(value) === '[object Array]') {\n\n// The value is an array. Stringify every element. Use null as a placeholder\n// for non-JSON values.\n\n              length = value.length;\n              for (i = 0; i < length; i += 1) {\n                  partial[i] = str(i, value) || 'null';\n              }\n\n// Join all of the elements together, separated with commas, and wrap them in\n// brackets.\n\n              v = partial.length === 0 ? '[]' : gap ?\n                  '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n                  '[' + partial.join(',') + ']';\n              gap = mind;\n              return v;\n          }\n\n// If the replacer is an array, use it to select the members to be stringified.\n\n          if (rep && typeof rep === 'object') {\n              length = rep.length;\n              for (i = 0; i < length; i += 1) {\n                  if (typeof rep[i] === 'string') {\n                      k = rep[i];\n                      v = str(k, value);\n                      if (v) {\n                          partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                      }\n                  }\n              }\n          } else {\n\n// Otherwise, iterate through all of the keys in the object.\n\n              for (k in value) {\n                  if (Object.prototype.hasOwnProperty.call(value, k)) {\n                      v = str(k, value);\n                      if (v) {\n                          partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                      }\n                  }\n              }\n          }\n\n// Join all of the member texts together, separated with commas,\n// and wrap them in braces.\n\n          v = partial.length === 0 ? '{}' : gap ?\n              '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n              '{' + partial.join(',') + '}';\n          gap = mind;\n          return v;\n      }\n  }\n\n// If the JSON object does not yet have a stringify method, give it one.\n\n  JSON.stringify = function (value, replacer, space) {\n\n// The stringify method takes a value and an optional replacer, and an optional\n// space parameter, and returns a JSON text. The replacer can be a function\n// that can replace values, or an array of strings that will select the keys.\n// A default replacer method can be provided. Use of the space parameter can\n// produce text that is more easily readable.\n\n      var i;\n      gap = '';\n      indent = '';\n\n// If the space parameter is a number, make an indent string containing that\n// many spaces.\n\n      if (typeof space === 'number') {\n          for (i = 0; i < space; i += 1) {\n              indent += ' ';\n          }\n\n// If the space parameter is a string, it will be used as the indent string.\n\n      } else if (typeof space === 'string') {\n          indent = space;\n      }\n\n// If there is a replacer, it must be a function or an array.\n// Otherwise, throw an error.\n\n      rep = replacer;\n      if (replacer && typeof replacer !== 'function' &&\n              (typeof replacer !== 'object' ||\n              typeof replacer.length !== 'number')) {\n          throw new Error('JSON.stringify');\n      }\n\n// Make a fake root object containing our value under the key of ''.\n// Return the result of stringifying the value.\n\n      return str('', {'': value});\n  };\n\n// If the JSON object does not yet have a parse method, give it one.\n\n  JSON.parse = function (text, reviver) {\n  // The parse method takes a text and an optional reviver function, and returns\n  // a JavaScript value if the text is a valid JSON text.\n\n      var j;\n\n      function walk(holder, key) {\n\n  // The walk method is used to recursively walk the resulting structure so\n  // that modifications can be made.\n\n          var k, v, value = holder[key];\n          if (value && typeof value === 'object') {\n              for (k in value) {\n                  if (Object.prototype.hasOwnProperty.call(value, k)) {\n                      v = walk(value, k);\n                      if (v !== undefined) {\n                          value[k] = v;\n                      } else {\n                          delete value[k];\n                      }\n                  }\n              }\n          }\n          return reviver.call(holder, key, value);\n      }\n\n\n  // Parsing happens in four stages. In the first stage, we replace certain\n  // Unicode characters with escape sequences. JavaScript handles many characters\n  // incorrectly, either silently deleting them, or treating them as line endings.\n\n      text = String(text);\n      cx.lastIndex = 0;\n      if (cx.test(text)) {\n          text = text.replace(cx, function (a) {\n              return '\\\\u' +\n                  ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n          });\n      }\n\n  // In the second stage, we run the text against regular expressions that look\n  // for non-JSON patterns. We are especially concerned with '()' and 'new'\n  // because they can cause invocation, and '=' because it can cause mutation.\n  // But just to be safe, we want to reject all unexpected forms.\n\n  // We split the second stage into 4 regexp operations in order to work around\n  // crippling inefficiencies in IE's and Safari's regexp engines. First we\n  // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we\n  // replace all simple value tokens with ']' characters. Third, we delete all\n  // open brackets that follow a colon or comma or that begin the text. Finally,\n  // we look to see that the remaining characters are only whitespace or ']' or\n  // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.\n\n      if (/^[\\],:{}\\s]*$/\n              .test(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')\n                  .replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']')\n                  .replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))) {\n\n  // In the third stage we use the eval function to compile the text into a\n  // JavaScript structure. The '{' operator is subject to a syntactic ambiguity\n  // in JavaScript: it can begin a block or an object literal. We wrap the text\n  // in parens to eliminate the ambiguity.\n\n          j = eval('(' + text + ')');\n\n  // In the optional fourth stage, we recursively walk the new structure, passing\n  // each name/value pair to a reviver function for possible transformation.\n\n          return typeof reviver === 'function' ?\n              walk({'': j}, '') : j;\n      }\n\n  // If the text is not JSON parseable, then a SyntaxError is thrown.\n\n      throw new SyntaxError('JSON.parse');\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , typeof JSON !== 'undefined' ? JSON : undefined\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Parser namespace.\n   *\n   * @namespace\n   */\n\n  var parser = exports.parser = {};\n\n  /**\n   * Packet types.\n   */\n\n  var packets = parser.packets = [\n      'disconnect'\n    , 'connect'\n    , 'heartbeat'\n    , 'message'\n    , 'json'\n    , 'event'\n    , 'ack'\n    , 'error'\n    , 'noop'\n  ];\n\n  /**\n   * Errors reasons.\n   */\n\n  var reasons = parser.reasons = [\n      'transport not supported'\n    , 'client not handshaken'\n    , 'unauthorized'\n  ];\n\n  /**\n   * Errors advice.\n   */\n\n  var advice = parser.advice = [\n      'reconnect'\n  ];\n\n  /**\n   * Shortcuts.\n   */\n\n  var JSON = io.JSON\n    , indexOf = io.util.indexOf;\n\n  /**\n   * Encodes a packet.\n   *\n   * @api private\n   */\n\n  parser.encodePacket = function (packet) {\n    var type = indexOf(packets, packet.type)\n      , id = packet.id || ''\n      , endpoint = packet.endpoint || ''\n      , ack = packet.ack\n      , data = null;\n\n    switch (packet.type) {\n      case 'error':\n        var reason = packet.reason ? indexOf(reasons, packet.reason) : ''\n          , adv = packet.advice ? indexOf(advice, packet.advice) : '';\n\n        if (reason !== '' || adv !== '')\n          data = reason + (adv !== '' ? ('+' + adv) : '');\n\n        break;\n\n      case 'message':\n        if (packet.data !== '')\n          data = packet.data;\n        break;\n\n      case 'event':\n        var ev = { name: packet.name };\n\n        if (packet.args && packet.args.length) {\n          ev.args = packet.args;\n        }\n\n        data = JSON.stringify(ev);\n        break;\n\n      case 'json':\n        data = JSON.stringify(packet.data);\n        break;\n\n      case 'connect':\n        if (packet.qs)\n          data = packet.qs;\n        break;\n\n      case 'ack':\n        data = packet.ackId\n          + (packet.args && packet.args.length\n              ? '+' + JSON.stringify(packet.args) : '');\n        break;\n    }\n\n    // construct packet with required fragments\n    var encoded = [\n        type\n      , id + (ack == 'data' ? '+' : '')\n      , endpoint\n    ];\n\n    // data fragment is optional\n    if (data !== null && data !== undefined)\n      encoded.push(data);\n\n    return encoded.join(':');\n  };\n\n  /**\n   * Encodes multiple messages (payload).\n   *\n   * @param {Array} messages\n   * @api private\n   */\n\n  parser.encodePayload = function (packets) {\n    var decoded = '';\n\n    if (packets.length == 1)\n      return packets[0];\n\n    for (var i = 0, l = packets.length; i < l; i++) {\n      var packet = packets[i];\n      decoded += '\\ufffd' + packet.length + '\\ufffd' + packets[i];\n    }\n\n    return decoded;\n  };\n\n  /**\n   * Decodes a packet\n   *\n   * @api private\n   */\n\n  var regexp = /([^:]+):([0-9]+)?(\\+)?:([^:]+)?:?([\\s\\S]*)?/;\n\n  parser.decodePacket = function (data) {\n    var pieces = data.match(regexp);\n\n    if (!pieces) return {};\n\n    var id = pieces[2] || ''\n      , data = pieces[5] || ''\n      , packet = {\n            type: packets[pieces[1]]\n          , endpoint: pieces[4] || ''\n        };\n\n    // whether we need to acknowledge the packet\n    if (id) {\n      packet.id = id;\n      if (pieces[3])\n        packet.ack = 'data';\n      else\n        packet.ack = true;\n    }\n\n    // handle different packet types\n    switch (packet.type) {\n      case 'error':\n        var pieces = data.split('+');\n        packet.reason = reasons[pieces[0]] || '';\n        packet.advice = advice[pieces[1]] || '';\n        break;\n\n      case 'message':\n        packet.data = data || '';\n        break;\n\n      case 'event':\n        try {\n          var opts = JSON.parse(data);\n          packet.name = opts.name;\n          packet.args = opts.args;\n        } catch (e) { }\n\n        packet.args = packet.args || [];\n        break;\n\n      case 'json':\n        try {\n          packet.data = JSON.parse(data);\n        } catch (e) { }\n        break;\n\n      case 'connect':\n        packet.qs = data || '';\n        break;\n\n      case 'ack':\n        var pieces = data.match(/^([0-9]+)(\\+)?(.*)/);\n        if (pieces) {\n          packet.ackId = pieces[1];\n          packet.args = [];\n\n          if (pieces[3]) {\n            try {\n              packet.args = pieces[3] ? JSON.parse(pieces[3]) : [];\n            } catch (e) { }\n          }\n        }\n        break;\n\n      case 'disconnect':\n      case 'heartbeat':\n        break;\n    };\n\n    return packet;\n  };\n\n  /**\n   * Decodes data payload. Detects multiple messages\n   *\n   * @return {Array} messages\n   * @api public\n   */\n\n  parser.decodePayload = function (data) {\n    // IE doesn't like data[i] for unicode chars, charAt works fine\n    if (data.charAt(0) == '\\ufffd') {\n      var ret = [];\n\n      for (var i = 1, length = ''; i < data.length; i++) {\n        if (data.charAt(i) == '\\ufffd') {\n          ret.push(parser.decodePacket(data.substr(i + 1).substr(0, length)));\n          i += Number(length) + 1;\n          length = '';\n        } else {\n          length += data.charAt(i);\n        }\n      }\n\n      return ret;\n    } else {\n      return [parser.decodePacket(data)];\n    }\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.Transport = Transport;\n\n  /**\n   * This is the transport template for all supported transport methods.\n   *\n   * @constructor\n   * @api public\n   */\n\n  function Transport (socket, sessid) {\n    this.socket = socket;\n    this.sessid = sessid;\n  };\n\n  /**\n   * Apply EventEmitter mixin.\n   */\n\n  io.util.mixin(Transport, io.EventEmitter);\n\n\n  /**\n   * Indicates whether heartbeats is enabled for this transport\n   *\n   * @api private\n   */\n\n  Transport.prototype.heartbeats = function () {\n    return true;\n  };\n\n  /**\n   * Handles the response from the server. When a new response is received\n   * it will automatically update the timeout, decode the message and\n   * forwards the response to the onMessage function for further processing.\n   *\n   * @param {String} data Response from the server.\n   * @api private\n   */\n\n  Transport.prototype.onData = function (data) {\n    this.clearCloseTimeout();\n\n    // If the connection in currently open (or in a reopening state) reset the close\n    // timeout since we have just received data. This check is necessary so\n    // that we don't reset the timeout on an explicitly disconnected connection.\n    if (this.socket.connected || this.socket.connecting || this.socket.reconnecting) {\n      this.setCloseTimeout();\n    }\n\n    if (data !== '') {\n      // todo: we should only do decodePayload for xhr transports\n      var msgs = io.parser.decodePayload(data);\n\n      if (msgs && msgs.length) {\n        for (var i = 0, l = msgs.length; i < l; i++) {\n          this.onPacket(msgs[i]);\n        }\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Handles packets.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onPacket = function (packet) {\n    this.socket.setHeartbeatTimeout();\n\n    if (packet.type == 'heartbeat') {\n      return this.onHeartbeat();\n    }\n\n    if (packet.type == 'connect' && packet.endpoint == '') {\n      this.onConnect();\n    }\n\n    if (packet.type == 'error' && packet.advice == 'reconnect') {\n      this.isOpen = false;\n    }\n\n    this.socket.onPacket(packet);\n\n    return this;\n  };\n\n  /**\n   * Sets close timeout\n   *\n   * @api private\n   */\n\n  Transport.prototype.setCloseTimeout = function () {\n    if (!this.closeTimeout) {\n      var self = this;\n\n      this.closeTimeout = setTimeout(function () {\n        self.onDisconnect();\n      }, this.socket.closeTimeout);\n    }\n  };\n\n  /**\n   * Called when transport disconnects.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onDisconnect = function () {\n    if (this.isOpen) this.close();\n    this.clearTimeouts();\n    this.socket.onDisconnect();\n    return this;\n  };\n\n  /**\n   * Called when transport connects\n   *\n   * @api private\n   */\n\n  Transport.prototype.onConnect = function () {\n    this.socket.onConnect();\n    return this;\n  };\n\n  /**\n   * Clears close timeout\n   *\n   * @api private\n   */\n\n  Transport.prototype.clearCloseTimeout = function () {\n    if (this.closeTimeout) {\n      clearTimeout(this.closeTimeout);\n      this.closeTimeout = null;\n    }\n  };\n\n  /**\n   * Clear timeouts\n   *\n   * @api private\n   */\n\n  Transport.prototype.clearTimeouts = function () {\n    this.clearCloseTimeout();\n\n    if (this.reopenTimeout) {\n      clearTimeout(this.reopenTimeout);\n    }\n  };\n\n  /**\n   * Sends a packet\n   *\n   * @param {Object} packet object.\n   * @api private\n   */\n\n  Transport.prototype.packet = function (packet) {\n    this.send(io.parser.encodePacket(packet));\n  };\n\n  /**\n   * Send the received heartbeat message back to server. So the server\n   * knows we are still connected.\n   *\n   * @param {String} heartbeat Heartbeat response from the server.\n   * @api private\n   */\n\n  Transport.prototype.onHeartbeat = function (heartbeat) {\n    this.packet({ type: 'heartbeat' });\n  };\n\n  /**\n   * Called when the transport opens.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onOpen = function () {\n    this.isOpen = true;\n    this.clearCloseTimeout();\n    this.socket.onOpen();\n  };\n\n  /**\n   * Notifies the base when the connection with the Socket.IO server\n   * has been disconnected.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onClose = function () {\n    var self = this;\n\n    /* FIXME: reopen delay causing a infinit loop\n    this.reopenTimeout = setTimeout(function () {\n      self.open();\n    }, this.socket.options['reopen delay']);*/\n\n    this.isOpen = false;\n    this.socket.onClose();\n    this.onDisconnect();\n  };\n\n  /**\n   * Generates a connection url based on the Socket.IO URL Protocol.\n   * See <https://github.com/learnboost/socket.io-node/> for more details.\n   *\n   * @returns {String} Connection url\n   * @api private\n   */\n\n  Transport.prototype.prepareUrl = function () {\n    var options = this.socket.options;\n\n    return this.scheme() + '://'\n      + options.host + ':' + options.port + '/'\n      + options.resource + '/' + io.protocol\n      + '/' + this.name + '/' + this.sessid;\n  };\n\n  /**\n   * Checks if the transport is ready to start a connection.\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  Transport.prototype.ready = function (socket, fn) {\n    fn.call(this);\n  };\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.Socket = Socket;\n\n  /**\n   * Create a new `Socket.IO client` which can establish a persistent\n   * connection with a Socket.IO enabled server.\n   *\n   * @api public\n   */\n\n  function Socket (options) {\n    this.options = {\n        port: 80\n      , secure: false\n      , document: 'document' in global ? document : false\n      , resource: 'socket.io'\n      , transports: io.transports\n      , 'connect timeout': 10000\n      , 'try multiple transports': true\n      , 'reconnect': true\n      , 'reconnection delay': 500\n      , 'reconnection limit': Infinity\n      , 'reopen delay': 3000\n      , 'max reconnection attempts': 10\n      , 'sync disconnect on unload': false\n      , 'auto connect': true\n      , 'flash policy port': 10843\n      , 'manualFlush': false\n    };\n\n    io.util.merge(this.options, options);\n\n    this.connected = false;\n    this.open = false;\n    this.connecting = false;\n    this.reconnecting = false;\n    this.namespaces = {};\n    this.buffer = [];\n    this.doBuffer = false;\n\n    if (this.options['sync disconnect on unload'] &&\n        (!this.isXDomain() || io.util.ua.hasCORS)) {\n      var self = this;\n      io.util.on(global, 'beforeunload', function () {\n        self.disconnectSync();\n      }, false);\n    }\n\n    if (this.options['auto connect']) {\n      this.connect();\n    }\n};\n\n  /**\n   * Apply EventEmitter mixin.\n   */\n\n  io.util.mixin(Socket, io.EventEmitter);\n\n  /**\n   * Returns a namespace listener/emitter for this socket\n   *\n   * @api public\n   */\n\n  Socket.prototype.of = function (name) {\n    if (!this.namespaces[name]) {\n      this.namespaces[name] = new io.SocketNamespace(this, name);\n\n      if (name !== '') {\n        this.namespaces[name].packet({ type: 'connect' });\n      }\n    }\n\n    return this.namespaces[name];\n  };\n\n  /**\n   * Emits the given event to the Socket and all namespaces\n   *\n   * @api private\n   */\n\n  Socket.prototype.publish = function () {\n    this.emit.apply(this, arguments);\n\n    var nsp;\n\n    for (var i in this.namespaces) {\n      if (this.namespaces.hasOwnProperty(i)) {\n        nsp = this.of(i);\n        nsp.$emit.apply(nsp, arguments);\n      }\n    }\n  };\n\n  /**\n   * Performs the handshake\n   *\n   * @api private\n   */\n\n  function empty () { };\n\n  Socket.prototype.handshake = function (fn) {\n    var self = this\n      , options = this.options;\n\n    function complete (data) {\n      if (data instanceof Error) {\n        self.connecting = false;\n        self.onError(data.message);\n      } else {\n        fn.apply(null, data.split(':'));\n      }\n    };\n\n    var url = [\n          'http' + (options.secure ? 's' : '') + ':/'\n        , options.host + ':' + options.port\n        , options.resource\n        , io.protocol\n        , io.util.query(this.options.query, 't=' + +new Date)\n      ].join('/');\n\n    if (this.isXDomain() && !io.util.ua.hasCORS) {\n      var insertAt = document.getElementsByTagName('script')[0]\n        , script = document.createElement('script');\n\n      script.src = url + '&jsonp=' + io.j.length;\n      insertAt.parentNode.insertBefore(script, insertAt);\n\n      io.j.push(function (data) {\n        complete(data);\n        script.parentNode.removeChild(script);\n      });\n    } else {\n      var xhr = io.util.request();\n\n      xhr.open('GET', url, true);\n      if (this.isXDomain()) {\n        xhr.withCredentials = true;\n      }\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState == 4) {\n          xhr.onreadystatechange = empty;\n\n          if (xhr.status == 200) {\n            complete(xhr.responseText);\n          } else if (xhr.status == 403) {\n            self.onError(xhr.responseText);\n          } else {\n            self.connecting = false;            \n            !self.reconnecting && self.onError(xhr.responseText);\n          }\n        }\n      };\n      xhr.send(null);\n    }\n  };\n\n  /**\n   * Find an available transport based on the options supplied in the constructor.\n   *\n   * @api private\n   */\n\n  Socket.prototype.getTransport = function (override) {\n    var transports = override || this.transports, match;\n\n    for (var i = 0, transport; transport = transports[i]; i++) {\n      if (io.Transport[transport]\n        && io.Transport[transport].check(this)\n        && (!this.isXDomain() || io.Transport[transport].xdomainCheck(this))) {\n        return new io.Transport[transport](this, this.sessionid);\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * Connects to the server.\n   *\n   * @param {Function} [fn] Callback.\n   * @returns {io.Socket}\n   * @api public\n   */\n\n  Socket.prototype.connect = function (fn) {\n    if (this.connecting) {\n      return this;\n    }\n\n    var self = this;\n    self.connecting = true;\n    \n    this.handshake(function (sid, heartbeat, close, transports) {\n      self.sessionid = sid;\n      self.closeTimeout = close * 1000;\n      self.heartbeatTimeout = heartbeat * 1000;\n      if(!self.transports)\n          self.transports = self.origTransports = (transports ? io.util.intersect(\n              transports.split(',')\n            , self.options.transports\n          ) : self.options.transports);\n\n      self.setHeartbeatTimeout();\n\n      function connect (transports){\n        if (self.transport) self.transport.clearTimeouts();\n\n        self.transport = self.getTransport(transports);\n        if (!self.transport) return self.publish('connect_failed');\n\n        // once the transport is ready\n        self.transport.ready(self, function () {\n          self.connecting = true;\n          self.publish('connecting', self.transport.name);\n          self.transport.open();\n\n          if (self.options['connect timeout']) {\n            self.connectTimeoutTimer = setTimeout(function () {\n              if (!self.connected) {\n                self.connecting = false;\n\n                if (self.options['try multiple transports']) {\n                  var remaining = self.transports;\n\n                  while (remaining.length > 0 && remaining.splice(0,1)[0] !=\n                         self.transport.name) {}\n\n                    if (remaining.length){\n                      connect(remaining);\n                    } else {\n                      self.publish('connect_failed');\n                    }\n                }\n              }\n            }, self.options['connect timeout']);\n          }\n        });\n      }\n\n      connect(self.transports);\n\n      self.once('connect', function (){\n        clearTimeout(self.connectTimeoutTimer);\n\n        fn && typeof fn == 'function' && fn();\n      });\n    });\n\n    return this;\n  };\n\n  /**\n   * Clears and sets a new heartbeat timeout using the value given by the\n   * server during the handshake.\n   *\n   * @api private\n   */\n\n  Socket.prototype.setHeartbeatTimeout = function () {\n    clearTimeout(this.heartbeatTimeoutTimer);\n    if(this.transport && !this.transport.heartbeats()) return;\n\n    var self = this;\n    this.heartbeatTimeoutTimer = setTimeout(function () {\n      self.transport.onClose();\n    }, this.heartbeatTimeout);\n  };\n\n  /**\n   * Sends a message.\n   *\n   * @param {Object} data packet.\n   * @returns {io.Socket}\n   * @api public\n   */\n\n  Socket.prototype.packet = function (data) {\n    if (this.connected && !this.doBuffer) {\n      this.transport.packet(data);\n    } else {\n      this.buffer.push(data);\n    }\n\n    return this;\n  };\n\n  /**\n   * Sets buffer state\n   *\n   * @api private\n   */\n\n  Socket.prototype.setBuffer = function (v) {\n    this.doBuffer = v;\n\n    if (!v && this.connected && this.buffer.length) {\n      if (!this.options['manualFlush']) {\n        this.flushBuffer();\n      }\n    }\n  };\n\n  /**\n   * Flushes the buffer data over the wire.\n   * To be invoked manually when 'manualFlush' is set to true.\n   *\n   * @api public\n   */\n\n  Socket.prototype.flushBuffer = function() {\n    this.transport.payload(this.buffer);\n    this.buffer = [];\n  };\n  \n\n  /**\n   * Disconnect the established connect.\n   *\n   * @returns {io.Socket}\n   * @api public\n   */\n\n  Socket.prototype.disconnect = function () {\n    if (this.connected || this.connecting) {\n      if (this.open) {\n        this.of('').packet({ type: 'disconnect' });\n      }\n\n      // handle disconnection immediately\n      this.onDisconnect('booted');\n    }\n\n    return this;\n  };\n\n  /**\n   * Disconnects the socket with a sync XHR.\n   *\n   * @api private\n   */\n\n  Socket.prototype.disconnectSync = function () {\n    // ensure disconnection\n    var xhr = io.util.request();\n    var uri = [\n        'http' + (this.options.secure ? 's' : '') + ':/'\n      , this.options.host + ':' + this.options.port\n      , this.options.resource\n      , io.protocol\n      , ''\n      , this.sessionid\n    ].join('/') + '/?disconnect=1';\n\n    xhr.open('GET', uri, false);\n    xhr.send(null);\n\n    // handle disconnection immediately\n    this.onDisconnect('booted');\n  };\n\n  /**\n   * Check if we need to use cross domain enabled transports. Cross domain would\n   * be a different port or different domain name.\n   *\n   * @returns {Boolean}\n   * @api private\n   */\n\n  Socket.prototype.isXDomain = function () {\n\n    var port = global.location.port ||\n      ('https:' == global.location.protocol ? 443 : 80);\n\n    return this.options.host !== global.location.hostname \n      || this.options.port != port;\n  };\n\n  /**\n   * Called upon handshake.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onConnect = function () {\n    if (!this.connected) {\n      this.connected = true;\n      this.connecting = false;\n      if (!this.doBuffer) {\n        // make sure to flush the buffer\n        this.setBuffer(false);\n      }\n      this.emit('connect');\n    }\n  };\n\n  /**\n   * Called when the transport opens\n   *\n   * @api private\n   */\n\n  Socket.prototype.onOpen = function () {\n    this.open = true;\n  };\n\n  /**\n   * Called when the transport closes.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onClose = function () {\n    this.open = false;\n    clearTimeout(this.heartbeatTimeoutTimer);\n  };\n\n  /**\n   * Called when the transport first opens a connection\n   *\n   * @param text\n   */\n\n  Socket.prototype.onPacket = function (packet) {\n    this.of(packet.endpoint).onPacket(packet);\n  };\n\n  /**\n   * Handles an error.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onError = function (err) {\n    if (err && err.advice) {\n      if (err.advice === 'reconnect' && (this.connected || this.connecting)) {\n        this.disconnect();\n        if (this.options.reconnect) {\n          this.reconnect();\n        }\n      }\n    }\n\n    this.publish('error', err && err.reason ? err.reason : err);\n  };\n\n  /**\n   * Called when the transport disconnects.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onDisconnect = function (reason) {\n    var wasConnected = this.connected\n      , wasConnecting = this.connecting;\n\n    this.connected = false;\n    this.connecting = false;\n    this.open = false;\n\n    if (wasConnected || wasConnecting) {\n      this.transport.close();\n      this.transport.clearTimeouts();\n      if (wasConnected) {\n        this.publish('disconnect', reason);\n\n        if ('booted' != reason && this.options.reconnect && !this.reconnecting) {\n          this.reconnect();\n        }\n      }\n    }\n  };\n\n  /**\n   * Called upon reconnection.\n   *\n   * @api private\n   */\n\n  Socket.prototype.reconnect = function () {\n    this.reconnecting = true;\n    this.reconnectionAttempts = 0;\n    this.reconnectionDelay = this.options['reconnection delay'];\n\n    var self = this\n      , maxAttempts = this.options['max reconnection attempts']\n      , tryMultiple = this.options['try multiple transports']\n      , limit = this.options['reconnection limit'];\n\n    function reset () {\n      if (self.connected) {\n        for (var i in self.namespaces) {\n          if (self.namespaces.hasOwnProperty(i) && '' !== i) {\n              self.namespaces[i].packet({ type: 'connect' });\n          }\n        }\n        self.publish('reconnect', self.transport.name, self.reconnectionAttempts);\n      }\n\n      clearTimeout(self.reconnectionTimer);\n\n      self.removeListener('connect_failed', maybeReconnect);\n      self.removeListener('connect', maybeReconnect);\n\n      self.reconnecting = false;\n\n      delete self.reconnectionAttempts;\n      delete self.reconnectionDelay;\n      delete self.reconnectionTimer;\n      delete self.redoTransports;\n\n      self.options['try multiple transports'] = tryMultiple;\n    };\n\n    function maybeReconnect () {\n      if (!self.reconnecting) {\n        return;\n      }\n\n      if (self.connected) {\n        return reset();\n      };\n\n      if (self.connecting && self.reconnecting) {\n        return self.reconnectionTimer = setTimeout(maybeReconnect, 1000);\n      }\n\n      if (self.reconnectionAttempts++ >= maxAttempts) {\n        if (!self.redoTransports) {\n          self.on('connect_failed', maybeReconnect);\n          self.options['try multiple transports'] = true;\n          self.transports = self.origTransports;\n          self.transport = self.getTransport();\n          self.redoTransports = true;\n          self.connect();\n        } else {\n          self.publish('reconnect_failed');\n          reset();\n        }\n      } else {\n        if (self.reconnectionDelay < limit) {\n          self.reconnectionDelay *= 2; // exponential back off\n        }\n\n        self.connect();\n        self.publish('reconnecting', self.reconnectionDelay, self.reconnectionAttempts);\n        self.reconnectionTimer = setTimeout(maybeReconnect, self.reconnectionDelay);\n      }\n    };\n\n    this.options['try multiple transports'] = false;\n    this.reconnectionTimer = setTimeout(maybeReconnect, this.reconnectionDelay);\n\n    this.on('connect', maybeReconnect);\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.SocketNamespace = SocketNamespace;\n\n  /**\n   * Socket namespace constructor.\n   *\n   * @constructor\n   * @api public\n   */\n\n  function SocketNamespace (socket, name) {\n    this.socket = socket;\n    this.name = name || '';\n    this.flags = {};\n    this.json = new Flag(this, 'json');\n    this.ackPackets = 0;\n    this.acks = {};\n  };\n\n  /**\n   * Apply EventEmitter mixin.\n   */\n\n  io.util.mixin(SocketNamespace, io.EventEmitter);\n\n  /**\n   * Copies emit since we override it\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.$emit = io.EventEmitter.prototype.emit;\n\n  /**\n   * Creates a new namespace, by proxying the request to the socket. This\n   * allows us to use the synax as we do on the server.\n   *\n   * @api public\n   */\n\n  SocketNamespace.prototype.of = function () {\n    return this.socket.of.apply(this.socket, arguments);\n  };\n\n  /**\n   * Sends a packet.\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.packet = function (packet) {\n    packet.endpoint = this.name;\n    this.socket.packet(packet);\n    this.flags = {};\n    return this;\n  };\n\n  /**\n   * Sends a message\n   *\n   * @api public\n   */\n\n  SocketNamespace.prototype.send = function (data, fn) {\n    var packet = {\n        type: this.flags.json ? 'json' : 'message'\n      , data: data\n    };\n\n    if ('function' == typeof fn) {\n      packet.id = ++this.ackPackets;\n      packet.ack = true;\n      this.acks[packet.id] = fn;\n    }\n\n    return this.packet(packet);\n  };\n\n  /**\n   * Emits an event\n   *\n   * @api public\n   */\n  \n  SocketNamespace.prototype.emit = function (name) {\n    var args = Array.prototype.slice.call(arguments, 1)\n      , lastArg = args[args.length - 1]\n      , packet = {\n            type: 'event'\n          , name: name\n        };\n\n    if ('function' == typeof lastArg) {\n      packet.id = ++this.ackPackets;\n      packet.ack = 'data';\n      this.acks[packet.id] = lastArg;\n      args = args.slice(0, args.length - 1);\n    }\n\n    packet.args = args;\n\n    return this.packet(packet);\n  };\n\n  /**\n   * Disconnects the namespace\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.disconnect = function () {\n    if (this.name === '') {\n      this.socket.disconnect();\n    } else {\n      this.packet({ type: 'disconnect' });\n      this.$emit('disconnect');\n    }\n\n    return this;\n  };\n\n  /**\n   * Handles a packet\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.onPacket = function (packet) {\n    var self = this;\n\n    function ack () {\n      self.packet({\n          type: 'ack'\n        , args: io.util.toArray(arguments)\n        , ackId: packet.id\n      });\n    };\n\n    switch (packet.type) {\n      case 'connect':\n        this.$emit('connect');\n        break;\n\n      case 'disconnect':\n        if (this.name === '') {\n          this.socket.onDisconnect(packet.reason || 'booted');\n        } else {\n          this.$emit('disconnect', packet.reason);\n        }\n        break;\n\n      case 'message':\n      case 'json':\n        var params = ['message', packet.data];\n\n        if (packet.ack == 'data') {\n          params.push(ack);\n        } else if (packet.ack) {\n          this.packet({ type: 'ack', ackId: packet.id });\n        }\n\n        this.$emit.apply(this, params);\n        break;\n\n      case 'event':\n        var params = [packet.name].concat(packet.args);\n\n        if (packet.ack == 'data')\n          params.push(ack);\n\n        this.$emit.apply(this, params);\n        break;\n\n      case 'ack':\n        if (this.acks[packet.ackId]) {\n          this.acks[packet.ackId].apply(this, packet.args);\n          delete this.acks[packet.ackId];\n        }\n        break;\n\n      case 'error':\n        if (packet.advice){\n          this.socket.onError(packet);\n        } else {\n          if (packet.reason == 'unauthorized') {\n            this.$emit('connect_failed', packet.reason);\n          } else {\n            this.$emit('error', packet.reason);\n          }\n        }\n        break;\n    }\n  };\n\n  /**\n   * Flag interface.\n   *\n   * @api private\n   */\n\n  function Flag (nsp, name) {\n    this.namespace = nsp;\n    this.name = name;\n  };\n\n  /**\n   * Send a message\n   *\n   * @api public\n   */\n\n  Flag.prototype.send = function () {\n    this.namespace.flags[this.name] = true;\n    this.namespace.send.apply(this.namespace, arguments);\n  };\n\n  /**\n   * Emit an event\n   *\n   * @api public\n   */\n\n  Flag.prototype.emit = function () {\n    this.namespace.flags[this.name] = true;\n    this.namespace.emit.apply(this.namespace, arguments);\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.websocket = WS;\n\n  /**\n   * The WebSocket transport uses the HTML5 WebSocket API to establish an\n   * persistent connection with the Socket.IO server. This transport will also\n   * be inherited by the FlashSocket fallback as it provides a API compatible\n   * polyfill for the WebSockets.\n   *\n   * @constructor\n   * @extends {io.Transport}\n   * @api public\n   */\n\n  function WS (socket) {\n    io.Transport.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from Transport.\n   */\n\n  io.util.inherit(WS, io.Transport);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  WS.prototype.name = 'websocket';\n\n  /**\n   * Initializes a new `WebSocket` connection with the Socket.IO server. We attach\n   * all the appropriate listeners to handle the responses from the server.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  WS.prototype.open = function () {\n    var query = io.util.query(this.socket.options.query)\n      , self = this\n      , Socket\n\n\n    if (!Socket) {\n      Socket = global.MozWebSocket || global.WebSocket;\n    }\n\n    this.websocket = new Socket(this.prepareUrl() + query);\n\n    this.websocket.onopen = function () {\n      self.onOpen();\n      self.socket.setBuffer(false);\n    };\n    this.websocket.onmessage = function (ev) {\n      self.onData(ev.data);\n    };\n    this.websocket.onclose = function () {\n      self.onClose();\n      self.socket.setBuffer(true);\n    };\n    this.websocket.onerror = function (e) {\n      self.onError(e);\n    };\n\n    return this;\n  };\n\n  /**\n   * Send a message to the Socket.IO server. The message will automatically be\n   * encoded in the correct message format.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  // Do to a bug in the current IDevices browser, we need to wrap the send in a \n  // setTimeout, when they resume from sleeping the browser will crash if \n  // we don't allow the browser time to detect the socket has been closed\n  if (io.util.ua.iDevice) {\n    WS.prototype.send = function (data) {\n      var self = this;\n      setTimeout(function() {\n         self.websocket.send(data);\n      },0);\n      return this;\n    };\n  } else {\n    WS.prototype.send = function (data) {\n      this.websocket.send(data);\n      return this;\n    };\n  }\n\n  /**\n   * Payload\n   *\n   * @api private\n   */\n\n  WS.prototype.payload = function (arr) {\n    for (var i = 0, l = arr.length; i < l; i++) {\n      this.packet(arr[i]);\n    }\n    return this;\n  };\n\n  /**\n   * Disconnect the established `WebSocket` connection.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  WS.prototype.close = function () {\n    this.websocket.close();\n    return this;\n  };\n\n  /**\n   * Handle the errors that `WebSocket` might be giving when we\n   * are attempting to connect or send messages.\n   *\n   * @param {Error} e The error.\n   * @api private\n   */\n\n  WS.prototype.onError = function (e) {\n    this.socket.onError(e);\n  };\n\n  /**\n   * Returns the appropriate scheme for the URI generation.\n   *\n   * @api private\n   */\n  WS.prototype.scheme = function () {\n    return this.socket.options.secure ? 'wss' : 'ws';\n  };\n\n  /**\n   * Checks if the browser has support for native `WebSockets` and that\n   * it's not the polyfill created for the FlashSocket transport.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  WS.check = function () {\n    return ('WebSocket' in global && !('__addTask' in WebSocket))\n          || 'MozWebSocket' in global;\n  };\n\n  /**\n   * Check if the `WebSocket` transport support cross domain communications.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  WS.xdomainCheck = function () {\n    return true;\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('websocket');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.flashsocket = Flashsocket;\n\n  /**\n   * The FlashSocket transport. This is a API wrapper for the HTML5 WebSocket\n   * specification. It uses a .swf file to communicate with the server. If you want\n   * to serve the .swf file from a other server than where the Socket.IO script is\n   * coming from you need to use the insecure version of the .swf. More information\n   * about this can be found on the github page.\n   *\n   * @constructor\n   * @extends {io.Transport.websocket}\n   * @api public\n   */\n\n  function Flashsocket () {\n    io.Transport.websocket.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from Transport.\n   */\n\n  io.util.inherit(Flashsocket, io.Transport.websocket);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  Flashsocket.prototype.name = 'flashsocket';\n\n  /**\n   * Disconnect the established `FlashSocket` connection. This is done by adding a \n   * new task to the FlashSocket. The rest will be handled off by the `WebSocket` \n   * transport.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  Flashsocket.prototype.open = function () {\n    var self = this\n      , args = arguments;\n\n    WebSocket.__addTask(function () {\n      io.Transport.websocket.prototype.open.apply(self, args);\n    });\n    return this;\n  };\n  \n  /**\n   * Sends a message to the Socket.IO server. This is done by adding a new\n   * task to the FlashSocket. The rest will be handled off by the `WebSocket` \n   * transport.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  Flashsocket.prototype.send = function () {\n    var self = this, args = arguments;\n    WebSocket.__addTask(function () {\n      io.Transport.websocket.prototype.send.apply(self, args);\n    });\n    return this;\n  };\n\n  /**\n   * Disconnects the established `FlashSocket` connection.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  Flashsocket.prototype.close = function () {\n    WebSocket.__tasks.length = 0;\n    io.Transport.websocket.prototype.close.call(this);\n    return this;\n  };\n\n  /**\n   * The WebSocket fall back needs to append the flash container to the body\n   * element, so we need to make sure we have access to it. Or defer the call\n   * until we are sure there is a body element.\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  Flashsocket.prototype.ready = function (socket, fn) {\n    function init () {\n      var options = socket.options\n        , port = options['flash policy port']\n        , path = [\n              'http' + (options.secure ? 's' : '') + ':/'\n            , options.host + ':' + options.port\n            , options.resource\n            , 'static/flashsocket'\n            , 'WebSocketMain' + (socket.isXDomain() ? 'Insecure' : '') + '.swf'\n          ];\n\n      // Only start downloading the swf file when the checked that this browser\n      // actually supports it\n      if (!Flashsocket.loaded) {\n        if (typeof WEB_SOCKET_SWF_LOCATION === 'undefined') {\n          // Set the correct file based on the XDomain settings\n          WEB_SOCKET_SWF_LOCATION = path.join('/');\n        }\n\n        if (port !== 843) {\n          WebSocket.loadFlashPolicyFile('xmlsocket://' + options.host + ':' + port);\n        }\n\n        WebSocket.__initialize();\n        Flashsocket.loaded = true;\n      }\n\n      fn.call(self);\n    }\n\n    var self = this;\n    if (document.body) return init();\n\n    io.util.load(init);\n  };\n\n  /**\n   * Check if the FlashSocket transport is supported as it requires that the Adobe\n   * Flash Player plug-in version `10.0.0` or greater is installed. And also check if\n   * the polyfill is correctly loaded.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  Flashsocket.check = function () {\n    if (\n        typeof WebSocket == 'undefined'\n      || !('__initialize' in WebSocket) || !swfobject\n    ) return false;\n\n    return swfobject.getFlashPlayerVersion().major >= 10;\n  };\n\n  /**\n   * Check if the FlashSocket transport can be used as cross domain / cross origin \n   * transport. Because we can't see which type (secure or insecure) of .swf is used\n   * we will just return true.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  Flashsocket.xdomainCheck = function () {\n    return true;\n  };\n\n  /**\n   * Disable AUTO_INITIALIZATION\n   */\n\n  if (typeof window != 'undefined') {\n    WEB_SOCKET_DISABLE_AUTO_INITIALIZATION = true;\n  }\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('flashsocket');\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n/*\tSWFObject v2.2 <http://code.google.com/p/swfobject/> \n\tis released under the MIT License <http://www.opensource.org/licenses/mit-license.php> \n*/\nif ('undefined' != typeof window) {\nvar swfobject=function(){var D=\"undefined\",r=\"object\",S=\"Shockwave Flash\",W=\"ShockwaveFlash.ShockwaveFlash\",q=\"application/x-shockwave-flash\",R=\"SWFObjectExprInst\",x=\"onreadystatechange\",O=window,j=document,t=navigator,T=false,U=[h],o=[],N=[],I=[],l,Q,E,B,J=false,a=false,n,G,m=true,M=function(){var aa=typeof j.getElementById!=D&&typeof j.getElementsByTagName!=D&&typeof j.createElement!=D,ah=t.userAgent.toLowerCase(),Y=t.platform.toLowerCase(),ae=Y?/win/.test(Y):/win/.test(ah),ac=Y?/mac/.test(Y):/mac/.test(ah),af=/webkit/.test(ah)?parseFloat(ah.replace(/^.*webkit\\/(\\d+(\\.\\d+)?).*$/,\"$1\")):false,X=!+\"\\v1\",ag=[0,0,0],ab=null;if(typeof t.plugins!=D&&typeof t.plugins[S]==r){ab=t.plugins[S].description;if(ab&&!(typeof t.mimeTypes!=D&&t.mimeTypes[q]&&!t.mimeTypes[q].enabledPlugin)){T=true;X=false;ab=ab.replace(/^.*\\s+(\\S+\\s+\\S+$)/,\"$1\");ag[0]=parseInt(ab.replace(/^(.*)\\..*$/,\"$1\"),10);ag[1]=parseInt(ab.replace(/^.*\\.(.*)\\s.*$/,\"$1\"),10);ag[2]=/[a-zA-Z]/.test(ab)?parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/,\"$1\"),10):0}}else{if(typeof O[(['Active'].concat('Object').join('X'))]!=D){try{var ad=new window[(['Active'].concat('Object').join('X'))](W);if(ad){ab=ad.GetVariable(\"$version\");if(ab){X=true;ab=ab.split(\" \")[1].split(\",\");ag=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}}catch(Z){}}}return{w3:aa,pv:ag,wk:af,ie:X,win:ae,mac:ac}}(),k=function(){if(!M.w3){return}if((typeof j.readyState!=D&&j.readyState==\"complete\")||(typeof j.readyState==D&&(j.getElementsByTagName(\"body\")[0]||j.body))){f()}if(!J){if(typeof j.addEventListener!=D){j.addEventListener(\"DOMContentLoaded\",f,false)}if(M.ie&&M.win){j.attachEvent(x,function(){if(j.readyState==\"complete\"){j.detachEvent(x,arguments.callee);f()}});if(O==top){(function(){if(J){return}try{j.documentElement.doScroll(\"left\")}catch(X){setTimeout(arguments.callee,0);return}f()})()}}if(M.wk){(function(){if(J){return}if(!/loaded|complete/.test(j.readyState)){setTimeout(arguments.callee,0);return}f()})()}s(f)}}();function f(){if(J){return}try{var Z=j.getElementsByTagName(\"body\")[0].appendChild(C(\"span\"));Z.parentNode.removeChild(Z)}catch(aa){return}J=true;var X=U.length;for(var Y=0;Y<X;Y++){U[Y]()}}function K(X){if(J){X()}else{U[U.length]=X}}function s(Y){if(typeof O.addEventListener!=D){O.addEventListener(\"load\",Y,false)}else{if(typeof j.addEventListener!=D){j.addEventListener(\"load\",Y,false)}else{if(typeof O.attachEvent!=D){i(O,\"onload\",Y)}else{if(typeof O.onload==\"function\"){var X=O.onload;O.onload=function(){X();Y()}}else{O.onload=Y}}}}}function h(){if(T){V()}else{H()}}function V(){var X=j.getElementsByTagName(\"body\")[0];var aa=C(r);aa.setAttribute(\"type\",q);var Z=X.appendChild(aa);if(Z){var Y=0;(function(){if(typeof Z.GetVariable!=D){var ab=Z.GetVariable(\"$version\");if(ab){ab=ab.split(\" \")[1].split(\",\");M.pv=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}else{if(Y<10){Y++;setTimeout(arguments.callee,10);return}}X.removeChild(aa);Z=null;H()})()}else{H()}}function H(){var ag=o.length;if(ag>0){for(var af=0;af<ag;af++){var Y=o[af].id;var ab=o[af].callbackFn;var aa={success:false,id:Y};if(M.pv[0]>0){var ae=c(Y);if(ae){if(F(o[af].swfVersion)&&!(M.wk&&M.wk<312)){w(Y,true);if(ab){aa.success=true;aa.ref=z(Y);ab(aa)}}else{if(o[af].expressInstall&&A()){var ai={};ai.data=o[af].expressInstall;ai.width=ae.getAttribute(\"width\")||\"0\";ai.height=ae.getAttribute(\"height\")||\"0\";if(ae.getAttribute(\"class\")){ai.styleclass=ae.getAttribute(\"class\")}if(ae.getAttribute(\"align\")){ai.align=ae.getAttribute(\"align\")}var ah={};var X=ae.getElementsByTagName(\"param\");var ac=X.length;for(var ad=0;ad<ac;ad++){if(X[ad].getAttribute(\"name\").toLowerCase()!=\"movie\"){ah[X[ad].getAttribute(\"name\")]=X[ad].getAttribute(\"value\")}}P(ai,ah,Y,ab)}else{p(ae);if(ab){ab(aa)}}}}}else{w(Y,true);if(ab){var Z=z(Y);if(Z&&typeof Z.SetVariable!=D){aa.success=true;aa.ref=Z}ab(aa)}}}}}function z(aa){var X=null;var Y=c(aa);if(Y&&Y.nodeName==\"OBJECT\"){if(typeof Y.SetVariable!=D){X=Y}else{var Z=Y.getElementsByTagName(r)[0];if(Z){X=Z}}}return X}function A(){return !a&&F(\"6.0.65\")&&(M.win||M.mac)&&!(M.wk&&M.wk<312)}function P(aa,ab,X,Z){a=true;E=Z||null;B={success:false,id:X};var ae=c(X);if(ae){if(ae.nodeName==\"OBJECT\"){l=g(ae);Q=null}else{l=ae;Q=X}aa.id=R;if(typeof aa.width==D||(!/%$/.test(aa.width)&&parseInt(aa.width,10)<310)){aa.width=\"310\"}if(typeof aa.height==D||(!/%$/.test(aa.height)&&parseInt(aa.height,10)<137)){aa.height=\"137\"}j.title=j.title.slice(0,47)+\" - Flash Player Installation\";var ad=M.ie&&M.win?(['Active'].concat('').join('X')):\"PlugIn\",ac=\"MMredirectURL=\"+O.location.toString().replace(/&/g,\"%26\")+\"&MMplayerType=\"+ad+\"&MMdoctitle=\"+j.title;if(typeof ab.flashvars!=D){ab.flashvars+=\"&\"+ac}else{ab.flashvars=ac}if(M.ie&&M.win&&ae.readyState!=4){var Y=C(\"div\");X+=\"SWFObjectNew\";Y.setAttribute(\"id\",X);ae.parentNode.insertBefore(Y,ae);ae.style.display=\"none\";(function(){if(ae.readyState==4){ae.parentNode.removeChild(ae)}else{setTimeout(arguments.callee,10)}})()}u(aa,ab,X)}}function p(Y){if(M.ie&&M.win&&Y.readyState!=4){var X=C(\"div\");Y.parentNode.insertBefore(X,Y);X.parentNode.replaceChild(g(Y),X);Y.style.display=\"none\";(function(){if(Y.readyState==4){Y.parentNode.removeChild(Y)}else{setTimeout(arguments.callee,10)}})()}else{Y.parentNode.replaceChild(g(Y),Y)}}function g(ab){var aa=C(\"div\");if(M.win&&M.ie){aa.innerHTML=ab.innerHTML}else{var Y=ab.getElementsByTagName(r)[0];if(Y){var ad=Y.childNodes;if(ad){var X=ad.length;for(var Z=0;Z<X;Z++){if(!(ad[Z].nodeType==1&&ad[Z].nodeName==\"PARAM\")&&!(ad[Z].nodeType==8)){aa.appendChild(ad[Z].cloneNode(true))}}}}}return aa}function u(ai,ag,Y){var X,aa=c(Y);if(M.wk&&M.wk<312){return X}if(aa){if(typeof ai.id==D){ai.id=Y}if(M.ie&&M.win){var ah=\"\";for(var ae in ai){if(ai[ae]!=Object.prototype[ae]){if(ae.toLowerCase()==\"data\"){ag.movie=ai[ae]}else{if(ae.toLowerCase()==\"styleclass\"){ah+=' class=\"'+ai[ae]+'\"'}else{if(ae.toLowerCase()!=\"classid\"){ah+=\" \"+ae+'=\"'+ai[ae]+'\"'}}}}}var af=\"\";for(var ad in ag){if(ag[ad]!=Object.prototype[ad]){af+='<param name=\"'+ad+'\" value=\"'+ag[ad]+'\" />'}}aa.outerHTML='<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"'+ah+\">\"+af+\"</object>\";N[N.length]=ai.id;X=c(ai.id)}else{var Z=C(r);Z.setAttribute(\"type\",q);for(var ac in ai){if(ai[ac]!=Object.prototype[ac]){if(ac.toLowerCase()==\"styleclass\"){Z.setAttribute(\"class\",ai[ac])}else{if(ac.toLowerCase()!=\"classid\"){Z.setAttribute(ac,ai[ac])}}}}for(var ab in ag){if(ag[ab]!=Object.prototype[ab]&&ab.toLowerCase()!=\"movie\"){e(Z,ab,ag[ab])}}aa.parentNode.replaceChild(Z,aa);X=Z}}return X}function e(Z,X,Y){var aa=C(\"param\");aa.setAttribute(\"name\",X);aa.setAttribute(\"value\",Y);Z.appendChild(aa)}function y(Y){var X=c(Y);if(X&&X.nodeName==\"OBJECT\"){if(M.ie&&M.win){X.style.display=\"none\";(function(){if(X.readyState==4){b(Y)}else{setTimeout(arguments.callee,10)}})()}else{X.parentNode.removeChild(X)}}}function b(Z){var Y=c(Z);if(Y){for(var X in Y){if(typeof Y[X]==\"function\"){Y[X]=null}}Y.parentNode.removeChild(Y)}}function c(Z){var X=null;try{X=j.getElementById(Z)}catch(Y){}return X}function C(X){return j.createElement(X)}function i(Z,X,Y){Z.attachEvent(X,Y);I[I.length]=[Z,X,Y]}function F(Z){var Y=M.pv,X=Z.split(\".\");X[0]=parseInt(X[0],10);X[1]=parseInt(X[1],10)||0;X[2]=parseInt(X[2],10)||0;return(Y[0]>X[0]||(Y[0]==X[0]&&Y[1]>X[1])||(Y[0]==X[0]&&Y[1]==X[1]&&Y[2]>=X[2]))?true:false}function v(ac,Y,ad,ab){if(M.ie&&M.mac){return}var aa=j.getElementsByTagName(\"head\")[0];if(!aa){return}var X=(ad&&typeof ad==\"string\")?ad:\"screen\";if(ab){n=null;G=null}if(!n||G!=X){var Z=C(\"style\");Z.setAttribute(\"type\",\"text/css\");Z.setAttribute(\"media\",X);n=aa.appendChild(Z);if(M.ie&&M.win&&typeof j.styleSheets!=D&&j.styleSheets.length>0){n=j.styleSheets[j.styleSheets.length-1]}G=X}if(M.ie&&M.win){if(n&&typeof n.addRule==r){n.addRule(ac,Y)}}else{if(n&&typeof j.createTextNode!=D){n.appendChild(j.createTextNode(ac+\" {\"+Y+\"}\"))}}}function w(Z,X){if(!m){return}var Y=X?\"visible\":\"hidden\";if(J&&c(Z)){c(Z).style.visibility=Y}else{v(\"#\"+Z,\"visibility:\"+Y)}}function L(Y){var Z=/[\\\\\\\"<>\\.;]/;var X=Z.exec(Y)!=null;return X&&typeof encodeURIComponent!=D?encodeURIComponent(Y):Y}var d=function(){if(M.ie&&M.win){window.attachEvent(\"onunload\",function(){var ac=I.length;for(var ab=0;ab<ac;ab++){I[ab][0].detachEvent(I[ab][1],I[ab][2])}var Z=N.length;for(var aa=0;aa<Z;aa++){y(N[aa])}for(var Y in M){M[Y]=null}M=null;for(var X in swfobject){swfobject[X]=null}swfobject=null})}}();return{registerObject:function(ab,X,aa,Z){if(M.w3&&ab&&X){var Y={};Y.id=ab;Y.swfVersion=X;Y.expressInstall=aa;Y.callbackFn=Z;o[o.length]=Y;w(ab,false)}else{if(Z){Z({success:false,id:ab})}}},getObjectById:function(X){if(M.w3){return z(X)}},embedSWF:function(ab,ah,ae,ag,Y,aa,Z,ad,af,ac){var X={success:false,id:ah};if(M.w3&&!(M.wk&&M.wk<312)&&ab&&ah&&ae&&ag&&Y){w(ah,false);K(function(){ae+=\"\";ag+=\"\";var aj={};if(af&&typeof af===r){for(var al in af){aj[al]=af[al]}}aj.data=ab;aj.width=ae;aj.height=ag;var am={};if(ad&&typeof ad===r){for(var ak in ad){am[ak]=ad[ak]}}if(Z&&typeof Z===r){for(var ai in Z){if(typeof am.flashvars!=D){am.flashvars+=\"&\"+ai+\"=\"+Z[ai]}else{am.flashvars=ai+\"=\"+Z[ai]}}}if(F(Y)){var an=u(aj,am,ah);if(aj.id==ah){w(ah,true)}X.success=true;X.ref=an}else{if(aa&&A()){aj.data=aa;P(aj,am,ah,ac);return}else{w(ah,true)}}if(ac){ac(X)}})}else{if(ac){ac(X)}}},switchOffAutoHideShow:function(){m=false},ua:M,getFlashPlayerVersion:function(){return{major:M.pv[0],minor:M.pv[1],release:M.pv[2]}},hasFlashPlayerVersion:F,createSWF:function(Z,Y,X){if(M.w3){return u(Z,Y,X)}else{return undefined}},showExpressInstall:function(Z,aa,X,Y){if(M.w3&&A()){P(Z,aa,X,Y)}},removeSWF:function(X){if(M.w3){y(X)}},createCSS:function(aa,Z,Y,X){if(M.w3){v(aa,Z,Y,X)}},addDomLoadEvent:K,addLoadEvent:s,getQueryParamValue:function(aa){var Z=j.location.search||j.location.hash;if(Z){if(/\\?/.test(Z)){Z=Z.split(\"?\")[1]}if(aa==null){return L(Z)}var Y=Z.split(\"&\");for(var X=0;X<Y.length;X++){if(Y[X].substring(0,Y[X].indexOf(\"=\"))==aa){return L(Y[X].substring((Y[X].indexOf(\"=\")+1)))}}}return\"\"},expressInstallCallback:function(){if(a){var X=c(R);if(X&&l){X.parentNode.replaceChild(l,X);if(Q){w(Q,true);if(M.ie&&M.win){l.style.display=\"block\"}}if(E){E(B)}}a=false}}}}();\n}\n// Copyright: Hiroshi Ichikawa <http://gimite.net/en/>\n// License: New BSD License\n// Reference: http://dev.w3.org/html5/websockets/\n// Reference: http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol\n\n(function() {\n  \n  if ('undefined' == typeof window || window.WebSocket) return;\n\n  var console = window.console;\n  if (!console || !console.log || !console.error) {\n    console = {log: function(){ }, error: function(){ }};\n  }\n  \n  if (!swfobject.hasFlashPlayerVersion(\"10.0.0\")) {\n    console.error(\"Flash Player >= 10.0.0 is required.\");\n    return;\n  }\n  if (location.protocol == \"file:\") {\n    console.error(\n      \"WARNING: web-socket-js doesn't work in file:///... URL \" +\n      \"unless you set Flash Security Settings properly. \" +\n      \"Open the page via Web server i.e. http://...\");\n  }\n\n  /**\n   * This class represents a faux web socket.\n   * @param {string} url\n   * @param {array or string} protocols\n   * @param {string} proxyHost\n   * @param {int} proxyPort\n   * @param {string} headers\n   */\n  WebSocket = function(url, protocols, proxyHost, proxyPort, headers) {\n    var self = this;\n    self.__id = WebSocket.__nextId++;\n    WebSocket.__instances[self.__id] = self;\n    self.readyState = WebSocket.CONNECTING;\n    self.bufferedAmount = 0;\n    self.__events = {};\n    if (!protocols) {\n      protocols = [];\n    } else if (typeof protocols == \"string\") {\n      protocols = [protocols];\n    }\n    // Uses setTimeout() to make sure __createFlash() runs after the caller sets ws.onopen etc.\n    // Otherwise, when onopen fires immediately, onopen is called before it is set.\n    setTimeout(function() {\n      WebSocket.__addTask(function() {\n        WebSocket.__flash.create(\n            self.__id, url, protocols, proxyHost || null, proxyPort || 0, headers || null);\n      });\n    }, 0);\n  };\n\n  /**\n   * Send data to the web socket.\n   * @param {string} data  The data to send to the socket.\n   * @return {boolean}  True for success, false for failure.\n   */\n  WebSocket.prototype.send = function(data) {\n    if (this.readyState == WebSocket.CONNECTING) {\n      throw \"INVALID_STATE_ERR: Web Socket connection has not been established\";\n    }\n    // We use encodeURIComponent() here, because FABridge doesn't work if\n    // the argument includes some characters. We don't use escape() here\n    // because of this:\n    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Functions#escape_and_unescape_Functions\n    // But it looks decodeURIComponent(encodeURIComponent(s)) doesn't\n    // preserve all Unicode characters either e.g. \"\\uffff\" in Firefox.\n    // Note by wtritch: Hopefully this will not be necessary using ExternalInterface.  Will require\n    // additional testing.\n    var result = WebSocket.__flash.send(this.__id, encodeURIComponent(data));\n    if (result < 0) { // success\n      return true;\n    } else {\n      this.bufferedAmount += result;\n      return false;\n    }\n  };\n\n  /**\n   * Close this web socket gracefully.\n   */\n  WebSocket.prototype.close = function() {\n    if (this.readyState == WebSocket.CLOSED || this.readyState == WebSocket.CLOSING) {\n      return;\n    }\n    this.readyState = WebSocket.CLOSING;\n    WebSocket.__flash.close(this.__id);\n  };\n\n  /**\n   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n   *\n   * @param {string} type\n   * @param {function} listener\n   * @param {boolean} useCapture\n   * @return void\n   */\n  WebSocket.prototype.addEventListener = function(type, listener, useCapture) {\n    if (!(type in this.__events)) {\n      this.__events[type] = [];\n    }\n    this.__events[type].push(listener);\n  };\n\n  /**\n   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n   *\n   * @param {string} type\n   * @param {function} listener\n   * @param {boolean} useCapture\n   * @return void\n   */\n  WebSocket.prototype.removeEventListener = function(type, listener, useCapture) {\n    if (!(type in this.__events)) return;\n    var events = this.__events[type];\n    for (var i = events.length - 1; i >= 0; --i) {\n      if (events[i] === listener) {\n        events.splice(i, 1);\n        break;\n      }\n    }\n  };\n\n  /**\n   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n   *\n   * @param {Event} event\n   * @return void\n   */\n  WebSocket.prototype.dispatchEvent = function(event) {\n    var events = this.__events[event.type] || [];\n    for (var i = 0; i < events.length; ++i) {\n      events[i](event);\n    }\n    var handler = this[\"on\" + event.type];\n    if (handler) handler(event);\n  };\n\n  /**\n   * Handles an event from Flash.\n   * @param {Object} flashEvent\n   */\n  WebSocket.prototype.__handleEvent = function(flashEvent) {\n    if (\"readyState\" in flashEvent) {\n      this.readyState = flashEvent.readyState;\n    }\n    if (\"protocol\" in flashEvent) {\n      this.protocol = flashEvent.protocol;\n    }\n    \n    var jsEvent;\n    if (flashEvent.type == \"open\" || flashEvent.type == \"error\") {\n      jsEvent = this.__createSimpleEvent(flashEvent.type);\n    } else if (flashEvent.type == \"close\") {\n      // TODO implement jsEvent.wasClean\n      jsEvent = this.__createSimpleEvent(\"close\");\n    } else if (flashEvent.type == \"message\") {\n      var data = decodeURIComponent(flashEvent.message);\n      jsEvent = this.__createMessageEvent(\"message\", data);\n    } else {\n      throw \"unknown event type: \" + flashEvent.type;\n    }\n    \n    this.dispatchEvent(jsEvent);\n  };\n  \n  WebSocket.prototype.__createSimpleEvent = function(type) {\n    if (document.createEvent && window.Event) {\n      var event = document.createEvent(\"Event\");\n      event.initEvent(type, false, false);\n      return event;\n    } else {\n      return {type: type, bubbles: false, cancelable: false};\n    }\n  };\n  \n  WebSocket.prototype.__createMessageEvent = function(type, data) {\n    if (document.createEvent && window.MessageEvent && !window.opera) {\n      var event = document.createEvent(\"MessageEvent\");\n      event.initMessageEvent(\"message\", false, false, data, null, null, window, null);\n      return event;\n    } else {\n      // IE and Opera, the latter one truncates the data parameter after any 0x00 bytes.\n      return {type: type, data: data, bubbles: false, cancelable: false};\n    }\n  };\n  \n  /**\n   * Define the WebSocket readyState enumeration.\n   */\n  WebSocket.CONNECTING = 0;\n  WebSocket.OPEN = 1;\n  WebSocket.CLOSING = 2;\n  WebSocket.CLOSED = 3;\n\n  WebSocket.__flash = null;\n  WebSocket.__instances = {};\n  WebSocket.__tasks = [];\n  WebSocket.__nextId = 0;\n  \n  /**\n   * Load a new flash security policy file.\n   * @param {string} url\n   */\n  WebSocket.loadFlashPolicyFile = function(url){\n    WebSocket.__addTask(function() {\n      WebSocket.__flash.loadManualPolicyFile(url);\n    });\n  };\n\n  /**\n   * Loads WebSocketMain.swf and creates WebSocketMain object in Flash.\n   */\n  WebSocket.__initialize = function() {\n    if (WebSocket.__flash) return;\n    \n    if (WebSocket.__swfLocation) {\n      // For backword compatibility.\n      window.WEB_SOCKET_SWF_LOCATION = WebSocket.__swfLocation;\n    }\n    if (!window.WEB_SOCKET_SWF_LOCATION) {\n      console.error(\"[WebSocket] set WEB_SOCKET_SWF_LOCATION to location of WebSocketMain.swf\");\n      return;\n    }\n    var container = document.createElement(\"div\");\n    container.id = \"webSocketContainer\";\n    // Hides Flash box. We cannot use display: none or visibility: hidden because it prevents\n    // Flash from loading at least in IE. So we move it out of the screen at (-100, -100).\n    // But this even doesn't work with Flash Lite (e.g. in Droid Incredible). So with Flash\n    // Lite, we put it at (0, 0). This shows 1x1 box visible at left-top corner but this is\n    // the best we can do as far as we know now.\n    container.style.position = \"absolute\";\n    if (WebSocket.__isFlashLite()) {\n      container.style.left = \"0px\";\n      container.style.top = \"0px\";\n    } else {\n      container.style.left = \"-100px\";\n      container.style.top = \"-100px\";\n    }\n    var holder = document.createElement(\"div\");\n    holder.id = \"webSocketFlash\";\n    container.appendChild(holder);\n    document.body.appendChild(container);\n    // See this article for hasPriority:\n    // http://help.adobe.com/en_US/as3/mobile/WS4bebcd66a74275c36cfb8137124318eebc6-7ffd.html\n    swfobject.embedSWF(\n      WEB_SOCKET_SWF_LOCATION,\n      \"webSocketFlash\",\n      \"1\" /* width */,\n      \"1\" /* height */,\n      \"10.0.0\" /* SWF version */,\n      null,\n      null,\n      {hasPriority: true, swliveconnect : true, allowScriptAccess: \"always\"},\n      null,\n      function(e) {\n        if (!e.success) {\n          console.error(\"[WebSocket] swfobject.embedSWF failed\");\n        }\n      });\n  };\n  \n  /**\n   * Called by Flash to notify JS that it's fully loaded and ready\n   * for communication.\n   */\n  WebSocket.__onFlashInitialized = function() {\n    // We need to set a timeout here to avoid round-trip calls\n    // to flash during the initialization process.\n    setTimeout(function() {\n      WebSocket.__flash = document.getElementById(\"webSocketFlash\");\n      WebSocket.__flash.setCallerUrl(location.href);\n      WebSocket.__flash.setDebug(!!window.WEB_SOCKET_DEBUG);\n      for (var i = 0; i < WebSocket.__tasks.length; ++i) {\n        WebSocket.__tasks[i]();\n      }\n      WebSocket.__tasks = [];\n    }, 0);\n  };\n  \n  /**\n   * Called by Flash to notify WebSockets events are fired.\n   */\n  WebSocket.__onFlashEvent = function() {\n    setTimeout(function() {\n      try {\n        // Gets events using receiveEvents() instead of getting it from event object\n        // of Flash event. This is to make sure to keep message order.\n        // It seems sometimes Flash events don't arrive in the same order as they are sent.\n        var events = WebSocket.__flash.receiveEvents();\n        for (var i = 0; i < events.length; ++i) {\n          WebSocket.__instances[events[i].webSocketId].__handleEvent(events[i]);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }, 0);\n    return true;\n  };\n  \n  // Called by Flash.\n  WebSocket.__log = function(message) {\n    console.log(decodeURIComponent(message));\n  };\n  \n  // Called by Flash.\n  WebSocket.__error = function(message) {\n    console.error(decodeURIComponent(message));\n  };\n  \n  WebSocket.__addTask = function(task) {\n    if (WebSocket.__flash) {\n      task();\n    } else {\n      WebSocket.__tasks.push(task);\n    }\n  };\n  \n  /**\n   * Test if the browser is running flash lite.\n   * @return {boolean} True if flash lite is running, false otherwise.\n   */\n  WebSocket.__isFlashLite = function() {\n    if (!window.navigator || !window.navigator.mimeTypes) {\n      return false;\n    }\n    var mimeType = window.navigator.mimeTypes[\"application/x-shockwave-flash\"];\n    if (!mimeType || !mimeType.enabledPlugin || !mimeType.enabledPlugin.filename) {\n      return false;\n    }\n    return mimeType.enabledPlugin.filename.match(/flashlite/i) ? true : false;\n  };\n  \n  if (!window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION) {\n    if (window.addEventListener) {\n      window.addEventListener(\"load\", function(){\n        WebSocket.__initialize();\n      }, false);\n    } else {\n      window.attachEvent(\"onload\", function(){\n        WebSocket.__initialize();\n      });\n    }\n  }\n  \n})();\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   *\n   * @api public\n   */\n\n  exports.XHR = XHR;\n\n  /**\n   * XHR constructor\n   *\n   * @costructor\n   * @api public\n   */\n\n  function XHR (socket) {\n    if (!socket) return;\n\n    io.Transport.apply(this, arguments);\n    this.sendBuffer = [];\n  };\n\n  /**\n   * Inherits from Transport.\n   */\n\n  io.util.inherit(XHR, io.Transport);\n\n  /**\n   * Establish a connection\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  XHR.prototype.open = function () {\n    this.socket.setBuffer(false);\n    this.onOpen();\n    this.get();\n\n    // we need to make sure the request succeeds since we have no indication\n    // whether the request opened or not until it succeeded.\n    this.setCloseTimeout();\n\n    return this;\n  };\n\n  /**\n   * Check if we need to send data to the Socket.IO server, if we have data in our\n   * buffer we encode it and forward it to the `post` method.\n   *\n   * @api private\n   */\n\n  XHR.prototype.payload = function (payload) {\n    var msgs = [];\n\n    for (var i = 0, l = payload.length; i < l; i++) {\n      msgs.push(io.parser.encodePacket(payload[i]));\n    }\n\n    this.send(io.parser.encodePayload(msgs));\n  };\n\n  /**\n   * Send data to the Socket.IO server.\n   *\n   * @param data The message\n   * @returns {Transport}\n   * @api public\n   */\n\n  XHR.prototype.send = function (data) {\n    this.post(data);\n    return this;\n  };\n\n  /**\n   * Posts a encoded message to the Socket.IO server.\n   *\n   * @param {String} data A encoded message.\n   * @api private\n   */\n\n  function empty () { };\n\n  XHR.prototype.post = function (data) {\n    var self = this;\n    this.socket.setBuffer(true);\n\n    function stateChange () {\n      if (this.readyState == 4) {\n        this.onreadystatechange = empty;\n        self.posting = false;\n\n        if (this.status == 200){\n          self.socket.setBuffer(false);\n        } else {\n          self.onClose();\n        }\n      }\n    }\n\n    function onload () {\n      this.onload = empty;\n      self.socket.setBuffer(false);\n    };\n\n    this.sendXHR = this.request('POST');\n\n    if (global.XDomainRequest && this.sendXHR instanceof XDomainRequest) {\n      this.sendXHR.onload = this.sendXHR.onerror = onload;\n    } else {\n      this.sendXHR.onreadystatechange = stateChange;\n    }\n\n    this.sendXHR.send(data);\n  };\n\n  /**\n   * Disconnects the established `XHR` connection.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  XHR.prototype.close = function () {\n    this.onClose();\n    return this;\n  };\n\n  /**\n   * Generates a configured XHR request\n   *\n   * @param {String} url The url that needs to be requested.\n   * @param {String} method The method the request should use.\n   * @returns {XMLHttpRequest}\n   * @api private\n   */\n\n  XHR.prototype.request = function (method) {\n    var req = io.util.request(this.socket.isXDomain())\n      , query = io.util.query(this.socket.options.query, 't=' + +new Date);\n\n    req.open(method || 'GET', this.prepareUrl() + query, true);\n\n    if (method == 'POST') {\n      try {\n        if (req.setRequestHeader) {\n          req.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n        } else {\n          // XDomainRequest\n          req.contentType = 'text/plain';\n        }\n      } catch (e) {}\n    }\n\n    return req;\n  };\n\n  /**\n   * Returns the scheme to use for the transport URLs.\n   *\n   * @api private\n   */\n\n  XHR.prototype.scheme = function () {\n    return this.socket.options.secure ? 'https' : 'http';\n  };\n\n  /**\n   * Check if the XHR transports are supported\n   *\n   * @param {Boolean} xdomain Check if we support cross domain requests.\n   * @returns {Boolean}\n   * @api public\n   */\n\n  XHR.check = function (socket, xdomain) {\n    try {\n      var request = io.util.request(xdomain),\n          usesXDomReq = (global.XDomainRequest && request instanceof XDomainRequest),\n          socketProtocol = (socket && socket.options && socket.options.secure ? 'https:' : 'http:'),\n          isXProtocol = (global.location && socketProtocol != global.location.protocol);\n      if (request && !(usesXDomReq && isXProtocol)) {\n        return true;\n      }\n    } catch(e) {}\n\n    return false;\n  };\n\n  /**\n   * Check if the XHR transport supports cross domain requests.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  XHR.xdomainCheck = function (socket) {\n    return XHR.check(socket, true);\n  };\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.htmlfile = HTMLFile;\n\n  /**\n   * The HTMLFile transport creates a `forever iframe` based transport\n   * for Internet Explorer. Regular forever iframe implementations will \n   * continuously trigger the browsers buzy indicators. If the forever iframe\n   * is created inside a `htmlfile` these indicators will not be trigged.\n   *\n   * @constructor\n   * @extends {io.Transport.XHR}\n   * @api public\n   */\n\n  function HTMLFile (socket) {\n    io.Transport.XHR.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from XHR transport.\n   */\n\n  io.util.inherit(HTMLFile, io.Transport.XHR);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  HTMLFile.prototype.name = 'htmlfile';\n\n  /**\n   * Creates a new Ac...eX `htmlfile` with a forever loading iframe\n   * that can be used to listen to messages. Inside the generated\n   * `htmlfile` a reference will be made to the HTMLFile transport.\n   *\n   * @api private\n   */\n\n  HTMLFile.prototype.get = function () {\n    this.doc = new window[(['Active'].concat('Object').join('X'))]('htmlfile');\n    this.doc.open();\n    this.doc.write('<html></html>');\n    this.doc.close();\n    this.doc.parentWindow.s = this;\n\n    var iframeC = this.doc.createElement('div');\n    iframeC.className = 'socketio';\n\n    this.doc.body.appendChild(iframeC);\n    this.iframe = this.doc.createElement('iframe');\n\n    iframeC.appendChild(this.iframe);\n\n    var self = this\n      , query = io.util.query(this.socket.options.query, 't='+ +new Date);\n\n    this.iframe.src = this.prepareUrl() + query;\n\n    io.util.on(window, 'unload', function () {\n      self.destroy();\n    });\n  };\n\n  /**\n   * The Socket.IO server will write script tags inside the forever\n   * iframe, this function will be used as callback for the incoming\n   * information.\n   *\n   * @param {String} data The message\n   * @param {document} doc Reference to the context\n   * @api private\n   */\n\n  HTMLFile.prototype._ = function (data, doc) {\n    // unescape all forward slashes. see GH-1251\n    data = data.replace(/\\\\\\//g, '/');\n    this.onData(data);\n    try {\n      var script = doc.getElementsByTagName('script')[0];\n      script.parentNode.removeChild(script);\n    } catch (e) { }\n  };\n\n  /**\n   * Destroy the established connection, iframe and `htmlfile`.\n   * And calls the `CollectGarbage` function of Internet Explorer\n   * to release the memory.\n   *\n   * @api private\n   */\n\n  HTMLFile.prototype.destroy = function () {\n    if (this.iframe){\n      try {\n        this.iframe.src = 'about:blank';\n      } catch(e){}\n\n      this.doc = null;\n      this.iframe.parentNode.removeChild(this.iframe);\n      this.iframe = null;\n\n      CollectGarbage();\n    }\n  };\n\n  /**\n   * Disconnects the established connection.\n   *\n   * @returns {Transport} Chaining.\n   * @api public\n   */\n\n  HTMLFile.prototype.close = function () {\n    this.destroy();\n    return io.Transport.XHR.prototype.close.call(this);\n  };\n\n  /**\n   * Checks if the browser supports this transport. The browser\n   * must have an `Ac...eXObject` implementation.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  HTMLFile.check = function (socket) {\n    if (typeof window != \"undefined\" && (['Active'].concat('Object').join('X')) in window){\n      try {\n        var a = new window[(['Active'].concat('Object').join('X'))]('htmlfile');\n        return a && io.Transport.XHR.check(socket);\n      } catch(e){}\n    }\n    return false;\n  };\n\n  /**\n   * Check if cross domain requests are supported.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  HTMLFile.xdomainCheck = function () {\n    // we can probably do handling for sub-domains, we should\n    // test that it's cross domain but a subdomain here\n    return false;\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('htmlfile');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports['xhr-polling'] = XHRPolling;\n\n  /**\n   * The XHR-polling transport uses long polling XHR requests to create a\n   * \"persistent\" connection with the server.\n   *\n   * @constructor\n   * @api public\n   */\n\n  function XHRPolling () {\n    io.Transport.XHR.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from XHR transport.\n   */\n\n  io.util.inherit(XHRPolling, io.Transport.XHR);\n\n  /**\n   * Merge the properties from XHR transport\n   */\n\n  io.util.merge(XHRPolling, io.Transport.XHR);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  XHRPolling.prototype.name = 'xhr-polling';\n\n  /**\n   * Indicates whether heartbeats is enabled for this transport\n   *\n   * @api private\n   */\n\n  XHRPolling.prototype.heartbeats = function () {\n    return false;\n  };\n\n  /** \n   * Establish a connection, for iPhone and Android this will be done once the page\n   * is loaded.\n   *\n   * @returns {Transport} Chaining.\n   * @api public\n   */\n\n  XHRPolling.prototype.open = function () {\n    var self = this;\n\n    io.Transport.XHR.prototype.open.call(self);\n    return false;\n  };\n\n  /**\n   * Starts a XHR request to wait for incoming messages.\n   *\n   * @api private\n   */\n\n  function empty () {};\n\n  XHRPolling.prototype.get = function () {\n    if (!this.isOpen) return;\n\n    var self = this;\n\n    function stateChange () {\n      if (this.readyState == 4) {\n        this.onreadystatechange = empty;\n\n        if (this.status == 200) {\n          self.onData(this.responseText);\n          self.get();\n        } else {\n          self.onClose();\n        }\n      }\n    };\n\n    function onload () {\n      this.onload = empty;\n      this.onerror = empty;\n      self.retryCounter = 1;\n      self.onData(this.responseText);\n      self.get();\n    };\n\n    function onerror () {\n      self.retryCounter ++;\n      if(!self.retryCounter || self.retryCounter > 3) {\n        self.onClose();  \n      } else {\n        self.get();\n      }\n    };\n\n    this.xhr = this.request();\n\n    if (global.XDomainRequest && this.xhr instanceof XDomainRequest) {\n      this.xhr.onload = onload;\n      this.xhr.onerror = onerror;\n    } else {\n      this.xhr.onreadystatechange = stateChange;\n    }\n\n    this.xhr.send(null);\n  };\n\n  /**\n   * Handle the unclean close behavior.\n   *\n   * @api private\n   */\n\n  XHRPolling.prototype.onClose = function () {\n    io.Transport.XHR.prototype.onClose.call(this);\n\n    if (this.xhr) {\n      this.xhr.onreadystatechange = this.xhr.onload = this.xhr.onerror = empty;\n      try {\n        this.xhr.abort();\n      } catch(e){}\n      this.xhr = null;\n    }\n  };\n\n  /**\n   * Webkit based browsers show a infinit spinner when you start a XHR request\n   * before the browsers onload event is called so we need to defer opening of\n   * the transport until the onload event is called. Wrapping the cb in our\n   * defer method solve this.\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  XHRPolling.prototype.ready = function (socket, fn) {\n    var self = this;\n\n    io.util.defer(function () {\n      fn.call(self);\n    });\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('xhr-polling');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n  /**\n   * There is a way to hide the loading indicator in Firefox. If you create and\n   * remove a iframe it will stop showing the current loading indicator.\n   * Unfortunately we can't feature detect that and UA sniffing is evil.\n   *\n   * @api private\n   */\n\n  var indicator = global.document && \"MozAppearance\" in\n    global.document.documentElement.style;\n\n  /**\n   * Expose constructor.\n   */\n\n  exports['jsonp-polling'] = JSONPPolling;\n\n  /**\n   * The JSONP transport creates an persistent connection by dynamically\n   * inserting a script tag in the page. This script tag will receive the\n   * information of the Socket.IO server. When new information is received\n   * it creates a new script tag for the new data stream.\n   *\n   * @constructor\n   * @extends {io.Transport.xhr-polling}\n   * @api public\n   */\n\n  function JSONPPolling (socket) {\n    io.Transport['xhr-polling'].apply(this, arguments);\n\n    this.index = io.j.length;\n\n    var self = this;\n\n    io.j.push(function (msg) {\n      self._(msg);\n    });\n  };\n\n  /**\n   * Inherits from XHR polling transport.\n   */\n\n  io.util.inherit(JSONPPolling, io.Transport['xhr-polling']);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  JSONPPolling.prototype.name = 'jsonp-polling';\n\n  /**\n   * Posts a encoded message to the Socket.IO server using an iframe.\n   * The iframe is used because script tags can create POST based requests.\n   * The iframe is positioned outside of the view so the user does not\n   * notice it's existence.\n   *\n   * @param {String} data A encoded message.\n   * @api private\n   */\n\n  JSONPPolling.prototype.post = function (data) {\n    var self = this\n      , query = io.util.query(\n             this.socket.options.query\n          , 't='+ (+new Date) + '&i=' + this.index\n        );\n\n    if (!this.form) {\n      var form = document.createElement('form')\n        , area = document.createElement('textarea')\n        , id = this.iframeId = 'socketio_iframe_' + this.index\n        , iframe;\n\n      form.className = 'socketio';\n      form.style.position = 'absolute';\n      form.style.top = '0px';\n      form.style.left = '0px';\n      form.style.display = 'none';\n      form.target = id;\n      form.method = 'POST';\n      form.setAttribute('accept-charset', 'utf-8');\n      area.name = 'd';\n      form.appendChild(area);\n      document.body.appendChild(form);\n\n      this.form = form;\n      this.area = area;\n    }\n\n    this.form.action = this.prepareUrl() + query;\n\n    function complete () {\n      initIframe();\n      self.socket.setBuffer(false);\n    };\n\n    function initIframe () {\n      if (self.iframe) {\n        self.form.removeChild(self.iframe);\n      }\n\n      try {\n        // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n        iframe = document.createElement('<iframe name=\"'+ self.iframeId +'\">');\n      } catch (e) {\n        iframe = document.createElement('iframe');\n        iframe.name = self.iframeId;\n      }\n\n      iframe.id = self.iframeId;\n\n      self.form.appendChild(iframe);\n      self.iframe = iframe;\n    };\n\n    initIframe();\n\n    // we temporarily stringify until we figure out how to prevent\n    // browsers from turning `\\n` into `\\r\\n` in form inputs\n    this.area.value = io.JSON.stringify(data);\n\n    try {\n      this.form.submit();\n    } catch(e) {}\n\n    if (this.iframe.attachEvent) {\n      iframe.onreadystatechange = function () {\n        if (self.iframe.readyState == 'complete') {\n          complete();\n        }\n      };\n    } else {\n      this.iframe.onload = complete;\n    }\n\n    this.socket.setBuffer(true);\n  };\n\n  /**\n   * Creates a new JSONP poll that can be used to listen\n   * for messages from the Socket.IO server.\n   *\n   * @api private\n   */\n\n  JSONPPolling.prototype.get = function () {\n    var self = this\n      , script = document.createElement('script')\n      , query = io.util.query(\n             this.socket.options.query\n          , 't='+ (+new Date) + '&i=' + this.index\n        );\n\n    if (this.script) {\n      this.script.parentNode.removeChild(this.script);\n      this.script = null;\n    }\n\n    script.async = true;\n    script.src = this.prepareUrl() + query;\n    script.onerror = function () {\n      self.onClose();\n    };\n\n    var insertAt = document.getElementsByTagName('script')[0];\n    insertAt.parentNode.insertBefore(script, insertAt);\n    this.script = script;\n\n    if (indicator) {\n      setTimeout(function () {\n        var iframe = document.createElement('iframe');\n        document.body.appendChild(iframe);\n        document.body.removeChild(iframe);\n      }, 100);\n    }\n  };\n\n  /**\n   * Callback function for the incoming message stream from the Socket.IO server.\n   *\n   * @param {String} data The message\n   * @api private\n   */\n\n  JSONPPolling.prototype._ = function (msg) {\n    this.onData(msg);\n    if (this.isOpen) {\n      this.get();\n    }\n    return this;\n  };\n\n  /**\n   * The indicator hack only works after onload\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  JSONPPolling.prototype.ready = function (socket, fn) {\n    var self = this;\n    if (!indicator) return fn.call(this);\n\n    io.util.load(function () {\n      fn.call(self);\n    });\n  };\n\n  /**\n   * Checks if browser supports this transport.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  JSONPPolling.check = function () {\n    return 'document' in global;\n  };\n\n  /**\n   * Check if cross domain requests are supported\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  JSONPPolling.xdomainCheck = function () {\n    return true;\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('jsonp-polling');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n\nif (typeof define === \"function\" && define.amd) {\n  define([], function () { return io; });\n}\n})();\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/socket.io-client/dist/socket.io.js\n ** module id = 21\n ** module chunks = 0\n **/","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/timers-browserify/main.js\n ** module id = 22\n ** module chunks = 0\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 23\n ** module chunks = 0\n **/","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    draining = true;\n    var currentQueue;\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        var i = -1;\n        while (++i < len) {\n            currentQueue[i]();\n        }\n        len = queue.length;\n    }\n    draining = false;\n}\nprocess.nextTick = function (fun) {\n    queue.push(fun);\n    if (!draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/process/browser.js\n ** module id = 24\n ** module chunks = 0\n **/"],"sourceRoot":"","file":"respoke.min.js"}
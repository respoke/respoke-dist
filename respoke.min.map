{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///respoke.min.js","webpack:///webpack/bootstrap 1cb2bf30b24e9abb86da","webpack:///./index.js","webpack:///./respoke/respoke.js","webpack:///./respoke/signalingMessage.js","webpack:///./~/airbrake-js/dist/client.js","webpack:///./~/loglevel/lib/loglevel.js","webpack:///./respoke/deps/adapter.js","webpack:///./respoke/event.js","webpack:///./respoke/class.js","webpack:///./~/q/q.js","webpack:///./respoke/client.js","webpack:///./respoke/connection.js","webpack:///./respoke/endpoint.js","webpack:///./respoke/textMessage.js","webpack:///./respoke/group.js","webpack:///./respoke/signalingChannel.js","webpack:///./~/socket.io-client/dist/socket.io.js","webpack:///(webpack)/buildin/module.js","webpack:///./respoke/directConnection.js","webpack:///./respoke/peerConnection.js","webpack:///./respoke/callState.js","webpack:///./~/statechart/lib/statechart.js","webpack:///./respoke/call.js","webpack:///./respoke/localMedia.js","webpack:///./respoke/remoteMedia.js","webpack:///./respoke/conference.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","global","chromeScreenSharingExtensionReady","evt","data","detail","available","respoke","hasChromeExtension","chooseDesktopMedia","params","callback","sourceIdListener","screenSourceId","sourceId","document","removeEventListener","Error","dispatchEvent","extEvent","source","addEventListener","fire","type","log","info","Airbrake","setLevel","levels","WARN","originalFactory","methodFactory","methodName","logLevel","errorReporter","logMethod","window","skipErrorReporting","airbrake","projectId","projectKey","message","push","error","args","Array","prototype","slice","arguments","reporterMessage","join","unshift","apply","EventEmitter","buildNumber","streams","Q","longStackSupport","stackJumpLimit","longStackJumpLimit","stopUnhandledRejectionTracking","instances","needsChromeExtension","chrome","opera","navigator","webkitGetUserMedia","needsFirefoxExtension","webrtcDetectedBrowser","hasFirefoxExtension","warn","isNwjs","gui","process","nwDispatcher","requireNwGui","mediaSources","Screen","Init","createEvent","initCustomEvent","version","Class","Client","Connection","Endpoint","TextMessage","SignalingMessage","Group","SignalingChannel","DirectConnection","PeerConnection","CallState","Call","LocalMedia","RemoteMedia","Conference","connect","client","getClient","undefined","debug","stack","createClient","instanceId","callOnce","func","called","makeGUID","r","chars","split","uuid","rnd","i","Math","random","handlePromise","promise","onSuccess","onError","returnUndef","done","hasUserMedia","getUserMedia","mozGetUserMedia","Function","hasRTCPeerConnection","RTCPeerConnection","webkitRTCPeerConnection","mozRTCPeerConnection","hasWebsocket","WebSocket","webkitWebSocket","MozWebSocket","hasScreenShare","clone","JSON","parse","stringify","isEqual","a","b","aKeys","hasOwnProperty","splice","length","Object","keys","sdpStreamCount","sdp","matches","resolvedMatches","match","forEach","line","sdpHasAudio","indexOf","sdpHasVideo","sdpHasDataChannel","sdpHasSendOnly","sdpHasReceiveOnly","constraintsHasAudio","constraints","audio","constraintsHasVideo","video","constraintsHasScreenShare","mandatory","chromeMediaSource","mediaSource","convertConstraints","defaults","queueFactory","queue","trigger","action","safeAction","item","err","getScreenShareConstraints","convertedConstraints","optional","screenConstraint","isArray","maxWidth","maxHeight","thing","googTemporalLayeredScreencast","getScreenShareMedia","localMediaStreamReceivedHandler","localMedia","ignore","localMediaErrorHandler","deferred","resolve","reject","defer","criteria","element","once","start","rawMessage","that","body","e","fromType","header","fromEndpoint","from","fromConnection","timestamp","target","required","attr","allowed","require","f","t","n","s","o","u","code","l",1,"merge","opts","reporter","_projectId","_projectKey","_host","_context","_params","_env","_session","_processor","_reporters","_filters","processor","addReporter","XMLHttpRequest","setProject","key","setHost","host","addContext","context","setEnvironmentName","envName","environment","addParams","addEnvironment","env","addSession","session","addFilter","filter","defContext","ref","language","sourceMapEnabled","userAgent","location","url","String","_this","name","errInfo","filterFn","j","k","len","len1","notice","ref1","ref2","reporterFn","notifier","errors","_wrapArguments","arg","wrap","fn","airbrakeWrapper","prop","self","__airbrake__","exc","_error","__inner__","./internal/compat","./internal/merge","./processors/stack","./reporters/jsonp","./reporters/xhr",2,"base","obj",3,"jsonifyNotice","truncate","truncateObj","dst","maxLength","floor","json","./truncate",4,"objs","shift",5,"getAttr","value","depth","getPath","nn","seen","index","path","dd","el","val","Boolean","Number","Date","RegExp","toString",6,"rules","typeMessageRe","re","function","file","parseInt","column","evaledRe","mm","columnNumber","cb","backtrace","lines","msg","processorName","rule","uncaughtExcRe","fileName","lineNumber","filename","lineno","colno",7,"cbCount","report","cbName","head","payload","removeScript","script","resp","_","console","encodeURIComponent","getElementsByTagName","createElement","src","removeChild","onload","onerror","appendChild","../internal/jsonify_notice",8,"req","open","setRequestHeader","send","onreadystatechange","readyState","status","responseText","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","definition","realMethod","undefinedType","bindMethod","noop","method","bind","enableLoggingWhenConsoleArrives","level","replaceLoggingMethods","logMethods","persistLevelIfPossible","levelNum","levelName","toUpperCase","localStorage","cookie","loadPersistedLevel","storedLevel","exec","TRACE","DEBUG","INFO","ERROR","SILENT","enableAll","disableAll","_log","noConflict","maybeFixConfiguration","pcConfig","iceServers","urls","attachMediaStream","reattachMediaStream","webrtcDetectedVersion","pcConstraints","RTCSessionDescription","mozRTCSessionDescription","RTCIceCandidate","mozRTCIceCandidate","createIceServer","username","password","iceServer","urlParts","turnUrlParts","credential","createIceServers","stream","mozSrcObject","setTimeout","play","to","result","srcObject","URL","createObjectURL","respokeClass","listenerBuilder","listener","eventType","className","eventList","isInternal","string","listen","invalidEventType","invalidListener","isNotAlreadyAdded","map","count","toRemove","hasListeners","every","bootstrap","uncurryThis","isObject","isStopIteration","exception","object_toString","QReturnValue","makeStackTraceLong","hasStacks","STACK_JUMP_SEPARATOR","stacks","concatedStacks","filterStackString","stackString","desiredLines","isInternalFrame","isNodeFrame","stackLine","getFileNameAndLineNumber","attempt1","attempt2","attempt3","fileNameAndLineNumber","qFileName","qStartingLine","qEndingLine","captureLine","firstLine","deprecate","alternative","Promise","isPromiseAlike","coerce","fulfill","become","newPromise","resolvedPromise","array_reduce","messages","nextTick","promiseDispatch","progressListeners","object_create","op","operands","array_slice","valueOf","nearerValue","nearer","isPromise","inspect","state","substring","reason","notify","progress","progressListener","resolver","TypeError","race","answerPs","then","descriptor","fallback","inspected","when","fulfilled","rejected","progressed","object","isPending","isFulfilled","isRejected","resetUnhandledRejections","unhandledReasons","unhandledRejections","trackUnhandledRejections","trackRejection","emit","runAfter","array_indexOf","reportedUnhandledRejections","untrackRejection","at","atReport","rejection","get","set","rhs","delete","post","thisp","object_keys","master","isDef","dispatch","spread","async","makeGenerator","continuer","verb","StopIteration","generator","errback","spawn","_return","promised","all","promises","pendingCount","snapshot","any","prev","current","onFulfilled","onRejected","onProgress","allResolved","array_map","allSettled","nodeify","nodeback","flush","task","domain","next","enter","runSingle","laterQueue","pop","flushing","isNodeJS","exit","tail","requestTick","setImmediate","MessageChannel","channel","port1","onmessage","requestPortTick","port2","postMessage","reduce","basis","collect","create","Type","object_hasOwnProperty","ReturnValue","Q_DEBUG","makeNodeResolver","passByCopy","x","y","makePromise","_fulfilled","_rejected","newException","_progressed","newValue","threw","tap","fcall","thenResolve","thenReject","getUnhandledReasons","array","del","mapply","mcall","invoke","fapply","fbind","concat","regardless","fail","fin","onUnhandledError","timeout","ms","timeoutId","clearTimeout","delay","nfapply","nodeArgs","nfcall","nfbind","denodeify","baseArgs","nbind","bound","nmapply","npost","nsend","nmcall","ninvoke","saveParameters","clientSettings","developmentMode","enableCallDebugReport","reconnect","actuallyConnect","token","appId","endpointId","signalingChannel","authenticate","presence","setPresence","onCall","onDirectConnection","onJoin","onLeave","onMessage","onConnect","onDisconnect","calls","hangup","signal","onReconnect","addCall","removeCall","checkEndpointForRemoval","groups","group","getMembers","connectionsByGroup","absent","connectionList","conn","endpoints","ept","connectTries","hostname","port","baseURL","resolveEndpointPresence","getPresence","retVal","disconnect","verifyConnected","leaveGroups","isJoined","leave","close","sendPresence","getCall","methods","screenshare","did","web","sip","conference","callParams","switchType","one","remoteEndpoint","caller","callerId","conferenceId","toType","number","uri","setOnline","setOffline","sendMessage","endpoint","getEndpoint","skipPresence","joinConference","recipient","signalOffer","signalParams","signalType","sendSDP","signalAnswer","sessionId","signalConnected","connectionId","sendConnected","signalModify","sendModify","signalCandidate","sendCandidate","signalHangup","sendHangup","signalReport","sendReport","startScreenShare","startCall","startAudioCall","startVideoCall","startPhoneCall","startSIPCall","isConnected","trace","joinGroup","groupList","getGroup","addGroup","addMember","connection","getConnection","newGroup","removeMember","endpt","getGroups","grp","skipCreate","registerPresence","endpointList","onPresence","endpointsToSearch","connections","getEndpoints","startDirectConnection","directConnection","resolvePresence","sendOnly","receiveOnly","needDirectConnection","offerOptions","OfferToReceiveAudio","presenceList","idList","options","sort","indexA","indexB","toConnection","requestConnectionReply","validateConnection","validateMembership","cacheIsValid","leaveGroup","skipEvent","publish","getGroupMembers","list","now","io","performance","getTime","PendingRequests","contents","counter","add","remove","reset","isConnecting","socket","connecting","doOpen","httpMethod","parameters","tokenId","response","appToken","buildResponseError","firstUpper","str","reconnectTimeout","maxReconnectTimeout","user","wsCall","handleResponse","thisHandler","statusCode","request","tries","sendWebsocketRequest","durationMillis","pendingRequests","failWebsocketRequest","logRequest","bodyLength","encodeURI","bodySizeLimit","toLowerCase","objectId","replace","details","headers","App-Token","paramString","makeParamString","xhr","limit","unit","getAllResponseHeaders","getResponseHeader","strings","xhrResponse","pairs","pair","res","requestId","presenceRegistered","routingMethods","handlerQueue",400,401,403,404,409,429,500,"connected","isSendingReport","getToken","newToken","ttl","removeAllListeners","show","removeConferenceParticipant","destroyConference","getConferenceParticipants","participants","par","toRun","saveDeferred","needsToRun","ep","sendACK","sendSignal","signalId","ackedSignalType","debugData","routeSignal","doOffer","doConnected","doModify","doAnswer","doIceCandidates","doBye","doUnknown","addHandler","on","handler","onPubSub","groupMessage","generateConnectHandler","category","pieces","protocol","connectParams","connect timeout","force new connection","sync disconnect on unload","secure","query","knownSignals","pendingRequest","getTurnCredentials","creds","uris","cred","__WEBPACK_AMD_DEFINE_ARRAY__","transports","sockets","uuri","util","parseUri","uniqueUri","Socket","of","parts","addition","chunkQuery","components","part","qs","kv","pageLoaded","load","event","capture","attachEvent","xdomain","XDomainRequest","ua","hasCORS","webkit","importScripts","additional","deep","lastseen","mixin","ctor","ctor2","inherit","intersect","arr","arr2","ret","longest","shortest","toArray","enu","withCredentials","test","iDevice","$events","addListener","removeListener","pos","listeners","parent","nativeJSON","date","d","isFinite","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","quote","escapable","lastIndex","meta","charCodeAt","holder","v","partial","mind","gap","rep","indent","cx","\b","\t","\n","\f","\r","\"","\\","replacer","space","text","reviver","walk","eval","SyntaxError","parser","packets","reasons","advice","encodePacket","packet","ack","adv","ev","ackId","encoded","encodePayload","decoded","regexp","decodePacket","decodePayload","charAt","substr","Transport","sessid","heartbeats","onData","clearCloseTimeout","reconnecting","setCloseTimeout","msgs","onPacket","setHeartbeatTimeout","onHeartbeat","isOpen","closeTimeout","clearTimeouts","reopenTimeout","heartbeat","onOpen","onClose","prepareUrl","scheme","resource","ready","try multiple transports","reconnection delay","reconnection limit","Infinity","reopen delay","max reconnection attempts","auto connect","flash policy port","manualFlush","namespaces","buffer","doBuffer","isXDomain","disconnectSync","empty","SocketNamespace","nsp","$emit","handshake","complete","insertAt","parentNode","insertBefore","getTransport","override","transport","check","xdomainCheck","sessionid","sid","connectTimeoutTimer","remaining","heartbeatTimeout","origTransports","heartbeatTimeoutTimer","setBuffer","flushBuffer","wasConnected","wasConnecting","reconnectionAttempts","reconnectionTimer","maybeReconnect","reconnectionDelay","redoTransports","tryMultiple","maxAttempts","flags","Flag","ackPackets","acks","namespace","lastArg","WS","websocket","onopen","onclose","Flashsocket","flashsocket","__addTask","__tasks","init","WEB_SOCKET_SWF_LOCATION","loadFlashPolicyFile","__initialize","swfobject","getFlashPlayerVersion","major","WEB_SOCKET_DISABLE_AUTO_INITIALIZATION","J","Z","C","aa","X","U","Y","K","O","D","h","T","V","H","setAttribute","q","GetVariable","ab","M","pv","callee","ag","af","callbackFn","success","ae","F","swfVersion","wk","expressInstall","A","ai","width","getAttribute","height","styleclass","align","ah","ac","ad","P","w","z","SetVariable","nodeName","win","mac","E","B","g","R","title","ie","flashvars","style","display","replaceChild","innerHTML","childNodes","nodeType","cloneNode","movie","outerHTML","N","getElementById","I","G","styleSheets","addRule","createTextNode","visibility","L","S","W","platform","parseFloat","plugins","description","mimeTypes","enabledPlugin","w3","detachEvent","top","documentElement","doScroll","registerObject","getObjectById","embedSWF","aj","al","am","ak","an","switchOffAutoHideShow","minor","release","hasFlashPlayerVersion","createSWF","showExpressInstall","removeSWF","createCSS","addDomLoadEvent","addLoadEvent","getQueryParamValue","search","hash","expressInstallCallback","protocols","proxyHost","proxyPort","__id","__nextId","__instances","CONNECTING","bufferedAmount","__events","__flash","CLOSED","CLOSING","useCapture","events","__handleEvent","flashEvent","jsEvent","__createSimpleEvent","decodeURIComponent","__createMessageEvent","Event","initEvent","bubbles","cancelable","MessageEvent","initMessageEvent","OPEN","loadManualPolicyFile","__swfLocation","container","position","__isFlashLite","left","hasPriority","swliveconnect","allowScriptAccess","__onFlashInitialized","setCallerUrl","href","setDebug","WEB_SOCKET_DEBUG","__onFlashEvent","receiveEvents","webSocketId","__log","__error","mimeType","XHR","sendBuffer","stateChange","posting","sendXHR","contentType","usesXDomReq","socketProtocol","isXProtocol","HTMLFile","htmlfile","doc","write","parentWindow","iframeC","iframe","destroy","CollectGarbage","XHRPolling","retryCounter","abort","JSONPPolling","indicator","initIframe","form","iframeId","area","submit","webpackPolyfill","paths","children","listenDataChannel","dataChannel","onDataChannelError","onDataChannelMessage","onDataChannelOpen","onStart","pc","stats","createDataChannel","binaryType","getStats","onStats","MediaStats","accept","answer","skipRemove","removeDirectConnection","isActive","iceCandidates","candidate","signalCandidateOrig","candidatesSent","initOffer","makeOptionsReceiveOnly","makeOptionsSendOnly","createOffer","saveOfferAndSend","OfferToReceiveVideo","OfferToSendVideo","OfferToSendAudio","offerToReceiveVideo","offerToReceiveAudio","offerToSendVideo","offerToSendAudio","MediaStatsParser","peerConnection","interval","stopStats","onIceCandidate","oCan","forceTurn","disableTurn","candidateSendingQueue","onIceConnectionStateChange","iceConnectionState","onNegotiationNeeded","processSendingQueue","can","processReceivingQueue","candidateReceivingQueue","addIceCandidate","candidatesReceived","oSession","sdpsSent","setLocalDescription","sessionDescription","sentSDP","saveAnswerAndSend","callerconnection","listenAnswer","sdpsReceived","sdpExpectedStreamCount","lastSDPString","calleeconnection","setRemoteDescription","newErr","callStoppedReason","listenConnected","listenModify","defModify","isState","toSendHangup","previewLocalMedia","pcOptions","DtlsSrtpKeyAgreement","RtpDataChannels","callStarted","callStopped","callerendpoint","calleeendpoint","os","processOffer","oOffer","hasDataChannel","createAnswer","processedRemoteSDP","servers","onicecandidate","onnegotiationneeded","oniceconnectionstatechange","onaddstream","onremovestream","ondatachannel","getRemoteStreams","getLocalStreams","addStream","sentSignal","startModify","addRemoteCandidate","receivedSDP","Statechart","assert","condition","rejectModify","modifyTimer","clear","clearReceiveAnswerTimer","receiveAnswerTimer","needToObtainMedia","hasLocalMedia","needToApproveDirectConnection","automaticOffering","hasListener","createTimer","time","timer","allTimers","fsm","answerTimer","connectionTimer","oldRole","answerTimeout","receiveAnswerTimeout","connectionTimeout","modifyTimeout","nontransitionEvents","hasLocalMediaApproval","receivedBye","isAnswered","rejectEvent","guard","hasMedia","hangupReason","hangupEvent","signalBye","stateParams","initialState","states","idle","initiate","receiveLocalMedia","receiveOffer","negotiatingContainer","modify","preparing","entry","isModifying","approve","gettingMedia","approvingDeviceAccess","approvingContent","offeringContainer","sentOffer","offering","receiveRemoteMedia","receiveAnswer","connectingContainer","modifyingContainer","modifying","connectedContainer","receive","terminatedContainer","terminated","run","debugOff","getState","currentState","oldState","newState","modifyingStates","QState","QEvent","assertion","opt","construct","myState","mySource","Initial","newInitialState","handled","TOP","flatten","anEventOrNull","equals","superstate","stateOrName","_topState","statesTable","_flatten","selectState","stateName","anEvent","act","handleUnhandledEvent","aStateName","transition","aStateOrName","enterVia","lca","entryLength","idx","QEventEmpty","QEventEntry","QEventExit","QEventInit","defMedia","actuallyAddDirectConnection","onLocalMedia","onHangup","onAllow","onAnswer","onApprove","onMute","onRequestingMedia","videoLocalElement","videoRemoteElement","outgoingMediaStreams","updateOutgoingMediaEstimate","incomingMediaStreams","updateIncomingMediaEstimate","buildLocalMedia","constraint","used","streamReceivedHandler","onRemoteStreamRemoved","onRemoteStreamAdded","remoteMedia","useEl","hasAudio","hasVideo","temporary","getAudioTracks","getVideoTracks","muted","doAddVideo","skipModify","setSDP","setConstraints","listenOffer","outgoingMedia","onModifyAccept","dc","onModifyReject","listenHangup","defineProperty","configurable","enumerable","videoIsMuted","audioIsMuted","getLocalElement","getRemoteElement","addVideo","addAudio","getDirectConnection","addDirectConnection","closeDirectConnection","doHangup","stop","toggleVideo","unmuteVideo","muteVideo","toggleAudio","unmuteAudio","muteAudio","local","remote","mediaPromises","getStream","theConstraints","sConstraints","chromeMediaSourceId","removeStream","toRemoveIndex","onReceiveUserMedia","theStream","allowTimer","aStream","numPc","autoplay","requestMedia","requestingScreenShare","useFakeMedia","fake","screenShareSource","onUserMediaError","errorMessage","isVideoMuted","track","enabled","isAudioMuted","onTopic","onPresenter","eventName","getParticipants","removeParticipant"],"mappings":"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","file":"respoke.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"respoke\"] = factory();\n\telse\n\t\troot[\"respoke\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","/*! Copyright (c) 2014, Digium, Inc. All Rights Reserved. MIT Licensed.For details and documentation visit https://www.respoke.io */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"respoke\"] = factory();\n\telse\n\t\troot[\"respoke\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";\n\t/*jshint bitwise: false*/\n\t\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar Airbrake = __webpack_require__(3);\n\tvar log = __webpack_require__(4);\n\tlog.setLevel(log.levels.WARN);\n\t\n\tvar originalFactory = log.methodFactory;\n\tlog.methodFactory = function logMethodFactory(methodName, logLevel) {\n\t    var logMethod = originalFactory(methodName, logLevel);\n\t    var errorReporter;\n\t\n\t    if (!window.skipErrorReporting && methodName === 'error') {\n\t        var airbrake = new Airbrake({\n\t            projectId: '98133',\n\t            projectKey: 'cd3e085acc5e554658ebcdabd112a6f4'\n\t        });\n\t        errorReporter = function (message) {\n\t            airbrake.push({ error: { message: message } });\n\t        };\n\t    } else {\n\t        errorReporter = function () { };\n\t    }\n\t\n\t    return function (message) {\n\t        var args = Array.prototype.slice.call(arguments);\n\t        var reporterMessage = args.join(' ');\n\t\n\t        args.unshift('[Respoke]');\n\t        logMethod.apply(this, args);\n\t        errorReporter(reporterMessage);\n\t    };\n\t};\n\t\n\t__webpack_require__(5);\n\t\n\t/**\n\t * `respoke` is a global static class.\n\t *\n\t *\n\t * Include the [latest version](https://cdn.respoke.io/respoke.min.js) or\n\t * [choose a previous release](http://cdn.respoke.io/list.html).\n\t *\n\t * Or use `npm install --save respoke`.\n\t *\n\t * Interact with Respoke primarily via [`respoke.Client`](respoke.Client.html):\n\t *\n\t *      var client = respoke.createClient();\n\t *\n\t *\n\t * **Development mode without brokered auth**\n\t *\n\t *      var client = respoke.createClient({\n\t *          appId: \"XXXXXXX-my-app-id-XXXXXX\",\n\t *          developmentMode: true,\n\t *          endpointId: \"daveops\"\n\t *      });\n\t *\n\t *      client.listen('connect', function () {\n\t *          console.log('connected to respoke!');\n\t *      });\n\t *\n\t *      client.listen('error', function (err) {\n\t *          console.error('Connection to Respoke failed.', err);\n\t *      });\n\t *\n\t *      client.connect();\n\t *\n\t *\n\t * **Production mode with brokered auth**\n\t *\n\t *      var client = respoke.createClient();\n\t *\n\t *      client.listen('connect', function () {\n\t *          console.log('connected to respoke!');\n\t *      });\n\t *\n\t *      client.listen('error', function (err) {\n\t *          console.error('Connection to Respoke failed.', err);\n\t *      });\n\t *\n\t *      // Respoke auth token obtained by your server.\n\t *      // This is how you control who can connect to Respoke app.\n\t *      // See API docs for POST [base]/tokens\n\t *      var tokenId = \"XXXX-XXXX-brokered-auth-token-XXXXX\";\n\t *\n\t *      // connect to respoke with the token\n\t *      client.connect({\n\t *          token: tokenId\n\t *      });\n\t *\n\t *      // fetch a new token from your server if it expires\n\t *      client.listen('disconnect', function (evt) {\n\t *          // fetch another token from your server.\n\t *          var newTokenId = \"XXXX-XXXX-brokered-auth-token2-XXXXX\";\n\t *          client.connect({\n\t *              token: newTokenId\n\t *          });\n\t *      });\n\t *\n\t *\n\t *\n\t * ### Event listeners vs callback handlers\n\t *\n\t * There are two ways to attach listeners. It is highly recommended that you choose one pattern\n\t * and stick to it throughout your app.\n\t *\n\t * For every `event-name`, there is a corresponding callback `onEventName`.\n\t *\n\t * **With a listener**\n\t *\n\t *      var client = respoke.createClient();\n\t *      client.listen('connect', function () { });\n\t *\n\t * **or with a callback**\n\t *\n\t *      var client = respoke.createClient({\n\t *          // other options go here\n\t *\n\t *          onConnect: function () { }\n\t *      });\n\t *\n\t *\n\t * @namespace respoke\n\t * @class respoke\n\t * @global\n\t * @link https://cdn.respoke.io/respoke.min.js\n\t */\n\t\n\tvar EventEmitter = __webpack_require__(6);\n\tvar respoke = module.exports = EventEmitter({\n\t    buildNumber: 'v1.35.0',\n\t    streams: [],\n\t    Q: __webpack_require__(8)\n\t});\n\t\n\trespoke.Q.longStackSupport = true;\n\trespoke.Q.stackJumpLimit = 5;\n\trespoke.Q.longStackJumpLimit = 20;\n\trespoke.Q.stopUnhandledRejectionTracking();\n\t\n\t/**\n\t * A map of respoke.Client instances available for use. This is useful if you would like to separate some\n\t * functionality of your app into a separate Respoke app which would require a separate appId.\n\t * @type {boolean}\n\t */\n\trespoke.instances = {};\n\t\n\t/**\n\t * Indicate whether the user's browser is Chrome and requires the Respoke Chrome extension to do screen sharing.\n\t * @type {boolean}\n\t * @private\n\t */\n\trespoke.needsChromeExtension = !!(window.chrome && !window.opera && navigator.webkitGetUserMedia);\n\t\n\t/**\n\t * Indicate whether the user's browser is Firefox and requires the Respoke Firefox extension to do screen sharing.\n\t * @type {boolean}\n\t * @private\n\t */\n\trespoke.needsFirefoxExtension = window.webrtcDetectedBrowser === 'firefox';\n\t\n\t/**\n\t * Indicate whether the user has a Respoke Chrome extension installed and running correcty on this domain.\n\t * @type {boolean}\n\t * @private\n\t */\n\trespoke.hasChromeExtension = false;\n\t\n\t/**\n\t * Indicate whether the user has a Respoke Firefox extension installed and running correcty on this domain.\n\t * @type {boolean}\n\t * @private\n\t */\n\trespoke.hasFirefoxExtension = false;\n\t\n\t/**\n\t * This method will be overridden in the case that an extension or plugin is available for screen sharing.\n\t *\n\t * @static\n\t * @private\n\t * @memberof respoke\n\t */\n\trespoke.chooseDesktopMedia = function () {\n\t    log.warn(\"Screen sharing is not implemented for this browser.\");\n\t};\n\t\n\t/**\n\t * Indicate whether we are dealing with node-webkit, and expose chooseDesktopMedia if so\n\t * @type {boolean}\n\t * @private\n\t */\n\trespoke.isNwjs = (function () {\n\t    var gui;\n\t    var isNwjs = !!((typeof process !== 'undefined') && (typeof global !== 'undefined') &&\n\t        global.window && global.window.nwDispatcher);\n\t\n\t    if (isNwjs) {\n\t        // expose native node-webkit chooseDesktopMedia (requires nw.js 0.12+)\n\t        gui = window.nwDispatcher.requireNwGui();\n\t        respoke.chooseDesktopMedia = function (data, callback) {\n\t            // make data param optional\n\t            if (!callback && (typeof data === 'function')) {\n\t                callback = data;\n\t                data = null;\n\t            }\n\t\n\t            /*!\n\t             * mediaSources can be one of 'window', 'screen', or 'tab', or an array with multiples\n\t             * https://developer.chrome.com/extensions/desktopCapture\n\t             */\n\t            var mediaSources = data && data.source ? [data.source] : ['window', 'screen'];\n\t\n\t            gui.Screen.Init();\n\t            gui.Screen.chooseDesktopMedia(mediaSources, function (sourceId) {\n\t                callback({\n\t                    type: 'respoke-source-id',\n\t                    sourceId: sourceId\n\t                });\n\t            });\n\t        };\n\t    }\n\t\n\t    return isNwjs;\n\t})();\n\t\n\t/**\n\t * Create an Event. This is used in the Chrome/Firefox extensions to communicate between the library and extension.\n\t * @type {function}\n\t * @private\n\t */\n\trespoke.extEvent = function (type, data) {\n\t    var evt = document.createEvent(\"CustomEvent\");\n\t    evt.initCustomEvent(type, true, true, data);\n\t    return evt;\n\t};\n\t\n\t/**\n\t * `\"v0.0.0\"`\n\t *\n\t * The respoke.min.js version.\n\t *\n\t * Past versions can be found at [cdn.respoke.io/list.html](http://cdn.respoke.io/list.html)\n\t * @type {string}\n\t */\n\trespoke.version = respoke.buildNumber + \"\";\n\t\n\trespoke.log = log;\n\trespoke.Class = __webpack_require__(7);\n\trespoke.EventEmitter = EventEmitter;\n\trespoke.Client = __webpack_require__(9);\n\trespoke.Connection = __webpack_require__(10);\n\trespoke.Endpoint = __webpack_require__(11);\n\trespoke.TextMessage = __webpack_require__(12);\n\trespoke.SignalingMessage = __webpack_require__(2);\n\trespoke.Group = __webpack_require__(13);\n\trespoke.SignalingChannel = __webpack_require__(14);\n\trespoke.DirectConnection = __webpack_require__(17);\n\trespoke.PeerConnection = __webpack_require__(18);\n\trespoke.CallState = __webpack_require__(19);\n\trespoke.Call = __webpack_require__(21);\n\trespoke.LocalMedia = __webpack_require__(22);\n\trespoke.RemoteMedia = __webpack_require__(23);\n\trespoke.Conference = __webpack_require__(24);\n\t\n\t/*!\n\t * Get information from the Respoke Screen Sharing Chrome extension if it is installed.\n\t */\n\tfunction chromeScreenSharingExtensionReady(evt) {\n\t    var data = evt.detail;\n\t    if (data.available !== true) {\n\t        return;\n\t    }\n\t\n\t    respoke.hasChromeExtension = true;\n\t    respoke.chooseDesktopMedia = function (params, callback) {\n\t        if (!callback) {\n\t            throw new Error(\"Can't choose desktop media without callback parameter.\");\n\t        }\n\t\n\t        function sourceIdListener(evt) {\n\t            var data = evt.detail;\n\t\n\t            respoke.screenSourceId = data.sourceId;\n\t            callback(data);\n\t            document.removeEventListener(\"respoke-source-id\", sourceIdListener);\n\t        }\n\t\n\t        document.dispatchEvent(respoke.extEvent('ct-respoke-source-id', {\n\t            source: params.source ? [params.source] : ['screen', 'window']\n\t        }));\n\t\n\t        document.addEventListener(\"respoke-source-id\", sourceIdListener);\n\t    };\n\t\n\t    respoke.fire('extension-loaded', {\n\t        type: 'screen-sharing'\n\t    });\n\t\n\t    log.info(\"Respoke Screen Share Chrome extension available for use.\");\n\t}\n\t\n\t// TODO: remove 'respoke-available' event listener on next major version bump\n\tdocument.addEventListener('respoke-available', chromeScreenSharingExtensionReady);\n\tdocument.addEventListener('respoke-chrome-screen-sharing-available', chromeScreenSharingExtensionReady);\n\tdocument.addEventListener('respoke-firefox-screen-sharing-available', function (evt) {\n\t\n\t    var data = evt.detail;\n\t    if (data !== 'available') {\n\t        return;\n\t    }\n\t\n\t    respoke.hasFirefoxExtension = true;\n\t\n\t    respoke.fire('extension-loaded', {\n\t        type: 'screen-sharing'\n\t    });\n\t\n\t    log.info(\"Respoke Screen Share Firefox extension available for use.\");\n\t});\n\t\n\t/**\n\t * This is one of two possible entry points for interating with the library.\n\t *\n\t * This method creates a new Client object\n\t * which represents your user's connection to your Respoke app.\n\t *\n\t * This method **automatically calls client.connect(params)** after the client is created.\n\t *\n\t * @static\n\t * @memberof respoke\n\t * @param {object} params Parameters to the respoke.Client constructor.\n\t * @param {string} [params.appId]\n\t * @param {string} [params.baseURL]\n\t * @param {string} [params.token]\n\t * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n\t * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n\t * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t * operation and will limit the services you will be able to use.\n\t * @param {boolean} [params.reconnect=false] - Whether or not to automatically reconnect to the Respoke service\n\t * when a disconnect occurs.\n\t * @param {function} [params.onSuccess] - Success handler for this invocation of this method only.\n\t * @param {function} [params.onError] - Error handler for this invocation of this method only.\n\t * @param {function} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t * @param {function} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n\t * @param {function} [params.onMessage] - Callback for when any message is received from anywhere on the system.\n\t * @param {function} [params.onDisconnect] - Callback for Client disconnect.\n\t * @param {function} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n\t * @param {function} [params.onCall] - Callback for when this client's user receives a call.\n\t * @param {function} [params.onDirectConnection] - Callback for when this client's user receives a request for a\n\t * direct connection.\n\t * @param {boolean} [params.enableCallDebugReport=true] - Optional flag defaulting to true which allows sending\n\t * debugging information.\n\t * @returns {respoke.Client}\n\t */\n\trespoke.connect = function (params) {\n\t    var client = respoke.Client(params);\n\t    client.connect(params);\n\t    return client;\n\t};\n\t\n\t/**\n\t * Getter for the respoke client.\n\t *\n\t * You can have more than one active client, so this method provides a way to retrieve a specific instance.\n\t *\n\t * @static\n\t * @memberof respoke\n\t * @param {number} id The Client ID.\n\t * @returns {respoke.Client}\n\t */\n\trespoke.getClient = function (id) {\n\t    if (id === undefined) {\n\t        log.debug(\"Can't call getClient with no client ID.\", new Error().stack);\n\t    }\n\t    if (!respoke.instances[id]) {\n\t        log.debug(\"No client instance with id\", id);\n\t    }\n\t    return respoke.instances[id];\n\t};\n\t\n\t/**\n\t * This is one of two possible entry points for interating with the library.\n\t *\n\t * This method creates a new Client object which represents your user's connection to your Respoke app.\n\t *\n\t * It **does NOT automatically call the client.connect() method** after the client is created.\n\t *\n\t * The `params` argument is the same as `respoke.connect(params)`.\n\t *\n\t * @static\n\t * @memberof respoke\n\t * @param {object} params Parameters to respoke.Client - same as respoke.connect()\n\t * @returns {respoke.Client}\n\t */\n\trespoke.createClient = function (params) {\n\t    var client;\n\t    params = params || {};\n\t    if (params.instanceId) {\n\t        client = respoke.getClient(params.instanceId);\n\t        if (client) {\n\t            return client;\n\t        }\n\t    }\n\t    return respoke.Client(params);\n\t};\n\t\n\t/**\n\t * Build a closure from a listener that will ensure the listener can only be called once.\n\t * @static\n\t * @private\n\t * @memberof respoke\n\t * @param {function} func\n\t * @return {function}\n\t */\n\trespoke.callOnce = function (func) {\n\t    return (function () {\n\t        var called = false;\n\t        return function () {\n\t            if (called === false) {\n\t                func.apply(null, arguments);\n\t                called = true;\n\t            }\n\t        };\n\t    })();\n\t};\n\t\n\t/**\n\t * @static\n\t * @private\n\t * @memberof respoke\n\t * @returns {number}\n\t */\n\trespoke.makeGUID = function () {\n\t    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n\t    var uuid = new Array(36);\n\t    var rnd = 0;\n\t    var r;\n\t    for (var i = 0; i < 36; i += 1) {\n\t        if (i === 8 || i === 13 ||  i === 18 || i === 23) {\n\t            uuid[i] = '-';\n\t        } else if (i === 14) {\n\t            uuid[i] = '4';\n\t        } else {\n\t            if (rnd <= 0x02) {\n\t                rnd = 0x2000000 + (Math.random() * 0x1000000) | 0;\n\t            }\n\t            r = rnd & 0xf;\n\t            rnd = rnd >> 4;\n\t            uuid[i] = chars[(i === 19) ? (r & 0x3) | 0x8 : r];\n\t        }\n\t    }\n\t    return uuid.join('');\n\t};\n\t\n\t/**\n\t * This method is used internally to attach handlers to promises that are returned by many methods in the library.\n\t * It's not recommended that this method be used by developers and apps.\n\t * @private\n\t * @static\n\t * @memberof respoke\n\t * @param {Promise} promise\n\t * @param {function} onSuccess\n\t * @param {function} onError\n\t * @returns {Promise|undefined}\n\t */\n\trespoke.handlePromise = function (promise, onSuccess, onError) {\n\t    var returnUndef = false;\n\t    if (onSuccess || onError) {\n\t        returnUndef = true;\n\t    }\n\t\n\t    onSuccess = typeof onSuccess === 'function' ? onSuccess : function () {};\n\t    onError = typeof onError === 'function' ? onError : function () {};\n\t    promise.done(onSuccess, onError);\n\t    return (returnUndef ? undefined : promise);\n\t};\n\t\n\t/**\n\t * Does the browser support `UserMedia`?\n\t * @static\n\t * @memberof respoke\n\t * @returns {boolean}\n\t */\n\trespoke.hasUserMedia = function () {\n\t    return (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia) instanceof Function;\n\t};\n\t\n\t/**\n\t * Does the browser support `RTCPeerConnection`?\n\t * @static\n\t * @memberof respoke\n\t * @returns {boolean}\n\t */\n\trespoke.hasRTCPeerConnection = function () {\n\t    return (window.RTCPeerConnection || window.webkitRTCPeerConnection ||\n\t            window.mozRTCPeerConnection) instanceof Function;\n\t};\n\t\n\t/**\n\t * Does the browser support `WebSocket`?\n\t * @static\n\t * @memberof respoke\n\t * @returns {boolean}\n\t */\n\trespoke.hasWebsocket = function () {\n\t    return (window.WebSocket || window.webkitWebSocket || window.MozWebSocket) instanceof Function;\n\t};\n\t\n\t/**\n\t * Does the browser have Screen Sharing enabled via browser extensions?\n\t * @static\n\t * @memberof respoke\n\t * @returns {boolean}\n\t */\n\trespoke.hasScreenShare = function () {\n\t    return respoke.hasChromeExtension || respoke.hasFirefoxExtension;\n\t};\n\t\n\t/**\n\t * Clone an object.\n\t * @static\n\t * @memberof respoke\n\t * @private\n\t * @param {Object} source - The object to clone\n\t * @returns {Object}\n\t */\n\trespoke.clone = function (source) {\n\t    if (source) {\n\t        return JSON.parse(JSON.stringify(source));\n\t    }\n\t    return source;\n\t};\n\t\n\t/**\n\t * Compares two objects for equality\n\t * @static\n\t * @memberof respoke\n\t * @private\n\t * @param {Object} a\n\t * @param {Object} b\n\t * @returns {boolean}\n\t */\n\trespoke.isEqual = function (a, b) {\n\t    var aKeys;\n\t    var i;\n\t\n\t    //check if arrays\n\t    if (a && b && a.hasOwnProperty('length') && b.hasOwnProperty('length') && a.splice && b.splice) {\n\t        if (a.length !== b.length) {\n\t            //short circuit if arrays are different length\n\t            return false;\n\t        }\n\t\n\t        for (i = 0; i < a.length; i += 1) {\n\t            if (!respoke.isEqual(a[i], b[i])) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t\n\t    if (typeof a === 'object' && typeof b === 'object' && Object.keys(a).length === Object.keys(b).length) {\n\t        aKeys = Object.keys(a);\n\t        for (i = 0; i < aKeys.length; i += 1) {\n\t            if (!respoke.isEqual(a[aKeys[i]], b[aKeys[i]])) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t\n\t    return a === b;\n\t};\n\t\n\t/**\n\t * Count the number of MediaStreams indicated by the SDP\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {number}\n\t * @private\n\t */\n\trespoke.sdpStreamCount = function (sdp) {\n\t    var matches;\n\t    var resolvedMatches = {};\n\t\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasAudio called with no parameters.\");\n\t    }\n\t\n\t    matches = sdp.match(/mslabel:(.*)/gi);\n\t\n\t    if (!matches) {\n\t        return 0;\n\t    }\n\t\n\t    matches.forEach(function (line) {\n\t        resolvedMatches[line] = true;\n\t    });\n\t    return Object.keys(resolvedMatches).length;\n\t};\n\t\n\t/**\n\t * Does the sdp indicate an audio stream?\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.sdpHasAudio = function (sdp) {\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasAudio called with no parameters.\");\n\t    }\n\t    return (sdp.indexOf('m=audio') !== -1 && sdp.indexOf('a=recvonly') === -1);\n\t};\n\t\n\t/**\n\t * Does the sdp indicate a video stream?\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.sdpHasVideo = function (sdp) {\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasVideo called with no parameters.\");\n\t    }\n\t    return (sdp.indexOf('m=video') !== -1 && sdp.indexOf('a=recvonly') === -1);\n\t};\n\t\n\t/**\n\t * Does the sdp indicate a data channel?\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.sdpHasDataChannel = function (sdp) {\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasDataChannel called with no parameters.\");\n\t    }\n\t    return sdp.indexOf('m=application') !== -1;\n\t};\n\t\n\t/**\n\t * Does the sdp indicate the creator is sendOnly?\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.sdpHasSendOnly = function (sdp) {\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasSendOnly called with no parameters.\");\n\t    }\n\t    return sdp.indexOf('a=sendonly') !== -1;\n\t};\n\t\n\t/**\n\t * Does the sdp indicate the creator is receiveOnly?\n\t * @static\n\t * @memberof respoke\n\t * @params {string}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.sdpHasReceiveOnly = function (sdp) {\n\t    if (!sdp) {\n\t        throw new Error(\"respoke.sdpHasReceiveOnly called with no parameters.\");\n\t    }\n\t    return sdp.indexOf('a=recvonly') !== -1;\n\t};\n\t\n\t/**\n\t * Do the constraints indicate an audio stream?\n\t * @static\n\t * @memberof respoke\n\t * @params {RTCConstraints}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.constraintsHasAudio = function (constraints) {\n\t    if (!constraints) {\n\t        throw new Error(\"respoke.constraintsHasAudio called with no parameters.\");\n\t    }\n\t    return (constraints.audio === true);\n\t};\n\t\n\t/**\n\t * Does the constraints indicate a video stream?\n\t * @static\n\t * @memberof respoke\n\t * @params {RTCConstraints}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.constraintsHasVideo = function (constraints) {\n\t    if (!constraints) {\n\t        throw new Error(\"respoke.constraintsHasVideo called with no parameters.\");\n\t    }\n\t    return (constraints.video === true || typeof constraints.video === 'object');\n\t};\n\t\n\t/**\n\t * Does the constraints indicate a screenshare?\n\t * @static\n\t * @memberof respoke\n\t * @params {RTCConstraints}\n\t * @returns {boolean}\n\t * @private\n\t */\n\trespoke.constraintsHasScreenShare = function (constraints) {\n\t    if (!constraints) {\n\t        throw new Error(\"respoke.constraintsHasScreenShare called with no parameters.\");\n\t    }\n\t\n\t    return (constraints.video && constraints.video.mandatory &&\n\t            (constraints.video.mandatory.chromeMediaSource || constraints.video.mediaSource));\n\t};\n\t\n\t/**\n\t * Convert old-style constraints parameter into a constraints array.\n\t * @static\n\t * @memberof respoke\n\t * @params {Array<RTCConstraints>|RTCConstraints} [constraints]\n\t * @params {Array<RTCConstraints>} [defaults]\n\t * @returns {Array<RTCConstraints>}\n\t * @private\n\t */\n\trespoke.convertConstraints = function (constraints, defaults) {\n\t    constraints = constraints || [];\n\t    defaults = defaults || [];\n\t\n\t    if (!constraints.splice) {\n\t        if (typeof constraints === 'object') {\n\t            constraints = [constraints];\n\t        } else {\n\t            constraints = [];\n\t        }\n\t    }\n\t\n\t    if (constraints.length === 0 && defaults.length > 0) {\n\t        return defaults;\n\t    }\n\t\n\t    return constraints;\n\t};\n\t\n\t/**\n\t * Queue items until a trigger is called, then process them all with an action. Before trigger, hold items for\n\t * processing. After trigger, process new items immediately.\n\t * @static\n\t * @memberof respoke\n\t * @returns {Array}\n\t * @private\n\t */\n\trespoke.queueFactory = function () {\n\t    var queue = [];\n\t    // action replaces Array.push when trigger is called. Thrown errors will be caught and logged.\n\t    queue.trigger = function (action) {\n\t        if (!action) {\n\t            throw new Error(\"Trigger function requires an action parameter.\");\n\t        }\n\t\n\t        function safeAction(item) {\n\t            try {\n\t                action(item);\n\t            } catch (err) {\n\t                log.error(\"Error calling queue action.\", err);\n\t            }\n\t        }\n\t        queue.forEach(safeAction);\n\t        queue.length = 0;\n\t        queue.push = safeAction;\n\t    };\n\t\n\t    return queue;\n\t};\n\t\n\t/**\n\t * Retrieve browser-specific WebRTC getUserMedia constraints needed to start a screen sharing call.\n\t *\n\t * @memberof respoke\n\t * @static\n\t * @param {object} [params]\n\t * @param {string} [params.source] The media source name to pass to firefox\n\t * @param {RTCConstraints|Array<RTCConstraints>} [params.constraints] constraints to use as a base\n\t * @returns {Array<RTCConstraints>}\n\t * @private\n\t */\n\trespoke.getScreenShareConstraints = function (params) {\n\t    params = params || {};\n\t    var convertedConstraints = respoke.convertConstraints(params.constraints, [{\n\t        audio: true,\n\t        video: {},\n\t        mandatory: {},\n\t        optional: []\n\t    }]);\n\t\n\t    var screenConstraint = convertedConstraints[0];\n\t    screenConstraint.audio = false;\n\t    screenConstraint.video = typeof screenConstraint.video === 'object' ? screenConstraint.video : {};\n\t\n\t    if (respoke.needsChromeExtension || respoke.isNwjs) {\n\t        screenConstraint.audio = false;\n\t        screenConstraint.video.optional = Array.isArray(screenConstraint.video.optional) ?\n\t            screenConstraint.video.optional : [];\n\t        screenConstraint.video.mandatory = typeof screenConstraint.video.mandatory === 'object' ?\n\t            screenConstraint.video.mandatory : {};\n\t        screenConstraint.video.mandatory.chromeMediaSource = 'desktop';\n\t        screenConstraint.video.mandatory.maxWidth = typeof screenConstraint.video.mandatory.maxWidth === 'number' ?\n\t            screenConstraint.video.mandatory.maxWidth : 2000;\n\t        screenConstraint.video.mandatory.maxHeight = typeof screenConstraint.video.mandatory.maxHeight === 'number' ?\n\t            screenConstraint.video.mandatory.maxHeight : 2000;\n\t\n\t        if (screenConstraint.video.optional.length > 0) {\n\t            screenConstraint.video.optional.forEach(function (thing) {\n\t                thing.googTemporalLayeredScreencast = true;\n\t            });\n\t        } else {\n\t            screenConstraint.video.optional[0] = {\n\t                googTemporalLayeredScreencast: true\n\t            };\n\t        }\n\t    } else {\n\t        // firefox, et. al.\n\t        screenConstraint.video.mediaSource = params.source || 'screen';\n\t    }\n\t\n\t    return convertedConstraints;\n\t};\n\t\n\t/**\n\t * Retrieve a started instance of `respoke.LocalMedia` containing a screen share stream. Useful if you\n\t * want to prepare the stream prior to starting a screen share.\n\t *\n\t *     respoke.getScreenShareMedia().then(function (localMedia) {\n\t *         document.getElementById('#video').appendChild(localMedia.element);\n\t *         group.listen('join', function (evt) {\n\t *             evt.connection.startScreenShare({\n\t *                 outgoingMedia: localMedia\n\t *             });\n\t *         });\n\t *     }).catch(function (err) {\n\t *         console.log(err);\n\t *     });\n\t *\n\t * @static\n\t * @memberof respoke\n\t * @param {object} params\n\t * @param {string} [params.source] - The source you would like to use for your screen share. Values vary by browser.\n\t *  In Chrome, acceptable values are one of 'screen', 'window', or 'tab'.\n\t *  In Firefox, acceptable values are one of 'screen', 'window', or 'application'.\n\t * @param {RTCConstraints|Array<RTCConstraints>} [params.constraints] - constraints to use as a base\n\t * @param {HTMLVideoElement} [params.element] - Pass in an optional html video element to have local\n\t *  video attached to it.\n\t * @param {function} [params.onSuccess] Upon success, called with instance of `respoke.LocalMedia`\n\t * @param {function} [params.onError] Upon failure, called with the error that occurred.\n\t * @returns {Promise|undefined}\n\t * @private\n\t */\n\trespoke.getScreenShareMedia = function (params) {\n\t    params = params || {};\n\t\n\t    var deferred = respoke.Q.defer();\n\t\n\t    var criteria = {\n\t        source: params.source,\n\t        constraints: respoke.clone(params.constraints)\n\t    };\n\t\n\t    var localMedia = respoke.LocalMedia({\n\t        hasScreenShare: true,\n\t        constraints: respoke.getScreenShareConstraints(criteria)[0],\n\t        source: params.source,\n\t        element: params.element\n\t    });\n\t\n\t    function localMediaStreamReceivedHandler() {\n\t        localMedia.ignore('error', localMediaErrorHandler);\n\t        deferred.resolve(localMedia);\n\t    }\n\t\n\t    function localMediaErrorHandler(evt) {\n\t        localMedia.ignore('stream-received', localMediaStreamReceivedHandler);\n\t        deferred.reject(evt);\n\t    }\n\t\n\t    localMedia.once('stream-received', localMediaStreamReceivedHandler);\n\t    localMedia.once('error', localMediaErrorHandler);\n\t    localMedia.start();\n\t\n\t    return respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t};\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\t/**\n\t * A signaling message and the information needed to route it.\n\t * @class respoke.SignalingMessage\n\t * @constructor\n\t * @param {object} params\n\t * @param {string} [params.fromEndpoint] - If sending, the endpoint ID of the recipient\n\t * @param {string} [params.fromConnection] - If sending, the connection ID of the recipient\n\t * @param {string} [params.connectionId] - The connectionId of the endpoint whose answer signal has been accepted.\n\t * @param {string} [params.signal] - If sending, a message to send\n\t * @param {respoke.Endpoint} [params.recipient]\n\t * @param {string} [params.signalType]\n\t * @param {string} [params.sessionId] - A globally unique ID to identify this call.\n\t * @param {string} [params.target] - Either 'call' or 'directConnection', TODO remove the need for this.\n\t * @param {string} [params.callerId] - Human readable caller ID. Not implemented.\n\t * @param {RTCSessionDescription} [params.sdp]\n\t * @param {Array<RTCIceCandidate>} [params.iceCandidates]\n\t * @param {object} [params.offering] - Object describing the media we're offering to send the remote party in a more\n\t * usable way than SDP. Not implemented.\n\t * @param {object} [params.requesting] - Object describing the media we're requesting from the remote party in a more\n\t * usable way than SDP. Not implemented.\n\t * @param {string} [params.reason] - Human readable reason for hanging up.\n\t * @param {string} [params.error] - String indicating that a previous signal was malformed or received in the wrong\n\t * state. Not implemented.\n\t * @param {string} [params.status] - \"Ringing\". Not implemented.\n\t * @param {object} [params.rawMessage] - If receiving, the parsed JSON we got from the server\n\t * @private\n\t * @returns {respoke.SignalingMessage}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = {};\n\t    /**\n\t     * Attributes without which we cannot build a signaling message.\n\t     * @memberof! respoke.SignalingMessage\n\t     * @name required\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var required = ['recipient', 'signalType', 'sessionId', 'target', 'signalId'];\n\t    /**\n\t     * Attributes which we will copy onto the signal if defined.\n\t     * @memberof! respoke.SignalingMessage\n\t     * @name required\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var allowed = [\n\t        'signalType', 'sessionId', 'sessionDescription', 'iceCandidates', 'offering', 'target', 'signalId', 'callerId',\n\t        'requesting', 'reason', 'error', 'status', 'connectionId', 'version'\n\t    ];\n\t\n\t    params.version = '1.0';\n\t\n\t    /**\n\t     * Parse rawMessage and set attributes required for message delivery.\n\t     * @memberof! respoke.SignalingMessage\n\t     * @method respoke.SignalingMessage.parse\n\t     * @private\n\t     */\n\t    function parse() {\n\t        if (params.rawMessage) {\n\t            try {\n\t                that = JSON.parse(params.rawMessage.body); // Incoming message\n\t            } catch (e) {\n\t                that = params.rawMessage.body;\n\t            }\n\t            that.fromType = params.rawMessage.header.fromType;\n\t            that.fromEndpoint = params.rawMessage.header.from;\n\t            that.fromConnection = params.rawMessage.header.fromConnection;\n\t            that.timestamp = params.rawMessage.header.timestamp;\n\t\n\t            if (!that.target) {\n\t                that.target = 'call';\n\t            }\n\t        } else {\n\t            required.forEach(function eachAttr(attr) {\n\t                if (params[attr] === 0 || !params[attr]) {\n\t                    throw new Error(\"Can't build a signaling without \" + attr);\n\t                }\n\t            });\n\t\n\t            allowed.forEach(function eachAttr(attr) {\n\t                if (params[attr] === 0 || params[attr]) {\n\t                    that[attr] = params[attr];\n\t                }\n\t            });\n\t        }\n\t    }\n\t\n\t    parse();\n\t    return that;\n\t}; // End respoke.SignalingMessage\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar require;var require;/* WEBPACK VAR INJECTION */(function(global) {(function(f){if(true){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}(g.airbrakeJs || (g.airbrakeJs = {})).Client = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\t(function (global){\n\tvar Client, merge;\n\t\n\trequire('./internal/compat');\n\t\n\tmerge = require('./internal/merge');\n\t\n\tClient = (function() {\n\t  function Client(opts) {\n\t    var reporter;\n\t    if (opts == null) {\n\t      opts = {};\n\t    }\n\t    this._projectId = opts.projectId || 0;\n\t    this._projectKey = opts.projectKey || '';\n\t    this._host = 'https://api.airbrake.io';\n\t    this._context = {};\n\t    this._params = {};\n\t    this._env = {};\n\t    this._session = {};\n\t    this._processor = null;\n\t    this._reporters = [];\n\t    this._filters = [];\n\t    if (opts.processor !== void 0) {\n\t      this._processor = opts.processor;\n\t    } else {\n\t      this._processor = require('./processors/stack');\n\t    }\n\t    if (opts.reporter !== void 0) {\n\t      this.addReporter(opts.reporter);\n\t    } else {\n\t      if ('withCredentials' in new global.XMLHttpRequest()) {\n\t        reporter = require('./reporters/xhr');\n\t      } else {\n\t        reporter = require('./reporters/jsonp');\n\t      }\n\t      this.addReporter(reporter);\n\t    }\n\t  }\n\t\n\t  Client.prototype.setProject = function(id, key) {\n\t    this._projectId = id;\n\t    return this._projectKey = key;\n\t  };\n\t\n\t  Client.prototype.setHost = function(host) {\n\t    return this._host = host;\n\t  };\n\t\n\t  Client.prototype.addContext = function(context) {\n\t    return merge(this._context, context);\n\t  };\n\t\n\t  Client.prototype.setEnvironmentName = function(envName) {\n\t    return this._context.environment = envName;\n\t  };\n\t\n\t  Client.prototype.addParams = function(params) {\n\t    return merge(this._params, params);\n\t  };\n\t\n\t  Client.prototype.addEnvironment = function(env) {\n\t    return merge(this._env, env);\n\t  };\n\t\n\t  Client.prototype.addSession = function(session) {\n\t    return merge(this._session, session);\n\t  };\n\t\n\t  Client.prototype.addReporter = function(reporter) {\n\t    return this._reporters.push(reporter);\n\t  };\n\t\n\t  Client.prototype.addFilter = function(filter) {\n\t    return this._filters.push(filter);\n\t  };\n\t\n\t  Client.prototype.push = function(err) {\n\t    var defContext, ref;\n\t    defContext = {\n\t      language: 'JavaScript',\n\t      sourceMapEnabled: true\n\t    };\n\t    if ((ref = global.navigator) != null ? ref.userAgent : void 0) {\n\t      defContext.userAgent = global.navigator.userAgent;\n\t    }\n\t    if (global.location) {\n\t      defContext.url = String(global.location);\n\t    }\n\t    return this._processor(err.error || err, (function(_this) {\n\t      return function(name, errInfo) {\n\t        var filterFn, j, k, len, len1, notice, ref1, ref2, reporterFn;\n\t        notice = {\n\t          notifier: {\n\t            name: 'airbrake-js-' + name,\n\t            version: '0.4.0-alpha.1',\n\t            url: 'https://github.com/airbrake/airbrake-js'\n\t          },\n\t          errors: [errInfo],\n\t          context: merge(defContext, _this._context, err.context),\n\t          params: merge({}, _this._params, err.params),\n\t          environment: merge({}, _this._env, err.environment),\n\t          session: merge({}, _this._session, err.session)\n\t        };\n\t        ref1 = _this._filters;\n\t        for (j = 0, len = ref1.length; j < len; j++) {\n\t          filterFn = ref1[j];\n\t          if (!filterFn(notice)) {\n\t            return;\n\t          }\n\t        }\n\t        ref2 = _this._reporters;\n\t        for (k = 0, len1 = ref2.length; k < len1; k++) {\n\t          reporterFn = ref2[k];\n\t          reporterFn(notice, {\n\t            projectId: _this._projectId,\n\t            projectKey: _this._projectKey,\n\t            host: _this._host\n\t          });\n\t        }\n\t      };\n\t    })(this));\n\t  };\n\t\n\t  Client.prototype._wrapArguments = function(args) {\n\t    var arg, i, j, len;\n\t    for (i = j = 0, len = args.length; j < len; i = ++j) {\n\t      arg = args[i];\n\t      if (typeof arg === 'function') {\n\t        args[i] = this.wrap(arg);\n\t      }\n\t    }\n\t    return args;\n\t  };\n\t\n\t  Client.prototype.wrap = function(fn) {\n\t    var airbrakeWrapper, prop, self;\n\t    if (fn.__airbrake__) {\n\t      return fn;\n\t    }\n\t    self = this;\n\t    airbrakeWrapper = function() {\n\t      var args, exc;\n\t      args = self._wrapArguments(arguments);\n\t      try {\n\t        return fn.apply(this, args);\n\t      } catch (_error) {\n\t        exc = _error;\n\t        args = Array.prototype.slice.call(arguments);\n\t        self.push({\n\t          error: exc,\n\t          params: {\n\t            \"arguments\": args\n\t          }\n\t        });\n\t        return null;\n\t      }\n\t    };\n\t    for (prop in fn) {\n\t      if (fn.hasOwnProperty(prop)) {\n\t        airbrakeWrapper[prop] = fn[prop];\n\t      }\n\t    }\n\t    airbrakeWrapper.__airbrake__ = true;\n\t    airbrakeWrapper.__inner__ = fn;\n\t    return airbrakeWrapper;\n\t  };\n\t\n\t  return Client;\n\t\n\t})();\n\t\n\tmodule.exports = Client;\n\t\n\t\n\t\n\t}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\t},{\"./internal/compat\":2,\"./internal/merge\":4,\"./processors/stack\":6,\"./reporters/jsonp\":7,\"./reporters/xhr\":8}],2:[function(require,module,exports){\n\tvar base;\n\t\n\tif ((base = Array.prototype).indexOf == null) {\n\t  base.indexOf = function(obj, start) {\n\t    var i, j, ref, ref1;\n\t    start = start || 0;\n\t    for (i = j = ref = start, ref1 = this.length; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {\n\t      if (this[i] === obj) {\n\t        return i;\n\t      }\n\t    }\n\t    return -1;\n\t  };\n\t}\n\t\n\t\n\t\n\t},{}],3:[function(require,module,exports){\n\tvar jsonifyNotice, truncate, truncateObj;\n\t\n\ttruncate = require('./truncate');\n\t\n\ttruncateObj = function(obj, n) {\n\t  var dst, key;\n\t  if (n == null) {\n\t    n = 1000;\n\t  }\n\t  dst = {};\n\t  for (key in obj) {\n\t    dst[key] = truncate(obj[key], n = n);\n\t  }\n\t  return dst;\n\t};\n\t\n\tjsonifyNotice = function(notice, n, maxLength) {\n\t  var err, s;\n\t  if (n == null) {\n\t    n = 1000;\n\t  }\n\t  if (maxLength == null) {\n\t    maxLength = 64000;\n\t  }\n\t  while (true) {\n\t    notice.params = truncateObj(notice.params, n = n);\n\t    notice.environment = truncateObj(notice.environment, n = n);\n\t    notice.session = truncateObj(notice.session, n = n);\n\t    s = JSON.stringify(notice);\n\t    if (s.length < maxLength) {\n\t      return s;\n\t    }\n\t    if (n === 0) {\n\t      break;\n\t    }\n\t    n = Math.floor(n / 2);\n\t  }\n\t  err = new Error(\"airbrake-js: cannot jsonify notice (length=\" + s.length + \" maxLength=\" + maxLength + \")\");\n\t  err.params = {\n\t    json: s.slice(0, +Math.floor(n / 2) + 1 || 9e9) + '...'\n\t  };\n\t  throw err;\n\t};\n\t\n\tmodule.exports = jsonifyNotice;\n\t\n\t\n\t\n\t},{\"./truncate\":5}],4:[function(require,module,exports){\n\tvar merge;\n\t\n\tmerge = function() {\n\t  var dst, i, key, len, obj, objs;\n\t  objs = Array.prototype.slice.call(arguments);\n\t  dst = objs.shift() || {};\n\t  for (i = 0, len = objs.length; i < len; i++) {\n\t    obj = objs[i];\n\t    for (key in obj) {\n\t      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n\t        dst[key] = obj[key];\n\t      }\n\t    }\n\t  }\n\t  return dst;\n\t};\n\t\n\tmodule.exports = merge;\n\t\n\t\n\t\n\t},{}],5:[function(require,module,exports){\n\tvar getAttr, truncate;\n\t\n\tgetAttr = function(obj, attr) {\n\t  var exc;\n\t  try {\n\t    return obj[attr];\n\t  } catch (_error) {\n\t    exc = _error;\n\t    return void 0;\n\t  }\n\t};\n\t\n\ttruncate = function(value, n, depth) {\n\t  var fn, getPath, keys, nn, seen;\n\t  if (n == null) {\n\t    n = 1000;\n\t  }\n\t  if (depth == null) {\n\t    depth = 5;\n\t  }\n\t  nn = 0;\n\t  keys = [];\n\t  seen = [];\n\t  getPath = function(value) {\n\t    var i, index, j, path, ref;\n\t    index = seen.indexOf(value);\n\t    path = [keys[index]];\n\t    for (i = j = ref = index; ref <= 0 ? j <= 0 : j >= 0; i = ref <= 0 ? ++j : --j) {\n\t      if (seen[i] && getAttr(seen[i], path[0]) === value) {\n\t        value = seen[i];\n\t        path.unshift(keys[i]);\n\t      }\n\t    }\n\t    return '~' + path.join('.');\n\t  };\n\t  fn = function(value, key, dd) {\n\t    var dst, el, i, j, len, val;\n\t    if (key == null) {\n\t      key = '';\n\t    }\n\t    if (dd == null) {\n\t      dd = 0;\n\t    }\n\t    nn++;\n\t    if (nn > n) {\n\t      return '[Truncated]';\n\t    }\n\t    if (value === null || value === void 0) {\n\t      return value;\n\t    }\n\t    switch (typeof value) {\n\t      case 'boolean':\n\t      case 'number':\n\t      case 'string':\n\t      case 'function':\n\t        return value;\n\t      case 'object':\n\t        break;\n\t      default:\n\t        return String(value);\n\t    }\n\t    if (value instanceof Boolean || value instanceof Number || value instanceof String || value instanceof Date || value instanceof RegExp) {\n\t      return value;\n\t    }\n\t    if (seen.indexOf(value) >= 0) {\n\t      return \"[Circular \" + (getPath(value)) + \"]\";\n\t    }\n\t    dd++;\n\t    if (dd > depth) {\n\t      return '[Truncated]';\n\t    }\n\t    keys.push(key);\n\t    seen.push(value);\n\t    nn--;\n\t    if (Object.prototype.toString.apply(value) === '[object Array]') {\n\t      dst = [];\n\t      for (i = j = 0, len = value.length; j < len; i = ++j) {\n\t        el = value[i];\n\t        nn++;\n\t        if (nn >= n) {\n\t          break;\n\t        }\n\t        dst.push(fn(el, key = i, dd));\n\t      }\n\t      return dst;\n\t    }\n\t    dst = {};\n\t    for (key in value) {\n\t      if (!Object.prototype.hasOwnProperty.call(value, key)) {\n\t        continue;\n\t      }\n\t      nn++;\n\t      if (nn >= n) {\n\t        break;\n\t      }\n\t      val = getAttr(value, key);\n\t      if (val !== void 0) {\n\t        dst[key] = fn(val, key = key, dd);\n\t      }\n\t    }\n\t    return dst;\n\t  };\n\t  return fn(value);\n\t};\n\t\n\tmodule.exports = truncate;\n\t\n\t\n\t\n\t},{}],6:[function(require,module,exports){\n\tvar processor, rules, typeMessageRe;\n\t\n\trules = [\n\t  {\n\t    name: 'v8',\n\t    re: /^\\s*at\\s(.+?)\\s\\((?:(?:(.+):(\\d+):(\\d+))|(.+))\\)$/,\n\t    fn: function(m) {\n\t      return {\n\t        \"function\": m[1],\n\t        file: m[2] || m[5],\n\t        line: m[3] && parseInt(m[3], 10) || 0,\n\t        column: m[4] && parseInt(m[4], 10) || 0\n\t      };\n\t    }\n\t  }, {\n\t    name: 'firefox30',\n\t    re: /^(.*)@(.+):(\\d+):(\\d+)$/,\n\t    fn: function(m) {\n\t      var evaledRe, file, func, mm;\n\t      func = m[1];\n\t      file = m[2];\n\t      evaledRe = /^(\\S+)\\s(line\\s\\d+\\s>\\seval.*)$/;\n\t      if (mm = file.match(evaledRe)) {\n\t        if (func.length > 0) {\n\t          func = func + ' ' + mm[2];\n\t        } else {\n\t          func = mm[2];\n\t        }\n\t        file = mm[1];\n\t      }\n\t      return {\n\t        \"function\": func,\n\t        file: file,\n\t        line: parseInt(m[3], 10),\n\t        column: parseInt(m[4], 10)\n\t      };\n\t    }\n\t  }, {\n\t    name: 'firefox14',\n\t    re: /^(.*)@(.+):(\\d+)$/,\n\t    fn: function(m, i, e) {\n\t      var column;\n\t      if (i === 0) {\n\t        column = e.columnNumber || 0;\n\t      } else {\n\t        column = 0;\n\t      }\n\t      return {\n\t        \"function\": m[1],\n\t        file: m[2],\n\t        line: parseInt(m[3], 10),\n\t        column: column\n\t      };\n\t    }\n\t  }, {\n\t    name: 'v8-short',\n\t    re: /^\\s*at\\s(.+):(\\d+):(\\d+)$/,\n\t    fn: function(m) {\n\t      return {\n\t        \"function\": '',\n\t        file: m[1],\n\t        line: parseInt(m[2], 10),\n\t        column: parseInt(m[3], 10)\n\t      };\n\t    }\n\t  }, {\n\t    name: 'default',\n\t    re: /.+/,\n\t    fn: function(m) {\n\t      return {\n\t        \"function\": m[0],\n\t        file: '',\n\t        line: 0,\n\t        column: 0\n\t      };\n\t    }\n\t  }\n\t];\n\t\n\ttypeMessageRe = /^\\S+:\\s.+$/;\n\t\n\tprocessor = function(e, cb) {\n\t  var backtrace, i, j, k, len, len1, line, lines, m, msg, processorName, rule, stack, type, uncaughtExcRe;\n\t  processorName = 'nostack';\n\t  stack = e.stack || '';\n\t  lines = stack.split('\\n');\n\t  backtrace = [];\n\t  for (i = j = 0, len = lines.length; j < len; i = ++j) {\n\t    line = lines[i];\n\t    if (line === '') {\n\t      continue;\n\t    }\n\t    for (k = 0, len1 = rules.length; k < len1; k++) {\n\t      rule = rules[k];\n\t      m = line.match(rule.re);\n\t      if (!m) {\n\t        continue;\n\t      }\n\t      processorName = rule.name;\n\t      backtrace.push(rule.fn(m, i, e));\n\t      break;\n\t    }\n\t  }\n\t  if ((processorName === 'v8' || processorName === 'v8-short') && backtrace.length > 0 && backtrace[0][\"function\"].match(typeMessageRe)) {\n\t    backtrace = backtrace.slice(1);\n\t  }\n\t  if (backtrace.length === 0 && ((e.fileName != null) || (e.lineNumber != null) || (e.columnNumber != null))) {\n\t    backtrace.push({\n\t      \"function\": '',\n\t      file: e.fileName || '',\n\t      line: parseInt(e.lineNumber, 10) || 0,\n\t      column: parseInt(e.columnNumber, 10) || 0\n\t    });\n\t  }\n\t  if (backtrace.length === 0 && ((e.filename != null) || (e.lineno != null) || (e.column != null) || (e.colno != null))) {\n\t    backtrace.push({\n\t      \"function\": '',\n\t      file: e.filename || '',\n\t      line: parseInt(e.lineno, 10) || 0,\n\t      column: parseInt(e.column || e.colno, 10) || 0\n\t    });\n\t  }\n\t  if (e.message != null) {\n\t    msg = e.message;\n\t  } else {\n\t    msg = String(e);\n\t  }\n\t  if (e.name != null) {\n\t    type = e.name;\n\t    msg = type + ': ' + msg;\n\t  } else {\n\t    uncaughtExcRe = /^Uncaught\\s(.+?):\\s.+$/;\n\t    m = msg.match(uncaughtExcRe);\n\t    if (m) {\n\t      type = m[1];\n\t    } else {\n\t      type = '';\n\t    }\n\t  }\n\t  return cb(processorName, {\n\t    'type': type,\n\t    'message': msg,\n\t    'backtrace': backtrace\n\t  });\n\t};\n\t\n\tmodule.exports = processor;\n\t\n\t\n\t\n\t},{}],7:[function(require,module,exports){\n\t(function (global){\n\tvar cbCount, jsonifyNotice, report;\n\t\n\tjsonifyNotice = require('../internal/jsonify_notice');\n\t\n\tcbCount = 0;\n\t\n\treport = function(notice, opts) {\n\t  var cbName, document, head, payload, removeScript, script, url;\n\t  cbCount++;\n\t  cbName = \"airbrakeCb\" + String(cbCount);\n\t  global[cbName] = function(resp) {\n\t    var _;\n\t    if (typeof console !== \"undefined\" && console !== null) {\n\t      if (typeof console.debug === \"function\") {\n\t        console.debug(\"airbrake-js: error #%s was reported: %s\", resp.id, resp.url);\n\t      }\n\t    }\n\t    try {\n\t      return delete global[cbName];\n\t    } catch (_error) {\n\t      _ = _error;\n\t      return global[cbName] = void 0;\n\t    }\n\t  };\n\t  payload = encodeURIComponent(jsonifyNotice(notice));\n\t  url = opts.host + \"/api/v3/projects/\" + opts.projectId + \"/create-notice?key=\" + opts.projectKey + \"&callback=\" + cbName + \"&body=\" + payload;\n\t  document = global.document;\n\t  head = document.getElementsByTagName('head')[0];\n\t  script = document.createElement('script');\n\t  script.src = url;\n\t  removeScript = function() {\n\t    return head.removeChild(script);\n\t  };\n\t  script.onload = removeScript;\n\t  script.onerror = removeScript;\n\t  return head.appendChild(script);\n\t};\n\t\n\tmodule.exports = report;\n\t\n\t\n\t\n\t}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\t},{\"../internal/jsonify_notice\":3}],8:[function(require,module,exports){\n\t(function (global){\n\tvar jsonifyNotice, report;\n\t\n\tjsonifyNotice = require('../internal/jsonify_notice');\n\t\n\treport = function(notice, opts) {\n\t  var payload, req, url;\n\t  url = opts.host + \"/api/v3/projects/\" + opts.projectId + \"/notices?key=\" + opts.projectKey;\n\t  payload = jsonifyNotice(notice);\n\t  req = new global.XMLHttpRequest();\n\t  req.open('POST', url, true);\n\t  req.setRequestHeader('Content-Type', 'application/json');\n\t  req.send(payload);\n\t  return req.onreadystatechange = function() {\n\t    var resp;\n\t    if (req.readyState === 4 && req.status === 201 && ((typeof console !== \"undefined\" && console !== null ? console.debug : void 0) != null)) {\n\t      resp = JSON.parse(req.responseText);\n\t      return console.debug(\"airbrake: error #%s was reported: %s\", resp.id, resp.url);\n\t    }\n\t  };\n\t};\n\t\n\tmodule.exports = report;\n\t\n\t\n\t\n\t}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\t},{\"../internal/jsonify_notice\":3}]},{},[1])(1)\n\t});\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\r\n\t* loglevel - https://github.com/pimterry/loglevel\r\n\t*\r\n\t* Copyright (c) 2013 Tim Perry\r\n\t* Licensed under the MIT license.\r\n\t*/\r\n\t(function (root, definition) {\r\n\t    if (typeof module === 'object' && module.exports && \"function\" === 'function') {\r\n\t        module.exports = definition();\r\n\t    } else if (true) {\r\n\t        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\t    } else {\r\n\t        root.log = definition();\r\n\t    }\r\n\t}(this, function () {\r\n\t    var self = {};\r\n\t    var noop = function() {};\r\n\t    var undefinedType = \"undefined\";\r\n\t\r\n\t    function realMethod(methodName) {\r\n\t        if (typeof console === undefinedType) {\r\n\t            return false; // We can't build a real method without a console to log to\r\n\t        } else if (console[methodName] !== undefined) {\r\n\t            return bindMethod(console, methodName);\r\n\t        } else if (console.log !== undefined) {\r\n\t            return bindMethod(console, 'log');\r\n\t        } else {\r\n\t            return noop;\r\n\t        }\r\n\t    }\r\n\t\r\n\t    function bindMethod(obj, methodName) {\r\n\t        var method = obj[methodName];\r\n\t        if (typeof method.bind === 'function') {\r\n\t            return method.bind(obj);\r\n\t        } else {\r\n\t            try {\r\n\t                return Function.prototype.bind.call(method, obj);\r\n\t            } catch (e) {\r\n\t                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\r\n\t                return function() {\r\n\t                    return Function.prototype.apply.apply(method, [obj, arguments]);\r\n\t                };\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t\r\n\t    function enableLoggingWhenConsoleArrives(methodName, level) {\r\n\t        return function () {\r\n\t            if (typeof console !== undefinedType) {\r\n\t                replaceLoggingMethods(level);\r\n\t                self[methodName].apply(self, arguments);\r\n\t            }\r\n\t        };\r\n\t    }\r\n\t\r\n\t    var logMethods = [\r\n\t        \"trace\",\r\n\t        \"debug\",\r\n\t        \"info\",\r\n\t        \"warn\",\r\n\t        \"error\"\r\n\t    ];\r\n\t\r\n\t    function replaceLoggingMethods(level) {\r\n\t        for (var i = 0; i < logMethods.length; i++) {\r\n\t            var methodName = logMethods[i];\r\n\t            self[methodName] = (i < level) ? noop : self.methodFactory(methodName, level);\r\n\t        }\r\n\t    }\r\n\t\r\n\t    function persistLevelIfPossible(levelNum) {\r\n\t        var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\r\n\t\r\n\t        // Use localStorage if available\r\n\t        try {\r\n\t            window.localStorage['loglevel'] = levelName;\r\n\t            return;\r\n\t        } catch (ignore) {}\r\n\t\r\n\t        // Use session cookie as fallback\r\n\t        try {\r\n\t            window.document.cookie = \"loglevel=\" + levelName + \";\";\r\n\t        } catch (ignore) {}\r\n\t    }\r\n\t\r\n\t    function loadPersistedLevel() {\r\n\t        var storedLevel;\r\n\t\r\n\t        try {\r\n\t            storedLevel = window.localStorage['loglevel'];\r\n\t        } catch (ignore) {}\r\n\t\r\n\t        if (typeof storedLevel === undefinedType) {\r\n\t            try {\r\n\t                storedLevel = /loglevel=([^;]+)/.exec(window.document.cookie)[1];\r\n\t            } catch (ignore) {}\r\n\t        }\r\n\t        \r\n\t        if (self.levels[storedLevel] === undefined) {\r\n\t            storedLevel = \"WARN\";\r\n\t        }\r\n\t\r\n\t        self.setLevel(self.levels[storedLevel]);\r\n\t    }\r\n\t\r\n\t    /*\r\n\t     *\r\n\t     * Public API\r\n\t     *\r\n\t     */\r\n\t\r\n\t    self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\r\n\t        \"ERROR\": 4, \"SILENT\": 5};\r\n\t\r\n\t    self.methodFactory = function (methodName, level) {\r\n\t        return realMethod(methodName) ||\r\n\t               enableLoggingWhenConsoleArrives(methodName, level);\r\n\t    };\r\n\t\r\n\t    self.setLevel = function (level) {\r\n\t        if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\r\n\t            level = self.levels[level.toUpperCase()];\r\n\t        }\r\n\t        if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\r\n\t            persistLevelIfPossible(level);\r\n\t            replaceLoggingMethods(level);\r\n\t            if (typeof console === undefinedType && level < self.levels.SILENT) {\r\n\t                return \"No console available for logging\";\r\n\t            }\r\n\t        } else {\r\n\t            throw \"log.setLevel() called with invalid level: \" + level;\r\n\t        }\r\n\t    };\r\n\t\r\n\t    self.enableAll = function() {\r\n\t        self.setLevel(self.levels.TRACE);\r\n\t    };\r\n\t\r\n\t    self.disableAll = function() {\r\n\t        self.setLevel(self.levels.SILENT);\r\n\t    };\r\n\t\r\n\t    // Grab the current global log variable in case of overwrite\r\n\t    var _log = (typeof window !== undefinedType) ? window.log : undefined;\r\n\t    self.noConflict = function() {\r\n\t        if (typeof window !== undefinedType &&\r\n\t               window.log === self) {\r\n\t            window.log = _log;\r\n\t        }\r\n\t\r\n\t        return self;\r\n\t    };\r\n\t\r\n\t    loadPersistedLevel();\r\n\t    return self;\r\n\t}));\r\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t *  Copyright (c) 2014 The WebRTC project authors. All Rights Reserved.\n\t *\n\t *  Use of this source code is governed by a BSD-style license\n\t *  that can be found in the LICENSE file in the same directory as\n\t *  this source file.\n\t * @ignore\n\t */\n\t\n\t/* More information about these options at jshint.com/docs/options */\n\t\n\t/* jshint browser: true, camelcase: true, curly: true, devel: true,\n\teqeqeq: true, forin: false, globalstrict: true, quotmark: single,\n\tundef: true, unused: strict */\n\t\n\t/* global mozRTCIceCandidate, mozRTCPeerConnection,\n\tmozRTCSessionDescription, webkitRTCPeerConnection */\n\t\n\t/* exported trace */\n\t\n\t'use strict';\n\t\n\tvar RTCPeerConnection = null;\n\tvar getUserMedia = null;\n\tvar attachMediaStream = null;\n\tvar reattachMediaStream = null;\n\tvar webrtcDetectedBrowser = null;\n\tvar webrtcDetectedVersion = null;\n\t\n\tfunction trace(text) {\n\t  // This function is used for logging.\n\t  if (text[text.length - 1] === '\\n') {\n\t    text = text.substring(0, text.length - 1);\n\t  }\n\t  console.log((window.performance.now() / 1000).toFixed(3) + ': ' + text);\n\t}\n\t\n\tfunction maybeFixConfiguration(pcConfig) {\n\t  if (!pcConfig) {\n\t    return;\n\t  }\n\t  for (var i = 0; i < pcConfig.iceServers.length; i++) {\n\t    if (pcConfig.iceServers[i].hasOwnProperty('urls')) {\n\t      pcConfig.iceServers[i].url = pcConfig.iceServers[i].urls;\n\t      delete pcConfig.iceServers[i].urls;\n\t    }\n\t  }\n\t}\n\t\n\tif (navigator.mozGetUserMedia) {\n\t  console.log('This appears to be Firefox');\n\t\n\t  webrtcDetectedBrowser = 'firefox';\n\t\n\t  webrtcDetectedVersion =\n\t    parseInt(navigator.userAgent.match(/Firefox\\/([0-9]+)\\./)[1], 10);\n\t\n\t  // The RTCPeerConnection object.\n\t  RTCPeerConnection = function(pcConfig, pcConstraints) {\n\t    // .urls is not supported in FF yet.\n\t    maybeFixConfiguration(pcConfig);\n\t    return new mozRTCPeerConnection(pcConfig, pcConstraints);\n\t  };\n\t\n\t  // The RTCSessionDescription object.\n\t  window.RTCSessionDescription = mozRTCSessionDescription;\n\t\n\t  // The RTCIceCandidate object.\n\t  window.RTCIceCandidate = mozRTCIceCandidate;\n\t\n\t  // getUserMedia shim (only difference is the prefix).\n\t  // Code from Adam Barth.\n\t  getUserMedia = navigator.mozGetUserMedia.bind(navigator);\n\t  navigator.getUserMedia = getUserMedia;\n\t\n\t  // Creates ICE server from the URL for FF.\n\t  window.createIceServer = function(url, username, password) {\n\t    var iceServer = null;\n\t    var urlParts = url.split(':');\n\t    if (urlParts[0].indexOf('stun') === 0) {\n\t      // Create ICE server with STUN URL.\n\t      iceServer = {\n\t        'url': url\n\t      };\n\t    } else if (urlParts[0].indexOf('turn') === 0) {\n\t      if (webrtcDetectedVersion < 27) {\n\t        // Create iceServer with turn url.\n\t        // Ignore the transport parameter from TURN url for FF version <=27.\n\t        var turnUrlParts = url.split('?');\n\t        // Return null for createIceServer if transport=tcp.\n\t        if (turnUrlParts.length === 1 ||\n\t          turnUrlParts[1].indexOf('transport=udp') === 0) {\n\t          iceServer = {\n\t            'url': turnUrlParts[0],\n\t            'credential': password,\n\t            'username': username\n\t          };\n\t        }\n\t      } else {\n\t        // FF 27 and above supports transport parameters in TURN url,\n\t        // So passing in the full url to create iceServer.\n\t        iceServer = {\n\t          'url': url,\n\t          'credential': password,\n\t          'username': username\n\t        };\n\t      }\n\t    }\n\t    return iceServer;\n\t  };\n\t\n\t  window.createIceServers = function(urls, username, password) {\n\t    var iceServers = [];\n\t    // Use .url for FireFox.\n\t    for (var i = 0; i < urls.length; i++) {\n\t      var iceServer =\n\t        window.createIceServer(urls[i], username, password);\n\t      if (iceServer !== null) {\n\t        iceServers.push(iceServer);\n\t      }\n\t    }\n\t    return iceServers;\n\t  };\n\t\n\t  // Attach a media stream to an element.\n\t  attachMediaStream = function(element, stream) {\n\t    //console.log('Attaching media stream');\n\t    element.mozSrcObject = stream;\n\t    setTimeout(function () {\n\t      element.play();\n\t    }, 100);\n\t  };\n\t\n\t  reattachMediaStream = function(to, from) {\n\t    //console.log('Reattaching media stream');\n\t    to.mozSrcObject = from.mozSrcObject;\n\t  };\n\t\n\t} else if (navigator.webkitGetUserMedia) {\n\t  console.log('This appears to be Chrome');\n\t\n\t  webrtcDetectedBrowser = 'chrome';\n\t  // Temporary fix until crbug/374263 is fixed.\n\t  // Setting Chrome version to 999, if version is unavailable.\n\t  var result = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n\t  if (result !== null) {\n\t    webrtcDetectedVersion = parseInt(result[2], 10);\n\t  } else {\n\t    webrtcDetectedVersion = 999;\n\t  }\n\t\n\t  // Creates iceServer from the url for Chrome M33 and earlier.\n\t  window.createIceServer = function(url, username, password) {\n\t    var iceServer = null;\n\t    var urlParts = url.split(':');\n\t    if (urlParts[0].indexOf('stun') === 0) {\n\t      // Create iceServer with stun url.\n\t      iceServer = {\n\t        'url': url\n\t      };\n\t    } else if (urlParts[0].indexOf('turn') === 0) {\n\t      // Chrome M28 & above uses below TURN format.\n\t      iceServer = {\n\t        'url': url,\n\t        'credential': password,\n\t        'username': username\n\t      };\n\t    }\n\t    return iceServer;\n\t  };\n\t\n\t  // Creates iceServers from the urls for Chrome M34 and above.\n\t  window.createIceServers = function(urls, username, password) {\n\t    var iceServers = [];\n\t    if (webrtcDetectedVersion >= 34) {\n\t      // .urls is supported since Chrome M34.\n\t      iceServers = {\n\t        'urls': urls,\n\t        'credential': password,\n\t        'username': username\n\t      };\n\t    } else {\n\t      for (var i = 0; i < urls.length; i++) {\n\t        var iceServer =\n\t          window.createIceServer(urls[i], username, password);\n\t        if (iceServer !== null) {\n\t          iceServers.push(iceServer);\n\t        }\n\t      }\n\t    }\n\t    return iceServers;\n\t  };\n\t\n\t  // The RTCPeerConnection object.\n\t  RTCPeerConnection = function(pcConfig, pcConstraints) {\n\t    // .urls is supported since Chrome M34.\n\t    if (webrtcDetectedVersion < 34) {\n\t      maybeFixConfiguration(pcConfig);\n\t    }\n\t    return new webkitRTCPeerConnection(pcConfig, pcConstraints);\n\t  };\n\t\n\t  // Get UserMedia (only difference is the prefix).\n\t  // Code from Adam Barth.\n\t  getUserMedia = navigator.webkitGetUserMedia.bind(navigator);\n\t  navigator.getUserMedia = getUserMedia;\n\t\n\t  // Attach a media stream to an element.\n\t  attachMediaStream = function(element, stream) {\n\t    if (typeof element.srcObject !== 'undefined') {\n\t      element.srcObject = stream;\n\t    } else if (typeof element.mozSrcObject !== 'undefined') {\n\t      element.mozSrcObject = stream;\n\t    } else if (typeof element.src !== 'undefined') {\n\t      element.src = URL.createObjectURL(stream);\n\t    } else {\n\t      console.log('Error attaching stream to element.');\n\t    }\n\t  };\n\t\n\t  reattachMediaStream = function(to, from) {\n\t    to.src = from.src;\n\t  };\n\t} else {\n\t  console.log('Browser does not appear to be WebRTC-capable');\n\t}\n\t\n\t\n\twindow.RTCPeerConnection = RTCPeerConnection;\n\twindow.getUserMedia = getUserMedia;\n\twindow.attachMediaStream = attachMediaStream;\n\twindow.reattachMediaStream = reattachMediaStream;\n\twindow.webrtcDetectedBrowser = webrtcDetectedBrowser;\n\twindow.webrtcDetectedVersion = webrtcDetectedVersion;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar log = __webpack_require__(4);\n\tvar respokeClass = __webpack_require__(7);\n\t\n\t/**\n\t * Higher order function to wrap a passed in function. The returned function will only execute\n\t * the passed in function the first time it is called, then be a no-op any subsequent tries.\n\t *\n\t * @private\n\t */\n\tvar callOnce = function (func) {\n\t    \"use strict\";\n\t    return (function () {\n\t        var called = false;\n\t        return function () {\n\t            if (!called) {\n\t                func.apply(null, arguments);\n\t                called = true;\n\t            }\n\t        };\n\t    })();\n\t};\n\t\n\t/**\n\t * A generic class for emitting and listening to events. This is used internally by respoke.js\n\t * to provide evented behavior. You can add custom events and inherit your own objects from\n\t * the EventEmitter.\n\t *\n\t * ```\n\t * // Adding a custom event to a respoke.Client instance\n\t * client.listen('my-event', function (evt) { });\n\t * client.fire('my-event', { name: 'my-event', asdf: 'jkl' });\n\t * ```\n\t *\n\t * ```\n\t * // Custom EventEmitter\n\t * var MyCustomEmitter = respoke.EventEmitter();\n\t * var emitterInstance = MyCustomEmitter();\n\t * emitterInstance.fire('hi', { name: 'hi', message: 'hello' });\n\t * emitterInstance.listen('hi', function (evt) { });\n\t * ```\n\t *\n\t * @class respoke.EventEmitter\n\t * @inherits respoke.Class\n\t * @constructor\n\t * @param {object} params\n\t * @param {string} params.instanceId\n\t * @returns {respoke.EventEmitter}\n\t */\n\tvar EventEmitter = module.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = respokeClass(params);\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.EventEmitter\n\t     * @name className\n\t     * @type {string}\n\t     * @private\n\t     */\n\t    that.className = 'respoke.EventEmitter';\n\t\n\t    /**\n\t     * @memberof! respoke.EventEmitter\n\t     * @name eventList\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var eventList = {};\n\t\n\t    /**\n\t     * Add a listener that will only be called once to an object.  This method adds the given listener to the given\n\t     * event in the case that the same\n\t     * listener is not already registered to this event and the listener is a function.  The third argument 'isInternal'\n\t     * is used only internally by the library to indicate that this listener is a library-used listener and should not\n\t     * count when we are trying to determine if an event has listeners placed by the developer.\n\t     *\n\t     *     client.once('connect', function (evt) {\n\t     *         console.log(\"This is the first time we connected.\");\n\t     *     });\n\t     *\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.listen\n\t     * @param {string} eventType - A developer-specified string identifying the event.\n\t     * @param {respoke.EventEmitter.eventListener} listener - A function to call when the event is fire.\n\t     * @param {boolean} [isInternal] - A flag to indicate this listener was added by the library. This parameter should\n\t     * not be used by developers who are using the library, only by developers who are working on the library itself.\n\t     */\n\t    that.once = function (eventType, listener, isInternal) {\n\t        var string = listener.toString();\n\t        listener = callOnce(listener);\n\t        listener.toString = function () { return string; };\n\t        listener.once = true;\n\t        that.listen(eventType, listener, isInternal);\n\t    };\n\t\n\t    /**\n\t     * Add a `listener` function to an object.\n\t     *\n\t     * This method adds the `listener` to the event `eventName`.\n\t     *\n\t     * If an identical listener already registered to this event, it will **not** be added.\n\t     *\n\t     * ##### Example of adding an event listener.\n\t     *\n\t     *     client.listen('connect', function (evt) {\n\t     *         console.log(\"We've connected!\", evt);\n\t     *     });\n\t     *\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.listen\n\t     * @param {string} eventType - The name of the event.\n\t     * @param {respoke.EventEmitter.eventListener} listener - A function to call when the event is\n\t     * fired.\n\t     * @arg {boolean} isInternal - Internal use only. A flag to indicate this listener was\n\t     * added by the library. This parameter should not be used by developers who are using\n\t     * the library, only by developers who are working on the library itself.\n\t     */\n\t    that.listen = function (eventType, listener, isInternal) {\n\t        if (listener === undefined) {\n\t            return;\n\t        }\n\t        var invalidEventType = typeof eventType !== 'string' || !eventType;\n\t        var invalidListener = typeof listener !== 'function';\n\t        if (invalidEventType || invalidListener) {\n\t            log.error(\"Invalid request to add event listener to\", eventType, listener);\n\t            return;\n\t        }\n\t\n\t        eventList[eventType] = eventList[eventType] || [];\n\t        listener.isInternal = !!isInternal; // boolify\n\t\n\t        var toString = function (fn) {\n\t            return fn.toString();\n\t        };\n\t        var isNotAlreadyAdded = eventList[eventType].map(toString).indexOf(listener.toString()) === -1;\n\t\n\t        if (isNotAlreadyAdded) {\n\t            eventList[eventType].push(listener);\n\t        } else {\n\t            log.warn(\"Not adding duplicate listener to\", eventType, listener);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Remove a listener from an object. If no eventType is specified, all eventTypes will be\n\t     * cleared. If an eventType is specified but no listener is specified, all listeners will be\n\t     * removed from the specified eventType.  If a listener is also specified, only that listener\n\t     * will be removed.\n\t     *\n\t     *     client.ignore('connect', connectHandler);\n\t     *\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.ignore\n\t     * @param {string} [eventType] - An optional developer-specified string identifying the event.\n\t     * @param {function} [listener] - An optional function to remove from the specified event.\n\t     */\n\t    that.ignore = function (eventType, listener) {\n\t        // Remove all events from this object\n\t        if (eventType === undefined) {\n\t            eventList = {};\n\t            return;\n\t        }\n\t\n\t        // Remove all listeners from this event.\n\t        if (listener === undefined || !eventList[eventType]) {\n\t            eventList[eventType] = [];\n\t            return;\n\t        }\n\t\n\t        // Remove only one listener from this event.\n\t        for (var i = eventList[eventType].length - 1; i >= 0; i -= 1) {\n\t            if (listener === eventList[eventType][i]) {\n\t                eventList[eventType].splice(i, 1);\n\t                return;\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Trigger an event on an object. All listeners for the specified eventType will be called.\n\t     * Listeners will be bound to the object ('this' will refer to the object), and additional\n\t     * arguments to fire() will be passed into each listener.\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.fire\n\t     * @param {string} eventType - A developer-specified string identifying the event to fire.\n\t     * @param {string|number|object|array} evt - Any number of optional parameters to be passed to\n\t     * the listener\n\t     * @private\n\t     */\n\t    that.fire = function (eventType, evt) {\n\t        var args = null;\n\t        var count = 0;\n\t        var toRemove = [];\n\t        var i;\n\t\n\t        evt = evt || {};\n\t        evt.name = eventType;\n\t        evt.target = that;\n\t\n\t        if (!eventType) {\n\t            return;\n\t        }\n\t\n\t        if (!eventList[eventType]) {\n\t            log.debug(\"fired \" + that.className + \"#\" + eventType + \" 0 listeners called with params\", evt);\n\t            return;\n\t        }\n\t\n\t        for (i = 0; i < eventList[eventType].length; i += 1) {\n\t            var listener = eventList[eventType][i];\n\t            if (typeof listener === 'function') {\n\t                setTimeout(listenerBuilder(listener, evt, eventType));\n\t\n\t                count += 1;\n\t                if (listener.once === true) {\n\t                    toRemove.push(i);\n\t                }\n\t            }\n\t        }\n\t\n\t        for (i = (toRemove.length - 1); i >= 0; i -= 1) {\n\t            eventList[eventType].splice(toRemove[i], 1);\n\t        }\n\t\n\t        log.debug(\"fired \" + that.className + \"#\" + eventType + \" \" + count + \" listeners called with params\", evt);\n\t    };\n\t\n\t    function listenerBuilder(listener, evt, eventType) {\n\t        return function () {\n\t            try {\n\t                listener.call(that, evt);\n\t            } catch (e) {\n\t                log.error('Error in ' + that.className + \"#\" + eventType, e.message, e.stack);\n\t            }\n\t        };\n\t    }\n\t\n\t    /**\n\t     * Determine if an object has had any listeners registered for a given event outside the library. This method\n\t     * checks for the isInternal flag on each listener and doesn't count it toward an event being listened to. This\n\t     * method is used in the library to handle situations where an action is needed if an event won't be acted on.\n\t     * For instance, if a call comes in for the logged-in user, but the developer isn't listening to\n\t     * {respoke.Client#call}, we'll need to reject the call immediately.\n\t     *\n\t     *     if (client.hasListeners('call')) {\n\t     *         // already handled!\n\t     *     }\n\t     *\n\t     * @memberof! respoke.EventEmitter\n\t     * @method respoke.EventEmitter.hasListeners\n\t     * @param {string} eventType - The name of the event\n\t     * @returns {boolean} Whether this event has any listeners that are external to this library.\n\t     */\n\t    that.hasListeners = function (eventType) {\n\t        if (eventType === undefined) {\n\t            throw new Error(\"Missing required parameter event type.\");\n\t        }\n\t\n\t        if (!eventList[eventType]) {\n\t            return false;\n\t        }\n\t\n\t        return !eventList[eventType].every(function eachListener(listener) {\n\t            return listener.isInternal;\n\t        });\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.EventEmitter\n\t/**\n\t * @callback respoke.EventEmitter.eventListener\n\t * @param {respoke.Event} evt\n\t */\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\t/**\n\t * Empty base class. Use params.that (if exists) for the base object, but delete it from the instance.\n\t * Copy all params that were passed in onto the base object. Add the class name.\n\t * @class respoke.Class\n\t * @private\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = params.that || {};\n\t\n\t    that.className = 'respoke.Class';\n\t    delete params.that;\n\t    delete that.client;\n\t\n\t    Object.keys(params).forEach(function copyParam(name) {\n\t        that[name] = params[name];\n\t    });\n\t\n\t    return that;\n\t};\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// vim:ts=4:sts=4:sw=4:\n\t/*!\n\t *\n\t * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n\t * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n\t *\n\t * With parts by Tyler Close\n\t * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n\t * at http://www.opensource.org/licenses/mit-license.html\n\t * Forked at ref_send.js version: 2009-05-11\n\t *\n\t * With parts by Mark Miller\n\t * Copyright (C) 2011 Google Inc.\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t *\n\t */\n\t\n\t(function (definition) {\n\t    \"use strict\";\n\t\n\t    // This file will function properly as a <script> tag, or a module\n\t    // using CommonJS and NodeJS or RequireJS module formats.  In\n\t    // Common/Node/RequireJS, the module exports the Q API and when\n\t    // executed as a simple <script>, it creates a Q global instead.\n\t\n\t    // Montage Require\n\t    if (typeof bootstrap === \"function\") {\n\t        bootstrap(\"promise\", definition);\n\t\n\t    // CommonJS\n\t    } else if (true) {\n\t        module.exports = definition();\n\t\n\t    // RequireJS\n\t    } else if (typeof define === \"function\" && define.amd) {\n\t        define(definition);\n\t\n\t    // SES (Secure EcmaScript)\n\t    } else if (typeof ses !== \"undefined\") {\n\t        if (!ses.ok()) {\n\t            return;\n\t        } else {\n\t            ses.makeQ = definition;\n\t        }\n\t\n\t    // <script>\n\t    } else if (typeof self !== \"undefined\") {\n\t        self.Q = definition();\n\t\n\t    } else {\n\t        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n\t    }\n\t\n\t})(function () {\n\t\"use strict\";\n\t\n\tvar hasStacks = false;\n\ttry {\n\t    throw new Error();\n\t} catch (e) {\n\t    hasStacks = !!e.stack;\n\t}\n\t\n\t// All code after this point will be filtered from stack traces reported\n\t// by Q.\n\tvar qStartingLine = captureLine();\n\tvar qFileName;\n\t\n\t// shims\n\t\n\t// used for fallback in \"allResolved\"\n\tvar noop = function () {};\n\t\n\t// Use the fastest possible means to execute a task in a future turn\n\t// of the event loop.\n\tvar nextTick =(function () {\n\t    // linked list of tasks (single, with head node)\n\t    var head = {task: void 0, next: null};\n\t    var tail = head;\n\t    var flushing = false;\n\t    var requestTick = void 0;\n\t    var isNodeJS = false;\n\t    // queue for late tasks, used by unhandled rejection tracking\n\t    var laterQueue = [];\n\t\n\t    function flush() {\n\t        /* jshint loopfunc: true */\n\t        var task, domain;\n\t\n\t        while (head.next) {\n\t            head = head.next;\n\t            task = head.task;\n\t            head.task = void 0;\n\t            domain = head.domain;\n\t\n\t            if (domain) {\n\t                head.domain = void 0;\n\t                domain.enter();\n\t            }\n\t            runSingle(task, domain);\n\t\n\t        }\n\t        while (laterQueue.length) {\n\t            task = laterQueue.pop();\n\t            runSingle(task);\n\t        }\n\t        flushing = false;\n\t    }\n\t    // runs a single function in the async queue\n\t    function runSingle(task, domain) {\n\t        try {\n\t            task();\n\t\n\t        } catch (e) {\n\t            if (isNodeJS) {\n\t                // In node, uncaught exceptions are considered fatal errors.\n\t                // Re-throw them synchronously to interrupt flushing!\n\t\n\t                // Ensure continuation if the uncaught exception is suppressed\n\t                // listening \"uncaughtException\" events (as domains does).\n\t                // Continue in next event to avoid tick recursion.\n\t                if (domain) {\n\t                    domain.exit();\n\t                }\n\t                setTimeout(flush, 0);\n\t                if (domain) {\n\t                    domain.enter();\n\t                }\n\t\n\t                throw e;\n\t\n\t            } else {\n\t                // In browsers, uncaught exceptions are not fatal.\n\t                // Re-throw them asynchronously to avoid slow-downs.\n\t                setTimeout(function () {\n\t                    throw e;\n\t                }, 0);\n\t            }\n\t        }\n\t\n\t        if (domain) {\n\t            domain.exit();\n\t        }\n\t    }\n\t\n\t    nextTick = function (task) {\n\t        tail = tail.next = {\n\t            task: task,\n\t            domain: isNodeJS && process.domain,\n\t            next: null\n\t        };\n\t\n\t        if (!flushing) {\n\t            flushing = true;\n\t            requestTick();\n\t        }\n\t    };\n\t\n\t    if (typeof process === \"object\" &&\n\t        process.toString() === \"[object process]\" && process.nextTick) {\n\t        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n\t        // To see through fake Node environments:\n\t        // * Mocha test runner - exposes a `process` global without a `nextTick`\n\t        // * Browserify - exposes a `process.nexTick` function that uses\n\t        //   `setTimeout`. In this case `setImmediate` is preferred because\n\t        //    it is faster. Browserify's `process.toString()` yields\n\t        //   \"[object Object]\", while in a real Node environment\n\t        //   `process.nextTick()` yields \"[object process]\".\n\t        isNodeJS = true;\n\t\n\t        requestTick = function () {\n\t            process.nextTick(flush);\n\t        };\n\t\n\t    } else if (typeof setImmediate === \"function\") {\n\t        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n\t        if (typeof window !== \"undefined\") {\n\t            requestTick = setImmediate.bind(window, flush);\n\t        } else {\n\t            requestTick = function () {\n\t                setImmediate(flush);\n\t            };\n\t        }\n\t\n\t    } else if (typeof MessageChannel !== \"undefined\") {\n\t        // modern browsers\n\t        // http://www.nonblocking.io/2011/06/windownexttick.html\n\t        var channel = new MessageChannel();\n\t        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n\t        // working message ports the first time a page loads.\n\t        channel.port1.onmessage = function () {\n\t            requestTick = requestPortTick;\n\t            channel.port1.onmessage = flush;\n\t            flush();\n\t        };\n\t        var requestPortTick = function () {\n\t            // Opera requires us to provide a message payload, regardless of\n\t            // whether we use it.\n\t            channel.port2.postMessage(0);\n\t        };\n\t        requestTick = function () {\n\t            setTimeout(flush, 0);\n\t            requestPortTick();\n\t        };\n\t\n\t    } else {\n\t        // old browsers\n\t        requestTick = function () {\n\t            setTimeout(flush, 0);\n\t        };\n\t    }\n\t    // runs a task after all other tasks have been run\n\t    // this is useful for unhandled rejection tracking that needs to happen\n\t    // after all `then`d tasks have been run.\n\t    nextTick.runAfter = function (task) {\n\t        laterQueue.push(task);\n\t        if (!flushing) {\n\t            flushing = true;\n\t            requestTick();\n\t        }\n\t    };\n\t    return nextTick;\n\t})();\n\t\n\t// Attempt to make generics safe in the face of downstream\n\t// modifications.\n\t// There is no situation where this is necessary.\n\t// If you need a security guarantee, these primordials need to be\n\t// deeply frozen anyway, and if you don’t need a security guarantee,\n\t// this is just plain paranoid.\n\t// However, this **might** have the nice side-effect of reducing the size of\n\t// the minified code by reducing x.call() to merely x()\n\t// See Mark Miller’s explanation of what this does.\n\t// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n\tvar call = Function.call;\n\tfunction uncurryThis(f) {\n\t    return function () {\n\t        return call.apply(f, arguments);\n\t    };\n\t}\n\t// This is equivalent, but slower:\n\t// uncurryThis = Function_bind.bind(Function_bind.call);\n\t// http://jsperf.com/uncurrythis\n\t\n\tvar array_slice = uncurryThis(Array.prototype.slice);\n\t\n\tvar array_reduce = uncurryThis(\n\t    Array.prototype.reduce || function (callback, basis) {\n\t        var index = 0,\n\t            length = this.length;\n\t        // concerning the initial value, if one is not provided\n\t        if (arguments.length === 1) {\n\t            // seek to the first value in the array, accounting\n\t            // for the possibility that is is a sparse array\n\t            do {\n\t                if (index in this) {\n\t                    basis = this[index++];\n\t                    break;\n\t                }\n\t                if (++index >= length) {\n\t                    throw new TypeError();\n\t                }\n\t            } while (1);\n\t        }\n\t        // reduce\n\t        for (; index < length; index++) {\n\t            // account for the possibility that the array is sparse\n\t            if (index in this) {\n\t                basis = callback(basis, this[index], index);\n\t            }\n\t        }\n\t        return basis;\n\t    }\n\t);\n\t\n\tvar array_indexOf = uncurryThis(\n\t    Array.prototype.indexOf || function (value) {\n\t        // not a very good shim, but good enough for our one use of it\n\t        for (var i = 0; i < this.length; i++) {\n\t            if (this[i] === value) {\n\t                return i;\n\t            }\n\t        }\n\t        return -1;\n\t    }\n\t);\n\t\n\tvar array_map = uncurryThis(\n\t    Array.prototype.map || function (callback, thisp) {\n\t        var self = this;\n\t        var collect = [];\n\t        array_reduce(self, function (undefined, value, index) {\n\t            collect.push(callback.call(thisp, value, index, self));\n\t        }, void 0);\n\t        return collect;\n\t    }\n\t);\n\t\n\tvar object_create = Object.create || function (prototype) {\n\t    function Type() { }\n\t    Type.prototype = prototype;\n\t    return new Type();\n\t};\n\t\n\tvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\t\n\tvar object_keys = Object.keys || function (object) {\n\t    var keys = [];\n\t    for (var key in object) {\n\t        if (object_hasOwnProperty(object, key)) {\n\t            keys.push(key);\n\t        }\n\t    }\n\t    return keys;\n\t};\n\t\n\tvar object_toString = uncurryThis(Object.prototype.toString);\n\t\n\tfunction isObject(value) {\n\t    return value === Object(value);\n\t}\n\t\n\t// generator related shims\n\t\n\t// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\n\tfunction isStopIteration(exception) {\n\t    return (\n\t        object_toString(exception) === \"[object StopIteration]\" ||\n\t        exception instanceof QReturnValue\n\t    );\n\t}\n\t\n\t// FIXME: Remove this helper and Q.return once ES6 generators are in\n\t// SpiderMonkey.\n\tvar QReturnValue;\n\tif (typeof ReturnValue !== \"undefined\") {\n\t    QReturnValue = ReturnValue;\n\t} else {\n\t    QReturnValue = function (value) {\n\t        this.value = value;\n\t    };\n\t}\n\t\n\t// long stack traces\n\t\n\tvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\t\n\tfunction makeStackTraceLong(error, promise) {\n\t    // If possible, transform the error stack trace by removing Node and Q\n\t    // cruft, then concatenating with the stack trace of `promise`. See #57.\n\t    if (hasStacks &&\n\t        promise.stack &&\n\t        typeof error === \"object\" &&\n\t        error !== null &&\n\t        error.stack &&\n\t        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n\t    ) {\n\t        var stacks = [];\n\t        for (var p = promise; !!p; p = p.source) {\n\t            if (p.stack) {\n\t                stacks.unshift(p.stack);\n\t            }\n\t        }\n\t        stacks.unshift(error.stack);\n\t\n\t        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n\t        error.stack = filterStackString(concatedStacks);\n\t    }\n\t}\n\t\n\tfunction filterStackString(stackString) {\n\t    var lines = stackString.split(\"\\n\");\n\t    var desiredLines = [];\n\t    for (var i = 0; i < lines.length; ++i) {\n\t        var line = lines[i];\n\t\n\t        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n\t            desiredLines.push(line);\n\t        }\n\t    }\n\t    return desiredLines.join(\"\\n\");\n\t}\n\t\n\tfunction isNodeFrame(stackLine) {\n\t    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n\t           stackLine.indexOf(\"(node.js:\") !== -1;\n\t}\n\t\n\tfunction getFileNameAndLineNumber(stackLine) {\n\t    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n\t    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n\t    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n\t    if (attempt1) {\n\t        return [attempt1[1], Number(attempt1[2])];\n\t    }\n\t\n\t    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n\t    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n\t    if (attempt2) {\n\t        return [attempt2[1], Number(attempt2[2])];\n\t    }\n\t\n\t    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n\t    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n\t    if (attempt3) {\n\t        return [attempt3[1], Number(attempt3[2])];\n\t    }\n\t}\n\t\n\tfunction isInternalFrame(stackLine) {\n\t    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\t\n\t    if (!fileNameAndLineNumber) {\n\t        return false;\n\t    }\n\t\n\t    var fileName = fileNameAndLineNumber[0];\n\t    var lineNumber = fileNameAndLineNumber[1];\n\t\n\t    return fileName === qFileName &&\n\t        lineNumber >= qStartingLine &&\n\t        lineNumber <= qEndingLine;\n\t}\n\t\n\t// discover own file name and line number range for filtering stack\n\t// traces\n\tfunction captureLine() {\n\t    if (!hasStacks) {\n\t        return;\n\t    }\n\t\n\t    try {\n\t        throw new Error();\n\t    } catch (e) {\n\t        var lines = e.stack.split(\"\\n\");\n\t        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n\t        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n\t        if (!fileNameAndLineNumber) {\n\t            return;\n\t        }\n\t\n\t        qFileName = fileNameAndLineNumber[0];\n\t        return fileNameAndLineNumber[1];\n\t    }\n\t}\n\t\n\tfunction deprecate(callback, name, alternative) {\n\t    return function () {\n\t        if (typeof console !== \"undefined\" &&\n\t            typeof console.warn === \"function\") {\n\t            console.warn(name + \" is deprecated, use \" + alternative +\n\t                         \" instead.\", new Error(\"\").stack);\n\t        }\n\t        return callback.apply(callback, arguments);\n\t    };\n\t}\n\t\n\t// end of shims\n\t// beginning of real work\n\t\n\t/**\n\t * Constructs a promise for an immediate reference, passes promises through, or\n\t * coerces promises from different systems.\n\t * @param value immediate reference or promise\n\t */\n\tfunction Q(value) {\n\t    // If the object is already a Promise, return it directly.  This enables\n\t    // the resolve function to both be used to created references from objects,\n\t    // but to tolerably coerce non-promises to promises.\n\t    if (value instanceof Promise) {\n\t        return value;\n\t    }\n\t\n\t    // assimilate thenables\n\t    if (isPromiseAlike(value)) {\n\t        return coerce(value);\n\t    } else {\n\t        return fulfill(value);\n\t    }\n\t}\n\tQ.resolve = Q;\n\t\n\t/**\n\t * Performs a task in a future turn of the event loop.\n\t * @param {Function} task\n\t */\n\tQ.nextTick = nextTick;\n\t\n\t/**\n\t * Controls whether or not long stack traces will be on\n\t */\n\tQ.longStackSupport = false;\n\t\n\t// enable long stacks if Q_DEBUG is set\n\tif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n\t    Q.longStackSupport = true;\n\t}\n\t\n\t/**\n\t * Constructs a {promise, resolve, reject} object.\n\t *\n\t * `resolve` is a callback to invoke with a more resolved value for the\n\t * promise. To fulfill the promise, invoke `resolve` with any value that is\n\t * not a thenable. To reject the promise, invoke `resolve` with a rejected\n\t * thenable, or invoke `reject` with the reason directly. To resolve the\n\t * promise to another thenable, thus putting it in the same state, invoke\n\t * `resolve` with that other thenable.\n\t */\n\tQ.defer = defer;\n\tfunction defer() {\n\t    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n\t    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n\t    // element of the messages array is itself an array of complete arguments to\n\t    // forward to the resolved promise.  We coerce the resolution value to a\n\t    // promise using the `resolve` function because it handles both fully\n\t    // non-thenable values and other thenables gracefully.\n\t    var messages = [], progressListeners = [], resolvedPromise;\n\t\n\t    var deferred = object_create(defer.prototype);\n\t    var promise = object_create(Promise.prototype);\n\t\n\t    promise.promiseDispatch = function (resolve, op, operands) {\n\t        var args = array_slice(arguments);\n\t        if (messages) {\n\t            messages.push(args);\n\t            if (op === \"when\" && operands[1]) { // progress operand\n\t                progressListeners.push(operands[1]);\n\t            }\n\t        } else {\n\t            Q.nextTick(function () {\n\t                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n\t            });\n\t        }\n\t    };\n\t\n\t    // XXX deprecated\n\t    promise.valueOf = function () {\n\t        if (messages) {\n\t            return promise;\n\t        }\n\t        var nearerValue = nearer(resolvedPromise);\n\t        if (isPromise(nearerValue)) {\n\t            resolvedPromise = nearerValue; // shorten chain\n\t        }\n\t        return nearerValue;\n\t    };\n\t\n\t    promise.inspect = function () {\n\t        if (!resolvedPromise) {\n\t            return { state: \"pending\" };\n\t        }\n\t        return resolvedPromise.inspect();\n\t    };\n\t\n\t    if (Q.longStackSupport && hasStacks) {\n\t        try {\n\t            throw new Error();\n\t        } catch (e) {\n\t            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n\t            // accessor around; that causes memory leaks as per GH-111. Just\n\t            // reify the stack trace as a string ASAP.\n\t            //\n\t            // At the same time, cut off the first line; it's always just\n\t            // \"[object Promise]\\n\", as per the `toString`.\n\t            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n\t        }\n\t    }\n\t\n\t    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n\t    // consolidating them into `become`, since otherwise we'd create new\n\t    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\t\n\t    function become(newPromise) {\n\t        resolvedPromise = newPromise;\n\t        promise.source = newPromise;\n\t\n\t        array_reduce(messages, function (undefined, message) {\n\t            Q.nextTick(function () {\n\t                newPromise.promiseDispatch.apply(newPromise, message);\n\t            });\n\t        }, void 0);\n\t\n\t        messages = void 0;\n\t        progressListeners = void 0;\n\t    }\n\t\n\t    deferred.promise = promise;\n\t    deferred.resolve = function (value) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\t\n\t        become(Q(value));\n\t    };\n\t\n\t    deferred.fulfill = function (value) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\t\n\t        become(fulfill(value));\n\t    };\n\t    deferred.reject = function (reason) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\t\n\t        become(reject(reason));\n\t    };\n\t    deferred.notify = function (progress) {\n\t        if (resolvedPromise) {\n\t            return;\n\t        }\n\t\n\t        array_reduce(progressListeners, function (undefined, progressListener) {\n\t            Q.nextTick(function () {\n\t                progressListener(progress);\n\t            });\n\t        }, void 0);\n\t    };\n\t\n\t    return deferred;\n\t}\n\t\n\t/**\n\t * Creates a Node-style callback that will resolve or reject the deferred\n\t * promise.\n\t * @returns a nodeback\n\t */\n\tdefer.prototype.makeNodeResolver = function () {\n\t    var self = this;\n\t    return function (error, value) {\n\t        if (error) {\n\t            self.reject(error);\n\t        } else if (arguments.length > 2) {\n\t            self.resolve(array_slice(arguments, 1));\n\t        } else {\n\t            self.resolve(value);\n\t        }\n\t    };\n\t};\n\t\n\t/**\n\t * @param resolver {Function} a function that returns nothing and accepts\n\t * the resolve, reject, and notify functions for a deferred.\n\t * @returns a promise that may be resolved with the given resolve and reject\n\t * functions, or rejected by a thrown exception in resolver\n\t */\n\tQ.Promise = promise; // ES6\n\tQ.promise = promise;\n\tfunction promise(resolver) {\n\t    if (typeof resolver !== \"function\") {\n\t        throw new TypeError(\"resolver must be a function.\");\n\t    }\n\t    var deferred = defer();\n\t    try {\n\t        resolver(deferred.resolve, deferred.reject, deferred.notify);\n\t    } catch (reason) {\n\t        deferred.reject(reason);\n\t    }\n\t    return deferred.promise;\n\t}\n\t\n\tpromise.race = race; // ES6\n\tpromise.all = all; // ES6\n\tpromise.reject = reject; // ES6\n\tpromise.resolve = Q; // ES6\n\t\n\t// XXX experimental.  This method is a way to denote that a local value is\n\t// serializable and should be immediately dispatched to a remote upon request,\n\t// instead of passing a reference.\n\tQ.passByCopy = function (object) {\n\t    //freeze(object);\n\t    //passByCopies.set(object, true);\n\t    return object;\n\t};\n\t\n\tPromise.prototype.passByCopy = function () {\n\t    //freeze(object);\n\t    //passByCopies.set(object, true);\n\t    return this;\n\t};\n\t\n\t/**\n\t * If two promises eventually fulfill to the same value, promises that value,\n\t * but otherwise rejects.\n\t * @param x {Any*}\n\t * @param y {Any*}\n\t * @returns {Any*} a promise for x and y if they are the same, but a rejection\n\t * otherwise.\n\t *\n\t */\n\tQ.join = function (x, y) {\n\t    return Q(x).join(y);\n\t};\n\t\n\tPromise.prototype.join = function (that) {\n\t    return Q([this, that]).spread(function (x, y) {\n\t        if (x === y) {\n\t            // TODO: \"===\" should be Object.is or equiv\n\t            return x;\n\t        } else {\n\t            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n\t        }\n\t    });\n\t};\n\t\n\t/**\n\t * Returns a promise for the first of an array of promises to become settled.\n\t * @param answers {Array[Any*]} promises to race\n\t * @returns {Any*} the first promise to be settled\n\t */\n\tQ.race = race;\n\tfunction race(answerPs) {\n\t    return promise(function (resolve, reject) {\n\t        // Switch to this once we can assume at least ES5\n\t        // answerPs.forEach(function (answerP) {\n\t        //     Q(answerP).then(resolve, reject);\n\t        // });\n\t        // Use this in the meantime\n\t        for (var i = 0, len = answerPs.length; i < len; i++) {\n\t            Q(answerPs[i]).then(resolve, reject);\n\t        }\n\t    });\n\t}\n\t\n\tPromise.prototype.race = function () {\n\t    return this.then(Q.race);\n\t};\n\t\n\t/**\n\t * Constructs a Promise with a promise descriptor object and optional fallback\n\t * function.  The descriptor contains methods like when(rejected), get(name),\n\t * set(name, value), post(name, args), and delete(name), which all\n\t * return either a value, a promise for a value, or a rejection.  The fallback\n\t * accepts the operation name, a resolver, and any further arguments that would\n\t * have been forwarded to the appropriate method above had a method been\n\t * provided with the proper name.  The API makes no guarantees about the nature\n\t * of the returned object, apart from that it is usable whereever promises are\n\t * bought and sold.\n\t */\n\tQ.makePromise = Promise;\n\tfunction Promise(descriptor, fallback, inspect) {\n\t    if (fallback === void 0) {\n\t        fallback = function (op) {\n\t            return reject(new Error(\n\t                \"Promise does not support operation: \" + op\n\t            ));\n\t        };\n\t    }\n\t    if (inspect === void 0) {\n\t        inspect = function () {\n\t            return {state: \"unknown\"};\n\t        };\n\t    }\n\t\n\t    var promise = object_create(Promise.prototype);\n\t\n\t    promise.promiseDispatch = function (resolve, op, args) {\n\t        var result;\n\t        try {\n\t            if (descriptor[op]) {\n\t                result = descriptor[op].apply(promise, args);\n\t            } else {\n\t                result = fallback.call(promise, op, args);\n\t            }\n\t        } catch (exception) {\n\t            result = reject(exception);\n\t        }\n\t        if (resolve) {\n\t            resolve(result);\n\t        }\n\t    };\n\t\n\t    promise.inspect = inspect;\n\t\n\t    // XXX deprecated `valueOf` and `exception` support\n\t    if (inspect) {\n\t        var inspected = inspect();\n\t        if (inspected.state === \"rejected\") {\n\t            promise.exception = inspected.reason;\n\t        }\n\t\n\t        promise.valueOf = function () {\n\t            var inspected = inspect();\n\t            if (inspected.state === \"pending\" ||\n\t                inspected.state === \"rejected\") {\n\t                return promise;\n\t            }\n\t            return inspected.value;\n\t        };\n\t    }\n\t\n\t    return promise;\n\t}\n\t\n\tPromise.prototype.toString = function () {\n\t    return \"[object Promise]\";\n\t};\n\t\n\tPromise.prototype.then = function (fulfilled, rejected, progressed) {\n\t    var self = this;\n\t    var deferred = defer();\n\t    var done = false;   // ensure the untrusted promise makes at most a\n\t                        // single call to one of the callbacks\n\t\n\t    function _fulfilled(value) {\n\t        try {\n\t            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n\t        } catch (exception) {\n\t            return reject(exception);\n\t        }\n\t    }\n\t\n\t    function _rejected(exception) {\n\t        if (typeof rejected === \"function\") {\n\t            makeStackTraceLong(exception, self);\n\t            try {\n\t                return rejected(exception);\n\t            } catch (newException) {\n\t                return reject(newException);\n\t            }\n\t        }\n\t        return reject(exception);\n\t    }\n\t\n\t    function _progressed(value) {\n\t        return typeof progressed === \"function\" ? progressed(value) : value;\n\t    }\n\t\n\t    Q.nextTick(function () {\n\t        self.promiseDispatch(function (value) {\n\t            if (done) {\n\t                return;\n\t            }\n\t            done = true;\n\t\n\t            deferred.resolve(_fulfilled(value));\n\t        }, \"when\", [function (exception) {\n\t            if (done) {\n\t                return;\n\t            }\n\t            done = true;\n\t\n\t            deferred.resolve(_rejected(exception));\n\t        }]);\n\t    });\n\t\n\t    // Progress propagator need to be attached in the current tick.\n\t    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n\t        var newValue;\n\t        var threw = false;\n\t        try {\n\t            newValue = _progressed(value);\n\t        } catch (e) {\n\t            threw = true;\n\t            if (Q.onerror) {\n\t                Q.onerror(e);\n\t            } else {\n\t                throw e;\n\t            }\n\t        }\n\t\n\t        if (!threw) {\n\t            deferred.notify(newValue);\n\t        }\n\t    }]);\n\t\n\t    return deferred.promise;\n\t};\n\t\n\tQ.tap = function (promise, callback) {\n\t    return Q(promise).tap(callback);\n\t};\n\t\n\t/**\n\t * Works almost like \"finally\", but not called for rejections.\n\t * Original resolution value is passed through callback unaffected.\n\t * Callback may return a promise that will be awaited for.\n\t * @param {Function} callback\n\t * @returns {Q.Promise}\n\t * @example\n\t * doSomething()\n\t *   .then(...)\n\t *   .tap(console.log)\n\t *   .then(...);\n\t */\n\tPromise.prototype.tap = function (callback) {\n\t    callback = Q(callback);\n\t\n\t    return this.then(function (value) {\n\t        return callback.fcall(value).thenResolve(value);\n\t    });\n\t};\n\t\n\t/**\n\t * Registers an observer on a promise.\n\t *\n\t * Guarantees:\n\t *\n\t * 1. that fulfilled and rejected will be called only once.\n\t * 2. that either the fulfilled callback or the rejected callback will be\n\t *    called, but not both.\n\t * 3. that fulfilled and rejected will not be called in this turn.\n\t *\n\t * @param value      promise or immediate reference to observe\n\t * @param fulfilled  function to be called with the fulfilled value\n\t * @param rejected   function to be called with the rejection exception\n\t * @param progressed function to be called on any progress notifications\n\t * @return promise for the return value from the invoked callback\n\t */\n\tQ.when = when;\n\tfunction when(value, fulfilled, rejected, progressed) {\n\t    return Q(value).then(fulfilled, rejected, progressed);\n\t}\n\t\n\tPromise.prototype.thenResolve = function (value) {\n\t    return this.then(function () { return value; });\n\t};\n\t\n\tQ.thenResolve = function (promise, value) {\n\t    return Q(promise).thenResolve(value);\n\t};\n\t\n\tPromise.prototype.thenReject = function (reason) {\n\t    return this.then(function () { throw reason; });\n\t};\n\t\n\tQ.thenReject = function (promise, reason) {\n\t    return Q(promise).thenReject(reason);\n\t};\n\t\n\t/**\n\t * If an object is not a promise, it is as \"near\" as possible.\n\t * If a promise is rejected, it is as \"near\" as possible too.\n\t * If it’s a fulfilled promise, the fulfillment value is nearer.\n\t * If it’s a deferred promise and the deferred has been resolved, the\n\t * resolution is \"nearer\".\n\t * @param object\n\t * @returns most resolved (nearest) form of the object\n\t */\n\t\n\t// XXX should we re-do this?\n\tQ.nearer = nearer;\n\tfunction nearer(value) {\n\t    if (isPromise(value)) {\n\t        var inspected = value.inspect();\n\t        if (inspected.state === \"fulfilled\") {\n\t            return inspected.value;\n\t        }\n\t    }\n\t    return value;\n\t}\n\t\n\t/**\n\t * @returns whether the given object is a promise.\n\t * Otherwise it is a fulfilled value.\n\t */\n\tQ.isPromise = isPromise;\n\tfunction isPromise(object) {\n\t    return object instanceof Promise;\n\t}\n\t\n\tQ.isPromiseAlike = isPromiseAlike;\n\tfunction isPromiseAlike(object) {\n\t    return isObject(object) && typeof object.then === \"function\";\n\t}\n\t\n\t/**\n\t * @returns whether the given object is a pending promise, meaning not\n\t * fulfilled or rejected.\n\t */\n\tQ.isPending = isPending;\n\tfunction isPending(object) {\n\t    return isPromise(object) && object.inspect().state === \"pending\";\n\t}\n\t\n\tPromise.prototype.isPending = function () {\n\t    return this.inspect().state === \"pending\";\n\t};\n\t\n\t/**\n\t * @returns whether the given object is a value or fulfilled\n\t * promise.\n\t */\n\tQ.isFulfilled = isFulfilled;\n\tfunction isFulfilled(object) {\n\t    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n\t}\n\t\n\tPromise.prototype.isFulfilled = function () {\n\t    return this.inspect().state === \"fulfilled\";\n\t};\n\t\n\t/**\n\t * @returns whether the given object is a rejected promise.\n\t */\n\tQ.isRejected = isRejected;\n\tfunction isRejected(object) {\n\t    return isPromise(object) && object.inspect().state === \"rejected\";\n\t}\n\t\n\tPromise.prototype.isRejected = function () {\n\t    return this.inspect().state === \"rejected\";\n\t};\n\t\n\t//// BEGIN UNHANDLED REJECTION TRACKING\n\t\n\t// This promise library consumes exceptions thrown in handlers so they can be\n\t// handled by a subsequent promise.  The exceptions get added to this array when\n\t// they are created, and removed when they are handled.  Note that in ES6 or\n\t// shimmed environments, this would naturally be a `Set`.\n\tvar unhandledReasons = [];\n\tvar unhandledRejections = [];\n\tvar reportedUnhandledRejections = [];\n\tvar trackUnhandledRejections = true;\n\t\n\tfunction resetUnhandledRejections() {\n\t    unhandledReasons.length = 0;\n\t    unhandledRejections.length = 0;\n\t\n\t    if (!trackUnhandledRejections) {\n\t        trackUnhandledRejections = true;\n\t    }\n\t}\n\t\n\tfunction trackRejection(promise, reason) {\n\t    if (!trackUnhandledRejections) {\n\t        return;\n\t    }\n\t    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n\t        Q.nextTick.runAfter(function () {\n\t            if (array_indexOf(unhandledRejections, promise) !== -1) {\n\t                process.emit(\"unhandledRejection\", reason, promise);\n\t                reportedUnhandledRejections.push(promise);\n\t            }\n\t        });\n\t    }\n\t\n\t    unhandledRejections.push(promise);\n\t    if (reason && typeof reason.stack !== \"undefined\") {\n\t        unhandledReasons.push(reason.stack);\n\t    } else {\n\t        unhandledReasons.push(\"(no stack) \" + reason);\n\t    }\n\t}\n\t\n\tfunction untrackRejection(promise) {\n\t    if (!trackUnhandledRejections) {\n\t        return;\n\t    }\n\t\n\t    var at = array_indexOf(unhandledRejections, promise);\n\t    if (at !== -1) {\n\t        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n\t            Q.nextTick.runAfter(function () {\n\t                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n\t                if (atReport !== -1) {\n\t                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n\t                    reportedUnhandledRejections.splice(atReport, 1);\n\t                }\n\t            });\n\t        }\n\t        unhandledRejections.splice(at, 1);\n\t        unhandledReasons.splice(at, 1);\n\t    }\n\t}\n\t\n\tQ.resetUnhandledRejections = resetUnhandledRejections;\n\t\n\tQ.getUnhandledReasons = function () {\n\t    // Make a copy so that consumers can't interfere with our internal state.\n\t    return unhandledReasons.slice();\n\t};\n\t\n\tQ.stopUnhandledRejectionTracking = function () {\n\t    resetUnhandledRejections();\n\t    trackUnhandledRejections = false;\n\t};\n\t\n\tresetUnhandledRejections();\n\t\n\t//// END UNHANDLED REJECTION TRACKING\n\t\n\t/**\n\t * Constructs a rejected promise.\n\t * @param reason value describing the failure\n\t */\n\tQ.reject = reject;\n\tfunction reject(reason) {\n\t    var rejection = Promise({\n\t        \"when\": function (rejected) {\n\t            // note that the error has been handled\n\t            if (rejected) {\n\t                untrackRejection(this);\n\t            }\n\t            return rejected ? rejected(reason) : this;\n\t        }\n\t    }, function fallback() {\n\t        return this;\n\t    }, function inspect() {\n\t        return { state: \"rejected\", reason: reason };\n\t    });\n\t\n\t    // Note that the reason has not been handled.\n\t    trackRejection(rejection, reason);\n\t\n\t    return rejection;\n\t}\n\t\n\t/**\n\t * Constructs a fulfilled promise for an immediate reference.\n\t * @param value immediate reference\n\t */\n\tQ.fulfill = fulfill;\n\tfunction fulfill(value) {\n\t    return Promise({\n\t        \"when\": function () {\n\t            return value;\n\t        },\n\t        \"get\": function (name) {\n\t            return value[name];\n\t        },\n\t        \"set\": function (name, rhs) {\n\t            value[name] = rhs;\n\t        },\n\t        \"delete\": function (name) {\n\t            delete value[name];\n\t        },\n\t        \"post\": function (name, args) {\n\t            // Mark Miller proposes that post with no name should apply a\n\t            // promised function.\n\t            if (name === null || name === void 0) {\n\t                return value.apply(void 0, args);\n\t            } else {\n\t                return value[name].apply(value, args);\n\t            }\n\t        },\n\t        \"apply\": function (thisp, args) {\n\t            return value.apply(thisp, args);\n\t        },\n\t        \"keys\": function () {\n\t            return object_keys(value);\n\t        }\n\t    }, void 0, function inspect() {\n\t        return { state: \"fulfilled\", value: value };\n\t    });\n\t}\n\t\n\t/**\n\t * Converts thenables to Q promises.\n\t * @param promise thenable promise\n\t * @returns a Q promise\n\t */\n\tfunction coerce(promise) {\n\t    var deferred = defer();\n\t    Q.nextTick(function () {\n\t        try {\n\t            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n\t        } catch (exception) {\n\t            deferred.reject(exception);\n\t        }\n\t    });\n\t    return deferred.promise;\n\t}\n\t\n\t/**\n\t * Annotates an object such that it will never be\n\t * transferred away from this process over any promise\n\t * communication channel.\n\t * @param object\n\t * @returns promise a wrapping of that object that\n\t * additionally responds to the \"isDef\" message\n\t * without a rejection.\n\t */\n\tQ.master = master;\n\tfunction master(object) {\n\t    return Promise({\n\t        \"isDef\": function () {}\n\t    }, function fallback(op, args) {\n\t        return dispatch(object, op, args);\n\t    }, function () {\n\t        return Q(object).inspect();\n\t    });\n\t}\n\t\n\t/**\n\t * Spreads the values of a promised array of arguments into the\n\t * fulfillment callback.\n\t * @param fulfilled callback that receives variadic arguments from the\n\t * promised array\n\t * @param rejected callback that receives the exception if the promise\n\t * is rejected.\n\t * @returns a promise for the return value or thrown exception of\n\t * either callback.\n\t */\n\tQ.spread = spread;\n\tfunction spread(value, fulfilled, rejected) {\n\t    return Q(value).spread(fulfilled, rejected);\n\t}\n\t\n\tPromise.prototype.spread = function (fulfilled, rejected) {\n\t    return this.all().then(function (array) {\n\t        return fulfilled.apply(void 0, array);\n\t    }, rejected);\n\t};\n\t\n\t/**\n\t * The async function is a decorator for generator functions, turning\n\t * them into asynchronous generators.  Although generators are only part\n\t * of the newest ECMAScript 6 drafts, this code does not cause syntax\n\t * errors in older engines.  This code should continue to work and will\n\t * in fact improve over time as the language improves.\n\t *\n\t * ES6 generators are currently part of V8 version 3.19 with the\n\t * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n\t * for longer, but under an older Python-inspired form.  This function\n\t * works on both kinds of generators.\n\t *\n\t * Decorates a generator function such that:\n\t *  - it may yield promises\n\t *  - execution will continue when that promise is fulfilled\n\t *  - the value of the yield expression will be the fulfilled value\n\t *  - it returns a promise for the return value (when the generator\n\t *    stops iterating)\n\t *  - the decorated function returns a promise for the return value\n\t *    of the generator or the first rejected promise among those\n\t *    yielded.\n\t *  - if an error is thrown in the generator, it propagates through\n\t *    every following yield until it is caught, or until it escapes\n\t *    the generator function altogether, and is translated into a\n\t *    rejection for the promise returned by the decorated generator.\n\t */\n\tQ.async = async;\n\tfunction async(makeGenerator) {\n\t    return function () {\n\t        // when verb is \"send\", arg is a value\n\t        // when verb is \"throw\", arg is an exception\n\t        function continuer(verb, arg) {\n\t            var result;\n\t\n\t            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n\t            // engine that has a deployed base of browsers that support generators.\n\t            // However, SM's generators use the Python-inspired semantics of\n\t            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n\t            // like to make it possible to use generators in deployed browsers, so\n\t            // we also support Python-style generators.  At some point we can remove\n\t            // this block.\n\t\n\t            if (typeof StopIteration === \"undefined\") {\n\t                // ES6 Generators\n\t                try {\n\t                    result = generator[verb](arg);\n\t                } catch (exception) {\n\t                    return reject(exception);\n\t                }\n\t                if (result.done) {\n\t                    return Q(result.value);\n\t                } else {\n\t                    return when(result.value, callback, errback);\n\t                }\n\t            } else {\n\t                // SpiderMonkey Generators\n\t                // FIXME: Remove this case when SM does ES6 generators.\n\t                try {\n\t                    result = generator[verb](arg);\n\t                } catch (exception) {\n\t                    if (isStopIteration(exception)) {\n\t                        return Q(exception.value);\n\t                    } else {\n\t                        return reject(exception);\n\t                    }\n\t                }\n\t                return when(result, callback, errback);\n\t            }\n\t        }\n\t        var generator = makeGenerator.apply(this, arguments);\n\t        var callback = continuer.bind(continuer, \"next\");\n\t        var errback = continuer.bind(continuer, \"throw\");\n\t        return callback();\n\t    };\n\t}\n\t\n\t/**\n\t * The spawn function is a small wrapper around async that immediately\n\t * calls the generator and also ends the promise chain, so that any\n\t * unhandled errors are thrown instead of forwarded to the error\n\t * handler. This is useful because it's extremely common to run\n\t * generators at the top-level to work with libraries.\n\t */\n\tQ.spawn = spawn;\n\tfunction spawn(makeGenerator) {\n\t    Q.done(Q.async(makeGenerator)());\n\t}\n\t\n\t// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n\t/**\n\t * Throws a ReturnValue exception to stop an asynchronous generator.\n\t *\n\t * This interface is a stop-gap measure to support generator return\n\t * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n\t * generators like Chromium 29, just use \"return\" in your generator\n\t * functions.\n\t *\n\t * @param value the return value for the surrounding generator\n\t * @throws ReturnValue exception with the value.\n\t * @example\n\t * // ES6 style\n\t * Q.async(function* () {\n\t *      var foo = yield getFooPromise();\n\t *      var bar = yield getBarPromise();\n\t *      return foo + bar;\n\t * })\n\t * // Older SpiderMonkey style\n\t * Q.async(function () {\n\t *      var foo = yield getFooPromise();\n\t *      var bar = yield getBarPromise();\n\t *      Q.return(foo + bar);\n\t * })\n\t */\n\tQ[\"return\"] = _return;\n\tfunction _return(value) {\n\t    throw new QReturnValue(value);\n\t}\n\t\n\t/**\n\t * The promised function decorator ensures that any promise arguments\n\t * are settled and passed as values (`this` is also settled and passed\n\t * as a value).  It will also ensure that the result of a function is\n\t * always a promise.\n\t *\n\t * @example\n\t * var add = Q.promised(function (a, b) {\n\t *     return a + b;\n\t * });\n\t * add(Q(a), Q(B));\n\t *\n\t * @param {function} callback The function to decorate\n\t * @returns {function} a function that has been decorated.\n\t */\n\tQ.promised = promised;\n\tfunction promised(callback) {\n\t    return function () {\n\t        return spread([this, all(arguments)], function (self, args) {\n\t            return callback.apply(self, args);\n\t        });\n\t    };\n\t}\n\t\n\t/**\n\t * sends a message to a value in a future turn\n\t * @param object* the recipient\n\t * @param op the name of the message operation, e.g., \"when\",\n\t * @param args further arguments to be forwarded to the operation\n\t * @returns result {Promise} a promise for the result of the operation\n\t */\n\tQ.dispatch = dispatch;\n\tfunction dispatch(object, op, args) {\n\t    return Q(object).dispatch(op, args);\n\t}\n\t\n\tPromise.prototype.dispatch = function (op, args) {\n\t    var self = this;\n\t    var deferred = defer();\n\t    Q.nextTick(function () {\n\t        self.promiseDispatch(deferred.resolve, op, args);\n\t    });\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Gets the value of a property in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of property to get\n\t * @return promise for the property value\n\t */\n\tQ.get = function (object, key) {\n\t    return Q(object).dispatch(\"get\", [key]);\n\t};\n\t\n\tPromise.prototype.get = function (key) {\n\t    return this.dispatch(\"get\", [key]);\n\t};\n\t\n\t/**\n\t * Sets the value of a property in a future turn.\n\t * @param object    promise or immediate reference for object object\n\t * @param name      name of property to set\n\t * @param value     new value of property\n\t * @return promise for the return value\n\t */\n\tQ.set = function (object, key, value) {\n\t    return Q(object).dispatch(\"set\", [key, value]);\n\t};\n\t\n\tPromise.prototype.set = function (key, value) {\n\t    return this.dispatch(\"set\", [key, value]);\n\t};\n\t\n\t/**\n\t * Deletes a property in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of property to delete\n\t * @return promise for the return value\n\t */\n\tQ.del = // XXX legacy\n\tQ[\"delete\"] = function (object, key) {\n\t    return Q(object).dispatch(\"delete\", [key]);\n\t};\n\t\n\tPromise.prototype.del = // XXX legacy\n\tPromise.prototype[\"delete\"] = function (key) {\n\t    return this.dispatch(\"delete\", [key]);\n\t};\n\t\n\t/**\n\t * Invokes a method in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of method to invoke\n\t * @param value     a value to post, typically an array of\n\t *                  invocation arguments for promises that\n\t *                  are ultimately backed with `resolve` values,\n\t *                  as opposed to those backed with URLs\n\t *                  wherein the posted value can be any\n\t *                  JSON serializable object.\n\t * @return promise for the return value\n\t */\n\t// bound locally because it is used by other methods\n\tQ.mapply = // XXX As proposed by \"Redsandro\"\n\tQ.post = function (object, name, args) {\n\t    return Q(object).dispatch(\"post\", [name, args]);\n\t};\n\t\n\tPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\n\tPromise.prototype.post = function (name, args) {\n\t    return this.dispatch(\"post\", [name, args]);\n\t};\n\t\n\t/**\n\t * Invokes a method in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @param name      name of method to invoke\n\t * @param ...args   array of invocation arguments\n\t * @return promise for the return value\n\t */\n\tQ.send = // XXX Mark Miller's proposed parlance\n\tQ.mcall = // XXX As proposed by \"Redsandro\"\n\tQ.invoke = function (object, name /*...args*/) {\n\t    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n\t};\n\t\n\tPromise.prototype.send = // XXX Mark Miller's proposed parlance\n\tPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\n\tPromise.prototype.invoke = function (name /*...args*/) {\n\t    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n\t};\n\t\n\t/**\n\t * Applies the promised function in a future turn.\n\t * @param object    promise or immediate reference for target function\n\t * @param args      array of application arguments\n\t */\n\tQ.fapply = function (object, args) {\n\t    return Q(object).dispatch(\"apply\", [void 0, args]);\n\t};\n\t\n\tPromise.prototype.fapply = function (args) {\n\t    return this.dispatch(\"apply\", [void 0, args]);\n\t};\n\t\n\t/**\n\t * Calls the promised function in a future turn.\n\t * @param object    promise or immediate reference for target function\n\t * @param ...args   array of application arguments\n\t */\n\tQ[\"try\"] =\n\tQ.fcall = function (object /* ...args*/) {\n\t    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n\t};\n\t\n\tPromise.prototype.fcall = function (/*...args*/) {\n\t    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n\t};\n\t\n\t/**\n\t * Binds the promised function, transforming return values into a fulfilled\n\t * promise and thrown errors into a rejected one.\n\t * @param object    promise or immediate reference for target function\n\t * @param ...args   array of application arguments\n\t */\n\tQ.fbind = function (object /*...args*/) {\n\t    var promise = Q(object);\n\t    var args = array_slice(arguments, 1);\n\t    return function fbound() {\n\t        return promise.dispatch(\"apply\", [\n\t            this,\n\t            args.concat(array_slice(arguments))\n\t        ]);\n\t    };\n\t};\n\tPromise.prototype.fbind = function (/*...args*/) {\n\t    var promise = this;\n\t    var args = array_slice(arguments);\n\t    return function fbound() {\n\t        return promise.dispatch(\"apply\", [\n\t            this,\n\t            args.concat(array_slice(arguments))\n\t        ]);\n\t    };\n\t};\n\t\n\t/**\n\t * Requests the names of the owned properties of a promised\n\t * object in a future turn.\n\t * @param object    promise or immediate reference for target object\n\t * @return promise for the keys of the eventually settled object\n\t */\n\tQ.keys = function (object) {\n\t    return Q(object).dispatch(\"keys\", []);\n\t};\n\t\n\tPromise.prototype.keys = function () {\n\t    return this.dispatch(\"keys\", []);\n\t};\n\t\n\t/**\n\t * Turns an array of promises into a promise for an array.  If any of\n\t * the promises gets rejected, the whole array is rejected immediately.\n\t * @param {Array*} an array (or promise for an array) of values (or\n\t * promises for values)\n\t * @returns a promise for an array of the corresponding values\n\t */\n\t// By Mark Miller\n\t// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\n\tQ.all = all;\n\tfunction all(promises) {\n\t    return when(promises, function (promises) {\n\t        var pendingCount = 0;\n\t        var deferred = defer();\n\t        array_reduce(promises, function (undefined, promise, index) {\n\t            var snapshot;\n\t            if (\n\t                isPromise(promise) &&\n\t                (snapshot = promise.inspect()).state === \"fulfilled\"\n\t            ) {\n\t                promises[index] = snapshot.value;\n\t            } else {\n\t                ++pendingCount;\n\t                when(\n\t                    promise,\n\t                    function (value) {\n\t                        promises[index] = value;\n\t                        if (--pendingCount === 0) {\n\t                            deferred.resolve(promises);\n\t                        }\n\t                    },\n\t                    deferred.reject,\n\t                    function (progress) {\n\t                        deferred.notify({ index: index, value: progress });\n\t                    }\n\t                );\n\t            }\n\t        }, void 0);\n\t        if (pendingCount === 0) {\n\t            deferred.resolve(promises);\n\t        }\n\t        return deferred.promise;\n\t    });\n\t}\n\t\n\tPromise.prototype.all = function () {\n\t    return all(this);\n\t};\n\t\n\t/**\n\t * Returns the first resolved promise of an array. Prior rejected promises are\n\t * ignored.  Rejects only if all promises are rejected.\n\t * @param {Array*} an array containing values or promises for values\n\t * @returns a promise fulfilled with the value of the first resolved promise,\n\t * or a rejected promise if all promises are rejected.\n\t */\n\tQ.any = any;\n\t\n\tfunction any(promises) {\n\t    if (promises.length === 0) {\n\t        return Q.resolve();\n\t    }\n\t\n\t    var deferred = Q.defer();\n\t    var pendingCount = 0;\n\t    array_reduce(promises, function (prev, current, index) {\n\t        var promise = promises[index];\n\t\n\t        pendingCount++;\n\t\n\t        when(promise, onFulfilled, onRejected, onProgress);\n\t        function onFulfilled(result) {\n\t            deferred.resolve(result);\n\t        }\n\t        function onRejected() {\n\t            pendingCount--;\n\t            if (pendingCount === 0) {\n\t                deferred.reject(new Error(\n\t                    \"Can't get fulfillment value from any promise, all \" +\n\t                    \"promises were rejected.\"\n\t                ));\n\t            }\n\t        }\n\t        function onProgress(progress) {\n\t            deferred.notify({\n\t                index: index,\n\t                value: progress\n\t            });\n\t        }\n\t    }, undefined);\n\t\n\t    return deferred.promise;\n\t}\n\t\n\tPromise.prototype.any = function () {\n\t    return any(this);\n\t};\n\t\n\t/**\n\t * Waits for all promises to be settled, either fulfilled or\n\t * rejected.  This is distinct from `all` since that would stop\n\t * waiting at the first rejection.  The promise returned by\n\t * `allResolved` will never be rejected.\n\t * @param promises a promise for an array (or an array) of promises\n\t * (or values)\n\t * @return a promise for an array of promises\n\t */\n\tQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\n\tfunction allResolved(promises) {\n\t    return when(promises, function (promises) {\n\t        promises = array_map(promises, Q);\n\t        return when(all(array_map(promises, function (promise) {\n\t            return when(promise, noop, noop);\n\t        })), function () {\n\t            return promises;\n\t        });\n\t    });\n\t}\n\t\n\tPromise.prototype.allResolved = function () {\n\t    return allResolved(this);\n\t};\n\t\n\t/**\n\t * @see Promise#allSettled\n\t */\n\tQ.allSettled = allSettled;\n\tfunction allSettled(promises) {\n\t    return Q(promises).allSettled();\n\t}\n\t\n\t/**\n\t * Turns an array of promises into a promise for an array of their states (as\n\t * returned by `inspect`) when they have all settled.\n\t * @param {Array[Any*]} values an array (or promise for an array) of values (or\n\t * promises for values)\n\t * @returns {Array[State]} an array of states for the respective values.\n\t */\n\tPromise.prototype.allSettled = function () {\n\t    return this.then(function (promises) {\n\t        return all(array_map(promises, function (promise) {\n\t            promise = Q(promise);\n\t            function regardless() {\n\t                return promise.inspect();\n\t            }\n\t            return promise.then(regardless, regardless);\n\t        }));\n\t    });\n\t};\n\t\n\t/**\n\t * Captures the failure of a promise, giving an oportunity to recover\n\t * with a callback.  If the given promise is fulfilled, the returned\n\t * promise is fulfilled.\n\t * @param {Any*} promise for something\n\t * @param {Function} callback to fulfill the returned promise if the\n\t * given promise is rejected\n\t * @returns a promise for the return value of the callback\n\t */\n\tQ.fail = // XXX legacy\n\tQ[\"catch\"] = function (object, rejected) {\n\t    return Q(object).then(void 0, rejected);\n\t};\n\t\n\tPromise.prototype.fail = // XXX legacy\n\tPromise.prototype[\"catch\"] = function (rejected) {\n\t    return this.then(void 0, rejected);\n\t};\n\t\n\t/**\n\t * Attaches a listener that can respond to progress notifications from a\n\t * promise's originating deferred. This listener receives the exact arguments\n\t * passed to ``deferred.notify``.\n\t * @param {Any*} promise for something\n\t * @param {Function} callback to receive any progress notifications\n\t * @returns the given promise, unchanged\n\t */\n\tQ.progress = progress;\n\tfunction progress(object, progressed) {\n\t    return Q(object).then(void 0, void 0, progressed);\n\t}\n\t\n\tPromise.prototype.progress = function (progressed) {\n\t    return this.then(void 0, void 0, progressed);\n\t};\n\t\n\t/**\n\t * Provides an opportunity to observe the settling of a promise,\n\t * regardless of whether the promise is fulfilled or rejected.  Forwards\n\t * the resolution to the returned promise when the callback is done.\n\t * The callback can return a promise to defer completion.\n\t * @param {Any*} promise\n\t * @param {Function} callback to observe the resolution of the given\n\t * promise, takes no arguments.\n\t * @returns a promise for the resolution of the given promise when\n\t * ``fin`` is done.\n\t */\n\tQ.fin = // XXX legacy\n\tQ[\"finally\"] = function (object, callback) {\n\t    return Q(object)[\"finally\"](callback);\n\t};\n\t\n\tPromise.prototype.fin = // XXX legacy\n\tPromise.prototype[\"finally\"] = function (callback) {\n\t    callback = Q(callback);\n\t    return this.then(function (value) {\n\t        return callback.fcall().then(function () {\n\t            return value;\n\t        });\n\t    }, function (reason) {\n\t        // TODO attempt to recycle the rejection with \"this\".\n\t        return callback.fcall().then(function () {\n\t            throw reason;\n\t        });\n\t    });\n\t};\n\t\n\t/**\n\t * Terminates a chain of promises, forcing rejections to be\n\t * thrown as exceptions.\n\t * @param {Any*} promise at the end of a chain of promises\n\t * @returns nothing\n\t */\n\tQ.done = function (object, fulfilled, rejected, progress) {\n\t    return Q(object).done(fulfilled, rejected, progress);\n\t};\n\t\n\tPromise.prototype.done = function (fulfilled, rejected, progress) {\n\t    var onUnhandledError = function (error) {\n\t        // forward to a future turn so that ``when``\n\t        // does not catch it and turn it into a rejection.\n\t        Q.nextTick(function () {\n\t            makeStackTraceLong(error, promise);\n\t            if (Q.onerror) {\n\t                Q.onerror(error);\n\t            } else {\n\t                throw error;\n\t            }\n\t        });\n\t    };\n\t\n\t    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n\t    var promise = fulfilled || rejected || progress ?\n\t        this.then(fulfilled, rejected, progress) :\n\t        this;\n\t\n\t    if (typeof process === \"object\" && process && process.domain) {\n\t        onUnhandledError = process.domain.bind(onUnhandledError);\n\t    }\n\t\n\t    promise.then(void 0, onUnhandledError);\n\t};\n\t\n\t/**\n\t * Causes a promise to be rejected if it does not get fulfilled before\n\t * some milliseconds time out.\n\t * @param {Any*} promise\n\t * @param {Number} milliseconds timeout\n\t * @param {Any*} custom error message or Error object (optional)\n\t * @returns a promise for the resolution of the given promise if it is\n\t * fulfilled before the timeout, otherwise rejected.\n\t */\n\tQ.timeout = function (object, ms, error) {\n\t    return Q(object).timeout(ms, error);\n\t};\n\t\n\tPromise.prototype.timeout = function (ms, error) {\n\t    var deferred = defer();\n\t    var timeoutId = setTimeout(function () {\n\t        if (!error || \"string\" === typeof error) {\n\t            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n\t            error.code = \"ETIMEDOUT\";\n\t        }\n\t        deferred.reject(error);\n\t    }, ms);\n\t\n\t    this.then(function (value) {\n\t        clearTimeout(timeoutId);\n\t        deferred.resolve(value);\n\t    }, function (exception) {\n\t        clearTimeout(timeoutId);\n\t        deferred.reject(exception);\n\t    }, deferred.notify);\n\t\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Returns a promise for the given value (or promised value), some\n\t * milliseconds after it resolved. Passes rejections immediately.\n\t * @param {Any*} promise\n\t * @param {Number} milliseconds\n\t * @returns a promise for the resolution of the given promise after milliseconds\n\t * time has elapsed since the resolution of the given promise.\n\t * If the given promise rejects, that is passed immediately.\n\t */\n\tQ.delay = function (object, timeout) {\n\t    if (timeout === void 0) {\n\t        timeout = object;\n\t        object = void 0;\n\t    }\n\t    return Q(object).delay(timeout);\n\t};\n\t\n\tPromise.prototype.delay = function (timeout) {\n\t    return this.then(function (value) {\n\t        var deferred = defer();\n\t        setTimeout(function () {\n\t            deferred.resolve(value);\n\t        }, timeout);\n\t        return deferred.promise;\n\t    });\n\t};\n\t\n\t/**\n\t * Passes a continuation to a Node function, which is called with the given\n\t * arguments provided as an array, and returns a promise.\n\t *\n\t *      Q.nfapply(FS.readFile, [__filename])\n\t *      .then(function (content) {\n\t *      })\n\t *\n\t */\n\tQ.nfapply = function (callback, args) {\n\t    return Q(callback).nfapply(args);\n\t};\n\t\n\tPromise.prototype.nfapply = function (args) {\n\t    var deferred = defer();\n\t    var nodeArgs = array_slice(args);\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.fapply(nodeArgs).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Passes a continuation to a Node function, which is called with the given\n\t * arguments provided individually, and returns a promise.\n\t * @example\n\t * Q.nfcall(FS.readFile, __filename)\n\t * .then(function (content) {\n\t * })\n\t *\n\t */\n\tQ.nfcall = function (callback /*...args*/) {\n\t    var args = array_slice(arguments, 1);\n\t    return Q(callback).nfapply(args);\n\t};\n\t\n\tPromise.prototype.nfcall = function (/*...args*/) {\n\t    var nodeArgs = array_slice(arguments);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.fapply(nodeArgs).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Wraps a NodeJS continuation passing function and returns an equivalent\n\t * version that returns a promise.\n\t * @example\n\t * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n\t * .then(console.log)\n\t * .done()\n\t */\n\tQ.nfbind =\n\tQ.denodeify = function (callback /*...args*/) {\n\t    var baseArgs = array_slice(arguments, 1);\n\t    return function () {\n\t        var nodeArgs = baseArgs.concat(array_slice(arguments));\n\t        var deferred = defer();\n\t        nodeArgs.push(deferred.makeNodeResolver());\n\t        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n\t        return deferred.promise;\n\t    };\n\t};\n\t\n\tPromise.prototype.nfbind =\n\tPromise.prototype.denodeify = function (/*...args*/) {\n\t    var args = array_slice(arguments);\n\t    args.unshift(this);\n\t    return Q.denodeify.apply(void 0, args);\n\t};\n\t\n\tQ.nbind = function (callback, thisp /*...args*/) {\n\t    var baseArgs = array_slice(arguments, 2);\n\t    return function () {\n\t        var nodeArgs = baseArgs.concat(array_slice(arguments));\n\t        var deferred = defer();\n\t        nodeArgs.push(deferred.makeNodeResolver());\n\t        function bound() {\n\t            return callback.apply(thisp, arguments);\n\t        }\n\t        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n\t        return deferred.promise;\n\t    };\n\t};\n\t\n\tPromise.prototype.nbind = function (/*thisp, ...args*/) {\n\t    var args = array_slice(arguments, 0);\n\t    args.unshift(this);\n\t    return Q.nbind.apply(void 0, args);\n\t};\n\t\n\t/**\n\t * Calls a method of a Node-style object that accepts a Node-style\n\t * callback with a given array of arguments, plus a provided callback.\n\t * @param object an object that has the named method\n\t * @param {String} name name of the method of object\n\t * @param {Array} args arguments to pass to the method; the callback\n\t * will be provided by Q and appended to these arguments.\n\t * @returns a promise for the value or error\n\t */\n\tQ.nmapply = // XXX As proposed by \"Redsandro\"\n\tQ.npost = function (object, name, args) {\n\t    return Q(object).npost(name, args);\n\t};\n\t\n\tPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\n\tPromise.prototype.npost = function (name, args) {\n\t    var nodeArgs = array_slice(args || []);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * Calls a method of a Node-style object that accepts a Node-style\n\t * callback, forwarding the given variadic arguments, plus a provided\n\t * callback argument.\n\t * @param object an object that has the named method\n\t * @param {String} name name of the method of object\n\t * @param ...args arguments to pass to the method; the callback will\n\t * be provided by Q and appended to these arguments.\n\t * @returns a promise for the value or error\n\t */\n\tQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\n\tQ.nmcall = // XXX Based on \"Redsandro's\" proposal\n\tQ.ninvoke = function (object, name /*...args*/) {\n\t    var nodeArgs = array_slice(arguments, 2);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\tPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\n\tPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\n\tPromise.prototype.ninvoke = function (name /*...args*/) {\n\t    var nodeArgs = array_slice(arguments, 1);\n\t    var deferred = defer();\n\t    nodeArgs.push(deferred.makeNodeResolver());\n\t    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n\t    return deferred.promise;\n\t};\n\t\n\t/**\n\t * If a function would like to support both Node continuation-passing-style and\n\t * promise-returning-style, it can end its internal promise chain with\n\t * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n\t * elects to use a nodeback, the result will be sent there.  If they do not\n\t * pass a nodeback, they will receive the result promise.\n\t * @param object a result (or a promise for a result)\n\t * @param {Function} nodeback a Node.js-style callback\n\t * @returns either the promise or nothing\n\t */\n\tQ.nodeify = nodeify;\n\tfunction nodeify(object, nodeback) {\n\t    return Q(object).nodeify(nodeback);\n\t}\n\t\n\tPromise.prototype.nodeify = function (nodeback) {\n\t    if (nodeback) {\n\t        this.then(function (value) {\n\t            Q.nextTick(function () {\n\t                nodeback(null, value);\n\t            });\n\t        }, function (error) {\n\t            Q.nextTick(function () {\n\t                nodeback(error);\n\t            });\n\t        });\n\t    } else {\n\t        return this;\n\t    }\n\t};\n\t\n\t// All code before this point will be filtered from stack traces.\n\tvar qEndingLine = captureLine();\n\t\n\treturn Q;\n\t\n\t});\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar Q = __webpack_require__(8);\n\tvar respoke = __webpack_require__(1);\n\tvar log = respoke.log;\n\t\n\t/**\n\t * `respoke.Client` is the top-level interface to the API. Interacting with Respoke should be done using\n\t * a `respoke.Client` instance.\n\t *\n\t * There are two ways to get a client:\n\t *\n\t *      var client = respoke.createClient(clientParams);\n\t *      // . . . set stuff up, then . . .\n\t *      client.connect(connectParams);\n\t *\n\t * or\n\t *\n\t *      // creates client and connects to Respoke all at once\n\t *      var client = respoke.connect(allParams);\n\t *\n\t * A client does the following things:\n\t *\n\t * 1. authentication with the Respoke API\n\t * 1. receives server-side app-specific information\n\t * 1. tracks connections and presence\n\t * 1. provides methods to get and interact with tracked entities (like groups and endpoints)\n\t * 1. stores default settings for calls and direct connections\n\t * 1. automatically reconnects to the API when network activity is lost*\n\t *\n\t * *If `developmentMode` is set to true. If not using `developmentMode`, disable automatic\n\t * reconnect by sending `reconnect: false` and listening to the Client's disconnect event\n\t * to fetch a new brokered auth token, then call `client.connect()` with the new token.\n\t *\n\t * @class respoke.Client\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n\t * respoke.connect, respoke.createClient, or to client.connect.\n\t * @param {string} [params.token] - The endpoint's authentication token.\n\t * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t * endpoint. This is only used when `developmentMode` is set to `true`.\n\t * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n\t * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t * operation and will limit the services you will be able to use.\n\t * @param {string|number|object|Array} [params.presence=unavailable] The initial presence to set once connected.\n\t * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n\t * when a disconnect occurs.\n\t * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n\t * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is received\n\t * from anywhere on the system.\n\t * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n\t * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n\t * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect.\n\t * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client's user receives a call.\n\t * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this client's user\n\t * receives a request for a direct connection.\n\t * @returns {respoke.Client}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId || respoke.makeGUID();\n\t    params.instanceId = instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    respoke.instances[instanceId] = that;\n\t    delete that.instanceId;\n\t    that.connectTries = 0;\n\t    /**\n\t     * A name to identify this class\n\t     * @memberof! respoke.Client\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Client';\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name host\n\t     * @type {string}\n\t     * @private\n\t     */\n\t    var host = window.location.hostname;\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name port\n\t     * @type {number}\n\t     * @private\n\t     */\n\t    var port = window.location.port;\n\t\n\t    /**\n\t     * A container for baseURL, token, and appId so they won't be accidentally viewable in any JavaScript debugger.\n\t     * @memberof! respoke.Client\n\t     * @name clientSettings\n\t     * @type {object}\n\t     * @private\n\t     * @property {string} [baseURL] - the URL of the cloud infrastructure's REST API.\n\t     * @property {string} [token] - The endpoint's authentication token.\n\t     * @property {string} [appId] - The id of your Respoke app.\n\t     * @property {string} [endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @property {boolean} [developmentMode=false] - Indication to obtain an authentication token from the service.\n\t     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t     * operation and will limit the services you will be able to use.\n\t     * @property {boolean} [reconnect=false] - Whether or not to automatically reconnect to the Respoke service\n\t     * when a disconnect occurs.\n\t     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n\t     * @property {respoke.Client.onClientMessage} [onMessage] - Callback for when any message is received\n\t     * from anywhere on the system.\n\t     * @property {respoke.Client.onConnect} [onConnect] - Callback for Client connect.\n\t     * @property {respoke.Client.onDisconnect} [onDisconnect] - Callback for Client disconnect.\n\t     * @property {respoke.Client.onReconnect} [onReconnect] - Callback for Client reconnect. Not Implemented.\n\t     * @property {respoke.Client.onCall} [onCall] - Callback for when this client receives a call.\n\t     * @property {respoke.Client.onDirectConnection} [onDirectConnection] - Callback for when this client\n\t     * receives a request for a direct connection.\n\t     * @property {boolean} enableCallDebugReport=true - Upon finishing a call, should the client send debugging\n\t     * information to the API? Defaults to `true`.\n\t     */\n\t    var clientSettings = {};\n\t\n\t    delete that.appId;\n\t    delete that.baseURL;\n\t    delete that.developmentMode;\n\t    delete that.token;\n\t    delete that.resolveEndpointPresence;\n\t\n\t    /**\n\t     * Internal list of known groups.\n\t     * @memberof! respoke.Client\n\t     * @name groups\n\t     * @type {Array<respoke.Group>}\n\t     * @private\n\t     */\n\t    var groups = [];\n\t    /**\n\t     * Internal list of known endpoints.\n\t     * @memberof! respoke.Client\n\t     * @name endpoints\n\t     * @type {Array<respoke.Endpoint>}\n\t     * @private\n\t     */\n\t    var endpoints = [];\n\t    /**\n\t     * Array of calls in progress, made accessible for informational purposes only.\n\t     * **Never modify this array directly.**\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @name calls\n\t     * @type {array}\n\t     */\n\t    that.calls = [];\n\t    log.debug(\"Client ID is \", instanceId);\n\t\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name signalingChannel\n\t     * @type {respoke.SignalingChannel}\n\t     * @private\n\t     */\n\t    var signalingChannel = respoke.SignalingChannel({\n\t        instanceId: instanceId,\n\t        clientSettings: clientSettings\n\t    });\n\t\n\t    /**\n\t     * Represents the presence status. Typically a string, but other types are supported.\n\t     * Defaults to `'unavailable'`.\n\t     *\n\t     * **Do not modify this directly** - it won't update presence with Respoke. Use `setPresence()`.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @name presence\n\t     * @type {string|number|object|Array}\n\t     */\n\t    that.presence = params.presence || 'unavailable';\n\t\n\t    /**\n\t     * Deprecated: use endpoint.presence instead.\n\t     *\n\t     * Return the presence.\n\t     * @memberof! respoke.Client\n\t     * @deprecated\n\t     * @name presence\n\t     * @type {string|number|object|Array}\n\t     */\n\t    that.getPresence = function () {\n\t        return that.presence;\n\t    };\n\t\n\t    /**\n\t     * Save parameters of the constructor or client.connect() onto the clientSettings object\n\t     * @memberof! respoke.Client\n\t     * @method respoke.saveParameters\n\t     * @param {object} params\n\t     * @param {respoke.Client.connectSuccessHandler} [params.onSuccess] - Success handler for this invocation\n\t     * of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n\t     * respoke.connect, respoke.createClient, or to client.connect.\n\t     * @param {string} [params.token] - The endpoint's authentication token.\n\t     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n\t     * @param {respoke.client.resolveEndpointPresence} [params.resolveEndpointPresence] An optional function for\n\t     * resolving presence for an endpoint.  An endpoint can have multiple Connections this function will be used\n\t     * to decide which Connection's presence gets precedence for the Endpoint.\n\t     * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n\t     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t     * operation and will limit the services you will be able to use.\n\t     * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n\t     * when a disconnect occurs.\n\t     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves\n\t     * a group.\n\t     * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is\n\t     * received from anywhere on the system.\n\t     * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n\t     * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n\t     * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n\t     * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client receives a call.\n\t     * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this\n\t     * client receives a request for a direct connection.\n\t     * @private\n\t     */\n\t    function saveParameters(params) {\n\t        Object.keys(params).forEach(function eachParam(key) {\n\t            if (['onSuccess', 'onError', 'reconnect', 'presence'].indexOf(key) === -1 && params[key] !== undefined) {\n\t                clientSettings[key] = params[key];\n\t            }\n\t        });\n\t\n\t        clientSettings.developmentMode = !!clientSettings.developmentMode;\n\t        clientSettings.enableCallDebugReport = typeof clientSettings.enableCallDebugReport === 'boolean' ?\n\t            clientSettings.enableCallDebugReport : true;\n\t\n\t        if (typeof params.reconnect !== 'boolean') {\n\t            clientSettings.reconnect = typeof clientSettings.developmentMode === 'boolean' ?\n\t                clientSettings.developmentMode : false;\n\t        } else {\n\t            clientSettings.reconnect = !!params.reconnect;\n\t        }\n\t    }\n\t    saveParameters(params);\n\t\n\t    /**\n\t     * Connect to the Respoke infrastructure and authenticate using `params.token`.\n\t     *\n\t     * After `connect`, the app auth session token is stored so it can be used in API requests.\n\t     *\n\t     * This method attaches quite a few event listeners for things like group joining and connection status changes.\n\t     *\n\t     * #### Usage\n\t     *\n\t     *      client.connect({\n\t     *          appId: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\",\n\t     *          token: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\", // if not developmentMode\n\t     *          developmentMode: false || true,\n\t     *          // if developmentMode, otherwise your server will set endpointId\n\t     *          endpointId: \"daveops\"\n\t     *      });\n\t     *      client.listen(\"connect\", function () { } );\n\t     *\n\t     *\n\t     * If no `params.token` is given and `developmentMode` is set to true, it will attempt to obtain a token\n\t     * automatically. You must set an `endpointId`.\n\t     *\n\t     *\n\t     * #### App auth session token expiration\n\t     *\n\t     * If `params.reconnect` is set to true (which it is by default for `developmentMode`), the `client`\n\t     * will attempt to keep reconnecting each time the app auth session expires.\n\t     *\n\t     * If not using `developmentMode`, automatic reconnect will be disabled. You will need to\n\t     * listen to the Client's `disconnect` event to fetch a new brokered auth token and call\n\t     * `client.connect()` with the new token.\n\t     *\n\t     *      client.listen('disconnect', function () {\n\t     *\n\t     *          // example method you implemented to get a new token from your server\n\t     *          myServer.getNewRespokeAccessToken(function (newToken) {\n\t     *              // reconnect with respoke.Client\n\t     *              client.connect({ token: newToken });\n\t     *          });\n\t     *\n\t     *      });\n\t     *\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.connect\n\t     * @param {object} params\n\t     * @param {respoke.Client.connectSuccessHandler} [params.onSuccess] - Success handler for this invocation\n\t     * of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n\t     * respoke.connect, respoke.createClient, or to client.connect.\n\t     * @param {string} [params.token] - The endpoint's authentication token.\n\t     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n\t     * @param {respoke.client.resolveEndpointPresence} [params.resolveEndpointPresence] An optional function for\n\t     * resolving presence for an endpoint.  An endpoint can have multiple Connections this function will be used\n\t     * to decide which Connection's presence gets precedence for the Endpoint.\n\t     * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n\t     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n\t     * operation and will limit the services you will be able to use.\n\t     * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n\t     * when a disconnect occurs.\n\t     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n\t     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves\n\t     * a group.\n\t     * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is\n\t     * received from anywhere on the system.\n\t     * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n\t     * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n\t     * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n\t     * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client receives a call.\n\t     * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this\n\t     * client receives a request for a direct connection.\n\t     * @returns {Promise|undefined}\n\t     * @fires respoke.Client#connect\n\t     */\n\t    that.connect = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        params = params || {};\n\t        log.debug('Client.connect');\n\t        that.connectTries += 1;\n\t\n\t        saveParameters(params);\n\t\n\t        that.endpointId = clientSettings.endpointId;\n\t        promise = actuallyConnect(params);\n\t        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        promise.then(function successHandler() {\n\t            /**\n\t             * This event is fired the first time the library connects to the cloud infrastructure.\n\t             * @event respoke.Client#connect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.fire('connect');\n\t\n\t            /**\n\t             * This event fires only when the initial `connect` fails.\n\t             *\n\t             * @ignore **This comment is for documentation purposes**, since #error bubbles\n\t             * up from other classes, but it should show on `respoke.Client` docs.\n\t             *\n\t             * @event respoke.Client#error\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t        });\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * This function contains the meat of the connection, the portions which can be repeated again on reconnect.\n\t     *\n\t     * When `reconnect` is true, this function will be added in an event listener to the Client#disconnect event.\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.actuallyConnect\n\t     * @private\n\t     * @param {object} params\n\t     * @param {connectSuccessHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    function actuallyConnect(params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t\n\t        if (!clientSettings.token &&\n\t                (!clientSettings.appId || !clientSettings.endpointId || clientSettings.developmentMode !== true)) {\n\t            deferred.reject(new Error(\"Must pass either endpointID & appId & developmentMode=true, or a token, \" +\n\t                \"to client.connect().\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        signalingChannel.open({\n\t            actuallyConnect: actuallyConnect,\n\t            endpointId: that.endpointId,\n\t            token: clientSettings.token\n\t        }).then(function successHandler() {\n\t            return signalingChannel.authenticate();\n\t        }).done(function successHandler() {\n\t            // set initial presence for the connection\n\t            if (that.presence) {\n\t                that.setPresence({presence: that.presence});\n\t            }\n\t\n\t            /*!\n\t             * These rely on the EventEmitter checking for duplicate event listeners in order for these\n\t             * not to be duplicated on reconnect.\n\t             */\n\t\n\t            /**\n\t             * This event provides notification for when an incoming call is being received.  If the user wishes\n\t             * to allow the call, `evt.call.answer()`.\n\t             * @event respoke.Client#call\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Call} call\n\t             * @property {respoke.Endpoint} endpoint\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.listen('call', clientSettings.onCall);\n\t            /**\n\t             * This event is fired when the local end of the directConnection is available. It still will not be\n\t             * ready to send and receive messages until the 'open' event fires.\n\t             * @event respoke.Client#direct-connection\n\t             * @type {respoke.Event}\n\t             * @property {respoke.DirectConnection} directConnection\n\t             * @property {respoke.Endpoint} endpoint\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.listen('direct-connection', clientSettings.onDirectConnection);\n\t            that.listen('join', clientSettings.onJoin);\n\t            /**\n\t             * This event is fired every time the client leaves a group.\n\t             * @event respoke.Client#leave\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Group} group\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.listen('leave', clientSettings.onLeave);\n\t            /**\n\t             * A generic message handler when a message was received by the client.\n\t             *\n\t             * @event respoke.Client#message\n\t             * @type {respoke.Event}\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Endpoint} endpoint - If the message was private, this is the Endpoint who sent it.\n\t             * @property {respoke.Group} group - If the message was to a group, this is the group.\n\t             * @property {respoke.TextMessage} message - The generic message object.\n\t             * @property {string} message.connectionId\n\t             * @property {string} message.endpointId\n\t             * @property {string} message.message - Message body text.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.listen('message', clientSettings.onMessage);\n\t            that.listen('connect', clientSettings.onConnect);\n\t            /**\n\t             * Client has disconnected from Respoke.\n\t             *\n\t             * @event respoke.Client#disconnect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.listen('disconnect', clientSettings.onDisconnect);\n\t            that.listen('disconnect', function () {\n\t                that.calls.forEach(function (call) {\n\t                    call.hangup({signal: false});\n\t                });\n\t            }, true);\n\t            /**\n\t             * Client has reconnected to Respoke.\n\t             *\n\t             * @event respoke.Client#reconnect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.listen('reconnect', clientSettings.onReconnect);\n\t\n\t            log.info('logged in as ' + that.endpointId, that);\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t            if (err.message && err.message.match(/Connection limit exceeded/)) {\n\t                log.error(\n\t                    'You have reached the connection limit on the account associated with this appId. ' +\n\t                    'Please upgrade your account from the developer portal at https://portal.respoke.io ' +\n\t                    'if you need more concurrent connections.', err);\n\t            } else {\n\t                log.error(err.message, err.stack);\n\t            }\n\t        });\n\t\n\t        return deferred.promise;\n\t    }\n\t\n\t    /**\n\t     * Disconnect from the Respoke infrastructure, leave all groups, invalidate the token, and disconnect the websocket.\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.disconnect\n\t     * @returns {Promise|undefined}\n\t     * @param {object} params\n\t     * @param {disconnectSuccessHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @fires respoke.Client#disconnect\n\t     */\n\t    that.disconnect = function (params) {\n\t        // TODO: also call this on socket disconnect\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            deferred.reject(e);\n\t            return retVal;\n\t        }\n\t\n\t        var leaveGroups = groups.map(function eachGroup(group) {\n\t            if (group.isJoined()) {\n\t                return group.leave();\n\t            }\n\t        });\n\t\n\t        Q.all(leaveGroups).fin(function successHandler() {\n\t            return signalingChannel.close();\n\t        }).fin(function finallyHandler() {\n\t            that.presence = 'unavailable';\n\t            endpoints = [];\n\t            groups = [];\n\t            /**\n\t             * This event is fired when the library has disconnected from the cloud infrastructure.\n\t             * @event respoke.Client#disconnect\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.fire('disconnect');\n\t            deferred.resolve();\n\t        }).done();\n\t\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Set the presence for this client.\n\t     *\n\t     * The value of presence can be a string, number, object, or array - in any format -\n\t     * depending on the needs of your application. The only requirement is that\n\t     * `JSON.stringify()` must work (no circular references).\n\t     *\n\t     *      var myPresence = 'At lunch'\n\t     *                      || 4\n\t     *                      || { status: 'Away', message: 'At lunch' }\n\t     *                      || ['Away', 'At lunch'];\n\t     *\n\t     *      client.setPresence({\n\t     *          presence: myPresence,\n\t     *          onSuccess: function (evt) {\n\t     *              // successfully updated my presence\n\t     *          }\n\t     *      });\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.setPresence\n\t     * @param {object} params\n\t     * @param {string|number|object|array} params.presence\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @return {Promise|undefined}\n\t     */\n\t    that.setPresence = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        params = params || {};\n\t        params.presence = params.presence || 'available';\n\t\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        }\n\t\n\t        log.info('sending my presence update ' + params.presence);\n\t\n\t        promise = signalingChannel.sendPresence({\n\t            presence: params.presence\n\t        }).then(function successHandler(p) {\n\t            that.presence = params.presence;\n\t\n\t            /**\n\t             * This event indicates that the presence for this endpoint has been updated.\n\t             * @event respoke.Client#presence\n\t             * @type {respoke.Event}\n\t             * @property {string|number|object|Array} presence\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            that.fire('presence', {\n\t                presence: that.presence\n\t            });\n\t        });\n\t        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Get the Call with the endpoint specified.\n\t     *\n\t     *     // hang up on chad\n\t     *     var call = client.getCall({\n\t     *         endpointId: 'chad'\n\t     *     });\n\t     *\n\t     *     if (call) {\n\t     *         call.hangup()\n\t     *     }\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getCall\n\t     * @param {object} params\n\t     * @param {string} [params.id] - Call ID.\n\t     * @param {string} [params.endpointId] - Endpoint ID. Warning: If you pass only the endpointId, this method\n\t     * will just return the first call that matches. If you are placing multiple calls to the same endpoint,\n\t     * pass in the call ID, too.\n\t     * @arg {boolean} [params.create] - whether or not to create a new call if the specified endpointId isn't found\n\t     * @arg {string} [params.fromType] - fromType from the signal, tells us if this is a SIP or DID call.\n\t     * @arg {string} [params.target] - target from the signal, tells us if this is a screenshare or conference call.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.getCall = function (params) {\n\t        var call = null;\n\t        var methods = {\n\t            screenshare: \"startScreenShare\",\n\t            did: \"startPhoneCall\",\n\t            web: \"startCall\",\n\t            sip: \"startSIPCall\",\n\t            conference: \"joinConference\"\n\t        };\n\t        var callParams = {};\n\t        params.fromType = params.type || \"web\";\n\t        var switchType = params.type;\n\t\n\t        that.calls.every(function findCall(one) {\n\t            if (params.id && one.id === params.id) {\n\t                call = one;\n\t                return false;\n\t            }\n\t\n\t            if (!params.id && params.endpointId && one.remoteEndpoint.id === params.endpointId) {\n\t                call = one;\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t\n\t        if (call || params.create !== true) {\n\t            return call;\n\t        }\n\t\n\t        callParams.id = params.id;\n\t        callParams.caller = false;\n\t        callParams.fromType = \"web\";\n\t        callParams.callerId = params.callerId;\n\t        callParams.target = params.target;\n\t\n\t        if (params.target === \"conference\") {\n\t            callParams.id = params.conferenceId;\n\t            switchType = params.target;\n\t        } else if (params.target === \"screenshare\") {\n\t            switchType = params.target;\n\t        }\n\t\n\t        switch (switchType) {\n\t            case \"screenshare\":\n\t            case \"web\":\n\t                callParams.toType = \"web\"; // overwrite \"screenshare\"\n\t                callParams.endpointId = params.endpointId;\n\t                break;\n\t            case \"did\":\n\t                callParams.number = params.endpointId;\n\t                callParams.toType = \"did\";\n\t                break;\n\t            case \"sip\":\n\t                callParams.uri = params.endpointId;\n\t                callParams.toType = \"sip\";\n\t                break;\n\t        }\n\t\n\t        try {\n\t            call = that[methods[params.type]](callParams);\n\t        } catch (e) {\n\t            log.error(\"Couldn't create Call.\", e.message, e.stack);\n\t        }\n\t        return call;\n\t    };\n\t\n\t    /**\n\t     * Add the call to internal record-keeping.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.addCall\n\t     * @param {object} evt\n\t     * @param {respoke.Call} evt.call\n\t     * @param {respoke.Endpoint} evt.endpoint\n\t     * @private\n\t     */\n\t    function addCall(evt) {\n\t        log.debug('addCall');\n\t        if (!evt.call) {\n\t            throw new Error(\"Can't add call without a call parameter.\");\n\t        }\n\t        if (that.calls.indexOf(evt.call) === -1) {\n\t            that.calls.push(evt.call);\n\t        }\n\t\n\t        evt.call.listen('hangup', function () {\n\t            removeCall({call: evt.call});\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Remove the call or direct connection from internal record-keeping.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.removeCall\n\t     * @param {object} evt\n\t     * @param {respoke.Call} evt.target\n\t     * @private\n\t     */\n\t    function removeCall(evt) {\n\t        var match = 0;\n\t        if (!evt.call) {\n\t            throw new Error(\"Can't remove call without a call parameter.\");\n\t        }\n\t\n\t        // Loop backward since we're modifying the array in place.\n\t        for (var i = that.calls.length - 1; i >= 0; i -= 1) {\n\t            if (that.calls[i].id === evt.call.id) {\n\t                that.calls.splice(i, 1);\n\t                match += 1;\n\t            }\n\t        }\n\t\n\t        if (match !== 1) {\n\t            log.warn(\"Something went wrong.\", match, \"calls were removed!\");\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Convenience method for setting presence to `\"available\"`.\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.setOnline\n\t     * @param {object} params\n\t     * @param {string|number|object|Array} [params.presence=available] - The presence to set.\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.setOnline = function (params) {\n\t        var promise;\n\t\n\t        params = params || {};\n\t        params.presence = params.presence || 'available';\n\t\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        }\n\t\n\t        return that.setPresence(params);\n\t    };\n\t\n\t    /**\n\t     * Convenience method for setting presence to `\"unavailable\"`.\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.setOffline\n\t     * @param {object} params\n\t     * @param {string|number|object|Array} [params.presence=unavailable] - The presence to set.\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.setOffline = function (params) {\n\t        var promise;\n\t\n\t        params = params || {};\n\t        params.presence = params.presence || 'unavailable';\n\t\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        }\n\t\n\t        return that.setPresence(params);\n\t    };\n\t\n\t    /**\n\t     * Send a message to an endpoint.\n\t     *\n\t     *     client.sendMessage({\n\t     *         endpointId: 'dan',\n\t     *         message: \"Jolly good.\"\n\t     *     });\n\t     *\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.sendMessage\n\t     * @param {object} params\n\t     * @param {string} params.endpointId - The endpoint id of the recipient.\n\t     * @param {string} [params.connectionId] - The optional connection id of the receipient. If not set, message will be\n\t     * broadcast to all connections for this endpoint.\n\t     * @param {string} params.message - a string message.\n\t     * @param {sendHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        var endpoint;\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            promise = Q.reject(e);\n\t            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t            return retVal;\n\t        }\n\t        endpoint = that.getEndpoint({\n\t            skipPresence: true,\n\t            id: params.endpointId\n\t        });\n\t        delete params.endpointId;\n\t        return endpoint.sendMessage(params);\n\t    };\n\t\n\t    /**\n\t     * Experimental. Create a new conference call with the specified id.\n\t     *\n\t     *     client.joinConference({\n\t     *         id: \"javascript-meetup\",\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.joinConference\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} params.id - The id that should be used to create the conference call or the ID\n\t     * of the call to join.\n\t     * @param {string|boolean} params.audio - Whether participant should send and receive audio. Boolean `true`\n\t     * indicates send and receive. Boolean `false` indicates neither send nor receive. Strings `send` and `receive`\n\t     * indicate send only and receive only respectively.\n\t     * @param {string|boolean} params.video - Whether participant should send and receive audio. Boolean `true`\n\t     * indicates send and receive. Boolean `false` indicates neither send nor receive. Strings `send` and `receive`\n\t     * indicate send only and receive only respectively.\n\t     * @param {boolean} params.mixAudio - Whether Respoke should mix all the audio streams together to save bandwidth\n\t     * for this one participant.\n\t     * @param {Array<RTCConstraints>} [params.constraints]\n\t     * @arg {respoke.Conference.onJoin} [params.onJoin] - Callback for when a participant joins the conference.\n\t     * @arg {respoke.Conference.onLeave} [params.onLeave] - Callback for when a participant leaves the conference.\n\t     * @arg {respoke.Conference.onMessage} [params.onMessage] - Callback for when a message is sent to the conference.\n\t     * @param {respoke.Conference.onMute} [params.onMute] - Callback for when local or remote media is muted or unmuted.\n\t     * @arg {respoke.Conference.onTopic} [params.onTopic] - Callback for the conference topic changes.\n\t     * @arg {respoke.Conference.onPresenter} [params.onPresenter] - Callback for when the presenter changes.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n\t     * and the remote party has received the video.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @returns {respoke.Conference}\n\t     */\n\t    that.joinConference = function (params) {\n\t        var conference = null;\n\t        var recipient;\n\t\n\t        params = params || {};\n\t        params.open = !!params.open;\n\t\n\t        that.verifyConnected();\n\t\n\t        if (!params.id) {\n\t            params.id = respoke.makeGUID();\n\t        }\n\t\n\t        recipient = {id: params.id};\n\t\n\t        if (params.open) {\n\t            params.key = undefined;\n\t        } else if (!params.key) {\n\t            params.key = respoke.makeGUID();\n\t        }\n\t\n\t        params.instanceId = instanceId;\n\t        params.target = \"conference\";\n\t        params.constraints = respoke.convertConstraints(params.constraints, [{\n\t            video: false,\n\t            audio: true,\n\t            mandatory: {},\n\t            optional: []\n\t        }]);\n\t\n\t        params.signalOffer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'offer';\n\t            signalParams.target = params.target;\n\t            signalParams.id = params.id;\n\t            signalParams.key = params.key;\n\t            signalParams.open = params.open;\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = \"conference\";\n\t\n\t            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n\t        };\n\t        params.signalAnswer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'answer';\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = recipient;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalParams.toType = \"conference\";\n\t            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n\t                signalParams.call.hangup({signal: false});\n\t            });\n\t        };\n\t        params.signalConnected = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.connectionId = signalParams.call.connectionId;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = \"conference\";\n\t            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n\t                signalParams.call.hangup();\n\t            });\n\t        };\n\t        params.signalModify = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = recipient;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalParams.toType = \"conference\";\n\t            signalingChannel.sendModify(signalParams).done();\n\t        };\n\t        params.signalCandidate = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = recipient;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalParams.toType = \"conference\";\n\t            signalingChannel.sendCandidate(signalParams).done();\n\t        };\n\t        params.signalHangup = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = recipient;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalParams.toType = \"conference\";\n\t            signalingChannel.sendHangup(signalParams).done();\n\t        };\n\t        params.signalReport = function (signalParams) {\n\t            log.debug(\"Sending debug report\", signalParams.report);\n\t            signalingChannel.sendReport(signalParams).done();\n\t        };\n\t\n\t        params.signalingChannel = signalingChannel;\n\t        conference = respoke.Conference(params);\n\t        addCall({call: conference.call});\n\t        return conference;\n\t    };\n\t\n\t    /**\n\t     * Create a new screen sharing call. Screenshares are inherently unidirectional video only. This may change\n\t     * in the future when Chrome adds the ability to obtain screen video and microphone audio at the same time. For\n\t     * now, if you also need audio, place a second audio only call.\n\t     *\n\t     * The endpoint who calls `client.startScreenShare` will be the one whose screen is shared. If you'd like to\n\t     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n\t     * not the sharer, it is recommened that you use `endpoint.sendMessage` to send a control message to the user\n\t     * whose screenshare is being requested so that user's app can call `client.startScreenShare`.\n\t     *\n\t     * NOTE: At this time, screen sharing only works with Chrome, and Chrome requires a Chrome extension to\n\t     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension.\n\t     * Support for additional browsers will be added in the future.\n\t     *\n\t     *     client.startScreenShare({\n\t     *         endpointId: 'tian',\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startScreenShare\n\t     * @param {object} params\n\t     * @param {string} params.endpointId - The id of the endpoint that should be called.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n\t     * and the remote party has received the video.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {string} [params.source] - Pass in what type of mediaSource you want. If omitted, you'll have access\n\t     * to both the screen and windows. In firefox, you'll have access to the screen only.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startScreenShare = function (params) {\n\t        that.verifyConnected();\n\t        var endpoint = that.getEndpoint({\n\t            skipPresence: true,\n\t            id: params.endpointId\n\t        });\n\t        delete params.endpointId;\n\t        return endpoint.startScreenShare(params);\n\t    };\n\t\n\t    /**\n\t     * Place an audio and/or video call to an endpoint.\n\t     *\n\t     *     // defaults to video when no constraints are supplied\n\t     *     client.startCall({\n\t     *         endpointId: 'erin',\n\t     *         onConnect: function (evt) { },\n\t     *         onLocalMedia: function (evt) { }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startCall\n\t     * @param {object} params\n\t     * @param {string} params.endpointId - The id of the endpoint that should be called.\n\t     * @param {Array<RTCConstraints>} [params.constraints]\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n\t     * with the local audio and/or video attached.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n\t     * with the remote audio and/or video attached.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n\t     * up.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have\n\t     * local video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have\n\t     * remote video attached to it.\n\t     * @return {respoke.Call}\n\t     */\n\t    that.startCall = function (params) {\n\t        that.verifyConnected();\n\t        var endpoint = that.getEndpoint({\n\t            skipPresence: true,\n\t            id: params.endpointId\n\t        });\n\t        delete params.endpointId;\n\t        return endpoint.startCall(params);\n\t    };\n\t\n\t    /**\n\t     * Place an audio only call to an endpoint.\n\t     *\n\t     *     client.startAudioCall({\n\t     *         endpointId: 'erin',\n\t     *         onConnect: function (evt) { },\n\t     *         onLocalMedia: function (evt) { }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startAudioCall\n\t     * @param {object} params\n\t     * @param {string} params.endpointId - The id of the endpoint that should be called.\n\t     * @param {string} [params.connectionId]\n\t     * @param {Array<RTCConstraints>} [params.constraints]\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 element\n\t     * with the local audio and/or video attached.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 element\n\t     * with the remote audio and/or video attached.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n\t     * up.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     * @return {respoke.Call}\n\t     */\n\t    that.startAudioCall = function (params) {\n\t        that.verifyConnected();\n\t        var endpoint = that.getEndpoint({\n\t            skipPresence: true,\n\t            id: params.endpointId\n\t        });\n\t        delete params.endpointId;\n\t        return endpoint.startAudioCall(params);\n\t    };\n\t\n\t    /**\n\t     * Place a video call to an endpoint.\n\t     *\n\t     *     client.startVideoCall({\n\t     *         endpointId: 'erin',\n\t     *         onConnect: function (evt) { },\n\t     *         onLocalMedia: function (evt) { }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startVideoCall\n\t     * @param {object} params\n\t     * @param {string} params.endpointId - The id of the endpoint that should be called.\n\t     * @param {Array<RTCConstraints>} [params.constraints]\n\t     * @param {string} [params.connectionId]\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n\t     * with the local audio and/or video attached.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n\t     * with the remote audio and/or video attached.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n\t     * up.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     * @return {respoke.Call}\n\t     */\n\t    that.startVideoCall = function (params) {\n\t        that.verifyConnected();\n\t        var endpoint = that.getEndpoint({\n\t            skipPresence: true,\n\t            id: params.endpointId\n\t        });\n\t        delete params.endpointId;\n\t        return endpoint.startVideoCall(params);\n\t    };\n\t\n\t    /**\n\t     * Place an audio call with a phone number.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startPhoneCall\n\t     * @param {object} params\n\t     * @param {string} params.number - The phone number that should be called.\n\t     * @arg {string} params.callerId - The phone number to use as the caller ID for this phone call. This must\n\t     * be a phone number listed in your Respoke account, associated with your app, and allowed by the role\n\t     * that this client is authenticated with. If the role contains a list of numbers and the token does not contain\n\t     * callerId, this field must be used to set caller ID selected from the list of numbers or no caller ID will be set.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n\t     * with the local audio and/or video attached.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n\t     * with the remote audio and/or video attached.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n\t     * up.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @return {respoke.Call}\n\t     */\n\t    that.startPhoneCall = function (params) {\n\t        var promise;\n\t        var call = null;\n\t        var recipient = {};\n\t        params = params || {};\n\t        params.constraints = [{\n\t            video: false,\n\t            audio: true,\n\t            mandatory: {},\n\t            optional: []\n\t        }];\n\t\n\t        that.verifyConnected();\n\t\n\t        if (!params.number) {\n\t            throw new Error(\"Can't start a phone call without a number.\");\n\t        }\n\t\n\t        if (typeof params.caller !== 'boolean') {\n\t            params.caller = true;\n\t        }\n\t\n\t        recipient.id = params.number;\n\t\n\t        params.instanceId = instanceId;\n\t        params.remoteEndpoint = recipient;\n\t\n\t        params.toType = params.toType || 'did';\n\t        params.fromType = params.fromType || 'web';\n\t\n\t        params.signalOffer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'offer';\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t\n\t            // using hasOwnProperty here because callerId could be explicitly set to null or empty string\n\t            if (params.hasOwnProperty('callerId')) {\n\t                signalParams.callerId = {number: params.callerId};\n\t            }\n\t            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n\t        };\n\t        params.signalAnswer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'answer';\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't answer the call.\", err.message, err.stack);\n\t                signalParams.call.hangup({signal: false});\n\t            });\n\t        };\n\t        params.signalConnected = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.connectionId = signalParams.connectionId;\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send connected.\", err.message, err.stack);\n\t                signalParams.call.hangup();\n\t            });\n\t        };\n\t        params.signalModify = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendModify(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send modify.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalCandidate = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendCandidate(signalParams).done();\n\t        };\n\t        params.signalHangup = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendHangup(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send hangup.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalReport = function (signalParams) {\n\t            log.debug(\"Sending debug report\", signalParams.report);\n\t            signalingChannel.sendReport(signalParams);\n\t        };\n\t\n\t        params.signalingChannel = signalingChannel;\n\t        call = respoke.Call(params);\n\t        addCall({call: call});\n\t        return call;\n\t    };\n\t\n\t    /**\n\t     * Place an audio call to a SIP URI.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.startSIPCall\n\t     * @param {object} params\n\t     * @param {string} params.uri - The SIP URI to call.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n\t     * with the local audio and/or video attached.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n\t     * with the remote audio and/or video attached.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n\t     * up.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @return {respoke.Call}\n\t     */\n\t    that.startSIPCall = function (params) {\n\t        var promise;\n\t        var call = null;\n\t        var recipient = {};\n\t        params = params || {};\n\t        params.constraints = [{\n\t            video: false,\n\t            audio: true,\n\t            mandatory: {},\n\t            optional: []\n\t        }];\n\t\n\t        that.verifyConnected();\n\t\n\t        if (!params.uri) {\n\t            throw new Error(\"Can't start a phone call without a SIP URI.\");\n\t        }\n\t\n\t        if (typeof params.caller !== 'boolean') {\n\t            params.caller = true;\n\t        }\n\t\n\t        recipient.id = params.uri;\n\t\n\t        params.instanceId = instanceId;\n\t        params.remoteEndpoint = recipient;\n\t\n\t        params.toType = params.toType || 'sip';\n\t        params.fromType = params.fromType || 'web';\n\t\n\t        params.signalOffer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'offer';\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n\t        };\n\t        params.signalAnswer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'answer';\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't answer the call.\", err.message, err.stack);\n\t                signalParams.call.hangup({signal: false});\n\t            });\n\t        };\n\t        params.signalConnected = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.connectionId = signalParams.connectionId;\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send connected.\", err.message, err.stack);\n\t                signalParams.call.hangup();\n\t            });\n\t        };\n\t        params.signalModify = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendModify(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send modify.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalCandidate = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendCandidate(signalParams).done();\n\t        };\n\t        params.signalHangup = function (signalParams) {\n\t            signalParams.target = 'call';\n\t            signalParams.recipient = recipient;\n\t            signalParams.toType = params.toType;\n\t            signalParams.fromType = params.fromType;\n\t            signalingChannel.sendHangup(signalParams).done(null, function errorHandler(err) {\n\t                log.error(\"Couldn't send hangup.\", err.message, err.stack);\n\t            });\n\t        };\n\t        params.signalReport = function (signalParams) {\n\t            log.debug(\"Sending debug report\", signalParams.report);\n\t            signalingChannel.sendReport(signalParams);\n\t        };\n\t\n\t        params.signalingChannel = signalingChannel;\n\t        call = respoke.Call(params);\n\t        addCall({call: call});\n\t        return call;\n\t    };\n\t\n\t    /**\n\t     * Assert that we are connected to the backend infrastructure.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.verifyConnected\n\t     * @throws {Error}\n\t     * @private\n\t     */\n\t    that.verifyConnected = function () {\n\t        if (!signalingChannel.isConnected()) {\n\t            throw new Error(\"Can't complete request when not connected. Please reconnect!\");\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Check whether this client is connected to the Respoke API.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.isConnected\n\t     * @returns boolean\n\t     */\n\t    that.isConnected = function () {\n\t        return signalingChannel.isConnected();\n\t    };\n\t\n\t    /**\n\t     * Join a group and begin keeping track of it. If this method is called multiple times synchronously, it will\n\t     * batch requests and only make one API call to Respoke.\n\t     *\n\t     * You can leave the group by calling `group.leave()`;\n\t     *\n\t     * ##### Joining and leaving a group\n\t     *\n\t     *      var group;\n\t     *\n\t     *      client.join({\n\t     *          id: \"book-club\",\n\t     *          onSuccess: function (evt) {\n\t     *              console.log('I joined', evt.group.id);\n\t     *              // \"I joined book-club\"\n\t     *              group = evt.group;\n\t     *              group.sendMessage({\n\t     *                  message: 'sup'\n\t     *              });\n\t     *          }\n\t     *      });\n\t     *\n\t     *      // . . .\n\t     *      // Some time later, leave the group.\n\t     *      // . . .\n\t     *      group.leave({\n\t     *          onSuccess: function (evt) {\n\t     *              console.log('I left', evt.group.id);\n\t     *              // \"I left book-club\"\n\t     *          }\n\t     *      });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.join\n\t     * @param {object} params\n\t     * @param {string} params.id - The name of the group.\n\t     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {respoke.Group.onMessage} [params.onMessage] - Message handler for messages from this group only.\n\t     * @param {respoke.Group.onJoin} [params.onJoin] - Join event listener for endpoints who join this group only.\n\t     * @param {respoke.Group.onLeave} [params.onLeave] - Leave event listener for endpoints who leave\n\t     * this group only.\n\t     * @returns {Promise<respoke.Group>|undefined} The instance of the respoke.Group which the client joined.\n\t     * @fires respoke.Client#join\n\t     */\n\t    that.join = function (params) {\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t        try {\n\t            that.verifyConnected();\n\t        } catch (e) {\n\t            deferred.reject(e);\n\t            return retVal;\n\t        }\n\t\n\t        if (!params.id) {\n\t            deferred.reject(new Error(\"Can't join a group with no group id.\"));\n\t            return retVal;\n\t        }\n\t\n\t        log.trace('requested to join group', params.id);\n\t\n\t        signalingChannel.joinGroup({\n\t            groupList: [params.id]\n\t        }).done(function successHandler() {\n\t            var group;\n\t            params.signalingChannel = signalingChannel;\n\t            params.instanceId = instanceId;\n\t\n\t            group = that.getGroup({id: params.id});\n\t\n\t            if (!group) {\n\t                group = respoke.Group(params);\n\t                that.addGroup(group);\n\t            }\n\t\n\t            group.listen('join', params.onJoin);\n\t            group.listen('leave', params.onLeave);\n\t            group.listen('message', params.onMessage);\n\t\n\t            group.addMember({\n\t                connection: that.getConnection({\n\t                    endpointId: that.endpointId,\n\t                    connectionId: that.connectionId\n\t                })\n\t            });\n\t\n\t            /**\n\t             * This event is fired every time the client joins a group. If the client leaves\n\t             * a group, this event will be fired again on the next time the client joins the group.\n\t             * @event respoke.Client#join\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Group} group\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.fire('join', {\n\t                group: group\n\t            });\n\t            deferred.resolve(group);\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Add a Group. This is called when we join a group and need to begin keeping track of it.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.addGroup\n\t     * @param {respoke.Group}\n\t     * @private\n\t     */\n\t    that.addGroup = function (newGroup) {\n\t        if (!newGroup || newGroup.className !== 'respoke.Group') {\n\t            throw new Error(\"Can't add group to internal tracking without a group.\");\n\t        }\n\t\n\t        newGroup.listen('leave', function leaveHandler(evt) {\n\t            newGroup.removeMember({connectionId: evt.connection.id});\n\t            var endpt = evt.connection.getEndpoint();\n\t            if (!endpt.hasListeners('presence')) {\n\t                checkEndpointForRemoval(endpt);\n\t            }\n\t        }, true);\n\t\n\t        groups.push(newGroup);\n\t    };\n\t\n\t    /**\n\t     * Get a list of all the groups the client is currently a member of.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getGroups\n\t     * @returns {Array<respoke.Group>} All of the groups the library is aware of.\n\t     */\n\t    that.getGroups = function () {\n\t        return groups;\n\t    };\n\t\n\t    /**\n\t     * Find a group by id and return it.\n\t     *\n\t     *     var group = client.getGroup({\n\t     *         id: \"resistance\"\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getGroup\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     * @param {respoke.Group.onJoin} [params.onJoin] - Receive notification that an endpoint has joined this group.\n\t     * @param {respoke.Group.onLeave} [params.onLeave] - Receive notification that an endpoint has left this group.\n\t     * @param {respoke.Group.onMessage} [params.onMessage] - Receive notification that a message has been\n\t     * received to a group.\n\t     * @returns {respoke.Group|undefined} The group whose ID was specified.\n\t     */\n\t    that.getGroup = function (params) {\n\t        var group;\n\t        if (!params || !params.id) {\n\t            throw new Error(\"Can't get a group without group id.\");\n\t        }\n\t\n\t        groups.every(function eachGroup(grp) {\n\t            if (grp.id === params.id) {\n\t                group = grp;\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t\n\t        if (group) {\n\t            group.listen('join', params.onJoin);\n\t            group.listen('leave', params.onLeave);\n\t            group.listen('message', params.onMessage);\n\t        }\n\t\n\t        return group;\n\t    };\n\t\n\t    /**\n\t     * Remove an Endpoint. Since an endpoint can be a member of multiple groups, we can't just remove it from\n\t     * our list on respoke.Endpoint#leave. We must see if it's a member of any more groups. If it's not\n\t     * a member of any other groups, we can stop keeping track of it.\n\t     * @todo TODO Need to account for Endpoints not created as part of a group. These do not need to be\n\t     * deleted based on group membership.\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.checkEndpointForRemoval\n\t     * @param {object} params\n\t     * @param {string} params.id - The ID of the Endpoint to check for removal.\n\t     * @private\n\t     */\n\t    function checkEndpointForRemoval(params) {\n\t        params = params || {};\n\t        if (!params.id) {\n\t            throw new Error(\"Can't remove endpoint from internal tracking without group id.\");\n\t        }\n\t\n\t        Q.all(groups.map(function eachGroup(group) {\n\t            return group.getMembers();\n\t        })).done(function successHandler(connectionsByGroup) {\n\t            // connectionsByGroup is a two-dimensional array where the first dimension is a group\n\t            // and the second dimension is a connection.\n\t            var absent = connectionsByGroup.every(function eachConnectionList(connectionList) {\n\t                return connectionList.every(function eachConnection(conn) {\n\t                    return (conn.endpointId !== params.id);\n\t                });\n\t            });\n\t            if (absent) {\n\t                endpoints.every(function eachEndpoint(ept, index) {\n\t                    if (ept.id === params.id) {\n\t                        endpoints.splice(index, 1);\n\t                        return false;\n\t                    }\n\t                    return true;\n\t                });\n\t            }\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Find an endpoint by id and return the `respoke.Endpoint` object.\n\t     *\n\t     * If it is not already cached locally, will be added to the local cache of tracked endpoints,\n\t     * its presence will be determined, and will be available in `client.getEndpoints()`.\n\t     *\n\t     *     var endpoint = client.getEndpoint({\n\t     *         id: \"dlee\"\n\t     *     });\n\t     *\n\t     * @ignore If the endpoint is not found in the local cache of endpoint objects (see `client.getEndpoints()`),\n\t     * it will be created. This is useful, for example, in the case of dynamic endpoints where groups are\n\t     * not in use. Override dynamic endpoint creation by setting `params.skipCreate = true`.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getEndpoint\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     * @param {respoke.Endpoint.onMessage} [params.onMessage] - Handle messages sent to the logged-in user\n\t     * from this one Endpoint.\n\t     * @param {respoke.Endpoint.onPresence} [params.onPresence] - Handle presence notifications from this one\n\t     * Endpoint.\n\t     * @arg {boolean} [params.skipCreate] - Skip the creation step and return undefined if we don't yet\n\t     * @arg {boolean} [params.skipPresence] - Skip registering for this endpoint's presence.\n\t     * @returns {respoke.Endpoint} The endpoint whose ID was specified.\n\t     */\n\t    that.getEndpoint = function (params) {\n\t        var endpoint;\n\t        if (!params || !params.id) {\n\t            throw new Error(\"Can't get an endpoint without endpoint id.\");\n\t        }\n\t\n\t        endpoints.every(function eachEndpoint(ept) {\n\t            if (ept.id === params.id) {\n\t                endpoint = ept;\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t\n\t        if (!endpoint && params && !params.skipCreate) {\n\t            params.instanceId = instanceId;\n\t            params.signalingChannel = signalingChannel;\n\t            params.resolveEndpointPresence = clientSettings.resolveEndpointPresence;\n\t            params.addCall = addCall;\n\t\n\t            endpoint = respoke.Endpoint(params);\n\t            endpoints.push(endpoint);\n\t        }\n\t\n\t        if (!endpoint) {\n\t            return;\n\t        }\n\t\n\t        if (params.skipPresence !== true) {\n\t            signalingChannel.registerPresence({\n\t                endpointList: [endpoint.id]\n\t            }).done(null, function (err) {\n\t                log.error(\"Couldn't register for presence on\", endpoint.id, err.message);\n\t            });\n\t        }\n\t        endpoint.listen('presence', params.onPresence);\n\t        endpoint.listen('message', params.onMessage);\n\t\n\t        return endpoint;\n\t    };\n\t\n\t    /**\n\t     * Find a Connection by id and return it.\n\t     *\n\t     *     var connection = client.getConnection({\n\t     *         id: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\"\n\t     *     });\n\t     *\n\t     * @ignore In most cases, if we don't find it we will create it. This is useful\n\t     * in the case of dynamic endpoints where groups are not in use. Set skipCreate=true\n\t     * to return undefined if the Connection is not already known.\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getConnection\n\t     * @param {object} params\n\t     * @param {string} params.connectionId\n\t     * @param {string} [params.endpointId] - An endpointId to use in the creation of this connection.\n\t     * @param {respoke.Endpoint.onMessage} [params.onMessage] - Handle messages sent to the logged-in user\n\t     * from this one Connection.\n\t     * @param {respoke.Endpoint.onPresence} [params.onPresence] - Handle presence notifications from this one\n\t     * Connection.\n\t     * @returns {respoke.Connection} The connection whose ID was specified.\n\t     */\n\t    that.getConnection = function (params) {\n\t        var connection;\n\t        var endpoint;\n\t        var endpointsToSearch = endpoints;\n\t\n\t        params = params || {};\n\t        if (!params.connectionId) {\n\t            throw new Error(\"Can't get a connection without connection id.\");\n\t        }\n\t        if (!params.endpointId && !params.skipCreate) {\n\t            throw new Error(\"Can't create a connection without endpoint id.\");\n\t        }\n\t\n\t        if (params.endpointId) {\n\t            endpoint = that.getEndpoint({\n\t                id: params.endpointId,\n\t                skipPresence: true,\n\t                skipCreate: params.skipCreate\n\t            });\n\t\n\t            endpointsToSearch = [];\n\t            if (endpoint) {\n\t                endpointsToSearch = [endpoint];\n\t            }\n\t        }\n\t\n\t        endpointsToSearch.every(function eachEndpoint(ept) {\n\t            connection = ept.getConnection(params);\n\t            return !connection;\n\t        });\n\t\n\t        if (!connection && !params.skipCreate) {\n\t            params.instanceId = instanceId;\n\t            connection = respoke.Connection(params);\n\t            endpoint.connections.push(connection);\n\t        }\n\t\n\t        return connection;\n\t    };\n\t\n\t    /**\n\t     * Get the list of **all endpoints** that the library has knowledge of.\n\t     * These are `respoke.Endpoint` objects, not just the endpointIds.\n\t     *\n\t     * The library gains knowledge of an endpoint in two ways:\n\t     * 1. when an endpoint joins a group that the user (currently logged-in endpoint) is a member of (if group presence is enabled)\n\t     * 2. when an endpoint that the user (currently logged-in endpoint) is watching*\n\t     *\n\t     * *If an endpoint that the library does not know about sends a message to the client, you\n\t     * can immediately call the `client.getEndpoint()` method on the sender of the message to enable\n\t     * watching of the sender's endpoint.\n\t     *\n\t     *      client.on('message', function (data) {\n\t     *          if (data.endpoint) {\n\t     *              // start tracking this endpoint.\n\t     *              client.getEndpoint({ id: data.endpoint.id });\n\t     *          }\n\t     *      });\n\t     *\n\t     *\n\t     * @memberof! respoke.Client\n\t     * @method respoke.Client.getEndpoints\n\t     * @returns {Array<respoke.Endpoint>}\n\t     */\n\t    that.getEndpoints = function () {\n\t        return endpoints;\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.Client\n\t\n\t/**\n\t * Handle sending successfully.\n\t * @callback respoke.Client.successHandler\n\t */\n\t/**\n\t * Handle joining a group successfully. This callback is called only once when Client.join() is called.\n\t * @callback respoke.Client.joinHandler\n\t * @param {respoke.Group} group\n\t */\n\t/**\n\t * Receive notification that the client has joined a group. This callback is called everytime\n\t * respoke.Client#join is fired.\n\t * @callback respoke.Client.onJoin\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Group} evt.group\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * Receive notification that the client has left a group. This callback is called everytime\n\t * respoke.Client#leave is fired.\n\t * @callback respoke.Client.onLeave\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Group} evt.group\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * Receive notification that a message has been received. This callback is called every time\n\t * respoke.Client#message is fired.\n\t * @callback respoke.Client.onClientMessage\n\t * @param {respoke.Event} evt\n\t * @param {respoke.TextMessage} evt.message\n\t * @param {respoke.Group} [evt.group] - If the message is to a group we already know about,\n\t * this will be set. If null, the developer can use client.join({id: evt.message.header.channel}) to join\n\t * the group. From that point forward, Group#message will fire when a message is received as well. If\n\t * group is undefined instead of null, the message is not a group message at all.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Client} evt.target\n\t */\n\t/**\n\t * Receive notification that the client is receiving a call from a remote party. This callback is called every\n\t * time respoke.Client#call is fired.\n\t * @callback respoke.Client.onCall\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Call} evt.call\n\t * @param {respoke.Endpoint} evt.endpoint\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * Receive notification that the client is receiving a request for a direct connection from a remote party.\n\t * This callback is called every time respoke.Client#direct-connection is fired.\n\t * @callback respoke.Client.onDirectConnection\n\t * @param {respoke.Event} evt\n\t * @param {respoke.DirectConnection} evt.directConnection\n\t * @param {respoke.Endpoint} evt.endpoint\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * Receive notification Respoke has successfully connected to the cloud. This callback is called every time\n\t * respoke.Client#connect is fired.\n\t * @callback respoke.Client.onConnect\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Client} evt.target\n\t */\n\t/**\n\t * Receive notification Respoke has successfully disconnected from the cloud. This callback is called every time\n\t * respoke.Client#disconnect is fired.\n\t * @callback respoke.Client.onDisconnect\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Client} evt.target\n\t */\n\t/**\n\t * Receive notification Respoke has successfully reconnected to the cloud. This callback is called every time\n\t * respoke.Client#reconnect is fired.\n\t * @callback respoke.Client.onReconnect\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Client} evt.target\n\t */\n\t/**\n\t * Handle disconnection to the cloud successfully.\n\t * @callback respoke.Client.disconnectSuccessHandler\n\t */\n\t/**\n\t * Handle an error that resulted from a method call.\n\t * @callback respoke.Client.errorHandler\n\t * @params {Error} err\n\t */\n\t/**\n\t * Handle connection to the cloud successfully.\n\t * @callback respoke.Client.connectSuccessHandler\n\t */\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar respoke = __webpack_require__(1);\n\t\n\t/**\n\t * A `respoke.Connection` always belongs to an Endpoint.\n\t *\n\t * There is a distinction between Endpoint and Connection because an Endpoint can be authenticated\n\t * from multiple devices, browsers, or browser tabs. Each of these separate authentications is a Connection.\n\t * A Client can choose to interact with connections of the same endpoint in different ways.\n\t *\n\t * @constructor\n\t * @class respoke.Connection\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.id\n\t * @returns {respoke.Connection}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Connection\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name client\n\t     * @type {respoke.Client}\n\t     * @private\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t\n\t    /**\n\t     * The connection id.\n\t     * @memberof! respoke.Connection\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = that.id || that.connectionId;\n\t    if (!that.id) {\n\t        throw new Error(\"Can't make a connection without an id.\");\n\t    }\n\t    delete that.instanceId;\n\t    delete that.connectionId;\n\t\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.Connection\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Connection';\n\t\n\t    /**\n\t     * Represents the presence status. Typically a string, but other types are supported.\n\t     * Defaults to `'unavailable'`.\n\t     *\n\t     * **Do not modify this directly** - it won't update presence with Respoke. Presence must be updated\n\t     * by the remote endpoint.\n\t     *\n\t     * @memberof! respoke.Connection\n\t     * @name presence\n\t     * @type {string|number|object|Array}\n\t     */\n\t    that.presence = 'unavailable';\n\t\n\t    /**\n\t     * Deprecated: use endpoint.presence instead.\n\t     *\n\t     * Return the presence.\n\t     * @memberof! respoke.Connection\n\t     * @deprecated\n\t     * @name presence\n\t     * @type {string|number|object|Array}\n\t     */\n\t    that.getPresence = function () {\n\t        return that.presence;\n\t    };\n\t\n\t    /**\n\t     * Send a message to this connection of an endpoint. If the endpoint has multiple connections,\n\t     * it will only receive the message at this connection.\n\t     *\n\t     *     connection.sendMessage({\n\t     *         message: \"PJ, put that PBR down!\"\n\t     *     });\n\t     *\n\t     * **Using callbacks** will disable promises.\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.sendMessage\n\t     * @param {object} params\n\t     * @param {string} params.message\n\t     * @param {boolean} [params.push=false] Whether or not the message should be considered for push notifications to\n\t     * mobile devices.\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation\n\t     * of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        params = params || {};\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().sendMessage(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new screen sharing call. Screenshares are inherently unidirectional video only. This may change\n\t     * in the future when Chrome adds the ability to obtain screen video and microphone audio at the same time. For\n\t     * now, if you also need audio, place a second audio only call.\n\t     *\n\t     * The endpoint who calls `connection.startScreenShare` will be the one whose screen is shared. If you'd like to\n\t     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n\t     * not the sharer, it is recommened that you use `endpoint.sendMessage` to send a control message to the user\n\t     * whose screenshare is being requested so that user's app can call `connection.startScreenShare`.\n\t     *\n\t     * NOTE: At this time, screen sharing only works with Chrome, and Chrome requires a Chrome extension to\n\t     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension.\n\t     * Support for additional browsers will be added in the future.\n\t     *\n\t     *     connection.startScreenShare({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startScreenShare\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n\t     * and the remote party has received the video.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startScreenShare = function (params) {\n\t        client.verifyConnected();\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().startScreenShare(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new Call for a voice and/or video call this particular connection, only. The Call cannot be answered\n\t     * by another connection of this Endpoint.\n\t     *\n\t     *     connection.startCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {RTCConstraints} [params.constraints]\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startCall = function (params) {\n\t        params = params || {};\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().startCall(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new audio-only call.\n\t     *\n\t     *     connection.startAudioCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startAudioCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startAudioCall = function (params) {\n\t        client.verifyConnected();\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().startAudioCall(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new call with audio and video.\n\t     *\n\t     *     connection.startVideoCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startVideoCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has\n\t     * been hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startVideoCall = function (params) {\n\t        client.verifyConnected();\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().startVideoCall(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new DirectConnection with this particular connection, only. The DirectConnection cannot be answered\n\t     * by another connection of this Endpoint.  This method creates a new Call as well, attaching this\n\t     * DirectConnection to it for the purposes of creating a peer-to-peer link for sending data such as messages to\n\t     * the other endpoint. Information sent through a DirectConnection is not handled by the cloud infrastructure.\n\t     *\n\t     *     connection.startDirectConnection({\n\t     *         onOpen: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.startDirectConnection\n\t     * @param {object} params\n\t     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess] - Success handler for this\n\t     * invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {respoke.DirectConnection.onStart} [params.onStart] - A callback for when setup of the direct\n\t     * connection begins. The direct connection will not be open yet.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - A callback for receiving notification of when\n\t     * the DirectConnection is open and ready to be used.\n\t     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n\t     * connection.\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - A callback for receiving notification of\n\t     * when the DirectConnection is closed and the two Endpoints are disconnected.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - A callback for receiving messages sent\n\t     * through the DirectConnection.\n\t     * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the\n\t     * request for a direct connection and setup begins.\n\t     * @returns {respoke.DirectConnection} The DirectConnection which can be used to send data and messages\n\t     * directly to the other endpoint.\n\t     */\n\t    that.startDirectConnection = function (params) {\n\t        var retVal;\n\t        var deferred;\n\t        params = params || {};\n\t\n\t        try {\n\t            client.verifyConnected();\n\t        } catch (err) {\n\t            deferred = respoke.Q.defer();\n\t            retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        params.connectionId = that.id;\n\t        return that.getEndpoint().startDirectConnection(params);\n\t    };\n\t\n\t    /**\n\t     * Get the Endpoint that this Connection belongs to.\n\t     * @memberof! respoke.Connection\n\t     * @method respoke.Connection.getEndpoint\n\t     * @returns {respoke.Endpoint}\n\t     */\n\t    that.getEndpoint = function () {\n\t        return client.getEndpoint({\n\t            id: that.endpointId,\n\t            skipPresence: true\n\t        });\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.Connection\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar Q = __webpack_require__(8);\n\tvar respoke = __webpack_require__(1);\n\tvar log = respoke.log;\n\t\n\t/**\n\t * `respoke.Endpoint`s are users of a Respoke app.\n\t * An Endpoint can be a person in a browser or device, or an app using Respoke APIs from a server.\n\t * A Client can interact with endpoints through messages, audio or video calls, or direct connections.\n\t * An Endpoint may be authenticated from multiple devices to the same app (each of which is\n\t * represented by a Connection).\n\t *\n\t * ```\n\t * var jim = client.getEndpoint({ id: 'jim' });\n\t * ```\n\t *\n\t * @constructor\n\t * @class respoke.Endpoint\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.id\n\t * @param {string} params.instanceId\n\t * @param {respoke.client.resolvePresence} [params.resolvePresence] An optional function for resolving presence\n\t * for an endpoint.\n\t * @returns {respoke.Endpoint}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Endpoint\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name client\n\t     * @type {respoke.Client}\n\t     * @private\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name signalingChannel\n\t     * @type {respoke.SignalingChannel}\n\t     * @private\n\t     */\n\t    var signalingChannel = params.signalingChannel;\n\t\n\t    var addCall = params.addCall;\n\t\n\t    delete that.signalingChannel;\n\t    delete that.instanceId;\n\t    delete that.connectionId;\n\t    delete that.addCall;\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.Endpoint\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Endpoint';\n\t    /**\n\t     * A direct connection to this endpoint. This can be used to send direct messages.\n\t     * @memberof! respoke.Endpoint\n\t     * @name directConnection\n\t     * @type {respoke.DirectConnection}\n\t     */\n\t    that.directConnection = null;\n\t\n\t    /**\n\t     * Array of connections for this endpoint.\n\t     * @memberof! respoke.Endpoint\n\t     * @name connections\n\t     * @type {Array<respoke.Connection>}\n\t     */\n\t    that.connections = [];\n\t    client.listen('disconnect', function disconnectHandler() {\n\t        that.connections = [];\n\t    });\n\t\n\t    var resolveEndpointPresence = params.resolveEndpointPresence;\n\t    delete that.resolveEndpointPresence;\n\t\n\t    /**\n\t     * Represents the presence status. Typically a string, but other types are supported.\n\t     * Defaults to `'unavailable'`.\n\t     *\n\t     * **Do not modify this directly** - it won't update presence with Respoke. Presence must be updated\n\t     * by the remote endpoint.\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @name presence\n\t     * @type {string|number|object|Array}\n\t     */\n\t    that.presence = 'unavailable';\n\t\n\t    /**\n\t     * Deprecated: use endpoint.presence instead.\n\t     *\n\t     * Return the presence.\n\t     * @memberof! respoke.Endpoint\n\t     * @deprecated\n\t     * @name presence\n\t     * @type {string|number|object|Array}\n\t     */\n\t    that.getPresence = function () {\n\t        return that.presence;\n\t    };\n\t\n\t    /**\n\t     * Internally set the presence on the object for this session upon receipt of a presence notification from\n\t     * the backend. Respoke developers shouldn't use this.\n\t     *\n\t     * ```\n\t     * client.setPresence({ presence: 'busy' });\n\t     * ```\n\t     *\n\t     * While technically available on an Endpoint or Connection, this will not trigger\n\t     * any API changes. The changes will only be reflected locally.\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.setPresence\n\t     * @param {object} params\n\t     * @param {string|number|object|Array} [params.presence=available]\n\t     * @param {string} params.connectionId\n\t     * @fires respoke.Endpoint#presence\n\t     * @private\n\t     */\n\t    that.setPresence = function (params) {\n\t        var connection;\n\t        params = params || {};\n\t        params.presence = params.presence || 'available';\n\t        params.connectionId = params.connectionId || that.connectionId;\n\t\n\t        if (!params.connectionId) {\n\t            throw new Error(\"Can't set Endpoint presence without a connectionId.\");\n\t        }\n\t\n\t        connection = that.getConnection({connectionId: params.connectionId}) || client.getConnection({\n\t            connectionId: params.connectionId,\n\t            skipCreate: false,\n\t            endpointId: that.id\n\t        });\n\t\n\t        connection.presence = params.presence;\n\t        that.resolvePresence();\n\t\n\t        /**\n\t         * This event indicates that the presence for this endpoint has been updated.\n\t         * @event respoke.Endpoint#presence\n\t         * @type {respoke.Event}\n\t         * @property {string|number|object|Array} presence\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Endpoint} target\n\t         */\n\t        that.fire('presence', {\n\t            presence: that.presence\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Send a message to the endpoint through the infrastructure.\n\t     *\n\t     * ```\n\t     * endpoint.sendMessage({\n\t     *     message: \"wassuuuuup\"\n\t     * });\n\t     * ```\n\t     *\n\t     * **Using callbacks** will disable promises.\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.sendMessage\n\t     * @param {object} params\n\t     * @param {string} params.message\n\t     * @param {string} [params.connectionId]\n\t     * @param {boolean} [params.push=false] Whether or not to consider the message for push notifications to mobile\n\t     * devices.\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of this\n\t     * method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this method\n\t     * only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        var promise;\n\t        var retVal;\n\t        params = params || {};\n\t\n\t        promise = signalingChannel.sendMessage({\n\t            connectionId: params.connectionId,\n\t            message: params.message,\n\t            push: !!params.push,\n\t            recipient: that\n\t        });\n\t\n\t        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Create a new audio-only call.\n\t     *\n\t     *     endpoint.startAudioCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startAudioCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startAudioCall = function (params) {\n\t        params = params || {};\n\t\n\t        params.constraints = respoke.convertConstraints(params.constraints, [{\n\t            video: false,\n\t            audio: true,\n\t            optional: [],\n\t            mandatory: {}\n\t        }]);\n\t\n\t        return that.startCall(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new call with audio and video.\n\t     *\n\t     *     endpoint.startVideoCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startVideoCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startVideoCall = function (params) {\n\t        params = params || {};\n\t\n\t        params.constraints = respoke.convertConstraints(params.constraints, [{\n\t            video: true,\n\t            audio: true,\n\t            optional: [],\n\t            mandatory: {}\n\t        }]);\n\t\n\t        return that.startCall(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new screen sharing call. Screenshares are inherently unidirectional video only. This may change\n\t     * in the future when Chrome adds the ability to obtain screen video and microphone audio at the same time. For\n\t     * now, if you also need audio, place a second audio only call.\n\t     *\n\t     * The endpoint who calls `endpoint.startScreenShare` will be the one whose screen is shared. If you'd like to\n\t     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n\t     * not the sharer, it is recommened that you use `endpoint.sendMessage` to send a control message to the user\n\t     * whose screenshare is being requested so that user's app can call `endpoint.startScreenShare`.\n\t     *\n\t     * NOTE: At this time, screen sharing only works with Chrome, and Chrome requires a Chrome extension to\n\t     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension.\n\t     * Support for additional browsers will be added in the future.\n\t     *\n\t     *     endpoint.startScreenShare({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startScreenShare\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n\t     * and the remote party has received the video.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {string} [params.source] - Pass in what type of mediaSource you want. If omitted, you'll have access\n\t     * to both the screen and windows. In firefox, you'll have access to the screen only.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startScreenShare = function (params) {\n\t        params = params || {};\n\t        params.target = 'screenshare';\n\t\n\t        if (typeof params.caller !== 'boolean') {\n\t            params.caller = true;\n\t        }\n\t\n\t        if (params.caller) {\n\t            params.constraints = respoke.getScreenShareConstraints(params);\n\t            params.sendOnly = true;\n\t        } else {\n\t            params.receiveOnly = true;\n\t        }\n\t\n\t        return that.startCall(params);\n\t    };\n\t\n\t    /**\n\t     * Create a new call.\n\t     *\n\t     *     endpoint.startCall({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startCall\n\t     * @param {object} params\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n\t     * element with the remote\n\t     * audio and/or video attached.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {Array<RTCConstraints>} [params.constraints]\n\t     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t     * @param {boolean} [params.sendOnly] - whether or not we send media\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n\t     * all connections belonging to this endpoint.\n\t     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     * @returns {respoke.Call}\n\t     */\n\t    that.startCall = function (params) {\n\t        var call = null;\n\t        params = params || {};\n\t\n\t        params.constraints = respoke.convertConstraints(params.constraints, [{\n\t            video: true,\n\t            audio: true,\n\t            mandatory: {},\n\t            optional: []\n\t        }]);\n\t\n\t        // If they are requesting a screen share by constraints without having called startScreenShare\n\t        if (params.target !== 'screenshare' && params.constraints[0] &&\n\t                respoke.constraintsHasScreenShare(params.constraints[0])) {\n\t            return that.startScreenShare(params);\n\t        }\n\t\n\t        params.target = params.target || \"call\";\n\t\n\t        log.debug('Endpoint.call', params);\n\t        client.verifyConnected();\n\t        if (typeof params.caller !== 'boolean') {\n\t            params.caller = true;\n\t        }\n\t\n\t        if (!that.id) {\n\t            log.error(\"Can't start a call without endpoint ID!\");\n\t            return;\n\t        }\n\t\n\t        params.instanceId = instanceId;\n\t        params.remoteEndpoint = that;\n\t\n\t        params.signalOffer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'offer';\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = that;\n\t\n\t            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n\t        };\n\t        params.signalAnswer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'answer';\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = that;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n\t                signalParams.call.hangup({signal: false});\n\t            });\n\t        };\n\t        params.signalConnected = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.connectionId = signalParams.call.connectionId;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalParams.recipient = that;\n\t            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n\t                signalParams.call.hangup();\n\t            });\n\t        };\n\t        params.signalModify = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = that;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalingChannel.sendModify(signalParams).done();\n\t        };\n\t        params.signalCandidate = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = that;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalingChannel.sendCandidate(signalParams).done();\n\t        };\n\t        params.signalHangup = function (signalParams) {\n\t            signalParams.target = params.target;\n\t            signalParams.recipient = that;\n\t            signalParams.sessionId = signalParams.call.sessionId;\n\t            signalingChannel.sendHangup(signalParams).done();\n\t        };\n\t        params.signalReport = function (signalParams) {\n\t            log.debug(\"Sending debug report\", signalParams.report);\n\t            signalingChannel.sendReport(signalParams).done();\n\t        };\n\t\n\t        params.signalingChannel = signalingChannel;\n\t        call = respoke.Call(params);\n\t        addCall({call: call});\n\t        return call;\n\t    };\n\t\n\t    /**\n\t     * Create a new DirectConnection.  This method creates a new Call as well, attaching this DirectConnection to\n\t     * it for the purposes of creating a peer-to-peer link for sending data such as messages to the other endpoint.\n\t     * Information sent through a DirectConnection is not handled by the cloud infrastructure.  If there is already\n\t     * a direct connection open, this method will resolve the promise with that direct connection instead of\n\t     * attempting to create a new one.\n\t     *\n\t     *     endpoint.startDirectConnection({\n\t     *         onOpen: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.startDirectConnection\n\t     * @param {object} params\n\t     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess] - Success handler for this\n\t     * invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @param {respoke.DirectConnection.onStart} [params.onStart] - A callback for when setup of the direct\n\t     * connection begins. The direct connection will not be open yet.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - A callback for receiving notification of when\n\t     * the DirectConnection is open and ready to be used.\n\t     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n\t     * connection.\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - A callback for receiving notification of\n\t     * when the DirectConnection is closed and the two Endpoints are disconnected.\n\t     * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the\n\t     * request for a direct connection and setup begins.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - A callback for receiving messages sent\n\t     * through the DirectConnection.\n\t     * @param {string} [params.connectionId] - An optional connection ID to use for this connection. This allows\n\t     * the connection to be made to a specific instance of an endpoint in the case that the same endpoint is logged\n\t     * in from multiple locations.\n\t     * @returns {Promise<respoke.DirectConnection>} The DirectConnection which can be used to send data and messages\n\t     * directly to the other endpoint.\n\t     */\n\t    that.startDirectConnection = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t        var call;\n\t\n\t        try {\n\t            client.verifyConnected();\n\t        } catch (err) {\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        if (that.directConnection || params.create === false) {\n\t            deferred.resolve(that.directConnection);\n\t            return retVal;\n\t        }\n\t\n\t        if (typeof params.caller !== 'boolean') {\n\t            params.caller = true;\n\t        }\n\t\n\t        if (!that.id) {\n\t            deferred.reject(new Error(\"Can't start a direct connection without endpoint ID!\"));\n\t            return retVal;\n\t        }\n\t\n\t        params.instanceId = instanceId;\n\t        params.remoteEndpoint = that;\n\t\n\t        params.signalOffer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.signalType = 'offer';\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t\n\t            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n\t        };\n\t        params.signalConnected = function (signalParams) {\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n\t                signalParams.call.hangup();\n\t            });\n\t        };\n\t        params.signalAnswer = function (signalParams) {\n\t            var onSuccess = signalParams.onSuccess;\n\t            var onError = signalParams.onError;\n\t            delete signalParams.onSuccess;\n\t            delete signalParams.onError;\n\t\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t            signalParams.signalType = 'answer';\n\t            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n\t                signalParams.call.hangup({signal: false});\n\t            });\n\t        };\n\t        params.signalCandidate = function (signalParams) {\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t            signalingChannel.sendCandidate(signalParams).done();\n\t        };\n\t        params.signalHangup = function (signalParams) {\n\t            signalParams.target = 'directConnection';\n\t            signalParams.recipient = that;\n\t            signalingChannel.sendHangup(signalParams).done();\n\t        };\n\t        params.signalReport = function (signalParams) {\n\t            signalParams.report.target = 'directConnection';\n\t            log.debug(\"Not sending report\");\n\t            log.debug(signalParams.report);\n\t        };\n\t        params.needDirectConnection = true;\n\t        // Don't include audio in the offer SDP\n\t        params.offerOptions = {\n\t            mandatory: {\n\t                OfferToReceiveAudio: false\n\t            }\n\t        };\n\t\n\t        params.signalingChannel = signalingChannel;\n\t        call = respoke.Call(params);\n\t        addCall({call: call});\n\t        call.listen('direct-connection', function directConnectionHandler(evt) {\n\t            that.directConnection = evt.directConnection;\n\t            if (params.caller !== true) {\n\t                if (!client.hasListeners('direct-connection') &&\n\t                        !client.hasListeners('direct-connection') &&\n\t                        !call.hasListeners('direct-connection')) {\n\t                    that.directConnection.reject();\n\t                    deferred.reject(new Error(\"Got an incoming direct connection with no handlers to accept it!\"));\n\t                    return;\n\t                }\n\t\n\t                deferred.resolve(that.directConnection);\n\t                that.directConnection.listen('close', function closeHandler(evt) {\n\t                    that.directConnection = undefined;\n\t                }, true);\n\t            }\n\t        }, true);\n\t\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Find the presence out of all known connections with the highest priority (most availability)\n\t     * and set it as the endpoint's resolved presence.\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.resolvePresence\n\t     * @private\n\t     */\n\t    that.resolvePresence = function () {\n\t\n\t        var presenceList = that.connections.map(function (connection) {\n\t            return connection.presence;\n\t        });\n\t\n\t        if (resolveEndpointPresence !== undefined) {\n\t            that.presence = resolveEndpointPresence(presenceList);\n\t        } else {\n\t            var options = ['chat', 'available', 'away', 'dnd', 'xa', 'unavailable'];\n\t            var idList;\n\t\n\t            /*!\n\t             * Sort the connections array by the priority of the value of the presence of that\n\t             * connectionId. This will cause the first element in the list to be the id of the\n\t             * session with the highest priority presence so we can access it by the 0 index.\n\t             * TODO: If we don't really care about the sorting and only about the highest priority\n\t             * we could use Array.prototype.every to improve this algorithm.\n\t             */\n\t            idList = that.connections.sort(function sorter(a, b) {\n\t                var indexA = options.indexOf(a.presence);\n\t                var indexB = options.indexOf(b.presence);\n\t                // Move it to the end of the list if it isn't one of our accepted presence values\n\t                indexA = indexA === -1 ? 1000 : indexA;\n\t                indexB = indexB === -1 ? 1000 : indexB;\n\t                return indexA < indexB ? -1 : (indexB < indexA ? 1 : 0);\n\t            });\n\t\n\t            if (idList[0]) {\n\t                that.presence = idList[0].presence;\n\t            } else {\n\t                that.presence = 'unavailable';\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Get the Connection with the specified id. The connection ID is optional if only one connection exists.\n\t     *\n\t     *     var connection = endpoint.getConnection({\n\t     *         connectionId: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\"\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Endpoint\n\t     * @method respoke.Endpoint.getConnection\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} [params.connectionId]\n\t     * @return {respoke.Connection}\n\t     */\n\t    that.getConnection = function (params) {\n\t        var connection = null;\n\t        params = params || {};\n\t        if (that.connections.length === 1 &&\n\t                (!params.connectionId || that.connections[0] === params.connectionId)) {\n\t            return that.connections[0];\n\t        }\n\t\n\t        if (!params || !params.connectionId) {\n\t            throw new Error(\"Can't find a connection without the connectionId.\");\n\t        }\n\t\n\t        that.connections.every(function eachConnection(conn) {\n\t            if (conn.id === params.connectionId) {\n\t                connection = conn;\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t\n\t        return connection;\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.Endpoint\n\t/**\n\t * Handle messages sent to the logged-in user from this one Endpoint.  This callback is called every time\n\t * respoke.Endpoint#message fires.\n\t * @callback respoke.Endpoint.onMessage\n\t * @param {respoke.Event} evt\n\t * @param {respoke.TextMessage} evt.message - the message\n\t * @param {respoke.Endpoint} evt.target\n\t * @param {string} evt.name - the event name\n\t */\n\t/**\n\t * Handle presence notifications from this one Endpoint.  This callback is called every time\n\t * respoke.Endpoint#message fires.\n\t * @callback respoke.Endpoint.onPresence\n\t * @param {respoke.Event} evt\n\t * @param {string|number|object|Array} evt.presence - the Endpoint's presence\n\t * @param {respoke.Endpoint} evt.target\n\t * @param {string} evt.name - the event name\n\t */\n\t /**\n\t * Handle resolving presence for this endpoint\n\t * @callback respoke.Client.resolveEndpointPresence\n\t * @param {Array<object>} connectionPresence\n\t * @returns {object|string|number}\n\t */\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\t/**\n\t * A text message and the information needed to route it.\n\t * @class respoke.TextMessage\n\t * @constructor\n\t * @param {object} params\n\t * @param {string} [params.endpointId] - If sending, endpoint ID of the thing we're sending a message to.\n\t * @param {string} [params.connectionId] - If sending, connection ID of the thing we're sending a message to.\n\t * @param {string} [params.message] - If sending, a message to send\n\t * @param {object} [params.rawMessage] - If receiving, the parsed JSON we got from the server\n\t * @private\n\t * @returns {respoke.TextMessage}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = {};\n\t\n\t    /**\n\t     * Parse rawMessage and set attributes required for message delivery.\n\t     * @memberof! respoke.TextMessage\n\t     * @method respoke.TextMessage.parse\n\t     * @private\n\t     */\n\t    function parse() {\n\t        if (params.rawMessage) {\n\t            try {\n\t                that.endpointId = params.rawMessage.header.from;\n\t                that.connectionId = params.rawMessage.header.fromConnection;\n\t                that.timestamp = params.rawMessage.header.timestamp;\n\t            } catch (e) {\n\t                throw new Error(e);\n\t            }\n\t            that.message = params.rawMessage.message || params.rawMessage.body;\n\t            if (params.rawMessage.header.channel) {\n\t                that.recipient = params.rawMessage.header.channel;\n\t            }\n\t        } else {\n\t            try {\n\t                that.to = params.endpointId;\n\t                that.toConnection = params.connectionId;\n\t                that.requestConnectionReply = (params.requestConnectionReply === true);\n\t                that.push = (params.push === true);\n\t            } catch (e) {\n\t                throw new Error(e);\n\t            }\n\t            that.message = params.message;\n\t        }\n\t    }\n\t\n\t    parse();\n\t    return that;\n\t}; // End respoke.TextMessage\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar Q = __webpack_require__(8);\n\tvar respoke = __webpack_require__(1);\n\t\n\t/**\n\t * A `respoke.Group` represents a collection of endpoints.\n\t *\n\t * There are methods to communicate with the endpoints at the group level and track\n\t * their presence in the group.\n\t *\n\t * @class respoke.Group\n\t * @augments respoke.EventEmitter\n\t * @constructor\n\t * @param {object} params\n\t * @param {string} params.instanceId\n\t * @param {respoke.Group.onJoin} params.onJoin - A callback to receive notifications every time a new\n\t * endpoint has joined the group. This callback does not get called when the client joins the group.\n\t * @param {respoke.Group.onMessage} params.onMessage - A callback to receive messages sent to the group from\n\t * remote endpoints.\n\t * @param {respoke.Group.onLeave} params.onLeave - A callback to receive notifications every time a new\n\t * endpoint has left the group. This callback does not get called when the client leaves the group.\n\t * @returns {respoke.Group}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t\n\t    var that = respoke.EventEmitter(params);\n\t    /**\n\t     * @memberof! respoke.Group\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var client = respoke.getClient(instanceId);\n\t\n\t    if (!that.id) {\n\t        throw new Error(\"Can't create a group without an ID.\");\n\t    }\n\t\n\t    /**\n\t     * Indicates whether there have been group membership changes since the last time we performed\n\t     * a network request to list group members.\n\t     * @memberof! respoke.Group\n\t     * @name cacheIsValid\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var cacheIsValid = false;\n\t\n\t    /**\n\t     * Internal reference to the api signaling channel.\n\t     * @memberof! respoke.Group\n\t     * @name signalingChannel\n\t     * @type respoke.SignalingChannel\n\t     * @private\n\t     */\n\t    var signalingChannel = params.signalingChannel;\n\t    delete params.signalingChannel;\n\t\n\t    /**\n\t     * The connections to members of this group.\n\t     * @memberof! respoke.Group\n\t     * @name endpoints\n\t     * @type {array<respoke.Connection>}\n\t     */\n\t    that.connections = [];\n\t    /**\n\t     * A name to identify the type of this object.\n\t     * @memberof! respoke.Group\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Group';\n\t    that.listen('join', params.onJoin);\n\t    /**\n\t     * Indicates that a message has been sent to this group.\n\t     * @event respoke.Group#message\n\t     * @type {respoke.Event}\n\t     * @property {respoke.TextMessage} message\n\t     * @property {string} name - The event name.\n\t     * @property {respoke.Group} target\n\t     */\n\t    that.listen('message', params.onMessage);\n\t    that.listen('leave', params.onLeave);\n\t    client.listen('disconnect', function disconnectHandler() {\n\t        cacheIsValid = false;\n\t        that.connections = [];\n\t    }, true);\n\t\n\t    delete that.instanceId;\n\t    delete that.onMessage;\n\t    delete that.onPresence;\n\t    delete that.onJoin;\n\t    delete that.onLeave;\n\t\n\t    /**\n\t     * Join this group.\n\t     *\n\t     *     group.join().done(function () {\n\t     *         group.sendMessage({\n\t     *             message: \"Hey, ppl! I'm here!\"\n\t     *         });\n\t     *     }, function (err) {\n\t     *         // Couldn't join the group, possibly permissions error\n\t     *     });\n\t     *\n\t     * **Using callbacks** will disable promises.\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.join\n\t     * @return {Promise|undefined}\n\t     * @param {object} params\n\t     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @fires respoke.Client#join\n\t     */\n\t    that.join = function () {\n\t        var params = {\n\t            id: that.id\n\t        };\n\t        var promise;\n\t        var deferred;\n\t        var retVal;\n\t        cacheIsValid = false;\n\t\n\t        try {\n\t            validateConnection();\n\t        } catch (err) {\n\t            deferred = Q.defer();\n\t            retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        promise = client.join(params);\n\t        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Leave this group. If this method is called multiple times synchronously, it will batch requests and\n\t     * only make one API call to Respoke.\n\t     *\n\t     *     group.leave({\n\t     *         onSuccess: function () {\n\t     *             // good riddance\n\t     *         },\n\t     *         onError: function (err) {\n\t     *             // Couldn't leave the group, possibly a permissions error\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.leave\n\t     * @param {object} params\n\t     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @return {Promise|undefined}\n\t     * @fires respoke.Client#leave\n\t     */\n\t    that.leave = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t\n\t        try {\n\t            validateConnection();\n\t            validateMembership();\n\t        } catch (err) {\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        signalingChannel.leaveGroup({\n\t            groupList: [that.id]\n\t        }).done(function successHandler() {\n\t            that.connections = [];\n\t            deferred.resolve();\n\t            cacheIsValid = false;\n\t\n\t            /**\n\t             * This event is fired when the client leaves a group.\n\t             * @event respoke.Client#leave\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Group} group\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             * @private\n\t             */\n\t            client.fire('leave', {\n\t                group: that\n\t            });\n\t        }, function errorHandler(err) {\n\t            deferred.reject();\n\t        });\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Remove a Connection from a Group. This does not change the status of the remote Endpoint, it only changes the\n\t     * internal representation of the Group membership. This method should only be used internally.\n\t     * @private\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.removeMember\n\t     * @param {object} params\n\t     * @param {string} [params.connectionId] - Endpoint's connection id\n\t     * @fires respoke.Group#leave\n\t     */\n\t    that.removeMember = function (params) {\n\t        params = params || {};\n\t\n\t        try {\n\t            validateConnection();\n\t            validateMembership();\n\t        } catch (err) {\n\t            return;\n\t        }\n\t\n\t        if (!params.connectionId) {\n\t            throw new Error(\"Can't remove a member to the group without it's Connection id.\");\n\t        }\n\t\n\t        cacheIsValid = false;\n\t\n\t        that.connections.every(function eachConnection(conn, index) {\n\t            if (conn.id === params.connectionId) {\n\t                that.connections.splice(index, 1);\n\t\n\t                /**\n\t                 * This event is fired when a member leaves a group the client is a member of.\n\t                 * @event respoke.Group#leave\n\t                 * @type {respoke.Event}\n\t                 * @property {respoke.Connection} connection - The connection that left the group.\n\t                 * @property {string} name - The event name.\n\t                 * @property {respoke.Group} target\n\t                 */\n\t                that.fire('leave', {\n\t                    connection: conn\n\t                });\n\t                return false;\n\t            }\n\t            return true;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Return true if the logged-in user is a member of this group and false if not.\n\t     *\n\t     *     if (group.isJoined()) {\n\t     *         // I'm a member!\n\t     *     } else {\n\t     *         // Maybe join here\n\t     *     }\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.isJoined\n\t     * @returns {boolean}\n\t     */\n\t    that.isJoined = function () {\n\t        // connections array contains some connections and ours is among them.\n\t        return (that.connections.length > 0 && !that.connections.every(function (conn) {\n\t            return conn.id !== client.connectionId;\n\t        }));\n\t    };\n\t\n\t    /**\n\t     * Add a Connection to a group. This does not change the status of the remote Endpoint, it only changes the\n\t     * internal representation of the Group membership. This method should only be used internally.\n\t     * @memberof! respoke.Group\n\t     * @private\n\t     * @method respoke.Group.addMember\n\t     * @param {object} params\n\t     * @param {respoke.Connection} params.connection\n\t     * @fires respoke.Group#join\n\t     */\n\t    that.addMember = function (params) {\n\t        params = params || {};\n\t        var absent;\n\t\n\t        validateConnection();\n\t\n\t        if (!params.connection) {\n\t            throw new Error(\"Can't add a member to the group without it's Connection object.\");\n\t        }\n\t\n\t        cacheIsValid = false;\n\t\n\t        absent = that.connections.every(function eachConnection(conn) {\n\t            return (conn.id !== params.connection.id);\n\t        });\n\t\n\t        if (absent) {\n\t            that.connections.push(params.connection);\n\t            if (params.skipEvent) {\n\t                return;\n\t            }\n\t\n\t            /**\n\t             * This event is fired when a member joins a Group that the currently logged-in endpoint is a member\n\t             * of.\n\t             * @event respoke.Group#join\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Connection} connection - The connection that joined the group.\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Group} target\n\t             */\n\t            that.fire('join', {\n\t                connection: params.connection\n\t            });\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Validate that the client is connected to the Respoke infrastructure.\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.validateConnection\n\t     * @private\n\t     */\n\t    function validateConnection() {\n\t        if (!signalingChannel || !signalingChannel.isConnected()) {\n\t            throw new Error(\"Can't complete request when not connected. Please reconnect!\");\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Validate that the client is a member of this group.\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.validateMembership\n\t     * @private\n\t     */\n\t    function validateMembership() {\n\t        if (!that.isJoined()) {\n\t            throw new Error(\"Not a member of this group anymore.\");\n\t        }\n\t    }\n\t\n\t    /**\n\t     *\n\t     * Send a message to all of the endpoints in the group.\n\t     *\n\t     *      var group = client.getGroup({ id: 'js-enthusiasts'});\n\t     *\n\t     *      group.sendMessage({\n\t     *          message: \"Cat on keyboard\",\n\t     *          onSuccess: function (evt) {\n\t     *              console.log('Message was sent');\n\t     *          }\n\t     *      });\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.sendMessage\n\t     * @param {object} params\n\t     * @param {string} params.message - The message.\n\t     * @param {boolean} [params.push=false] - Whether or not the message should be considered for push notifications to\n\t     * mobile devices.\n\t     * @param {function} params.onSuccess - Success handler indicating that the message was delivered.\n\t     * @param {function} params.onError - Error handler indicating that the message was not delivered.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        params = params || {};\n\t        params.id = that.id;\n\t        var promise;\n\t\n\t        try {\n\t            validateConnection();\n\t            validateMembership();\n\t        } catch (err) {\n\t            promise = Q.reject(err);\n\t        }\n\t\n\t        return respoke.handlePromise(promise ? promise : signalingChannel.publish(params),\n\t                params.onSuccess, params.onError);\n\t    };\n\t\n\t    /**\n\t     * Get group members\n\t     *\n\t     * Get an array containing all connections subscribed to the group. Accepts onSuccess or onError parameters,\n\t     * or it returns a promise that you can observe. An endpoint may have more than one connection subscribed to\n\t\t * a group, so if you're interested in unique endpoints, you may want to filter the connections by endpointId.\n\t     *\n\t     *     group.getMembers({\n\t     *         onSuccess: function (connections) {\n\t     *             connections.forEach(function (connection) {\n\t     *                 console.log(connection.endpoint.id);\n\t     *             });\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.getMembers\n\t     * @param {object} params\n\t     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Success handler for this invocation of this method only.\n\t     * @returns {Promise<Array>} A promise to an array of Connections.\n\t     */\n\t    that.getMembers = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t\n\t        try {\n\t            validateConnection();\n\t            validateMembership();\n\t        } catch (err) {\n\t            deferred.reject(err);\n\t            return retVal;\n\t        }\n\t\n\t        if (that.connections.length > 0 && cacheIsValid) {\n\t            deferred.resolve(that.connections);\n\t            return retVal;\n\t        }\n\t\n\t        signalingChannel.getGroupMembers({\n\t            id: that.id\n\t        }).done(function successHandler(list) {\n\t            var endpointList = [];\n\t            list.forEach(function eachMember(params) {\n\t                var connection = client.getConnection({\n\t                    endpointId: params.endpointId,\n\t                    connectionId: params.connectionId,\n\t                    skipCreate: true\n\t                });\n\t\n\t                if (!connection) {\n\t                    // Create the connection\n\t                    connection = client.getConnection({\n\t                        endpointId: params.endpointId,\n\t                        connectionId: params.connectionId\n\t                    });\n\t                }\n\t\n\t                if (endpointList.indexOf(params.endpointId) === -1) {\n\t                    endpointList.push(params.endpointId);\n\t                }\n\t                that.addMember({\n\t                    connection: connection,\n\t                    skipEvent: true\n\t                });\n\t            });\n\t\n\t            cacheIsValid = true;\n\t\n\t            deferred.resolve(that.connections);\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Experimental. Create a new conference call. The ID will be the group name. Only members of this group will\n\t     * be permitted to participate in the conference call.\n\t     *\n\t     *     group.joinConference({\n\t     *         onConnect: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Group\n\t     * @method respoke.Group.joinConference\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string|boolean} params.audio - Whether participant should send and receive audio. Boolean `true`\n\t     * indicates send and receive. Boolean `false` indicates neither send nor receive. Strings `send` and `receive`\n\t     * indicate send only and receive only respectively.\n\t     * @param {string|boolean} params.video - Whether participant should send and receive audio. Boolean `true`\n\t     * indicates send and receive. Boolean `false` indicates neither send nor receive. Strings `send` and `receive`\n\t     * indicate send only and receive only respectively.\n\t     * @param {boolean} params.mixAudio - Whether Respoke should mix all the audio streams together to save bandwidth\n\t     * for this one participant.\n\t     * @arg {respoke.Conference.onJoin} [params.onJoin] - Callback for when a participant joins the conference.\n\t     * @arg {respoke.Conference.onLeave} [params.onLeave] - Callback for when a participant leaves the conference.\n\t     * @arg {respoke.Conference.onMessage} [params.onMessage] - Callback for when a message is sent to the conference.\n\t     * @param {respoke.Conference.onMute} [params.onMute] - Callback for when local or remote media is muted or unmuted.\n\t     * @arg {respoke.Conference.onTopic} [params.onTopic] - Callback for the conference topic changes.\n\t     * @arg {respoke.Conference.onPresenter} [params.onPresenter] - Callback for when the presenter changes.\n\t     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t     * media renegotiation.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n\t     * and the remote party has received the video.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n\t     * hung up.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n\t     * browser has granted access to media.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n\t     * information.\n\t     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t     * relay servers. If it cannot flow through relay servers, the call will fail.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @returns {respoke.Conference}\n\t     */\n\t    that.joinConference = function (params) {\n\t        var conference = null;\n\t        params = params || {};\n\t        params.id = that.id;\n\t\n\t        conference = client.joinConference(params);\n\t        return conference;\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.Group\n\t/**\n\t * Receive notification that an endpoint has joined this group. This callback is called everytime\n\t * respoke.Group#join is fired.\n\t * @callback respoke.Group.onJoin\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Connection} evt.connection\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Group} evt.target\n\t */\n\t/**\n\t * Receive notification that an endpoint has left this group. This callback is called everytime\n\t * respoke.Group#leave is fired.\n\t * @callback respoke.Group.onLeave\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Connection} evt.connection\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Group} evt.target\n\t */\n\t/**\n\t * Receive notification that a message has been received to a group. This callback is called every time\n\t * respoke.Group#message is fired.\n\t * @callback respoke.Group.onMessage\n\t * @param {respoke.Event} evt\n\t * @param {respoke.TextMessage} evt.message\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Group} evt.target\n\t */\n\t/**\n\t * Get a list of the Connections which are members of this Group.\n\t * @callback respoke.Group.connectionsHandler\n\t * @param {Array<respoke.Connection>} connections\n\t */\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar Q = __webpack_require__(8);\n\tvar io = __webpack_require__(15);\n\tvar respoke = __webpack_require__(1);\n\tvar log = respoke.log;\n\t\n\t/**\n\t * Returns a timestamp, measured in milliseconds.\n\t *\n\t * This method will use high resolution time, if available. Otherwise it falls back to just\n\t * using the wall clock.\n\t *\n\t * @return {number} Number of milliseconds that have passed since some point in the past.\n\t * @private\n\t */\n\tvar now;\n\tif (window.performance && window.performance.now) {\n\t    now = window.performance.now.bind(window.performance);\n\t} else if (Date.now) {\n\t    now = Date.now.bind(Date);\n\t} else {\n\t    now = function () {\n\t        return new Date().getTime();\n\t    };\n\t}\n\t\n\t/**\n\t * Container for holding requests that are currently waiting on responses.\n\t * @returns {PendingRequests}\n\t * @private\n\t * @constructor\n\t */\n\tvar PendingRequests = function () {\n\t    /**\n\t     * Pending requests.\n\t     * @private\n\t     * @type {Array}\n\t     */\n\t    var contents = [];\n\t    /**\n\t     * Counter to provide the next id.\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var counter = 0;\n\t    var that = {};\n\t\n\t    /**\n\t     * Add a new pending request.\n\t     *\n\t     * @memberof PendingRequests\n\t     * @param obj\n\t     * @returns {*} The key to use for the `remove` method.\n\t     */\n\t    that.add = function (obj) {\n\t        contents[counter] = obj;\n\t        counter++;\n\t        return counter;\n\t    };\n\t\n\t    /**\n\t     * Remove a pending request.\n\t     *\n\t     * @param {*} key Key returned from `add` method.\n\t     */\n\t    that.remove = function (key) {\n\t        delete contents[key];\n\t    };\n\t\n\t    /**\n\t     * Disposes of any currently pending requests, synchronously invoking the provided function on\n\t     * each.\n\t     *\n\t     * @param {function} [fn] Callback for pending requests.\n\t     */\n\t    that.reset = function (fn) {\n\t        if (fn) {\n\t            contents.forEach(fn);\n\t        }\n\t        contents = [];\n\t    };\n\t\n\t    return that;\n\t};\n\t\n\t/**\n\t * The purpose of this class is to make a method call for each API call\n\t * to the backend REST interface.  This class takes care of App authentication, websocket connection,\n\t * Endpoint authentication, and all App interactions thereafter.  Almost all methods return a Promise.\n\t * @class respoke.SignalingChannel\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.instanceId - client id\n\t * @private\n\t * @returns {respoke.SignalingChannel}\n\t */\n\tmodule.exports = function (params) {\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name className\n\t     * @type {string}\n\t     * @private\n\t     */\n\t    that.className = 'respoke.SignalingChannel';\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name client\n\t     * @private\n\t     * @type {respoke.Client}\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name socket\n\t     * @private\n\t     * @type {Socket.io.Socket}\n\t     */\n\t    var socket = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name clientSettings\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var clientSettings = params.clientSettings;\n\t    delete that.clientSettings;\n\t    clientSettings.baseURL = clientSettings.baseURL || 'https://api.respoke.io';\n\t    /**\n\t     * A map to avoid duplicate endpoint presence registrations.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name presenceRegistered\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var presenceRegistered = {};\n\t    /**\n\t     * A reference to the private function Client.actuallyConnect that gets set in SignalingChannel.open() so we\n\t     * don't have to make it public.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name actuallyConnect\n\t     * @private\n\t     * @type {function}\n\t     */\n\t    var actuallyConnect = null;\n\t    /**\n\t     * Set of promises for any pending requests on the WebSocket.\n\t     * @private\n\t     * @type {PendingRequests}\n\t     */\n\t    var pendingRequests = PendingRequests();\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name reconnectTimeout\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var reconnectTimeout = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name maxReconnectTimeout\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var maxReconnectTimeout = 5 * 60 * 1000;\n\t    /**\n\t     * Rejects a message if the body size is greater than this. It is enforced servcer side, so changing this\n\t     * won't make the bodySizeLimit any bigger, this just gives you a senseable error if it's too big.\n\t     * @memberof! respoke.signalingChannel\n\t     * @name bodySizeLimit\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var bodySizeLimit = 20000;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name appId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var appId = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name endpointId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var endpointId = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name token\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var token = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name appToken\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var appToken = null;\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name xhr\n\t     * @private\n\t     * @type {XMLHttpRequest}\n\t     */\n\t    var xhr = new XMLHttpRequest();\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name routingMethods\n\t     * @private\n\t     * @type {object}\n\t     * @desc The methods contained in this object are statically defined methods that are called by constructing\n\t     * their names dynamically. 'do' + $className + $signalType == 'doCallOffer', et. al.\n\t     */\n\t    var routingMethods = {};\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name handlerQueue\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var handlerQueue = {\n\t        'message': [],\n\t        'signal': [],\n\t        'presence': []\n\t    };\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @name errors\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var errors = {\n\t        400: \"Can't perform this action: missing or invalid parameters.\",\n\t        401: \"Can't perform this action: not authenticated.\",\n\t        403: \"Can't perform this action: not authorized.\",\n\t        404: \"Item not found.\",\n\t        409: \"Can't perform this action: item in the wrong state.\",\n\t        429: \"API rate limit was exceeded.\",\n\t        500: \"Can't perform this action: server problem.\"\n\t    };\n\t\n\t    /**\n\t     * Indicate whether the signaling channel has a valid connection to Respoke.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.isConnected\n\t     * @return {boolean}\n\t     */\n\t    that.isConnected = function () {\n\t        return !!(socket && socket.socket.connected);\n\t    };\n\t\n\t    /**\n\t     * Indicate whether the signaling channel is currently waiting on a websocket to connect.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.isConnecting\n\t     * @private\n\t     * @return {boolean}\n\t     */\n\t    function isConnecting() {\n\t        return !!(socket && socket.socket.connecting);\n\t    }\n\t\n\t    /**\n\t     * Get the call debug preference.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.isSendingReport\n\t     * @private\n\t     * @return {boolean}\n\t     */\n\t    that.isSendingReport = function (params) {\n\t        return clientSettings.enableCallDebugReport;\n\t    };\n\t\n\t    /**\n\t     * Open a connection to the REST API and validate the app, creating a session token.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.open\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} [params.token] - The Endpoint's auth token\n\t     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @return {Promise}\n\t     */\n\t    that.open = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug('SignalingChannel.open', params, clientSettings);\n\t        token = params.token || token;\n\t        actuallyConnect = typeof params.actuallyConnect === 'function' ? params.actuallyConnect : actuallyConnect;\n\t\n\t        Q.fcall(function tokenPromise() {\n\t            if (clientSettings.developmentMode === true && clientSettings.appId && params.endpointId) {\n\t                return that.getToken({\n\t                    appId: clientSettings.appId,\n\t                    endpointId: params.endpointId\n\t                });\n\t            }\n\t            return null;\n\t        }).then(function successHandler(newToken) {\n\t            token = newToken || token;\n\t            return doOpen({token: token});\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t            log.debug('client', client);\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Get a developer mode token for an endpoint. App must be in developer mode.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getToken\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n\t     * endpoint. This is only used when `developmentMode` is set to `true`.\n\t     * @return {Promise<String>}\n\t     */\n\t    that.getToken = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug('SignalingChannel.getToken', params);\n\t\n\t        var callParams = {\n\t            path: '/v1/tokens',\n\t            httpMethod: 'POST',\n\t            parameters: {\n\t                appId: clientSettings.appId,\n\t                endpointId: params.endpointId,\n\t                ttl: 60 * 60 * 6\n\t            }\n\t        };\n\t\n\t        call(callParams).done(function (response) {\n\t            if (response.code === 200 && response.result && response.result.tokenId) {\n\t                token = response.result.tokenId;\n\t                deferred.resolve(response.result.tokenId);\n\t                return;\n\t            }\n\t            deferred.reject(buildResponseError(response, \"Couldn't get a developer mode token: \" + response.error));\n\t        }, function (err) {\n\t            deferred.reject(new Error(\"Couldn't get a developer mode token: \" + err.message));\n\t        });\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Open a connection to the REST API and validate the app, creating a session token.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.doOpen\n\t     * @param {object} params\n\t     * @param {string} params.token - The Endpoint's auth token\n\t     * @return {Promise}\n\t     * @private\n\t     */\n\t    function doOpen(params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug('SignalingChannel.doOpen', params);\n\t\n\t        if (!params.token) {\n\t            deferred.reject(new Error(\"Can't open connection to Respoke without a token.\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        call({\n\t            path: '/v1/session-tokens',\n\t            httpMethod: 'POST',\n\t            parameters: {\n\t                tokenId: params.token\n\t            }\n\t        }).done(function (response) {\n\t            if (response.code === 200) {\n\t                appToken = response.result.token;\n\t                deferred.resolve();\n\t                log.debug(\"Signaling connection open to\", clientSettings.baseURL);\n\t            } else {\n\t                deferred.reject(buildResponseError(response, \"Couldn't authenticate app: \" + response.error));\n\t            }\n\t        }, function (err) {\n\t            log.error(\"Network call failed:\", err.message);\n\t            deferred.reject(new Error(\"Couldn't authenticate app: \" + err.message));\n\t        });\n\t\n\t        return deferred.promise;\n\t    }\n\t\n\t    /**\n\t     * Close a connection to the REST API. Invalidate the session token.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.close\n\t     * @private\n\t     * @return {Promise}\n\t     */\n\t    that.close = function () {\n\t        var deferred = Q.defer();\n\t\n\t        wsCall({\n\t            path: '/v1/connections/%s/',\n\t            httpMethod: 'DELETE',\n\t            objectId: client.endpointId\n\t        }).fin(function finallyHandler() {\n\t            return call({\n\t                path: '/v1/session-tokens',\n\t                httpMethod: 'DELETE'\n\t            });\n\t        }).fin(function finallyHandler() {\n\t            if (socket) {\n\t                socket.removeAllListeners();\n\t                socket.disconnect();\n\t            }\n\t            deferred.resolve();\n\t        }).done();\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Generate and send a presence message representing the client's current status. This triggers\n\t     * the server to send the client's endpoint's presence.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendPresence\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string|number|object|Array} [params.presence=available]\n\t     * @param {string} [params.status] - Non-enumeration human-readable status.\n\t     * @param {string} [params.show] - I can't remember what this is.\n\t     * @returns {Promise}\n\t     */\n\t    that.sendPresence = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        log.debug(\"Signaling sendPresence\");\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            path: '/v1/presence',\n\t            httpMethod: 'POST',\n\t            parameters: {\n\t                'presence': {\n\t                    show: params.show,\n\t                    'status': params.status,\n\t                    type: params.presence || \"available\"\n\t                }\n\t            }\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * If the logged-in endpoint has permission through its Respoke role, forcibly remove another participant\n\t     * from the conference, ending its conference call.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.removeConferenceParticipant\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} [endpointId] - The endpoint id of the endpoint to be removed\n\t     * @param {string} [connectionId] - The connection id of the connection to be removed\n\t     * @returns {Promise}\n\t     */\n\t    that.removeConferenceParticipant = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var endpointId = params.endpointId;\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (!endpointId && params.connectionId) {\n\t            try {\n\t                endpointId = client.getConnection({\n\t                    connectionId: params.connectionId\n\t                }).getEndpoint().id;\n\t            } catch (err) {}\n\t\n\t            if (!endpointId) {\n\t                deferred.reject(new Error(\"conference.removeParticipant can't figure out what endpoint to remove!\"));\n\t                return deferred.promise;\n\t            }\n\t        }\n\t\n\t        wsCall({\n\t            httpMethod: 'DELETE',\n\t            path: '/v1/conferences/' + params.conferenceId + '/participants/' + endpointId,\n\t            parameters: {\n\t                connectionId: params.connectionId // Optional; It's OK if it's undefined here.\n\t            }\n\t        }).then(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * If the logged-in endpoint has permission through its Respoke role, close down the conference, removing all\n\t     * participants.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.destroyConference\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     * @private\n\t     * @returns {Promise}\n\t     */\n\t    that.destroyConference = function (params) {\n\t        var deferred = Q.defer();\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            httpMethod: 'DELETE',\n\t            path: '/v1/conferences/%s/',\n\t            objectId: params.conferenceId\n\t        }).then(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Retrieve the list of participants in the specified conference.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getConferenceParticipants\n\t     * @private\n\t     * @returns {Promise<respoke.Connection>}\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     */\n\t    that.getConferenceParticipants = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            httpMethod: 'GET',\n\t            path: '/v1/conferences/%s/participants/',\n\t            objectId: params.id\n\t        }).then(function successHandler(participants) {\n\t            deferred.resolve(participants.map(function (par) {\n\t                return client.getConnection({\n\t                    connectionId: par.connectionId,\n\t                    endpointId: par.endpointId\n\t                });\n\t            }));\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Get or create a group in the infrastructure.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getGroup\n\t     * @private\n\t     * @returns {Promise<respoke.Group>}\n\t     * @param {object} params\n\t     * @param {string} params.name\n\t     */\n\t    that.getGroup = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            httpMethod: 'POST',\n\t            path: '/v1/channels/',\n\t            parameters: {\n\t                name: params.name\n\t            }\n\t        }).then(function successHandler(group) {\n\t            deferred.resolve(group);\n\t        }, function errorHandler(err) {\n\t            // Group was already created, just return back the same params we were given.\n\t            deferred.resolve({id: params.name});\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Leave a group. In order to aggregate subsequent repeated requests, this function, when called synchronously,\n\t     * will continue to accumulate group ids until the next tick of the event loop, when the request will be\n\t     * issued. The same instance of Promise is returned each time.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @private\n\t     * @method respoke.SignalingChannel.leaveGroup\n\t     * @returns {Promise}\n\t     * @param {object} params\n\t     * @param {array} params.groupList\n\t     */\n\t    that.leaveGroup = (function () {\n\t        var groups = {};\n\t        var deferred = Q.defer();\n\t\n\t        return function (params) {\n\t            params = params || {};\n\t            params.groupList = params.groupList || [];\n\t\n\t            var toRun = (Object.keys(groups).length === 0);\n\t\n\t            if (!that.isConnected()) {\n\t                deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t                return deferred.promise;\n\t            }\n\t\n\t            params.groupList.forEach(function (id) {\n\t                if (typeof id === 'string') {\n\t                    groups[id] = true;\n\t                }\n\t            });\n\t\n\t            if (!toRun) {\n\t                return deferred.promise;\n\t            }\n\t\n\t            setTimeout(function () {\n\t                // restart accumulation\n\t                var groupList = Object.keys(groups);\n\t                groups = {};\n\t                var saveDeferred = deferred;\n\t                deferred = Q.defer();\n\t\n\t                if (groupList.length === 0) {\n\t                    saveDeferred.resolve();\n\t                    return;\n\t                }\n\t\n\t                wsCall({\n\t                    path: '/v1/groups/',\n\t                    parameters: {\n\t                        groups: groupList\n\t                    },\n\t                    httpMethod: 'DELETE'\n\t                }).done(function successHandler() {\n\t                    saveDeferred.resolve();\n\t                }, function errorHandler(err) {\n\t                    saveDeferred.reject(err);\n\t                });\n\t            });\n\t            return deferred.promise;\n\t        };\n\t    })();\n\t\n\t    /**\n\t     * Join a group. In order to aggregate subsequent repeated requests, this function, when called synchronously,\n\t     * will continue to accumulate group ids until the next tick of the event loop, when the request will be\n\t     * issued. The same instance of Promise is returned each time.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.joinGroup\n\t     * @private\n\t     * @returns {Promise}\n\t     * @param {object} params\n\t     * @param {array} params.groupList\n\t     */\n\t    that.joinGroup = (function () {\n\t        var groups = {};\n\t        var deferred = Q.defer();//i think this needs to go in actualJoinGroup\n\t\n\t        return function actualJoinGroup(params) {\n\t            params = params || {};\n\t            params.groupList = params.groupList || [];\n\t\n\t            log.trace('been asked to join groups', params.groupList);\n\t\n\t            var needsToRun = (Object.keys(groups).length === 0);\n\t\n\t            if (!that.isConnected()) {\n\t                deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t                return deferred.promise;\n\t            }\n\t\n\t            params.groupList.forEach(function (id) {\n\t                if (typeof id === 'string') {\n\t                    log.trace('put group', id, 'in the join queue');\n\t                    groups[id] = true;\n\t                }\n\t            });\n\t\n\t            if (!needsToRun) {\n\t                return deferred.promise;\n\t            }\n\t\n\t            setTimeout(function requestJoinsForGroupQueue() {\n\t                // restart accumulation\n\t                var groupList = Object.keys(groups);\n\t                log.trace('list of groups to be requested', groupList);\n\t                //reset the groups object\n\t                groups = {};\n\t                var saveDeferred = deferred;\n\t                deferred = Q.defer();\n\t\n\t                if (groupList.length === 0) {\n\t                    log.trace('list of groups was empty so not sending queue');\n\t                    saveDeferred.resolve();\n\t                    return;\n\t                }\n\t\n\t                wsCall({\n\t                    path: '/v1/groups/',\n\t                    parameters: {\n\t                        groups: groupList\n\t                    },\n\t                    httpMethod: 'POST'\n\t                }).done(function successHandler() {\n\t                    saveDeferred.resolve();\n\t                }, function errorHandler(err) {\n\t                    saveDeferred.reject(err);\n\t                });\n\t            });\n\t            return deferred.promise;\n\t        };\n\t    })();\n\t\n\t    /**\n\t     * Publish a message to a group.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @private\n\t     * @method respoke.SignalingChannel.publish\n\t     * @returns {Promise}\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     * @param {string} params.message\n\t     * @param {boolean} [params.push=false]\n\t     */\n\t    that.publish = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var message = respoke.TextMessage({\n\t            endpointId: params.id,\n\t            message: params.message,\n\t            push: !!params.push\n\t        });\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            path: '/v1/channels/%s/publish/',\n\t            objectId: params.id,\n\t            httpMethod: 'POST',\n\t            parameters: message\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Register as an observer of presence for the specified endpoint ids. In order to aggregate subsequent repeated\n\t     * requests, this function, when called synchronously, will continue to accumulate endpoint ids until the next\n\t     * tick of the event loop, when the request will be issued. The same instance of Promise is returned each time.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.registerPresence\n\t     * @private\n\t     * @param {object} params\n\t     * @param {Array<string>} params.endpointList\n\t     * @returns {Promise}\n\t     */\n\t    that.registerPresence = (function () {\n\t        var endpoints = {};\n\t        var deferred = Q.defer();\n\t\n\t        return function (params) {\n\t            params = params || {};\n\t            params.endpointList = params.endpointList || [];\n\t            var toRun = (Object.keys(endpoints).length === 0);\n\t\n\t            if (!that.isConnected()) {\n\t                return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            }\n\t\n\t            params.endpointList.forEach(function (ep) {\n\t                if (typeof ep === 'string' && presenceRegistered[ep] !== true) {\n\t                    endpoints[ep] = true;\n\t                }\n\t            });\n\t\n\t            if (!toRun) {\n\t                return deferred.promise;\n\t            }\n\t\n\t            setTimeout(function () {\n\t                // restart accumulation\n\t                var endpointList = Object.keys(endpoints);\n\t                endpoints = {};\n\t                var saveDeferred = deferred;\n\t                deferred = Q.defer();\n\t\n\t                if (endpointList.length === 0) {\n\t                    saveDeferred.resolve();\n\t                    return;\n\t                }\n\t\n\t                wsCall({\n\t                    httpMethod: 'POST',\n\t                    path: '/v1/presenceobservers',\n\t                    parameters: {\n\t                        endpointList: endpointList\n\t                    }\n\t                }).done(function successHandler() {\n\t                    params.endpointList.forEach(function eachId(id) {\n\t                        presenceRegistered[id] = true;\n\t                    });\n\t                    saveDeferred.resolve();\n\t                }, function (err) {\n\t                    saveDeferred.reject(err);\n\t                });\n\t                // We could even add a tiny delay like 10ms if we want to get more conservative and\n\t                // catch asychronous calls to client.getEndpoint() and other methods which call\n\t                // this method.\n\t            });\n\t\n\t            return deferred.promise;\n\t        };\n\t    })();\n\t\n\t    /**\n\t     * Join a group.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getGroupMembers\n\t     * @private\n\t     * @returns {Promise<Array>}\n\t     * @param {object} params\n\t     * @param {string} params.id\n\t     */\n\t    that.getGroupMembers = function (params) {\n\t        var deferred = Q.defer();\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (!params.id) {\n\t            deferred.reject(new Error(\"Can't get group's endpoints without group ID.\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        return wsCall({\n\t            path: '/v1/channels/%s/subscribers/',\n\t            objectId: params.id,\n\t            httpMethod: 'GET'\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Send a chat message.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendMessage\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.SignalingMessage} params.message - The string text message to send.\n\t     * @param {respoke.Endpoint} params.recipient\n\t     * @param {string} [params.connectionId]\n\t     * @param {boolean} [params.push=false]\n\t     * @returns {Promise}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var message = respoke.TextMessage({\n\t            endpointId: params.recipient.id,\n\t            connectionId: params.connectionId,\n\t            message: params.message,\n\t            push: !!params.push\n\t        });\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            path: '/v1/messages',\n\t            httpMethod: 'POST',\n\t            parameters: message\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Send an ACK signal to acknowlege reception of a signal.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendACK\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.SignalingMessage} params.signal\n\t     * @return {Promise}\n\t     */\n\t    that.sendACK = function (params) {\n\t        var endpoint;\n\t        params = params || {};\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        if (!params.signal) {\n\t            return Q.reject(new Error(\"Can't send ACK, no signal was given.\"));\n\t        }\n\t\n\t        endpoint = client.getEndpoint({\n\t            id: params.signal.fromEndpoint,\n\t            skipPresence: true\n\t        });\n\t        if (!endpoint) {\n\t            return Q.reject(new Error(\"Can't send ACK, can't get endpoint.\"));\n\t        }\n\t\n\t        return that.sendSignal({\n\t            recipient: endpoint,\n\t            signalType: 'ack',\n\t            signalId: params.signal.signalId,\n\t            sessionId: params.signal.sessionId,\n\t            target: params.signal.target,\n\t            ackedSignalType: params.signal.signalType\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Send a signaling message.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendSignal\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Call} [params.call] - For getting the sessionId & connectionId. Not required for 'ack'.\n\t     * @return {Promise}\n\t     */\n\t    that.sendSignal = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var signal;\n\t        var to;\n\t        var toConnection;\n\t        var toType;\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (params.call) {\n\t            params.sessionId = params.call.id;\n\t            if (params.call.connectionId) { // the recipient's connectionId\n\t                params.connectionId = params.call.connectionId;\n\t            }\n\t        }\n\t\n\t        to = params.recipient.id;\n\t        toConnection = params.connectionId;\n\t        toType = params.toType || 'web';\n\t\n\t        try {\n\t            params.signalId = respoke.makeGUID();\n\t            // This will strip off non-signaling attributes.\n\t            signal = respoke.SignalingMessage(params);\n\t        } catch (e) {\n\t            deferred.reject(e);\n\t            return deferred.promise;\n\t        }\n\t\n\t        params = {\n\t            signal: JSON.stringify(signal),\n\t            to: to,\n\t            toConnection: toConnection,\n\t            toType: toType\n\t        };\n\t\n\t        wsCall({\n\t            path: '/v1/signaling',\n\t            httpMethod: 'POST',\n\t            parameters: {\n\t                signal: JSON.stringify(signal),\n\t                to: to,\n\t                toConnection: toConnection,\n\t                toType: toType\n\t            }\n\t        }).done(function successHandler() {\n\t            deferred.resolve();\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Send an ICE candidate.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendCandidate\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @param {string} [params.connectionId]\n\t     * @param {Array<RTCIceCandidate>} params.iceCandidates - An array of ICE candidate.\n\t     * @return {Promise}\n\t     */\n\t    that.sendCandidate = function (params) {\n\t        params = params || {};\n\t        params.signalType = 'iceCandidates';\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        return that.sendSignal(params);\n\t    };\n\t\n\t    /**\n\t     * Send an SDP.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendSDP\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @param {string} [params.connectionId]\n\t     * @param {RTCSessionDescription} params.sessionDescription - An SDP to JSONify and send.\n\t     * @return {Promise}\n\t     */\n\t    that.sendSDP = function (params) {\n\t        params = params || {};\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        if (['offer', 'answer'].indexOf(params.signalType) === -1) {\n\t            return Q.reject(\"Not an SDP type signal.\");\n\t        }\n\t\n\t        return that.sendSignal(params);\n\t    };\n\t\n\t    /**\n\t     * Send a call report to the cloud infrastructure.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendReport\n\t     * @private\n\t     * @param {object} params\n\t     * @todo TODO document the params.\n\t     * @return {Promise}\n\t     */\n\t    that.sendReport = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var message = {\n\t            debugData: params\n\t        };\n\t\n\t        if (!clientSettings.enableCallDebugReport) {\n\t            log.debug('not sending call debugs - disabled');\n\t            deferred.resolve();\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            path: '/v1/call-debugs',\n\t            httpMethod: 'POST',\n\t            parameters: message\n\t        }).done(function () {\n\t            deferred.resolve();\n\t        }, function (err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Send a message hanging up the WebRTC session.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendHangup\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @param {string} [params.connectionId]\n\t     * @param {string} params.reason - The reason the session is being hung up.\n\t     * @return {Promise}\n\t     */\n\t    that.sendHangup = function (params) {\n\t        params = params || {};\n\t        params.signalType = 'bye';\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        return that.sendSignal(params);\n\t    };\n\t\n\t    /**\n\t     * Send a message to all connection ids indicating we have negotiated a call with one connection.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendConnected\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @return {Promise}\n\t     */\n\t    that.sendConnected = function (params) {\n\t        params = params || {};\n\t        params.signalType = 'connected';\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        return that.sendSignal(params);\n\t    };\n\t\n\t    /**\n\t     * Send a message to the remote party indicating a desire to renegotiate media.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.sendModify\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.Endpoint} params.recipient - The recipient.\n\t     * @param {string} params.action - The state of the modify request, one of: 'initiate', 'accept', 'reject'\n\t     * @return {Promise}\n\t     */\n\t    that.sendModify = function (params) {\n\t        params = params || {};\n\t        params.signalType = 'modify';\n\t\n\t        if (['initiate', 'accept', 'reject'].indexOf(params.action) === -1) {\n\t            return Q.reject(\"No valid action in modify signal.\");\n\t        }\n\t\n\t        if (!that.isConnected()) {\n\t            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t        }\n\t\n\t        return that.sendSignal(params);\n\t    };\n\t\n\t    /**\n\t     * Uppercase the first letter of the word.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.firstUpper\n\t     * @private\n\t     */\n\t    function firstUpper(str) {\n\t        return str[0].toUpperCase() + str.slice(1);\n\t    }\n\t\n\t    /**\n\t     * Route different types of signaling messages via events.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routeSignal\n\t     * @private\n\t     * @param {respoke.SignalingMessage} message - A message to route\n\t     * @fires respoke.Call#offer\n\t     * @fires respoke.Call#connected\n\t     * @fires respoke.Call#answer\n\t     * @fires respoke.Call#iceCandidates\n\t     * @fires respoke.Call#hangup\n\t     * @fires respoke.DirectConnection#offer\n\t     * @fires respoke.DirectConnection#connected\n\t     * @fires respoke.DirectConnection#answer\n\t     * @fires respoke.DirectConnection#iceCandidates\n\t     * @fires respoke.DirectConnection#hangup\n\t     */\n\t    that.routeSignal = function (signal) {\n\t        var target = null;\n\t        var method = 'do';\n\t\n\t        if (signal.signalType !== 'iceCandidates') { // Too many of these!\n\t            log.debug(signal.signalType, signal);\n\t        }\n\t\n\t        if (signal.target === undefined) {\n\t            throw new Error(\"target undefined\");\n\t        }\n\t\n\t        // Only create if this signal is an offer.\n\t        Q.fcall(function makePromise() {\n\t            var endpoint;\n\t            /*!\n\t             * This will return calls regardless of whether they are associated\n\t             * with a direct connection or not, and it will create a call if no\n\t             * call is found and this signal is an offer. Direct connections get\n\t             * created in the next step.\n\t             */\n\t            target = client.getCall({\n\t                id: signal.sessionId,\n\t                endpointId: signal.fromEndpoint,\n\t                target: signal.target,\n\t                conferenceId: signal.conferenceId,\n\t                type: signal.fromType,\n\t                create: (signal.target !== 'directConnection' && signal.signalType === 'offer'),\n\t                callerId: signal.callerId\n\t            });\n\t            if (target) {\n\t                return target;\n\t            }\n\t\n\t            if (signal.target === 'directConnection') {\n\t                // return a promise\n\t                endpoint = client.getEndpoint({\n\t                    id: signal.fromEndpoint,\n\t                    skipPresence: true\n\t                });\n\t\n\t                if (endpoint.directConnection && endpoint.directConnection.call.id === signal.sessionId) {\n\t                    return endpoint.directConnection;\n\t                }\n\t\n\t                return endpoint.startDirectConnection({\n\t                    id: signal.sessionId,\n\t                    create: (signal.signalType === 'offer'),\n\t                    caller: (signal.signalType !== 'offer')\n\t                });\n\t            }\n\t        }).done(function successHandler(target) {\n\t            // target might be null, a Call, or a DirectConnection.\n\t            if (target) {\n\t                target = target.call || target;\n\t            }\n\t            if (!target || target.id !== signal.sessionId) {\n\t                // orphaned signal\n\t                log.warn(\"Couldn't associate signal with a call.\", signal);\n\t                return;\n\t            }\n\t\n\t            method += firstUpper(signal.signalType);\n\t            routingMethods[method]({\n\t                call: target,\n\t                signal: signal\n\t            });\n\t        }, null);\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doOffer\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-offer\n\t     */\n\t    routingMethods.doOffer = function (params) {\n\t        params.call.connectionId = params.signal.fromConnection;\n\t        /**\n\t         * Send the `offer` signal into the Call.\n\t         * @event respoke.Call#signal-offer\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-offer', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doConnected\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-connected\n\t     */\n\t    routingMethods.doConnected = function (params) {\n\t        /**\n\t         * Send the `connected` signal into the Call.\n\t         * @event respoke.Call#signal-connected\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-connected', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.dModify\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-modify\n\t     */\n\t    routingMethods.doModify = function (params) {\n\t        /**\n\t         * Send the `modify` signal into the Call.\n\t         * @event respoke.Call#signal-modify\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-modify', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doAnswer\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-answer\n\t     */\n\t    routingMethods.doAnswer = function (params) {\n\t        params.call.connectionId = params.signal.fromConnection;\n\t        /**\n\t         * Send the `answer` signal into the Call.\n\t         * @event respoke.Call#signal-answer\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-answer', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doIceCandidates\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-icecandidates\n\t     */\n\t    routingMethods.doIceCandidates = function (params) {\n\t        /**\n\t         * Send the `icecandidates` signal into the Call.\n\t         * @event respoke.Call#signal-icecandidates\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-icecandidates', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doBye\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     * @fires respoke.Call#signal-hangup\n\t     */\n\t    routingMethods.doBye = function (params) {\n\t        /**\n\t         *  We may receive hangup from one or more parties after connectionId is set if the call is rejected\n\t         *  by a connection that didn't win the call. In this case, we have to ignore the signal since\n\t         *  we are already on a call. TODO: this should really be inside PeerConnection.\n\t         */\n\t        if (params.call.connectionId && params.call.connectionId !== params.signal.fromConnection) {\n\t            return;\n\t        }\n\t        /**\n\t         * Send the `hangup` signal into the Call.\n\t         * @event respoke.Call#signal-hangup\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        params.call.fire('signal-hangup', {\n\t            signal: params.signal\n\t        });\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.routingMethods.doUnknown\n\t     * @private\n\t     * @params {object} params\n\t     * @params {object} params.signal\n\t     */\n\t    routingMethods.doUnknown = function (params) {\n\t        log.error(\"Don't know what to do with\", params.signal.target, \"msg of unknown type\", params.signal.signalType);\n\t    };\n\t\n\t    /**\n\t     * Add a handler to the connection for messages of different types.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.addHandler\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} params.type - The type of socket message, i. e., 'message', 'presence', 'join'\n\t     * @param {function} params.handler - A function to which to pass the message\n\t     * @todo TODO See if this is necessary anymore\n\t     */\n\t    that.addHandler = function (params) {\n\t        if (socket.socket && socket.socket.open) {\n\t            socket.on(params.type, params.handler);\n\t        } else {\n\t            handlerQueue[params.type].push(params.handler);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Socket handler for pub-sub messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onPubSub\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     * @fires respoke.Group#message\n\t     * @fires respoke.Client#message\n\t     */\n\t    var onPubSub = function onPubSub(message) {\n\t        var group;\n\t        var groupMessage;\n\t\n\t        if (message.header.from === client.endpointId) {\n\t            return;\n\t        }\n\t\n\t        groupMessage = respoke.TextMessage({\n\t            rawMessage: message\n\t        });\n\t\n\t        group = client.getGroup({id: message.header.channel});\n\t        if (group) {\n\t            /**\n\t             * Indicate that a message has been received to a group.\n\t             * @event respoke.Group#message\n\t             * @type {respoke.Event}\n\t             * @property {respoke.TextMessage} message\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Group} target\n\t             */\n\t            group.fire('message', {\n\t                message: groupMessage\n\t            });\n\t        }\n\t        /**\n\t         * Indicate that a message has been received.\n\t         * @event respoke.Client#message\n\t         * @type {respoke.Event}\n\t         * @property {respoke.TextMessage} message\n\t         * @property {respoke.Group} [group] - If the message is to a group we already know about,\n\t         * this will be set. If null, the developer can use client.join({id: evt.message.header.channel}) to join\n\t         * the group. From that point forward, Group#message will fire when a message is received as well. If\n\t         * group is undefined instead of null, the message is not a group message at all.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Client} target\n\t         */\n\t        client.fire('message', {\n\t            message: groupMessage,\n\t            group: group || null\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Socket handler for join messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onJoin\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     */\n\t    var onJoin = function onJoin(message) {\n\t        var group;\n\t        var presenceMessage;\n\t        var endpoint;\n\t        var connection;\n\t\n\t        if (message.connectionId === client.connectionId) {\n\t            connection = client.getConnection({connectionId: message.connectionId, endpointId: message.endpointId});\n\t            group = client.getGroup({id: message.header.channel});\n\t            if (!group) {\n\t                group = respoke.Group({\n\t                    id: message.header.channel,\n\t                    instanceId: instanceId,\n\t                    signalingChannel: that\n\t                });\n\t                client.addGroup(group);\n\t            }\n\t            if (!group.isJoined()) {\n\t                group.addMember({connection: connection});\n\t                client.fire('join', {\n\t                    group: group\n\t                });\n\t            }\n\t        } else {\n\t\n\t            endpoint = client.getEndpoint({\n\t                skipPresence: true,\n\t                id: message.endpointId,\n\t                instanceId: instanceId,\n\t                name: message.endpointId\n\t            });\n\t\n\t            // Handle presence not associated with a channel\n\t            if (!connection) {\n\t                endpoint.setPresence({\n\t                    connectionId: message.connectionId\n\t                });\n\t                connection = client.getConnection({\n\t                    connectionId: message.connectionId,\n\t                    endpointId: message.endpointId\n\t                });\n\t            }\n\t\n\t            group = client.getGroup({id: message.header.channel});\n\t\n\t            if (group && connection) {\n\t                group.addMember({connection: connection});\n\t            } else {\n\t                log.error(\"Can't add endpoint to group:\", message, group, endpoint, connection);\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Socket handler for leave messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onLeave\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     */\n\t    var onLeave = function onLeave(message) {\n\t        var group;\n\t        var presenceMessage;\n\t        var endpoint;\n\t        if (message.connectionId === client.connectionId) {\n\t            group = client.getGroup({id: message.header.channel});\n\t            client.fire('leave', {\n\t                group: group\n\t            });\n\t        } else {\n\t\n\t            endpoint = client.getEndpoint({\n\t                skipPresence: true,\n\t                id: message.endpointId\n\t            });\n\t\n\t            endpoint.connections.every(function eachConnection(conn, index) {\n\t                if (conn.id === message.connectionId) {\n\t                    endpoint.connections.splice(index, 1);\n\t                    return false;\n\t                }\n\t                return true;\n\t            });\n\t\n\t            group = client.getGroup({id: message.header.channel});\n\t            group.removeMember({connectionId: message.connectionId});\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Socket handler for presence messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onMessage\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     * @fires respoke.Endpoint#message\n\t     * @fires respoke.Client#message\n\t     */\n\t    var onMessage = function onMessage(message) {\n\t        var endpoint;\n\t        message = respoke.TextMessage({rawMessage: message});\n\t        if (message.endpointId) {\n\t            endpoint = client.getEndpoint({\n\t                id: message.endpointId,\n\t                skipCreate: true\n\t            });\n\t        }\n\t        if (endpoint) {\n\t            /**\n\t             * Indicate that a message has been received.\n\t             * @event respoke.Endpoint#message\n\t             * @type {respoke.Event}\n\t             * @property {respoke.TextMessage} message\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Endpoint} target\n\t             */\n\t            endpoint.fire('message', {\n\t                message: message\n\t            });\n\t        }\n\t        /**\n\t         * Indicate that a message has been received.\n\t         * @event respoke.Client#message\n\t         * @type {respoke.Event}\n\t         * @property {respoke.TextMessage} message\n\t         * @property {respoke.Endpoint} [endpoint] - If the message is from an endpoint we already know about,\n\t         * this will be set. If null, the developer can use client.getEndpoint({id: evt.message.endpointId}) to get\n\t         * the Endpoint. From that point forward, Endpoint#message will fire when a message is received as well.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Client} target\n\t         */\n\t        client.fire('message', {\n\t            endpoint: endpoint || null,\n\t            message: message\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Create a socket handler for the onConnect event with all the right things in scope.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.generateConnectHandler\n\t     * @param {respoke.Client.successHandler} [onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @private\n\t     */\n\t    var generateConnectHandler = function generateConnectHandler(onSuccess, onError) {\n\t        onSuccess = onSuccess || function () {};\n\t        onError = onError || function () {};\n\t        return function onConnect() {\n\t            Object.keys(handlerQueue).forEach(function addEachHandlerType(category) {\n\t                if (!handlerQueue[category]) {\n\t                    return;\n\t                }\n\t\n\t                handlerQueue[category].forEach(function addEachHandler(handler) {\n\t                    socket.on(category, handler);\n\t                });\n\t                handlerQueue[category] = [];\n\t            });\n\t\n\t            wsCall({\n\t                path: '/v1/connections',\n\t                httpMethod: 'POST'\n\t            }).done(function successHandler(res) {\n\t                log.debug('connections result', res);\n\t                client.endpointId = res.endpointId;\n\t                client.connectionId = res.id;\n\t                onSuccess();\n\t            }, onError);\n\t        };\n\t    };\n\t\n\t    /**\n\t     * Socket handler for presence messages.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.onPresence\n\t     * @param {object} message The Socket.io message.\n\t     * @private\n\t     */\n\t    function onPresence(message) {\n\t        var endpoint;\n\t        var groups;\n\t\n\t        if (message.header.from === client.endpointId) {\n\t            // Skip ourselves\n\t            return;\n\t        }\n\t        log.debug('socket.on presence', message);\n\t\n\t        endpoint = client.getEndpoint({\n\t            skipPresence: true,\n\t            id: message.header.from,\n\t            instanceId: instanceId,\n\t            name: message.header.from,\n\t            connection: message.header.fromConnection\n\t        });\n\t\n\t        endpoint.setPresence({\n\t            connectionId: message.header.fromConnection,\n\t            presence: message.type\n\t        });\n\t\n\t        if (endpoint.presence === 'unavailable') {\n\t            groups = client.getGroups();\n\t            if (groups) {\n\t                groups.forEach(function eachGroup(group) {\n\t                    group.removeMember({connectionId: message.header.fromConnection});\n\t                });\n\t            }\n\t        }\n\t    }\n\t\n\t    /*!\n\t     * On reconnect, start with a reconnect interval of 2000ms. Every time reconnect fails, the interval\n\t     * is doubled up to a maximum of 5 minutes. From then on, it will attempt to reconnect every 5 minutes forever.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.reconnect\n\t     * @private\n\t     */\n\t    function reconnect() {\n\t        appToken = undefined;\n\t        token = undefined;\n\t        reconnectTimeout = (reconnectTimeout === null) ? 2500 : 2 * reconnectTimeout;\n\t\n\t        if (reconnectTimeout > (maxReconnectTimeout)) {\n\t            reconnectTimeout = maxReconnectTimeout;\n\t        }\n\t\n\t        setTimeout(function doReconnect() {\n\t            actuallyConnect().then(function successHandler() {\n\t                reconnectTimeout = null;\n\t                log.debug('socket reconnected');\n\t                return Q.all(client.getGroups().map(function iterGroups(group) {\n\t                    client.join({\n\t                        id: group.id,\n\t                        onMessage: clientSettings.onMessage,\n\t                        onJoin: clientSettings.onJoin,\n\t                        onLeave: clientSettings.onLeave\n\t                    });\n\t                }));\n\t            }).done(function successHandler(user) {\n\t                /**\n\t                 * Indicate that a reconnect has succeeded.\n\t                 * @event respoke.Client#reconnect\n\t                 * @property {string} name - the event name.\n\t                 * @property {respoke.Client}\n\t                 */\n\t                client.fire('reconnect');\n\t            }, function (err) {\n\t                log.error(\"Couldn't rejoin previous groups.\", err.message, err.stack);\n\t                reconnect();\n\t            });\n\t        }, reconnectTimeout);\n\t    }\n\t\n\t    /**\n\t     * Authenticate to the cloud and call the handler on state change.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.authenticate\n\t     * @private\n\t     * @param {object} params\n\t     * @return {Promise}\n\t     */\n\t    that.authenticate = function (params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var pieces = [];\n\t        var protocol = null;\n\t        var host = null;\n\t        var port = null;\n\t\n\t        if (!appToken) {\n\t            deferred.reject(new Error(\"Can't open a websocket without an app token.\"));\n\t        }\n\t\n\t        pieces = clientSettings.baseURL.split(/:\\/\\//);\n\t        protocol = pieces[0];\n\t        pieces = pieces[1].split(/:/);\n\t        host = pieces[0];\n\t        port = pieces[1];\n\t\n\t        /*!\n\t         * Try to connect for 2 seconds before failing.\n\t         * @private\n\t         */\n\t        var connectParams = {\n\t            'connect timeout': 2000,\n\t            'force new connection': true, // Don't try to reuse old connection.\n\t            'sync disconnect on unload': true, // have Socket.io call disconnect() on the browser unload event.\n\t            reconnect: false,\n\t            host: host,\n\t            port: port || '443',\n\t            protocol: protocol,\n\t            secure: (protocol === 'https'),\n\t            query: '__sails_io_sdk_version=0.10.0&app-token=' + appToken\n\t        };\n\t\n\t        if (that.isConnected() || isConnecting()) {\n\t            return;\n\t        }\n\t        socket = io.connect(clientSettings.baseURL, connectParams);\n\t\n\t        socket.on('connect', generateConnectHandler(function onSuccess() {\n\t            deferred.resolve();\n\t        }, function onError(err) {\n\t            deferred.reject(err);\n\t        }));\n\t\n\t        socket.on('join', onJoin);\n\t        socket.on('leave', onLeave);\n\t        socket.on('pubsub', onPubSub);\n\t        socket.on('message', onMessage);\n\t        socket.on('presence', onPresence);\n\t\n\t        // connection timeout\n\t        socket.on('connect_failed', function connectFailedHandler(res) {\n\t            deferred.reject(new Error(\"WebSocket connection failed.\"));\n\t            log.error('Socket.io connect timeout.', res || \"\");\n\t            reconnect();\n\t        });\n\t\n\t        // handshake error, 403\n\t        socket.on('error', function errorHandler(res) {\n\t            log.debug('Socket.io request failed.', res || \"\");\n\t            reconnect();\n\t        });\n\t\n\t        that.addHandler({\n\t            type: 'signal',\n\t            handler: function signalHandler(message) {\n\t                var knownSignals = ['offer', 'answer', 'connected', 'modify', 'iceCandidates', 'bye'];\n\t                var signal = respoke.SignalingMessage({\n\t                    rawMessage: message\n\t                });\n\t\n\t                if (signal.signalType === 'ack') {\n\t                    return;\n\t                }\n\t\n\t                if (!signal.target || !signal.signalType || knownSignals.indexOf(signal.signalType) === -1) {\n\t                    log.error(\"Got malformed signal.\", signal);\n\t                    throw new Error(\"Can't route signal without target or type.\");\n\t                }\n\t\n\t                that.routeSignal(signal);\n\t            }\n\t        });\n\t\n\t        socket.on('disconnect', function onDisconnect() {\n\t            pendingRequests.reset(function (pendingRequest) {\n\t                log.debug('Failing pending requests');\n\t                pendingRequest.reject(new Error(\"WebSocket disconnected\"));\n\t            });\n\t\n\t            /**\n\t             * Indicate that this client has been disconnected from the Respoke service.\n\t             * @event respoke.Client#disconnect\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            client.fire('disconnect');\n\t\n\t            if (clientSettings.reconnect !== true) {\n\t                socket = null;\n\t                return;\n\t            }\n\t            reconnect();\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Get ephemeral TURN credentials.  This method is called whenever a call is either\n\t     * sent or received, prior to creating a PeerConnection\n\t     *\n\t     * @memberof! respoke.SignalingChannel\n\t     * @private\n\t     * @method respoke.SignalingChannel.getTurnCredentials\n\t     * @return {Promise<Array>}\n\t     */\n\t    that.getTurnCredentials = function () {\n\t        var deferred = Q.defer();\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        wsCall({\n\t            httpMethod: 'GET',\n\t            path: '/v1/turn'\n\t        }).done(function successHandler(creds) {\n\t            var result = [];\n\t\n\t            if (!creds || !creds.uris) {\n\t                deferred.reject(new Error(\"Turn credentials empty.\"));\n\t                return;\n\t            }\n\t\n\t            creds.uris.forEach(function saveTurnUri(uri) {\n\t                var cred = null;\n\t\n\t                if (!uri) {\n\t                    return;\n\t                }\n\t\n\t                cred = createIceServer(uri, creds.username, creds.password);\n\t                result.push(cred);\n\t            });\n\t\n\t            if (result.length === 0) {\n\t                deferred.reject(new Error(\"Got no TURN credentials.\"));\n\t            }\n\t\n\t            log.debug('TURN creds', result);\n\t            deferred.resolve(result);\n\t        }, function errorHandler(err) {\n\t            deferred.reject(err);\n\t        });\n\t\n\t        return deferred.promise;\n\t    };\n\t\n\t    /**\n\t     * Construct a websocket API call and return the formatted response and errors. The 'success'\n\t     * attribute indicates the success or failure of the API call. The 'response' attribute\n\t     * is an associative array constructed by json.decode. The 'error' attriute is a message.\n\t     * If the API call is successful but the server returns invalid JSON, error will be\n\t     * \"Invalid JSON.\" and response will be the unchanged content of the response body.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.wsCall\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} params.httpMethod\n\t     * @param {string} params.path\n\t     * @param {string} params.objectId\n\t     * @param {object} params.parameters - These are request body parameters that get converted to JSON before\n\t     * being sent over the websocket. Undefined parameters and functions are removed by JSON.stringify.\n\t     * @return {Promise<object>}\n\t     */\n\t    function wsCall(params) {\n\t        params = params || {};\n\t        var deferred = Q.defer();\n\t        var start = now();\n\t        // Too many of these!\n\t        var logRequest = params.path.indexOf('messages') === -1 && params.path.indexOf('signaling') === -1;\n\t        var request;\n\t        var bodyLength = 0;\n\t        if (params.parameters) {\n\t            bodyLength = encodeURI(JSON.stringify(params.parameters)).split(/%..|./).length - 1;\n\t        }\n\t\n\t        if (!that.isConnected()) {\n\t            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (!params) {\n\t            deferred.reject(new Error('No params.'));\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (!params.path) {\n\t            deferred.reject(new Error('No request path.'));\n\t            return deferred.promise;\n\t        }\n\t\n\t        if (bodyLength > bodySizeLimit) {\n\t            deferred.reject(new Error('Request body exceeds maximum size of ' + bodySizeLimit + ' bytes'));\n\t            return deferred.promise;\n\t        }\n\t\n\t        params.httpMethod = (params.httpMethod || 'get').toLowerCase();\n\t\n\t        if (params.objectId) {\n\t            params.path = params.path.replace(/\\%s/ig, params.objectId);\n\t        }\n\t\n\t        if (logRequest) {\n\t            log.debug('socket request', {\n\t                method: params.httpMethod,\n\t                path: params.path,\n\t                parameters: params.parameters\n\t            });\n\t        }\n\t\n\t        request = {\n\t            method: params.httpMethod,\n\t            path: params.path,\n\t            parameters: params.parameters,\n\t            tries: 0,\n\t            durationMillis: 0\n\t        };\n\t\n\t        request.id = pendingRequests.add(deferred);\n\t\n\t        function handleResponse(response) {\n\t            var thisHandler = this; // jshint ignore:line\n\t            /*!\n\t             * Response:\n\t             *  {\n\t             *      body: {},\n\t             *      headers: {},\n\t             *      statusCode: 200\n\t             *  }\n\t             */\n\t            try {\n\t                response.body = JSON.parse(response.body);\n\t            } catch (e) {\n\t                if (typeof response.body !== 'object') {\n\t                    deferred.reject(new Error(\"Server response could not be parsed!\" + response.body));\n\t                    return;\n\t                }\n\t            }\n\t\n\t            if (response.statusCode === 429) {\n\t                if (request.tries < 3 && deferred.promise.isPending()) {\n\t                    setTimeout(function () {\n\t                        start = now();\n\t                        sendWebsocketRequest(request, handleResponse);\n\t                    }, 1000); // one day this will be response.interval or something\n\t                } else {\n\t                    request.durationMillis = now() - start;\n\t                    pendingRequests.remove(request.id);\n\t                    failWebsocketRequest(request, response,\n\t                            \"Too many retries after rate limit exceeded.\", deferred);\n\t                }\n\t                return;\n\t            }\n\t\n\t            request.durationMillis = now() - start;\n\t            pendingRequests.remove(request.id);\n\t\n\t            if ([200, 204, 205, 302, 401, 403, 404, 418].indexOf(thisHandler.status) === -1) {\n\t                failWebsocketRequest(request, response,\n\t                        response.body.error || errors[thisHandler.status] || \"Unknown error\", deferred);\n\t            } else {\n\t                deferred.resolve(response.body);\n\t            }\n\t\n\t            if (logRequest) {\n\t                log.debug('socket response', {\n\t                    method: request.method,\n\t                    path: request.path,\n\t                    durationMillis: request.durationMillis,\n\t                    response: response\n\t                });\n\t            }\n\t        }\n\t\n\t        start = now();\n\t        sendWebsocketRequest(request, handleResponse);\n\t        return deferred.promise;\n\t    }\n\t\n\t    function failWebsocketRequest(request, response, error, deferred) {\n\t        if (response && response.body && response.body.error) {\n\t            if (response.body.details) {\n\t                error += ' ' + response.body.details;\n\t            }\n\t            deferred.reject(buildResponseError(response, error + ' (' + request.method + ' ' + request.path + ')'));\n\t        } else {\n\t            deferred.resolve(response.body);\n\t        }\n\t    }\n\t\n\t    function sendWebsocketRequest(request, handleResponse) {\n\t        request.tries += 1;\n\t        socket.emit(request.method, JSON.stringify({\n\t            url: request.path,\n\t            data: request.parameters,\n\t            headers: {'App-Token': appToken}\n\t        }), handleResponse);\n\t    }\n\t\n\t    /**\n\t     * Construct an API call and return the formatted response and errors. The 'success'\n\t     * attribute indicates the success or failure of the API call. The 'response' attribute\n\t     * is an associative array constructed by json.decode. The 'error' attribute is a message.\n\t     * If the API call is successful but the server returns invalid JSON, error will be\n\t     * \"Invalid JSON.\" and response will be the unchanged content of the response body.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.call\n\t     * @private\n\t     * @param {object} params\n\t     * @param {string} params.httpMethod\n\t     * @param {string} params.objectId\n\t     * @param {string} params.path\n\t     * @param {object} params.parameters\n\t     * @returns {Promise}\n\t     */\n\t    function call(params) {\n\t        /* Params go in the URI for GET, DELETE, same format for\n\t         * POST and PUT, but they must be sent separately after the\n\t         * request is opened. */\n\t        var deferred = Q.defer();\n\t        var paramString = null;\n\t        var uri = null;\n\t        var response = {\n\t            'result': null,\n\t            'code': null\n\t        };\n\t        var start = now();\n\t\n\t        uri = clientSettings.baseURL + params.path;\n\t\n\t        if (!params) {\n\t            deferred.reject(new Error('No params.'));\n\t            return;\n\t        }\n\t\n\t        if (!params.httpMethod) {\n\t            deferred.reject(new Error('No HTTP method.'));\n\t            return;\n\t        }\n\t\n\t        if (!params.path) {\n\t            deferred.reject(new Error('No request path.'));\n\t            return;\n\t        }\n\t\n\t        if (params.objectId) {\n\t            params.path = params.path.replace(/\\%s/ig, params.objectId);\n\t        }\n\t\n\t        if (['GET', 'DELETE'].indexOf(params.httpMethod) > -1) {\n\t            uri += makeParamString(params.parameters);\n\t        }\n\t\n\t        xhr.open(params.httpMethod, uri);\n\t        if (appToken) {\n\t            xhr.setRequestHeader(\"App-Token\", appToken);\n\t        }\n\t        if (['POST', 'PUT'].indexOf(params.httpMethod) > -1) {\n\t            paramString = JSON.stringify(params.parameters);\n\t            if (paramString.length > bodySizeLimit) {\n\t                deferred.reject(new Error('Request body exceeds maximum size of ' + bodySizeLimit + ' bytes'));\n\t                return;\n\t            }\n\t            xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n\t        } else if (['GET', 'DELETE'].indexOf(params.httpMethod) === -1) {\n\t            deferred.reject(new Error('Illegal HTTP request method ' + params.httpMethod));\n\t            return;\n\t        }\n\t        log.debug('request', {\n\t            method: params.httpMethod,\n\t            uri: uri,\n\t            params: paramString\n\t        });\n\t\n\t        try {\n\t            xhr.send(paramString);\n\t        } catch (err) {\n\t            deferred.reject(err);\n\t            return;\n\t        }\n\t\n\t        xhr.onreadystatechange = function () {\n\t            var durationMillis = now() - start;\n\t            var limit;\n\t            var unit;\n\t\n\t            if (this.readyState !== 4) {\n\t                return;\n\t            }\n\t\n\t            if (this.status === 0) {\n\t                deferred.reject(new Error(\"Status is 0: Incomplete request, SSL error, or CORS error.\"));\n\t                return;\n\t            }\n\t\n\t            if ([200, 204, 205, 302, 401, 403, 404, 418].indexOf(this.status) > -1) {\n\t                response.code = this.status;\n\t                response.headers = getAllResponseHeaders(this);\n\t                response.uri = uri;\n\t                response.params = params.parameters;\n\t                response.error = errors[this.status];\n\t                if (this.response) {\n\t                    try {\n\t                        response.result = JSON.parse(this.response);\n\t                    } catch (e) {\n\t                        response.result = this.response;\n\t                        response.error = \"Invalid JSON.\";\n\t                    }\n\t                }\n\t                log.debug('response', {\n\t                    method: params.httpMethod,\n\t                    durationMillis: durationMillis,\n\t                    response: response\n\t                });\n\t                deferred.resolve(response);\n\t            } else if (this.status === 429) {\n\t                unit = getResponseHeader(this, 'RateLimit-Time-Units');\n\t                limit = getResponseHeader(this, 'RateLimit-Limit');\n\t                deferred.reject(buildResponseError(response, \"Rate limit of \" + limit + \"/\" + unit +\n\t                    \" exceeded. Try again in 1 \" + unit + \".\"));\n\t            } else {\n\t                deferred.reject(buildResponseError(response, 'unexpected response ' + this.status));\n\t            }\n\t        };\n\t\n\t        return deferred.promise;\n\t    }\n\t\n\t    /**\n\t     * Turn key/value and key/list pairs into an HTTP URL parameter string.\n\t     * var1=value1&var2=value2,value3,value4\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.makeParamString\n\t     * @private\n\t     * @param {object} params - Arbitrary collection of strings and arrays to serialize.\n\t     * @returns {string}\n\t     */\n\t    function makeParamString(params) {\n\t        var strings = [];\n\t        if (!params) {\n\t            return '';\n\t        }\n\t\n\t        Object.keys(params).forEach(function formatParam(name) {\n\t            var value = params[name];\n\t            /* Skip objects -- We won't know how to name these. */\n\t            if (value instanceof Array) {\n\t                strings.push([name, value.join(',')].join('='));\n\t            } else if (typeof value !== 'object' && typeof value !== 'function') {\n\t                strings.push([name, value].join('='));\n\t            }\n\t        });\n\t\n\t        if (strings.length > 0) {\n\t            return '?' + strings.join('&');\n\t        } else {\n\t            return '';\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Tries to retrieve a single header value from an XHR response. If the header is disallowed,\n\t     * or does not exist, will return null. Otherwise returns the value of the header.\n\t     *\n\t     * The CORS spec does not define what the browser should do in the case of a request for a\n\t     * disallowed header, but at least Chrome throws an exception.\n\t     *\n\t     * @param {object} xhrResponse The response of an XMLHttpRequest\n\t     * @param {string} header The name of the header to retrieve the value for\n\t     * @returns {string|null} The value(s) of the header, or null if disallowed or unavailable.\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getResponseHeader\n\t     * @private\n\t     */\n\t    function getResponseHeader(xhrResponse, header) {\n\t        try {\n\t            return xhrResponse.getResponseHeader(header);\n\t        } catch (e) {\n\t            return null;\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Retrieves all headers from an XHR response as key/val pairs\n\t     *\n\t     * @param {object} xhrResponse The response of an XMLHttpRequest\n\t     * @returns {*} the key/val pairs of the response headers\n\t     * @memberof! respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.getAllResponseHeaders\n\t     * @private\n\t     */\n\t    function getAllResponseHeaders(xhrResponse) {\n\t        var result = {};\n\t        var headers;\n\t        var pairs;\n\t\n\t        headers = xhrResponse.getAllResponseHeaders();\n\t        if (!headers) {\n\t            return result;\n\t        }\n\t\n\t        // 1 header per line (cr+lf)\n\t        pairs = headers.split('\\u000d\\u000a');\n\t        pairs.forEach(function (pair) {\n\t            var key;\n\t            var val;\n\t\n\t            // key separated from value by ': '\n\t            // value may contain ': ', so using indexOf instead of split\n\t            var index = pair.indexOf('\\u003a\\u0020');\n\t            if (index > 0) {\n\t                key = pair.substring(0, index);\n\t                val = pair.substring(index + 2);\n\t                result[key] = val;\n\t            }\n\t        });\n\t\n\t        return result;\n\t    }\n\t\n\t    /**\n\t     * Creates an Error with the supplied `message` and, if available, the `Request-Id` header\n\t     * from the supplied `response`.\n\t     *\n\t     * @param {object} res\n\t     * @param {object} [res.headers]\n\t     * @param {string} [res.headers.Request-Id] The requestId to append to the Error message\n\t     * @param {string} message The message the Error should be constructed with\n\t     * @returns {Error} the constructed Error object\n\t     * @memberof respoke.SignalingChannel\n\t     * @method respoke.SignalingChannel.buildResponseError\n\t     * @api private\n\t     */\n\t    function buildResponseError(res, message) {\n\t        var requestId = res && res.headers && res.headers['Request-Id'];\n\t        if (requestId) {\n\t            message += ' [Request-Id: ' + requestId + ']';\n\t        }\n\t\n\t        return new Error(message);\n\t    }\n\t\n\t    return that;\n\t}; // End respoke.SignalingChannel\n\t/**\n\t * Handle an error that resulted from a method call.\n\t * @callback respoke.SignalingChannel.errorHandler\n\t * @params {Error} err\n\t */\n\t/**\n\t * Handle sending successfully.\n\t * @callback respoke.SignalingChannel.sendHandler\n\t */\n\t/**\n\t * Receive a group.\n\t * @callback respoke.SignalingChannel.groupHandler\n\t * @param {respoke.Group}\n\t */\n\t/**\n\t * Receive a list of groups.\n\t * @callback respoke.SignalingChannel.groupListHandler\n\t * @param {Array}\n\t */\n\t/**\n\t * Receive a list of TURN credentials.\n\t * @callback respoke.SignalingChannel.turnSuccessHandler\n\t * @param {Array}\n\t */\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/*! Socket.IO.js build:0.9.17, development. Copyright(c) 2011 LearnBoost <dev@learnboost.com> MIT Licensed */\n\t\n\tvar io = (false ? {} : module.exports);\n\t(function() {\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, global) {\n\t\n\t  /**\n\t   * IO namespace.\n\t   *\n\t   * @namespace\n\t   */\n\t\n\t  var io = exports;\n\t\n\t  /**\n\t   * Socket.IO version\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  io.version = '0.9.17';\n\t\n\t  /**\n\t   * Protocol implemented.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  io.protocol = 1;\n\t\n\t  /**\n\t   * Available transports, these will be populated with the available transports\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  io.transports = [];\n\t\n\t  /**\n\t   * Keep track of jsonp callbacks.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.j = [];\n\t\n\t  /**\n\t   * Keep track of our io.Sockets\n\t   *\n\t   * @api private\n\t   */\n\t  io.sockets = {};\n\t\n\t\n\t  /**\n\t   * Manages connections to hosts.\n\t   *\n\t   * @param {String} uri\n\t   * @Param {Boolean} force creation of new socket (defaults to false)\n\t   * @api public\n\t   */\n\t\n\t  io.connect = function (host, details) {\n\t    var uri = io.util.parseUri(host)\n\t      , uuri\n\t      , socket;\n\t\n\t    if (global && global.location) {\n\t      uri.protocol = uri.protocol || global.location.protocol.slice(0, -1);\n\t      uri.host = uri.host || (global.document\n\t        ? global.document.domain : global.location.hostname);\n\t      uri.port = uri.port || global.location.port;\n\t    }\n\t\n\t    uuri = io.util.uniqueUri(uri);\n\t\n\t    var options = {\n\t        host: uri.host\n\t      , secure: 'https' == uri.protocol\n\t      , port: uri.port || ('https' == uri.protocol ? 443 : 80)\n\t      , query: uri.query || ''\n\t    };\n\t\n\t    io.util.merge(options, details);\n\t\n\t    if (options['force new connection'] || !io.sockets[uuri]) {\n\t      socket = new io.Socket(options);\n\t    }\n\t\n\t    if (!options['force new connection'] && socket) {\n\t      io.sockets[uuri] = socket;\n\t    }\n\t\n\t    socket = socket || io.sockets[uuri];\n\t\n\t    // if path is different from '' or /\n\t    return socket.of(uri.path.length > 1 ? uri.path : '');\n\t  };\n\t\n\t})(true ? module.exports : (this.io = {}), this);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, global) {\n\t\n\t  /**\n\t   * Utilities namespace.\n\t   *\n\t   * @namespace\n\t   */\n\t\n\t  var util = exports.util = {};\n\t\n\t  /**\n\t   * Parses an URI\n\t   *\n\t   * @author Steven Levithan <stevenlevithan.com> (MIT license)\n\t   * @api public\n\t   */\n\t\n\t  var re = /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\t\n\t  var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password',\n\t               'host', 'port', 'relative', 'path', 'directory', 'file', 'query',\n\t               'anchor'];\n\t\n\t  util.parseUri = function (str) {\n\t    var m = re.exec(str || '')\n\t      , uri = {}\n\t      , i = 14;\n\t\n\t    while (i--) {\n\t      uri[parts[i]] = m[i] || '';\n\t    }\n\t\n\t    return uri;\n\t  };\n\t\n\t  /**\n\t   * Produces a unique url that identifies a Socket.IO connection.\n\t   *\n\t   * @param {Object} uri\n\t   * @api public\n\t   */\n\t\n\t  util.uniqueUri = function (uri) {\n\t    var protocol = uri.protocol\n\t      , host = uri.host\n\t      , port = uri.port;\n\t\n\t    if ('document' in global) {\n\t      host = host || document.domain;\n\t      port = port || (protocol == 'https'\n\t        && document.location.protocol !== 'https:' ? 443 : document.location.port);\n\t    } else {\n\t      host = host || 'localhost';\n\t\n\t      if (!port && protocol == 'https') {\n\t        port = 443;\n\t      }\n\t    }\n\t\n\t    return (protocol || 'http') + '://' + host + ':' + (port || 80);\n\t  };\n\t\n\t  /**\n\t   * Mergest 2 query strings in to once unique query string\n\t   *\n\t   * @param {String} base\n\t   * @param {String} addition\n\t   * @api public\n\t   */\n\t\n\t  util.query = function (base, addition) {\n\t    var query = util.chunkQuery(base || '')\n\t      , components = [];\n\t\n\t    util.merge(query, util.chunkQuery(addition || ''));\n\t    for (var part in query) {\n\t      if (query.hasOwnProperty(part)) {\n\t        components.push(part + '=' + query[part]);\n\t      }\n\t    }\n\t\n\t    return components.length ? '?' + components.join('&') : '';\n\t  };\n\t\n\t  /**\n\t   * Transforms a querystring in to an object\n\t   *\n\t   * @param {String} qs\n\t   * @api public\n\t   */\n\t\n\t  util.chunkQuery = function (qs) {\n\t    var query = {}\n\t      , params = qs.split('&')\n\t      , i = 0\n\t      , l = params.length\n\t      , kv;\n\t\n\t    for (; i < l; ++i) {\n\t      kv = params[i].split('=');\n\t      if (kv[0]) {\n\t        query[kv[0]] = kv[1];\n\t      }\n\t    }\n\t\n\t    return query;\n\t  };\n\t\n\t  /**\n\t   * Executes the given function when the page is loaded.\n\t   *\n\t   *     io.util.load(function () { console.log('page loaded'); });\n\t   *\n\t   * @param {Function} fn\n\t   * @api public\n\t   */\n\t\n\t  var pageLoaded = false;\n\t\n\t  util.load = function (fn) {\n\t    if ('document' in global && document.readyState === 'complete' || pageLoaded) {\n\t      return fn();\n\t    }\n\t\n\t    util.on(global, 'load', fn, false);\n\t  };\n\t\n\t  /**\n\t   * Adds an event.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  util.on = function (element, event, fn, capture) {\n\t    if (element.attachEvent) {\n\t      element.attachEvent('on' + event, fn);\n\t    } else if (element.addEventListener) {\n\t      element.addEventListener(event, fn, capture);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Generates the correct `XMLHttpRequest` for regular and cross domain requests.\n\t   *\n\t   * @param {Boolean} [xdomain] Create a request that can be used cross domain.\n\t   * @returns {XMLHttpRequest|false} If we can create a XMLHttpRequest.\n\t   * @api private\n\t   */\n\t\n\t  util.request = function (xdomain) {\n\t\n\t    if (xdomain && 'undefined' != typeof XDomainRequest && !util.ua.hasCORS) {\n\t      return new XDomainRequest();\n\t    }\n\t\n\t    if ('undefined' != typeof XMLHttpRequest && (!xdomain || util.ua.hasCORS)) {\n\t      return new XMLHttpRequest();\n\t    }\n\t\n\t    if (!xdomain) {\n\t      try {\n\t        return new window[(['Active'].concat('Object').join('X'))]('Microsoft.XMLHTTP');\n\t      } catch(e) { }\n\t    }\n\t\n\t    return null;\n\t  };\n\t\n\t  /**\n\t   * XHR based transport constructor.\n\t   *\n\t   * @constructor\n\t   * @api public\n\t   */\n\t\n\t  /**\n\t   * Change the internal pageLoaded value.\n\t   */\n\t\n\t  if ('undefined' != typeof window) {\n\t    util.load(function () {\n\t      pageLoaded = true;\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Defers a function to ensure a spinner is not displayed by the browser\n\t   *\n\t   * @param {Function} fn\n\t   * @api public\n\t   */\n\t\n\t  util.defer = function (fn) {\n\t    if (!util.ua.webkit || 'undefined' != typeof importScripts) {\n\t      return fn();\n\t    }\n\t\n\t    util.load(function () {\n\t      setTimeout(fn, 100);\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Merges two objects.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.merge = function merge (target, additional, deep, lastseen) {\n\t    var seen = lastseen || []\n\t      , depth = typeof deep == 'undefined' ? 2 : deep\n\t      , prop;\n\t\n\t    for (prop in additional) {\n\t      if (additional.hasOwnProperty(prop) && util.indexOf(seen, prop) < 0) {\n\t        if (typeof target[prop] !== 'object' || !depth) {\n\t          target[prop] = additional[prop];\n\t          seen.push(additional[prop]);\n\t        } else {\n\t          util.merge(target[prop], additional[prop], depth - 1, seen);\n\t        }\n\t      }\n\t    }\n\t\n\t    return target;\n\t  };\n\t\n\t  /**\n\t   * Merges prototypes from objects\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.mixin = function (ctor, ctor2) {\n\t    util.merge(ctor.prototype, ctor2.prototype);\n\t  };\n\t\n\t  /**\n\t   * Shortcut for prototypical and static inheritance.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  util.inherit = function (ctor, ctor2) {\n\t    function f() {};\n\t    f.prototype = ctor2.prototype;\n\t    ctor.prototype = new f;\n\t  };\n\t\n\t  /**\n\t   * Checks if the given object is an Array.\n\t   *\n\t   *     io.util.isArray([]); // true\n\t   *     io.util.isArray({}); // false\n\t   *\n\t   * @param Object obj\n\t   * @api public\n\t   */\n\t\n\t  util.isArray = Array.isArray || function (obj) {\n\t    return Object.prototype.toString.call(obj) === '[object Array]';\n\t  };\n\t\n\t  /**\n\t   * Intersects values of two arrays into a third\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.intersect = function (arr, arr2) {\n\t    var ret = []\n\t      , longest = arr.length > arr2.length ? arr : arr2\n\t      , shortest = arr.length > arr2.length ? arr2 : arr;\n\t\n\t    for (var i = 0, l = shortest.length; i < l; i++) {\n\t      if (~util.indexOf(longest, shortest[i]))\n\t        ret.push(shortest[i]);\n\t    }\n\t\n\t    return ret;\n\t  };\n\t\n\t  /**\n\t   * Array indexOf compatibility.\n\t   *\n\t   * @see bit.ly/a5Dxa2\n\t   * @api public\n\t   */\n\t\n\t  util.indexOf = function (arr, o, i) {\n\t\n\t    for (var j = arr.length, i = i < 0 ? i + j < 0 ? 0 : i + j : i || 0;\n\t         i < j && arr[i] !== o; i++) {}\n\t\n\t    return j <= i ? -1 : i;\n\t  };\n\t\n\t  /**\n\t   * Converts enumerables to array.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.toArray = function (enu) {\n\t    var arr = [];\n\t\n\t    for (var i = 0, l = enu.length; i < l; i++)\n\t      arr.push(enu[i]);\n\t\n\t    return arr;\n\t  };\n\t\n\t  /**\n\t   * UA / engines detection namespace.\n\t   *\n\t   * @namespace\n\t   */\n\t\n\t  util.ua = {};\n\t\n\t  /**\n\t   * Whether the UA supports CORS for XHR.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.ua.hasCORS = 'undefined' != typeof XMLHttpRequest && (function () {\n\t    try {\n\t      var a = new XMLHttpRequest();\n\t    } catch (e) {\n\t      return false;\n\t    }\n\t\n\t    return a.withCredentials != undefined;\n\t  })();\n\t\n\t  /**\n\t   * Detect webkit.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.ua.webkit = 'undefined' != typeof navigator\n\t    && /webkit/i.test(navigator.userAgent);\n\t\n\t   /**\n\t   * Detect iPad/iPhone/iPod.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  util.ua.iDevice = 'undefined' != typeof navigator\n\t      && /iPad|iPhone|iPod/i.test(navigator.userAgent);\n\t\n\t})('undefined' != typeof io ? io : module.exports, this);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.EventEmitter = EventEmitter;\n\t\n\t  /**\n\t   * Event emitter constructor.\n\t   *\n\t   * @api public.\n\t   */\n\t\n\t  function EventEmitter () {};\n\t\n\t  /**\n\t   * Adds a listener\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  EventEmitter.prototype.on = function (name, fn) {\n\t    if (!this.$events) {\n\t      this.$events = {};\n\t    }\n\t\n\t    if (!this.$events[name]) {\n\t      this.$events[name] = fn;\n\t    } else if (io.util.isArray(this.$events[name])) {\n\t      this.$events[name].push(fn);\n\t    } else {\n\t      this.$events[name] = [this.$events[name], fn];\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\t\n\t  /**\n\t   * Adds a volatile listener.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  EventEmitter.prototype.once = function (name, fn) {\n\t    var self = this;\n\t\n\t    function on () {\n\t      self.removeListener(name, on);\n\t      fn.apply(this, arguments);\n\t    };\n\t\n\t    on.listener = fn;\n\t    this.on(name, on);\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Removes a listener.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  EventEmitter.prototype.removeListener = function (name, fn) {\n\t    if (this.$events && this.$events[name]) {\n\t      var list = this.$events[name];\n\t\n\t      if (io.util.isArray(list)) {\n\t        var pos = -1;\n\t\n\t        for (var i = 0, l = list.length; i < l; i++) {\n\t          if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {\n\t            pos = i;\n\t            break;\n\t          }\n\t        }\n\t\n\t        if (pos < 0) {\n\t          return this;\n\t        }\n\t\n\t        list.splice(pos, 1);\n\t\n\t        if (!list.length) {\n\t          delete this.$events[name];\n\t        }\n\t      } else if (list === fn || (list.listener && list.listener === fn)) {\n\t        delete this.$events[name];\n\t      }\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Removes all listeners for an event.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  EventEmitter.prototype.removeAllListeners = function (name) {\n\t    if (name === undefined) {\n\t      this.$events = {};\n\t      return this;\n\t    }\n\t\n\t    if (this.$events && this.$events[name]) {\n\t      this.$events[name] = null;\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Gets all listeners for a certain event.\n\t   *\n\t   * @api publci\n\t   */\n\t\n\t  EventEmitter.prototype.listeners = function (name) {\n\t    if (!this.$events) {\n\t      this.$events = {};\n\t    }\n\t\n\t    if (!this.$events[name]) {\n\t      this.$events[name] = [];\n\t    }\n\t\n\t    if (!io.util.isArray(this.$events[name])) {\n\t      this.$events[name] = [this.$events[name]];\n\t    }\n\t\n\t    return this.$events[name];\n\t  };\n\t\n\t  /**\n\t   * Emits an event.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  EventEmitter.prototype.emit = function (name) {\n\t    if (!this.$events) {\n\t      return false;\n\t    }\n\t\n\t    var handler = this.$events[name];\n\t\n\t    if (!handler) {\n\t      return false;\n\t    }\n\t\n\t    var args = Array.prototype.slice.call(arguments, 1);\n\t\n\t    if ('function' == typeof handler) {\n\t      handler.apply(this, args);\n\t    } else if (io.util.isArray(handler)) {\n\t      var listeners = handler.slice();\n\t\n\t      for (var i = 0, l = listeners.length; i < l; i++) {\n\t        listeners[i].apply(this, args);\n\t      }\n\t    } else {\n\t      return false;\n\t    }\n\t\n\t    return true;\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * Based on JSON2 (http://www.JSON.org/js.html).\n\t */\n\t\n\t(function (exports, nativeJSON) {\n\t  \"use strict\";\n\t\n\t  // use native JSON if it's available\n\t  if (nativeJSON && nativeJSON.parse){\n\t    return exports.JSON = {\n\t      parse: nativeJSON.parse\n\t    , stringify: nativeJSON.stringify\n\t    };\n\t  }\n\t\n\t  var JSON = exports.JSON = {};\n\t\n\t  function f(n) {\n\t      // Format integers to have at least two digits.\n\t      return n < 10 ? '0' + n : n;\n\t  }\n\t\n\t  function date(d, key) {\n\t    return isFinite(d.valueOf()) ?\n\t        d.getUTCFullYear()     + '-' +\n\t        f(d.getUTCMonth() + 1) + '-' +\n\t        f(d.getUTCDate())      + 'T' +\n\t        f(d.getUTCHours())     + ':' +\n\t        f(d.getUTCMinutes())   + ':' +\n\t        f(d.getUTCSeconds())   + 'Z' : null;\n\t  };\n\t\n\t  var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n\t      escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n\t      gap,\n\t      indent,\n\t      meta = {    // table of character substitutions\n\t          '\\b': '\\\\b',\n\t          '\\t': '\\\\t',\n\t          '\\n': '\\\\n',\n\t          '\\f': '\\\\f',\n\t          '\\r': '\\\\r',\n\t          '\"' : '\\\\\"',\n\t          '\\\\': '\\\\\\\\'\n\t      },\n\t      rep;\n\t\n\t\n\t  function quote(string) {\n\t\n\t// If the string contains no control characters, no quote characters, and no\n\t// backslash characters, then we can safely slap some quotes around it.\n\t// Otherwise we must also replace the offending characters with safe escape\n\t// sequences.\n\t\n\t      escapable.lastIndex = 0;\n\t      return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n\t          var c = meta[a];\n\t          return typeof c === 'string' ? c :\n\t              '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n\t      }) + '\"' : '\"' + string + '\"';\n\t  }\n\t\n\t\n\t  function str(key, holder) {\n\t\n\t// Produce a string from holder[key].\n\t\n\t      var i,          // The loop counter.\n\t          k,          // The member key.\n\t          v,          // The member value.\n\t          length,\n\t          mind = gap,\n\t          partial,\n\t          value = holder[key];\n\t\n\t// If the value has a toJSON method, call it to obtain a replacement value.\n\t\n\t      if (value instanceof Date) {\n\t          value = date(key);\n\t      }\n\t\n\t// If we were called with a replacer function, then call the replacer to\n\t// obtain a replacement value.\n\t\n\t      if (typeof rep === 'function') {\n\t          value = rep.call(holder, key, value);\n\t      }\n\t\n\t// What happens next depends on the value's type.\n\t\n\t      switch (typeof value) {\n\t      case 'string':\n\t          return quote(value);\n\t\n\t      case 'number':\n\t\n\t// JSON numbers must be finite. Encode non-finite numbers as null.\n\t\n\t          return isFinite(value) ? String(value) : 'null';\n\t\n\t      case 'boolean':\n\t      case 'null':\n\t\n\t// If the value is a boolean or null, convert it to a string. Note:\n\t// typeof null does not produce 'null'. The case is included here in\n\t// the remote chance that this gets fixed someday.\n\t\n\t          return String(value);\n\t\n\t// If the type is 'object', we might be dealing with an object or an array or\n\t// null.\n\t\n\t      case 'object':\n\t\n\t// Due to a specification blunder in ECMAScript, typeof null is 'object',\n\t// so watch out for that case.\n\t\n\t          if (!value) {\n\t              return 'null';\n\t          }\n\t\n\t// Make an array to hold the partial results of stringifying this object value.\n\t\n\t          gap += indent;\n\t          partial = [];\n\t\n\t// Is the value an array?\n\t\n\t          if (Object.prototype.toString.apply(value) === '[object Array]') {\n\t\n\t// The value is an array. Stringify every element. Use null as a placeholder\n\t// for non-JSON values.\n\t\n\t              length = value.length;\n\t              for (i = 0; i < length; i += 1) {\n\t                  partial[i] = str(i, value) || 'null';\n\t              }\n\t\n\t// Join all of the elements together, separated with commas, and wrap them in\n\t// brackets.\n\t\n\t              v = partial.length === 0 ? '[]' : gap ?\n\t                  '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n\t                  '[' + partial.join(',') + ']';\n\t              gap = mind;\n\t              return v;\n\t          }\n\t\n\t// If the replacer is an array, use it to select the members to be stringified.\n\t\n\t          if (rep && typeof rep === 'object') {\n\t              length = rep.length;\n\t              for (i = 0; i < length; i += 1) {\n\t                  if (typeof rep[i] === 'string') {\n\t                      k = rep[i];\n\t                      v = str(k, value);\n\t                      if (v) {\n\t                          partial.push(quote(k) + (gap ? ': ' : ':') + v);\n\t                      }\n\t                  }\n\t              }\n\t          } else {\n\t\n\t// Otherwise, iterate through all of the keys in the object.\n\t\n\t              for (k in value) {\n\t                  if (Object.prototype.hasOwnProperty.call(value, k)) {\n\t                      v = str(k, value);\n\t                      if (v) {\n\t                          partial.push(quote(k) + (gap ? ': ' : ':') + v);\n\t                      }\n\t                  }\n\t              }\n\t          }\n\t\n\t// Join all of the member texts together, separated with commas,\n\t// and wrap them in braces.\n\t\n\t          v = partial.length === 0 ? '{}' : gap ?\n\t              '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n\t              '{' + partial.join(',') + '}';\n\t          gap = mind;\n\t          return v;\n\t      }\n\t  }\n\t\n\t// If the JSON object does not yet have a stringify method, give it one.\n\t\n\t  JSON.stringify = function (value, replacer, space) {\n\t\n\t// The stringify method takes a value and an optional replacer, and an optional\n\t// space parameter, and returns a JSON text. The replacer can be a function\n\t// that can replace values, or an array of strings that will select the keys.\n\t// A default replacer method can be provided. Use of the space parameter can\n\t// produce text that is more easily readable.\n\t\n\t      var i;\n\t      gap = '';\n\t      indent = '';\n\t\n\t// If the space parameter is a number, make an indent string containing that\n\t// many spaces.\n\t\n\t      if (typeof space === 'number') {\n\t          for (i = 0; i < space; i += 1) {\n\t              indent += ' ';\n\t          }\n\t\n\t// If the space parameter is a string, it will be used as the indent string.\n\t\n\t      } else if (typeof space === 'string') {\n\t          indent = space;\n\t      }\n\t\n\t// If there is a replacer, it must be a function or an array.\n\t// Otherwise, throw an error.\n\t\n\t      rep = replacer;\n\t      if (replacer && typeof replacer !== 'function' &&\n\t              (typeof replacer !== 'object' ||\n\t              typeof replacer.length !== 'number')) {\n\t          throw new Error('JSON.stringify');\n\t      }\n\t\n\t// Make a fake root object containing our value under the key of ''.\n\t// Return the result of stringifying the value.\n\t\n\t      return str('', {'': value});\n\t  };\n\t\n\t// If the JSON object does not yet have a parse method, give it one.\n\t\n\t  JSON.parse = function (text, reviver) {\n\t  // The parse method takes a text and an optional reviver function, and returns\n\t  // a JavaScript value if the text is a valid JSON text.\n\t\n\t      var j;\n\t\n\t      function walk(holder, key) {\n\t\n\t  // The walk method is used to recursively walk the resulting structure so\n\t  // that modifications can be made.\n\t\n\t          var k, v, value = holder[key];\n\t          if (value && typeof value === 'object') {\n\t              for (k in value) {\n\t                  if (Object.prototype.hasOwnProperty.call(value, k)) {\n\t                      v = walk(value, k);\n\t                      if (v !== undefined) {\n\t                          value[k] = v;\n\t                      } else {\n\t                          delete value[k];\n\t                      }\n\t                  }\n\t              }\n\t          }\n\t          return reviver.call(holder, key, value);\n\t      }\n\t\n\t\n\t  // Parsing happens in four stages. In the first stage, we replace certain\n\t  // Unicode characters with escape sequences. JavaScript handles many characters\n\t  // incorrectly, either silently deleting them, or treating them as line endings.\n\t\n\t      text = String(text);\n\t      cx.lastIndex = 0;\n\t      if (cx.test(text)) {\n\t          text = text.replace(cx, function (a) {\n\t              return '\\\\u' +\n\t                  ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n\t          });\n\t      }\n\t\n\t  // In the second stage, we run the text against regular expressions that look\n\t  // for non-JSON patterns. We are especially concerned with '()' and 'new'\n\t  // because they can cause invocation, and '=' because it can cause mutation.\n\t  // But just to be safe, we want to reject all unexpected forms.\n\t\n\t  // We split the second stage into 4 regexp operations in order to work around\n\t  // crippling inefficiencies in IE's and Safari's regexp engines. First we\n\t  // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we\n\t  // replace all simple value tokens with ']' characters. Third, we delete all\n\t  // open brackets that follow a colon or comma or that begin the text. Finally,\n\t  // we look to see that the remaining characters are only whitespace or ']' or\n\t  // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.\n\t\n\t      if (/^[\\],:{}\\s]*$/\n\t              .test(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')\n\t                  .replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']')\n\t                  .replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))) {\n\t\n\t  // In the third stage we use the eval function to compile the text into a\n\t  // JavaScript structure. The '{' operator is subject to a syntactic ambiguity\n\t  // in JavaScript: it can begin a block or an object literal. We wrap the text\n\t  // in parens to eliminate the ambiguity.\n\t\n\t          j = eval('(' + text + ')');\n\t\n\t  // In the optional fourth stage, we recursively walk the new structure, passing\n\t  // each name/value pair to a reviver function for possible transformation.\n\t\n\t          return typeof reviver === 'function' ?\n\t              walk({'': j}, '') : j;\n\t      }\n\t\n\t  // If the text is not JSON parseable, then a SyntaxError is thrown.\n\t\n\t      throw new SyntaxError('JSON.parse');\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , typeof JSON !== 'undefined' ? JSON : undefined\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Parser namespace.\n\t   *\n\t   * @namespace\n\t   */\n\t\n\t  var parser = exports.parser = {};\n\t\n\t  /**\n\t   * Packet types.\n\t   */\n\t\n\t  var packets = parser.packets = [\n\t      'disconnect'\n\t    , 'connect'\n\t    , 'heartbeat'\n\t    , 'message'\n\t    , 'json'\n\t    , 'event'\n\t    , 'ack'\n\t    , 'error'\n\t    , 'noop'\n\t  ];\n\t\n\t  /**\n\t   * Errors reasons.\n\t   */\n\t\n\t  var reasons = parser.reasons = [\n\t      'transport not supported'\n\t    , 'client not handshaken'\n\t    , 'unauthorized'\n\t  ];\n\t\n\t  /**\n\t   * Errors advice.\n\t   */\n\t\n\t  var advice = parser.advice = [\n\t      'reconnect'\n\t  ];\n\t\n\t  /**\n\t   * Shortcuts.\n\t   */\n\t\n\t  var JSON = io.JSON\n\t    , indexOf = io.util.indexOf;\n\t\n\t  /**\n\t   * Encodes a packet.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  parser.encodePacket = function (packet) {\n\t    var type = indexOf(packets, packet.type)\n\t      , id = packet.id || ''\n\t      , endpoint = packet.endpoint || ''\n\t      , ack = packet.ack\n\t      , data = null;\n\t\n\t    switch (packet.type) {\n\t      case 'error':\n\t        var reason = packet.reason ? indexOf(reasons, packet.reason) : ''\n\t          , adv = packet.advice ? indexOf(advice, packet.advice) : '';\n\t\n\t        if (reason !== '' || adv !== '')\n\t          data = reason + (adv !== '' ? ('+' + adv) : '');\n\t\n\t        break;\n\t\n\t      case 'message':\n\t        if (packet.data !== '')\n\t          data = packet.data;\n\t        break;\n\t\n\t      case 'event':\n\t        var ev = { name: packet.name };\n\t\n\t        if (packet.args && packet.args.length) {\n\t          ev.args = packet.args;\n\t        }\n\t\n\t        data = JSON.stringify(ev);\n\t        break;\n\t\n\t      case 'json':\n\t        data = JSON.stringify(packet.data);\n\t        break;\n\t\n\t      case 'connect':\n\t        if (packet.qs)\n\t          data = packet.qs;\n\t        break;\n\t\n\t      case 'ack':\n\t        data = packet.ackId\n\t          + (packet.args && packet.args.length\n\t              ? '+' + JSON.stringify(packet.args) : '');\n\t        break;\n\t    }\n\t\n\t    // construct packet with required fragments\n\t    var encoded = [\n\t        type\n\t      , id + (ack == 'data' ? '+' : '')\n\t      , endpoint\n\t    ];\n\t\n\t    // data fragment is optional\n\t    if (data !== null && data !== undefined)\n\t      encoded.push(data);\n\t\n\t    return encoded.join(':');\n\t  };\n\t\n\t  /**\n\t   * Encodes multiple messages (payload).\n\t   *\n\t   * @param {Array} messages\n\t   * @api private\n\t   */\n\t\n\t  parser.encodePayload = function (packets) {\n\t    var decoded = '';\n\t\n\t    if (packets.length == 1)\n\t      return packets[0];\n\t\n\t    for (var i = 0, l = packets.length; i < l; i++) {\n\t      var packet = packets[i];\n\t      decoded += '\\ufffd' + packet.length + '\\ufffd' + packets[i];\n\t    }\n\t\n\t    return decoded;\n\t  };\n\t\n\t  /**\n\t   * Decodes a packet\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  var regexp = /([^:]+):([0-9]+)?(\\+)?:([^:]+)?:?([\\s\\S]*)?/;\n\t\n\t  parser.decodePacket = function (data) {\n\t    var pieces = data.match(regexp);\n\t\n\t    if (!pieces) return {};\n\t\n\t    var id = pieces[2] || ''\n\t      , data = pieces[5] || ''\n\t      , packet = {\n\t            type: packets[pieces[1]]\n\t          , endpoint: pieces[4] || ''\n\t        };\n\t\n\t    // whether we need to acknowledge the packet\n\t    if (id) {\n\t      packet.id = id;\n\t      if (pieces[3])\n\t        packet.ack = 'data';\n\t      else\n\t        packet.ack = true;\n\t    }\n\t\n\t    // handle different packet types\n\t    switch (packet.type) {\n\t      case 'error':\n\t        var pieces = data.split('+');\n\t        packet.reason = reasons[pieces[0]] || '';\n\t        packet.advice = advice[pieces[1]] || '';\n\t        break;\n\t\n\t      case 'message':\n\t        packet.data = data || '';\n\t        break;\n\t\n\t      case 'event':\n\t        try {\n\t          var opts = JSON.parse(data);\n\t          packet.name = opts.name;\n\t          packet.args = opts.args;\n\t        } catch (e) { }\n\t\n\t        packet.args = packet.args || [];\n\t        break;\n\t\n\t      case 'json':\n\t        try {\n\t          packet.data = JSON.parse(data);\n\t        } catch (e) { }\n\t        break;\n\t\n\t      case 'connect':\n\t        packet.qs = data || '';\n\t        break;\n\t\n\t      case 'ack':\n\t        var pieces = data.match(/^([0-9]+)(\\+)?(.*)/);\n\t        if (pieces) {\n\t          packet.ackId = pieces[1];\n\t          packet.args = [];\n\t\n\t          if (pieces[3]) {\n\t            try {\n\t              packet.args = pieces[3] ? JSON.parse(pieces[3]) : [];\n\t            } catch (e) { }\n\t          }\n\t        }\n\t        break;\n\t\n\t      case 'disconnect':\n\t      case 'heartbeat':\n\t        break;\n\t    };\n\t\n\t    return packet;\n\t  };\n\t\n\t  /**\n\t   * Decodes data payload. Detects multiple messages\n\t   *\n\t   * @return {Array} messages\n\t   * @api public\n\t   */\n\t\n\t  parser.decodePayload = function (data) {\n\t    // IE doesn't like data[i] for unicode chars, charAt works fine\n\t    if (data.charAt(0) == '\\ufffd') {\n\t      var ret = [];\n\t\n\t      for (var i = 1, length = ''; i < data.length; i++) {\n\t        if (data.charAt(i) == '\\ufffd') {\n\t          ret.push(parser.decodePacket(data.substr(i + 1).substr(0, length)));\n\t          i += Number(length) + 1;\n\t          length = '';\n\t        } else {\n\t          length += data.charAt(i);\n\t        }\n\t      }\n\t\n\t      return ret;\n\t    } else {\n\t      return [parser.decodePacket(data)];\n\t    }\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.Transport = Transport;\n\t\n\t  /**\n\t   * This is the transport template for all supported transport methods.\n\t   *\n\t   * @constructor\n\t   * @api public\n\t   */\n\t\n\t  function Transport (socket, sessid) {\n\t    this.socket = socket;\n\t    this.sessid = sessid;\n\t  };\n\t\n\t  /**\n\t   * Apply EventEmitter mixin.\n\t   */\n\t\n\t  io.util.mixin(Transport, io.EventEmitter);\n\t\n\t\n\t  /**\n\t   * Indicates whether heartbeats is enabled for this transport\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.heartbeats = function () {\n\t    return true;\n\t  };\n\t\n\t  /**\n\t   * Handles the response from the server. When a new response is received\n\t   * it will automatically update the timeout, decode the message and\n\t   * forwards the response to the onMessage function for further processing.\n\t   *\n\t   * @param {String} data Response from the server.\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onData = function (data) {\n\t    this.clearCloseTimeout();\n\t\n\t    // If the connection in currently open (or in a reopening state) reset the close\n\t    // timeout since we have just received data. This check is necessary so\n\t    // that we don't reset the timeout on an explicitly disconnected connection.\n\t    if (this.socket.connected || this.socket.connecting || this.socket.reconnecting) {\n\t      this.setCloseTimeout();\n\t    }\n\t\n\t    if (data !== '') {\n\t      // todo: we should only do decodePayload for xhr transports\n\t      var msgs = io.parser.decodePayload(data);\n\t\n\t      if (msgs && msgs.length) {\n\t        for (var i = 0, l = msgs.length; i < l; i++) {\n\t          this.onPacket(msgs[i]);\n\t        }\n\t      }\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Handles packets.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onPacket = function (packet) {\n\t    this.socket.setHeartbeatTimeout();\n\t\n\t    if (packet.type == 'heartbeat') {\n\t      return this.onHeartbeat();\n\t    }\n\t\n\t    if (packet.type == 'connect' && packet.endpoint == '') {\n\t      this.onConnect();\n\t    }\n\t\n\t    if (packet.type == 'error' && packet.advice == 'reconnect') {\n\t      this.isOpen = false;\n\t    }\n\t\n\t    this.socket.onPacket(packet);\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Sets close timeout\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.setCloseTimeout = function () {\n\t    if (!this.closeTimeout) {\n\t      var self = this;\n\t\n\t      this.closeTimeout = setTimeout(function () {\n\t        self.onDisconnect();\n\t      }, this.socket.closeTimeout);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Called when transport disconnects.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onDisconnect = function () {\n\t    if (this.isOpen) this.close();\n\t    this.clearTimeouts();\n\t    this.socket.onDisconnect();\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Called when transport connects\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onConnect = function () {\n\t    this.socket.onConnect();\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Clears close timeout\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.clearCloseTimeout = function () {\n\t    if (this.closeTimeout) {\n\t      clearTimeout(this.closeTimeout);\n\t      this.closeTimeout = null;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Clear timeouts\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.clearTimeouts = function () {\n\t    this.clearCloseTimeout();\n\t\n\t    if (this.reopenTimeout) {\n\t      clearTimeout(this.reopenTimeout);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Sends a packet\n\t   *\n\t   * @param {Object} packet object.\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.packet = function (packet) {\n\t    this.send(io.parser.encodePacket(packet));\n\t  };\n\t\n\t  /**\n\t   * Send the received heartbeat message back to server. So the server\n\t   * knows we are still connected.\n\t   *\n\t   * @param {String} heartbeat Heartbeat response from the server.\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onHeartbeat = function (heartbeat) {\n\t    this.packet({ type: 'heartbeat' });\n\t  };\n\t\n\t  /**\n\t   * Called when the transport opens.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onOpen = function () {\n\t    this.isOpen = true;\n\t    this.clearCloseTimeout();\n\t    this.socket.onOpen();\n\t  };\n\t\n\t  /**\n\t   * Notifies the base when the connection with the Socket.IO server\n\t   * has been disconnected.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.onClose = function () {\n\t    var self = this;\n\t\n\t    /* FIXME: reopen delay causing a infinit loop\n\t    this.reopenTimeout = setTimeout(function () {\n\t      self.open();\n\t    }, this.socket.options['reopen delay']);*/\n\t\n\t    this.isOpen = false;\n\t    this.socket.onClose();\n\t    this.onDisconnect();\n\t  };\n\t\n\t  /**\n\t   * Generates a connection url based on the Socket.IO URL Protocol.\n\t   * See <https://github.com/learnboost/socket.io-node/> for more details.\n\t   *\n\t   * @returns {String} Connection url\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.prepareUrl = function () {\n\t    var options = this.socket.options;\n\t\n\t    return this.scheme() + '://'\n\t      + options.host + ':' + options.port + '/'\n\t      + options.resource + '/' + io.protocol\n\t      + '/' + this.name + '/' + this.sessid;\n\t  };\n\t\n\t  /**\n\t   * Checks if the transport is ready to start a connection.\n\t   *\n\t   * @param {Socket} socket The socket instance that needs a transport\n\t   * @param {Function} fn The callback\n\t   * @api private\n\t   */\n\t\n\t  Transport.prototype.ready = function (socket, fn) {\n\t    fn.call(this);\n\t  };\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io, global) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.Socket = Socket;\n\t\n\t  /**\n\t   * Create a new `Socket.IO client` which can establish a persistent\n\t   * connection with a Socket.IO enabled server.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  function Socket (options) {\n\t    this.options = {\n\t        port: 80\n\t      , secure: false\n\t      , document: 'document' in global ? document : false\n\t      , resource: 'socket.io'\n\t      , transports: io.transports\n\t      , 'connect timeout': 10000\n\t      , 'try multiple transports': true\n\t      , 'reconnect': true\n\t      , 'reconnection delay': 500\n\t      , 'reconnection limit': Infinity\n\t      , 'reopen delay': 3000\n\t      , 'max reconnection attempts': 10\n\t      , 'sync disconnect on unload': false\n\t      , 'auto connect': true\n\t      , 'flash policy port': 10843\n\t      , 'manualFlush': false\n\t    };\n\t\n\t    io.util.merge(this.options, options);\n\t\n\t    this.connected = false;\n\t    this.open = false;\n\t    this.connecting = false;\n\t    this.reconnecting = false;\n\t    this.namespaces = {};\n\t    this.buffer = [];\n\t    this.doBuffer = false;\n\t\n\t    if (this.options['sync disconnect on unload'] &&\n\t        (!this.isXDomain() || io.util.ua.hasCORS)) {\n\t      var self = this;\n\t      io.util.on(global, 'beforeunload', function () {\n\t        self.disconnectSync();\n\t      }, false);\n\t    }\n\t\n\t    if (this.options['auto connect']) {\n\t      this.connect();\n\t    }\n\t};\n\t\n\t  /**\n\t   * Apply EventEmitter mixin.\n\t   */\n\t\n\t  io.util.mixin(Socket, io.EventEmitter);\n\t\n\t  /**\n\t   * Returns a namespace listener/emitter for this socket\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  Socket.prototype.of = function (name) {\n\t    if (!this.namespaces[name]) {\n\t      this.namespaces[name] = new io.SocketNamespace(this, name);\n\t\n\t      if (name !== '') {\n\t        this.namespaces[name].packet({ type: 'connect' });\n\t      }\n\t    }\n\t\n\t    return this.namespaces[name];\n\t  };\n\t\n\t  /**\n\t   * Emits the given event to the Socket and all namespaces\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.publish = function () {\n\t    this.emit.apply(this, arguments);\n\t\n\t    var nsp;\n\t\n\t    for (var i in this.namespaces) {\n\t      if (this.namespaces.hasOwnProperty(i)) {\n\t        nsp = this.of(i);\n\t        nsp.$emit.apply(nsp, arguments);\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Performs the handshake\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  function empty () { };\n\t\n\t  Socket.prototype.handshake = function (fn) {\n\t    var self = this\n\t      , options = this.options;\n\t\n\t    function complete (data) {\n\t      if (data instanceof Error) {\n\t        self.connecting = false;\n\t        self.onError(data.message);\n\t      } else {\n\t        fn.apply(null, data.split(':'));\n\t      }\n\t    };\n\t\n\t    var url = [\n\t          'http' + (options.secure ? 's' : '') + ':/'\n\t        , options.host + ':' + options.port\n\t        , options.resource\n\t        , io.protocol\n\t        , io.util.query(this.options.query, 't=' + +new Date)\n\t      ].join('/');\n\t\n\t    if (this.isXDomain() && !io.util.ua.hasCORS) {\n\t      var insertAt = document.getElementsByTagName('script')[0]\n\t        , script = document.createElement('script');\n\t\n\t      script.src = url + '&jsonp=' + io.j.length;\n\t      insertAt.parentNode.insertBefore(script, insertAt);\n\t\n\t      io.j.push(function (data) {\n\t        complete(data);\n\t        script.parentNode.removeChild(script);\n\t      });\n\t    } else {\n\t      var xhr = io.util.request();\n\t\n\t      xhr.open('GET', url, true);\n\t      if (this.isXDomain()) {\n\t        xhr.withCredentials = true;\n\t      }\n\t      xhr.onreadystatechange = function () {\n\t        if (xhr.readyState == 4) {\n\t          xhr.onreadystatechange = empty;\n\t\n\t          if (xhr.status == 200) {\n\t            complete(xhr.responseText);\n\t          } else if (xhr.status == 403) {\n\t            self.onError(xhr.responseText);\n\t          } else {\n\t            self.connecting = false;            \n\t            !self.reconnecting && self.onError(xhr.responseText);\n\t          }\n\t        }\n\t      };\n\t      xhr.send(null);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Find an available transport based on the options supplied in the constructor.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.getTransport = function (override) {\n\t    var transports = override || this.transports, match;\n\t\n\t    for (var i = 0, transport; transport = transports[i]; i++) {\n\t      if (io.Transport[transport]\n\t        && io.Transport[transport].check(this)\n\t        && (!this.isXDomain() || io.Transport[transport].xdomainCheck(this))) {\n\t        return new io.Transport[transport](this, this.sessionid);\n\t      }\n\t    }\n\t\n\t    return null;\n\t  };\n\t\n\t  /**\n\t   * Connects to the server.\n\t   *\n\t   * @param {Function} [fn] Callback.\n\t   * @returns {io.Socket}\n\t   * @api public\n\t   */\n\t\n\t  Socket.prototype.connect = function (fn) {\n\t    if (this.connecting) {\n\t      return this;\n\t    }\n\t\n\t    var self = this;\n\t    self.connecting = true;\n\t    \n\t    this.handshake(function (sid, heartbeat, close, transports) {\n\t      self.sessionid = sid;\n\t      self.closeTimeout = close * 1000;\n\t      self.heartbeatTimeout = heartbeat * 1000;\n\t      if(!self.transports)\n\t          self.transports = self.origTransports = (transports ? io.util.intersect(\n\t              transports.split(',')\n\t            , self.options.transports\n\t          ) : self.options.transports);\n\t\n\t      self.setHeartbeatTimeout();\n\t\n\t      function connect (transports){\n\t        if (self.transport) self.transport.clearTimeouts();\n\t\n\t        self.transport = self.getTransport(transports);\n\t        if (!self.transport) return self.publish('connect_failed');\n\t\n\t        // once the transport is ready\n\t        self.transport.ready(self, function () {\n\t          self.connecting = true;\n\t          self.publish('connecting', self.transport.name);\n\t          self.transport.open();\n\t\n\t          if (self.options['connect timeout']) {\n\t            self.connectTimeoutTimer = setTimeout(function () {\n\t              if (!self.connected) {\n\t                self.connecting = false;\n\t\n\t                if (self.options['try multiple transports']) {\n\t                  var remaining = self.transports;\n\t\n\t                  while (remaining.length > 0 && remaining.splice(0,1)[0] !=\n\t                         self.transport.name) {}\n\t\n\t                    if (remaining.length){\n\t                      connect(remaining);\n\t                    } else {\n\t                      self.publish('connect_failed');\n\t                    }\n\t                }\n\t              }\n\t            }, self.options['connect timeout']);\n\t          }\n\t        });\n\t      }\n\t\n\t      connect(self.transports);\n\t\n\t      self.once('connect', function (){\n\t        clearTimeout(self.connectTimeoutTimer);\n\t\n\t        fn && typeof fn == 'function' && fn();\n\t      });\n\t    });\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Clears and sets a new heartbeat timeout using the value given by the\n\t   * server during the handshake.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.setHeartbeatTimeout = function () {\n\t    clearTimeout(this.heartbeatTimeoutTimer);\n\t    if(this.transport && !this.transport.heartbeats()) return;\n\t\n\t    var self = this;\n\t    this.heartbeatTimeoutTimer = setTimeout(function () {\n\t      self.transport.onClose();\n\t    }, this.heartbeatTimeout);\n\t  };\n\t\n\t  /**\n\t   * Sends a message.\n\t   *\n\t   * @param {Object} data packet.\n\t   * @returns {io.Socket}\n\t   * @api public\n\t   */\n\t\n\t  Socket.prototype.packet = function (data) {\n\t    if (this.connected && !this.doBuffer) {\n\t      this.transport.packet(data);\n\t    } else {\n\t      this.buffer.push(data);\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Sets buffer state\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.setBuffer = function (v) {\n\t    this.doBuffer = v;\n\t\n\t    if (!v && this.connected && this.buffer.length) {\n\t      if (!this.options['manualFlush']) {\n\t        this.flushBuffer();\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Flushes the buffer data over the wire.\n\t   * To be invoked manually when 'manualFlush' is set to true.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  Socket.prototype.flushBuffer = function() {\n\t    this.transport.payload(this.buffer);\n\t    this.buffer = [];\n\t  };\n\t  \n\t\n\t  /**\n\t   * Disconnect the established connect.\n\t   *\n\t   * @returns {io.Socket}\n\t   * @api public\n\t   */\n\t\n\t  Socket.prototype.disconnect = function () {\n\t    if (this.connected || this.connecting) {\n\t      if (this.open) {\n\t        this.of('').packet({ type: 'disconnect' });\n\t      }\n\t\n\t      // handle disconnection immediately\n\t      this.onDisconnect('booted');\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Disconnects the socket with a sync XHR.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.disconnectSync = function () {\n\t    // ensure disconnection\n\t    var xhr = io.util.request();\n\t    var uri = [\n\t        'http' + (this.options.secure ? 's' : '') + ':/'\n\t      , this.options.host + ':' + this.options.port\n\t      , this.options.resource\n\t      , io.protocol\n\t      , ''\n\t      , this.sessionid\n\t    ].join('/') + '/?disconnect=1';\n\t\n\t    xhr.open('GET', uri, false);\n\t    xhr.send(null);\n\t\n\t    // handle disconnection immediately\n\t    this.onDisconnect('booted');\n\t  };\n\t\n\t  /**\n\t   * Check if we need to use cross domain enabled transports. Cross domain would\n\t   * be a different port or different domain name.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.isXDomain = function () {\n\t\n\t    var port = global.location.port ||\n\t      ('https:' == global.location.protocol ? 443 : 80);\n\t\n\t    return this.options.host !== global.location.hostname \n\t      || this.options.port != port;\n\t  };\n\t\n\t  /**\n\t   * Called upon handshake.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.onConnect = function () {\n\t    if (!this.connected) {\n\t      this.connected = true;\n\t      this.connecting = false;\n\t      if (!this.doBuffer) {\n\t        // make sure to flush the buffer\n\t        this.setBuffer(false);\n\t      }\n\t      this.emit('connect');\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Called when the transport opens\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.onOpen = function () {\n\t    this.open = true;\n\t  };\n\t\n\t  /**\n\t   * Called when the transport closes.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.onClose = function () {\n\t    this.open = false;\n\t    clearTimeout(this.heartbeatTimeoutTimer);\n\t  };\n\t\n\t  /**\n\t   * Called when the transport first opens a connection\n\t   *\n\t   * @param text\n\t   */\n\t\n\t  Socket.prototype.onPacket = function (packet) {\n\t    this.of(packet.endpoint).onPacket(packet);\n\t  };\n\t\n\t  /**\n\t   * Handles an error.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.onError = function (err) {\n\t    if (err && err.advice) {\n\t      if (err.advice === 'reconnect' && (this.connected || this.connecting)) {\n\t        this.disconnect();\n\t        if (this.options.reconnect) {\n\t          this.reconnect();\n\t        }\n\t      }\n\t    }\n\t\n\t    this.publish('error', err && err.reason ? err.reason : err);\n\t  };\n\t\n\t  /**\n\t   * Called when the transport disconnects.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.onDisconnect = function (reason) {\n\t    var wasConnected = this.connected\n\t      , wasConnecting = this.connecting;\n\t\n\t    this.connected = false;\n\t    this.connecting = false;\n\t    this.open = false;\n\t\n\t    if (wasConnected || wasConnecting) {\n\t      this.transport.close();\n\t      this.transport.clearTimeouts();\n\t      if (wasConnected) {\n\t        this.publish('disconnect', reason);\n\t\n\t        if ('booted' != reason && this.options.reconnect && !this.reconnecting) {\n\t          this.reconnect();\n\t        }\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Called upon reconnection.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Socket.prototype.reconnect = function () {\n\t    this.reconnecting = true;\n\t    this.reconnectionAttempts = 0;\n\t    this.reconnectionDelay = this.options['reconnection delay'];\n\t\n\t    var self = this\n\t      , maxAttempts = this.options['max reconnection attempts']\n\t      , tryMultiple = this.options['try multiple transports']\n\t      , limit = this.options['reconnection limit'];\n\t\n\t    function reset () {\n\t      if (self.connected) {\n\t        for (var i in self.namespaces) {\n\t          if (self.namespaces.hasOwnProperty(i) && '' !== i) {\n\t              self.namespaces[i].packet({ type: 'connect' });\n\t          }\n\t        }\n\t        self.publish('reconnect', self.transport.name, self.reconnectionAttempts);\n\t      }\n\t\n\t      clearTimeout(self.reconnectionTimer);\n\t\n\t      self.removeListener('connect_failed', maybeReconnect);\n\t      self.removeListener('connect', maybeReconnect);\n\t\n\t      self.reconnecting = false;\n\t\n\t      delete self.reconnectionAttempts;\n\t      delete self.reconnectionDelay;\n\t      delete self.reconnectionTimer;\n\t      delete self.redoTransports;\n\t\n\t      self.options['try multiple transports'] = tryMultiple;\n\t    };\n\t\n\t    function maybeReconnect () {\n\t      if (!self.reconnecting) {\n\t        return;\n\t      }\n\t\n\t      if (self.connected) {\n\t        return reset();\n\t      };\n\t\n\t      if (self.connecting && self.reconnecting) {\n\t        return self.reconnectionTimer = setTimeout(maybeReconnect, 1000);\n\t      }\n\t\n\t      if (self.reconnectionAttempts++ >= maxAttempts) {\n\t        if (!self.redoTransports) {\n\t          self.on('connect_failed', maybeReconnect);\n\t          self.options['try multiple transports'] = true;\n\t          self.transports = self.origTransports;\n\t          self.transport = self.getTransport();\n\t          self.redoTransports = true;\n\t          self.connect();\n\t        } else {\n\t          self.publish('reconnect_failed');\n\t          reset();\n\t        }\n\t      } else {\n\t        if (self.reconnectionDelay < limit) {\n\t          self.reconnectionDelay *= 2; // exponential back off\n\t        }\n\t\n\t        self.connect();\n\t        self.publish('reconnecting', self.reconnectionDelay, self.reconnectionAttempts);\n\t        self.reconnectionTimer = setTimeout(maybeReconnect, self.reconnectionDelay);\n\t      }\n\t    };\n\t\n\t    this.options['try multiple transports'] = false;\n\t    this.reconnectionTimer = setTimeout(maybeReconnect, this.reconnectionDelay);\n\t\n\t    this.on('connect', maybeReconnect);\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.SocketNamespace = SocketNamespace;\n\t\n\t  /**\n\t   * Socket namespace constructor.\n\t   *\n\t   * @constructor\n\t   * @api public\n\t   */\n\t\n\t  function SocketNamespace (socket, name) {\n\t    this.socket = socket;\n\t    this.name = name || '';\n\t    this.flags = {};\n\t    this.json = new Flag(this, 'json');\n\t    this.ackPackets = 0;\n\t    this.acks = {};\n\t  };\n\t\n\t  /**\n\t   * Apply EventEmitter mixin.\n\t   */\n\t\n\t  io.util.mixin(SocketNamespace, io.EventEmitter);\n\t\n\t  /**\n\t   * Copies emit since we override it\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  SocketNamespace.prototype.$emit = io.EventEmitter.prototype.emit;\n\t\n\t  /**\n\t   * Creates a new namespace, by proxying the request to the socket. This\n\t   * allows us to use the synax as we do on the server.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  SocketNamespace.prototype.of = function () {\n\t    return this.socket.of.apply(this.socket, arguments);\n\t  };\n\t\n\t  /**\n\t   * Sends a packet.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  SocketNamespace.prototype.packet = function (packet) {\n\t    packet.endpoint = this.name;\n\t    this.socket.packet(packet);\n\t    this.flags = {};\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Sends a message\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  SocketNamespace.prototype.send = function (data, fn) {\n\t    var packet = {\n\t        type: this.flags.json ? 'json' : 'message'\n\t      , data: data\n\t    };\n\t\n\t    if ('function' == typeof fn) {\n\t      packet.id = ++this.ackPackets;\n\t      packet.ack = true;\n\t      this.acks[packet.id] = fn;\n\t    }\n\t\n\t    return this.packet(packet);\n\t  };\n\t\n\t  /**\n\t   * Emits an event\n\t   *\n\t   * @api public\n\t   */\n\t  \n\t  SocketNamespace.prototype.emit = function (name) {\n\t    var args = Array.prototype.slice.call(arguments, 1)\n\t      , lastArg = args[args.length - 1]\n\t      , packet = {\n\t            type: 'event'\n\t          , name: name\n\t        };\n\t\n\t    if ('function' == typeof lastArg) {\n\t      packet.id = ++this.ackPackets;\n\t      packet.ack = 'data';\n\t      this.acks[packet.id] = lastArg;\n\t      args = args.slice(0, args.length - 1);\n\t    }\n\t\n\t    packet.args = args;\n\t\n\t    return this.packet(packet);\n\t  };\n\t\n\t  /**\n\t   * Disconnects the namespace\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  SocketNamespace.prototype.disconnect = function () {\n\t    if (this.name === '') {\n\t      this.socket.disconnect();\n\t    } else {\n\t      this.packet({ type: 'disconnect' });\n\t      this.$emit('disconnect');\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Handles a packet\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  SocketNamespace.prototype.onPacket = function (packet) {\n\t    var self = this;\n\t\n\t    function ack () {\n\t      self.packet({\n\t          type: 'ack'\n\t        , args: io.util.toArray(arguments)\n\t        , ackId: packet.id\n\t      });\n\t    };\n\t\n\t    switch (packet.type) {\n\t      case 'connect':\n\t        this.$emit('connect');\n\t        break;\n\t\n\t      case 'disconnect':\n\t        if (this.name === '') {\n\t          this.socket.onDisconnect(packet.reason || 'booted');\n\t        } else {\n\t          this.$emit('disconnect', packet.reason);\n\t        }\n\t        break;\n\t\n\t      case 'message':\n\t      case 'json':\n\t        var params = ['message', packet.data];\n\t\n\t        if (packet.ack == 'data') {\n\t          params.push(ack);\n\t        } else if (packet.ack) {\n\t          this.packet({ type: 'ack', ackId: packet.id });\n\t        }\n\t\n\t        this.$emit.apply(this, params);\n\t        break;\n\t\n\t      case 'event':\n\t        var params = [packet.name].concat(packet.args);\n\t\n\t        if (packet.ack == 'data')\n\t          params.push(ack);\n\t\n\t        this.$emit.apply(this, params);\n\t        break;\n\t\n\t      case 'ack':\n\t        if (this.acks[packet.ackId]) {\n\t          this.acks[packet.ackId].apply(this, packet.args);\n\t          delete this.acks[packet.ackId];\n\t        }\n\t        break;\n\t\n\t      case 'error':\n\t        if (packet.advice){\n\t          this.socket.onError(packet);\n\t        } else {\n\t          if (packet.reason == 'unauthorized') {\n\t            this.$emit('connect_failed', packet.reason);\n\t          } else {\n\t            this.$emit('error', packet.reason);\n\t          }\n\t        }\n\t        break;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Flag interface.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  function Flag (nsp, name) {\n\t    this.namespace = nsp;\n\t    this.name = name;\n\t  };\n\t\n\t  /**\n\t   * Send a message\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  Flag.prototype.send = function () {\n\t    this.namespace.flags[this.name] = true;\n\t    this.namespace.send.apply(this.namespace, arguments);\n\t  };\n\t\n\t  /**\n\t   * Emit an event\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  Flag.prototype.emit = function () {\n\t    this.namespace.flags[this.name] = true;\n\t    this.namespace.emit.apply(this.namespace, arguments);\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io, global) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.websocket = WS;\n\t\n\t  /**\n\t   * The WebSocket transport uses the HTML5 WebSocket API to establish an\n\t   * persistent connection with the Socket.IO server. This transport will also\n\t   * be inherited by the FlashSocket fallback as it provides a API compatible\n\t   * polyfill for the WebSockets.\n\t   *\n\t   * @constructor\n\t   * @extends {io.Transport}\n\t   * @api public\n\t   */\n\t\n\t  function WS (socket) {\n\t    io.Transport.apply(this, arguments);\n\t  };\n\t\n\t  /**\n\t   * Inherits from Transport.\n\t   */\n\t\n\t  io.util.inherit(WS, io.Transport);\n\t\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  WS.prototype.name = 'websocket';\n\t\n\t  /**\n\t   * Initializes a new `WebSocket` connection with the Socket.IO server. We attach\n\t   * all the appropriate listeners to handle the responses from the server.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  WS.prototype.open = function () {\n\t    var query = io.util.query(this.socket.options.query)\n\t      , self = this\n\t      , Socket\n\t\n\t\n\t    if (!Socket) {\n\t      Socket = global.MozWebSocket || global.WebSocket;\n\t    }\n\t\n\t    this.websocket = new Socket(this.prepareUrl() + query);\n\t\n\t    this.websocket.onopen = function () {\n\t      self.onOpen();\n\t      self.socket.setBuffer(false);\n\t    };\n\t    this.websocket.onmessage = function (ev) {\n\t      self.onData(ev.data);\n\t    };\n\t    this.websocket.onclose = function () {\n\t      self.onClose();\n\t      self.socket.setBuffer(true);\n\t    };\n\t    this.websocket.onerror = function (e) {\n\t      self.onError(e);\n\t    };\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Send a message to the Socket.IO server. The message will automatically be\n\t   * encoded in the correct message format.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  // Do to a bug in the current IDevices browser, we need to wrap the send in a \n\t  // setTimeout, when they resume from sleeping the browser will crash if \n\t  // we don't allow the browser time to detect the socket has been closed\n\t  if (io.util.ua.iDevice) {\n\t    WS.prototype.send = function (data) {\n\t      var self = this;\n\t      setTimeout(function() {\n\t         self.websocket.send(data);\n\t      },0);\n\t      return this;\n\t    };\n\t  } else {\n\t    WS.prototype.send = function (data) {\n\t      this.websocket.send(data);\n\t      return this;\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Payload\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  WS.prototype.payload = function (arr) {\n\t    for (var i = 0, l = arr.length; i < l; i++) {\n\t      this.packet(arr[i]);\n\t    }\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Disconnect the established `WebSocket` connection.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  WS.prototype.close = function () {\n\t    this.websocket.close();\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Handle the errors that `WebSocket` might be giving when we\n\t   * are attempting to connect or send messages.\n\t   *\n\t   * @param {Error} e The error.\n\t   * @api private\n\t   */\n\t\n\t  WS.prototype.onError = function (e) {\n\t    this.socket.onError(e);\n\t  };\n\t\n\t  /**\n\t   * Returns the appropriate scheme for the URI generation.\n\t   *\n\t   * @api private\n\t   */\n\t  WS.prototype.scheme = function () {\n\t    return this.socket.options.secure ? 'wss' : 'ws';\n\t  };\n\t\n\t  /**\n\t   * Checks if the browser has support for native `WebSockets` and that\n\t   * it's not the polyfill created for the FlashSocket transport.\n\t   *\n\t   * @return {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  WS.check = function () {\n\t    return ('WebSocket' in global && !('__addTask' in WebSocket))\n\t          || 'MozWebSocket' in global;\n\t  };\n\t\n\t  /**\n\t   * Check if the `WebSocket` transport support cross domain communications.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  WS.xdomainCheck = function () {\n\t    return true;\n\t  };\n\t\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.transports.push('websocket');\n\t\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.flashsocket = Flashsocket;\n\t\n\t  /**\n\t   * The FlashSocket transport. This is a API wrapper for the HTML5 WebSocket\n\t   * specification. It uses a .swf file to communicate with the server. If you want\n\t   * to serve the .swf file from a other server than where the Socket.IO script is\n\t   * coming from you need to use the insecure version of the .swf. More information\n\t   * about this can be found on the github page.\n\t   *\n\t   * @constructor\n\t   * @extends {io.Transport.websocket}\n\t   * @api public\n\t   */\n\t\n\t  function Flashsocket () {\n\t    io.Transport.websocket.apply(this, arguments);\n\t  };\n\t\n\t  /**\n\t   * Inherits from Transport.\n\t   */\n\t\n\t  io.util.inherit(Flashsocket, io.Transport.websocket);\n\t\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.prototype.name = 'flashsocket';\n\t\n\t  /**\n\t   * Disconnect the established `FlashSocket` connection. This is done by adding a \n\t   * new task to the FlashSocket. The rest will be handled off by the `WebSocket` \n\t   * transport.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.prototype.open = function () {\n\t    var self = this\n\t      , args = arguments;\n\t\n\t    WebSocket.__addTask(function () {\n\t      io.Transport.websocket.prototype.open.apply(self, args);\n\t    });\n\t    return this;\n\t  };\n\t  \n\t  /**\n\t   * Sends a message to the Socket.IO server. This is done by adding a new\n\t   * task to the FlashSocket. The rest will be handled off by the `WebSocket` \n\t   * transport.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.prototype.send = function () {\n\t    var self = this, args = arguments;\n\t    WebSocket.__addTask(function () {\n\t      io.Transport.websocket.prototype.send.apply(self, args);\n\t    });\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Disconnects the established `FlashSocket` connection.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.prototype.close = function () {\n\t    WebSocket.__tasks.length = 0;\n\t    io.Transport.websocket.prototype.close.call(this);\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * The WebSocket fall back needs to append the flash container to the body\n\t   * element, so we need to make sure we have access to it. Or defer the call\n\t   * until we are sure there is a body element.\n\t   *\n\t   * @param {Socket} socket The socket instance that needs a transport\n\t   * @param {Function} fn The callback\n\t   * @api private\n\t   */\n\t\n\t  Flashsocket.prototype.ready = function (socket, fn) {\n\t    function init () {\n\t      var options = socket.options\n\t        , port = options['flash policy port']\n\t        , path = [\n\t              'http' + (options.secure ? 's' : '') + ':/'\n\t            , options.host + ':' + options.port\n\t            , options.resource\n\t            , 'static/flashsocket'\n\t            , 'WebSocketMain' + (socket.isXDomain() ? 'Insecure' : '') + '.swf'\n\t          ];\n\t\n\t      // Only start downloading the swf file when the checked that this browser\n\t      // actually supports it\n\t      if (!Flashsocket.loaded) {\n\t        if (typeof WEB_SOCKET_SWF_LOCATION === 'undefined') {\n\t          // Set the correct file based on the XDomain settings\n\t          WEB_SOCKET_SWF_LOCATION = path.join('/');\n\t        }\n\t\n\t        if (port !== 843) {\n\t          WebSocket.loadFlashPolicyFile('xmlsocket://' + options.host + ':' + port);\n\t        }\n\t\n\t        WebSocket.__initialize();\n\t        Flashsocket.loaded = true;\n\t      }\n\t\n\t      fn.call(self);\n\t    }\n\t\n\t    var self = this;\n\t    if (document.body) return init();\n\t\n\t    io.util.load(init);\n\t  };\n\t\n\t  /**\n\t   * Check if the FlashSocket transport is supported as it requires that the Adobe\n\t   * Flash Player plug-in version `10.0.0` or greater is installed. And also check if\n\t   * the polyfill is correctly loaded.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.check = function () {\n\t    if (\n\t        typeof WebSocket == 'undefined'\n\t      || !('__initialize' in WebSocket) || !swfobject\n\t    ) return false;\n\t\n\t    return swfobject.getFlashPlayerVersion().major >= 10;\n\t  };\n\t\n\t  /**\n\t   * Check if the FlashSocket transport can be used as cross domain / cross origin \n\t   * transport. Because we can't see which type (secure or insecure) of .swf is used\n\t   * we will just return true.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  Flashsocket.xdomainCheck = function () {\n\t    return true;\n\t  };\n\t\n\t  /**\n\t   * Disable AUTO_INITIALIZATION\n\t   */\n\t\n\t  if (typeof window != 'undefined') {\n\t    WEB_SOCKET_DISABLE_AUTO_INITIALIZATION = true;\n\t  }\n\t\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.transports.push('flashsocket');\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t/*\tSWFObject v2.2 <http://code.google.com/p/swfobject/> \n\t\tis released under the MIT License <http://www.opensource.org/licenses/mit-license.php> \n\t*/\n\tif ('undefined' != typeof window) {\n\tvar swfobject=function(){var D=\"undefined\",r=\"object\",S=\"Shockwave Flash\",W=\"ShockwaveFlash.ShockwaveFlash\",q=\"application/x-shockwave-flash\",R=\"SWFObjectExprInst\",x=\"onreadystatechange\",O=window,j=document,t=navigator,T=false,U=[h],o=[],N=[],I=[],l,Q,E,B,J=false,a=false,n,G,m=true,M=function(){var aa=typeof j.getElementById!=D&&typeof j.getElementsByTagName!=D&&typeof j.createElement!=D,ah=t.userAgent.toLowerCase(),Y=t.platform.toLowerCase(),ae=Y?/win/.test(Y):/win/.test(ah),ac=Y?/mac/.test(Y):/mac/.test(ah),af=/webkit/.test(ah)?parseFloat(ah.replace(/^.*webkit\\/(\\d+(\\.\\d+)?).*$/,\"$1\")):false,X=!+\"\\v1\",ag=[0,0,0],ab=null;if(typeof t.plugins!=D&&typeof t.plugins[S]==r){ab=t.plugins[S].description;if(ab&&!(typeof t.mimeTypes!=D&&t.mimeTypes[q]&&!t.mimeTypes[q].enabledPlugin)){T=true;X=false;ab=ab.replace(/^.*\\s+(\\S+\\s+\\S+$)/,\"$1\");ag[0]=parseInt(ab.replace(/^(.*)\\..*$/,\"$1\"),10);ag[1]=parseInt(ab.replace(/^.*\\.(.*)\\s.*$/,\"$1\"),10);ag[2]=/[a-zA-Z]/.test(ab)?parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/,\"$1\"),10):0}}else{if(typeof O[(['Active'].concat('Object').join('X'))]!=D){try{var ad=new window[(['Active'].concat('Object').join('X'))](W);if(ad){ab=ad.GetVariable(\"$version\");if(ab){X=true;ab=ab.split(\" \")[1].split(\",\");ag=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}}catch(Z){}}}return{w3:aa,pv:ag,wk:af,ie:X,win:ae,mac:ac}}(),k=function(){if(!M.w3){return}if((typeof j.readyState!=D&&j.readyState==\"complete\")||(typeof j.readyState==D&&(j.getElementsByTagName(\"body\")[0]||j.body))){f()}if(!J){if(typeof j.addEventListener!=D){j.addEventListener(\"DOMContentLoaded\",f,false)}if(M.ie&&M.win){j.attachEvent(x,function(){if(j.readyState==\"complete\"){j.detachEvent(x,arguments.callee);f()}});if(O==top){(function(){if(J){return}try{j.documentElement.doScroll(\"left\")}catch(X){setTimeout(arguments.callee,0);return}f()})()}}if(M.wk){(function(){if(J){return}if(!/loaded|complete/.test(j.readyState)){setTimeout(arguments.callee,0);return}f()})()}s(f)}}();function f(){if(J){return}try{var Z=j.getElementsByTagName(\"body\")[0].appendChild(C(\"span\"));Z.parentNode.removeChild(Z)}catch(aa){return}J=true;var X=U.length;for(var Y=0;Y<X;Y++){U[Y]()}}function K(X){if(J){X()}else{U[U.length]=X}}function s(Y){if(typeof O.addEventListener!=D){O.addEventListener(\"load\",Y,false)}else{if(typeof j.addEventListener!=D){j.addEventListener(\"load\",Y,false)}else{if(typeof O.attachEvent!=D){i(O,\"onload\",Y)}else{if(typeof O.onload==\"function\"){var X=O.onload;O.onload=function(){X();Y()}}else{O.onload=Y}}}}}function h(){if(T){V()}else{H()}}function V(){var X=j.getElementsByTagName(\"body\")[0];var aa=C(r);aa.setAttribute(\"type\",q);var Z=X.appendChild(aa);if(Z){var Y=0;(function(){if(typeof Z.GetVariable!=D){var ab=Z.GetVariable(\"$version\");if(ab){ab=ab.split(\" \")[1].split(\",\");M.pv=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}else{if(Y<10){Y++;setTimeout(arguments.callee,10);return}}X.removeChild(aa);Z=null;H()})()}else{H()}}function H(){var ag=o.length;if(ag>0){for(var af=0;af<ag;af++){var Y=o[af].id;var ab=o[af].callbackFn;var aa={success:false,id:Y};if(M.pv[0]>0){var ae=c(Y);if(ae){if(F(o[af].swfVersion)&&!(M.wk&&M.wk<312)){w(Y,true);if(ab){aa.success=true;aa.ref=z(Y);ab(aa)}}else{if(o[af].expressInstall&&A()){var ai={};ai.data=o[af].expressInstall;ai.width=ae.getAttribute(\"width\")||\"0\";ai.height=ae.getAttribute(\"height\")||\"0\";if(ae.getAttribute(\"class\")){ai.styleclass=ae.getAttribute(\"class\")}if(ae.getAttribute(\"align\")){ai.align=ae.getAttribute(\"align\")}var ah={};var X=ae.getElementsByTagName(\"param\");var ac=X.length;for(var ad=0;ad<ac;ad++){if(X[ad].getAttribute(\"name\").toLowerCase()!=\"movie\"){ah[X[ad].getAttribute(\"name\")]=X[ad].getAttribute(\"value\")}}P(ai,ah,Y,ab)}else{p(ae);if(ab){ab(aa)}}}}}else{w(Y,true);if(ab){var Z=z(Y);if(Z&&typeof Z.SetVariable!=D){aa.success=true;aa.ref=Z}ab(aa)}}}}}function z(aa){var X=null;var Y=c(aa);if(Y&&Y.nodeName==\"OBJECT\"){if(typeof Y.SetVariable!=D){X=Y}else{var Z=Y.getElementsByTagName(r)[0];if(Z){X=Z}}}return X}function A(){return !a&&F(\"6.0.65\")&&(M.win||M.mac)&&!(M.wk&&M.wk<312)}function P(aa,ab,X,Z){a=true;E=Z||null;B={success:false,id:X};var ae=c(X);if(ae){if(ae.nodeName==\"OBJECT\"){l=g(ae);Q=null}else{l=ae;Q=X}aa.id=R;if(typeof aa.width==D||(!/%$/.test(aa.width)&&parseInt(aa.width,10)<310)){aa.width=\"310\"}if(typeof aa.height==D||(!/%$/.test(aa.height)&&parseInt(aa.height,10)<137)){aa.height=\"137\"}j.title=j.title.slice(0,47)+\" - Flash Player Installation\";var ad=M.ie&&M.win?(['Active'].concat('').join('X')):\"PlugIn\",ac=\"MMredirectURL=\"+O.location.toString().replace(/&/g,\"%26\")+\"&MMplayerType=\"+ad+\"&MMdoctitle=\"+j.title;if(typeof ab.flashvars!=D){ab.flashvars+=\"&\"+ac}else{ab.flashvars=ac}if(M.ie&&M.win&&ae.readyState!=4){var Y=C(\"div\");X+=\"SWFObjectNew\";Y.setAttribute(\"id\",X);ae.parentNode.insertBefore(Y,ae);ae.style.display=\"none\";(function(){if(ae.readyState==4){ae.parentNode.removeChild(ae)}else{setTimeout(arguments.callee,10)}})()}u(aa,ab,X)}}function p(Y){if(M.ie&&M.win&&Y.readyState!=4){var X=C(\"div\");Y.parentNode.insertBefore(X,Y);X.parentNode.replaceChild(g(Y),X);Y.style.display=\"none\";(function(){if(Y.readyState==4){Y.parentNode.removeChild(Y)}else{setTimeout(arguments.callee,10)}})()}else{Y.parentNode.replaceChild(g(Y),Y)}}function g(ab){var aa=C(\"div\");if(M.win&&M.ie){aa.innerHTML=ab.innerHTML}else{var Y=ab.getElementsByTagName(r)[0];if(Y){var ad=Y.childNodes;if(ad){var X=ad.length;for(var Z=0;Z<X;Z++){if(!(ad[Z].nodeType==1&&ad[Z].nodeName==\"PARAM\")&&!(ad[Z].nodeType==8)){aa.appendChild(ad[Z].cloneNode(true))}}}}}return aa}function u(ai,ag,Y){var X,aa=c(Y);if(M.wk&&M.wk<312){return X}if(aa){if(typeof ai.id==D){ai.id=Y}if(M.ie&&M.win){var ah=\"\";for(var ae in ai){if(ai[ae]!=Object.prototype[ae]){if(ae.toLowerCase()==\"data\"){ag.movie=ai[ae]}else{if(ae.toLowerCase()==\"styleclass\"){ah+=' class=\"'+ai[ae]+'\"'}else{if(ae.toLowerCase()!=\"classid\"){ah+=\" \"+ae+'=\"'+ai[ae]+'\"'}}}}}var af=\"\";for(var ad in ag){if(ag[ad]!=Object.prototype[ad]){af+='<param name=\"'+ad+'\" value=\"'+ag[ad]+'\" />'}}aa.outerHTML='<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"'+ah+\">\"+af+\"</object>\";N[N.length]=ai.id;X=c(ai.id)}else{var Z=C(r);Z.setAttribute(\"type\",q);for(var ac in ai){if(ai[ac]!=Object.prototype[ac]){if(ac.toLowerCase()==\"styleclass\"){Z.setAttribute(\"class\",ai[ac])}else{if(ac.toLowerCase()!=\"classid\"){Z.setAttribute(ac,ai[ac])}}}}for(var ab in ag){if(ag[ab]!=Object.prototype[ab]&&ab.toLowerCase()!=\"movie\"){e(Z,ab,ag[ab])}}aa.parentNode.replaceChild(Z,aa);X=Z}}return X}function e(Z,X,Y){var aa=C(\"param\");aa.setAttribute(\"name\",X);aa.setAttribute(\"value\",Y);Z.appendChild(aa)}function y(Y){var X=c(Y);if(X&&X.nodeName==\"OBJECT\"){if(M.ie&&M.win){X.style.display=\"none\";(function(){if(X.readyState==4){b(Y)}else{setTimeout(arguments.callee,10)}})()}else{X.parentNode.removeChild(X)}}}function b(Z){var Y=c(Z);if(Y){for(var X in Y){if(typeof Y[X]==\"function\"){Y[X]=null}}Y.parentNode.removeChild(Y)}}function c(Z){var X=null;try{X=j.getElementById(Z)}catch(Y){}return X}function C(X){return j.createElement(X)}function i(Z,X,Y){Z.attachEvent(X,Y);I[I.length]=[Z,X,Y]}function F(Z){var Y=M.pv,X=Z.split(\".\");X[0]=parseInt(X[0],10);X[1]=parseInt(X[1],10)||0;X[2]=parseInt(X[2],10)||0;return(Y[0]>X[0]||(Y[0]==X[0]&&Y[1]>X[1])||(Y[0]==X[0]&&Y[1]==X[1]&&Y[2]>=X[2]))?true:false}function v(ac,Y,ad,ab){if(M.ie&&M.mac){return}var aa=j.getElementsByTagName(\"head\")[0];if(!aa){return}var X=(ad&&typeof ad==\"string\")?ad:\"screen\";if(ab){n=null;G=null}if(!n||G!=X){var Z=C(\"style\");Z.setAttribute(\"type\",\"text/css\");Z.setAttribute(\"media\",X);n=aa.appendChild(Z);if(M.ie&&M.win&&typeof j.styleSheets!=D&&j.styleSheets.length>0){n=j.styleSheets[j.styleSheets.length-1]}G=X}if(M.ie&&M.win){if(n&&typeof n.addRule==r){n.addRule(ac,Y)}}else{if(n&&typeof j.createTextNode!=D){n.appendChild(j.createTextNode(ac+\" {\"+Y+\"}\"))}}}function w(Z,X){if(!m){return}var Y=X?\"visible\":\"hidden\";if(J&&c(Z)){c(Z).style.visibility=Y}else{v(\"#\"+Z,\"visibility:\"+Y)}}function L(Y){var Z=/[\\\\\\\"<>\\.;]/;var X=Z.exec(Y)!=null;return X&&typeof encodeURIComponent!=D?encodeURIComponent(Y):Y}var d=function(){if(M.ie&&M.win){window.attachEvent(\"onunload\",function(){var ac=I.length;for(var ab=0;ab<ac;ab++){I[ab][0].detachEvent(I[ab][1],I[ab][2])}var Z=N.length;for(var aa=0;aa<Z;aa++){y(N[aa])}for(var Y in M){M[Y]=null}M=null;for(var X in swfobject){swfobject[X]=null}swfobject=null})}}();return{registerObject:function(ab,X,aa,Z){if(M.w3&&ab&&X){var Y={};Y.id=ab;Y.swfVersion=X;Y.expressInstall=aa;Y.callbackFn=Z;o[o.length]=Y;w(ab,false)}else{if(Z){Z({success:false,id:ab})}}},getObjectById:function(X){if(M.w3){return z(X)}},embedSWF:function(ab,ah,ae,ag,Y,aa,Z,ad,af,ac){var X={success:false,id:ah};if(M.w3&&!(M.wk&&M.wk<312)&&ab&&ah&&ae&&ag&&Y){w(ah,false);K(function(){ae+=\"\";ag+=\"\";var aj={};if(af&&typeof af===r){for(var al in af){aj[al]=af[al]}}aj.data=ab;aj.width=ae;aj.height=ag;var am={};if(ad&&typeof ad===r){for(var ak in ad){am[ak]=ad[ak]}}if(Z&&typeof Z===r){for(var ai in Z){if(typeof am.flashvars!=D){am.flashvars+=\"&\"+ai+\"=\"+Z[ai]}else{am.flashvars=ai+\"=\"+Z[ai]}}}if(F(Y)){var an=u(aj,am,ah);if(aj.id==ah){w(ah,true)}X.success=true;X.ref=an}else{if(aa&&A()){aj.data=aa;P(aj,am,ah,ac);return}else{w(ah,true)}}if(ac){ac(X)}})}else{if(ac){ac(X)}}},switchOffAutoHideShow:function(){m=false},ua:M,getFlashPlayerVersion:function(){return{major:M.pv[0],minor:M.pv[1],release:M.pv[2]}},hasFlashPlayerVersion:F,createSWF:function(Z,Y,X){if(M.w3){return u(Z,Y,X)}else{return undefined}},showExpressInstall:function(Z,aa,X,Y){if(M.w3&&A()){P(Z,aa,X,Y)}},removeSWF:function(X){if(M.w3){y(X)}},createCSS:function(aa,Z,Y,X){if(M.w3){v(aa,Z,Y,X)}},addDomLoadEvent:K,addLoadEvent:s,getQueryParamValue:function(aa){var Z=j.location.search||j.location.hash;if(Z){if(/\\?/.test(Z)){Z=Z.split(\"?\")[1]}if(aa==null){return L(Z)}var Y=Z.split(\"&\");for(var X=0;X<Y.length;X++){if(Y[X].substring(0,Y[X].indexOf(\"=\"))==aa){return L(Y[X].substring((Y[X].indexOf(\"=\")+1)))}}}return\"\"},expressInstallCallback:function(){if(a){var X=c(R);if(X&&l){X.parentNode.replaceChild(l,X);if(Q){w(Q,true);if(M.ie&&M.win){l.style.display=\"block\"}}if(E){E(B)}}a=false}}}}();\n\t}\n\t// Copyright: Hiroshi Ichikawa <http://gimite.net/en/>\n\t// License: New BSD License\n\t// Reference: http://dev.w3.org/html5/websockets/\n\t// Reference: http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol\n\t\n\t(function() {\n\t  \n\t  if ('undefined' == typeof window || window.WebSocket) return;\n\t\n\t  var console = window.console;\n\t  if (!console || !console.log || !console.error) {\n\t    console = {log: function(){ }, error: function(){ }};\n\t  }\n\t  \n\t  if (!swfobject.hasFlashPlayerVersion(\"10.0.0\")) {\n\t    console.error(\"Flash Player >= 10.0.0 is required.\");\n\t    return;\n\t  }\n\t  if (location.protocol == \"file:\") {\n\t    console.error(\n\t      \"WARNING: web-socket-js doesn't work in file:///... URL \" +\n\t      \"unless you set Flash Security Settings properly. \" +\n\t      \"Open the page via Web server i.e. http://...\");\n\t  }\n\t\n\t  /**\n\t   * This class represents a faux web socket.\n\t   * @param {string} url\n\t   * @param {array or string} protocols\n\t   * @param {string} proxyHost\n\t   * @param {int} proxyPort\n\t   * @param {string} headers\n\t   */\n\t  WebSocket = function(url, protocols, proxyHost, proxyPort, headers) {\n\t    var self = this;\n\t    self.__id = WebSocket.__nextId++;\n\t    WebSocket.__instances[self.__id] = self;\n\t    self.readyState = WebSocket.CONNECTING;\n\t    self.bufferedAmount = 0;\n\t    self.__events = {};\n\t    if (!protocols) {\n\t      protocols = [];\n\t    } else if (typeof protocols == \"string\") {\n\t      protocols = [protocols];\n\t    }\n\t    // Uses setTimeout() to make sure __createFlash() runs after the caller sets ws.onopen etc.\n\t    // Otherwise, when onopen fires immediately, onopen is called before it is set.\n\t    setTimeout(function() {\n\t      WebSocket.__addTask(function() {\n\t        WebSocket.__flash.create(\n\t            self.__id, url, protocols, proxyHost || null, proxyPort || 0, headers || null);\n\t      });\n\t    }, 0);\n\t  };\n\t\n\t  /**\n\t   * Send data to the web socket.\n\t   * @param {string} data  The data to send to the socket.\n\t   * @return {boolean}  True for success, false for failure.\n\t   */\n\t  WebSocket.prototype.send = function(data) {\n\t    if (this.readyState == WebSocket.CONNECTING) {\n\t      throw \"INVALID_STATE_ERR: Web Socket connection has not been established\";\n\t    }\n\t    // We use encodeURIComponent() here, because FABridge doesn't work if\n\t    // the argument includes some characters. We don't use escape() here\n\t    // because of this:\n\t    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Functions#escape_and_unescape_Functions\n\t    // But it looks decodeURIComponent(encodeURIComponent(s)) doesn't\n\t    // preserve all Unicode characters either e.g. \"\\uffff\" in Firefox.\n\t    // Note by wtritch: Hopefully this will not be necessary using ExternalInterface.  Will require\n\t    // additional testing.\n\t    var result = WebSocket.__flash.send(this.__id, encodeURIComponent(data));\n\t    if (result < 0) { // success\n\t      return true;\n\t    } else {\n\t      this.bufferedAmount += result;\n\t      return false;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Close this web socket gracefully.\n\t   */\n\t  WebSocket.prototype.close = function() {\n\t    if (this.readyState == WebSocket.CLOSED || this.readyState == WebSocket.CLOSING) {\n\t      return;\n\t    }\n\t    this.readyState = WebSocket.CLOSING;\n\t    WebSocket.__flash.close(this.__id);\n\t  };\n\t\n\t  /**\n\t   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n\t   *\n\t   * @param {string} type\n\t   * @param {function} listener\n\t   * @param {boolean} useCapture\n\t   * @return void\n\t   */\n\t  WebSocket.prototype.addEventListener = function(type, listener, useCapture) {\n\t    if (!(type in this.__events)) {\n\t      this.__events[type] = [];\n\t    }\n\t    this.__events[type].push(listener);\n\t  };\n\t\n\t  /**\n\t   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n\t   *\n\t   * @param {string} type\n\t   * @param {function} listener\n\t   * @param {boolean} useCapture\n\t   * @return void\n\t   */\n\t  WebSocket.prototype.removeEventListener = function(type, listener, useCapture) {\n\t    if (!(type in this.__events)) return;\n\t    var events = this.__events[type];\n\t    for (var i = events.length - 1; i >= 0; --i) {\n\t      if (events[i] === listener) {\n\t        events.splice(i, 1);\n\t        break;\n\t      }\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n\t   *\n\t   * @param {Event} event\n\t   * @return void\n\t   */\n\t  WebSocket.prototype.dispatchEvent = function(event) {\n\t    var events = this.__events[event.type] || [];\n\t    for (var i = 0; i < events.length; ++i) {\n\t      events[i](event);\n\t    }\n\t    var handler = this[\"on\" + event.type];\n\t    if (handler) handler(event);\n\t  };\n\t\n\t  /**\n\t   * Handles an event from Flash.\n\t   * @param {Object} flashEvent\n\t   */\n\t  WebSocket.prototype.__handleEvent = function(flashEvent) {\n\t    if (\"readyState\" in flashEvent) {\n\t      this.readyState = flashEvent.readyState;\n\t    }\n\t    if (\"protocol\" in flashEvent) {\n\t      this.protocol = flashEvent.protocol;\n\t    }\n\t    \n\t    var jsEvent;\n\t    if (flashEvent.type == \"open\" || flashEvent.type == \"error\") {\n\t      jsEvent = this.__createSimpleEvent(flashEvent.type);\n\t    } else if (flashEvent.type == \"close\") {\n\t      // TODO implement jsEvent.wasClean\n\t      jsEvent = this.__createSimpleEvent(\"close\");\n\t    } else if (flashEvent.type == \"message\") {\n\t      var data = decodeURIComponent(flashEvent.message);\n\t      jsEvent = this.__createMessageEvent(\"message\", data);\n\t    } else {\n\t      throw \"unknown event type: \" + flashEvent.type;\n\t    }\n\t    \n\t    this.dispatchEvent(jsEvent);\n\t  };\n\t  \n\t  WebSocket.prototype.__createSimpleEvent = function(type) {\n\t    if (document.createEvent && window.Event) {\n\t      var event = document.createEvent(\"Event\");\n\t      event.initEvent(type, false, false);\n\t      return event;\n\t    } else {\n\t      return {type: type, bubbles: false, cancelable: false};\n\t    }\n\t  };\n\t  \n\t  WebSocket.prototype.__createMessageEvent = function(type, data) {\n\t    if (document.createEvent && window.MessageEvent && !window.opera) {\n\t      var event = document.createEvent(\"MessageEvent\");\n\t      event.initMessageEvent(\"message\", false, false, data, null, null, window, null);\n\t      return event;\n\t    } else {\n\t      // IE and Opera, the latter one truncates the data parameter after any 0x00 bytes.\n\t      return {type: type, data: data, bubbles: false, cancelable: false};\n\t    }\n\t  };\n\t  \n\t  /**\n\t   * Define the WebSocket readyState enumeration.\n\t   */\n\t  WebSocket.CONNECTING = 0;\n\t  WebSocket.OPEN = 1;\n\t  WebSocket.CLOSING = 2;\n\t  WebSocket.CLOSED = 3;\n\t\n\t  WebSocket.__flash = null;\n\t  WebSocket.__instances = {};\n\t  WebSocket.__tasks = [];\n\t  WebSocket.__nextId = 0;\n\t  \n\t  /**\n\t   * Load a new flash security policy file.\n\t   * @param {string} url\n\t   */\n\t  WebSocket.loadFlashPolicyFile = function(url){\n\t    WebSocket.__addTask(function() {\n\t      WebSocket.__flash.loadManualPolicyFile(url);\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Loads WebSocketMain.swf and creates WebSocketMain object in Flash.\n\t   */\n\t  WebSocket.__initialize = function() {\n\t    if (WebSocket.__flash) return;\n\t    \n\t    if (WebSocket.__swfLocation) {\n\t      // For backword compatibility.\n\t      window.WEB_SOCKET_SWF_LOCATION = WebSocket.__swfLocation;\n\t    }\n\t    if (!window.WEB_SOCKET_SWF_LOCATION) {\n\t      console.error(\"[WebSocket] set WEB_SOCKET_SWF_LOCATION to location of WebSocketMain.swf\");\n\t      return;\n\t    }\n\t    var container = document.createElement(\"div\");\n\t    container.id = \"webSocketContainer\";\n\t    // Hides Flash box. We cannot use display: none or visibility: hidden because it prevents\n\t    // Flash from loading at least in IE. So we move it out of the screen at (-100, -100).\n\t    // But this even doesn't work with Flash Lite (e.g. in Droid Incredible). So with Flash\n\t    // Lite, we put it at (0, 0). This shows 1x1 box visible at left-top corner but this is\n\t    // the best we can do as far as we know now.\n\t    container.style.position = \"absolute\";\n\t    if (WebSocket.__isFlashLite()) {\n\t      container.style.left = \"0px\";\n\t      container.style.top = \"0px\";\n\t    } else {\n\t      container.style.left = \"-100px\";\n\t      container.style.top = \"-100px\";\n\t    }\n\t    var holder = document.createElement(\"div\");\n\t    holder.id = \"webSocketFlash\";\n\t    container.appendChild(holder);\n\t    document.body.appendChild(container);\n\t    // See this article for hasPriority:\n\t    // http://help.adobe.com/en_US/as3/mobile/WS4bebcd66a74275c36cfb8137124318eebc6-7ffd.html\n\t    swfobject.embedSWF(\n\t      WEB_SOCKET_SWF_LOCATION,\n\t      \"webSocketFlash\",\n\t      \"1\" /* width */,\n\t      \"1\" /* height */,\n\t      \"10.0.0\" /* SWF version */,\n\t      null,\n\t      null,\n\t      {hasPriority: true, swliveconnect : true, allowScriptAccess: \"always\"},\n\t      null,\n\t      function(e) {\n\t        if (!e.success) {\n\t          console.error(\"[WebSocket] swfobject.embedSWF failed\");\n\t        }\n\t      });\n\t  };\n\t  \n\t  /**\n\t   * Called by Flash to notify JS that it's fully loaded and ready\n\t   * for communication.\n\t   */\n\t  WebSocket.__onFlashInitialized = function() {\n\t    // We need to set a timeout here to avoid round-trip calls\n\t    // to flash during the initialization process.\n\t    setTimeout(function() {\n\t      WebSocket.__flash = document.getElementById(\"webSocketFlash\");\n\t      WebSocket.__flash.setCallerUrl(location.href);\n\t      WebSocket.__flash.setDebug(!!window.WEB_SOCKET_DEBUG);\n\t      for (var i = 0; i < WebSocket.__tasks.length; ++i) {\n\t        WebSocket.__tasks[i]();\n\t      }\n\t      WebSocket.__tasks = [];\n\t    }, 0);\n\t  };\n\t  \n\t  /**\n\t   * Called by Flash to notify WebSockets events are fired.\n\t   */\n\t  WebSocket.__onFlashEvent = function() {\n\t    setTimeout(function() {\n\t      try {\n\t        // Gets events using receiveEvents() instead of getting it from event object\n\t        // of Flash event. This is to make sure to keep message order.\n\t        // It seems sometimes Flash events don't arrive in the same order as they are sent.\n\t        var events = WebSocket.__flash.receiveEvents();\n\t        for (var i = 0; i < events.length; ++i) {\n\t          WebSocket.__instances[events[i].webSocketId].__handleEvent(events[i]);\n\t        }\n\t      } catch (e) {\n\t        console.error(e);\n\t      }\n\t    }, 0);\n\t    return true;\n\t  };\n\t  \n\t  // Called by Flash.\n\t  WebSocket.__log = function(message) {\n\t    console.log(decodeURIComponent(message));\n\t  };\n\t  \n\t  // Called by Flash.\n\t  WebSocket.__error = function(message) {\n\t    console.error(decodeURIComponent(message));\n\t  };\n\t  \n\t  WebSocket.__addTask = function(task) {\n\t    if (WebSocket.__flash) {\n\t      task();\n\t    } else {\n\t      WebSocket.__tasks.push(task);\n\t    }\n\t  };\n\t  \n\t  /**\n\t   * Test if the browser is running flash lite.\n\t   * @return {boolean} True if flash lite is running, false otherwise.\n\t   */\n\t  WebSocket.__isFlashLite = function() {\n\t    if (!window.navigator || !window.navigator.mimeTypes) {\n\t      return false;\n\t    }\n\t    var mimeType = window.navigator.mimeTypes[\"application/x-shockwave-flash\"];\n\t    if (!mimeType || !mimeType.enabledPlugin || !mimeType.enabledPlugin.filename) {\n\t      return false;\n\t    }\n\t    return mimeType.enabledPlugin.filename.match(/flashlite/i) ? true : false;\n\t  };\n\t  \n\t  if (!window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION) {\n\t    if (window.addEventListener) {\n\t      window.addEventListener(\"load\", function(){\n\t        WebSocket.__initialize();\n\t      }, false);\n\t    } else {\n\t      window.attachEvent(\"onload\", function(){\n\t        WebSocket.__initialize();\n\t      });\n\t    }\n\t  }\n\t  \n\t})();\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io, global) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  exports.XHR = XHR;\n\t\n\t  /**\n\t   * XHR constructor\n\t   *\n\t   * @costructor\n\t   * @api public\n\t   */\n\t\n\t  function XHR (socket) {\n\t    if (!socket) return;\n\t\n\t    io.Transport.apply(this, arguments);\n\t    this.sendBuffer = [];\n\t  };\n\t\n\t  /**\n\t   * Inherits from Transport.\n\t   */\n\t\n\t  io.util.inherit(XHR, io.Transport);\n\t\n\t  /**\n\t   * Establish a connection\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  XHR.prototype.open = function () {\n\t    this.socket.setBuffer(false);\n\t    this.onOpen();\n\t    this.get();\n\t\n\t    // we need to make sure the request succeeds since we have no indication\n\t    // whether the request opened or not until it succeeded.\n\t    this.setCloseTimeout();\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Check if we need to send data to the Socket.IO server, if we have data in our\n\t   * buffer we encode it and forward it to the `post` method.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  XHR.prototype.payload = function (payload) {\n\t    var msgs = [];\n\t\n\t    for (var i = 0, l = payload.length; i < l; i++) {\n\t      msgs.push(io.parser.encodePacket(payload[i]));\n\t    }\n\t\n\t    this.send(io.parser.encodePayload(msgs));\n\t  };\n\t\n\t  /**\n\t   * Send data to the Socket.IO server.\n\t   *\n\t   * @param data The message\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  XHR.prototype.send = function (data) {\n\t    this.post(data);\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Posts a encoded message to the Socket.IO server.\n\t   *\n\t   * @param {String} data A encoded message.\n\t   * @api private\n\t   */\n\t\n\t  function empty () { };\n\t\n\t  XHR.prototype.post = function (data) {\n\t    var self = this;\n\t    this.socket.setBuffer(true);\n\t\n\t    function stateChange () {\n\t      if (this.readyState == 4) {\n\t        this.onreadystatechange = empty;\n\t        self.posting = false;\n\t\n\t        if (this.status == 200){\n\t          self.socket.setBuffer(false);\n\t        } else {\n\t          self.onClose();\n\t        }\n\t      }\n\t    }\n\t\n\t    function onload () {\n\t      this.onload = empty;\n\t      self.socket.setBuffer(false);\n\t    };\n\t\n\t    this.sendXHR = this.request('POST');\n\t\n\t    if (global.XDomainRequest && this.sendXHR instanceof XDomainRequest) {\n\t      this.sendXHR.onload = this.sendXHR.onerror = onload;\n\t    } else {\n\t      this.sendXHR.onreadystatechange = stateChange;\n\t    }\n\t\n\t    this.sendXHR.send(data);\n\t  };\n\t\n\t  /**\n\t   * Disconnects the established `XHR` connection.\n\t   *\n\t   * @returns {Transport}\n\t   * @api public\n\t   */\n\t\n\t  XHR.prototype.close = function () {\n\t    this.onClose();\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Generates a configured XHR request\n\t   *\n\t   * @param {String} url The url that needs to be requested.\n\t   * @param {String} method The method the request should use.\n\t   * @returns {XMLHttpRequest}\n\t   * @api private\n\t   */\n\t\n\t  XHR.prototype.request = function (method) {\n\t    var req = io.util.request(this.socket.isXDomain())\n\t      , query = io.util.query(this.socket.options.query, 't=' + +new Date);\n\t\n\t    req.open(method || 'GET', this.prepareUrl() + query, true);\n\t\n\t    if (method == 'POST') {\n\t      try {\n\t        if (req.setRequestHeader) {\n\t          req.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n\t        } else {\n\t          // XDomainRequest\n\t          req.contentType = 'text/plain';\n\t        }\n\t      } catch (e) {}\n\t    }\n\t\n\t    return req;\n\t  };\n\t\n\t  /**\n\t   * Returns the scheme to use for the transport URLs.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  XHR.prototype.scheme = function () {\n\t    return this.socket.options.secure ? 'https' : 'http';\n\t  };\n\t\n\t  /**\n\t   * Check if the XHR transports are supported\n\t   *\n\t   * @param {Boolean} xdomain Check if we support cross domain requests.\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  XHR.check = function (socket, xdomain) {\n\t    try {\n\t      var request = io.util.request(xdomain),\n\t          usesXDomReq = (global.XDomainRequest && request instanceof XDomainRequest),\n\t          socketProtocol = (socket && socket.options && socket.options.secure ? 'https:' : 'http:'),\n\t          isXProtocol = (global.location && socketProtocol != global.location.protocol);\n\t      if (request && !(usesXDomReq && isXProtocol)) {\n\t        return true;\n\t      }\n\t    } catch(e) {}\n\t\n\t    return false;\n\t  };\n\t\n\t  /**\n\t   * Check if the XHR transport supports cross domain requests.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  XHR.xdomainCheck = function (socket) {\n\t    return XHR.check(socket, true);\n\t  };\n\t\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports.htmlfile = HTMLFile;\n\t\n\t  /**\n\t   * The HTMLFile transport creates a `forever iframe` based transport\n\t   * for Internet Explorer. Regular forever iframe implementations will \n\t   * continuously trigger the browsers buzy indicators. If the forever iframe\n\t   * is created inside a `htmlfile` these indicators will not be trigged.\n\t   *\n\t   * @constructor\n\t   * @extends {io.Transport.XHR}\n\t   * @api public\n\t   */\n\t\n\t  function HTMLFile (socket) {\n\t    io.Transport.XHR.apply(this, arguments);\n\t  };\n\t\n\t  /**\n\t   * Inherits from XHR transport.\n\t   */\n\t\n\t  io.util.inherit(HTMLFile, io.Transport.XHR);\n\t\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  HTMLFile.prototype.name = 'htmlfile';\n\t\n\t  /**\n\t   * Creates a new Ac...eX `htmlfile` with a forever loading iframe\n\t   * that can be used to listen to messages. Inside the generated\n\t   * `htmlfile` a reference will be made to the HTMLFile transport.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  HTMLFile.prototype.get = function () {\n\t    this.doc = new window[(['Active'].concat('Object').join('X'))]('htmlfile');\n\t    this.doc.open();\n\t    this.doc.write('<html></html>');\n\t    this.doc.close();\n\t    this.doc.parentWindow.s = this;\n\t\n\t    var iframeC = this.doc.createElement('div');\n\t    iframeC.className = 'socketio';\n\t\n\t    this.doc.body.appendChild(iframeC);\n\t    this.iframe = this.doc.createElement('iframe');\n\t\n\t    iframeC.appendChild(this.iframe);\n\t\n\t    var self = this\n\t      , query = io.util.query(this.socket.options.query, 't='+ +new Date);\n\t\n\t    this.iframe.src = this.prepareUrl() + query;\n\t\n\t    io.util.on(window, 'unload', function () {\n\t      self.destroy();\n\t    });\n\t  };\n\t\n\t  /**\n\t   * The Socket.IO server will write script tags inside the forever\n\t   * iframe, this function will be used as callback for the incoming\n\t   * information.\n\t   *\n\t   * @param {String} data The message\n\t   * @param {document} doc Reference to the context\n\t   * @api private\n\t   */\n\t\n\t  HTMLFile.prototype._ = function (data, doc) {\n\t    // unescape all forward slashes. see GH-1251\n\t    data = data.replace(/\\\\\\//g, '/');\n\t    this.onData(data);\n\t    try {\n\t      var script = doc.getElementsByTagName('script')[0];\n\t      script.parentNode.removeChild(script);\n\t    } catch (e) { }\n\t  };\n\t\n\t  /**\n\t   * Destroy the established connection, iframe and `htmlfile`.\n\t   * And calls the `CollectGarbage` function of Internet Explorer\n\t   * to release the memory.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  HTMLFile.prototype.destroy = function () {\n\t    if (this.iframe){\n\t      try {\n\t        this.iframe.src = 'about:blank';\n\t      } catch(e){}\n\t\n\t      this.doc = null;\n\t      this.iframe.parentNode.removeChild(this.iframe);\n\t      this.iframe = null;\n\t\n\t      CollectGarbage();\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Disconnects the established connection.\n\t   *\n\t   * @returns {Transport} Chaining.\n\t   * @api public\n\t   */\n\t\n\t  HTMLFile.prototype.close = function () {\n\t    this.destroy();\n\t    return io.Transport.XHR.prototype.close.call(this);\n\t  };\n\t\n\t  /**\n\t   * Checks if the browser supports this transport. The browser\n\t   * must have an `Ac...eXObject` implementation.\n\t   *\n\t   * @return {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  HTMLFile.check = function (socket) {\n\t    if (typeof window != \"undefined\" && (['Active'].concat('Object').join('X')) in window){\n\t      try {\n\t        var a = new window[(['Active'].concat('Object').join('X'))]('htmlfile');\n\t        return a && io.Transport.XHR.check(socket);\n\t      } catch(e){}\n\t    }\n\t    return false;\n\t  };\n\t\n\t  /**\n\t   * Check if cross domain requests are supported.\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  HTMLFile.xdomainCheck = function () {\n\t    // we can probably do handling for sub-domains, we should\n\t    // test that it's cross domain but a subdomain here\n\t    return false;\n\t  };\n\t\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.transports.push('htmlfile');\n\t\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io, global) {\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports['xhr-polling'] = XHRPolling;\n\t\n\t  /**\n\t   * The XHR-polling transport uses long polling XHR requests to create a\n\t   * \"persistent\" connection with the server.\n\t   *\n\t   * @constructor\n\t   * @api public\n\t   */\n\t\n\t  function XHRPolling () {\n\t    io.Transport.XHR.apply(this, arguments);\n\t  };\n\t\n\t  /**\n\t   * Inherits from XHR transport.\n\t   */\n\t\n\t  io.util.inherit(XHRPolling, io.Transport.XHR);\n\t\n\t  /**\n\t   * Merge the properties from XHR transport\n\t   */\n\t\n\t  io.util.merge(XHRPolling, io.Transport.XHR);\n\t\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  XHRPolling.prototype.name = 'xhr-polling';\n\t\n\t  /**\n\t   * Indicates whether heartbeats is enabled for this transport\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  XHRPolling.prototype.heartbeats = function () {\n\t    return false;\n\t  };\n\t\n\t  /** \n\t   * Establish a connection, for iPhone and Android this will be done once the page\n\t   * is loaded.\n\t   *\n\t   * @returns {Transport} Chaining.\n\t   * @api public\n\t   */\n\t\n\t  XHRPolling.prototype.open = function () {\n\t    var self = this;\n\t\n\t    io.Transport.XHR.prototype.open.call(self);\n\t    return false;\n\t  };\n\t\n\t  /**\n\t   * Starts a XHR request to wait for incoming messages.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  function empty () {};\n\t\n\t  XHRPolling.prototype.get = function () {\n\t    if (!this.isOpen) return;\n\t\n\t    var self = this;\n\t\n\t    function stateChange () {\n\t      if (this.readyState == 4) {\n\t        this.onreadystatechange = empty;\n\t\n\t        if (this.status == 200) {\n\t          self.onData(this.responseText);\n\t          self.get();\n\t        } else {\n\t          self.onClose();\n\t        }\n\t      }\n\t    };\n\t\n\t    function onload () {\n\t      this.onload = empty;\n\t      this.onerror = empty;\n\t      self.retryCounter = 1;\n\t      self.onData(this.responseText);\n\t      self.get();\n\t    };\n\t\n\t    function onerror () {\n\t      self.retryCounter ++;\n\t      if(!self.retryCounter || self.retryCounter > 3) {\n\t        self.onClose();  \n\t      } else {\n\t        self.get();\n\t      }\n\t    };\n\t\n\t    this.xhr = this.request();\n\t\n\t    if (global.XDomainRequest && this.xhr instanceof XDomainRequest) {\n\t      this.xhr.onload = onload;\n\t      this.xhr.onerror = onerror;\n\t    } else {\n\t      this.xhr.onreadystatechange = stateChange;\n\t    }\n\t\n\t    this.xhr.send(null);\n\t  };\n\t\n\t  /**\n\t   * Handle the unclean close behavior.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  XHRPolling.prototype.onClose = function () {\n\t    io.Transport.XHR.prototype.onClose.call(this);\n\t\n\t    if (this.xhr) {\n\t      this.xhr.onreadystatechange = this.xhr.onload = this.xhr.onerror = empty;\n\t      try {\n\t        this.xhr.abort();\n\t      } catch(e){}\n\t      this.xhr = null;\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Webkit based browsers show a infinit spinner when you start a XHR request\n\t   * before the browsers onload event is called so we need to defer opening of\n\t   * the transport until the onload event is called. Wrapping the cb in our\n\t   * defer method solve this.\n\t   *\n\t   * @param {Socket} socket The socket instance that needs a transport\n\t   * @param {Function} fn The callback\n\t   * @api private\n\t   */\n\t\n\t  XHRPolling.prototype.ready = function (socket, fn) {\n\t    var self = this;\n\t\n\t    io.util.defer(function () {\n\t      fn.call(self);\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.transports.push('xhr-polling');\n\t\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\t\n\t/**\n\t * socket.io\n\t * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n\t * MIT Licensed\n\t */\n\t\n\t(function (exports, io, global) {\n\t  /**\n\t   * There is a way to hide the loading indicator in Firefox. If you create and\n\t   * remove a iframe it will stop showing the current loading indicator.\n\t   * Unfortunately we can't feature detect that and UA sniffing is evil.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  var indicator = global.document && \"MozAppearance\" in\n\t    global.document.documentElement.style;\n\t\n\t  /**\n\t   * Expose constructor.\n\t   */\n\t\n\t  exports['jsonp-polling'] = JSONPPolling;\n\t\n\t  /**\n\t   * The JSONP transport creates an persistent connection by dynamically\n\t   * inserting a script tag in the page. This script tag will receive the\n\t   * information of the Socket.IO server. When new information is received\n\t   * it creates a new script tag for the new data stream.\n\t   *\n\t   * @constructor\n\t   * @extends {io.Transport.xhr-polling}\n\t   * @api public\n\t   */\n\t\n\t  function JSONPPolling (socket) {\n\t    io.Transport['xhr-polling'].apply(this, arguments);\n\t\n\t    this.index = io.j.length;\n\t\n\t    var self = this;\n\t\n\t    io.j.push(function (msg) {\n\t      self._(msg);\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Inherits from XHR polling transport.\n\t   */\n\t\n\t  io.util.inherit(JSONPPolling, io.Transport['xhr-polling']);\n\t\n\t  /**\n\t   * Transport name\n\t   *\n\t   * @api public\n\t   */\n\t\n\t  JSONPPolling.prototype.name = 'jsonp-polling';\n\t\n\t  /**\n\t   * Posts a encoded message to the Socket.IO server using an iframe.\n\t   * The iframe is used because script tags can create POST based requests.\n\t   * The iframe is positioned outside of the view so the user does not\n\t   * notice it's existence.\n\t   *\n\t   * @param {String} data A encoded message.\n\t   * @api private\n\t   */\n\t\n\t  JSONPPolling.prototype.post = function (data) {\n\t    var self = this\n\t      , query = io.util.query(\n\t             this.socket.options.query\n\t          , 't='+ (+new Date) + '&i=' + this.index\n\t        );\n\t\n\t    if (!this.form) {\n\t      var form = document.createElement('form')\n\t        , area = document.createElement('textarea')\n\t        , id = this.iframeId = 'socketio_iframe_' + this.index\n\t        , iframe;\n\t\n\t      form.className = 'socketio';\n\t      form.style.position = 'absolute';\n\t      form.style.top = '0px';\n\t      form.style.left = '0px';\n\t      form.style.display = 'none';\n\t      form.target = id;\n\t      form.method = 'POST';\n\t      form.setAttribute('accept-charset', 'utf-8');\n\t      area.name = 'd';\n\t      form.appendChild(area);\n\t      document.body.appendChild(form);\n\t\n\t      this.form = form;\n\t      this.area = area;\n\t    }\n\t\n\t    this.form.action = this.prepareUrl() + query;\n\t\n\t    function complete () {\n\t      initIframe();\n\t      self.socket.setBuffer(false);\n\t    };\n\t\n\t    function initIframe () {\n\t      if (self.iframe) {\n\t        self.form.removeChild(self.iframe);\n\t      }\n\t\n\t      try {\n\t        // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n\t        iframe = document.createElement('<iframe name=\"'+ self.iframeId +'\">');\n\t      } catch (e) {\n\t        iframe = document.createElement('iframe');\n\t        iframe.name = self.iframeId;\n\t      }\n\t\n\t      iframe.id = self.iframeId;\n\t\n\t      self.form.appendChild(iframe);\n\t      self.iframe = iframe;\n\t    };\n\t\n\t    initIframe();\n\t\n\t    // we temporarily stringify until we figure out how to prevent\n\t    // browsers from turning `\\n` into `\\r\\n` in form inputs\n\t    this.area.value = io.JSON.stringify(data);\n\t\n\t    try {\n\t      this.form.submit();\n\t    } catch(e) {}\n\t\n\t    if (this.iframe.attachEvent) {\n\t      iframe.onreadystatechange = function () {\n\t        if (self.iframe.readyState == 'complete') {\n\t          complete();\n\t        }\n\t      };\n\t    } else {\n\t      this.iframe.onload = complete;\n\t    }\n\t\n\t    this.socket.setBuffer(true);\n\t  };\n\t\n\t  /**\n\t   * Creates a new JSONP poll that can be used to listen\n\t   * for messages from the Socket.IO server.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  JSONPPolling.prototype.get = function () {\n\t    var self = this\n\t      , script = document.createElement('script')\n\t      , query = io.util.query(\n\t             this.socket.options.query\n\t          , 't='+ (+new Date) + '&i=' + this.index\n\t        );\n\t\n\t    if (this.script) {\n\t      this.script.parentNode.removeChild(this.script);\n\t      this.script = null;\n\t    }\n\t\n\t    script.async = true;\n\t    script.src = this.prepareUrl() + query;\n\t    script.onerror = function () {\n\t      self.onClose();\n\t    };\n\t\n\t    var insertAt = document.getElementsByTagName('script')[0];\n\t    insertAt.parentNode.insertBefore(script, insertAt);\n\t    this.script = script;\n\t\n\t    if (indicator) {\n\t      setTimeout(function () {\n\t        var iframe = document.createElement('iframe');\n\t        document.body.appendChild(iframe);\n\t        document.body.removeChild(iframe);\n\t      }, 100);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Callback function for the incoming message stream from the Socket.IO server.\n\t   *\n\t   * @param {String} data The message\n\t   * @api private\n\t   */\n\t\n\t  JSONPPolling.prototype._ = function (msg) {\n\t    this.onData(msg);\n\t    if (this.isOpen) {\n\t      this.get();\n\t    }\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * The indicator hack only works after onload\n\t   *\n\t   * @param {Socket} socket The socket instance that needs a transport\n\t   * @param {Function} fn The callback\n\t   * @api private\n\t   */\n\t\n\t  JSONPPolling.prototype.ready = function (socket, fn) {\n\t    var self = this;\n\t    if (!indicator) return fn.call(this);\n\t\n\t    io.util.load(function () {\n\t      fn.call(self);\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Checks if browser supports this transport.\n\t   *\n\t   * @return {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  JSONPPolling.check = function () {\n\t    return 'document' in global;\n\t  };\n\t\n\t  /**\n\t   * Check if cross domain requests are supported\n\t   *\n\t   * @returns {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  JSONPPolling.xdomainCheck = function () {\n\t    return true;\n\t  };\n\t\n\t  /**\n\t   * Add the transport to your public io.transports array.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  io.transports.push('jsonp-polling');\n\t\n\t})(\n\t    'undefined' != typeof io ? io.Transport : module.exports\n\t  , 'undefined' != typeof io ? io : module.parent.exports\n\t  , this\n\t);\n\t\n\tif (true) {\n\t  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () { return io; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}\n\t})();\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)(module)))\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar Q = __webpack_require__(8);\n\tvar respoke = __webpack_require__(1);\n\tvar log = respoke.log;\n\t\n\t/**\n\t * A direct connection via RTCDataChannel, including state and path negotation.\n\t * @class respoke.DirectConnection\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {string} params\n\t * @param {string} params.instanceId - client id\n\t * @param {respoke.Call} params.call - The call that is handling state for this direct connection.\n\t * @param {boolean} [params.forceTurn] - If true, force the data to flow through relay servers instead of allowing\n\t * it to flow peer-to-peer. The relay acts like a blind proxy.\n\t * @param {string} params.connectionId - The connection ID of the remoteEndpoint.\n\t * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n\t * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n\t * @param {function} params.signalReport - Signaling action from SignalingChannel.\n\t * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n\t * @param {respoke.DirectConnection.onStart} [params.onStart] - Callback for when setup of the direct connection\n\t * begins. The direct connection will not be open yet.\n\t * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors that happen during\n\t * direct connection setup or media renegotiation.\n\t * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for closing the direct connection.\n\t * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for opening the direct connection.\n\t * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the request\n\t * for a direct connection and setup is about to begin.\n\t * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for incoming messages. Not usually\n\t * necessary to listen to this event if you are already listening to respoke.Endpoint#message.\n\t * @returns {respoke.DirectConnection}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t\n\t    /**\n\t     * A name to identify this class\n\t     * @memberof! respoke.DirectConnection\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.DirectConnection';\n\t    /**\n\t     * The unique identifier of the direct connection.\n\t     *\n\t     * @memberof! respoke.DirectConnection\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = respoke.makeGUID();\n\t\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name call\n\t     * @type {respoke.Call}\n\t     */\n\t    if (!that.call.caller) {\n\t        that.call.caller = false;\n\t    }\n\t\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name dataChannel\n\t     * @type {RTCDataChannel}\n\t     * @private\n\t     */\n\t    var dataChannel = null;\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name client\n\t     * @type {respoke.Client}\n\t     * @private\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t\n\t    /**\n\t     * @memberof! respoke.DirectConnection\n\t     * @name pc\n\t     * @type {RTCPeerConnection}\n\t     * @private\n\t     */\n\t    var pc = params.pc;\n\t    delete params.pc;\n\t\n\t    /**\n\t     * When the datachannel is availble, we need to attach the callbacks. The event this function is attached to\n\t     * only fires for the callee.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.listenDataChannel\n\t     * @param {respoke.Event} evt\n\t     * @private\n\t     */\n\t    function listenDataChannel(evt) {\n\t        dataChannel = evt.channel;\n\t        dataChannel.onerror = onDataChannelError;\n\t        dataChannel.onmessage = onDataChannelMessage;\n\t        if (dataChannel.readyState === 'open') {\n\t            dataChannel.onopen = null;\n\t            onDataChannelOpen();\n\t        } else {\n\t            dataChannel.onopen = onDataChannelOpen;\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Register any event listeners passed in as callbacks\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.saveParameters\n\t     * @param {object} params\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for when the direct connection\n\t     * is closed.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for when the direct connection\n\t     * is open.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for incoming messages.\n\t     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n\t     * connection.\n\t     * @param {respoke.DirectConnection.onStart} [params.onStart] - Callback for when the direct connection\n\t     * is being set up. The direct connection will not be open yet.\n\t     * @param {boolean} [params.forceTurn] - If true, force the data to flow through relay servers instead of allowing\n\t     * it to flow peer-to-peer. The relay acts like a blind proxy.\n\t     * @private\n\t     */\n\t    function saveParameters(params) {\n\t        /**\n\t         * The direct connection is open.\n\t         * @event respoke.DirectConnection#open\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.listen('open', params.onOpen);\n\t        /**\n\t         * The direct connection is closed.\n\t         * @event respoke.DirectConnection#close\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.listen('close', params.onClose);\n\t        /**\n\t         * Incoming message on this direct connection.\n\t         * @event respoke.DirectConnection#message\n\t         * @type {respoke.Event}\n\t         * @property {respoke.TextMessage} message\n\t         * @property {respoke.Endpoint} endpoint\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.listen('message', params.onMessage);\n\t        // documented elsewhere\n\t        that.listen('start', params.onStart);\n\t        /**\n\t         * An error occurred while setting up the direct connection.\n\t         * @event respoke.DirectConnection#error\n\t         * @type {respoke.Event}\n\t         * @property {string} reason - A human-readable description of the error.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.listen('error', params.onError);\n\t        pc.listen('direct-connection', listenDataChannel, true);\n\t        pc.listen('stats', function fireStats(evt) {\n\t            /**\n\t             * This event is fired every time statistical information about the direct connection\n\t             * becomes available.\n\t             * @event respoke.DirectConnection#stats\n\t             * @type {respoke.Event}\n\t             * @property {object} stats - an object with stats in it.\n\t             * @property {respoke.DirectConnection} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.fire('stats', {stats: evt.stats});\n\t        }, true);\n\t\n\t    }\n\t    saveParameters(params);\n\t\n\t    delete that.onOpen;\n\t    delete that.onClose;\n\t    delete that.onMessage;\n\t\n\t    /**\n\t     * Return media stats. Since we have to wait for both the answer and offer to be available before starting\n\t     * statistics, we'll return a promise for the stats object.\n\t     *\n\t     *     directConnection.getStats({\n\t     *         onStats: function (evt) {\n\t     *             console.log('Stats', evt.stats);\n\t     *         }\n\t     *     }).done(function () {\n\t     *         console.log('Stats started.');\n\t     *     }, function (err) {\n\t     *         console.log('Direct connection is already closed.');\n\t     *     });\n\t     *\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.getStats\n\t     * @returns {Promise<object>|undefined}\n\t     * @param {object} params\n\t     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive the\n\t     * stats if the Respoke stats module is loaded. If no callback is provided, the connection's report will\n\t     * contain stats but the developer will not receive them on the client-side.\n\t     * @param {respoke.DirectConnection.statsSuccessHandler} [params.onSuccess] - Success handler for this\n\t     * invocation of this method only.\n\t     * @param {respoke.DirectConnection.errorHandler} [params.onError] - Error handler for this invocation of\n\t     * this method only.\n\t     */\n\t    that.getStats = function (params) {\n\t        if (pc && pc.getStats) {\n\t            that.listen('stats', params.onStats);\n\t            delete params.onStats;\n\t            return pc.getStats(params);\n\t        }\n\t        return null;\n\t    };\n\t\n\t    if (!respoke.MediaStats) {\n\t        delete that.getStats;\n\t    }\n\t\n\t    /**\n\t     * Detect datachannel errors for internal state.\n\t     * @memberof! respoke.DirectConnection\n\t     * @private\n\t     * @method respoke.DirectConnection.onDataChannelError\n\t     */\n\t    function onDataChannelError(error) {\n\t        /**\n\t         * Indicate that an error has occurred setting up the direct connection.\n\t         * @event respoke.DirectConnection#error\n\t         * @type {respoke.Event}\n\t         * @property {object} error\n\t         * @property {respoke.DirectConnection} directConnection\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('error', {\n\t            error: error\n\t        });\n\t        that.close();\n\t    }\n\t\n\t    /**\n\t     * Receive and route messages to the Endpoint.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.onDataChannelMessage\n\t     * @private\n\t     * @param {MessageEvent}\n\t     * @fires respoke.DirectConnection#message\n\t     */\n\t    function onDataChannelMessage(evt) {\n\t        var message;\n\t        try {\n\t            message = JSON.parse(evt.data);\n\t        } catch (e) {\n\t            message = evt.data;\n\t        }\n\t        /**\n\t         * A message has been received over the direct connection.\n\t         * @event respoke.Endpoint#message\n\t         * @type {respoke.Event}\n\t         * @property {object} message\n\t         * @property {respoke.DirectConnection} directConnection\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.call.remoteEndpoint.fire('message', {\n\t            message: message,\n\t            directConnection: that\n\t        });\n\t        /**\n\t         * A message has been received over the direct connection.\n\t         * @event respoke.DirectConnection#message\n\t         * @type {respoke.Event}\n\t         * @property {object} message\n\t         * @property {respoke.Endpoint} endpoint\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('message', {\n\t            message: message,\n\t            endpoint: that.call.remoteEndpoint\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Detect when the channel is open.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.onDataChannelOpen\n\t     * @private\n\t     * @param {MessageEvent}\n\t     * @fires respoke.DirectConnection#open\n\t     */\n\t    function onDataChannelOpen(evt) {\n\t        //dataChannel = evt.target || evt.channel;\n\t        /**\n\t         * The direct connection is open.\n\t         * @event respoke.DirectConnection#open\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('open');\n\t    }\n\t\n\t    /**\n\t     * Detect when the channel is closed.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.onDataChannelClose\n\t     * @private\n\t     * @param {MessageEvent}\n\t     * @fires respoke.DirectConnection#close\n\t     */\n\t    function onDataChannelClose(evt) {\n\t        //dataChannel = evt.target || evt.channel;\n\t        /**\n\t         * The direct connection is closed.\n\t         * @event respoke.DirectConnection#close\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('close');\n\t    }\n\t\n\t    /**\n\t     * Create the datachannel. For the caller, set up all the handlers we'll need to keep track of the\n\t     * datachannel's state and to receive messages.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.createDataChannel\n\t     * @private\n\t     */\n\t    function createDataChannel() {\n\t        dataChannel = pc.createDataChannel(\"respokeDataChannel\");\n\t        dataChannel.binaryType = 'arraybuffer';\n\t        dataChannel.onerror = onDataChannelError;\n\t        dataChannel.onmessage = onDataChannelMessage;\n\t        dataChannel.onopen = onDataChannelOpen;\n\t\n\t        /**\n\t         * The direct connection setup has begun. This does NOT mean it's ready to send messages yet. Listen to\n\t         * DirectConnection#open for that notification.\n\t         * @event respoke.DirectConnection#start\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('start');\n\t    }\n\t\n\t    /**\n\t     * Start the process of obtaining media. saveParameters will only be meaningful for the callee,\n\t     * since the library calls this method for the caller. Developers will use this method to pass in\n\t     * callbacks for the callee.\n\t     *\n\t     *     directConnection.accept({\n\t     *         onOpen: function (evt) {}\n\t     *     });\n\t     *\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.accept\n\t     * @fires respoke.DirectConnection#accept\n\t     * @param {object} params\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen]\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose]\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage]\n\t     */\n\t    that.accept = function (params) {\n\t        params = params || {};\n\t        log.debug('DirectConnection.accept');\n\t        saveParameters(params);\n\t\n\t        log.debug(\"I am \" + (pc.state.caller ? '' : 'not ') + \"the caller.\");\n\t\n\t        if (pc.state.caller === true) {\n\t            createDataChannel();\n\t        }\n\t        that.call.answer();\n\t\n\t        /**\n\t         * The request to open a direct connection has been accepted.\n\t         * @event respoke.DirectConnection#accept\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('accept');\n\t    };\n\t\n\t    /**\n\t     * Tear down the connection.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.close\n\t     * @fires respoke.DirectConnection#close\n\t     */\n\t    that.close = function (params) {\n\t        params = params || {};\n\t        log.debug(\"DirectConnection.close\");\n\t\n\t        if (that.call && that.call.remoteEndpoint) {\n\t            that.call.remoteEndpoint.directConnection = null;\n\t        }\n\t\n\t        if (dataChannel) {\n\t            dataChannel.close();\n\t        }\n\t\n\t        /**\n\t         * The direct connection has been closed.\n\t         * @event respoke.DirectConnection#close\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.DirectConnection} target\n\t         */\n\t        that.fire('close');\n\t\n\t        that.ignore();\n\t\n\t        if (that.call && params.skipRemove !== true) {\n\t            that.call.removeDirectConnection();\n\t        }\n\t\n\t        dataChannel = null;\n\t        that.call = null;\n\t        pc = null;\n\t    };\n\t\n\t    /**\n\t     * Send a message over the datachannel in the form of a JSON-encoded plain old JavaScript object. Only one\n\t     * attribute may be given: either a string 'message' or an object 'object'.\n\t     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n\t     *\n\t     *     directConnection.sendMessage({\n\t     *         message: \"And they say HTTP is stateless!\"\n\t     *     });\n\t     *\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.sendMessage\n\t     * @param {object} params\n\t     * @param {string} [params.message] - The message to send.\n\t     * @param {object} [params.object] - An object to send.\n\t     * @param {respoke.DirectConnection.sendHandler} [params.onSuccess] - Success handler for this invocation\n\t     * of this method only.\n\t     * @param {respoke.DirectConnection.errorHandler} [params.onError] - Error handler for this invocation\n\t     * of this method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.sendMessage = function (params) {\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t        if (that.isActive()) {\n\t            dataChannel.send(JSON.stringify(params.object || {\n\t                message: params.message\n\t            }));\n\t            deferred.resolve();\n\t        } else {\n\t            deferred.reject(new Error(\"dataChannel not in an open state.\"));\n\t        }\n\t        return retVal;\n\t    };\n\t\n\t    /**\n\t     * Expose close as reject for approve/reject workflow.\n\t     *\n\t     *     client.listen('direct-connection, function (evt) {\n\t     *         if (iDontLikeThisPerson()) {\n\t     *             evt.directConnection.reject();\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.reject\n\t     * @param {boolean} signal - Optional flag to indicate whether to send or suppress sending\n\t     * a hangup signal to the remote side.\n\t     */\n\t    that.reject = that.close;\n\t\n\t    /**\n\t     * Indicate whether a datachannel is being setup or is in progress.\n\t     * @memberof! respoke.DirectConnection\n\t     * @method respoke.DirectConnection.isActive\n\t     * @returns {boolean}\n\t     */\n\t    that.isActive = function () {\n\t        // Why does pc.iceConnectionState not transition into 'connected' even though media is flowing?\n\t        //return (pc && pc.isActive() && dataChannel && dataChannel.readyState === 'open');\n\t        return (dataChannel && dataChannel.readyState === 'open');\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.DirectConnection\n\t\n\t/**\n\t * Called when the direct connection is closed.  This callback is called every time respoke.DirectConnection#close\n\t * fires.\n\t * @callback respoke.DirectConnection.onClose\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Called when the setup of the direct connection has begun. The direct connection will not be open yet. This\n\t * callback is called every time respoke.DirectConnection#start fires.\n\t * @callback respoke.DirectConnection.onStart\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Called when the direct connection is opened.  This callback is called every time respoke.DirectConnection#open\n\t * fires.\n\t * @callback respoke.DirectConnection.onOpen\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Called when a message is received over the direct connection.  This callback is called every time\n\t * respoke.DirectConnection#message fires.\n\t * @callback respoke.DirectConnection.onMessage\n\t * @param {respoke.Event} evt\n\t * @param {object} evt.message\n\t * @param {respoke.Endpoint} evt.endpoint\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Handle an error that resulted from a specific method call. This handler will not fire more than once.\n\t * @callback respoke.DirectConnection.errorHandler\n\t * @param {Error} err\n\t */\n\t/**\n\t * When a call is in setup or media renegotiation happens. This callback will be called every time\n\t * respoke.DirectConnection#error.\n\t * @callback respoke.DirectConnection.onError\n\t * @param {respoke.Event} evt\n\t * @param {boolean} evt.reason - A human-readable description of the error.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Called when the callee accepts the direct connection. This callback is called every time\n\t * respoke.DirectConnection#accept is fired.\n\t * @callback respoke.DirectConnection.onAccept\n\t * @param {respoke.Event} evt\n\t * @param {respoke.DirectConnection} evt.target\n\t */\n\t/**\n\t * Handle the successful kick-off of stats on a call.\n\t * @callback respoke.DirectConnection.statsSuccessHandler\n\t * @param {respoke.Event} evt\n\t * @param {object} evt.stats - an object with stats in it.\n\t * @param {respoke.DirectConnection} evt.target\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * Handle sending successfully.\n\t * @callback respoke.DirectConnection.sendHandler\n\t */\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar Q = __webpack_require__(8);\n\tvar respoke = __webpack_require__(1);\n\tvar log = respoke.log;\n\t\n\t/**\n\t * WebRTC PeerConnection. This class handles all the state and connectivity for Call and DirectConnection.\n\t * This class cannot be used alone, but is instantiated by and must be given media by either Call, DirectConnection,\n\t * or the not-yet-implemented ScreenShare.\n\t * @class respoke.PeerConnection\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.instanceId - client id\n\t * @param {boolean} [params.forceTurn] - If true, delete all 'host' and 'srvflx' candidates and send only 'relay'\n\t * candidates.\n\t * @param {boolean} [params.disableTurn] - If true, delete all 'relay' candidates and send only 'host' and 'srvflx'\n\t * candidates.\n\t * @param {respoke.Call} params.call\n\t * @param {string} params.connectionId - The connection ID of the remoteEndpoint.\n\t * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n\t * @param {function} params.signalModify - Signaling action from SignalingChannel.\n\t * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n\t * @param {function} params.signalReport - Signaling action from SignalingChannel.\n\t * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n\t * @param {respoke.Call.onHangup} [params.onHangup] - Callback for the developer to be notified about hangup.\n\t * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for the developer to receive\n\t * statistics about the call. This is only used if call.getStats() is called and the stats module is loaded.\n\t * @param {object} [params.pcOptions]\n\t * @param {object} [params.offerOptions]\n\t * @returns {respoke.PeerConnection}\n\t */\n\t\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.PeerConnection';\n\t\n\t    /**\n\t     * Whether or not we will send a 'hangup' signal to the other side during hangup.\n\t     * @memberof! respoke.PeerConnection\n\t     * @name toSendHangup\n\t     * @type {respoke.Endpoint}\n\t     */\n\t    var toSendHangup;\n\t\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @private\n\t     * @name pc\n\t     * @type RTCPeerConnection\n\t     * @desc The RTCPeerConnection as provided by the browser API. All internal state, networking functionality, and\n\t     * raw data transfer occurs within the PeerConnection.\n\t     */\n\t    var pc = null;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name defModify\n\t     * @private\n\t     * @type {Promise}\n\t     * @desc Used in the state machine to trigger methods or functions whose execution depends on the reception,\n\t     * handling, or sending of some information.\n\t     */\n\t    var defModify;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name previewLocalMedia\n\t     * @private\n\t     * @type {respoke.Call.previewLocalMedia}\n\t     * @desc A callback provided by the developer that we'll call after receiving local media and before\n\t     * approve() is called.\n\t     */\n\t    var previewLocalMedia = typeof params.previewLocalMedia === 'function' ? params.previewLocalMedia : undefined;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name candidateSendingQueue\n\t     * @private\n\t     * @type {array}\n\t     * @desc An array to save candidates between offer and answer so that both parties can process them simultaneously.\n\t     */\n\t    var candidateSendingQueue = respoke.queueFactory();\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name candidateReceivingQueue\n\t     * @private\n\t     * @type {array}\n\t     * @desc An array to save candidates between offer and answer so that both parties can process them simultaneously.\n\t     */\n\t    var candidateReceivingQueue = respoke.queueFactory();\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name client\n\t     * @private\n\t     * @type {respoke.Client}\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalOffer\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalOffer = params.signalOffer;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalConnected\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalConnected = params.signalConnected;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalModify\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalModify = params.signalModify;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalAnswer\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalAnswer = params.signalAnswer;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalHangup\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalHangup = respoke.callOnce(params.signalHangup);\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalReport\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed by the signaling channel.\n\t     */\n\t    var signalReport = params.signalReport;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalCandidateOrig\n\t     * @private\n\t     * @type {function}\n\t     * @desc A temporary function saved from params in order to construct the candidate signaling function.\n\t     */\n\t    var signalCandidateOrig = params.signalCandidate;\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name signalCandidate\n\t     * @private\n\t     * @type {function}\n\t     * @desc A signaling function constructed from the one passed to us by the signaling channel with additions\n\t     * to facilitate candidate logging.\n\t     */\n\t    function signalCandidate(params) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t\n\t        params.iceCandidates = [params.candidate];\n\t        signalCandidateOrig(params);\n\t        that.report.candidatesSent.push({candidate: params.candidate});\n\t    }\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name sdpExpectedStreamCount\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    that.sdpExpectedStreamCount = 0;\n\t\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name offerOptions\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var offerOptions = params.offerOptions || {};\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name pcOptions\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var pcOptions = params.pcOptions || {\n\t        optional: [\n\t            { DtlsSrtpKeyAgreement: true },\n\t            { RtpDataChannels: false }\n\t        ]\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @name report\n\t     * @type {object}\n\t     */\n\t    that.report = {\n\t        callStarted: 0,\n\t        callStopped: 0,\n\t        callerendpoint: that.call.caller ? client.name : that.call.remoteEndpoint.id,\n\t        callerconnection: that.call.caller ? client.id : that.call.connectionId,\n\t        calleeendpoint: that.call.caller ? that.call.remoteEndpoint.id : client.id,\n\t        calleeconnection: that.call.caller ? that.call.connectionId : client.connectionId,\n\t        sessionId: that.call.id,\n\t        lastSDPString: '',\n\t        sdpsSent: [],\n\t        sdpsReceived: [],\n\t        candidatesSent: [],\n\t        candidatesReceived: [],\n\t        userAgent: navigator.userAgent,\n\t        os: navigator.platform\n\t    };\n\t\n\t    /**\n\t     * Start the process of network and media negotiation. Called after local video approved.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.initOffer\n\t     * @fires respoke.PeerConnection#initOffer\n\t     * @private\n\t     */\n\t    function initOffer() {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t\n\t        if (that.state.receiveOnly) {\n\t            makeOptionsReceiveOnly(offerOptions);\n\t        }\n\t\n\t        if (that.state.sendOnly) {\n\t            makeOptionsSendOnly(offerOptions);\n\t        }\n\t\n\t        log.info('creating offer', offerOptions);\n\t        pc.createOffer(saveOfferAndSend, function errorHandler(p) {\n\t            log.error('createOffer failed');\n\t        }, offerOptions);\n\t    }\n\t\n\t    function makeOptionsReceiveOnly(options) {\n\t        if (navigator.webkitGetUserMedia) {\n\t            options.mandatory = {\n\t                OfferToReceiveVideo: true,\n\t                OfferToReceiveAudio: true,\n\t                OfferToSendVideo: false,\n\t                OfferToSendAudio: false\n\t            };\n\t        } else {\n\t            options.offerToReceiveVideo = true;\n\t            options.offerToReceiveAudio = true;\n\t            options.offerToSendVideo = false;\n\t            options.offerToSendAudio = false;\n\t        }\n\t    }\n\t\n\t    function makeOptionsSendOnly(options) {\n\t        if (navigator.webkitGetUserMedia) {\n\t            options.mandatory = {\n\t                OfferToSendVideo: true,\n\t                OfferToSendAudio: true,\n\t                OfferToReceiveVideo: false,\n\t                OfferToReceiveAudio: false\n\t            };\n\t        } else {\n\t            options.offerToSendVideo = true;\n\t            options.offerToSendAudio = true;\n\t            options.offerToReceiveVideo = false;\n\t            options.offerToReceiveAudio = false;\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Process a remote offer if we are not the caller. This is necessary because we don't process the offer until\n\t     * the callee has answered the call.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.processOffer\n\t     * @param {RTCSessionDescriptor}\n\t     * @returns {Promise}\n\t     */\n\t    that.processOffer = function (oOffer) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        log.debug('processOffer', oOffer);\n\t\n\t        that.report.sdpsReceived.push(oOffer);\n\t        that.report.lastSDPString = oOffer.sdp;\n\t\n\t        //set flags for audio / video being offered\n\t        that.sdpExpectedStreamCount = respoke.sdpStreamCount(oOffer.sdp);\n\t        that.call.hasDataChannel = respoke.sdpHasDataChannel(oOffer.sdp);\n\t\n\t        try {\n\t            pc.setRemoteDescription(new RTCSessionDescription(oOffer),\n\t                function successHandler() {\n\t                    if (!pc) {\n\t                        return;\n\t                    }\n\t\n\t                    processReceivingQueue();\n\t                    log.debug('set remote desc of offer succeeded');\n\t                    pc.createAnswer(function successHandler(oSession) {\n\t                        that.state.processedRemoteSDP = true;\n\t                        saveAnswerAndSend(oSession);\n\t                    }, function errorHandler(err) {\n\t                        err = new Error(\"Error creating SDP answer.\" + err.message);\n\t                        that.report.callStoppedReason = err.message;\n\t                        /**\n\t                         * This event is fired on errors that occur during call setup or media negotiation.\n\t                         * @event respoke.Call#error\n\t                         * @type {respoke.Event}\n\t                         * @property {string} reason - A human readable description about the error.\n\t                         * @property {respoke.Call} target\n\t                         * @property {string} name - the event name.\n\t                         */\n\t                        that.call.fire('error', {\n\t                            message: err.message\n\t                        });\n\t                        log.error('create answer failed');\n\t                        that.report.callStoppedReason = 'setRemoteDescription failed at answer.';\n\t                        that.close();\n\t                    });\n\t                }, function errorHandler(err) {\n\t                    err = new Error('Error calling setRemoteDescription on offer I received.' + err.message);\n\t                    that.report.callStoppedReason = err.message;\n\t                    /**\n\t                     * This event is fired on errors that occur during call setup or media negotiation.\n\t                     * @event respoke.Call#error\n\t                     * @type {respoke.Event}\n\t                     * @property {string} reason - A human readable description about the error.\n\t                     * @property {respoke.Call} target\n\t                     * @property {string} name - the event name.\n\t                     */\n\t                    that.call.fire('error', {\n\t                        message: err.message\n\t                    });\n\t                }\n\t            );\n\t        } catch (err) {\n\t            var newErr = new Error(\"Exception calling setRemoteDescription on offer I received.\" + err.message);\n\t            that.report.callStoppedReason = newErr.message;\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.call.fire('error', {\n\t                message: newErr.message\n\t            });\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Return media stats. Since we have to wait for both the answer and offer to be available before starting\n\t     * statistics, we'll return a promise for the stats object.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.getStats\n\t     * @returns {Promise<{respoke.MediaStatsParser}>|undefined}\n\t     * @param {object} params\n\t     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onSuccess] - Success handler for this\n\t     * invocation of this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @fires respoke.PeerConnection#stats\n\t     */\n\t    function getStats(params) {\n\t        var deferred = Q.defer();\n\t        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t\n\t        if (!respoke.MediaStats) {\n\t            deferred.reject(new Error(\"Statistics module is not loaded.\"));\n\t            return retVal;\n\t        }\n\t\n\t        function onConnect() {\n\t            var stats = respoke.MediaStatsParser({\n\t                peerConnection: pc,\n\t                interval: params.interval,\n\t                onStats: function statsHandler(stats) {\n\t                    if (!pc) {\n\t                        return;\n\t                    }\n\t\n\t                    /**\n\t                     * This event is fired every 5 seconds by default, configurable by the 'interval' property to\n\t                     * `call.startStats` and reports the current state of media statistics.\n\t                     * @event respoke.PeerConnection#stats\n\t                     * @type {respoke.Event}\n\t                     * @property {object} stats - an object with stats in it.\n\t                     * @property {string} name - the event name.\n\t                     * @property {respoke.PeerConnection}\n\t                     */\n\t                    that.fire('stats', {\n\t                        stats: stats\n\t                    });\n\t                }\n\t            });\n\t            that.listen('close', function closeHandler(evt) {\n\t\n\t                stats.stopStats();\n\t            }, true);\n\t            deferred.resolve();\n\t        }\n\t\n\t        if (!pc) {\n\t            that.once('stream-received', onConnect);\n\t        } else {\n\t            onConnect();\n\t        }\n\t\n\t        return retVal;\n\t    }\n\t\n\t    if (respoke.MediaStats) {\n\t        that.getStats = getStats;\n\t    }\n\t\n\t    /**\n\t     * Create the RTCPeerConnection and add handlers. Process any offer we have already received.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.init\n\t     */\n\t    that.init = function init() {\n\t        log.debug('PC.init');\n\t\n\t        if (pc) {\n\t            return;\n\t        }\n\t\n\t        that.report.callStarted = new Date().getTime();\n\t\n\t        pc = new RTCPeerConnection(that.servers, pcOptions);\n\t        pc.onicecandidate = onIceCandidate;\n\t        pc.onnegotiationneeded = onNegotiationNeeded;\n\t        pc.oniceconnectionstatechange = onIceConnectionStateChange;\n\t        pc.onaddstream = function onaddstream(evt) {\n\t            /**\n\t             * Indicate the RTCPeerConnection has received remote media.\n\t             * @event respoke.PeerConnection#remote-stream-received\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('remote-stream-received', {\n\t                stream: evt.stream\n\t            });\n\t        };\n\t        pc.onremovestream = function onremovestream(evt) {\n\t            /**\n\t             * Indicate the remote side has stopped sending media.\n\t             * @event respoke.PeerConnection#remote-stream-removed\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('remote-stream-removed', {\n\t                stream: evt.stream\n\t            });\n\t        };\n\t        pc.ondatachannel = function ondatachannel(evt) {\n\t            /**\n\t             * CAUTION: This event is only called for the callee because RTCPeerConnection#ondatachannel\n\t             * is only called for the callee.\n\t             * @event respoke.PeerConnection#direct-connection\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('direct-connection', {\n\t                channel: evt.channel\n\t            });\n\t        };\n\t\n\t        that.state.listen('offering:entry', function (evt) {\n\t            if (that.state.caller) {\n\t                initOffer();\n\t            }\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Return an array of remote media streams.\n\t     * @muremberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.getRemoteStreams\n\t     */\n\t    that.getRemoteStreams = function () {\n\t        if (!pc) {\n\t            return [];\n\t        }\n\t        return pc.getRemoteStreams.apply(pc, Array.prototype.slice.call(arguments));\n\t    };\n\t\n\t    /**\n\t     * Return an array of local media streams.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.getLocalStreams\n\t     */\n\t    that.getLocalStreams = function () {\n\t        if (!pc) {\n\t            return [];\n\t        }\n\t        return pc.getLocalStreams.apply(pc, Array.prototype.slice.call(arguments));\n\t    };\n\t\n\t    /**\n\t     * Create a data channel.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.createDataChannel\n\t     */\n\t    that.createDataChannel = function () {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        return pc.createDataChannel.apply(pc, Array.prototype.slice.call(arguments));\n\t    };\n\t\n\t    /**\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.addStream\n\t     * Expose addStream.\n\t     * @param {RTCMediaStream}\n\t     */\n\t    that.addStream = function (stream) {\n\t        if (!pc) {\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.call.fire('error', {\n\t                message: \"Got local stream in a precall state.\"\n\t            });\n\t            return;\n\t        }\n\t        pc.addStream(stream);\n\t    };\n\t\n\t    /**\n\t     * Process a local ICE Candidate\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.onIceCandidate\n\t     * @private\n\t     * @param {RTCIceCandidate}\n\t     */\n\t    function onIceCandidate(oCan) {\n\t        var candidate = oCan.candidate; // {candidate: ..., sdpMLineIndex: ... }\n\t        if (!pc || !candidate || !candidate.candidate) {\n\t            return;\n\t        }\n\t\n\t        if (that.forceTurn === true && candidate.candidate.indexOf(\"typ relay\") === -1) {\n\t            log.debug(\"Dropping candidate because forceTurn is on.\");\n\t            return;\n\t        } else if (that.disableTurn === true && candidate.candidate.indexOf(\"typ relay\") !== -1) {\n\t            log.debug(\"Dropping candidate because disableTurn is on.\");\n\t            return;\n\t        }\n\t\n\t        candidateSendingQueue.push(candidate);\n\t    }\n\t\n\t    /**\n\t     * Handle ICE state change\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.onIceConnectionStateChange\n\t     * @private\n\t     */\n\t    function onIceConnectionStateChange(evt) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t\n\t        if (pc.iceConnectionState === 'connected') {\n\t            /**\n\t             * Indicate that we've successfully connected to the remote side. This is only helpful for the\n\t             * outgoing connection.\n\t             * @event respoke.PeerConnection#connect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('connect');\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Handle renegotiation\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.onNegotiationNeeded\n\t     * @private\n\t     */\n\t    function onNegotiationNeeded() {\n\t        log.warn(\"Negotiation needed.\");\n\t    }\n\t\n\t    /**\n\t     * Process any ICE candidates that we received from our browser before we were able to send\n\t     * our SDP to the other side.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.processSendingQueue\n\t     * @private\n\t     */\n\t    function processSendingQueue() {\n\t        candidateSendingQueue.trigger(function sendIce(can) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t\n\t            signalCandidate({\n\t                candidate: can,\n\t                call: that.call\n\t            });\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Process any ICE candidates that we received from the other side while we were waiting on the other\n\t     * party's SDP to arrive and be processed.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.processReceivingQueue\n\t     * @private\n\t     */\n\t    function processReceivingQueue() {\n\t        candidateReceivingQueue.trigger(function processIce(can) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t\n\t            pc.addIceCandidate(new RTCIceCandidate(can.candidate), function onSuccess() {\n\t                log.debug((that.state.caller ? 'caller' : 'callee'), 'got a remote candidate.', can.candidate);\n\t                that.report.candidatesReceived.push(can.candidate);\n\t            }, function onError(e) {\n\t                log.error(\"Couldn't add ICE candidate: \" + e.message, can.candidate);\n\t            });\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Save an SDP we've gotten from the browser which will be an offer and send it to the other\n\t     * side.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.saveOfferAndSend\n\t     * @param {RTCSessionDescription}\n\t     * @private\n\t     */\n\t    function saveOfferAndSend(oSession) {\n\t        oSession.type = 'offer';\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        log.debug('setting and sending offer', oSession);\n\t        that.report.sdpsSent.push(oSession);\n\t\n\t        pc.setLocalDescription(oSession, function successHandler(p) {\n\t            oSession.type = 'offer';\n\t            signalOffer({\n\t                call: that.call,\n\t                sessionDescription: oSession,\n\t                onSuccess: function () {\n\t                    that.state.sentSDP = true;\n\t                    processSendingQueue();\n\t                },\n\t                onError: function (err) {\n\t                    log.error('offer could not be sent', err);\n\t                    that.call.hangup({signal: false});\n\t                }\n\t            });\n\t        }, function errorHandler(p) {\n\t            var err = new Error('Error calling setLocalDescription on offer I created.');\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.call.fire('error', {\n\t                message: err.message\n\t            });\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Save our SDP we've gotten from the browser which will be an answer and send it to the\n\t     * other side.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.saveAnswerAndSend\n\t     * @param {RTCSessionDescription}\n\t     * @private\n\t     */\n\t    function saveAnswerAndSend(oSession) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t\n\t        if (!that.state.caller) {\n\t            that.report.callerconnection = that.call.connectionId;\n\t        }\n\t\n\t        oSession.type = 'answer';\n\t        log.debug('setting and sending answer', oSession);\n\t        that.report.sdpsSent.push(oSession);\n\t\n\t        pc.setLocalDescription(oSession, function successHandler(p) {\n\t            oSession.type = 'answer';\n\t            signalAnswer({\n\t                sessionDescription: oSession,\n\t                call: that.call,\n\t                onSuccess: processSendingQueue\n\t            });\n\t            that.state.sentSDP = true;\n\t        }, function errorHandler(p) {\n\t            var err = new Error('Error calling setLocalDescription on answer I created.');\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.call.fire('error', {\n\t                message: err.message\n\t            });\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n\t     * signal is not false and we have not received a hangup signal from the remote party.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.close\n\t     * @fires respoke.PeerConnection#destoy\n\t     * @param {object} param\n\t     * @param {boolean} [param.signal] - Optional flag to indicate whether to send or suppress sending\n\t     * a hangup signal to the remote side. This is set to false by the library if we're responding to a\n\t     * hangup signal.\n\t     * @fires respoke.PeerConnection#close\n\t     */\n\t    that.close = function (params) {\n\t        params = params || {};\n\t        toSendHangup = true;\n\t\n\t        if (that.state.caller === true) {\n\t            if (!that.state.sentSDP) {\n\t                // Never send hangup if we are the caller but we haven't sent any other signal yet.\n\t                toSendHangup = false;\n\t            }\n\t        }\n\t\n\t        toSendHangup = (typeof params.signal === 'boolean' ? params.signal : toSendHangup);\n\t        if (toSendHangup) {\n\t            log.info('sending hangup');\n\t            signalHangup({\n\t                call: that.call\n\t            });\n\t        }\n\t\n\t        that.report.callStopped = new Date().getTime();\n\t\n\t        /**\n\t         * Indicate that the RTCPeerConnection is closed.\n\t         * @event respoke.PeerConnection#close\n\t         * @type {respoke.Event}\n\t         * @property {boolean} sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.PeerConnection}\n\t         */\n\t        that.fire('close', {\n\t            sentSignal: toSendHangup\n\t        });\n\t        that.ignore();\n\t\n\t        if (pc && that.report) {\n\t            pc.close();\n\t        }\n\t        pc = null;\n\t\n\t        if (that.call.enableCallDebugReport) {\n\t            signalReport({\n\t                report: that.report\n\t            });\n\t        }\n\t        that.report = null;\n\t    };\n\t    that.close = respoke.callOnce(that.close);\n\t\n\t    /**\n\t     * Indicate whether a call is being setup or is in progress.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.isActive\n\t     * @returns {boolean}\n\t     */\n\t    that.isActive = function () {\n\t        return !!(pc && ['completed', 'connected', 'new', 'checking'].indexOf(pc.iceConnectionState) > -1);\n\t    };\n\t\n\t    /**\n\t     * Save the answer and tell the browser about it.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.listenAnswer\n\t     * @param {object} evt\n\t     * @param {object} evt.signal - The signal, including the remote SDP and the connectionId of the endpoint who\n\t     * answered the call.\n\t     * @private\n\t     */\n\t    function listenAnswer(evt) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        log.debug('got answer', evt.signal);\n\t\n\t        that.report.sdpsReceived.push(evt.signal.sessionDescription);\n\t        that.state.sendOnly = respoke.sdpHasReceiveOnly(evt.signal.sessionDescription.sdp);\n\t        that.sdpExpectedStreamCount = respoke.sdpStreamCount(evt.signal.sessionDescription.sdp);\n\t        that.report.lastSDPString = evt.signal.sessionDescription.sdp;\n\t\n\t        if (that.state.caller) {\n\t            that.report.calleeconnection = evt.signal.fromConnection;\n\t        }\n\t\n\t        that.call.connectionId = evt.signal.fromConnection;\n\t        // TODO don't signal connected more than once.\n\t        signalConnected({\n\t            call: that.call\n\t        });\n\t\n\t        pc.setRemoteDescription(\n\t            new RTCSessionDescription(evt.signal.sessionDescription),\n\t            function successHandler() {\n\t                processReceivingQueue();\n\t                that.state.dispatch('receiveAnswer');\n\t            }, function errorHandler(p) {\n\t                var newErr = new Error(\"Exception calling setRemoteDescription on answer I received.\");\n\t                that.report.callStoppedReason = newErr.message;\n\t                /**\n\t                 * This event is fired on errors that occur during call setup or media negotiation.\n\t                 * @event respoke.Call#error\n\t                 * @type {respoke.Event}\n\t                 * @property {string} reason - A human readable description about the error.\n\t                 * @property {respoke.Call} target\n\t                 * @property {string} name - the event name.\n\t                 */\n\t                that.call.fire('error', {\n\t                    message: newErr.message\n\t                });\n\t                log.error('set remote desc of answer failed', evt.signal.sessionDescription, p);\n\t                that.report.callStoppedReason = 'setRemoteDescription failed at answer.';\n\t                that.close();\n\t            }\n\t        );\n\t    }\n\t\n\t    /**\n\t     * Figure out who won the call. This necessary to prevent two connections of the same endpoint from thinking\n\t     * they are both on the same call.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.listenConnected\n\t     * @private\n\t     */\n\t    function listenConnected(evt) {\n\t        if (evt.signal.connectionId !== client.connectionId) {\n\t            log.debug(\"Hanging up because I didn't win the call.\", evt.signal, client);\n\t            that.call.hangup({signal: false});\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Send the initiate signal to start the modify process. This method is only called by the caller of the\n\t     * renegotiation.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.startModify\n\t     * @param {object} params\n\t     * @param {object} [params.constraints] - Indicate this is a request for media and what type of media.\n\t     * @param {boolean} [params.directConnection] - Indicate this is a request for a direct connection.\n\t     */\n\t    that.startModify = function (params) {\n\t        defModify = Q.defer();\n\t        signalModify({\n\t            action: 'initiate',\n\t            call: that.call,\n\t            constraints: params.constraints,\n\t            directConnection: params.directConnection\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Indicate a desire from the other side to renegotiate media.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.listenModify\n\t     * @param {object} evt\n\t     * @param {object} evt.signal\n\t     * @private\n\t     */\n\t    function listenModify(evt) {\n\t        var err;\n\t        log.debug('PC.listenModify', evt.signal);\n\t\n\t        if (evt.signal.action === 'accept') {\n\t            if (defModify.promise.isPending()) {\n\t                defModify.resolve();\n\t                /**\n\t                 * Indicate that the remote party has accepted our invitation to begin renegotiating media.\n\t                 * @event respoke.PeerConnection#modify-accept\n\t                 * @type {respoke.Event}\n\t                 * @property {string} name - the event name.\n\t                 * @property {respoke.PeerConnection}\n\t                 */\n\t                that.fire('modify-accept', {signal: evt.signal});\n\t            }\n\t            return;\n\t        } else if (evt.signal.action === 'reject') {\n\t            if (defModify.promise.isPending()) {\n\t                err = new Error(\"Remote party cannot negotiate.\");\n\t                log.debug(err.message);\n\t                defModify.reject(err);\n\t                /**\n\t                 * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n\t                 * @event respoke.PeerConnection#modify-reject\n\t                 * @type {respoke.Event}\n\t                 * @property {Error} err\n\t                 * @property {string} name - the event name.\n\t                 * @property {respoke.PeerConnection}\n\t                 */\n\t                that.fire('modify-reject', {err: err});\n\t            }\n\t            return;\n\t        }\n\t\n\t        // This code only gets executed if signal.action === 'initiate'\n\t        if (defModify && defModify.promise.isPending()) {\n\t            // TODO compare signal request ID and accept if we have the higher request ID,\n\t            // reject if we have the lower request ID.\n\t            err = new Error(\"Got modify in a negotiating state.\");\n\t            log.debug(err.message);\n\t            defModify.reject(err);\n\t            /**\n\t             * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n\t             * @event respoke.PeerConnection#modify-reject\n\t             * @type {respoke.Event}\n\t             * @property {Error} err\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('modify-reject', {err: err});\n\t            signalModify({\n\t                action: 'reject',\n\t                call: that.call\n\t            });\n\t            return;\n\t        }\n\t\n\t        defModify = Q.defer();\n\t\n\t        if (!that.state.sentSDP || that.state.isState('idle')) {\n\t            err = new Error(\"Got modify in a precall state.\");\n\t            /**\n\t             * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n\t             * @event respoke.PeerConnection#modify-reject\n\t             * @type {respoke.Event}\n\t             * @property {Error} err\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.PeerConnection}\n\t             */\n\t            that.fire('modify-reject', {err: err});\n\t            signalModify({\n\t                action: 'reject',\n\t                call: that.call\n\t            });\n\t            defModify.reject(err);\n\t            return;\n\t        }\n\t\n\t        /**\n\t         * Indicate that the remote party has accepted our invitation to begin renegotiating media.\n\t         * @event respoke.PeerConnection#modify-accept\n\t         * @type {respoke.Event}\n\t         * @property {object} signal\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.PeerConnection}\n\t         */\n\t        that.fire('modify-accept', {signal: evt.signal});\n\t        signalModify({\n\t            action: 'accept',\n\t            call: that.call\n\t        });\n\t        defModify.resolve();\n\t    }\n\t\n\t    /**\n\t     * Save the candidate. If we initiated the call, place the candidate into the queue so\n\t     * we can process them after we receive the answer.\n\t     * @memberof! respoke.PeerConnection\n\t     * @method respoke.PeerConnection.addRemoteCandidate\n\t     * @param {object} params\n\t     * @param {RTCIceCandidate} params.candidate\n\t     */\n\t    that.addRemoteCandidate = function (params) {\n\t        if (!pc && (that.state.sentSDP || that.state.receivedSDP)) { // we hung up.\n\t            return;\n\t        }\n\t\n\t        if (!params || !params.candidate || !params.candidate.hasOwnProperty('sdpMLineIndex')) {\n\t            log.warn(\"addRemoteCandidate got wrong format!\", params);\n\t            return;\n\t        }\n\t\n\t        candidateReceivingQueue.push(params);\n\t    };\n\t\n\t    that.call.listen('signal-answer', listenAnswer, true);\n\t    that.call.listen('signal-connected', listenConnected, true);\n\t    that.call.listen('signal-modify', listenModify, true);\n\t\n\t    return that;\n\t}; // End respoke.PeerConnection\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar respoke = __webpack_require__(1);\n\tvar log = respoke.log;\n\tvar Statechart = __webpack_require__(20);\n\tvar Q = __webpack_require__(8);\n\t\n\t/**\n\t * State machine for WebRTC calling, data channels, and screen sharing.\n\t * NOTE: All state transitions are synchronous! However, listeners to the events this class fires will be called\n\t * asynchronously.\n\t * @class respoke.CallState\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {respoke.Call} call\n\t * @link https://cdn.respoke.io/respoke.min.js\n\t * @returns {respoke.CallState}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var fsm;\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    that.className = 'respoke.CallState';\n\t    delete that.instanceId;\n\t\n\t    var client = respoke.getClient(instanceId);\n\t    var allTimers = [];\n\t    var answerTimer;\n\t    var answerTimeout = params.answerTimeout || 10000;\n\t    var receiveAnswerTimer;\n\t    var receiveAnswerTimeout = params.receiveAnswerTimeout || 60000;\n\t    var connectionTimer;\n\t    var connectionTimeout = params.connectionTimeout || 10000;\n\t    var modifyTimer;\n\t    var modifyTimeout = params.modifyTimeout || 60000;\n\t    var oldRole;\n\t\n\t    /*!\n\t     * These can quite often result in a condition in which they do not cause a transition to occur.\n\t     * There is at least one \"universal\" (air quotes) event which probably? shouldn't? but may\n\t     * result in a non-transition error when it's OK, and that is the 'reject' event.\n\t     */\n\t    var nontransitionEvents = ['receiveLocalMedia', 'receiveRemoteMedia', 'approve', 'answer', 'sentOffer',\n\t        'receiveAnswer'];\n\t\n\t    function assert(condition) {\n\t        if (!condition) {\n\t            throw new Error(\"Assertion failed.\");\n\t        }\n\t    }\n\t\n\t    that.hasLocalMediaApproval = false;\n\t    that.hasLocalMedia = false;\n\t    that.receivedBye = false;\n\t    that.isAnswered = false;\n\t    that.sentSDP = false;\n\t    that.receivedSDP = false;\n\t    that.processedRemoteSDP = false;\n\t    that.needDirectConnection = !!that.needDirectConnection;\n\t    that.sendOnly = !!that.sendOnly;\n\t    that.receiveOnly = !!that.receiveOnly;\n\t\n\t    // Event\n\t    var rejectEvent = [{\n\t        target: 'connected',\n\t        guard: function (params) {\n\t            // we have any media flowing or data channel open\n\t            if (typeof oldRole === 'boolean') {\n\t                // Reset the role if we have aborted a modify.\n\t                that.caller = oldRole;\n\t            }\n\t\n\t            if (modifyTimer) {\n\t                modifyTimer.clear();\n\t            }\n\t\n\t            return that.hasMedia();\n\t        }\n\t    }, {\n\t        target: 'terminated',\n\t        guard: function (params) {\n\t            params = params || {};\n\t            // we have no media flowing or data channel open\n\t            that.hangupReason = params.reason || \"no media\";\n\t            return !that.hasMedia();\n\t        }\n\t    }];\n\t\n\t    // Event\n\t    function rejectModify() {\n\t        // reject modification\n\t        if (modifyTimer) {\n\t            modifyTimer.clear();\n\t        }\n\t    }\n\t\n\t    // Event\n\t    function clearReceiveAnswerTimer() {\n\t        that.processedRemoteSDP = true;\n\t        if (receiveAnswerTimer) {\n\t            receiveAnswerTimer.clear();\n\t        }\n\t    }\n\t\n\t    // Event\n\t    var hangupEvent = {\n\t        target: 'terminated',\n\t        action: function (params) {\n\t            params = params || {};\n\t            that.signalBye = params.signal;\n\t            that.hangupReason = that.hangupReason || params.reason || \"none\";\n\t        }\n\t    };\n\t\n\t    function needToObtainMedia() {\n\t        return (\n\t            that.needDirectConnection !== true &&\n\t            that.receiveOnly !== true &&\n\t            that.hasLocalMedia !== true\n\t        );\n\t    }\n\t\n\t    function needToApproveDirectConnection(params) {\n\t        return (that.needDirectConnection === true && typeof params.previewLocalMedia === 'function');\n\t    }\n\t\n\t    function automaticOffering(params) {\n\t        if (that.caller !== true) {\n\t            return false;\n\t        }\n\t\n\t        // TODO: this will need to be change with media negotiation\n\t        if ((!that.needDirectConnection && that.receiveOnly) || that.hasLocalMedia) {\n\t            return true;\n\t        }\n\t        return (that.needDirectConnection === true && typeof params.previewLocalMedia !== 'function');\n\t    }\n\t\n\t    function hasListener() {\n\t        if ((client.hasListeners('call') && !that.needDirectConnection) ||\n\t                (client.hasListeners('direct-connection') && that.needDirectConnection)) {\n\t            return true;\n\t        } else {\n\t            return false;\n\t        }\n\t    }\n\t\n\t    function createTimer(func, name, time) {\n\t        var id = setTimeout(function () {\n\t            id = null;\n\t            log.error((that.caller ? \"caller's\" : \"callee's\"), name, \"timer expired.\");\n\t            func();\n\t        }, time);\n\t        log.debug('setting timer', name, 'for', time / 1000, 'secs');\n\t        var timer  = {\n\t            name: name,\n\t            clear: function () {\n\t                if (id === null) {\n\t                    return;\n\t                }\n\t                log.debug('clearing', (that.caller ? \"caller's\" : \"callee's\"), 'timer', name);\n\t                clearTimeout(id);\n\t                id = null;\n\t            }\n\t        };\n\t        allTimers.push(timer);\n\t        return timer;\n\t    }\n\t\n\t    var stateParams = {\n\t        initialState: 'idle',\n\t        states: {\n\t            // State\n\t            idle: {\n\t                // Event\n\t                exit: function () {\n\t                    that.fire('idle:exit');\n\t                },\n\t                // Event\n\t                initiate: [{\n\t                    target: 'negotiatingContainer',\n\t                    guard: function (params) {\n\t                        assert(typeof params.caller === 'boolean');\n\t                        return (params.caller === true || hasListener());\n\t                    }\n\t                }, {\n\t                    target: 'terminated',\n\t                    guard: function (params) {\n\t                        return (params.caller !== true && !hasListener());\n\t                    }\n\t                }],\n\t                receiveLocalMedia: function () {\n\t                    that.hasLocalMedia = true;\n\t                },\n\t                // Event\n\t                receiveOffer: {\n\t                    action: function (params) {\n\t                        that.receivedSDP = true;\n\t                    }\n\t                },\n\t                // Event\n\t                hangup: hangupEvent\n\t            },\n\t            // State\n\t            negotiatingContainer: {\n\t                init: \"preparing\",\n\t                // Event\n\t                hangup: hangupEvent,\n\t                // Event\n\t                modify: rejectModify,\n\t                // Event\n\t                receiveLocalMedia: function () {\n\t                    that.hasLocalMedia = true;\n\t                },\n\t                states: {\n\t                    preparing: {\n\t                        // Event\n\t                        entry: {\n\t                            action: function () {\n\t                                that.hasLocalMediaApproval = false;\n\t                                that.hasLocalMedia = false;\n\t                                that.sentSDP = false;\n\t                                that.receivedSDP = false;\n\t                                that.processedRemoteSDP = false;\n\t                                that.isAnswered = false;\n\t                                if (!that.isModifying()) {\n\t                                    answerTimer = createTimer(function () {\n\t                                        that.dispatch('reject', {reason: \"answer own call timer \" + that.caller});\n\t                                    }, 'answer own call', answerTimeout);\n\t                                }\n\t                                that.fire('preparing:entry');\n\t                            }\n\t                        },\n\t                        // Event\n\t                        exit: function () {\n\t                            that.fire('preparing:exit');\n\t                            if (answerTimer) {\n\t                                answerTimer.clear();\n\t                            }\n\t                        },\n\t                        // Event\n\t                        reject: rejectEvent,\n\t                        // Event\n\t                        receiveOffer: {\n\t                            action: function (params) {\n\t                                that.receivedSDP = true;\n\t                                if (that.isAnswered) {\n\t                                    // If we get here, we are the callee and we've answered the call before the call\n\t                                    // creation/receive offer promise chain completed.\n\t                                    setTimeout(function () {\n\t                                        that.dispatch('answer', params);\n\t                                    });\n\t                                }\n\t                            }\n\t                        },\n\t                        // Event\n\t                        answer: [{\n\t                            action: function (params) {\n\t                                assert(!params.previewLocalMedia || typeof params.previewLocalMedia === 'function');\n\t                                that.isAnswered = true;\n\t                                if (typeof params.previewLocalMedia !== 'function') {\n\t                                    that.hasLocalMediaApproval = true;\n\t                                }\n\t                            }\n\t                        }, {\n\t                            // we are going to send media\n\t                            target: 'approvingDeviceAccess',\n\t                            guard: needToObtainMedia\n\t                        }, {\n\t                            // we are sending a direct connection & developer wants to approve\n\t                            target: 'approvingContent',\n\t                            guard: needToApproveDirectConnection\n\t                        }, {\n\t                            target: 'offering',\n\t                            guard: automaticOffering\n\t                        }, {\n\t                            // we are not sending anything or developer does not want to approve media.\n\t                            target: 'connecting',\n\t                            guard: function (params) {\n\t                                // caller will always answer before sending offer.\n\t                                // callee will usually answer after receiving offer if media is requested.\n\t                                if (!that.receivedSDP) {\n\t                                    return false;\n\t                                }\n\t\n\t                                if (needToObtainMedia() || needToApproveDirectConnection(params) ||\n\t                                        automaticOffering(params)) {\n\t                                    return false;\n\t                                }\n\t\n\t                                if (!params.previewLocalMedia || that.receiveOnly) {\n\t                                    setTimeout(function () {\n\t                                        params.approve();\n\t                                    });\n\t                                }\n\t                                return (that.receiveOnly === true || that.needDirectConnection === true);\n\t                            }\n\t                        }]\n\t                    },\n\t                    // State\n\t                    gettingMedia: {\n\t                        reject: rejectEvent,\n\t                        // Event\n\t                        receiveLocalMedia: [{\n\t                            action: function () {\n\t                                that.hasLocalMedia = true;\n\t                            }\n\t                        }, {\n\t                            target: 'offering',\n\t                            guard: function (params) {\n\t                                return (that.caller === true && that.hasLocalMediaApproval === true &&\n\t                                    that.hasLocalMedia === true);\n\t                            }\n\t                        }, {\n\t                            target: 'connecting',\n\t                            guard: function (params) {\n\t                                return (that.caller === false && that.hasLocalMediaApproval === true &&\n\t                                    that.hasLocalMedia === true);\n\t                            }\n\t                        }],\n\t                        states: {\n\t                            // State\n\t                            approvingDeviceAccess: {\n\t                                // Event\n\t                                entry: function () {\n\t                                    that.fire('approving-device-access:entry');\n\t                                },\n\t                                // Event\n\t                                approve: [{\n\t                                    target: 'approvingContent',\n\t                                    guard: function (params) {\n\t                                        return (typeof params.previewLocalMedia === 'function');\n\t                                    }\n\t                                }, {\n\t                                    target: 'connecting',\n\t                                    guard: function (params) {\n\t                                        return (that.caller === false &&\n\t                                            (that.hasLocalMedia === true || that.needDirectConnection === true) &&\n\t                                            typeof params.previewLocalMedia !== 'function');\n\t                                    }\n\t                                }, {\n\t                                    target: 'offering',\n\t                                    guard: function (params) {\n\t                                        return (that.caller === true && that.hasLocalMedia === true &&\n\t                                            typeof params.previewLocalMedia !== 'function');\n\t                                    }\n\t                                }]\n\t                            },\n\t                            // State\n\t                            approvingContent: {\n\t                                // Event\n\t                                entry: function () {\n\t                                    that.fire('approving-content:entry');\n\t                                },\n\t                                // Event\n\t                                exit: function () {\n\t                                    that.fire('approving-content:exit');\n\t                                },\n\t                                // Event\n\t                                approve: [function (params) {\n\t                                    that.hasLocalMediaApproval = true;\n\t                                }, {\n\t                                    target: 'offering',\n\t                                    guard: function (params) {\n\t                                        return (that.caller === true && that.hasLocalMedia === true);\n\t                                    }\n\t                                }, {\n\t                                    target: 'connecting',\n\t                                    guard: function (params) {\n\t                                        return (that.caller === false && that.hasLocalMedia === true);\n\t                                    }\n\t                                }]\n\t                            }\n\t                        }\n\t                    },\n\t                    // State\n\t                    offeringContainer: {\n\t                        init: 'offering',\n\t                        reject: rejectEvent,\n\t                        sentOffer: function () {\n\t                            // start answer timer\n\t                            receiveAnswerTimer = createTimer(function () {\n\t                                that.dispatch('reject', {reason: \"receive answer timer\"});\n\t                            }, 'receive answer', receiveAnswerTimeout);\n\t                        },\n\t                        states: {\n\t                            offering: {\n\t                                // Event\n\t                                entry: function () {\n\t                                    that.fire('offering:entry');\n\t                                },\n\t                                // Event\n\t                                exit: function () {\n\t                                    that.fire('offering:exit');\n\t                                },\n\t                                // Event\n\t                                receiveLocalMedia: [function () {\n\t                                    that.hasLocalMedia = true;\n\t                                }, {\n\t                                    target: 'connected',\n\t                                    guard: function (params) {\n\t                                        // for direct connection, local media is the same as remote media\n\t                                        return (that.needDirectConnection === true);\n\t                                    }\n\t                                }],\n\t                                // Event\n\t                                receiveRemoteMedia: {\n\t                                    target: 'connected'\n\t                                },\n\t                                // Event\n\t                                receiveAnswer: [clearReceiveAnswerTimer, {\n\t                                    target: 'connecting'\n\t                                }]\n\t                            }\n\t                        }\n\t                    },\n\t                    // State\n\t                    connectingContainer: {\n\t                        init: 'connecting',\n\t                        reject: rejectEvent,\n\t                        receiveAnswer: clearReceiveAnswerTimer,\n\t                        states: {\n\t                            connecting: {\n\t                                // Event\n\t                                entry: function () {\n\t                                    that.fire('connecting:entry');\n\t\n\t                                    // set connection timer\n\t                                    connectionTimer = createTimer(function () {\n\t                                        that.dispatch('reject', {reason: \"connection timer\"});\n\t                                    }, 'connection', connectionTimeout);\n\t                                },\n\t                                // Event\n\t                                exit: function () {\n\t                                    if (connectionTimer) {\n\t                                        connectionTimer.clear();\n\t                                    }\n\t                                    if (modifyTimer) {\n\t                                        modifyTimer.clear();\n\t                                    }\n\t                                    that.fire('connecting:exit');\n\t                                },\n\t                                // Event\n\t                                receiveLocalMedia: [{\n\t                                    action: function () {\n\t                                        that.hasLocalMedia = true;\n\t                                    }\n\t                                }, {\n\t                                    target: 'connected',\n\t                                    guard: function (params) {\n\t                                        // for direct connection, local media is the same as remote media\n\t                                        return (that.needDirectConnection === true && that.caller === false);\n\t                                    }\n\t                                }],\n\t                                // Event\n\t                                receiveRemoteMedia: {\n\t                                    target: 'connected'\n\t                                }\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            },\n\t            // State\n\t            // This state is for when we are in limbo between connected and negotiating and we are\n\t            // trying to figure out if the other side will allow us to modify. If we receive modify in\n\t            // this state, we will reject it. If the other party is in connected, we will be able to modify.\n\t            modifyingContainer: {\n\t                init: 'modifying',\n\t                reject: rejectEvent,\n\t                // Event\n\t                modify: rejectModify,\n\t                // Event\n\t                hangup: hangupEvent,\n\t                states: {\n\t                    modifying: {\n\t                        // Event\n\t                        entry: function () {\n\t                            modifyTimer = createTimer(function () {\n\t                                that.dispatch('reject', {reason: \"modify timer\"});\n\t                            }, 'modify for caller', modifyTimeout);\n\t                            that.fire('modifying:entry');\n\t                        },\n\t                        // Event\n\t                        accept: [function () {\n\t                            that.caller = true;\n\t                        }, {\n\t                            target: 'preparing'\n\t                        }],\n\t                        // Event\n\t                        exit: function () {\n\t                            that.fire('modifying:exit');\n\t                        }\n\t                    }\n\t                }\n\t            },\n\t            // State\n\t            connectedContainer: {\n\t                init: 'connected',\n\t                reject: {\n\t                    target: 'terminated',\n\t                    action: function (params) {\n\t                        that.hangupReason = params.reason || \"got reject while connected\";\n\t                    }\n\t                },\n\t                receiveAnswer: clearReceiveAnswerTimer,\n\t                // Event\n\t                hangup: hangupEvent,\n\t                states: {\n\t                    connected: {\n\t                        // Event\n\t                        entry: function () {\n\t                            oldRole = that.caller;\n\t                            that.needDirectConnection = false;\n\t                            that.fire('connected:entry');\n\t                        },\n\t                        // Event\n\t                        exit: function () {\n\t                            that.fire('connected:exit');\n\t                        },\n\t                        // Event\n\t                        modify: [{\n\t                            // be notified that the other side would like modification\n\t                            target: 'preparing',\n\t                            guard: function (params) {\n\t                                params = params || {};\n\t                                if (params.receive === true) {\n\t                                    that.caller = false;\n\t                                    modifyTimer = createTimer(function () {\n\t                                        // If modify gets interrupted, go back to previous roles.\n\t                                        that.dispatch('reject', {reason: \"modify timer\"});\n\t                                    }, 'modify', modifyTimeout);\n\t                                    return true;\n\t                                }\n\t                            }\n\t                        }, {\n\t                            // request to begin modification\n\t                            target: 'modifying',\n\t                            guard: function (params) {\n\t                                params = params || {};\n\t                                return (params.receive !== true);\n\t                            }\n\t                        }]\n\t                    }\n\t                }\n\t            },\n\t            // State\n\t            terminatedContainer: {\n\t                init: 'terminated',\n\t                states: {\n\t                    terminated: {\n\t                        // Event\n\t                        entry: {\n\t                            action: function () {\n\t                                that.fire('terminated:entry');\n\t                                allTimers.forEach(function (timer) {\n\t                                    timer.clear();\n\t                                });\n\t                                setTimeout(function () {\n\t                                    fsm = null;\n\t                                    that.ignore();\n\t                                });\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    };\n\t\n\t    stateParams.that = Object.create(Statechart);\n\t    fsm = respoke.Class(stateParams);\n\t    fsm.run({\n\t        // rename to 'debug' to enable\n\t        debugOff: function () {\n\t            // So we can print the caller. Debug most often used when testing & tests run in the same tab.\n\t            var args = Array.prototype.slice.call(arguments);\n\t            args.splice(0, 0, that.caller);\n\t            log.debug.apply(log, args);\n\t        }\n\t    });\n\t\n\t    /**\n\t     * Return the name of the current state.\n\t     * @memberof! respoke.CallState\n\t     * @method respoke.Call.getState\n\t     * @returns {string}\n\t     */\n\t    that.getState = function () {\n\t        if (!fsm) {\n\t            return 'terminated';\n\t        }\n\t        return fsm.currentState().name;\n\t    };\n\t\n\t    /**\n\t     * Synchronously dispatch an event, which may or may not change the state.\n\t     * @memberof! respoke.CallState\n\t     * @method respoke.Call.dispatch\n\t     */\n\t    that.dispatch = function (evt, args) {\n\t        var oldState;\n\t        var newState;\n\t\n\t        if (!fsm) {\n\t            return;\n\t        }\n\t\n\t        oldState = that.getState();\n\t        try {\n\t            fsm.dispatch(evt, args);\n\t        } catch (err) {\n\t            log.debug('error dispatching', evt, 'from', oldState, \"with\", args, err);\n\t            throw err;\n\t        }\n\t        newState = that.getState();\n\t        if (oldState === newState && nontransitionEvents.indexOf(evt) === -1) {\n\t            log.debug(that.caller, \"Possible bad event \" + evt + \", no transition occured.\");\n\t        }\n\t        log.debug(that.caller, 'dispatching', evt, 'moving from ', oldState, 'to', newState, args);\n\t    };\n\t\n\t    /**\n\t     * Determine whether or not we are in the middle of a call modification.\n\t     * @memberof! respoke.CallState\n\t     * @method respoke.Call.isModifying\n\t     * @returns {boolean}\n\t     */\n\t    that.isModifying = function () {\n\t        var modifyingStates = ['preparing', 'modifying', 'approvingDeviceAccess', 'approvingMedia', 'offering'];\n\t        return (modifyingStates.indexOf(that.getState()) > -1 && that.hasMedia());\n\t    };\n\t\n\t    /**\n\t     * Helper for testing state name\n\t     * @memberof! respoke.CallState\n\t     * @method respoke.Call.isState\n\t     * @param {string} name\n\t     * @returns {boolean}\n\t     */\n\t    that.isState = function (name) {\n\t        return (that.getState() === name);\n\t    };\n\t\n\t    assert(typeof that.hasMedia === 'function');\n\t    assert(typeof that.caller === 'boolean');\n\t    return that;\n\t};\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Copyright (c) 2010 David Durman\n\t//\n\t// The contents of this file are subject to the MIT License (the \"License\");\n\t// you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\t// http://opensource.org/licenses/MIT.\n\t//\n\t// This hierarchical state machine implementation has been inspired\n\t// by the QP active object framework, see http://www.state-machine.com/\n\t\n\t\n\t(function(root, factory){\n\t    \"use strict\";\n\t\n\t    if (true) {\n\t\n\t        // Node. Does not work with strict CommonJS, but\n\t        // only CommonJS-like enviroments that support module.exports,\n\t        // like Node.\n\t        module.exports = factory();\n\t\n\t    } else if (typeof define === 'function' && define.amd) {\n\t\n\t        // AMD. Register as an anonymous module.\n\t        define(factory);\n\t\n\t    } else {\n\t\n\t        // Browser globals (root is window)\n\t        root.Statechart = factory();\n\t    }\n\t\n\t}(this, function(){\n\t\n\t    \"use strict\";\n\t\n\t    var assert = function(assertion){\n\t        if (!assertion) {\n\t            throw new Error(\"Assertion failed.\");\n\t        }\n\t    };\n\t\n\t\n\t    // Statechart.\n\t    // -----------\n\t\n\t    // `myState` - the current state\n\t    // `mySource` - the source of the current transition\n\t\n\t    var Statechart = {\n\t\n\t        run: function(opt){\n\t            opt = opt || {};\n\t            this.debug = opt.debug ? opt.debug : function(){};\n\t            this.construct(this.initialState);\n\t            this.init(null);\n\t        },\n\t\n\t        construct: function(initialState){\n\t            this.myState = this.top();\n\t            this.mySource = this.state(\"Initial\");\n\t\n\t            // Initial pseudo-state\n\t            this.states.Initial = {\n\t                empty: function(){\n\t                    this.newInitialState(initialState);\n\t                }\n\t            };\n\t            var handled = function(){ return null; };\n\t\n\t            // TOP state\n\t            this.states.TOP = {\n\t                entry: handled,\n\t                exit:  handled,\n\t                init:  handled,\n\t                empty: handled\n\t            };\n\t            this.flatten();\n\t        },\n\t\n\t        // Trigger the initial transition and recursively enter the submachine of the top state.\n\t        // Must be called only once for a given Statechart before dispatching any events to it.\n\t        init: function(anEventOrNull){\n\t            assert(this.myState === this.top() && this.mySource !== null);\n\t            var s = this.myState;    // save top in temp\n\t            this.mySource.trigger(anEventOrNull);    // topmost initial transition\n\t            assert(s.equals(this.myState.superstate()));    // verify that we only went one level deep\n\t            s = this.myState;\n\t            s.enter();\n\t            while (s.init() === null) {    // while init is handled (i.e. till we reach a leaf node)\n\t                assert(s.equals(this.myState.superstate()));    // verify that we only went one level deep\n\t                s = this.myState;\n\t                s.enter();\n\t            }\n\t        },\n\t\n\t        state: function(stateOrName){\n\t            return (stateOrName && stateOrName instanceof QState) ? stateOrName : new QState(this, stateOrName);\n\t        },\n\t\n\t        top: function(stateOrName){\n\t            // create the top state only once and store it to an auxiliary property\n\t            return (this._topState || (this._topState = new QState(this, \"TOP\")));\n\t        },\n\t\n\t        currentState: function(){\n\t            return this.myState;\n\t        },\n\t\n\t        flatten: function(){\n\t            this.statesTable = this.statesTable || {};\n\t            this._flatten(this.states, this.top().name);\n\t        },\n\t\n\t        _flatten: function(states, parent){\n\t            if (!states) {\n\t                return;\n\t            }\n\t\n\t            for (var state in states) {\n\t                if (states.hasOwnProperty(state)) {\n\t                    this.statesTable[state] = states[state];\n\t                    this.statesTable[state].parent = parent;\n\t                    this._flatten(states[state].states, state);\n\t                }\n\t            }\n\t        },\n\t\n\t        selectState: function(stateName){\n\t            return this.statesTable[stateName];\n\t        },\n\t\n\t        dispatchEvent: function(anEvent, state, act){\n\t            act = act || state[anEvent.type];\n\t\n\t            // Action might also be an array in which case it is assumed that evaluating guards decides\n\t            // which target to enter.\n\t            if (act instanceof Array) {\n\t                for (var i = 0; i < act.length; i++) {\n\t                    this.dispatchEvent(anEvent, state, act[i]);\n\t                }\n\t            }\n\t\n\t            // @todo This is terrible edge case used just for more fancy Statechart representation\n\t            // It allows using \"MyState\": { init: \"MySubState\", ... } intead of\n\t            // \"MyState\": { init: function(){ this.newInitialState(\"MySubState\"); }, ... }\n\t            // In some cases the latter form can be useful for better control of the Statechart\n\t            if (anEvent.type === \"init\" && typeof act === \"string\") {\n\t                this.newInitialState(act);\n\t                return null; // handled\n\t            }\n\t\n\t            if (act instanceof Function){\n\t                act.call(this, anEvent.args);\n\t                return null;  // handled\n\t            } else if (act) {\n\t                // no guard at all or the guard condition is met\n\t                if (!act.guard || (act.guard && act.guard.call(this, anEvent.args))){\n\t                    if (act.action) {\n\t                        act.action.call(this, anEvent.args);\n\t                    }\n\t                    if (act.target) {\n\t                        this.newState(act.target);\n\t                    }\n\t                    return null;  // handled\n\t                }\n\t            } else {        // act is undefined (no handler in state for anEvent)\n\t                if (state === this.selectState(\"TOP\")) {\n\t                    this.handleUnhandledEvent(anEvent); // not-handled\n\t                    return null;    // handled (TOP state handles all events)\n\t                }\n\t            }\n\t            return this.state(state.parent); // not-handled\n\t        },\n\t\n\t        // Override this when needed.\n\t        handleUnhandledEvent: function(anEvent){\n\t            this.debug(\"Unhandled event: \" + anEvent.type);\n\t            return null;\n\t        },\n\t\n\t        // Traverse the state hierarchy starting from the currently active state myState.\n\t        // Advance up the state hierarchy (i.e., from substates to superstates), invoking all\n\t        // the state handlers in succession. At each level of state nesting, it intercepts the value\n\t        // returned from a state handler to obtain the superstate needed to advance to the next level.\n\t        dispatch: function(anEvent, args){\n\t            if (!anEvent || !(anEvent instanceof QEvent)) {\n\t                anEvent = new QEvent(anEvent, args);\n\t            }\n\t            this.mySource = this.myState;\n\t            while (this.mySource) {\n\t                this.mySource = this.mySource.trigger(anEvent);\n\t            }\n\t        },\n\t\n\t        // Performs dynamic transition. (macro Q_TRAN_DYN())\n\t        newState: function(aStateName){\n\t            this.transition(this.state(aStateName));\n\t        },\n\t\n\t        // Used by handlers only in response to the #init event. (macro Q_INIT())\n\t        // USAGE: return this.newInitialState(\"whatever\");\n\t        // @return null for convenience\n\t\n\t        newInitialState: function(aStateOrName){\n\t            this.myState = this.state(aStateOrName);\n\t            return null;\n\t        },\n\t\n\t        // Dynamic transition. (Q_TRAN_DYN())\n\t        transition: function(target){\n\t            assert(!target.equals(this.top()));\n\t\n\t            var entry = [];\n\t            var mySource = this.mySource;\n\t            var s = this.myState;\n\t\n\t            // exit all the nested states between myState and mySource\n\t            assert(s !== null);\n\t            assert(mySource !== null);\n\t            while (!s.equals(mySource)) {\n\t                s = s.exit() || s.superstate();\n\t            }\n\t\n\t            // check all seven possible source/target state combinations\n\t\n\t\t    entry.push(target);\n\t\n\t            // (a) mySource == target (self transition)\n\t            if (mySource.equals(target)) {\n\t                mySource.exit();\n\t                return this.enterVia(target, entry);\n\t            }\n\t\n\t            // (b) mySource == target.superstate (one level deep)\n\t            var p = target.superstate();\n\t            if (mySource.equals(p)) {\n\t                return this.enterVia(target, entry);\n\t            }\n\t\n\t            assert(mySource !== null);\n\t\n\t            // (c) mySource.superstate == target.superstate (most common - fsa)\n\t            var q = mySource.superstate();\n\t            if (q.equals(p)) {\n\t                mySource.exit();\n\t                return this.enterVia(target, entry);\n\t            }\n\t\n\t            // (d) mySource.superstate == target (one level up)\n\t            if (q.equals(target)) {\n\t                mySource.exit();\n\t                entry.pop();    // do not enter the LCA\n\t                return this.enterVia(target, entry);\n\t            }\n\t\n\t            // (e) mySource == target.superstate.superstate... hierarchy (many levels deep)\n\t\t    entry.push(p);\n\t            s = p.superstate();\n\t            while (s !== null) {\n\t                if (mySource.equals(s)) {\n\t                    return this.enterVia(target, entry);\n\t                }\n\t\n\t\t\tentry.push(s);\n\t                s = s.superstate();\n\t            }\n\t\n\t            // otherwise we're definitely exiting mySource\n\t            mySource.exit();\n\t\n\t            // entry array is complete, save its length to avoid computing it repeatedly\n\t            var entryLength = entry.length;\n\t\n\t            // (f) mySource.superstate == target.superstate.superstate... hierarchy\n\t            var lca;\n\t            for (lca = entryLength - 1; lca >= 0; lca -= 1) {\n\t                if (q.equals(entry[lca])) {\n\t                    return this.enterVia(target, entry.slice(0, lca)); // do not enter lca\n\t                }\n\t            }\n\t\n\t            // (g) each mySource.superstate.superstate... for each target.superstate.superstate...\n\t            s = q;\n\t            while (s !== null) {\n\t                for (lca = entryLength - 1; lca >= 0; lca -= 1) {\n\t                    if (s.equals(entry[lca])) {\n\t                        return this.enterVia(target, entry.slice(0, lca)); // do not enter lca\n\t                    }\n\t                }\n\t                s.exit();\n\t                s = s.superstate();\n\t            }\n\t        },\n\t\n\t        // tail of transition()\n\t        // We are in the LCA of mySource and target.\n\t        enterVia: function(target, entry){\n\t\n\t            // retrace the entry path in reverse order\n\t            var idx = entry.length;\n\t            while (idx > 0) {\n\t                idx--;\n\t                entry[idx].enter();\n\t            }\n\t\n\t            this.myState = target;\n\t            while (target.init() === null) {\n\t                // initial transition must go one level deep\n\t                assert(target.equals(this.myState.superstate()));\n\t                target = this.myState;\n\t                target.enter();\n\t            }\n\t        }\n\t    };\n\t\n\t    // QState.\n\t    // -------\n\t\n\t    function QState(fsm, name){\n\t        this.fsm = fsm;\n\t        this.name = name;\n\t    }\n\t\n\t    QState.prototype = {\n\t        equals: function(state){\n\t            return (this.name === state.name && this.fsm === state.fsm);\n\t        },\n\t\n\t        dispatchEvent: function(anEvent, state){\n\t            return this.fsm.dispatchEvent(anEvent, state);\n\t        },\n\t\n\t        trigger: function(anEvent){\n\t            var evt = anEvent || QEventEmpty;\n\t            var state = this.fsm.selectState(this.name);\n\t            return this.dispatchEvent(evt, state);\n\t        },\n\t\n\t        enter: function(){\n\t            this.fsm.debug(\"[\" + this.name + \"] enter\");\n\t            return this.trigger(QEventEntry);\n\t        },\n\t\n\t        exit: function(){\n\t            this.fsm.debug(\"[\" + this.name + \"] exit\");\n\t            return this.trigger(QEventExit);\n\t        },\n\t\n\t        init: function(){\n\t            this.fsm.debug(\"[\" + this.name + \"] init\");\n\t            return this.trigger(QEventInit);\n\t        },\n\t\n\t        // Answer my superstate. Default is to return fsm top state.\n\t        superstate: function(){\n\t            var superstate = this.trigger(QEventEmpty);\n\t            if (superstate && superstate instanceof QState) {\n\t                return superstate;\n\t            }\n\t            superstate = this.fsm.top();\n\t            if (this.name === superstate.name) {\n\t                return null;\n\t            }\n\t            return superstate;\n\t        }\n\t    };\n\t\n\t    // QEvent\n\t    // ------\n\t\n\t    function QEvent(type, args){\n\t        this.type = type;\n\t        this.args = args;\n\t    }\n\t\n\t    // these events are static, they do not carry any arguments\n\t    // -> create them only once\n\t    // moreover, they don't have to be exposed to the outer world\n\t    var QEventEntry = new QEvent(\"entry\");\n\t    var QEventExit = new QEvent(\"exit\");\n\t    var QEventInit = new QEvent(\"init\");\n\t    var QEventEmpty = new QEvent(\"empty\");\n\t\n\t\n\t    return Statechart;\n\t}));\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar Q = __webpack_require__(8);\n\tvar respoke = __webpack_require__(1);\n\tvar log = respoke.log;\n\t\n\t/**\n\t * A `respoke.Call` is Respoke's interface into a WebRTC call, including getUserMedia,\n\t * path and codec negotation, and call state.\n\t * There are several methods on an instance of `respoke.Client` which return a `respoke.Call`.\n\t *\n\t * ```\n\t * var jim = client.getEndpoint({ id: 'jim' });\n\t * var call = jim.startAudioCall();\n\t * ```\n\t *\n\t * @class respoke.Call\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.instanceId - client id\n\t * @param {boolean} params.caller - whether or not we initiated the call\n\t * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t * @param {boolean} [params.sendOnly] - whether or not we send media\n\t * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t * relay servers. If it cannot flow through relay servers, the call will fail.\n\t * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t * required to flow peer-to-peer. If it cannot, the call will fail.\n\t * @param {respoke.Endpoint} params.remoteEndpoint - The endpoint who is being called.\n\t * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint.\n\t * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t * wants to perform an action between local media becoming available and calling approve().\n\t * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n\t * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n\t * @param {function} params.signalReport - Signaling action from SignalingChannel.\n\t * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n\t * @param {Array<RTCConstraints>} params.constraints - Array of WebRTC constraints. This is ignored when\n\t * `params.outgoingMedia` is passed into the Call object.\n\t * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t * media renegotiation.\n\t * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t * element with the local audio and/or video attached.\n\t * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n\t * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n\t * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n\t * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t * This callback will be called when media is muted or unmuted.\n\t * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t * for the user to give permission to start getting audio or video.\n\t * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t * the approval was automatic.\n\t * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n\t * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n\t * granted by the browser without asking the user to approve it.\n\t * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n\t * video attached to it.\n\t * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n\t * @param {respoke.LocalMedia} params.outgoingMedia - Pass in an optional LocalMedia object to override the one that is\n\t * built automatically when establishing the call. When this is defined then any constraints passed to the\n\t * call are ignored since the media object already exists.\n\t * video attached to it.\n\t * @returns {respoke.Call}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var that = respoke.EventEmitter(params);\n\t    delete that.instanceId;\n\t    delete that.outgoingMedia;\n\t\n\t    /**\n\t     * A name to identify the type of object.\n\t     * @memberof! respoke.Call\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Call';\n\t\n\t    /**\n\t     * Whether or not the client is the caller of the call.\n\t     * @memberof! respoke.Call\n\t     * @name caller\n\t     * @type {boolean}\n\t     */\n\t    that.caller = !!that.caller;\n\t    Object.defineProperty(that, \"initiator\", {\n\t        configurable: true,\n\t        enumerable: true,\n\t        get: function () {\n\t            log.warn(\"The call.initiator flag is deprecated. Please use call.caller instead.\");\n\t            return that.caller;\n\t        },\n\t        set: function () {\n\t            // ignore\n\t        }\n\t    });\n\t\n\t    if (!that.caller) {\n\t        // Don't let Respoke.js pass any default constraints if we're accepting the call. We have no freaking clue\n\t        // what kind of media we are expected to provide at this point.\n\t        delete params.constraints;\n\t        that.constraints = [];\n\t    }\n\t\n\t    /**\n\t     * The call ID.\n\t     * @memberof! respoke.Call\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = that.caller ? respoke.makeGUID() : that.id;\n\t\n\t    // log the call id to the console for debugging purposes. Do not change this to `respoke.log`!\n\t    console.log(\"[Respoke] Creating call. id='\" + that.id + \"'\");\n\t\n\t    if (!that.id) {\n\t        throw new Error(\"Can't start a new call without a call id.\");\n\t    }\n\t\n\t    /**\n\t     * Promise used to trigger actions dependant upon having received media or a datachannel.\n\t     * @memberof! respoke.Call\n\t     * @name defMedia\n\t     * @private\n\t     * @type {Promise}\n\t     */\n\t    var defMedia = Q.defer();\n\t    /**\n\t     * Promise used to trigger notification of a request for renegotiating media. For the caller of the\n\t     * renegotiation (which doesn't have to be the same as the caller of the call), this is resolved\n\t     * or rejected as soon as the 'accept' or 'reject' signal is received. For the callee, it is\n\t     * resolved or rejected only after the developer or user approves or rejects the modify.\n\t     * @memberof! respoke.Call\n\t     * @name defModify\n\t     * @private\n\t     * @type {Promise}\n\t     */\n\t    var defModify;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name previewLocalMedia\n\t     * @private\n\t     * @type {respoke.Call.previewLocalMedia}\n\t     */\n\t    var previewLocalMedia = params.previewLocalMedia;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name client\n\t     * @private\n\t     * @type {respoke.getClient}\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name signalingChannel\n\t     * @private\n\t     * @type {respoke.signalingChannel}\n\t     */\n\t    var signalingChannel = params.signalingChannel;\n\t\n\t    /**\n\t     * Informational property. Whether call debugs were enabled on the client during creation.\n\t     * Changing this value will do nothing.\n\t     * @name enableCallDebugReport\n\t     * @type {boolean}\n\t     */\n\t    that.enableCallDebugReport = params.signalingChannel.isSendingReport();\n\t\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name pc\n\t     * @private\n\t     * @type {respoke.PeerConnection}\n\t     */\n\t    var pc = respoke.PeerConnection({\n\t        instanceId: instanceId,\n\t        state: respoke.CallState({\n\t            instanceId: instanceId,\n\t            caller: that.caller,\n\t            needDirectConnection: params.needDirectConnection,\n\t            sendOnly: params.sendOnly,\n\t            receiveOnly: params.receiveOnly,\n\t            // hasMedia is not defined yet.\n\t            hasMedia: function () {\n\t                return that.hasMedia();\n\t            }\n\t        }),\n\t        forceTurn: !!params.forceTurn,\n\t        call: that,\n\t        pcOptions: {\n\t            optional: [\n\t                { DtlsSrtpKeyAgreement: true },\n\t                { RtpDataChannels: false }\n\t            ]\n\t        },\n\t        offerOptions: params.offerOptions || null,\n\t        signalOffer: function (args) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t\n\t            params.signalOffer(args);\n\t            pc.state.dispatch('sentOffer');\n\t        },\n\t        signalConnected: params.signalConnected,\n\t        signalAnswer: params.signalAnswer,\n\t        signalModify: params.signalModify,\n\t        signalHangup: params.signalHangup,\n\t        signalReport: params.signalReport,\n\t        signalCandidate: params.signalCandidate\n\t    });\n\t\n\t    /**\n\t     * Array of streams of local media that we are sending to the remote party.\n\t     * @name outgoingMediaStreams\n\t     * @type {Array<respoke.LocalMedia>}\n\t     */\n\t    that.outgoingMediaStreams = [];\n\t    that.outgoingMediaStreams.hasAudio = function () {\n\t        if (that.outgoingMediaStreams.length === 0) {\n\t            return false;\n\t        }\n\t\n\t        return !that.outgoingMediaStreams.every(function (stream) {\n\t            return stream.getAudioTracks().length === 0;\n\t        });\n\t    };\n\t    that.outgoingMediaStreams.hasVideo = function () {\n\t        if (that.outgoingMediaStreams.length === 0) {\n\t            return false;\n\t        }\n\t\n\t        return !that.outgoingMediaStreams.every(function (stream) {\n\t            return stream.getVideoTracks().length === 0;\n\t        });\n\t    };\n\t\n\t    if (params.outgoingMedia) {\n\t        that.outgoingMediaStreams.push(params.outgoingMedia);\n\t    }\n\t\n\t    /**\n\t     * Local media that we are sending to the remote party. This will be undefined if we are sending no media.\n\t     * This property is just the first item in the `outgoingMediaStreams` array. If multiple streams are present,\n\t     * use that array to find the stream you need instead of relying on this property.\n\t     * @name outgoingMedia\n\t     * @type {respoke.LocalMedia}\n\t     */\n\t    Object.defineProperty(that, \"outgoingMedia\", {\n\t        configurable: false,\n\t        enumerable: true,\n\t        get: function () {\n\t            return that.outgoingMediaStreams[0];\n\t        },\n\t        set: function () {\n\t            // ignore\n\t        }\n\t    });\n\t\n\t    /**\n\t     * Array of streams of remote media that we are receiving from the remote party.\n\t     * @name incomingMediaStreams\n\t     * @type {Array<respoke.RemoteMedia>}\n\t     */\n\t    that.incomingMediaStreams = [];\n\t    that.incomingMediaStreams.hasAudio = function () {\n\t        if (that.incomingMediaStreams.length === 0) {\n\t            return false;\n\t        }\n\t\n\t        return !that.incomingMediaStreams.every(function (stream) {\n\t            return stream.getAudioTracks().length === 0;\n\t        });\n\t    };\n\t    that.incomingMediaStreams.hasVideo = function () {\n\t        if (that.incomingMediaStreams.length === 0) {\n\t            return false;\n\t        }\n\t\n\t        return !that.incomingMediaStreams.every(function (stream) {\n\t            return stream.getVideoTracks().length === 0;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Remote media that we are receiving from the remote party.  This will be undefined if we\n\t     * are receiving no media. This property is just the first item in the `incomingMediaStreams` array. If multiple\n\t     * streams are present, use that array to find the stream you need instead of relying on this property.\n\t     * @name incomingMedia\n\t     * @type {respoke.RemoteMedia}\n\t     */\n\t    Object.defineProperty(that, \"incomingMedia\", {\n\t        configurable: false,\n\t        enumerable: true,\n\t        get: function () {\n\t            return that.incomingMediaStreams[0];\n\t        },\n\t        set: function () {\n\t            // ignore\n\t        }\n\t    });\n\t\n\t    /**\n\t     * A flag indicating whether this call has audio or is expected to have audio coming in from the other side.\n\t     *\n\t     * @name hasAudio\n\t     * @type {boolean}\n\t     */\n\t    Object.defineProperty(that, \"hasAudio\", {\n\t        configurable: false,\n\t        enumerable: true,\n\t        get: that.incomingMediaStreams.hasAudio,\n\t        set: function () {\n\t            // ignore\n\t        }\n\t    });\n\t\n\t    /**\n\t     * A flag indicating whether this call has video or is expected to have video coming in from the other side.\n\t     *\n\t     * @name hasVideo\n\t     * @type {boolean}\n\t     */\n\t    Object.defineProperty(that, \"hasVideo\", {\n\t        configurable: false,\n\t        enumerable: true,\n\t        get: that.incomingMediaStreams.hasVideo,\n\t        set: function () {\n\t            // ignore\n\t        }\n\t    });\n\t\n\t    delete params.signalingChannel;\n\t    delete that.signalingChannel;\n\t\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name videoIsMuted\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var videoIsMuted = false;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name audioIsMuted\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var audioIsMuted = false;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name directConnection\n\t     * @private\n\t     * @type {respoke.DirectConnection}\n\t     */\n\t    var directConnection = null;\n\t    /**\n\t     * @memberof! respoke.Call\n\t     * @name toSendHangup\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var toSendHangup = null;\n\t\n\t    /**\n\t     * Set up promises. If we're not the caller, we need to listen for approval AND the remote SDP to come in\n\t     * before we can act on the call. Save parameters sent in with the constructor, then delete them off the call.\n\t     * If this call was initiated with a DirectConnection, set it up so answer() will be the approval mechanism.\n\t     * @method respoke.Call.init\n\t     * @memberof! respoke.Call\n\t     * @fires respoke.Client#call\n\t     * @private\n\t     */\n\t    function init() {\n\t        log.debug('Call.init');\n\t\n\t        if (defModify !== undefined) {\n\t            defMedia = Q.defer();\n\t        }\n\t\n\t        pc.init(); // instantiates RTCPeerConnection, can't call on modify\n\t        if (defModify === undefined && pc.state.needDirectConnection === true) {\n\t            actuallyAddDirectConnection(params);\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Register any event listeners passed in as callbacks, save other params to answer() and accept().\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.saveParameters\n\t     * @param {object} params\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n\t     * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will fire even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n\t     * user's media.  This event gets fired even if the allow process is automatic, i. e., permission and media is\n\t     * granted by the browser without asking the user to approve it.\n\t     * @param {Array<RTCConstraints>} [params.constraints]\n\t     * @param {boolean} [params.forceTurn]\n\t     * @param {boolean} [params.receiveOnly]\n\t     * @param {boolean} [params.sendOnly]\n\t     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t     * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     * @private\n\t     * @fires respoke.Call#stats\n\t     */\n\t    function saveParameters(params) {\n\t        var isNewConstraint;\n\t\n\t        /* This happens when the call is hung up automatically, for instance due to the lack of an onCall\n\t         * handler. In this case, pc has been set to null in hangup. The call has already failed, and the\n\t         * invocation of this function is an artifact of async code not being finished yet, so we can just\n\t         * skip all of this setup.\n\t         */\n\t        if (!pc) {\n\t            return;\n\t        }\n\t\n\t        that.listen('local-stream-received', params.onLocalMedia);\n\t        that.listen('connect', params.onConnect);\n\t        that.listen('hangup', params.onHangup);\n\t        that.listen('allow', params.onAllow);\n\t        that.listen('answer', params.onAnswer);\n\t        that.listen('approve', params.onApprove);\n\t        that.listen('mute', params.onMute);\n\t        that.listen('requesting-media', params.onRequestingMedia);\n\t\n\t        previewLocalMedia = typeof params.previewLocalMedia === 'function' ?\n\t            params.previewLocalMedia : previewLocalMedia;\n\t\n\t        pc.state.receiveOnly = typeof params.receiveOnly === 'boolean' ? params.receiveOnly : pc.state.receiveOnly;\n\t        pc.state.sendOnly = typeof params.sendOnly === 'boolean' ? params.sendOnly : pc.state.sendOnly;\n\t        pc.state.needDirectConnection = typeof params.needDirectConnection === 'boolean' ?\n\t            params.needDirectConnection : pc.state.needDirectConnection;\n\t        pc.disableTurn = typeof params.disableTurn === 'boolean' ? params.disableTurn : !!pc.disableTurn;\n\t        pc.forceTurn = typeof params.forceTurn === 'boolean' ? params.forceTurn : !!pc.forceTurn;\n\t\n\t        that.videoLocalElement = params.videoLocalElement ? params.videoLocalElement : that.videoLocalElement;\n\t        that.videoRemoteElement = params.videoRemoteElement ? params.videoRemoteElement : that.videoRemoteElement;\n\t\n\t        if (that.toType === 'did' && !that.caller) {\n\t            params.callerId = params.callerId || {};\n\t            that.callerId = {\n\t                name: params.callerId.name || null,\n\t                number: params.callerId.number || null\n\t            };\n\t        }\n\t\n\t        if (pc.state.receiveOnly) {\n\t            that.outgoingMediaStreams.length = 0;\n\t            that.constraints = [];\n\t        } else if (params.constraints) {\n\t            that.constraints = respoke.convertConstraints(params.constraints);\n\t            updateOutgoingMediaEstimate({constraints: that.constraints[0], source: params.source});\n\t        }\n\t\n\t        if (pc.state.sendOnly) {\n\t            that.incomingMediaStreams.length = 0;\n\t        } else if (params.constraints && pc.state.caller === true && that.incomingMediaStreams.length === 0) {\n\t            // TODO above condition is not good enough for media renegotiation.\n\t            // Only the person who initiated this round of media negotiation needs to estimate remote\n\t            // media based on what constraints local media is using.\n\t            // Also don't try to guess what media they'll send back if we're sending more than one stream.\n\t            that.constraints = respoke.convertConstraints(params.constraints);\n\t            updateIncomingMediaEstimate({constraints: params.constraints[0]});\n\t        }\n\t\n\t        pc.listen('stats', function fireStats(evt) {\n\t            /**\n\t             * This event is fired every time statistical information about audio and/or video on a call\n\t             * becomes available.\n\t             * @event respoke.Call#stats\n\t             * @type {respoke.Event}\n\t             * @property {respoke.MediaStats} stats - an object with stats in it.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.fire('stats', {stats: evt.stats});\n\t        }, true);\n\t\n\t        delete that.signalOffer;\n\t        delete that.signalConnected;\n\t        delete that.signalAnswer;\n\t        delete that.signalHangup;\n\t        delete that.signalReport;\n\t        delete that.signalCandidate;\n\t    }\n\t\n\t    /**\n\t     * Build respoke.LocalMedia after the call is answered.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.buildLocalMedia\n\t     * @param {RTCConstraint} constraint\n\t     * @private\n\t     */\n\t    function buildLocalMedia(constraint) {\n\t        var localMedia;\n\t\n\t        if (pc.state.receiveOnly) {\n\t            return Q.reject(new Error(\"Shouldn't have requested local media when receiveOnly is true.\"));\n\t        }\n\t\n\t        if (constraint.className === 'respoke.LocalMedia') {\n\t            localMedia = constraint;\n\t        } else {\n\t            localMedia = respoke.LocalMedia({\n\t                hasScreenShare: respoke.constraintsHasScreenShare(constraint),\n\t                constraints: constraint,\n\t                source: params.source\n\t            });\n\t            that.outgoingMediaStreams.push(localMedia);\n\t        }\n\t\n\t        // Use the element for only one set of constraints, and make sure it's one that has video.\n\t        if (respoke.constraintsHasVideo(localMedia.constraints) &&\n\t                that.videoLocalElement && !that.videoLocalElement.used) {\n\t            that.videoLocalElement.used = true;\n\t            localMedia.element = that.videoLocalElement;\n\t        }\n\t\n\t        localMedia.listen('requesting-media', function waitAllowHandler(evt) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t\n\t            /**\n\t             * The browser is asking for permission to access the User's media. This would be an ideal time\n\t             * to modify the UI of the application so that the user notices the request for permissions\n\t             * and approves it.\n\t             * @event respoke.Call#requesting-media\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.fire('requesting-media');\n\t        }, true);\n\t\n\t        localMedia.listen('allow', function allowHandler(evt) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t\n\t            /**\n\t             * The user has approved the request for media. Any UI changes made to remind the user to click Allow\n\t             * should be canceled now. This event is the same as the `onAllow` callback.  This event gets fired\n\t             * even if the allow process is automatic, i. e., permission and media is granted by the browser\n\t             * without asking the user to approve it.\n\t             * @event respoke.Call#allow\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.fire('allow');\n\t            pc.state.dispatch('approve', {\n\t                previewLocalMedia: previewLocalMedia\n\t            });\n\t        }, true);\n\t\n\t        return localMedia.start().then(function () {\n\t            streamReceivedHandler(localMedia);\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Answer the call and start the process of obtaining media. This method is called automatically on the caller's\n\t     * side. This method must be called on the callee's side to indicate that the endpoint does wish to accept the\n\t     * call. The app will have a later opportunity, by passing a callback named previewLocalMedia, to approve or\n\t     * reject the call based on whether audio and/or video is working and is working at an acceptable level.\n\t     *\n\t     *     client.listen('call', function (evt) {\n\t     *         if (!evt.call.caller) {\n\t     *             evt.call.answer();\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.answer\n\t     * @fires respoke.Call#answer\n\t     * @param {object} [params]\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n\t     * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n\t     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t     * This callback will be called when media is muted or unmuted.\n\t     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t     * for the user to give permission to start getting audio or video.\n\t     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t     * the approval was automatic.\n\t     * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n\t     * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n\t     * granted by the browser without asking the user to approve it.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {boolean} [params.receiveOnly] - Whether or not we accept media.\n\t     * @param {boolean} [params.sendOnly] - Whether or not we send media.\n\t     * @param {Array<RTCConstraints>} [params.constraints] - Information about the media for this call.\n\t     * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n\t     * video attached to it.\n\t     * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n\t     * video attached to it.\n\t     */\n\t    that.answer = function (params) {\n\t        params = params || {};\n\t        log.debug('Call.answer', params);\n\t\n\t        saveParameters(params);\n\t\n\t        pc.listen('remote-stream-received', onRemoteStreamAdded, true);\n\t        pc.listen('remote-stream-removed', onRemoteStreamRemoved, true);\n\t\n\t        pc.state.once('approving-device-access:entry', function (evt) {\n\t            doAddVideo(params);\n\t        });\n\t        pc.state.dispatch('answer', {\n\t            previewLocalMedia: previewLocalMedia,\n\t            approve: that.approve\n\t        });\n\t        /**\n\t         * The call was answered.\n\t         * @event respoke.Call#answer\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('answer');\n\t    };\n\t\n\t    /**\n\t     * Accept a request to modify the media on the call. This method should be called within the Call#modify\n\t     * event listener, which gives the developer or website user a chance to see what changes are proposed and\n\t     * to accept or reject them.\n\t     *\n\t     *     call.listen('modify', function (evt) {\n\t     *         evt.call.accept();\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.accept\n\t     * @fires respoke.Call#accept\n\t     * @private\n\t     * @param {object} [params]\n\t     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t     * wants to perform an action between local media becoming available and calling approve().\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the developer to receive the\n\t     * remote video element.\n\t     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for the developer to be notified about hangup.\n\t     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t     * required to flow peer-to-peer. If it cannot, the call will fail.\n\t     * @param {boolean} [params.receiveOnly] - Whether or not we accept media.\n\t     * @param {boolean} [params.sendOnly] - Whether or not we send media.\n\t     * @param {Array<RTCConstraints>} [params.constraints] - Information about the media for this call.\n\t     */\n\t    that.accept = that.answer;\n\t\n\t    /**\n\t     * Start the process of network and media negotiation. If the app passes in a callback named previewLocalMedia\n\t     * in order to allow the logged-in person a chance to base their decision to continue the call on whether\n\t     * audio and/or video is working correctly,\n\t     * this method must be called on both sides in order to begin the call. If call.approve() is called, the call\n\t     * will progress as expected. If call.reject() is called, the call will be aborted.\n\t     *\n\t     *     call.listen('local-stream-received', function (evt) {\n\t     *         if (userLikesVideo()) {\n\t     *             evt.call.approve();\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.approve\n\t     * @fires respoke.Call#approve\n\t     */\n\t    that.approve = function () {\n\t        log.debug('Call.approve');\n\t        /**\n\t         * Fired when the local media access is approved.\n\t         * @event respoke.Call#approve\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('approve');\n\t        pc.state.dispatch('approve', {\n\t            previewLocalMedia: previewLocalMedia\n\t        });\n\t\n\t        if (defModify && defModify.promise.isPending()) {\n\t            defModify.resolve(true);\n\t            defModify = undefined;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Listen for the remote side to remove media in the middle of the call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.onRemoteStreamRemoved\n\t     * @private\n\t     * @param {object}\n\t     */\n\t    function onRemoteStreamRemoved(evt) {\n\t        log.debug('pc event: remote stream removed');\n\t    }\n\t\n\t    /**\n\t     * Listen for the remote side to add additional media in the middle of the call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.onRemoteStreamAdded\n\t     * @private\n\t     * @param {object}\n\t     * @fires respoke.Call#connect\n\t     */\n\t    function onRemoteStreamAdded(evt) {\n\t        var hasAudio = false;\n\t        var hasVideo = false;\n\t        var hasScreenShare = false;\n\t        var remoteMedia;\n\t        var useEl;\n\t\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        log.debug('received remote media', evt);\n\t\n\t        // This is the first remote media we have received. The one we currently have is a guess. Rip it\n\t        // out and replace it with reality.\n\t        if (that.incomingMediaStreams.length === 1 && that.incomingMediaStreams[0].temporary === true) {\n\t            // have to do it this way because assigning a blank array to that.incomingMediaStreams will\n\t            // clobber the methods like hasAudio that we have added to the array.\n\t            that.incomingMediaStreams.length = 0;\n\t        }\n\t\n\t        hasAudio = evt.stream.getAudioTracks().length > 0;\n\t        hasVideo = evt.stream.getVideoTracks().length > 0;\n\t        // TODO this is not good enough long term.\n\t        hasScreenShare = hasVideo && that.target === 'screenshare';\n\t\n\t        if (that.videoRemoteElement && !that.videoRemoteElement.used) {\n\t            that.videoRemoteElement.used = true;\n\t            useEl = that.videoRemoteElement;\n\t        }\n\t\n\t        remoteMedia = respoke.RemoteMedia({\n\t            element: useEl,\n\t            stream: evt.stream,\n\t            hasScreenShare: hasScreenShare,\n\t            constraints: {\n\t                audio: hasAudio,\n\t                video: hasVideo\n\t            }\n\t        });\n\t        that.incomingMediaStreams.push(remoteMedia);\n\t\n\t        if (that.incomingMediaStreams.length < pc.sdpExpectedStreamCount) {\n\t            // there are more streams left to receive before we can dispatch the event to the state machine.\n\t            return;\n\t        }\n\t\n\t        /**\n\t         * Indicates that either remote media stream has been added to the call or if no\n\t         * media is expected, the other side is receiving our media.\n\t         * @event respoke.Call#connect\n\t         * @type {respoke.Event}\n\t         * @property {Element} element - The HTML5 Video element with the remote stream attached.\n\t         * @property {respoke.RemoteMedia} stream - The incomingMedia property on the call.\n\t         * @property {string} name - The event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        pc.state.dispatch('receiveRemoteMedia');\n\t        that.fire('connect', {\n\t            stream: remoteMedia.stream,\n\t            element: remoteMedia.element\n\t        });\n\t    }\n\t\n\t    /**\n\t     * ## The plugin `respoke.MediaStats` must be loaded before using this method.\n\t     *\n\t     * Start the process of listening for a continuous stream of statistics about the flow of audio and/or video.\n\t     * Since we have to wait for both the answer and offer to be available before starting\n\t     * statistics, the library returns a promise for the stats object. The statistics object does not contain the\n\t     * statistics; rather it contains methods of interacting with the actions of obtaining statistics. To obtain\n\t     * the actual statistics one time, use stats.getStats(); use the onStats callback to obtain a continuous\n\t     * stream of statistics every `interval` seconds.  Returns null if stats module is not loaded.\n\t     *\n\t     *     call.getStats({\n\t     *         onStats: function (evt) {\n\t     *             console.log('Stats', evt.stats);\n\t     *         }\n\t     *     }).done(function () {\n\t     *         console.log('Stats started');\n\t     *     }, function (err) {\n\t     *         console.log('Call is already hung up.');\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.getStats\n\t     * @param {object} params\n\t     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive\n\t     * the stats. If no callback is provided, the call's report will contain stats but the developer will not\n\t     * receive them on the client-side.\n\t     * @param {respoke.Call.statsSuccessHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Call.errorHandler} [params.onError] - Error handler for this invocation of this method only.\n\t     * @returns {Promise<object>|null}\n\t     */\n\t    function getStats(params) {\n\t        if (pc && pc.getStats) {\n\t            that.listen('stats', params.onStats);\n\t            return pc.getStats(params);\n\t        }\n\t        return null;\n\t    }\n\t    if (respoke.MediaStats) {\n\t        that.getStats = getStats;\n\t    }\n\t\n\t    /**\n\t     * Return local video element with the logged-in endpoint's audio and/or video streams attached to it.\n\t     *\n\t     *     var el = call.getLocalElement();\n\t     *     container.append(el);\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.getLocalElement\n\t     * @returns {Video} An HTML5 video element.\n\t     */\n\t    that.getLocalElement = function () {\n\t        return that.outgoingMediaStreams[0] ? that.outgoingMediaStreams[0].element : undefined;\n\t    };\n\t\n\t    /**\n\t     * Return remote video element with the remote endpoint's audio and/or video streams attached to it.\n\t     *\n\t     *     var el = call.getRemoteElement();\n\t     *     container.append(el);\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.getRemoteElement\n\t     * @returns {Video} An HTML5 video element.\n\t     */\n\t    that.getRemoteElement = function () {\n\t        return that.incomingMediaStreams[0] ? that.incomingMediaStreams[0].element : undefined;\n\t    };\n\t\n\t    /**\n\t     * Set up the local media.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.streamReceivedHandler\n\t     * @param {respoke.LocalMedia} The local media.\n\t     * @private\n\t     */\n\t    function streamReceivedHandler(localMedia) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t\n\t        pc.addStream(localMedia.stream);\n\t        if (typeof previewLocalMedia === 'function' && localMedia.element) {\n\t            previewLocalMedia(localMedia.element, that);\n\t        }\n\t\n\t        localMedia.listen('stop', function stopHandler(/* evt */) {\n\t            // if the local media has stopped, it has already been removed from respoke.streams.\n\t            // just need to remove it from the call's streams, and hangup if no streams left.\n\t\n\t            var idx = that.outgoingMediaStreams.indexOf(localMedia);\n\t            if (idx > -1) {\n\t                that.outgoingMediaStreams.splice(idx, 1);\n\t            }\n\t\n\t            if (!that.outgoingMediaStreams.length && !that.incomingMediaStreams.length) {\n\t                that.hangup({ reason: 'last stream ended' });\n\t            }\n\t        });\n\t\n\t        /**\n\t         * Indicate that the call has received local media from the browser.\n\t         * @event respoke.Call#local-stream-received\n\t         * @type {respoke.Event}\n\t         * @property {Element} element\n\t         * @property {respoke.LocalMedia} stream\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('local-stream-received', {\n\t            element: localMedia.element,\n\t            stream: localMedia\n\t        });\n\t\n\t        /**\n\t         * This event indicates that local video has been unmuted.\n\t         * @event respoke.Call#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        localMedia.listen('mute', function (evt) {\n\t            that.fire('mute', {\n\t                type: evt.type,\n\t                muted: evt.muted\n\t            });\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Create the RTCPeerConnection and add handlers. Process any offer we have already received. This method is called\n\t     * after answer() so we cannot use this method to set up the DirectConnection.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.doAddVideo\n\t     * @private\n\t     * @param {object} params\n\t     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect]\n\t     * @param {respoke.Call.onHangup} [params.onHangup]\n\t     * @fires respoke.Call#requesting-media\n\t     * @fires respoke.Call#allow\n\t     * @fires respoke.Call#local-stream-received\n\t     */\n\t    function doAddVideo(params) {\n\t        log.debug('Call.doAddVideo');\n\t        saveParameters(params);\n\t    }\n\t\n\t    /**\n\t     * Add a video and audio stream to the existing call. By default, this method adds both video AND audio.\n\t     * If audio is not desired, pass {audio: false}.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.addVideo\n\t     * @private\n\t     * @param {object} params\n\t     * @param {boolean} [params.audio=true]\n\t     * @param {boolean} [params.video=true]\n\t     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints, indicating the media\n\t     * being requested is\n\t     * an audio and/or video stream.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect]\n\t     * @param {respoke.Call.onHangup} [params.onHangup]\n\t     * @param {respoke.Call.mediaSuccessHandler} [params.onSuccess]\n\t     * @param {respoke.Client.errorHandler} [params.onError]\n\t     * @returns {Promise<respoke.LocalMedia>}\n\t     */\n\t    that.addVideo = function (params) {\n\t        log.debug('Call.addVideo');\n\t        params = params || {};\n\t        if (!params.constraints || !params.constraints.length) {\n\t            params.constraints = [{video: true, audio: true}];\n\t        }\n\t        params.instanceId = instanceId;\n\t\n\t        if (!defMedia.promise.isFulfilled()) { // we're the callee & have just accepted to modify\n\t            doAddVideo(params);\n\t        } else { // we're the caller and need to see if we can modify\n\t            pc.startModify({\n\t                constraints: params.constraints\n\t            });\n\t            defModify = Q.defer();\n\t            defModify.promise.then(function modifyAccepted() {\n\t                doAddVideo(params);\n\t            });\n\t        }\n\t        return defModify.promise;\n\t    };\n\t\n\t    /**\n\t     * Add an audio stream to the existing call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.addAudio\n\t     * @private\n\t     * @param {object} params\n\t     * @param {boolean} [params.audio=true]\n\t     * @param {boolean} [params.video=false]\n\t     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints, indicating the media\n\t     * being requested is an audio and/or video stream.\n\t     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n\t     * element with the local audio and/or video attached.\n\t     * @param {respoke.Call.onConnect} [params.onConnect]\n\t     * @param {respoke.Call.onHangup} [params.onHangup]\n\t     * @param {respoke.Call.mediaSuccessHandler} [params.onSuccess]\n\t     * @param {respoke.Client.errorHandler} [params.onError]\n\t     * @returns {Promise<respoke.LocalMedia>}\n\t     */\n\t    that.addAudio = function (params) {\n\t        params = params || {};\n\t        if (!params.constraints || !params.constraints.length) {\n\t            params.constraints = [{video: false, audio: true}];\n\t        }\n\t\n\t        return that.addVideo(params);\n\t    };\n\t\n\t    /**\n\t     * Get the direct connection on this call, if it exists.\n\t     *\n\t     *     var dc = call.getDirectConnection();\n\t     *     if (!dc) {\n\t     *         console.log(\"No direct connection has been started.\");\n\t     *     } else {\n\t     *         dc.sendMessage({message: 'hi'});\n\t     *     }\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.getDirectConnection\n\t     * @returns {respoke.DirectConnection}\n\t     */\n\t    that.getDirectConnection = function () {\n\t        return directConnection || null;\n\t    };\n\t\n\t    /**\n\t     * Remove a direct connection from the existing call. If there is no other media, this will hang up the call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.removeDirectConnection\n\t     * @private\n\t     * @param {object} params\n\t     * @arg {boolean} [params.skipModify] Do not restart media negotiation.\n\t     */\n\t    that.removeDirectConnection = function (params) {\n\t        params = params || {};\n\t        log.debug('Call.removeDirectConnection');\n\t\n\t        if (directConnection) {\n\t            directConnection.close({skipRemove: true});\n\t        }\n\t\n\t        if (!that.hasMedia()) {\n\t            log.debug('Hanging up because there are no local streams.');\n\t            that.hangup();\n\t            return;\n\t        }\n\t\n\t        if (params.skipModify === true) {\n\t            return;\n\t        }\n\t\n\t        pc.startModify({\n\t            directConnection: false\n\t        });\n\t        defModify = Q.defer();\n\t        defModify.promise.done(function onModifySuccess() {\n\t            defMedia.resolve();\n\t            defModify = undefined;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Add a direct connection to the existing call.\n\t     *\n\t     *     call.addDirectConnection({\n\t     *         onOpen: function (evt) {\n\t     *             console.log(\"Direct connection open!\");\n\t     *         }\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.addDirectConnection\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for the developer to be notified about\n\t     * closing the connection.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for the developer to be notified about\n\t     * opening the connection.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for the developer to be notified\n\t     * about incoming messages. Not usually necessary to listen to this event if you are already listening to\n\t     * respoke.Endpoint#message.\n\t     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess]\n\t     * @param {respoke.Client.errorHandler} [params.onError]\n\t     * @returns {Promise<respoke.DirectConnection>}\n\t     */\n\t    that.addDirectConnection = function (params) {\n\t        log.debug('Call.addDirectConnection');\n\t        pc.startModify({\n\t            directConnection: true\n\t        });\n\t        defModify = Q.defer();\n\t        return defModify.promise.then(function onModifySuccess() {\n\t            return actuallyAddDirectConnection(params);\n\t        }, function onModifyError(err) {\n\t            throw err;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Add a direct connection to the existing call.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.actuallyAddDirectConnection\n\t     * @private\n\t     * @param {object} params\n\t     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for the developer to be notified about\n\t     * closing the connection.\n\t     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for the developer to be notified about\n\t     * opening the connection.\n\t     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for the developer to be notified\n\t     * about incoming messages. Not usually necessary to listen to this event if you are already listening to\n\t     * respoke.Endpoint#message.\n\t     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess]\n\t     * @param {respoke.Client.errorHandler} [params.onError]\n\t     * @returns {Promise<respoke.DirectConnection>}\n\t     * @fires respoke.Client#direct-connection\n\t     * @fires respoke.Call#direct-connection\n\t     */\n\t    function actuallyAddDirectConnection(params) {\n\t        log.debug('Call.actuallyAddDirectConnection', params);\n\t        params = params || {};\n\t        defMedia.promise.then(params.onSuccess, params.onError);\n\t\n\t        if (directConnection && directConnection.isActive()) {\n\t            if (defMedia.promise.isPending()) {\n\t                defMedia.resolve(directConnection);\n\t            } else {\n\t                log.warn(\"Not creating a new direct connection.\");\n\t            }\n\t            return defMedia.promise;\n\t        }\n\t\n\t        params.instanceId = instanceId;\n\t        params.pc = pc;\n\t        params.call = that;\n\t\n\t        directConnection = respoke.DirectConnection(params);\n\t\n\t        directConnection.listen('close', function closeHandler() {\n\t            if (!that.hasMedia()) {\n\t                log.debug('Hanging up because there are no local streams.');\n\t                that.hangup();\n\t            } else {\n\t                that.removeDirectConnection({skipModify: true});\n\t            }\n\t        }, true);\n\t\n\t        directConnection.listen('accept', function acceptHandler() {\n\t            if (pc.state.caller === false) {\n\t                log.debug('Answering as a result of approval.');\n\t            } else {\n\t                defMedia.resolve(directConnection);\n\t            }\n\t        }, true);\n\t\n\t        directConnection.listen('open', function openHandler() {\n\t            pc.state.dispatch('receiveRemoteMedia');\n\t        }, true);\n\t\n\t        directConnection.listen('error', function errorHandler(err) {\n\t            defMedia.reject(new Error(err));\n\t        }, true);\n\t\n\t        that.remoteEndpoint.directConnection = directConnection;\n\t\n\t        /**\n\t         * This event is fired when the local end of the directConnection is available. It still will not be\n\t         * ready to send and receive messages until the 'open' event fires.\n\t         * @event respoke.Call#direct-connection\n\t         * @type {respoke.Event}\n\t         * @property {respoke.DirectConnection} directConnection\n\t         * @property {respoke.Endpoint} endpoint\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('direct-connection', {\n\t            directConnection: directConnection,\n\t            endpoint: that.remoteEndpoint\n\t        });\n\t\n\t        /**\n\t         * This event is fired when the logged-in endpoint is receiving a request to open a direct connection\n\t         * to another endpoint.  If the user wishes to allow the direct connection, calling\n\t         * evt.directConnection.accept() will allow the connection to be set up.\n\t         * @event respoke.Client#direct-connection\n\t         * @type {respoke.Event}\n\t         * @property {respoke.DirectConnection} directConnection\n\t         * @property {respoke.Endpoint} endpoint\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         * @private\n\t         */\n\t        client.fire('direct-connection', {\n\t            directConnection: directConnection,\n\t            endpoint: that.remoteEndpoint\n\t        });\n\t\n\t        if (pc.state.caller === true) {\n\t            directConnection.accept();\n\t        }\n\t\n\t        return defMedia.promise;\n\t    }\n\t\n\t    /**\n\t     * Close the direct connection.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.closeDirectConnection\n\t     */\n\t    that.closeDirectConnection = function () {\n\t        if (directConnection) {\n\t            directConnection.close();\n\t            directConnection = null;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n\t     * signal is not false and we have not received a hangup signal from the remote party.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.hangup\n\t     * @fires respoke.Call#hangup\n\t     * @param {object} params\n\t     * @arg {boolean} params.signal Optional flag to indicate whether to send or suppress sending\n\t     * a hangup signal to the remote side.\n\t     */\n\t    that.hangup = function (params) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        params = params || {};\n\t        params.reason = params.reason || \"hangup method called.\";\n\t        pc.state.dispatch('hangup', params);\n\t    };\n\t    that.hangup = respoke.callOnce(that.hangup);\n\t\n\t    /**\n\t     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n\t     * signal is not false and we have not received a hangup signal from the remote party. This is an event\n\t     * handler added to the state machine via `once`.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.hangup\n\t     * @fires respoke.Call#hangup\n\t     * @private\n\t     */\n\t    var doHangup = function () {\n\t        log.debug('hangup', that.caller);\n\t\n\t        that.outgoingMediaStreams.forEach(function (stream) {\n\t            // only call stop on the stream if it was constructed explicitly for the call\n\t            if (stream !== params.outgoingMedia) {\n\t                stream.stop();\n\t            }\n\t        });\n\t\n\t        if (directConnection) {\n\t            directConnection.close();\n\t            directConnection = null;\n\t        }\n\t\n\t        if (pc) {\n\t            pc.close({signal: (pc.state.receivedBye ? false : pc.state.signalBye)});\n\t        }\n\t\n\t        /**\n\t         * This event is fired when the call has hung up.\n\t         * @event respoke.Call#hangup\n\t         * @type {respoke.Event}\n\t         * @property {boolean} sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.Call} target\n\t         */\n\t        that.fire('hangup', {\n\t            reason: pc.state.hangupReason || \"No reason specified.\"\n\t        });\n\t\n\t        pc.state.ignore();\n\t        pc.ignore();\n\t        that.ignore();\n\t        pc = null;\n\t    };\n\t    doHangup = respoke.callOnce(doHangup);\n\t\n\t    /**\n\t     * Expose hangup as reject for approve/reject workflow.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.reject\n\t     * @param {object} params\n\t     */\n\t    that.reject = function () {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        pc.state.dispatch('reject', {reason: 'call.reject() called'});\n\t    };\n\t\n\t    /**\n\t     * Indicate whether a call is being setup or is in progress.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.isActive\n\t     * @returns {boolean}\n\t     */\n\t    that.isActive = function () {\n\t        return !!(pc && pc.isActive() && (\n\t            that.outgoingMediaStreams.length > 0 ||\n\t            that.incomingMediaStreams.length > 0 ||\n\t            (directConnection && directConnection.isActive())\n\t        ));\n\t    };\n\t\n\t    /**\n\t     * Set the estimated media status on incoming media.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.listenAnswer\n\t     * @param {object} evt\n\t     * @param {object} evt.signal - The offer signal including the sdp\n\t     * @private\n\t     */\n\t    function listenAnswer(evt) {\n\t        log.debug('listenAnswer', evt.signal);\n\t\n\t        that.hasDataChannel = respoke.sdpHasDataChannel(evt.signal.sessionDescription.sdp);\n\t        updateIncomingMediaEstimate({sdp: evt.signal.sessionDescription});\n\t    }\n\t\n\t    /**\n\t     * Set the estimated media status on incoming media.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.updateIncomingMediaEstimate\n\t     * @param {object} params\n\t     * @param {RTCSessionDescriptor} [params.sdp] - optional sdp to use to estimate media\n\t     * @param {RTCConstraints} [params.constraints] - optional constraints to use to estimate media\n\t     * @private\n\t     */\n\t    function updateIncomingMediaEstimate(params) {\n\t        if (pc.state.sendOnly) {\n\t            that.incomingMediaStreams.length = 0;\n\t            return;\n\t        }\n\t\n\t        if (!params.sdp && !params.constraints) {\n\t            throw new Error(\"Can't estimate incoming media without sdp or constraints\");\n\t        }\n\t\n\t        if (that.incomingMediaStreams.length === 0) {\n\t            that.incomingMediaStreams.push(respoke.RemoteMedia({\n\t                hasScreenShare: (that.target === 'screenshare'),\n\t                temporary: true\n\t            }));\n\t        }\n\t\n\t        if (params.sdp) {\n\t            if (that.incomingMediaStreams[0] && that.incomingMediaStreams[0].temporary) {\n\t                that.incomingMediaStreams[0].setSDP(params.sdp);\n\t            }\n\t        }\n\t\n\t        if (params.constraints) {\n\t            if (that.incomingMediaStreams[0] && that.incomingMediaStreams[0].temporary) {\n\t                that.incomingMediaStreams[0].setConstraints(params.constraints);\n\t            }\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Set the estimated media status on outgoing media. For this method, by the time we have constraints, we're\n\t     * already calling getUserMedia so we will have exactly the right information. No need to use constraints\n\t     * to estimate.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.updateOutgoingMediaEstimate\n\t     * @param {object} params\n\t     * @param {RTCSessionDescriptor} [params.sdp] - optional sdp to use to estimate media\n\t     * @param {RTCConstraints} [params.constraints] - optional constraints to use to estimate media\n\t     * @private\n\t     */\n\t    function updateOutgoingMediaEstimate(params) {\n\t        if (pc.state.receiveOnly) {\n\t            that.outgoingMediaStreams.length = 0;\n\t            that.constraints = [];\n\t            return;\n\t        }\n\t\n\t        if (!params.sdp && !params.constraints) {\n\t            throw new Error(\"Can't estimate outgoing media without sdp or constraints\");\n\t        }\n\t\n\t        if (that.outgoingMediaStreams.length === 0) {\n\t            that.outgoingMediaStreams.push(respoke.LocalMedia({\n\t                instanceId: instanceId,\n\t                temporary: true,\n\t                source: params.source\n\t            }));\n\t        }\n\t\n\t        if (params.sdp) {\n\t            if (that.outgoingMediaStreams[0] && that.outgoingMediaStreams[0].temporary) {\n\t                that.outgoingMediaStreams[0].setSDP(params.sdp);\n\t            }\n\t        }\n\t\n\t        if (params.constraints) {\n\t            if (that.outgoingMediaStreams[0] && that.outgoingMediaStreams[0].temporary) {\n\t                that.outgoingMediaStreams[0].setConstraints(params.constraints);\n\t            }\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Save the offer so we can tell the browser about it after the PeerConnection is ready.\n\t     * Set the estimated media status on incoming and outgoing media.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.listenOffer\n\t     * @param {object} evt\n\t     * @param {object} evt.signal - The offer signal including the sdp\n\t     * @private\n\t     * @fires respoke.Call#modify\n\t     */\n\t    function listenOffer(evt) {\n\t        log.debug('listenOffer', evt.signal);\n\t        var info = {};\n\t\n\t        that.sessionId = evt.signal.sessionId;\n\t        pc.state.receiveOnly = respoke.sdpHasSendOnly(evt.signal.sessionDescription.sdp);\n\t        pc.state.sendOnly = respoke.sdpHasReceiveOnly(evt.signal.sessionDescription.sdp);\n\t        pc.state.listen('connecting:entry', function () {\n\t            if (!pc.state.caller) {\n\t                pc.processOffer(evt.signal.sessionDescription);\n\t            }\n\t        });\n\t\n\t        // Only do this if we're still trying to guess what media is coming in.\n\t        // TODO not good enough for media renegotiation\n\t        updateIncomingMediaEstimate({sdp: evt.signal.sessionDescription});\n\t\n\t        /*!\n\t         * Always overwrite constraints for callee on every offer, since answer() and accept() will\n\t         * always be called after parsing the SDP. However, if the caller isn't sending any media,\n\t         * use audio & video as our estimate.\n\t         * TODO not good enough for media renegotiation\n\t         */\n\t        // If sendOnly, we can't rely on the offer for media estimate. It doesn't have any media in it!\n\t        if (pc.state.sendOnly) {\n\t            updateOutgoingMediaEstimate({constraints: {\n\t                audio: true,\n\t                video: true\n\t            }});\n\t        } else {\n\t            updateOutgoingMediaEstimate({sdp: evt.signal.sessionDescription});\n\t        }\n\t\n\t        if (that.outgoingMedia) {\n\t            log.info(\"Default outgoingMedia constraints\", that.outgoingMedia.constraints);\n\t        }\n\t\n\t        if (pc.state.isModifying()) {\n\t            if (pc.state.needDirectConnection === true) {\n\t                info.directConnection = directConnection;\n\t            } else if (pc.state.needDirectConnection === false) {\n\t                // Nothing\n\t            } else {\n\t                info.call = that;\n\t            }\n\t            /**\n\t             * Indicates a request to add something to an existing call. If 'constraints' is set, evt.constraints\n\t             * describes the media the other side has added. In this case, call.approve() must be called in order\n\t             * to approve the new media and send the same type of media.  If directConnection exists, the other side\n\t             * wishes to to open a direct connection. In order to approve, call directConnection.accept(). In either\n\t             * case, call.reject() and directConnection.reject() can be called to decline the request to add to the\n\t             * call.\n\t             * @event respoke.Call#modify\n\t             * @type {respoke.Event}\n\t             * @property {object} [constraints]\n\t             * @property {boolean} [directConnection]\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.fire('modify', info);\n\t        }\n\t\n\t        pc.state.dispatch('receiveOffer', {\n\t            previewLocalMedia: previewLocalMedia,\n\t            approve: that.approve\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Save the answer and tell the browser about it.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.listenModify\n\t     * @private\n\t     */\n\t    function listenModify(evt) {\n\t        log.debug('Call.listenModify', evt);\n\t        if (evt.signal.action === 'initiate') {\n\t            defModify = Q.defer();\n\t            pc.state.dispatch('modify', {receive: true});\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Set up state and media for the modify.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.onModifyAccept\n\t     * @param {respoke.Event} evt\n\t     * @private\n\t     */\n\t    function onModifyAccept(evt) {\n\t        pc.state.dispatch('accept');\n\t\n\t        if (evt.signal.action !== 'initiate') {\n\t            defModify.resolve(); // resolved later for callee\n\t            defModify = undefined;\n\t            return;\n\t        }\n\t\n\t        // callee only from here down\n\t\n\t        // init the directConnection if necessary. We don't need to do anything with\n\t        // audio or video right now.\n\t        if (evt.signal.directConnection === true) {\n\t            actuallyAddDirectConnection().done(function successHandler(dc) {\n\t                directConnection = dc;\n\t                directConnection.accept();\n\t            });\n\t        } else if (evt.signal.directConnection === false) {\n\t            if (directConnection) {\n\t                that.removeDirectConnection({skipModify: true});\n\t                defMedia.resolve(false);\n\t            }\n\t        }\n\t        pc.state.needDirectConnection = typeof evt.signal.directConnection === 'boolean' ?\n\t            evt.signal.directConnection : null;\n\t        that.outgoingMedia.constraints = evt.signal.constraints || that.outgoingMedia.constraints;\n\t    }\n\t\n\t    /**\n\t     * Ignore the modify.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.onModifyReject\n\t     * @param {respoke.Event} evt\n\t     * @param {Error} evt.err\n\t     * @private\n\t     */\n\t    function onModifyReject(evt) {\n\t        if (evt.signal.action !== 'initiate') {\n\t            defMedia.reject(evt.err);\n\t            defModify.reject(evt.err);\n\t            defModify = undefined;\n\t        }\n\t    }\n\t\n\t    /**\n\t     * If video is muted, unmute. If not muted, mute.\n\t     * @deprecated\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.toggleVideo\n\t     */\n\t    that.toggleVideo = function () {\n\t        if (that.isActive()) {\n\t            if (!videoIsMuted) {\n\t                that.muteVideo();\n\t            } else {\n\t                that.unmuteVideo();\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * If audio is muted, unmute. If not muted, mute.\n\t     * @deprecated\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.toggleAudio\n\t     */\n\t    that.toggleAudio = function () {\n\t        if (that.isActive()) {\n\t            if (!audioIsMuted) {\n\t                that.muteAudio();\n\t            } else {\n\t                that.unmuteAudio();\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Indicate whether the call has media of any type flowing in either direction.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.hasMedia\n\t     * @returns {boolean}\n\t     */\n\t    that.hasMedia = function () {\n\t        var local;\n\t        var remote;\n\t\n\t        if (!pc || !pc.getLocalStreams) {\n\t            // PeerConnection.init() has not been called yet\n\t            return false;\n\t        }\n\t\n\t        local = pc.getLocalStreams();\n\t        remote = pc.getRemoteStreams();\n\t\n\t        if (directConnection && directConnection.isActive()) {\n\t            return true;\n\t        }\n\t\n\t        return (local.length > 0 || remote.length > 0);\n\t    };\n\t\n\t    /**\n\t     * Mute all local video streams.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.muteVideo\n\t     * @fires respoke.Call#mute\n\t     */\n\t    that.muteVideo = function () {\n\t        if (videoIsMuted) {\n\t            return;\n\t        }\n\t        that.outgoingMedia.muteVideo();\n\t        videoIsMuted = true;\n\t    };\n\t\n\t    /**\n\t     * Unmute all local video streams.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.unmuteVideo\n\t     * @fires respoke.Call#mute\n\t     */\n\t    that.unmuteVideo = function () {\n\t        if (!videoIsMuted) {\n\t            return;\n\t        }\n\t        that.outgoingMedia.unmuteVideo();\n\t        videoIsMuted = false;\n\t    };\n\t\n\t    /**\n\t     * Mute all local audio streams.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.muteAudio\n\t     * @fires respoke.Call#mute\n\t     */\n\t    that.muteAudio = function () {\n\t        if (audioIsMuted) {\n\t            return;\n\t        }\n\t        that.outgoingMedia.muteAudio();\n\t        audioIsMuted = true;\n\t    };\n\t\n\t    /**\n\t     * Unmute all local audio streams.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.unmuteAudio\n\t     * @fires respoke.Call#mute\n\t     */\n\t    that.unmuteAudio = function () {\n\t        if (!audioIsMuted) {\n\t            return;\n\t        }\n\t\n\t        that.outgoingMedia.unmuteAudio();\n\t        audioIsMuted = false;\n\t    };\n\t\n\t    /**\n\t     * Save the hangup reason and hang up.\n\t     * @memberof! respoke.Call\n\t     * @method respoke.Call.listenHangup\n\t     * @params {object} evt\n\t     * @params {object} evt.signal - The hangup signal, including an optional hangup reason.\n\t     * @private\n\t     */\n\t    function listenHangup(evt) {\n\t        if (!pc) {\n\t            return;\n\t        }\n\t        pc.report.callStoppedReason = evt.signal.reason || \"Remote side hung up\";\n\t        pc.state.receivedBye = true;\n\t        pc.state.dispatch('hangup', {signal: false, reason: pc.report.callStoppedReason});\n\t    }\n\t\n\t    pc.state.once('terminated:entry', function (evt) {\n\t        doHangup();\n\t    }, true);\n\t\n\t    that.listen('signal-answer', listenAnswer);\n\t    that.listen('signal-offer', function (evt) {\n\t        if (pc.state.getState() === 'idle') {\n\t            pc.state.once('preparing:entry', function () {\n\t                listenOffer(evt);\n\t            });\n\t        } else {\n\t            listenOffer(evt);\n\t        }\n\t    }, true);\n\t    that.listen('signal-hangup', listenHangup, true);\n\t    that.listen('signal-modify', listenModify, true);\n\t    pc.listen('modify-reject', onModifyReject, true);\n\t    pc.listen('modify-accept', onModifyAccept, true);\n\t    that.listen('signal-icecandidates', function onCandidateSignal(evt) {\n\t        if (!pc || !evt.signal.iceCandidates || !evt.signal.iceCandidates.length) {\n\t            return;\n\t        }\n\t        evt.signal.iceCandidates.forEach(function processCandidate(candidate) {\n\t            if (!pc) {\n\t                return;\n\t            }\n\t            pc.addRemoteCandidate({candidate: candidate});\n\t        });\n\t    }, true);\n\t\n\t    that.listen('answer', function (evt) {\n\t        var mediaPromises = [];\n\t\n\t        if (pc.state.receiveOnly || pc.state.needDirectConnection) {\n\t            that.outgoingMediaStreams.length = 0;\n\t            return;\n\t        }\n\t\n\t        /*!\n\t         * By the time we get to here, we could be in a couple of states.\n\t         *\n\t         * If receiveOnly is set to true, we could possibly have constraints (if the developer used the API wrong)\n\t         * but we will not have any media in that.outgoingMediaStreams. We should unset that.constraints and skip\n\t         * building any local media.\n\t         *\n\t         * If we have never received any constraints, and receiveOnly is NOT set to true, we will have an estimate\n\t         * at that.outgoingMediaStreams[0] with temporary set to true. This estimate was set by parsing the SDP.\n\t         *\n\t         * If we have received one or more constraints, that.constraints array will contain the most recent set\n\t         * AND we will have an estimate at that.outgoingMediaStreams[0] with temporary set to true. We must completely\n\t         * rebuild that.outgoingMediaStreams from that.constraints.\n\t         */\n\t        if (pc.state.receiveOnly) {\n\t            that.outgoingMediaStreams.length = 0;\n\t            that.constraints = [];\n\t            return;\n\t        }\n\t\n\t        if (that.constraints.length === 0) {\n\t            // We didn't get told what to do by constraints; use our guess.\n\t            that.outgoingMediaStreams[0].temporary = undefined;\n\t        } else if (that.outgoingMediaStreams.length > 0 && that.outgoingMediaStreams[0].temporary) {\n\t            // We got told what to do. Discard our guess. It's OK for that.outgoingMediaStreams to be empty now.\n\t            that.outgoingMediaStreams.shift();\n\t        }\n\t\n\t        // If outgoingMedia is passed into the Call then there is no need to build the LocalMedia here\n\t        if (params.outgoingMedia) {\n\t            return;\n\t        }\n\t\n\t        if (that.constraints.length > 0) {\n\t            that.outgoingMediaStreams.length = 0;\n\t            that.constraints.forEach(function (constraint) {\n\t                mediaPromises.push(buildLocalMedia(constraint));\n\t            });\n\t        } else if (that.outgoingMediaStreams.length > 0) {\n\t            that.outgoingMediaStreams.forEach(function (stream) {\n\t                mediaPromises.push(buildLocalMedia(stream));\n\t            });\n\t        } else {\n\t            throw new Error(\"I have no idea what type of media I am supposed to build.\");\n\t        }\n\t\n\t        // These errors are handled elsewhere.\n\t        Q.all(mediaPromises).done(function () {\n\t            pc.state.dispatch('receiveLocalMedia');\n\t        }, function (err) {\n\t            pc.state.dispatch('reject', {reason: 'media stream error'});\n\t            pc.report.callStoppedReason = err.message;\n\t            /**\n\t             * This event is fired on errors that occur during call setup or media negotiation.\n\t             * @event respoke.Call#error\n\t             * @type {respoke.Event}\n\t             * @property {string} reason - A human readable description about the error.\n\t             * @property {respoke.Call} target\n\t             * @property {string} name - the event name.\n\t             */\n\t            that.fire('error', {\n\t                reason: err.message\n\t            });\n\t        });\n\t    }, true);\n\t\n\t    if (pc.state.needDirectConnection !== true) {\n\t        pc.state.once('preparing:entry', function () {\n\t            /**\n\t             * This event provides notification for when an incoming call is being received.  If the user wishes\n\t             * to allow the call, the app should call evt.call.answer() to answer the call.\n\t             * @event respoke.Client#call\n\t             * @type {respoke.Event}\n\t             * @property {respoke.Call} call\n\t             * @property {respoke.Endpoint} endpoint\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.Client} target\n\t             */\n\t            client.fire('call', {\n\t                endpoint: that.remoteEndpoint,\n\t                call: that\n\t            });\n\t        }, true);\n\t    }\n\t\n\t    pc.state.listen('idle:exit', function (evt) {\n\t        saveParameters(params);\n\t    });\n\t\n\t    pc.state.listen('preparing:entry', function (evt) {\n\t        init();\n\t\n\t        if (params.outgoingMedia) {\n\t            streamReceivedHandler(params.outgoingMedia);\n\t            pc.state.dispatch('receiveLocalMedia');\n\t        }\n\t\n\t        if (pc.state.caller === true) {\n\t            that.answer();\n\t        }\n\t    }, true);\n\t\n\t    /*!\n\t     *  If we are sending media and the other side is not, we have to fire Call#connect manually,\n\t     *  because the RTCPeerConnection will never reach an ICE connection state of \"connected.\"\n\t     *  This will need to be moved when we start handling media renegotiation.\n\t     */\n\t    pc.state.listen('connecting:entry', function connectNoMedia() {\n\t        if (pc.state.sendOnly) {\n\t            /**\n\t             * Indicates that either remote media stream has been added to the call or if no\n\t             * media is expected, the other side is receiving our media.\n\t             * @event respoke.Call#connect\n\t             * @type {respoke.Event}\n\t             * @property {string} name - The event name.\n\t             * @property {respoke.Call} target\n\t             */\n\t            that.fire('connect');\n\t            pc.state.dispatch('receiveRemoteMedia');\n\t        }\n\t    });\n\t\n\t    signalingChannel.getTurnCredentials().then(function (result) {\n\t        if (!pc) {\n\t            throw new Error(\"Already hung up.\");\n\t        }\n\t        if (!result) {\n\t            log.warn(\"Relay service not available.\");\n\t            pc.servers = {iceServers: []};\n\t        } else {\n\t            pc.servers = {iceServers: result};\n\t        }\n\t    }).fin(function () {\n\t        if (!pc) {\n\t            throw new Error(\"Already hung up.\");\n\t        }\n\t        pc.state.dispatch('initiate', {\n\t            caller: that.caller\n\t        });\n\t    }).done(null, function (err) {\n\t        if (err.message !== \"Already hung up.\") {\n\t            log.debug('Unexpected exception', err);\n\t        }\n\t    });\n\t\n\t    return that;\n\t}; // End respoke.Call\n\t\n\t/**\n\t * Handle an error that resulted from a method call.\n\t * @callback respoke.Call.errorHandler\n\t * @param {Error} err\n\t */\n\t/**\n\t * Handle the successful kick-off of stats on a call.\n\t * @callback respoke.Call.statsSuccessHandler\n\t * @param {respoke.MediaStatsParser} statsParser\n\t */\n\t/**\n\t * Handle obtaining media successfully.\n\t * @callback respoke.Call.mediaSuccessHandler\n\t * @param {respoke.LocalMedia} localMedia\n\t */\n\t/**\n\t * When on a call, receive local media when it becomes available. This is what you will need to provide if you want\n\t * to show the user their own video during a call. This callback is called every time\n\t * respoke.Call#local-stream-received is fired.\n\t * @callback respoke.Call.onLocalMedia Callback for receiving an HTML5 Video\n\t * element with the local audio and/or video attached.\n\t * @param {respoke.Event} evt\n\t * @param {Element} evt.element\n\t * @param {respoke.LocalMedia} - The outgoingMedia property on the call.\n\t * @param {string} evt.name - The event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When on a call, receive remote media when it becomes available. This is what you will need to provide if you want\n\t * to show the user the other party's video during a call. This callback is called every time\n\t * respoke.Call#connect is fired.\n\t * @callback respoke.Call.onConnect\n\t * @param {respoke.Event} evt\n\t * @param {Element} evt.element - the HTML5 Video element with the new stream attached.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When a call is in setup or media renegotiation happens. This callback will be called every time\n\t * respoke.Call#error.\n\t * @callback respoke.Call.onError\n\t * @param {respoke.Event} evt\n\t * @param {boolean} evt.reason - A human-readable description of the error.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When on a call, receive notification the call has been hung up. This callback is called every time\n\t * respoke.Call#hangup is fired.\n\t * @callback respoke.Call.onHangup\n\t * @param {respoke.Event} evt\n\t * @param {boolean} evt.sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * Called when changing the mute state on any type of media. This callback will be called when media is muted or\n\t * unmuted. This callback is called every time respoke.Call#mute is fired.\n\t * @callback respoke.Call.onMute\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * Called when the callee answers the call. This callback is called every time respoke.Call#answer is fired.\n\t * @callback respoke.Call.onAnswer\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * Called when the user approves local media. This callback will be called whether or not the approval was based\n\t * on user feedback. I. e., it will be called even if the approval was automatic. This callback is called every time\n\t * respoke.Call#approve is fired.\n\t * @callback respoke.Call.onApprove\n\t * @param {respoke.Event} evt\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When setting up a call, receive notification that the browser has granted access to media.  This callback is\n\t * called every time respoke.Call#allow is fired.\n\t * @callback respoke.Call.onAllow\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * When setting up a call, receive notification that the app has asked the browser for permission to get audio or\n\t * video and is waiting on the browser to grant or reject permission. This callback will be called every time\n\t * respoke.Call#requesting-media is fired.\n\t * @callback respoke.Call.onRequestingMedia\n\t * @param {respoke.Event} evt\n\t * @param {string} evt.name - the event name.\n\t * @param {respoke.Call} evt.target\n\t */\n\t/**\n\t * The use of stats requires an additional module to Respoke. When on a call, receive periodic statistical\n\t * information about the call, including the codec, lost packets, and bandwidth being consumed. This callback is\n\t * called every time respoke.Call#stats is fired.\n\t * @callback respoke.MediaStatsParser.statsHandler\n\t * @param {respoke.Event} evt\n\t * @param {respoke.MediaStats} evt.stats - an object with stats in it.\n\t * @param {respoke.Call} evt.target\n\t * @param {string} evt.name - the event name.\n\t */\n\t/**\n\t * When on a call, receive local media when it becomes available. This is what you will need to provide if you want\n\t * to allow the user to preview and approve or reject their own video before a call. If this callback is provided,\n\t * Respoke will wait for call.answer() to be called before proceeding. If this callback is not provided,\n\t * Respoke will proceed without waiting for user input. This callback is called every time\n\t * respoke.Call#local-stream-received is fired.\n\t * @callback respoke.Call.previewLocalMedia\n\t * @param {object} element - the HTML5 Video element with the new stream attached.\n\t * @param {respoke.Call} call\n\t */\n\t/**\n\t * Receive the DirectConnection.\n\t * @callback respoke.Call.directConnectionSuccessHandler\n\t * @param {respoke.DirectConnection} directConnection\n\t */\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar respoke = __webpack_require__(1);\n\tvar log = respoke.log;\n\tvar Q = respoke.Q;\n\t\n\t/**\n\t * A wrapper around the stream from `getUserMedia`,\n\t * which is attached to a call at `call.outgoingMedia`.\n\t *\n\t * @class respoke.LocalMedia\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {object} [params.constraints]\n\t * @param {HTMLVideoElement} params.element - Pass in an optional html video element to have local\n\t * video attached to it.\n\t * @returns {respoke.LocalMedia}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    var that = respoke.EventEmitter(params);\n\t\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.LocalMedia';\n\t    /**\n\t     * Respoke media ID (different from a `MediaStream.id`).\n\t     * @memberof! respoke.LocalMedia\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = respoke.makeGUID();\n\t    /**\n\t     * The HTML element with video attached.\n\t     * @memberof! respoke.LocalMedia\n\t     * @name element\n\t     * @type {HTMLVideoElement}\n\t     */\n\t    that.element = params.element;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name hasScreenShare\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var hasScreenShare = params.hasScreenShare;\n\t    delete params.hasScreenShare;\n\t\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name screenShareSource\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var screenShareSource = params.source;\n\t    delete params.source;\n\t\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name sdpHasAudio\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasAudio = false;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name sdpHasVideo\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasVideo = false;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name sdpHasDataChannel\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasDataChannel = false;\n\t    /**\n\t     * A timer to make sure we only fire {respoke.LocalMedia#requesting-media} if the browser doesn't\n\t     * automatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.\n\t     * @memberof! respoke.LocalMedia\n\t     * @name allowTimer\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var allowTimer = 0;\n\t    /**\n\t     * @memberof! respoke.LocalMedia\n\t     * @name mediaOptions\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var mediaOptions = {\n\t        optional: [\n\t            { DtlsSrtpKeyAgreement: true },\n\t            { RtpDataChannels: false }\n\t        ]\n\t    };\n\t\n\t    /**\n\t     * The local `MediaStream` from `getUserMedia()`.\n\t     * @memberof! respoke.LocalMedia\n\t     * @name stream\n\t     * @type {RTCMediaStream}\n\t     */\n\t    that.stream = null;\n\t\n\t    /**\n\t     * The media deferred whose promise is returned from localMedia.start and resolved with the stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @name deferred\n\t     * @type {object}\n\t     * @private\n\t     */\n\t    var deferred = Q.defer();\n\t\n\t    function getStream(theConstraints) {\n\t        for (var i = 0; i < respoke.streams.length; i++) {\n\t            var s = respoke.streams[i];\n\t\n\t            var sConstraints = respoke.clone(s.constraints);\n\t            if (sConstraints.video && sConstraints.video.mandatory &&\n\t                sConstraints.video.mandatory.chromeMediaSourceId) {\n\t                delete sConstraints.video.mandatory.chromeMediaSourceId;\n\t            }\n\t\n\t            if (respoke.isEqual(sConstraints, theConstraints)) {\n\t                return s.stream;\n\t            }\n\t        }\n\t        return null;\n\t    }\n\t\n\t    function removeStream(theConstraints) {\n\t        var toRemoveIndex;\n\t        for (var i = 0; i < respoke.streams.length; i++) {\n\t            var s = respoke.streams[i];\n\t            if (respoke.isEqual(s.constraints, theConstraints)) {\n\t                toRemoveIndex = i;\n\t                break;\n\t            }\n\t        }\n\t        if (toRemoveIndex !== undefined) {\n\t            respoke.streams.splice(toRemoveIndex, 1);\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Save the local stream. Kick off SDP creation.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.onReceiveUserMedia\n\t     * @private\n\t     * @param {RTCMediaStream} theStream\n\t     */\n\t    function onReceiveUserMedia(theStream) {\n\t        that.stream = theStream;\n\t        clearTimeout(allowTimer);\n\t        /**\n\t         * The user has approved the request for media. Any UI changes made to remind the user to click Allow\n\t         * should be canceled now. This event is the same as the `onAllow` callback.  This event gets fired\n\t         * even if the allow process is automatic, i. e., permission and media is granted by the browser\n\t         * without asking the user to approve it.\n\t         * @event respoke.LocalMedia#allow\n\t         * @type {respoke.Event}\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         */\n\t        that.fire('allow');\n\t        log.debug('User gave permission to use media.');\n\t        log.debug('onReceiveUserMedia');\n\t\n\t        that.element = that.element || document.createElement('video');\n\t\n\t        // This still needs some work. Using cached streams causes an unused video element to be passed\n\t        // back to the App. This is because we assume at the moment that only one local media video element\n\t        // will be needed. The first one passed back will contain media and the others will fake it. Media\n\t        // will still be sent with every peer connection. Also need to study the use of getLocalElement\n\t        // and the implications of passing back a video element with no media attached.\n\t        var aStream = getStream(that.constraints);\n\t        if (aStream) {\n\t            aStream.numPc += 1;\n\t\n\t            attachMediaStream(that.element, that.stream);\n\t            // We won't want our local video outputting audio.\n\t            that.element.muted = true;\n\t            that.element.autoplay = true;\n\t\n\t            // perform cleanup on the LocalMedia instance if the underlying stream has ended\n\t            aStream.addEventListener('ended', that.stop, false);\n\t\n\t            deferred.resolve();\n\t        } else {\n\t            that.stream.numPc = 1;\n\t            respoke.streams.push({stream: that.stream, constraints: that.constraints});\n\t\n\t            attachMediaStream(that.element, that.stream);\n\t            // We won't want our local video outputting audio.\n\t            that.element.muted = true;\n\t            that.element.autoplay = true;\n\t\n\t            // perform cleanup on the LocalMedia instance if the underlying stream has ended\n\t            that.stream.addEventListener('ended', that.stop, false);\n\t            deferred.resolve();\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Expose getAudioTracks.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.getAudioTracks\n\t     */\n\t    that.getAudioTracks = function () {\n\t        if (that.stream) {\n\t            return that.stream.getAudioTracks();\n\t        }\n\t        return [];\n\t    };\n\t\n\t    /**\n\t     * Expose getVideoTracks.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.getVideoTracks\n\t     */\n\t    that.getVideoTracks = function () {\n\t        if (that.stream) {\n\t            return that.stream.getVideoTracks();\n\t        }\n\t        return [];\n\t    };\n\t\n\t    /**\n\t     * Create the RTCPeerConnection and add handlers. Process any offer we have already received.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.requestMedia\n\t     * @private\n\t     */\n\t    function requestMedia() {\n\t        var theStream;\n\t        var requestingScreenShare;\n\t\n\t        if (!that.constraints) {\n\t            deferred.reject(new Error('No constraints.'));\n\t            return;\n\t        }\n\t\n\t        if (respoke.useFakeMedia === true) {\n\t            that.constraints.fake = true;\n\t        }\n\t\n\t        theStream = getStream(that.constraints);\n\t        if (theStream) {\n\t            log.debug('using old stream');\n\t            onReceiveUserMedia(theStream);\n\t            return;\n\t        }\n\t\n\t        // TODO set getStream(that.constraints) = true as a flag that we are already\n\t        // attempting to obtain this media so the race condition where gUM is called twice with\n\t        // the same constraints when calls are placed too quickly together doesn't occur.\n\t        allowTimer = setTimeout(function delayPermissionsRequest() {\n\t            /**\n\t             * The browser is asking for permission to access the User's media. This would be an ideal time\n\t             * to modify the UI of the application so that the user notices the request for permissions\n\t             * and approves it.\n\t             * @event respoke.LocalMedia#requesting-media\n\t             * @type {respoke.Event}\n\t             * @property {string} name - the event name.\n\t             * @property {respoke.LocalMedia} target\n\t             */\n\t            that.fire('requesting-media');\n\t        }, 500);\n\t\n\t        requestingScreenShare =\n\t            (that.constraints.video.mandatory && that.constraints.video.mandatory.chromeMediaSource) ||\n\t            (that.constraints.video.chromeMediaSource) || (that.constraints.video.mediaSource);\n\t\n\t        if (requestingScreenShare) {\n\t            if (respoke.isNwjs || (respoke.needsChromeExtension && respoke.hasChromeExtension)) {\n\t                respoke.chooseDesktopMedia({source: screenShareSource}, function (params) {\n\t                    if (!params.sourceId) {\n\t                        deferred.reject(new Error(\"Error trying to get screensharing source: \" + params.error));\n\t                        return;\n\t                    }\n\t                    that.constraints.video.mandatory.chromeMediaSourceId = params.sourceId;\n\t                    log.debug(\"Running getUserMedia with constraints\", that.constraints);\n\t                    getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n\t                });\n\t                return;\n\t            } else if (respoke.needsFirefoxExtension && respoke.hasFirefoxExtension) {\n\t                log.debug(\"Running getUserMedia with constraints\", that.constraints);\n\t                getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n\t                return;\n\t            } else {\n\t                deferred.reject(new Error(\"Screen sharing not implemented on this platform yet.\"));\n\t                return;\n\t            }\n\t        }\n\t        log.debug(\"Running getUserMedia with constraints\", that.constraints);\n\t        getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n\t    }\n\t\n\t    /**\n\t     * Handle any error that comes up during the process of getting user media.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.onUserMediaError\n\t     * @private\n\t     * @param {object}\n\t     */\n\t    function onUserMediaError(p) {\n\t        var errorMessage = p.code === 1 ? \"Permission denied.\" : \"Unknown.\";\n\t        deferred.reject(new Error(\"Error getting user media: \" + errorMessage));\n\t    }\n\t\n\t    /**\n\t     * Whether the video stream is muted, or undefined if no stream of this type exists.\n\t     *\n\t     * All video tracks must be muted for this to return `false`.\n\t     * @returns boolean\n\t     */\n\t    that.isVideoMuted = function () {\n\t        if (!that.stream || !that.stream.getVideoTracks().length) {\n\t            return undefined;\n\t        }\n\t\n\t        return that.stream.getVideoTracks().every(function (track) {\n\t            return !track.enabled;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Mute local video stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.muteVideo\n\t     * @fires respoke.LocalMedia#mute\n\t     */\n\t    that.muteVideo = function () {\n\t        if (that.isVideoMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n\t            track.enabled = false;\n\t        });\n\t        /**\n\t         * Indicate that the mute status of local audio or video has changed.\n\t         * @event respoke.LocalMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'video',\n\t            muted: true\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Unmute local video stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.unmuteVideo\n\t     * @fires respoke.LocalMedia#mute\n\t     */\n\t    that.unmuteVideo = function () {\n\t        if (!that.isVideoMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n\t            track.enabled = true;\n\t        });\n\t        /**\n\t         * Indicate that the mute status of local audio or video has changed.\n\t         * @event respoke.LocalMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'video',\n\t            muted: false\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Whether the audio stream is muted, or undefined if no track of this type exists.\n\t     *\n\t     * All audio tracks must be muted for this to return `false`.\n\t     * @returns boolean\n\t     */\n\t    that.isAudioMuted = function () {\n\t        if (!that.stream || !that.stream.getAudioTracks().length) {\n\t            return undefined;\n\t        }\n\t        return that.stream.getAudioTracks().every(function (track) {\n\t            return !track.enabled;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Mute local audio stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.muteAudio\n\t     * @fires respoke.LocalMedia#mute\n\t     */\n\t    that.muteAudio = function () {\n\t        if (that.isAudioMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n\t            track.enabled = false;\n\t        });\n\t        /**\n\t         * Indicate that the mute status of local audio or video has changed.\n\t         * @event respoke.LocalMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'audio',\n\t            muted: true\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Unmute local audio stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.unmuteAudio\n\t     * @fires respoke.LocalMedia#mute\n\t     */\n\t    that.unmuteAudio = function () {\n\t        if (!that.isAudioMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n\t            track.enabled = true;\n\t        });\n\t        /**\n\t         * Indicate that the mute status of local audio or video has changed.\n\t         * @event respoke.LocalMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'audio',\n\t            muted: false\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Stop the stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.stop\n\t     * @fires respoke.LocalMedia#stop\n\t     */\n\t    that.stop = function () {\n\t        if (!that.stream) {\n\t            return;\n\t        }\n\t\n\t        that.stream.numPc -= 1;\n\t        if (that.stream.numPc === 0) {\n\t            that.stream.stop();\n\t            removeStream(that.constraints);\n\t        }\n\t        that.stream = null;\n\t        /**\n\t         * Indicate that local media has stopped.\n\t         * @event respoke.LocalMedia#stop\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.LocalMedia} target\n\t         */\n\t        that.fire('stop');\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we are sending a screenshare.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.hasScreenShare\n\t     * @return {boolean}\n\t     */\n\t    that.hasScreenShare = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getVideoTracks().length > 0 && hasScreenShare);\n\t        }\n\t        return hasScreenShare;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we are sending video.\n\t     *\n\t     * Note: This method will return true when the video is a screenshare.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.hasVideo\n\t     * @return {boolean}\n\t     */\n\t    that.hasVideo = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getVideoTracks().length > 0);\n\t        }\n\t        return sdpHasVideo;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we are sending audio.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.hasAudio\n\t     * @return {boolean}\n\t     */\n\t    that.hasAudio = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getAudioTracks().length > 0);\n\t        }\n\t        return sdpHasAudio;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we have media yet.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.hasMedia\n\t     * @return {boolean}\n\t     */\n\t    that.hasMedia = function () {\n\t        return !!that.stream;\n\t    };\n\t\n\t    /**\n\t     * Save and parse the SDP.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.setSDP\n\t     * @param {RTCSessionDescription} oSession\n\t     * @private\n\t     */\n\t    that.setSDP = function (oSession) {\n\t        sdpHasVideo = respoke.sdpHasVideo(oSession.sdp);\n\t        sdpHasAudio = respoke.sdpHasAudio(oSession.sdp);\n\t        sdpHasDataChannel = respoke.sdpHasDataChannel(oSession.sdp);\n\t\n\t        // We don't have media yet & this can still be changed so create the defaults based on what the sdp says.\n\t        if (that.temporary) {\n\t            that.constraints = {\n\t                video: sdpHasVideo,\n\t                audio: sdpHasAudio,\n\t                mandatory: {},\n\t                optional: []\n\t            };\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Parse the constraints.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.setConstraints\n\t     * @param {MediaConstraints} constraints\n\t     * @private\n\t     */\n\t    that.setConstraints = function (constraints) {\n\t        that.constraints = constraints;\n\t        sdpHasVideo = respoke.constraintsHasVideo(that.constraints);\n\t        sdpHasAudio = respoke.constraintsHasAudio(that.constraints);\n\t    };\n\t\n\t    /**\n\t     * Start the stream.\n\t     * @memberof! respoke.LocalMedia\n\t     * @method respoke.LocalMedia.start\n\t     * @fires respoke.LocalMedia#start\n\t     * @param {object} [params]\n\t     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n\t     * method only.\n\t     * @returns {Promise|undefined}\n\t     */\n\t    that.start = function (params) {\n\t        var retVal;\n\t        params = params || {};\n\t\n\t        if (that.temporary) {\n\t            deferred.reject(new Error(\"Temporary local media started!\"));\n\t        } else {\n\t            requestMedia();\n\t        }\n\t\n\t        retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\t        return retVal;\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.LocalMedia\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar respoke = __webpack_require__(1);\n\t\n\t/**\n\t * Class for managing the remote media stream,\n\t * which is attached to a call at `call.outgoingMedia`.\n\t *\n\t * @class respoke.RemoteMedia\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {object} params.constraints\n\t * @param {boolean} params.temporary - whether this instance represents our best guess of future media. If so,\n\t * this object will be deleted when real media comes in. It will be replaced by different instance of\n\t * respoke.RemoteMedia representing the actual state of media.\n\t * @param {HTMLVideoElement} params.element - Pass in an optional html video element to have remote\n\t * video attached to it.\n\t * @returns {respoke.RemoteMedia}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var that = respoke.EventEmitter(params);\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.RemoteMedia';\n\t    /**\n\t     * Respoke media ID (different from a `MediaStream.id`).\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name id\n\t     * @type {string}\n\t     */\n\t    that.id = respoke.makeGUID();\n\t    /**\n\t     * The HTML element with attached video.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name element\n\t     * @type {HTMLVideoElement}\n\t     */\n\t    that.element = params.element || document.createElement('video');\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name hasScreenShare\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var hasScreenShare = params.hasScreenShare;\n\t    delete params.hasScreenShare;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name sdpHasAudio\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasAudio = false;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name sdpHasVideo\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasVideo = false;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name sdpHasDataChannel\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    var sdpHasDataChannel = false;\n\t    /**\n\t     * A timer to make sure we only fire {respoke.RemoteMedia#requesting-media} if the browser doesn't\n\t     * automatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name allowTimer\n\t     * @private\n\t     * @type {number}\n\t     */\n\t    var allowTimer = 0;\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name mediaOptions\n\t     * @private\n\t     * @type {object}\n\t     */\n\t    var mediaOptions = {\n\t        optional: [\n\t            { DtlsSrtpKeyAgreement: true },\n\t            { RtpDataChannels: false }\n\t        ]\n\t    };\n\t    /**\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name pc\n\t     * @private\n\t     * @type {respoke.PeerConnection}\n\t     */\n\t    var pc = params.pc;\n\t    delete that.pc;\n\t    /**\n\t     * The remote `MediaStream`.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @name stream\n\t     * @type {RTCMediaStream}\n\t     */\n\t    that.stream = params.stream;\n\t\n\t    if (!that.temporary) {\n\t        attachMediaStream(that.element, that.stream);\n\t        that.element.autoplay = true;\n\t        setTimeout(that.element.play.bind(that.element)); // stupid Firefox requires this.\n\t    }\n\t\n\t    /**\n\t     * Indicate whether we are receiving a screenshare.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.hasScreenShare\n\t     * @return {boolean}\n\t     */\n\t    that.hasScreenShare = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getVideoTracks().length > 0 && hasScreenShare);\n\t        }\n\t        return hasScreenShare;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we are receiving video.\n\t     *\n\t     * Note: This method will return true when the video is a screenshare.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.hasVideo\n\t     * @return {boolean}\n\t     */\n\t    that.hasVideo = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getVideoTracks().length > 0);\n\t        }\n\t        return sdpHasVideo;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we are receiving audio.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.hasAudio\n\t     * @return {boolean}\n\t     */\n\t    that.hasAudio = function () {\n\t        if (that.stream) {\n\t            return (that.stream.getAudioTracks().length > 0);\n\t        }\n\t        return sdpHasAudio;\n\t    };\n\t\n\t    /**\n\t     * Indicate whether we have media yet.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.hasMedia\n\t     * @return {boolean}\n\t     */\n\t    that.hasMedia = function () {\n\t        return !!that.stream;\n\t    };\n\t\n\t    /**\n\t     * Save and parse the SDP\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.setSDP\n\t     * @param {RTCSessionDescription} oSession\n\t     * @private\n\t     */\n\t    that.setSDP = function (oSession) {\n\t        sdpHasVideo = respoke.sdpHasVideo(oSession.sdp);\n\t        sdpHasAudio = respoke.sdpHasAudio(oSession.sdp);\n\t        sdpHasDataChannel = respoke.sdpHasDataChannel(oSession.sdp);\n\t    };\n\t\n\t    /**\n\t     * Parse the constraints.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.setConstraints\n\t     * @param {MediaConstraints} constraints\n\t     * @private\n\t     */\n\t    that.setConstraints = function (constraints) {\n\t        that.constraints = constraints;\n\t        sdpHasVideo = respoke.constraintsHasVideo(that.constraints);\n\t        sdpHasAudio = respoke.constraintsHasAudio(that.constraints);\n\t    };\n\t\n\t    /**\n\t     * Expose getAudioTracks.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.getAudioTracks\n\t     */\n\t    that.getAudioTracks = function () {\n\t        if (that.stream) {\n\t            return that.stream.getAudioTracks();\n\t        }\n\t        return [];\n\t    };\n\t\n\t    /**\n\t     * Expose getVideoTracks.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.getVideoTracks\n\t     */\n\t    that.getVideoTracks = function () {\n\t        if (that.stream) {\n\t            return that.stream.getVideoTracks();\n\t        }\n\t        return [];\n\t    };\n\t\n\t    /**\n\t     * Stop the stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.stop\n\t     * @fires respoke.RemoteMedia#stop\n\t     */\n\t    that.stop = function () {\n\t        if (!that.stream) {\n\t            return;\n\t        }\n\t\n\t        that.stream.numPc -= 1;\n\t        if (that.stream.numPc === 0) {\n\t            that.stream.stop();\n\t        }\n\t        that.stream = null;\n\t        /**\n\t         * Indicate that remote media has stopped.\n\t         * @event respoke.RemoteMedia#stop\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         */\n\t        that.fire('stop');\n\t    };\n\t\n\t    /**\n\t     * Whether the video stream is muted.\n\t     *\n\t     * All video tracks must be muted for this to return `false`.\n\t     * @returns boolean\n\t     */\n\t    that.isVideoMuted = function () {\n\t        if (!that.stream) {\n\t            return false;\n\t        }\n\t        return that.stream.getVideoTracks().every(function (track) {\n\t            return !track.enabled;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Mute remote video stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.muteVideo\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.muteVideo = function () {\n\t        if (that.isVideoMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n\t            track.enabled = false;\n\t        });\n\t        /**\n\t         * Indicate that the muted status of remote video or audio has changed.\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'video',\n\t            muted: true\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Unmute remote video stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.unmuteVideo\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.unmuteVideo = function () {\n\t        if (!that.isVideoMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n\t            track.enabled = true;\n\t        });\n\t        /**\n\t         * Indicate that the muted status of remote video or audio has changed.\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'video',\n\t            muted: false\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Whether the audio stream is muted.\n\t     *\n\t     * All audio tracks must be muted for this to return `false`.\n\t     * @returns boolean\n\t     */\n\t    that.isAudioMuted = function () {\n\t        if (!that.stream) {\n\t            return false;\n\t        }\n\t        return that.stream.getAudioTracks().every(function (track) {\n\t            return !track.enabled;\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Mute remote audio stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.muteAudio\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.muteAudio = function () {\n\t        if (that.isAudioMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n\t            track.enabled = false;\n\t        });\n\t        /**\n\t         * Indicate that the muted status of remote video or audio has changed.\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'audio',\n\t            muted: true\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Unmute remote audio stream.\n\t     * @memberof! respoke.RemoteMedia\n\t     * @method respoke.RemoteMedia.unmuteAudio\n\t     * @fires respoke.RemoteMedia#mute\n\t     */\n\t    that.unmuteAudio = function () {\n\t        if (!that.isAudioMuted()) {\n\t            return;\n\t        }\n\t        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n\t            track.enabled = true;\n\t        });\n\t        /**\n\t         * Indicate that the muted status of remote video or audio has changed.\n\t         * @event respoke.RemoteMedia#mute\n\t         * @property {string} name - the event name.\n\t         * @property {respoke.RemoteMedia} target\n\t         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n\t         * has been changed.\n\t         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n\t         */\n\t        that.fire('mute', {\n\t            type: 'audio',\n\t            muted: false\n\t        });\n\t    };\n\t\n\t    return that;\n\t}; // End respoke.RemoteMedia\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Copyright 2014, Digium, Inc.\n\t * All rights reserved.\n\t *\n\t * This source code is licensed under The MIT License found in the\n\t * LICENSE file in the root directory of this source tree.\n\t *\n\t * For all details and documentation:  https://www.respoke.io\n\t * @ignore\n\t */\n\t\n\tvar Q = __webpack_require__(8);\n\tvar respoke = __webpack_require__(1);\n\t\n\t/**\n\t * A conference call to one or more people with audio. Eventually this will handle video, too.\n\t * @class respoke.Conference\n\t * @constructor\n\t * @augments respoke.EventEmitter\n\t * @param {object} params\n\t * @param {string} params.id - The id that should be used to create the conference call or the ID\n\t * of the call to join.\n\t * @param {string} params.instanceId - client id\n\t * @param {boolean} params.caller - whether or not we initiated the call\n\t * @param {boolean} [params.receiveOnly] - whether or not we accept media\n\t * @param {boolean} [params.sendOnly] - whether or not we send media\n\t * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n\t * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n\t * relay servers. If it cannot flow through relay servers, the call will fail.\n\t * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n\t * required to flow peer-to-peer. If it cannot, the call will fail.\n\t * @param {respoke.Endpoint} params.remoteEndpoint - The endpoint who is being called.\n\t * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint.\n\t * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n\t * wants to perform an action between local media becoming available and calling approve().\n\t * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n\t * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n\t * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n\t * @param {function} params.signalReport - Signaling action from SignalingChannel.\n\t * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n\t * @param {Array<RTCConstraints>} params.constraints - Array of WebRTC constraints.\n\t * @param {respoke.Conference.onJoin} [params.onJoin] - Callback for when a participant joins the conference.\n\t * @param {respoke.Conference.onLeave} [params.onLeave] - Callback for when a participant leaves the conference.\n\t * @param {respoke.Conference.onMessage} [params.onMessage] - Callback for when a message is sent to the conference.\n\t * @param {respoke.Conference.onMute} [params.onMute] - Callback for when local or remote media is muted or unmuted.\n\t * @param {respoke.Conference.onTopic} [params.onTopic] - Callback for the conference topic changes.\n\t * @param {respoke.Conference.onPresenter} [params.onPresenter] - Callback for when the presenter changes.\n\t * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n\t * media renegotiation.\n\t * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n\t * element with the local audio and/or video attached.\n\t * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n\t * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n\t * it was ended in a graceful manner.\n\t * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n\t * This callback will be called when media is muted or unmuted.\n\t * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n\t * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n\t * for the user to give permission to start getting audio or video.\n\t * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n\t * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n\t * the approval was automatic.\n\t * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n\t * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n\t * granted by the browser without asking the user to approve it.\n\t * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n\t * video attached to it.\n\t * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n\t * video attached to it.\n\t * @returns {respoke.Conference}\n\t */\n\tmodule.exports = function (params) {\n\t    \"use strict\";\n\t    params = params || {};\n\t    /**\n\t     * @memberof! respoke.Client\n\t     * @name instanceId\n\t     * @private\n\t     * @type {string}\n\t     */\n\t    var instanceId = params.instanceId;\n\t    var signalingChannel = params.signalingChannel;\n\t    var that = respoke.EventEmitter({\n\t        id: params.id\n\t    });\n\t\n\t    that.listen('join', params.onJoin);\n\t    that.listen('leave', params.onLeave);\n\t    that.listen('message', params.onMessage);\n\t    that.listen('mute', params.onMute);\n\t    that.listen('topic', params.onTopic);\n\t    that.listen('presenter', params.onPresenter);\n\t    delete params.onJoin;\n\t    delete params.onLeave;\n\t    delete params.onMessage;\n\t    delete params.onMute;\n\t    delete params.onTopic;\n\t    delete params.onPresenter;\n\t\n\t    params.caller = true;\n\t    params.conferenceId = params.id;\n\t    delete params.id;\n\t    params.remoteEndpoint = that;\n\t    that.call = respoke.Call(params);\n\t\n\t    // Redirect a bunch of events.\n\t    [\n\t        'mute', 'hangup', 'connect', 'stats', 'error', 'local-stream-received',\n\t         'remote-stream-received', 'requesting-media', 'approve', 'allow'\n\t    ].forEach(function (eventName) {\n\t        that.call.listen(eventName, function (evt) {\n\t            evt.call = that.call; // target will be updated to point to this conference object.\n\t            that.fire(eventName, evt);\n\t        });\n\t    });\n\t\n\t    delete that.instanceId;\n\t\n\t    /**\n\t     * A name to identify this class\n\t     * @memberof! respoke.Conference\n\t     * @name className\n\t     * @type {string}\n\t     */\n\t    that.className = 'respoke.Conference';\n\t\n\t    /**\n\t     * @memberof! respoke.Conference\n\t     * @name client\n\t     * @type {respoke.Client}\n\t     * @private\n\t     */\n\t    var client = respoke.getClient(instanceId);\n\t\n\t    /**\n\t     * Leave the conference.\n\t     * @memberof! respoke.Conference\n\t     * @method respoke.Conference.leave\n\t     */\n\t    that.leave = that.call.hangup;\n\t\n\t    /**\n\t     * Mute local user's audio.\n\t     * @memberof! respoke.Conference\n\t     * @method respoke.Conference.muteAudio\n\t     */\n\t    that.muteAudio = that.call.muteAudio;\n\t\n\t    /**\n\t     * ## The plugin `respoke.MediaStats` must be loaded before using this method.\n\t     *\n\t     * Start the process of listening for a continuous stream of statistics about the flow of audio and/or video.\n\t     * Since we have to wait for both the answer and offer to be available before starting\n\t     * statistics, the library returns a promise for the stats object. The statistics object does not contain the\n\t     * statistics; rather it contains methods of interacting with the actions of obtaining statistics. To obtain\n\t     * the actual statistics one time, use stats.getStats(); use the onStats callback to obtain a continuous\n\t     * stream of statistics every `interval` seconds.  Returns null if stats module is not loaded.\n\t     *\n\t     *     conference.getStats({\n\t     *         onStats: function (evt) {\n\t     *             console.log('Stats', evt.stats);\n\t     *         }\n\t     *     }).done(function () {\n\t     *         console.log('Stats started');\n\t     *     }, function (err) {\n\t     *         console.log('Call is already hung up.');\n\t     *     });\n\t     *\n\t     * @memberof! respoke.Conference\n\t     * @method respoke.Conference.getStats\n\t     * @param {object} params\n\t     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n\t     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive\n\t     * the stats. If no callback is provided, the call's report will contain stats but the developer will not\n\t     * receive them on the client-side.\n\t     * @param {respoke.Call.statsSuccessHandler} [params.onSuccess] - Success handler for this invocation of\n\t     * this method only.\n\t     * @param {respoke.Call.errorHandler} [params.onError] - Error handler for this invocation of this method only.\n\t     * @returns {Promise<object>|null}\n\t     */\n\t    if (respoke.MediaStats) {\n\t        that.getStats = that.call.getStats;\n\t    }\n\t\n\t    /**\n\t     * Get an array containing a Connection object for each participant in the conference.\n\t     * @memberof! respoke.Conference\n\t     * @method respoke.Conference.getParticipants\n\t     * @returns {Promise<Array>}\n\t     */\n\t    that.getParticipants = function () {\n\t        return signalingChannel.getConferenceParticipants({\n\t            id: that.id\n\t        });\n\t    };\n\t\n\t    /**\n\t     * If the logged-in endpoint has permission through its Respoke role, forcibly remove another participant\n\t     * from the conference, ending its conference call.\n\t     * @memberof! respoke.Conference\n\t     * @method respoke.Conference.removeParticipant\n\t     * @param {object} params\n\t     * @param {string} [endpointId] - The endpoint id of the endpoint to be removed\n\t     * @param {string} [connectionId] - The connection id of the connection to be removed\n\t     * @returns {Promise}\n\t     */\n\t    that.removeParticipant = function (params) {\n\t        params = params || {};\n\t        params.conferenceId = that.id;\n\t        return signalingChannel.removeConferenceParticipant(params);\n\t    };\n\t\n\t    /**\n\t     * If the logged-in endpoint has permission through its Respoke role, shut down the conference, removing all\n\t     * participants.\n\t     * @memberof! respoke.Conference\n\t     * @method respoke.Conference.destroy\n\t     * @returns {Promise}\n\t     */\n\t    that.destroy = function (params) {\n\t        return signalingChannel.destroyConference({\n\t            conferenceId: that.id\n\t        });\n\t    };\n\t\n\t    return that;\n\t};\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** respoke.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 1cb2bf30b24e9abb86da\n **/","module.exports = require('./respoke/respoke');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0\n **/","\"use strict\";\n/*jshint bitwise: false*/\n\n/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar Airbrake = require('airbrake-js');\nvar log = require('loglevel');\nlog.setLevel(log.levels.WARN);\n\nvar originalFactory = log.methodFactory;\nlog.methodFactory = function logMethodFactory(methodName, logLevel) {\n    var logMethod = originalFactory(methodName, logLevel);\n    var errorReporter;\n\n    if (!window.skipErrorReporting && methodName === 'error') {\n        var airbrake = new Airbrake({\n            projectId: '98133',\n            projectKey: 'cd3e085acc5e554658ebcdabd112a6f4'\n        });\n        errorReporter = function (message) {\n            airbrake.push({ error: { message: message } });\n        };\n    } else {\n        errorReporter = function () { };\n    }\n\n    return function (message) {\n        var args = Array.prototype.slice.call(arguments);\n        var reporterMessage = args.join(' ');\n\n        args.unshift('[Respoke]');\n        logMethod.apply(this, args);\n        errorReporter(reporterMessage);\n    };\n};\n\nrequire('./deps/adapter');\n\n/**\n * `respoke` is a global static class.\n *\n *\n * Include the [latest version](https://cdn.respoke.io/respoke.min.js) or\n * [choose a previous release](http://cdn.respoke.io/list.html).\n *\n * Or use `npm install --save respoke`.\n *\n * Interact with Respoke primarily via [`respoke.Client`](respoke.Client.html):\n *\n *      var client = respoke.createClient();\n *\n *\n * **Development mode without brokered auth**\n *\n *      var client = respoke.createClient({\n *          appId: \"XXXXXXX-my-app-id-XXXXXX\",\n *          developmentMode: true,\n *          endpointId: \"daveops\"\n *      });\n *\n *      client.listen('connect', function () {\n *          console.log('connected to respoke!');\n *      });\n *\n *      client.listen('error', function (err) {\n *          console.error('Connection to Respoke failed.', err);\n *      });\n *\n *      client.connect();\n *\n *\n * **Production mode with brokered auth**\n *\n *      var client = respoke.createClient();\n *\n *      client.listen('connect', function () {\n *          console.log('connected to respoke!');\n *      });\n *\n *      client.listen('error', function (err) {\n *          console.error('Connection to Respoke failed.', err);\n *      });\n *\n *      // Respoke auth token obtained by your server.\n *      // This is how you control who can connect to Respoke app.\n *      // See API docs for POST [base]/tokens\n *      var tokenId = \"XXXX-XXXX-brokered-auth-token-XXXXX\";\n *\n *      // connect to respoke with the token\n *      client.connect({\n *          token: tokenId\n *      });\n *\n *      // fetch a new token from your server if it expires\n *      client.listen('disconnect', function (evt) {\n *          // fetch another token from your server.\n *          var newTokenId = \"XXXX-XXXX-brokered-auth-token2-XXXXX\";\n *          client.connect({\n *              token: newTokenId\n *          });\n *      });\n *\n *\n *\n * ### Event listeners vs callback handlers\n *\n * There are two ways to attach listeners. It is highly recommended that you choose one pattern\n * and stick to it throughout your app.\n *\n * For every `event-name`, there is a corresponding callback `onEventName`.\n *\n * **With a listener**\n *\n *      var client = respoke.createClient();\n *      client.listen('connect', function () { });\n *\n * **or with a callback**\n *\n *      var client = respoke.createClient({\n *          // other options go here\n *\n *          onConnect: function () { }\n *      });\n *\n *\n * @namespace respoke\n * @class respoke\n * @global\n * @link https://cdn.respoke.io/respoke.min.js\n */\n\nvar EventEmitter = require('./event');\nvar respoke = module.exports = EventEmitter({\n    buildNumber: 'NO BUILD NUMBER',\n    streams: [],\n    Q: require('q')\n});\n\nrespoke.Q.longStackSupport = true;\nrespoke.Q.stackJumpLimit = 5;\nrespoke.Q.longStackJumpLimit = 20;\nrespoke.Q.stopUnhandledRejectionTracking();\n\n/**\n * A map of respoke.Client instances available for use. This is useful if you would like to separate some\n * functionality of your app into a separate Respoke app which would require a separate appId.\n * @type {boolean}\n */\nrespoke.instances = {};\n\n/**\n * Indicate whether the user's browser is Chrome and requires the Respoke Chrome extension to do screen sharing.\n * @type {boolean}\n * @private\n */\nrespoke.needsChromeExtension = !!(window.chrome && !window.opera && navigator.webkitGetUserMedia);\n\n/**\n * Indicate whether the user's browser is Firefox and requires the Respoke Firefox extension to do screen sharing.\n * @type {boolean}\n * @private\n */\nrespoke.needsFirefoxExtension = window.webrtcDetectedBrowser === 'firefox';\n\n/**\n * Indicate whether the user has a Respoke Chrome extension installed and running correcty on this domain.\n * @type {boolean}\n * @private\n */\nrespoke.hasChromeExtension = false;\n\n/**\n * Indicate whether the user has a Respoke Firefox extension installed and running correcty on this domain.\n * @type {boolean}\n * @private\n */\nrespoke.hasFirefoxExtension = false;\n\n/**\n * This method will be overridden in the case that an extension or plugin is available for screen sharing.\n *\n * @static\n * @private\n * @memberof respoke\n */\nrespoke.chooseDesktopMedia = function () {\n    log.warn(\"Screen sharing is not implemented for this browser.\");\n};\n\n/**\n * Indicate whether we are dealing with node-webkit, and expose chooseDesktopMedia if so\n * @type {boolean}\n * @private\n */\nrespoke.isNwjs = (function () {\n    var gui;\n    var isNwjs = !!((typeof process !== 'undefined') && (typeof global !== 'undefined') &&\n        global.window && global.window.nwDispatcher);\n\n    if (isNwjs) {\n        // expose native node-webkit chooseDesktopMedia (requires nw.js 0.12+)\n        gui = window.nwDispatcher.requireNwGui();\n        respoke.chooseDesktopMedia = function (data, callback) {\n            // make data param optional\n            if (!callback && (typeof data === 'function')) {\n                callback = data;\n                data = null;\n            }\n\n            /*!\n             * mediaSources can be one of 'window', 'screen', or 'tab', or an array with multiples\n             * https://developer.chrome.com/extensions/desktopCapture\n             */\n            var mediaSources = data && data.source ? [data.source] : ['window', 'screen'];\n\n            gui.Screen.Init();\n            gui.Screen.chooseDesktopMedia(mediaSources, function (sourceId) {\n                callback({\n                    type: 'respoke-source-id',\n                    sourceId: sourceId\n                });\n            });\n        };\n    }\n\n    return isNwjs;\n})();\n\n/**\n * Create an Event. This is used in the Chrome/Firefox extensions to communicate between the library and extension.\n * @type {function}\n * @private\n */\nrespoke.extEvent = function (type, data) {\n    var evt = document.createEvent(\"CustomEvent\");\n    evt.initCustomEvent(type, true, true, data);\n    return evt;\n};\n\n/**\n * `\"v0.0.0\"`\n *\n * The respoke.min.js version.\n *\n * Past versions can be found at [cdn.respoke.io/list.html](http://cdn.respoke.io/list.html)\n * @type {string}\n */\nrespoke.version = respoke.buildNumber + \"\";\n\nrespoke.log = log;\nrespoke.Class = require('./class');\nrespoke.EventEmitter = EventEmitter;\nrespoke.Client = require('./client');\nrespoke.Connection = require('./connection');\nrespoke.Endpoint = require('./endpoint');\nrespoke.TextMessage = require('./textMessage');\nrespoke.SignalingMessage = require('./signalingMessage');\nrespoke.Group = require('./group');\nrespoke.SignalingChannel = require('./signalingChannel');\nrespoke.DirectConnection = require('./directConnection');\nrespoke.PeerConnection = require('./peerConnection');\nrespoke.CallState = require('./callState');\nrespoke.Call = require('./call');\nrespoke.LocalMedia = require('./localMedia');\nrespoke.RemoteMedia = require('./remoteMedia');\nrespoke.Conference = require('./conference');\n\n/*!\n * Get information from the Respoke Screen Sharing Chrome extension if it is installed.\n */\nfunction chromeScreenSharingExtensionReady(evt) {\n    var data = evt.detail;\n    if (data.available !== true) {\n        return;\n    }\n\n    respoke.hasChromeExtension = true;\n    respoke.chooseDesktopMedia = function (params, callback) {\n        if (!callback) {\n            throw new Error(\"Can't choose desktop media without callback parameter.\");\n        }\n\n        function sourceIdListener(evt) {\n            var data = evt.detail;\n\n            respoke.screenSourceId = data.sourceId;\n            callback(data);\n            document.removeEventListener(\"respoke-source-id\", sourceIdListener);\n        }\n\n        document.dispatchEvent(respoke.extEvent('ct-respoke-source-id', {\n            source: params.source ? [params.source] : ['screen', 'window']\n        }));\n\n        document.addEventListener(\"respoke-source-id\", sourceIdListener);\n    };\n\n    respoke.fire('extension-loaded', {\n        type: 'screen-sharing'\n    });\n\n    log.info(\"Respoke Screen Share Chrome extension available for use.\");\n}\n\n// TODO: remove 'respoke-available' event listener on next major version bump\ndocument.addEventListener('respoke-available', chromeScreenSharingExtensionReady);\ndocument.addEventListener('respoke-chrome-screen-sharing-available', chromeScreenSharingExtensionReady);\ndocument.addEventListener('respoke-firefox-screen-sharing-available', function (evt) {\n\n    var data = evt.detail;\n    if (data !== 'available') {\n        return;\n    }\n\n    respoke.hasFirefoxExtension = true;\n\n    respoke.fire('extension-loaded', {\n        type: 'screen-sharing'\n    });\n\n    log.info(\"Respoke Screen Share Firefox extension available for use.\");\n});\n\n/**\n * This is one of two possible entry points for interating with the library.\n *\n * This method creates a new Client object\n * which represents your user's connection to your Respoke app.\n *\n * This method **automatically calls client.connect(params)** after the client is created.\n *\n * @static\n * @memberof respoke\n * @param {object} params Parameters to the respoke.Client constructor.\n * @param {string} [params.appId]\n * @param {string} [params.baseURL]\n * @param {string} [params.token]\n * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n * operation and will limit the services you will be able to use.\n * @param {boolean} [params.reconnect=false] - Whether or not to automatically reconnect to the Respoke service\n * when a disconnect occurs.\n * @param {function} [params.onSuccess] - Success handler for this invocation of this method only.\n * @param {function} [params.onError] - Error handler for this invocation of this method only.\n * @param {function} [params.onJoin] - Callback for when this client's endpoint joins a group.\n * @param {function} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n * @param {function} [params.onMessage] - Callback for when any message is received from anywhere on the system.\n * @param {function} [params.onDisconnect] - Callback for Client disconnect.\n * @param {function} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n * @param {function} [params.onCall] - Callback for when this client's user receives a call.\n * @param {function} [params.onDirectConnection] - Callback for when this client's user receives a request for a\n * direct connection.\n * @param {boolean} [params.enableCallDebugReport=true] - Optional flag defaulting to true which allows sending\n * debugging information.\n * @returns {respoke.Client}\n */\nrespoke.connect = function (params) {\n    var client = respoke.Client(params);\n    client.connect(params);\n    return client;\n};\n\n/**\n * Getter for the respoke client.\n *\n * You can have more than one active client, so this method provides a way to retrieve a specific instance.\n *\n * @static\n * @memberof respoke\n * @param {number} id The Client ID.\n * @returns {respoke.Client}\n */\nrespoke.getClient = function (id) {\n    if (id === undefined) {\n        log.debug(\"Can't call getClient with no client ID.\", new Error().stack);\n    }\n    if (!respoke.instances[id]) {\n        log.debug(\"No client instance with id\", id);\n    }\n    return respoke.instances[id];\n};\n\n/**\n * This is one of two possible entry points for interating with the library.\n *\n * This method creates a new Client object which represents your user's connection to your Respoke app.\n *\n * It **does NOT automatically call the client.connect() method** after the client is created.\n *\n * The `params` argument is the same as `respoke.connect(params)`.\n *\n * @static\n * @memberof respoke\n * @param {object} params Parameters to respoke.Client - same as respoke.connect()\n * @returns {respoke.Client}\n */\nrespoke.createClient = function (params) {\n    var client;\n    params = params || {};\n    if (params.instanceId) {\n        client = respoke.getClient(params.instanceId);\n        if (client) {\n            return client;\n        }\n    }\n    return respoke.Client(params);\n};\n\n/**\n * Build a closure from a listener that will ensure the listener can only be called once.\n * @static\n * @private\n * @memberof respoke\n * @param {function} func\n * @return {function}\n */\nrespoke.callOnce = function (func) {\n    return (function () {\n        var called = false;\n        return function () {\n            if (called === false) {\n                func.apply(null, arguments);\n                called = true;\n            }\n        };\n    })();\n};\n\n/**\n * @static\n * @private\n * @memberof respoke\n * @returns {number}\n */\nrespoke.makeGUID = function () {\n    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n    var uuid = new Array(36);\n    var rnd = 0;\n    var r;\n    for (var i = 0; i < 36; i += 1) {\n        if (i === 8 || i === 13 ||  i === 18 || i === 23) {\n            uuid[i] = '-';\n        } else if (i === 14) {\n            uuid[i] = '4';\n        } else {\n            if (rnd <= 0x02) {\n                rnd = 0x2000000 + (Math.random() * 0x1000000) | 0;\n            }\n            r = rnd & 0xf;\n            rnd = rnd >> 4;\n            uuid[i] = chars[(i === 19) ? (r & 0x3) | 0x8 : r];\n        }\n    }\n    return uuid.join('');\n};\n\n/**\n * This method is used internally to attach handlers to promises that are returned by many methods in the library.\n * It's not recommended that this method be used by developers and apps.\n * @private\n * @static\n * @memberof respoke\n * @param {Promise} promise\n * @param {function} onSuccess\n * @param {function} onError\n * @returns {Promise|undefined}\n */\nrespoke.handlePromise = function (promise, onSuccess, onError) {\n    var returnUndef = false;\n    if (onSuccess || onError) {\n        returnUndef = true;\n    }\n\n    onSuccess = typeof onSuccess === 'function' ? onSuccess : function () {};\n    onError = typeof onError === 'function' ? onError : function () {};\n    promise.done(onSuccess, onError);\n    return (returnUndef ? undefined : promise);\n};\n\n/**\n * Does the browser support `UserMedia`?\n * @static\n * @memberof respoke\n * @returns {boolean}\n */\nrespoke.hasUserMedia = function () {\n    return (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia) instanceof Function;\n};\n\n/**\n * Does the browser support `RTCPeerConnection`?\n * @static\n * @memberof respoke\n * @returns {boolean}\n */\nrespoke.hasRTCPeerConnection = function () {\n    return (window.RTCPeerConnection || window.webkitRTCPeerConnection ||\n            window.mozRTCPeerConnection) instanceof Function;\n};\n\n/**\n * Does the browser support `WebSocket`?\n * @static\n * @memberof respoke\n * @returns {boolean}\n */\nrespoke.hasWebsocket = function () {\n    return (window.WebSocket || window.webkitWebSocket || window.MozWebSocket) instanceof Function;\n};\n\n/**\n * Does the browser have Screen Sharing enabled via browser extensions?\n * @static\n * @memberof respoke\n * @returns {boolean}\n */\nrespoke.hasScreenShare = function () {\n    return respoke.hasChromeExtension || respoke.hasFirefoxExtension;\n};\n\n/**\n * Clone an object.\n * @static\n * @memberof respoke\n * @private\n * @param {Object} source - The object to clone\n * @returns {Object}\n */\nrespoke.clone = function (source) {\n    if (source) {\n        return JSON.parse(JSON.stringify(source));\n    }\n    return source;\n};\n\n/**\n * Compares two objects for equality\n * @static\n * @memberof respoke\n * @private\n * @param {Object} a\n * @param {Object} b\n * @returns {boolean}\n */\nrespoke.isEqual = function (a, b) {\n    var aKeys;\n    var i;\n\n    //check if arrays\n    if (a && b && a.hasOwnProperty('length') && b.hasOwnProperty('length') && a.splice && b.splice) {\n        if (a.length !== b.length) {\n            //short circuit if arrays are different length\n            return false;\n        }\n\n        for (i = 0; i < a.length; i += 1) {\n            if (!respoke.isEqual(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    if (typeof a === 'object' && typeof b === 'object' && Object.keys(a).length === Object.keys(b).length) {\n        aKeys = Object.keys(a);\n        for (i = 0; i < aKeys.length; i += 1) {\n            if (!respoke.isEqual(a[aKeys[i]], b[aKeys[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    return a === b;\n};\n\n/**\n * Count the number of MediaStreams indicated by the SDP\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {number}\n * @private\n */\nrespoke.sdpStreamCount = function (sdp) {\n    var matches;\n    var resolvedMatches = {};\n\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasAudio called with no parameters.\");\n    }\n\n    matches = sdp.match(/mslabel:(.*)/gi);\n\n    if (!matches) {\n        return 0;\n    }\n\n    matches.forEach(function (line) {\n        resolvedMatches[line] = true;\n    });\n    return Object.keys(resolvedMatches).length;\n};\n\n/**\n * Does the sdp indicate an audio stream?\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {boolean}\n * @private\n */\nrespoke.sdpHasAudio = function (sdp) {\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasAudio called with no parameters.\");\n    }\n    return (sdp.indexOf('m=audio') !== -1 && sdp.indexOf('a=recvonly') === -1);\n};\n\n/**\n * Does the sdp indicate a video stream?\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {boolean}\n * @private\n */\nrespoke.sdpHasVideo = function (sdp) {\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasVideo called with no parameters.\");\n    }\n    return (sdp.indexOf('m=video') !== -1 && sdp.indexOf('a=recvonly') === -1);\n};\n\n/**\n * Does the sdp indicate a data channel?\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {boolean}\n * @private\n */\nrespoke.sdpHasDataChannel = function (sdp) {\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasDataChannel called with no parameters.\");\n    }\n    return sdp.indexOf('m=application') !== -1;\n};\n\n/**\n * Does the sdp indicate the creator is sendOnly?\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {boolean}\n * @private\n */\nrespoke.sdpHasSendOnly = function (sdp) {\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasSendOnly called with no parameters.\");\n    }\n    return sdp.indexOf('a=sendonly') !== -1;\n};\n\n/**\n * Does the sdp indicate the creator is receiveOnly?\n * @static\n * @memberof respoke\n * @params {string}\n * @returns {boolean}\n * @private\n */\nrespoke.sdpHasReceiveOnly = function (sdp) {\n    if (!sdp) {\n        throw new Error(\"respoke.sdpHasReceiveOnly called with no parameters.\");\n    }\n    return sdp.indexOf('a=recvonly') !== -1;\n};\n\n/**\n * Do the constraints indicate an audio stream?\n * @static\n * @memberof respoke\n * @params {RTCConstraints}\n * @returns {boolean}\n * @private\n */\nrespoke.constraintsHasAudio = function (constraints) {\n    if (!constraints) {\n        throw new Error(\"respoke.constraintsHasAudio called with no parameters.\");\n    }\n    return (constraints.audio === true);\n};\n\n/**\n * Does the constraints indicate a video stream?\n * @static\n * @memberof respoke\n * @params {RTCConstraints}\n * @returns {boolean}\n * @private\n */\nrespoke.constraintsHasVideo = function (constraints) {\n    if (!constraints) {\n        throw new Error(\"respoke.constraintsHasVideo called with no parameters.\");\n    }\n    return (constraints.video === true || typeof constraints.video === 'object');\n};\n\n/**\n * Does the constraints indicate a screenshare?\n * @static\n * @memberof respoke\n * @params {RTCConstraints}\n * @returns {boolean}\n * @private\n */\nrespoke.constraintsHasScreenShare = function (constraints) {\n    if (!constraints) {\n        throw new Error(\"respoke.constraintsHasScreenShare called with no parameters.\");\n    }\n\n    return (constraints.video && constraints.video.mandatory &&\n            (constraints.video.mandatory.chromeMediaSource || constraints.video.mediaSource));\n};\n\n/**\n * Convert old-style constraints parameter into a constraints array.\n * @static\n * @memberof respoke\n * @params {Array<RTCConstraints>|RTCConstraints} [constraints]\n * @params {Array<RTCConstraints>} [defaults]\n * @returns {Array<RTCConstraints>}\n * @private\n */\nrespoke.convertConstraints = function (constraints, defaults) {\n    constraints = constraints || [];\n    defaults = defaults || [];\n\n    if (!constraints.splice) {\n        if (typeof constraints === 'object') {\n            constraints = [constraints];\n        } else {\n            constraints = [];\n        }\n    }\n\n    if (constraints.length === 0 && defaults.length > 0) {\n        return defaults;\n    }\n\n    return constraints;\n};\n\n/**\n * Queue items until a trigger is called, then process them all with an action. Before trigger, hold items for\n * processing. After trigger, process new items immediately.\n * @static\n * @memberof respoke\n * @returns {Array}\n * @private\n */\nrespoke.queueFactory = function () {\n    var queue = [];\n    // action replaces Array.push when trigger is called. Thrown errors will be caught and logged.\n    queue.trigger = function (action) {\n        if (!action) {\n            throw new Error(\"Trigger function requires an action parameter.\");\n        }\n\n        function safeAction(item) {\n            try {\n                action(item);\n            } catch (err) {\n                log.error(\"Error calling queue action.\", err);\n            }\n        }\n        queue.forEach(safeAction);\n        queue.length = 0;\n        queue.push = safeAction;\n    };\n\n    return queue;\n};\n\n/**\n * Retrieve browser-specific WebRTC getUserMedia constraints needed to start a screen sharing call.\n *\n * @memberof respoke\n * @static\n * @param {object} [params]\n * @param {string} [params.source] The media source name to pass to firefox\n * @param {RTCConstraints|Array<RTCConstraints>} [params.constraints] constraints to use as a base\n * @returns {Array<RTCConstraints>}\n * @private\n */\nrespoke.getScreenShareConstraints = function (params) {\n    params = params || {};\n    var convertedConstraints = respoke.convertConstraints(params.constraints, [{\n        audio: true,\n        video: {},\n        mandatory: {},\n        optional: []\n    }]);\n\n    var screenConstraint = convertedConstraints[0];\n    screenConstraint.audio = false;\n    screenConstraint.video = typeof screenConstraint.video === 'object' ? screenConstraint.video : {};\n\n    if (respoke.needsChromeExtension || respoke.isNwjs) {\n        screenConstraint.audio = false;\n        screenConstraint.video.optional = Array.isArray(screenConstraint.video.optional) ?\n            screenConstraint.video.optional : [];\n        screenConstraint.video.mandatory = typeof screenConstraint.video.mandatory === 'object' ?\n            screenConstraint.video.mandatory : {};\n        screenConstraint.video.mandatory.chromeMediaSource = 'desktop';\n        screenConstraint.video.mandatory.maxWidth = typeof screenConstraint.video.mandatory.maxWidth === 'number' ?\n            screenConstraint.video.mandatory.maxWidth : 2000;\n        screenConstraint.video.mandatory.maxHeight = typeof screenConstraint.video.mandatory.maxHeight === 'number' ?\n            screenConstraint.video.mandatory.maxHeight : 2000;\n\n        if (screenConstraint.video.optional.length > 0) {\n            screenConstraint.video.optional.forEach(function (thing) {\n                thing.googTemporalLayeredScreencast = true;\n            });\n        } else {\n            screenConstraint.video.optional[0] = {\n                googTemporalLayeredScreencast: true\n            };\n        }\n    } else {\n        // firefox, et. al.\n        screenConstraint.video.mediaSource = params.source || 'screen';\n    }\n\n    return convertedConstraints;\n};\n\n/**\n * Retrieve a started instance of `respoke.LocalMedia` containing a screen share stream. Useful if you\n * want to prepare the stream prior to starting a screen share.\n *\n *     respoke.getScreenShareMedia().then(function (localMedia) {\n *         document.getElementById('#video').appendChild(localMedia.element);\n *         group.listen('join', function (evt) {\n *             evt.connection.startScreenShare({\n *                 outgoingMedia: localMedia\n *             });\n *         });\n *     }).catch(function (err) {\n *         console.log(err);\n *     });\n *\n * @static\n * @memberof respoke\n * @param {object} params\n * @param {string} [params.source] - The source you would like to use for your screen share. Values vary by browser.\n *  In Chrome, acceptable values are one of 'screen', 'window', or 'tab'.\n *  In Firefox, acceptable values are one of 'screen', 'window', or 'application'.\n * @param {RTCConstraints|Array<RTCConstraints>} [params.constraints] - constraints to use as a base\n * @param {HTMLVideoElement} [params.element] - Pass in an optional html video element to have local\n *  video attached to it.\n * @param {function} [params.onSuccess] Upon success, called with instance of `respoke.LocalMedia`\n * @param {function} [params.onError] Upon failure, called with the error that occurred.\n * @returns {Promise|undefined}\n * @private\n */\nrespoke.getScreenShareMedia = function (params) {\n    params = params || {};\n\n    var deferred = respoke.Q.defer();\n\n    var criteria = {\n        source: params.source,\n        constraints: respoke.clone(params.constraints)\n    };\n\n    var localMedia = respoke.LocalMedia({\n        hasScreenShare: true,\n        constraints: respoke.getScreenShareConstraints(criteria)[0],\n        source: params.source,\n        element: params.element\n    });\n\n    function localMediaStreamReceivedHandler() {\n        localMedia.ignore('error', localMediaErrorHandler);\n        deferred.resolve(localMedia);\n    }\n\n    function localMediaErrorHandler(evt) {\n        localMedia.ignore('stream-received', localMediaStreamReceivedHandler);\n        deferred.reject(evt);\n    }\n\n    localMedia.once('stream-received', localMediaStreamReceivedHandler);\n    localMedia.once('error', localMediaErrorHandler);\n    localMedia.start();\n\n    return respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/respoke.js\n ** module id = 1\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\n/**\n * A signaling message and the information needed to route it.\n * @class respoke.SignalingMessage\n * @constructor\n * @param {object} params\n * @param {string} [params.fromEndpoint] - If sending, the endpoint ID of the recipient\n * @param {string} [params.fromConnection] - If sending, the connection ID of the recipient\n * @param {string} [params.connectionId] - The connectionId of the endpoint whose answer signal has been accepted.\n * @param {string} [params.signal] - If sending, a message to send\n * @param {respoke.Endpoint} [params.recipient]\n * @param {string} [params.signalType]\n * @param {string} [params.sessionId] - A globally unique ID to identify this call.\n * @param {string} [params.target] - Either 'call' or 'directConnection', TODO remove the need for this.\n * @param {string} [params.callerId] - Human readable caller ID. Not implemented.\n * @param {RTCSessionDescription} [params.sdp]\n * @param {Array<RTCIceCandidate>} [params.iceCandidates]\n * @param {object} [params.offering] - Object describing the media we're offering to send the remote party in a more\n * usable way than SDP. Not implemented.\n * @param {object} [params.requesting] - Object describing the media we're requesting from the remote party in a more\n * usable way than SDP. Not implemented.\n * @param {string} [params.reason] - Human readable reason for hanging up.\n * @param {string} [params.error] - String indicating that a previous signal was malformed or received in the wrong\n * state. Not implemented.\n * @param {string} [params.status] - \"Ringing\". Not implemented.\n * @param {object} [params.rawMessage] - If receiving, the parsed JSON we got from the server\n * @private\n * @returns {respoke.SignalingMessage}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = {};\n    /**\n     * Attributes without which we cannot build a signaling message.\n     * @memberof! respoke.SignalingMessage\n     * @name required\n     * @private\n     * @type {string}\n     */\n    var required = ['recipient', 'signalType', 'sessionId', 'target', 'signalId'];\n    /**\n     * Attributes which we will copy onto the signal if defined.\n     * @memberof! respoke.SignalingMessage\n     * @name required\n     * @private\n     * @type {string}\n     */\n    var allowed = [\n        'signalType', 'sessionId', 'sessionDescription', 'iceCandidates', 'offering', 'target', 'signalId', 'callerId',\n        'requesting', 'reason', 'error', 'status', 'connectionId', 'version'\n    ];\n\n    params.version = '1.0';\n\n    /**\n     * Parse rawMessage and set attributes required for message delivery.\n     * @memberof! respoke.SignalingMessage\n     * @method respoke.SignalingMessage.parse\n     * @private\n     */\n    function parse() {\n        if (params.rawMessage) {\n            try {\n                that = JSON.parse(params.rawMessage.body); // Incoming message\n            } catch (e) {\n                that = params.rawMessage.body;\n            }\n            that.fromType = params.rawMessage.header.fromType;\n            that.fromEndpoint = params.rawMessage.header.from;\n            that.fromConnection = params.rawMessage.header.fromConnection;\n            that.timestamp = params.rawMessage.header.timestamp;\n\n            if (!that.target) {\n                that.target = 'call';\n            }\n        } else {\n            required.forEach(function eachAttr(attr) {\n                if (params[attr] === 0 || !params[attr]) {\n                    throw new Error(\"Can't build a signaling without \" + attr);\n                }\n            });\n\n            allowed.forEach(function eachAttr(attr) {\n                if (params[attr] === 0 || params[attr]) {\n                    that[attr] = params[attr];\n                }\n            });\n        }\n    }\n\n    parse();\n    return that;\n}; // End respoke.SignalingMessage\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/signalingMessage.js\n ** module id = 2\n ** module chunks = 0\n **/","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}(g.airbrakeJs || (g.airbrakeJs = {})).Client = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global){\nvar Client, merge;\n\nrequire('./internal/compat');\n\nmerge = require('./internal/merge');\n\nClient = (function() {\n  function Client(opts) {\n    var reporter;\n    if (opts == null) {\n      opts = {};\n    }\n    this._projectId = opts.projectId || 0;\n    this._projectKey = opts.projectKey || '';\n    this._host = 'https://api.airbrake.io';\n    this._context = {};\n    this._params = {};\n    this._env = {};\n    this._session = {};\n    this._processor = null;\n    this._reporters = [];\n    this._filters = [];\n    if (opts.processor !== void 0) {\n      this._processor = opts.processor;\n    } else {\n      this._processor = require('./processors/stack');\n    }\n    if (opts.reporter !== void 0) {\n      this.addReporter(opts.reporter);\n    } else {\n      if ('withCredentials' in new global.XMLHttpRequest()) {\n        reporter = require('./reporters/xhr');\n      } else {\n        reporter = require('./reporters/jsonp');\n      }\n      this.addReporter(reporter);\n    }\n  }\n\n  Client.prototype.setProject = function(id, key) {\n    this._projectId = id;\n    return this._projectKey = key;\n  };\n\n  Client.prototype.setHost = function(host) {\n    return this._host = host;\n  };\n\n  Client.prototype.addContext = function(context) {\n    return merge(this._context, context);\n  };\n\n  Client.prototype.setEnvironmentName = function(envName) {\n    return this._context.environment = envName;\n  };\n\n  Client.prototype.addParams = function(params) {\n    return merge(this._params, params);\n  };\n\n  Client.prototype.addEnvironment = function(env) {\n    return merge(this._env, env);\n  };\n\n  Client.prototype.addSession = function(session) {\n    return merge(this._session, session);\n  };\n\n  Client.prototype.addReporter = function(reporter) {\n    return this._reporters.push(reporter);\n  };\n\n  Client.prototype.addFilter = function(filter) {\n    return this._filters.push(filter);\n  };\n\n  Client.prototype.push = function(err) {\n    var defContext, ref;\n    defContext = {\n      language: 'JavaScript',\n      sourceMapEnabled: true\n    };\n    if ((ref = global.navigator) != null ? ref.userAgent : void 0) {\n      defContext.userAgent = global.navigator.userAgent;\n    }\n    if (global.location) {\n      defContext.url = String(global.location);\n    }\n    return this._processor(err.error || err, (function(_this) {\n      return function(name, errInfo) {\n        var filterFn, j, k, len, len1, notice, ref1, ref2, reporterFn;\n        notice = {\n          notifier: {\n            name: 'airbrake-js-' + name,\n            version: '0.4.0-alpha.1',\n            url: 'https://github.com/airbrake/airbrake-js'\n          },\n          errors: [errInfo],\n          context: merge(defContext, _this._context, err.context),\n          params: merge({}, _this._params, err.params),\n          environment: merge({}, _this._env, err.environment),\n          session: merge({}, _this._session, err.session)\n        };\n        ref1 = _this._filters;\n        for (j = 0, len = ref1.length; j < len; j++) {\n          filterFn = ref1[j];\n          if (!filterFn(notice)) {\n            return;\n          }\n        }\n        ref2 = _this._reporters;\n        for (k = 0, len1 = ref2.length; k < len1; k++) {\n          reporterFn = ref2[k];\n          reporterFn(notice, {\n            projectId: _this._projectId,\n            projectKey: _this._projectKey,\n            host: _this._host\n          });\n        }\n      };\n    })(this));\n  };\n\n  Client.prototype._wrapArguments = function(args) {\n    var arg, i, j, len;\n    for (i = j = 0, len = args.length; j < len; i = ++j) {\n      arg = args[i];\n      if (typeof arg === 'function') {\n        args[i] = this.wrap(arg);\n      }\n    }\n    return args;\n  };\n\n  Client.prototype.wrap = function(fn) {\n    var airbrakeWrapper, prop, self;\n    if (fn.__airbrake__) {\n      return fn;\n    }\n    self = this;\n    airbrakeWrapper = function() {\n      var args, exc;\n      args = self._wrapArguments(arguments);\n      try {\n        return fn.apply(this, args);\n      } catch (_error) {\n        exc = _error;\n        args = Array.prototype.slice.call(arguments);\n        self.push({\n          error: exc,\n          params: {\n            \"arguments\": args\n          }\n        });\n        return null;\n      }\n    };\n    for (prop in fn) {\n      if (fn.hasOwnProperty(prop)) {\n        airbrakeWrapper[prop] = fn[prop];\n      }\n    }\n    airbrakeWrapper.__airbrake__ = true;\n    airbrakeWrapper.__inner__ = fn;\n    return airbrakeWrapper;\n  };\n\n  return Client;\n\n})();\n\nmodule.exports = Client;\n\n\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./internal/compat\":2,\"./internal/merge\":4,\"./processors/stack\":6,\"./reporters/jsonp\":7,\"./reporters/xhr\":8}],2:[function(require,module,exports){\nvar base;\n\nif ((base = Array.prototype).indexOf == null) {\n  base.indexOf = function(obj, start) {\n    var i, j, ref, ref1;\n    start = start || 0;\n    for (i = j = ref = start, ref1 = this.length; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {\n      if (this[i] === obj) {\n        return i;\n      }\n    }\n    return -1;\n  };\n}\n\n\n\n},{}],3:[function(require,module,exports){\nvar jsonifyNotice, truncate, truncateObj;\n\ntruncate = require('./truncate');\n\ntruncateObj = function(obj, n) {\n  var dst, key;\n  if (n == null) {\n    n = 1000;\n  }\n  dst = {};\n  for (key in obj) {\n    dst[key] = truncate(obj[key], n = n);\n  }\n  return dst;\n};\n\njsonifyNotice = function(notice, n, maxLength) {\n  var err, s;\n  if (n == null) {\n    n = 1000;\n  }\n  if (maxLength == null) {\n    maxLength = 64000;\n  }\n  while (true) {\n    notice.params = truncateObj(notice.params, n = n);\n    notice.environment = truncateObj(notice.environment, n = n);\n    notice.session = truncateObj(notice.session, n = n);\n    s = JSON.stringify(notice);\n    if (s.length < maxLength) {\n      return s;\n    }\n    if (n === 0) {\n      break;\n    }\n    n = Math.floor(n / 2);\n  }\n  err = new Error(\"airbrake-js: cannot jsonify notice (length=\" + s.length + \" maxLength=\" + maxLength + \")\");\n  err.params = {\n    json: s.slice(0, +Math.floor(n / 2) + 1 || 9e9) + '...'\n  };\n  throw err;\n};\n\nmodule.exports = jsonifyNotice;\n\n\n\n},{\"./truncate\":5}],4:[function(require,module,exports){\nvar merge;\n\nmerge = function() {\n  var dst, i, key, len, obj, objs;\n  objs = Array.prototype.slice.call(arguments);\n  dst = objs.shift() || {};\n  for (i = 0, len = objs.length; i < len; i++) {\n    obj = objs[i];\n    for (key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        dst[key] = obj[key];\n      }\n    }\n  }\n  return dst;\n};\n\nmodule.exports = merge;\n\n\n\n},{}],5:[function(require,module,exports){\nvar getAttr, truncate;\n\ngetAttr = function(obj, attr) {\n  var exc;\n  try {\n    return obj[attr];\n  } catch (_error) {\n    exc = _error;\n    return void 0;\n  }\n};\n\ntruncate = function(value, n, depth) {\n  var fn, getPath, keys, nn, seen;\n  if (n == null) {\n    n = 1000;\n  }\n  if (depth == null) {\n    depth = 5;\n  }\n  nn = 0;\n  keys = [];\n  seen = [];\n  getPath = function(value) {\n    var i, index, j, path, ref;\n    index = seen.indexOf(value);\n    path = [keys[index]];\n    for (i = j = ref = index; ref <= 0 ? j <= 0 : j >= 0; i = ref <= 0 ? ++j : --j) {\n      if (seen[i] && getAttr(seen[i], path[0]) === value) {\n        value = seen[i];\n        path.unshift(keys[i]);\n      }\n    }\n    return '~' + path.join('.');\n  };\n  fn = function(value, key, dd) {\n    var dst, el, i, j, len, val;\n    if (key == null) {\n      key = '';\n    }\n    if (dd == null) {\n      dd = 0;\n    }\n    nn++;\n    if (nn > n) {\n      return '[Truncated]';\n    }\n    if (value === null || value === void 0) {\n      return value;\n    }\n    switch (typeof value) {\n      case 'boolean':\n      case 'number':\n      case 'string':\n      case 'function':\n        return value;\n      case 'object':\n        break;\n      default:\n        return String(value);\n    }\n    if (value instanceof Boolean || value instanceof Number || value instanceof String || value instanceof Date || value instanceof RegExp) {\n      return value;\n    }\n    if (seen.indexOf(value) >= 0) {\n      return \"[Circular \" + (getPath(value)) + \"]\";\n    }\n    dd++;\n    if (dd > depth) {\n      return '[Truncated]';\n    }\n    keys.push(key);\n    seen.push(value);\n    nn--;\n    if (Object.prototype.toString.apply(value) === '[object Array]') {\n      dst = [];\n      for (i = j = 0, len = value.length; j < len; i = ++j) {\n        el = value[i];\n        nn++;\n        if (nn >= n) {\n          break;\n        }\n        dst.push(fn(el, key = i, dd));\n      }\n      return dst;\n    }\n    dst = {};\n    for (key in value) {\n      if (!Object.prototype.hasOwnProperty.call(value, key)) {\n        continue;\n      }\n      nn++;\n      if (nn >= n) {\n        break;\n      }\n      val = getAttr(value, key);\n      if (val !== void 0) {\n        dst[key] = fn(val, key = key, dd);\n      }\n    }\n    return dst;\n  };\n  return fn(value);\n};\n\nmodule.exports = truncate;\n\n\n\n},{}],6:[function(require,module,exports){\nvar processor, rules, typeMessageRe;\n\nrules = [\n  {\n    name: 'v8',\n    re: /^\\s*at\\s(.+?)\\s\\((?:(?:(.+):(\\d+):(\\d+))|(.+))\\)$/,\n    fn: function(m) {\n      return {\n        \"function\": m[1],\n        file: m[2] || m[5],\n        line: m[3] && parseInt(m[3], 10) || 0,\n        column: m[4] && parseInt(m[4], 10) || 0\n      };\n    }\n  }, {\n    name: 'firefox30',\n    re: /^(.*)@(.+):(\\d+):(\\d+)$/,\n    fn: function(m) {\n      var evaledRe, file, func, mm;\n      func = m[1];\n      file = m[2];\n      evaledRe = /^(\\S+)\\s(line\\s\\d+\\s>\\seval.*)$/;\n      if (mm = file.match(evaledRe)) {\n        if (func.length > 0) {\n          func = func + ' ' + mm[2];\n        } else {\n          func = mm[2];\n        }\n        file = mm[1];\n      }\n      return {\n        \"function\": func,\n        file: file,\n        line: parseInt(m[3], 10),\n        column: parseInt(m[4], 10)\n      };\n    }\n  }, {\n    name: 'firefox14',\n    re: /^(.*)@(.+):(\\d+)$/,\n    fn: function(m, i, e) {\n      var column;\n      if (i === 0) {\n        column = e.columnNumber || 0;\n      } else {\n        column = 0;\n      }\n      return {\n        \"function\": m[1],\n        file: m[2],\n        line: parseInt(m[3], 10),\n        column: column\n      };\n    }\n  }, {\n    name: 'v8-short',\n    re: /^\\s*at\\s(.+):(\\d+):(\\d+)$/,\n    fn: function(m) {\n      return {\n        \"function\": '',\n        file: m[1],\n        line: parseInt(m[2], 10),\n        column: parseInt(m[3], 10)\n      };\n    }\n  }, {\n    name: 'default',\n    re: /.+/,\n    fn: function(m) {\n      return {\n        \"function\": m[0],\n        file: '',\n        line: 0,\n        column: 0\n      };\n    }\n  }\n];\n\ntypeMessageRe = /^\\S+:\\s.+$/;\n\nprocessor = function(e, cb) {\n  var backtrace, i, j, k, len, len1, line, lines, m, msg, processorName, rule, stack, type, uncaughtExcRe;\n  processorName = 'nostack';\n  stack = e.stack || '';\n  lines = stack.split('\\n');\n  backtrace = [];\n  for (i = j = 0, len = lines.length; j < len; i = ++j) {\n    line = lines[i];\n    if (line === '') {\n      continue;\n    }\n    for (k = 0, len1 = rules.length; k < len1; k++) {\n      rule = rules[k];\n      m = line.match(rule.re);\n      if (!m) {\n        continue;\n      }\n      processorName = rule.name;\n      backtrace.push(rule.fn(m, i, e));\n      break;\n    }\n  }\n  if ((processorName === 'v8' || processorName === 'v8-short') && backtrace.length > 0 && backtrace[0][\"function\"].match(typeMessageRe)) {\n    backtrace = backtrace.slice(1);\n  }\n  if (backtrace.length === 0 && ((e.fileName != null) || (e.lineNumber != null) || (e.columnNumber != null))) {\n    backtrace.push({\n      \"function\": '',\n      file: e.fileName || '',\n      line: parseInt(e.lineNumber, 10) || 0,\n      column: parseInt(e.columnNumber, 10) || 0\n    });\n  }\n  if (backtrace.length === 0 && ((e.filename != null) || (e.lineno != null) || (e.column != null) || (e.colno != null))) {\n    backtrace.push({\n      \"function\": '',\n      file: e.filename || '',\n      line: parseInt(e.lineno, 10) || 0,\n      column: parseInt(e.column || e.colno, 10) || 0\n    });\n  }\n  if (e.message != null) {\n    msg = e.message;\n  } else {\n    msg = String(e);\n  }\n  if (e.name != null) {\n    type = e.name;\n    msg = type + ': ' + msg;\n  } else {\n    uncaughtExcRe = /^Uncaught\\s(.+?):\\s.+$/;\n    m = msg.match(uncaughtExcRe);\n    if (m) {\n      type = m[1];\n    } else {\n      type = '';\n    }\n  }\n  return cb(processorName, {\n    'type': type,\n    'message': msg,\n    'backtrace': backtrace\n  });\n};\n\nmodule.exports = processor;\n\n\n\n},{}],7:[function(require,module,exports){\n(function (global){\nvar cbCount, jsonifyNotice, report;\n\njsonifyNotice = require('../internal/jsonify_notice');\n\ncbCount = 0;\n\nreport = function(notice, opts) {\n  var cbName, document, head, payload, removeScript, script, url;\n  cbCount++;\n  cbName = \"airbrakeCb\" + String(cbCount);\n  global[cbName] = function(resp) {\n    var _;\n    if (typeof console !== \"undefined\" && console !== null) {\n      if (typeof console.debug === \"function\") {\n        console.debug(\"airbrake-js: error #%s was reported: %s\", resp.id, resp.url);\n      }\n    }\n    try {\n      return delete global[cbName];\n    } catch (_error) {\n      _ = _error;\n      return global[cbName] = void 0;\n    }\n  };\n  payload = encodeURIComponent(jsonifyNotice(notice));\n  url = opts.host + \"/api/v3/projects/\" + opts.projectId + \"/create-notice?key=\" + opts.projectKey + \"&callback=\" + cbName + \"&body=\" + payload;\n  document = global.document;\n  head = document.getElementsByTagName('head')[0];\n  script = document.createElement('script');\n  script.src = url;\n  removeScript = function() {\n    return head.removeChild(script);\n  };\n  script.onload = removeScript;\n  script.onerror = removeScript;\n  return head.appendChild(script);\n};\n\nmodule.exports = report;\n\n\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../internal/jsonify_notice\":3}],8:[function(require,module,exports){\n(function (global){\nvar jsonifyNotice, report;\n\njsonifyNotice = require('../internal/jsonify_notice');\n\nreport = function(notice, opts) {\n  var payload, req, url;\n  url = opts.host + \"/api/v3/projects/\" + opts.projectId + \"/notices?key=\" + opts.projectKey;\n  payload = jsonifyNotice(notice);\n  req = new global.XMLHttpRequest();\n  req.open('POST', url, true);\n  req.setRequestHeader('Content-Type', 'application/json');\n  req.send(payload);\n  return req.onreadystatechange = function() {\n    var resp;\n    if (req.readyState === 4 && req.status === 201 && ((typeof console !== \"undefined\" && console !== null ? console.debug : void 0) != null)) {\n      resp = JSON.parse(req.responseText);\n      return console.debug(\"airbrake: error #%s was reported: %s\", resp.id, resp.url);\n    }\n  };\n};\n\nmodule.exports = report;\n\n\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../internal/jsonify_notice\":3}]},{},[1])(1)\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/airbrake-js/dist/client.js\n ** module id = 3\n ** module chunks = 0\n **/","/*\r\n* loglevel - https://github.com/pimterry/loglevel\r\n*\r\n* Copyright (c) 2013 Tim Perry\r\n* Licensed under the MIT license.\r\n*/\r\n(function (root, definition) {\r\n    if (typeof module === 'object' && module.exports && typeof require === 'function') {\r\n        module.exports = definition();\r\n    } else if (typeof define === 'function' && typeof define.amd === 'object') {\r\n        define(definition);\r\n    } else {\r\n        root.log = definition();\r\n    }\r\n}(this, function () {\r\n    var self = {};\r\n    var noop = function() {};\r\n    var undefinedType = \"undefined\";\r\n\r\n    function realMethod(methodName) {\r\n        if (typeof console === undefinedType) {\r\n            return false; // We can't build a real method without a console to log to\r\n        } else if (console[methodName] !== undefined) {\r\n            return bindMethod(console, methodName);\r\n        } else if (console.log !== undefined) {\r\n            return bindMethod(console, 'log');\r\n        } else {\r\n            return noop;\r\n        }\r\n    }\r\n\r\n    function bindMethod(obj, methodName) {\r\n        var method = obj[methodName];\r\n        if (typeof method.bind === 'function') {\r\n            return method.bind(obj);\r\n        } else {\r\n            try {\r\n                return Function.prototype.bind.call(method, obj);\r\n            } catch (e) {\r\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\r\n                return function() {\r\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    function enableLoggingWhenConsoleArrives(methodName, level) {\r\n        return function () {\r\n            if (typeof console !== undefinedType) {\r\n                replaceLoggingMethods(level);\r\n                self[methodName].apply(self, arguments);\r\n            }\r\n        };\r\n    }\r\n\r\n    var logMethods = [\r\n        \"trace\",\r\n        \"debug\",\r\n        \"info\",\r\n        \"warn\",\r\n        \"error\"\r\n    ];\r\n\r\n    function replaceLoggingMethods(level) {\r\n        for (var i = 0; i < logMethods.length; i++) {\r\n            var methodName = logMethods[i];\r\n            self[methodName] = (i < level) ? noop : self.methodFactory(methodName, level);\r\n        }\r\n    }\r\n\r\n    function persistLevelIfPossible(levelNum) {\r\n        var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\r\n\r\n        // Use localStorage if available\r\n        try {\r\n            window.localStorage['loglevel'] = levelName;\r\n            return;\r\n        } catch (ignore) {}\r\n\r\n        // Use session cookie as fallback\r\n        try {\r\n            window.document.cookie = \"loglevel=\" + levelName + \";\";\r\n        } catch (ignore) {}\r\n    }\r\n\r\n    function loadPersistedLevel() {\r\n        var storedLevel;\r\n\r\n        try {\r\n            storedLevel = window.localStorage['loglevel'];\r\n        } catch (ignore) {}\r\n\r\n        if (typeof storedLevel === undefinedType) {\r\n            try {\r\n                storedLevel = /loglevel=([^;]+)/.exec(window.document.cookie)[1];\r\n            } catch (ignore) {}\r\n        }\r\n        \r\n        if (self.levels[storedLevel] === undefined) {\r\n            storedLevel = \"WARN\";\r\n        }\r\n\r\n        self.setLevel(self.levels[storedLevel]);\r\n    }\r\n\r\n    /*\r\n     *\r\n     * Public API\r\n     *\r\n     */\r\n\r\n    self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\r\n        \"ERROR\": 4, \"SILENT\": 5};\r\n\r\n    self.methodFactory = function (methodName, level) {\r\n        return realMethod(methodName) ||\r\n               enableLoggingWhenConsoleArrives(methodName, level);\r\n    };\r\n\r\n    self.setLevel = function (level) {\r\n        if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\r\n            level = self.levels[level.toUpperCase()];\r\n        }\r\n        if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\r\n            persistLevelIfPossible(level);\r\n            replaceLoggingMethods(level);\r\n            if (typeof console === undefinedType && level < self.levels.SILENT) {\r\n                return \"No console available for logging\";\r\n            }\r\n        } else {\r\n            throw \"log.setLevel() called with invalid level: \" + level;\r\n        }\r\n    };\r\n\r\n    self.enableAll = function() {\r\n        self.setLevel(self.levels.TRACE);\r\n    };\r\n\r\n    self.disableAll = function() {\r\n        self.setLevel(self.levels.SILENT);\r\n    };\r\n\r\n    // Grab the current global log variable in case of overwrite\r\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\r\n    self.noConflict = function() {\r\n        if (typeof window !== undefinedType &&\r\n               window.log === self) {\r\n            window.log = _log;\r\n        }\r\n\r\n        return self;\r\n    };\r\n\r\n    loadPersistedLevel();\r\n    return self;\r\n}));\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/loglevel/lib/loglevel.js\n ** module id = 4\n ** module chunks = 0\n **/","/*!\n *  Copyright (c) 2014 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the same directory as\n *  this source file.\n * @ignore\n */\n\n/* More information about these options at jshint.com/docs/options */\n\n/* jshint browser: true, camelcase: true, curly: true, devel: true,\neqeqeq: true, forin: false, globalstrict: true, quotmark: single,\nundef: true, unused: strict */\n\n/* global mozRTCIceCandidate, mozRTCPeerConnection,\nmozRTCSessionDescription, webkitRTCPeerConnection */\n\n/* exported trace */\n\n'use strict';\n\nvar RTCPeerConnection = null;\nvar getUserMedia = null;\nvar attachMediaStream = null;\nvar reattachMediaStream = null;\nvar webrtcDetectedBrowser = null;\nvar webrtcDetectedVersion = null;\n\nfunction trace(text) {\n  // This function is used for logging.\n  if (text[text.length - 1] === '\\n') {\n    text = text.substring(0, text.length - 1);\n  }\n  console.log((window.performance.now() / 1000).toFixed(3) + ': ' + text);\n}\n\nfunction maybeFixConfiguration(pcConfig) {\n  if (!pcConfig) {\n    return;\n  }\n  for (var i = 0; i < pcConfig.iceServers.length; i++) {\n    if (pcConfig.iceServers[i].hasOwnProperty('urls')) {\n      pcConfig.iceServers[i].url = pcConfig.iceServers[i].urls;\n      delete pcConfig.iceServers[i].urls;\n    }\n  }\n}\n\nif (navigator.mozGetUserMedia) {\n  console.log('This appears to be Firefox');\n\n  webrtcDetectedBrowser = 'firefox';\n\n  webrtcDetectedVersion =\n    parseInt(navigator.userAgent.match(/Firefox\\/([0-9]+)\\./)[1], 10);\n\n  // The RTCPeerConnection object.\n  RTCPeerConnection = function(pcConfig, pcConstraints) {\n    // .urls is not supported in FF yet.\n    maybeFixConfiguration(pcConfig);\n    return new mozRTCPeerConnection(pcConfig, pcConstraints);\n  };\n\n  // The RTCSessionDescription object.\n  window.RTCSessionDescription = mozRTCSessionDescription;\n\n  // The RTCIceCandidate object.\n  window.RTCIceCandidate = mozRTCIceCandidate;\n\n  // getUserMedia shim (only difference is the prefix).\n  // Code from Adam Barth.\n  getUserMedia = navigator.mozGetUserMedia.bind(navigator);\n  navigator.getUserMedia = getUserMedia;\n\n  // Creates ICE server from the URL for FF.\n  window.createIceServer = function(url, username, password) {\n    var iceServer = null;\n    var urlParts = url.split(':');\n    if (urlParts[0].indexOf('stun') === 0) {\n      // Create ICE server with STUN URL.\n      iceServer = {\n        'url': url\n      };\n    } else if (urlParts[0].indexOf('turn') === 0) {\n      if (webrtcDetectedVersion < 27) {\n        // Create iceServer with turn url.\n        // Ignore the transport parameter from TURN url for FF version <=27.\n        var turnUrlParts = url.split('?');\n        // Return null for createIceServer if transport=tcp.\n        if (turnUrlParts.length === 1 ||\n          turnUrlParts[1].indexOf('transport=udp') === 0) {\n          iceServer = {\n            'url': turnUrlParts[0],\n            'credential': password,\n            'username': username\n          };\n        }\n      } else {\n        // FF 27 and above supports transport parameters in TURN url,\n        // So passing in the full url to create iceServer.\n        iceServer = {\n          'url': url,\n          'credential': password,\n          'username': username\n        };\n      }\n    }\n    return iceServer;\n  };\n\n  window.createIceServers = function(urls, username, password) {\n    var iceServers = [];\n    // Use .url for FireFox.\n    for (var i = 0; i < urls.length; i++) {\n      var iceServer =\n        window.createIceServer(urls[i], username, password);\n      if (iceServer !== null) {\n        iceServers.push(iceServer);\n      }\n    }\n    return iceServers;\n  };\n\n  // Attach a media stream to an element.\n  attachMediaStream = function(element, stream) {\n    //console.log('Attaching media stream');\n    element.mozSrcObject = stream;\n    setTimeout(function () {\n      element.play();\n    }, 100);\n  };\n\n  reattachMediaStream = function(to, from) {\n    //console.log('Reattaching media stream');\n    to.mozSrcObject = from.mozSrcObject;\n  };\n\n} else if (navigator.webkitGetUserMedia) {\n  console.log('This appears to be Chrome');\n\n  webrtcDetectedBrowser = 'chrome';\n  // Temporary fix until crbug/374263 is fixed.\n  // Setting Chrome version to 999, if version is unavailable.\n  var result = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n  if (result !== null) {\n    webrtcDetectedVersion = parseInt(result[2], 10);\n  } else {\n    webrtcDetectedVersion = 999;\n  }\n\n  // Creates iceServer from the url for Chrome M33 and earlier.\n  window.createIceServer = function(url, username, password) {\n    var iceServer = null;\n    var urlParts = url.split(':');\n    if (urlParts[0].indexOf('stun') === 0) {\n      // Create iceServer with stun url.\n      iceServer = {\n        'url': url\n      };\n    } else if (urlParts[0].indexOf('turn') === 0) {\n      // Chrome M28 & above uses below TURN format.\n      iceServer = {\n        'url': url,\n        'credential': password,\n        'username': username\n      };\n    }\n    return iceServer;\n  };\n\n  // Creates iceServers from the urls for Chrome M34 and above.\n  window.createIceServers = function(urls, username, password) {\n    var iceServers = [];\n    if (webrtcDetectedVersion >= 34) {\n      // .urls is supported since Chrome M34.\n      iceServers = {\n        'urls': urls,\n        'credential': password,\n        'username': username\n      };\n    } else {\n      for (var i = 0; i < urls.length; i++) {\n        var iceServer =\n          window.createIceServer(urls[i], username, password);\n        if (iceServer !== null) {\n          iceServers.push(iceServer);\n        }\n      }\n    }\n    return iceServers;\n  };\n\n  // The RTCPeerConnection object.\n  RTCPeerConnection = function(pcConfig, pcConstraints) {\n    // .urls is supported since Chrome M34.\n    if (webrtcDetectedVersion < 34) {\n      maybeFixConfiguration(pcConfig);\n    }\n    return new webkitRTCPeerConnection(pcConfig, pcConstraints);\n  };\n\n  // Get UserMedia (only difference is the prefix).\n  // Code from Adam Barth.\n  getUserMedia = navigator.webkitGetUserMedia.bind(navigator);\n  navigator.getUserMedia = getUserMedia;\n\n  // Attach a media stream to an element.\n  attachMediaStream = function(element, stream) {\n    if (typeof element.srcObject !== 'undefined') {\n      element.srcObject = stream;\n    } else if (typeof element.mozSrcObject !== 'undefined') {\n      element.mozSrcObject = stream;\n    } else if (typeof element.src !== 'undefined') {\n      element.src = URL.createObjectURL(stream);\n    } else {\n      console.log('Error attaching stream to element.');\n    }\n  };\n\n  reattachMediaStream = function(to, from) {\n    to.src = from.src;\n  };\n} else {\n  console.log('Browser does not appear to be WebRTC-capable');\n}\n\n\nwindow.RTCPeerConnection = RTCPeerConnection;\nwindow.getUserMedia = getUserMedia;\nwindow.attachMediaStream = attachMediaStream;\nwindow.reattachMediaStream = reattachMediaStream;\nwindow.webrtcDetectedBrowser = webrtcDetectedBrowser;\nwindow.webrtcDetectedVersion = webrtcDetectedVersion;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/deps/adapter.js\n ** module id = 5\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar log = require('loglevel');\nvar respokeClass = require('./class');\n\n/**\n * Higher order function to wrap a passed in function. The returned function will only execute\n * the passed in function the first time it is called, then be a no-op any subsequent tries.\n *\n * @private\n */\nvar callOnce = function (func) {\n    \"use strict\";\n    return (function () {\n        var called = false;\n        return function () {\n            if (!called) {\n                func.apply(null, arguments);\n                called = true;\n            }\n        };\n    })();\n};\n\n/**\n * A generic class for emitting and listening to events. This is used internally by respoke.js\n * to provide evented behavior. You can add custom events and inherit your own objects from\n * the EventEmitter.\n *\n * ```\n * // Adding a custom event to a respoke.Client instance\n * client.listen('my-event', function (evt) { });\n * client.fire('my-event', { name: 'my-event', asdf: 'jkl' });\n * ```\n *\n * ```\n * // Custom EventEmitter\n * var MyCustomEmitter = respoke.EventEmitter();\n * var emitterInstance = MyCustomEmitter();\n * emitterInstance.fire('hi', { name: 'hi', message: 'hello' });\n * emitterInstance.listen('hi', function (evt) { });\n * ```\n *\n * @class respoke.EventEmitter\n * @inherits respoke.Class\n * @constructor\n * @param {object} params\n * @param {string} params.instanceId\n * @returns {respoke.EventEmitter}\n */\nvar EventEmitter = module.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = respokeClass(params);\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.EventEmitter\n     * @name className\n     * @type {string}\n     * @private\n     */\n    that.className = 'respoke.EventEmitter';\n\n    /**\n     * @memberof! respoke.EventEmitter\n     * @name eventList\n     * @private\n     * @type {object}\n     */\n    var eventList = {};\n\n    /**\n     * Add a listener that will only be called once to an object.  This method adds the given listener to the given\n     * event in the case that the same\n     * listener is not already registered to this event and the listener is a function.  The third argument 'isInternal'\n     * is used only internally by the library to indicate that this listener is a library-used listener and should not\n     * count when we are trying to determine if an event has listeners placed by the developer.\n     *\n     *     client.once('connect', function (evt) {\n     *         console.log(\"This is the first time we connected.\");\n     *     });\n     *\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.listen\n     * @param {string} eventType - A developer-specified string identifying the event.\n     * @param {respoke.EventEmitter.eventListener} listener - A function to call when the event is fire.\n     * @param {boolean} [isInternal] - A flag to indicate this listener was added by the library. This parameter should\n     * not be used by developers who are using the library, only by developers who are working on the library itself.\n     */\n    that.once = function (eventType, listener, isInternal) {\n        var string = listener.toString();\n        listener = callOnce(listener);\n        listener.toString = function () { return string; };\n        listener.once = true;\n        that.listen(eventType, listener, isInternal);\n    };\n\n    /**\n     * Add a `listener` function to an object.\n     *\n     * This method adds the `listener` to the event `eventName`.\n     *\n     * If an identical listener already registered to this event, it will **not** be added.\n     *\n     * ##### Example of adding an event listener.\n     *\n     *     client.listen('connect', function (evt) {\n     *         console.log(\"We've connected!\", evt);\n     *     });\n     *\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.listen\n     * @param {string} eventType - The name of the event.\n     * @param {respoke.EventEmitter.eventListener} listener - A function to call when the event is\n     * fired.\n     * @arg {boolean} isInternal - Internal use only. A flag to indicate this listener was\n     * added by the library. This parameter should not be used by developers who are using\n     * the library, only by developers who are working on the library itself.\n     */\n    that.listen = function (eventType, listener, isInternal) {\n        if (listener === undefined) {\n            return;\n        }\n        var invalidEventType = typeof eventType !== 'string' || !eventType;\n        var invalidListener = typeof listener !== 'function';\n        if (invalidEventType || invalidListener) {\n            log.error(\"Invalid request to add event listener to\", eventType, listener);\n            return;\n        }\n\n        eventList[eventType] = eventList[eventType] || [];\n        listener.isInternal = !!isInternal; // boolify\n\n        var toString = function (fn) {\n            return fn.toString();\n        };\n        var isNotAlreadyAdded = eventList[eventType].map(toString).indexOf(listener.toString()) === -1;\n\n        if (isNotAlreadyAdded) {\n            eventList[eventType].push(listener);\n        } else {\n            log.warn(\"Not adding duplicate listener to\", eventType, listener);\n        }\n    };\n\n    /**\n     * Remove a listener from an object. If no eventType is specified, all eventTypes will be\n     * cleared. If an eventType is specified but no listener is specified, all listeners will be\n     * removed from the specified eventType.  If a listener is also specified, only that listener\n     * will be removed.\n     *\n     *     client.ignore('connect', connectHandler);\n     *\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.ignore\n     * @param {string} [eventType] - An optional developer-specified string identifying the event.\n     * @param {function} [listener] - An optional function to remove from the specified event.\n     */\n    that.ignore = function (eventType, listener) {\n        // Remove all events from this object\n        if (eventType === undefined) {\n            eventList = {};\n            return;\n        }\n\n        // Remove all listeners from this event.\n        if (listener === undefined || !eventList[eventType]) {\n            eventList[eventType] = [];\n            return;\n        }\n\n        // Remove only one listener from this event.\n        for (var i = eventList[eventType].length - 1; i >= 0; i -= 1) {\n            if (listener === eventList[eventType][i]) {\n                eventList[eventType].splice(i, 1);\n                return;\n            }\n        }\n    };\n\n    /**\n     * Trigger an event on an object. All listeners for the specified eventType will be called.\n     * Listeners will be bound to the object ('this' will refer to the object), and additional\n     * arguments to fire() will be passed into each listener.\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.fire\n     * @param {string} eventType - A developer-specified string identifying the event to fire.\n     * @param {string|number|object|array} evt - Any number of optional parameters to be passed to\n     * the listener\n     * @private\n     */\n    that.fire = function (eventType, evt) {\n        var args = null;\n        var count = 0;\n        var toRemove = [];\n        var i;\n\n        evt = evt || {};\n        evt.name = eventType;\n        evt.target = that;\n\n        if (!eventType) {\n            return;\n        }\n\n        if (!eventList[eventType]) {\n            log.debug(\"fired \" + that.className + \"#\" + eventType + \" 0 listeners called with params\", evt);\n            return;\n        }\n\n        for (i = 0; i < eventList[eventType].length; i += 1) {\n            var listener = eventList[eventType][i];\n            if (typeof listener === 'function') {\n                setTimeout(listenerBuilder(listener, evt, eventType));\n\n                count += 1;\n                if (listener.once === true) {\n                    toRemove.push(i);\n                }\n            }\n        }\n\n        for (i = (toRemove.length - 1); i >= 0; i -= 1) {\n            eventList[eventType].splice(toRemove[i], 1);\n        }\n\n        log.debug(\"fired \" + that.className + \"#\" + eventType + \" \" + count + \" listeners called with params\", evt);\n    };\n\n    function listenerBuilder(listener, evt, eventType) {\n        return function () {\n            try {\n                listener.call(that, evt);\n            } catch (e) {\n                log.error('Error in ' + that.className + \"#\" + eventType, e.message, e.stack);\n            }\n        };\n    }\n\n    /**\n     * Determine if an object has had any listeners registered for a given event outside the library. This method\n     * checks for the isInternal flag on each listener and doesn't count it toward an event being listened to. This\n     * method is used in the library to handle situations where an action is needed if an event won't be acted on.\n     * For instance, if a call comes in for the logged-in user, but the developer isn't listening to\n     * {respoke.Client#call}, we'll need to reject the call immediately.\n     *\n     *     if (client.hasListeners('call')) {\n     *         // already handled!\n     *     }\n     *\n     * @memberof! respoke.EventEmitter\n     * @method respoke.EventEmitter.hasListeners\n     * @param {string} eventType - The name of the event\n     * @returns {boolean} Whether this event has any listeners that are external to this library.\n     */\n    that.hasListeners = function (eventType) {\n        if (eventType === undefined) {\n            throw new Error(\"Missing required parameter event type.\");\n        }\n\n        if (!eventList[eventType]) {\n            return false;\n        }\n\n        return !eventList[eventType].every(function eachListener(listener) {\n            return listener.isInternal;\n        });\n    };\n\n    return that;\n}; // End respoke.EventEmitter\n/**\n * @callback respoke.EventEmitter.eventListener\n * @param {respoke.Event} evt\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/event.js\n ** module id = 6\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\n/**\n * Empty base class. Use params.that (if exists) for the base object, but delete it from the instance.\n * Copy all params that were passed in onto the base object. Add the class name.\n * @class respoke.Class\n * @private\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = params.that || {};\n\n    that.className = 'respoke.Class';\n    delete params.that;\n    delete that.client;\n\n    Object.keys(params).forEach(function copyParam(name) {\n        that[name] = params[name];\n    });\n\n    return that;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/class.js\n ** module id = 7\n ** module chunks = 0\n **/","// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    \"use strict\";\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\" && typeof module === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else if (typeof self !== \"undefined\") {\n        self.Q = definition();\n\n    } else {\n        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n    // queue for late tasks, used by unhandled rejection tracking\n    var laterQueue = [];\n\n    function flush() {\n        /* jshint loopfunc: true */\n        var task, domain;\n\n        while (head.next) {\n            head = head.next;\n            task = head.task;\n            head.task = void 0;\n            domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n            runSingle(task, domain);\n\n        }\n        while (laterQueue.length) {\n            task = laterQueue.pop();\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    // runs a single function in the async queue\n    function runSingle(task, domain) {\n        try {\n            task();\n\n        } catch (e) {\n            if (isNodeJS) {\n                // In node, uncaught exceptions are considered fatal errors.\n                // Re-throw them synchronously to interrupt flushing!\n\n                // Ensure continuation if the uncaught exception is suppressed\n                // listening \"uncaughtException\" events (as domains does).\n                // Continue in next event to avoid tick recursion.\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n\n                throw e;\n\n            } else {\n                // In browsers, uncaught exceptions are not fatal.\n                // Re-throw them asynchronously to avoid slow-downs.\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n\n        if (domain) {\n            domain.exit();\n        }\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process === \"object\" &&\n        process.toString() === \"[object process]\" && process.nextTick) {\n        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n        // To see through fake Node environments:\n        // * Mocha test runner - exposes a `process` global without a `nextTick`\n        // * Browserify - exposes a `process.nexTick` function that uses\n        //   `setTimeout`. In this case `setImmediate` is preferred because\n        //    it is faster. Browserify's `process.toString()` yields\n        //   \"[object Object]\", while in a real Node environment\n        //   `process.nextTick()` yields \"[object process]\".\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n    nextTick.runAfter = function (task) {\n        laterQueue.push(task);\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack &&\n        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack) {\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        error.stack = filterStackString(concatedStacks);\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n// enable long stacks if Q_DEBUG is set\nif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n}\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            Q.nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n        promise.source = newPromise;\n\n        array_reduce(messages, function (undefined, message) {\n            Q.nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            Q.nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become settled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be settled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function (resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function (answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\nQ.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n};\n\n/**\n * Works almost like \"finally\", but not called for rejections.\n * Original resolution value is passed through callback unaffected.\n * Callback may return a promise that will be awaited for.\n * @param {Function} callback\n * @returns {Q.Promise}\n * @example\n * doSomething()\n *   .then(...)\n *   .tap(console.log)\n *   .then(...);\n */\nPromise.prototype.tap = function (callback) {\n    callback = Q(callback);\n\n    return this.then(function (value) {\n        return callback.fcall(value).thenResolve(value);\n    });\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return object instanceof Promise;\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar reportedUnhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n            if (array_indexOf(unhandledRejections, promise) !== -1) {\n                process.emit(\"unhandledRejection\", reason, promise);\n                reportedUnhandledRejections.push(promise);\n            }\n        });\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n            Q.nextTick.runAfter(function () {\n                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n                if (atReport !== -1) {\n                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n                    reportedUnhandledRejections.splice(atReport, 1);\n                }\n            });\n        }\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return Q(result.value);\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return Q(exception.value);\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var pendingCount = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++pendingCount;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--pendingCount === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (pendingCount === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Returns the first resolved promise of an array. Prior rejected promises are\n * ignored.  Rejects only if all promises are rejected.\n * @param {Array*} an array containing values or promises for values\n * @returns a promise fulfilled with the value of the first resolved promise,\n * or a rejected promise if all promises are rejected.\n */\nQ.any = any;\n\nfunction any(promises) {\n    if (promises.length === 0) {\n        return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n        var promise = promises[index];\n\n        pendingCount++;\n\n        when(promise, onFulfilled, onRejected, onProgress);\n        function onFulfilled(result) {\n            deferred.resolve(result);\n        }\n        function onRejected() {\n            pendingCount--;\n            if (pendingCount === 0) {\n                deferred.reject(new Error(\n                    \"Can't get fulfillment value from any promise, all \" +\n                    \"promises were rejected.\"\n                ));\n            }\n        }\n        function onProgress(progress) {\n            deferred.notify({\n                index: index,\n                value: progress\n            });\n        }\n    }, undefined);\n\n    return deferred.promise;\n}\n\nPromise.prototype.any = function () {\n    return any(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        Q.nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {Any*} custom error message or Error object (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n};\n\nPromise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        if (!error || \"string\" === typeof error) {\n            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n            error.code = \"ETIMEDOUT\";\n        }\n        deferred.reject(error);\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            Q.nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            Q.nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/q/q.js\n ** module id = 8\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\nvar log = respoke.log;\n\n/**\n * `respoke.Client` is the top-level interface to the API. Interacting with Respoke should be done using\n * a `respoke.Client` instance.\n *\n * There are two ways to get a client:\n *\n *      var client = respoke.createClient(clientParams);\n *      // . . . set stuff up, then . . .\n *      client.connect(connectParams);\n *\n * or\n *\n *      // creates client and connects to Respoke all at once\n *      var client = respoke.connect(allParams);\n *\n * A client does the following things:\n *\n * 1. authentication with the Respoke API\n * 1. receives server-side app-specific information\n * 1. tracks connections and presence\n * 1. provides methods to get and interact with tracked entities (like groups and endpoints)\n * 1. stores default settings for calls and direct connections\n * 1. automatically reconnects to the API when network activity is lost*\n *\n * *If `developmentMode` is set to true. If not using `developmentMode`, disable automatic\n * reconnect by sending `reconnect: false` and listening to the Client's disconnect event\n * to fetch a new brokered auth token, then call `client.connect()` with the new token.\n *\n * @class respoke.Client\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n * respoke.connect, respoke.createClient, or to client.connect.\n * @param {string} [params.token] - The endpoint's authentication token.\n * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n * endpoint. This is only used when `developmentMode` is set to `true`.\n * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n * operation and will limit the services you will be able to use.\n * @param {string|number|object|Array} [params.presence=unavailable] The initial presence to set once connected.\n * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n * when a disconnect occurs.\n * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is received\n * from anywhere on the system.\n * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect.\n * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client's user receives a call.\n * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this client's user\n * receives a request for a direct connection.\n * @returns {respoke.Client}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Client\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId || respoke.makeGUID();\n    params.instanceId = instanceId;\n    var that = respoke.EventEmitter(params);\n    respoke.instances[instanceId] = that;\n    delete that.instanceId;\n    that.connectTries = 0;\n    /**\n     * A name to identify this class\n     * @memberof! respoke.Client\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Client';\n    /**\n     * @memberof! respoke.Client\n     * @name host\n     * @type {string}\n     * @private\n     */\n    var host = window.location.hostname;\n    /**\n     * @memberof! respoke.Client\n     * @name port\n     * @type {number}\n     * @private\n     */\n    var port = window.location.port;\n\n    /**\n     * A container for baseURL, token, and appId so they won't be accidentally viewable in any JavaScript debugger.\n     * @memberof! respoke.Client\n     * @name clientSettings\n     * @type {object}\n     * @private\n     * @property {string} [baseURL] - the URL of the cloud infrastructure's REST API.\n     * @property {string} [token] - The endpoint's authentication token.\n     * @property {string} [appId] - The id of your Respoke app.\n     * @property {string} [endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @property {boolean} [developmentMode=false] - Indication to obtain an authentication token from the service.\n     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n     * operation and will limit the services you will be able to use.\n     * @property {boolean} [reconnect=false] - Whether or not to automatically reconnect to the Respoke service\n     * when a disconnect occurs.\n     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves a group.\n     * @property {respoke.Client.onClientMessage} [onMessage] - Callback for when any message is received\n     * from anywhere on the system.\n     * @property {respoke.Client.onConnect} [onConnect] - Callback for Client connect.\n     * @property {respoke.Client.onDisconnect} [onDisconnect] - Callback for Client disconnect.\n     * @property {respoke.Client.onReconnect} [onReconnect] - Callback for Client reconnect. Not Implemented.\n     * @property {respoke.Client.onCall} [onCall] - Callback for when this client receives a call.\n     * @property {respoke.Client.onDirectConnection} [onDirectConnection] - Callback for when this client\n     * receives a request for a direct connection.\n     * @property {boolean} enableCallDebugReport=true - Upon finishing a call, should the client send debugging\n     * information to the API? Defaults to `true`.\n     */\n    var clientSettings = {};\n\n    delete that.appId;\n    delete that.baseURL;\n    delete that.developmentMode;\n    delete that.token;\n    delete that.resolveEndpointPresence;\n\n    /**\n     * Internal list of known groups.\n     * @memberof! respoke.Client\n     * @name groups\n     * @type {Array<respoke.Group>}\n     * @private\n     */\n    var groups = [];\n    /**\n     * Internal list of known endpoints.\n     * @memberof! respoke.Client\n     * @name endpoints\n     * @type {Array<respoke.Endpoint>}\n     * @private\n     */\n    var endpoints = [];\n    /**\n     * Array of calls in progress, made accessible for informational purposes only.\n     * **Never modify this array directly.**\n     *\n     * @memberof! respoke.Client\n     * @name calls\n     * @type {array}\n     */\n    that.calls = [];\n    log.debug(\"Client ID is \", instanceId);\n\n    /**\n     * @memberof! respoke.Client\n     * @name signalingChannel\n     * @type {respoke.SignalingChannel}\n     * @private\n     */\n    var signalingChannel = respoke.SignalingChannel({\n        instanceId: instanceId,\n        clientSettings: clientSettings\n    });\n\n    /**\n     * Represents the presence status. Typically a string, but other types are supported.\n     * Defaults to `'unavailable'`.\n     *\n     * **Do not modify this directly** - it won't update presence with Respoke. Use `setPresence()`.\n     *\n     * @memberof! respoke.Client\n     * @name presence\n     * @type {string|number|object|Array}\n     */\n    that.presence = params.presence || 'unavailable';\n\n    /**\n     * Deprecated: use endpoint.presence instead.\n     *\n     * Return the presence.\n     * @memberof! respoke.Client\n     * @deprecated\n     * @name presence\n     * @type {string|number|object|Array}\n     */\n    that.getPresence = function () {\n        return that.presence;\n    };\n\n    /**\n     * Save parameters of the constructor or client.connect() onto the clientSettings object\n     * @memberof! respoke.Client\n     * @method respoke.saveParameters\n     * @param {object} params\n     * @param {respoke.Client.connectSuccessHandler} [params.onSuccess] - Success handler for this invocation\n     * of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n     * respoke.connect, respoke.createClient, or to client.connect.\n     * @param {string} [params.token] - The endpoint's authentication token.\n     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n     * @param {respoke.client.resolveEndpointPresence} [params.resolveEndpointPresence] An optional function for\n     * resolving presence for an endpoint.  An endpoint can have multiple Connections this function will be used\n     * to decide which Connection's presence gets precedence for the Endpoint.\n     * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n     * operation and will limit the services you will be able to use.\n     * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n     * when a disconnect occurs.\n     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves\n     * a group.\n     * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is\n     * received from anywhere on the system.\n     * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n     * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n     * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n     * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client receives a call.\n     * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this\n     * client receives a request for a direct connection.\n     * @private\n     */\n    function saveParameters(params) {\n        Object.keys(params).forEach(function eachParam(key) {\n            if (['onSuccess', 'onError', 'reconnect', 'presence'].indexOf(key) === -1 && params[key] !== undefined) {\n                clientSettings[key] = params[key];\n            }\n        });\n\n        clientSettings.developmentMode = !!clientSettings.developmentMode;\n        clientSettings.enableCallDebugReport = typeof clientSettings.enableCallDebugReport === 'boolean' ?\n            clientSettings.enableCallDebugReport : true;\n\n        if (typeof params.reconnect !== 'boolean') {\n            clientSettings.reconnect = typeof clientSettings.developmentMode === 'boolean' ?\n                clientSettings.developmentMode : false;\n        } else {\n            clientSettings.reconnect = !!params.reconnect;\n        }\n    }\n    saveParameters(params);\n\n    /**\n     * Connect to the Respoke infrastructure and authenticate using `params.token`.\n     *\n     * After `connect`, the app auth session token is stored so it can be used in API requests.\n     *\n     * This method attaches quite a few event listeners for things like group joining and connection status changes.\n     *\n     * #### Usage\n     *\n     *      client.connect({\n     *          appId: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\",\n     *          token: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\", // if not developmentMode\n     *          developmentMode: false || true,\n     *          // if developmentMode, otherwise your server will set endpointId\n     *          endpointId: \"daveops\"\n     *      });\n     *      client.listen(\"connect\", function () { } );\n     *\n     *\n     * If no `params.token` is given and `developmentMode` is set to true, it will attempt to obtain a token\n     * automatically. You must set an `endpointId`.\n     *\n     *\n     * #### App auth session token expiration\n     *\n     * If `params.reconnect` is set to true (which it is by default for `developmentMode`), the `client`\n     * will attempt to keep reconnecting each time the app auth session expires.\n     *\n     * If not using `developmentMode`, automatic reconnect will be disabled. You will need to\n     * listen to the Client's `disconnect` event to fetch a new brokered auth token and call\n     * `client.connect()` with the new token.\n     *\n     *      client.listen('disconnect', function () {\n     *\n     *          // example method you implemented to get a new token from your server\n     *          myServer.getNewRespokeAccessToken(function (newToken) {\n     *              // reconnect with respoke.Client\n     *              client.connect({ token: newToken });\n     *          });\n     *\n     *      });\n     *\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.connect\n     * @param {object} params\n     * @param {respoke.Client.connectSuccessHandler} [params.onSuccess] - Success handler for this invocation\n     * of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {string} [params.appId] - The ID of your Respoke app. This must be passed either to\n     * respoke.connect, respoke.createClient, or to client.connect.\n     * @param {string} [params.token] - The endpoint's authentication token.\n     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @param {string|number|object|Array} [params.presence] The initial presence to set once connected.\n     * @param {respoke.client.resolveEndpointPresence} [params.resolveEndpointPresence] An optional function for\n     * resolving presence for an endpoint.  An endpoint can have multiple Connections this function will be used\n     * to decide which Connection's presence gets precedence for the Endpoint.\n     * @param {boolean} [params.developmentMode=false] - Indication to obtain an authentication token from the service.\n     * Note: Your app must be in developer mode to use this feature. This is not intended as a long-term mode of\n     * operation and will limit the services you will be able to use.\n     * @param {boolean} [params.reconnect=true] - Whether or not to automatically reconnect to the Respoke service\n     * when a disconnect occurs.\n     * @param {respoke.Client.onJoin} [params.onJoin] - Callback for when this client's endpoint joins a group.\n     * @param {respoke.Client.onLeave} [params.onLeave] - Callback for when this client's endpoint leaves\n     * a group.\n     * @param {respoke.Client.onClientMessage} [params.onMessage] - Callback for when any message is\n     * received from anywhere on the system.\n     * @param {respoke.Client.onConnect} [params.onConnect] - Callback for Client connect.\n     * @param {respoke.Client.onDisconnect} [params.onDisconnect] - Callback for Client disconnect.\n     * @param {respoke.Client.onReconnect} [params.onReconnect] - Callback for Client reconnect. Not Implemented.\n     * @param {respoke.Client.onCall} [params.onCall] - Callback for when this client receives a call.\n     * @param {respoke.Client.onDirectConnection} [params.onDirectConnection] - Callback for when this\n     * client receives a request for a direct connection.\n     * @returns {Promise|undefined}\n     * @fires respoke.Client#connect\n     */\n    that.connect = function (params) {\n        var promise;\n        var retVal;\n        params = params || {};\n        log.debug('Client.connect');\n        that.connectTries += 1;\n\n        saveParameters(params);\n\n        that.endpointId = clientSettings.endpointId;\n        promise = actuallyConnect(params);\n        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n        promise.then(function successHandler() {\n            /**\n             * This event is fired the first time the library connects to the cloud infrastructure.\n             * @event respoke.Client#connect\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n            that.fire('connect');\n\n            /**\n             * This event fires only when the initial `connect` fails.\n             *\n             * @ignore **This comment is for documentation purposes**, since #error bubbles\n             * up from other classes, but it should show on `respoke.Client` docs.\n             *\n             * @event respoke.Client#error\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n        });\n        return retVal;\n    };\n\n    /**\n     * This function contains the meat of the connection, the portions which can be repeated again on reconnect.\n     *\n     * When `reconnect` is true, this function will be added in an event listener to the Client#disconnect event.\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     * @memberof! respoke.Client\n     * @method respoke.Client.actuallyConnect\n     * @private\n     * @param {object} params\n     * @param {connectSuccessHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    function actuallyConnect(params) {\n        params = params || {};\n        var deferred = Q.defer();\n\n        if (!clientSettings.token &&\n                (!clientSettings.appId || !clientSettings.endpointId || clientSettings.developmentMode !== true)) {\n            deferred.reject(new Error(\"Must pass either endpointID & appId & developmentMode=true, or a token, \" +\n                \"to client.connect().\"));\n            return deferred.promise;\n        }\n\n        signalingChannel.open({\n            actuallyConnect: actuallyConnect,\n            endpointId: that.endpointId,\n            token: clientSettings.token\n        }).then(function successHandler() {\n            return signalingChannel.authenticate();\n        }).done(function successHandler() {\n            // set initial presence for the connection\n            if (that.presence) {\n                that.setPresence({presence: that.presence});\n            }\n\n            /*!\n             * These rely on the EventEmitter checking for duplicate event listeners in order for these\n             * not to be duplicated on reconnect.\n             */\n\n            /**\n             * This event provides notification for when an incoming call is being received.  If the user wishes\n             * to allow the call, `evt.call.answer()`.\n             * @event respoke.Client#call\n             * @type {respoke.Event}\n             * @property {respoke.Call} call\n             * @property {respoke.Endpoint} endpoint\n             * @property {string} name - The event name.\n             * @property {respoke.Client} target\n             */\n            that.listen('call', clientSettings.onCall);\n            /**\n             * This event is fired when the local end of the directConnection is available. It still will not be\n             * ready to send and receive messages until the 'open' event fires.\n             * @event respoke.Client#direct-connection\n             * @type {respoke.Event}\n             * @property {respoke.DirectConnection} directConnection\n             * @property {respoke.Endpoint} endpoint\n             * @property {string} name - the event name.\n             * @property {respoke.Call} target\n             */\n            that.listen('direct-connection', clientSettings.onDirectConnection);\n            that.listen('join', clientSettings.onJoin);\n            /**\n             * This event is fired every time the client leaves a group.\n             * @event respoke.Client#leave\n             * @type {respoke.Event}\n             * @property {respoke.Group} group\n             * @property {string} name - the event name.\n             */\n            that.listen('leave', clientSettings.onLeave);\n            /**\n             * A generic message handler when a message was received by the client.\n             *\n             * @event respoke.Client#message\n             * @type {respoke.Event}\n             * @property {string} name - The event name.\n             * @property {respoke.Endpoint} endpoint - If the message was private, this is the Endpoint who sent it.\n             * @property {respoke.Group} group - If the message was to a group, this is the group.\n             * @property {respoke.TextMessage} message - The generic message object.\n             * @property {string} message.connectionId\n             * @property {string} message.endpointId\n             * @property {string} message.message - Message body text.\n             * @property {respoke.Client} target\n             */\n            that.listen('message', clientSettings.onMessage);\n            that.listen('connect', clientSettings.onConnect);\n            /**\n             * Client has disconnected from Respoke.\n             *\n             * @event respoke.Client#disconnect\n             * @type {respoke.Event}\n             * @property {string} name - The event name.\n             * @property {respoke.Client} target\n             */\n            that.listen('disconnect', clientSettings.onDisconnect);\n            that.listen('disconnect', function () {\n                that.calls.forEach(function (call) {\n                    call.hangup({signal: false});\n                });\n            }, true);\n            /**\n             * Client has reconnected to Respoke.\n             *\n             * @event respoke.Client#reconnect\n             * @type {respoke.Event}\n             * @property {string} name - The event name.\n             * @property {respoke.Client} target\n             */\n            that.listen('reconnect', clientSettings.onReconnect);\n\n            log.info('logged in as ' + that.endpointId, that);\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n            if (err.message && err.message.match(/Connection limit exceeded/)) {\n                log.error(\n                    'You have reached the connection limit on the account associated with this appId. ' +\n                    'Please upgrade your account from the developer portal at https://portal.respoke.io ' +\n                    'if you need more concurrent connections.', err);\n            } else {\n                log.error(err.message, err.stack);\n            }\n        });\n\n        return deferred.promise;\n    }\n\n    /**\n     * Disconnect from the Respoke infrastructure, leave all groups, invalidate the token, and disconnect the websocket.\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     * @memberof! respoke.Client\n     * @method respoke.Client.disconnect\n     * @returns {Promise|undefined}\n     * @param {object} params\n     * @param {disconnectSuccessHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @fires respoke.Client#disconnect\n     */\n    that.disconnect = function (params) {\n        // TODO: also call this on socket disconnect\n        params = params || {};\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            deferred.reject(e);\n            return retVal;\n        }\n\n        var leaveGroups = groups.map(function eachGroup(group) {\n            if (group.isJoined()) {\n                return group.leave();\n            }\n        });\n\n        Q.all(leaveGroups).fin(function successHandler() {\n            return signalingChannel.close();\n        }).fin(function finallyHandler() {\n            that.presence = 'unavailable';\n            endpoints = [];\n            groups = [];\n            /**\n             * This event is fired when the library has disconnected from the cloud infrastructure.\n             * @event respoke.Client#disconnect\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n            that.fire('disconnect');\n            deferred.resolve();\n        }).done();\n\n        return retVal;\n    };\n\n    /**\n     * Set the presence for this client.\n     *\n     * The value of presence can be a string, number, object, or array - in any format -\n     * depending on the needs of your application. The only requirement is that\n     * `JSON.stringify()` must work (no circular references).\n     *\n     *      var myPresence = 'At lunch'\n     *                      || 4\n     *                      || { status: 'Away', message: 'At lunch' }\n     *                      || ['Away', 'At lunch'];\n     *\n     *      client.setPresence({\n     *          presence: myPresence,\n     *          onSuccess: function (evt) {\n     *              // successfully updated my presence\n     *          }\n     *      });\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.setPresence\n     * @param {object} params\n     * @param {string|number|object|array} params.presence\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @return {Promise|undefined}\n     */\n    that.setPresence = function (params) {\n        var promise;\n        var retVal;\n        params = params || {};\n        params.presence = params.presence || 'available';\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n        }\n\n        log.info('sending my presence update ' + params.presence);\n\n        promise = signalingChannel.sendPresence({\n            presence: params.presence\n        }).then(function successHandler(p) {\n            that.presence = params.presence;\n\n            /**\n             * This event indicates that the presence for this endpoint has been updated.\n             * @event respoke.Client#presence\n             * @type {respoke.Event}\n             * @property {string|number|object|Array} presence\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n            that.fire('presence', {\n                presence: that.presence\n            });\n        });\n        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n        return retVal;\n    };\n\n    /**\n     * Get the Call with the endpoint specified.\n     *\n     *     // hang up on chad\n     *     var call = client.getCall({\n     *         endpointId: 'chad'\n     *     });\n     *\n     *     if (call) {\n     *         call.hangup()\n     *     }\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getCall\n     * @param {object} params\n     * @param {string} [params.id] - Call ID.\n     * @param {string} [params.endpointId] - Endpoint ID. Warning: If you pass only the endpointId, this method\n     * will just return the first call that matches. If you are placing multiple calls to the same endpoint,\n     * pass in the call ID, too.\n     * @arg {boolean} [params.create] - whether or not to create a new call if the specified endpointId isn't found\n     * @arg {string} [params.fromType] - fromType from the signal, tells us if this is a SIP or DID call.\n     * @arg {string} [params.target] - target from the signal, tells us if this is a screenshare or conference call.\n     * @returns {respoke.Call}\n     */\n    that.getCall = function (params) {\n        var call = null;\n        var methods = {\n            screenshare: \"startScreenShare\",\n            did: \"startPhoneCall\",\n            web: \"startCall\",\n            sip: \"startSIPCall\",\n            conference: \"joinConference\"\n        };\n        var callParams = {};\n        params.fromType = params.type || \"web\";\n        var switchType = params.type;\n\n        that.calls.every(function findCall(one) {\n            if (params.id && one.id === params.id) {\n                call = one;\n                return false;\n            }\n\n            if (!params.id && params.endpointId && one.remoteEndpoint.id === params.endpointId) {\n                call = one;\n                return false;\n            }\n            return true;\n        });\n\n        if (call || params.create !== true) {\n            return call;\n        }\n\n        callParams.id = params.id;\n        callParams.caller = false;\n        callParams.fromType = \"web\";\n        callParams.callerId = params.callerId;\n        callParams.target = params.target;\n\n        if (params.target === \"conference\") {\n            callParams.id = params.conferenceId;\n            switchType = params.target;\n        } else if (params.target === \"screenshare\") {\n            switchType = params.target;\n        }\n\n        switch (switchType) {\n            case \"screenshare\":\n            case \"web\":\n                callParams.toType = \"web\"; // overwrite \"screenshare\"\n                callParams.endpointId = params.endpointId;\n                break;\n            case \"did\":\n                callParams.number = params.endpointId;\n                callParams.toType = \"did\";\n                break;\n            case \"sip\":\n                callParams.uri = params.endpointId;\n                callParams.toType = \"sip\";\n                break;\n        }\n\n        try {\n            call = that[methods[params.type]](callParams);\n        } catch (e) {\n            log.error(\"Couldn't create Call.\", e.message, e.stack);\n        }\n        return call;\n    };\n\n    /**\n     * Add the call to internal record-keeping.\n     * @memberof! respoke.Client\n     * @method respoke.Client.addCall\n     * @param {object} evt\n     * @param {respoke.Call} evt.call\n     * @param {respoke.Endpoint} evt.endpoint\n     * @private\n     */\n    function addCall(evt) {\n        log.debug('addCall');\n        if (!evt.call) {\n            throw new Error(\"Can't add call without a call parameter.\");\n        }\n        if (that.calls.indexOf(evt.call) === -1) {\n            that.calls.push(evt.call);\n        }\n\n        evt.call.listen('hangup', function () {\n            removeCall({call: evt.call});\n        });\n    }\n\n    /**\n     * Remove the call or direct connection from internal record-keeping.\n     * @memberof! respoke.Client\n     * @method respoke.Client.removeCall\n     * @param {object} evt\n     * @param {respoke.Call} evt.target\n     * @private\n     */\n    function removeCall(evt) {\n        var match = 0;\n        if (!evt.call) {\n            throw new Error(\"Can't remove call without a call parameter.\");\n        }\n\n        // Loop backward since we're modifying the array in place.\n        for (var i = that.calls.length - 1; i >= 0; i -= 1) {\n            if (that.calls[i].id === evt.call.id) {\n                that.calls.splice(i, 1);\n                match += 1;\n            }\n        }\n\n        if (match !== 1) {\n            log.warn(\"Something went wrong.\", match, \"calls were removed!\");\n        }\n    }\n\n    /**\n     * Convenience method for setting presence to `\"available\"`.\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.setOnline\n     * @param {object} params\n     * @param {string|number|object|Array} [params.presence=available] - The presence to set.\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    that.setOnline = function (params) {\n        var promise;\n\n        params = params || {};\n        params.presence = params.presence || 'available';\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n        }\n\n        return that.setPresence(params);\n    };\n\n    /**\n     * Convenience method for setting presence to `\"unavailable\"`.\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.setOffline\n     * @param {object} params\n     * @param {string|number|object|Array} [params.presence=unavailable] - The presence to set.\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    that.setOffline = function (params) {\n        var promise;\n\n        params = params || {};\n        params.presence = params.presence || 'unavailable';\n\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            return respoke.handlePromise(promise, params.onSuccess, params.onError);\n        }\n\n        return that.setPresence(params);\n    };\n\n    /**\n     * Send a message to an endpoint.\n     *\n     *     client.sendMessage({\n     *         endpointId: 'dan',\n     *         message: \"Jolly good.\"\n     *     });\n     *\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     * @memberof! respoke.Client\n     * @method respoke.Client.sendMessage\n     * @param {object} params\n     * @param {string} params.endpointId - The endpoint id of the recipient.\n     * @param {string} [params.connectionId] - The optional connection id of the receipient. If not set, message will be\n     * broadcast to all connections for this endpoint.\n     * @param {string} params.message - a string message.\n     * @param {sendHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        var promise;\n        var retVal;\n        var endpoint;\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            promise = Q.reject(e);\n            retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n            return retVal;\n        }\n        endpoint = that.getEndpoint({\n            skipPresence: true,\n            id: params.endpointId\n        });\n        delete params.endpointId;\n        return endpoint.sendMessage(params);\n    };\n\n    /**\n     * Experimental. Create a new conference call with the specified id.\n     *\n     *     client.joinConference({\n     *         id: \"javascript-meetup\",\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.joinConference\n     * @private\n     * @param {object} params\n     * @param {string} params.id - The id that should be used to create the conference call or the ID\n     * of the call to join.\n     * @param {string|boolean} params.audio - Whether participant should send and receive audio. Boolean `true`\n     * indicates send and receive. Boolean `false` indicates neither send nor receive. Strings `send` and `receive`\n     * indicate send only and receive only respectively.\n     * @param {string|boolean} params.video - Whether participant should send and receive audio. Boolean `true`\n     * indicates send and receive. Boolean `false` indicates neither send nor receive. Strings `send` and `receive`\n     * indicate send only and receive only respectively.\n     * @param {boolean} params.mixAudio - Whether Respoke should mix all the audio streams together to save bandwidth\n     * for this one participant.\n     * @param {Array<RTCConstraints>} [params.constraints]\n     * @arg {respoke.Conference.onJoin} [params.onJoin] - Callback for when a participant joins the conference.\n     * @arg {respoke.Conference.onLeave} [params.onLeave] - Callback for when a participant leaves the conference.\n     * @arg {respoke.Conference.onMessage} [params.onMessage] - Callback for when a message is sent to the conference.\n     * @param {respoke.Conference.onMute} [params.onMute] - Callback for when local or remote media is muted or unmuted.\n     * @arg {respoke.Conference.onTopic} [params.onTopic] - Callback for the conference topic changes.\n     * @arg {respoke.Conference.onPresenter} [params.onPresenter] - Callback for when the presenter changes.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n     * and the remote party has received the video.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @returns {respoke.Conference}\n     */\n    that.joinConference = function (params) {\n        var conference = null;\n        var recipient;\n\n        params = params || {};\n        params.open = !!params.open;\n\n        that.verifyConnected();\n\n        if (!params.id) {\n            params.id = respoke.makeGUID();\n        }\n\n        recipient = {id: params.id};\n\n        if (params.open) {\n            params.key = undefined;\n        } else if (!params.key) {\n            params.key = respoke.makeGUID();\n        }\n\n        params.instanceId = instanceId;\n        params.target = \"conference\";\n        params.constraints = respoke.convertConstraints(params.constraints, [{\n            video: false,\n            audio: true,\n            mandatory: {},\n            optional: []\n        }]);\n\n        params.signalOffer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'offer';\n            signalParams.target = params.target;\n            signalParams.id = params.id;\n            signalParams.key = params.key;\n            signalParams.open = params.open;\n            signalParams.recipient = recipient;\n            signalParams.toType = \"conference\";\n\n            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n        };\n        params.signalAnswer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'answer';\n            signalParams.target = params.target;\n            signalParams.recipient = recipient;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalParams.toType = \"conference\";\n            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n                signalParams.call.hangup({signal: false});\n            });\n        };\n        params.signalConnected = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.connectionId = signalParams.call.connectionId;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalParams.recipient = recipient;\n            signalParams.toType = \"conference\";\n            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n                signalParams.call.hangup();\n            });\n        };\n        params.signalModify = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.recipient = recipient;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalParams.toType = \"conference\";\n            signalingChannel.sendModify(signalParams).done();\n        };\n        params.signalCandidate = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.recipient = recipient;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalParams.toType = \"conference\";\n            signalingChannel.sendCandidate(signalParams).done();\n        };\n        params.signalHangup = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.recipient = recipient;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalParams.toType = \"conference\";\n            signalingChannel.sendHangup(signalParams).done();\n        };\n        params.signalReport = function (signalParams) {\n            log.debug(\"Sending debug report\", signalParams.report);\n            signalingChannel.sendReport(signalParams).done();\n        };\n\n        params.signalingChannel = signalingChannel;\n        conference = respoke.Conference(params);\n        addCall({call: conference.call});\n        return conference;\n    };\n\n    /**\n     * Create a new screen sharing call. Screenshares are inherently unidirectional video only. This may change\n     * in the future when Chrome adds the ability to obtain screen video and microphone audio at the same time. For\n     * now, if you also need audio, place a second audio only call.\n     *\n     * The endpoint who calls `client.startScreenShare` will be the one whose screen is shared. If you'd like to\n     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n     * not the sharer, it is recommened that you use `endpoint.sendMessage` to send a control message to the user\n     * whose screenshare is being requested so that user's app can call `client.startScreenShare`.\n     *\n     * NOTE: At this time, screen sharing only works with Chrome, and Chrome requires a Chrome extension to\n     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension.\n     * Support for additional browsers will be added in the future.\n     *\n     *     client.startScreenShare({\n     *         endpointId: 'tian',\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.startScreenShare\n     * @param {object} params\n     * @param {string} params.endpointId - The id of the endpoint that should be called.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n     * and the remote party has received the video.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {string} [params.source] - Pass in what type of mediaSource you want. If omitted, you'll have access\n     * to both the screen and windows. In firefox, you'll have access to the screen only.\n     * @returns {respoke.Call}\n     */\n    that.startScreenShare = function (params) {\n        that.verifyConnected();\n        var endpoint = that.getEndpoint({\n            skipPresence: true,\n            id: params.endpointId\n        });\n        delete params.endpointId;\n        return endpoint.startScreenShare(params);\n    };\n\n    /**\n     * Place an audio and/or video call to an endpoint.\n     *\n     *     // defaults to video when no constraints are supplied\n     *     client.startCall({\n     *         endpointId: 'erin',\n     *         onConnect: function (evt) { },\n     *         onLocalMedia: function (evt) { }\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.startCall\n     * @param {object} params\n     * @param {string} params.endpointId - The id of the endpoint that should be called.\n     * @param {Array<RTCConstraints>} [params.constraints]\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n     * with the local audio and/or video attached.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n     * with the remote audio and/or video attached.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n     * up.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have\n     * local video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have\n     * remote video attached to it.\n     * @return {respoke.Call}\n     */\n    that.startCall = function (params) {\n        that.verifyConnected();\n        var endpoint = that.getEndpoint({\n            skipPresence: true,\n            id: params.endpointId\n        });\n        delete params.endpointId;\n        return endpoint.startCall(params);\n    };\n\n    /**\n     * Place an audio only call to an endpoint.\n     *\n     *     client.startAudioCall({\n     *         endpointId: 'erin',\n     *         onConnect: function (evt) { },\n     *         onLocalMedia: function (evt) { }\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.startAudioCall\n     * @param {object} params\n     * @param {string} params.endpointId - The id of the endpoint that should be called.\n     * @param {string} [params.connectionId]\n     * @param {Array<RTCConstraints>} [params.constraints]\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 element\n     * with the local audio and/or video attached.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 element\n     * with the remote audio and/or video attached.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n     * up.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n     * video attached to it.\n     * @return {respoke.Call}\n     */\n    that.startAudioCall = function (params) {\n        that.verifyConnected();\n        var endpoint = that.getEndpoint({\n            skipPresence: true,\n            id: params.endpointId\n        });\n        delete params.endpointId;\n        return endpoint.startAudioCall(params);\n    };\n\n    /**\n     * Place a video call to an endpoint.\n     *\n     *     client.startVideoCall({\n     *         endpointId: 'erin',\n     *         onConnect: function (evt) { },\n     *         onLocalMedia: function (evt) { }\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.startVideoCall\n     * @param {object} params\n     * @param {string} params.endpointId - The id of the endpoint that should be called.\n     * @param {Array<RTCConstraints>} [params.constraints]\n     * @param {string} [params.connectionId]\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n     * with the local audio and/or video attached.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n     * with the remote audio and/or video attached.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n     * up.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n     * video attached to it.\n     * @return {respoke.Call}\n     */\n    that.startVideoCall = function (params) {\n        that.verifyConnected();\n        var endpoint = that.getEndpoint({\n            skipPresence: true,\n            id: params.endpointId\n        });\n        delete params.endpointId;\n        return endpoint.startVideoCall(params);\n    };\n\n    /**\n     * Place an audio call with a phone number.\n     * @memberof! respoke.Client\n     * @method respoke.Client.startPhoneCall\n     * @param {object} params\n     * @param {string} params.number - The phone number that should be called.\n     * @arg {string} params.callerId - The phone number to use as the caller ID for this phone call. This must\n     * be a phone number listed in your Respoke account, associated with your app, and allowed by the role\n     * that this client is authenticated with. If the role contains a list of numbers and the token does not contain\n     * callerId, this field must be used to set caller ID selected from the list of numbers or no caller ID will be set.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n     * with the local audio and/or video attached.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n     * with the remote audio and/or video attached.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n     * up.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @return {respoke.Call}\n     */\n    that.startPhoneCall = function (params) {\n        var promise;\n        var call = null;\n        var recipient = {};\n        params = params || {};\n        params.constraints = [{\n            video: false,\n            audio: true,\n            mandatory: {},\n            optional: []\n        }];\n\n        that.verifyConnected();\n\n        if (!params.number) {\n            throw new Error(\"Can't start a phone call without a number.\");\n        }\n\n        if (typeof params.caller !== 'boolean') {\n            params.caller = true;\n        }\n\n        recipient.id = params.number;\n\n        params.instanceId = instanceId;\n        params.remoteEndpoint = recipient;\n\n        params.toType = params.toType || 'did';\n        params.fromType = params.fromType || 'web';\n\n        params.signalOffer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'offer';\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n\n            // using hasOwnProperty here because callerId could be explicitly set to null or empty string\n            if (params.hasOwnProperty('callerId')) {\n                signalParams.callerId = {number: params.callerId};\n            }\n            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n        };\n        params.signalAnswer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'answer';\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n                log.error(\"Couldn't answer the call.\", err.message, err.stack);\n                signalParams.call.hangup({signal: false});\n            });\n        };\n        params.signalConnected = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.connectionId = signalParams.connectionId;\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send connected.\", err.message, err.stack);\n                signalParams.call.hangup();\n            });\n        };\n        params.signalModify = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendModify(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send modify.\", err.message, err.stack);\n            });\n        };\n        params.signalCandidate = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendCandidate(signalParams).done();\n        };\n        params.signalHangup = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendHangup(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send hangup.\", err.message, err.stack);\n            });\n        };\n        params.signalReport = function (signalParams) {\n            log.debug(\"Sending debug report\", signalParams.report);\n            signalingChannel.sendReport(signalParams);\n        };\n\n        params.signalingChannel = signalingChannel;\n        call = respoke.Call(params);\n        addCall({call: call});\n        return call;\n    };\n\n    /**\n     * Place an audio call to a SIP URI.\n     * @memberof! respoke.Client\n     * @method respoke.Client.startSIPCall\n     * @param {object} params\n     * @param {string} params.uri - The SIP URI to call.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video element\n     * with the local audio and/or video attached.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video element\n     * with the remote audio and/or video attached.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been hung\n     * up.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @return {respoke.Call}\n     */\n    that.startSIPCall = function (params) {\n        var promise;\n        var call = null;\n        var recipient = {};\n        params = params || {};\n        params.constraints = [{\n            video: false,\n            audio: true,\n            mandatory: {},\n            optional: []\n        }];\n\n        that.verifyConnected();\n\n        if (!params.uri) {\n            throw new Error(\"Can't start a phone call without a SIP URI.\");\n        }\n\n        if (typeof params.caller !== 'boolean') {\n            params.caller = true;\n        }\n\n        recipient.id = params.uri;\n\n        params.instanceId = instanceId;\n        params.remoteEndpoint = recipient;\n\n        params.toType = params.toType || 'sip';\n        params.fromType = params.fromType || 'web';\n\n        params.signalOffer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'offer';\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n        };\n        params.signalAnswer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'answer';\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n                log.error(\"Couldn't answer the call.\", err.message, err.stack);\n                signalParams.call.hangup({signal: false});\n            });\n        };\n        params.signalConnected = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.connectionId = signalParams.connectionId;\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send connected.\", err.message, err.stack);\n                signalParams.call.hangup();\n            });\n        };\n        params.signalModify = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendModify(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send modify.\", err.message, err.stack);\n            });\n        };\n        params.signalCandidate = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendCandidate(signalParams).done();\n        };\n        params.signalHangup = function (signalParams) {\n            signalParams.target = 'call';\n            signalParams.recipient = recipient;\n            signalParams.toType = params.toType;\n            signalParams.fromType = params.fromType;\n            signalingChannel.sendHangup(signalParams).done(null, function errorHandler(err) {\n                log.error(\"Couldn't send hangup.\", err.message, err.stack);\n            });\n        };\n        params.signalReport = function (signalParams) {\n            log.debug(\"Sending debug report\", signalParams.report);\n            signalingChannel.sendReport(signalParams);\n        };\n\n        params.signalingChannel = signalingChannel;\n        call = respoke.Call(params);\n        addCall({call: call});\n        return call;\n    };\n\n    /**\n     * Assert that we are connected to the backend infrastructure.\n     * @memberof! respoke.Client\n     * @method respoke.Client.verifyConnected\n     * @throws {Error}\n     * @private\n     */\n    that.verifyConnected = function () {\n        if (!signalingChannel.isConnected()) {\n            throw new Error(\"Can't complete request when not connected. Please reconnect!\");\n        }\n    };\n\n    /**\n     * Check whether this client is connected to the Respoke API.\n     * @memberof! respoke.Client\n     * @method respoke.Client.isConnected\n     * @returns boolean\n     */\n    that.isConnected = function () {\n        return signalingChannel.isConnected();\n    };\n\n    /**\n     * Join a group and begin keeping track of it. If this method is called multiple times synchronously, it will\n     * batch requests and only make one API call to Respoke.\n     *\n     * You can leave the group by calling `group.leave()`;\n     *\n     * ##### Joining and leaving a group\n     *\n     *      var group;\n     *\n     *      client.join({\n     *          id: \"book-club\",\n     *          onSuccess: function (evt) {\n     *              console.log('I joined', evt.group.id);\n     *              // \"I joined book-club\"\n     *              group = evt.group;\n     *              group.sendMessage({\n     *                  message: 'sup'\n     *              });\n     *          }\n     *      });\n     *\n     *      // . . .\n     *      // Some time later, leave the group.\n     *      // . . .\n     *      group.leave({\n     *          onSuccess: function (evt) {\n     *              console.log('I left', evt.group.id);\n     *              // \"I left book-club\"\n     *          }\n     *      });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.join\n     * @param {object} params\n     * @param {string} params.id - The name of the group.\n     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {respoke.Group.onMessage} [params.onMessage] - Message handler for messages from this group only.\n     * @param {respoke.Group.onJoin} [params.onJoin] - Join event listener for endpoints who join this group only.\n     * @param {respoke.Group.onLeave} [params.onLeave] - Leave event listener for endpoints who leave\n     * this group only.\n     * @returns {Promise<respoke.Group>|undefined} The instance of the respoke.Group which the client joined.\n     * @fires respoke.Client#join\n     */\n    that.join = function (params) {\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n        try {\n            that.verifyConnected();\n        } catch (e) {\n            deferred.reject(e);\n            return retVal;\n        }\n\n        if (!params.id) {\n            deferred.reject(new Error(\"Can't join a group with no group id.\"));\n            return retVal;\n        }\n\n        log.trace('requested to join group', params.id);\n\n        signalingChannel.joinGroup({\n            groupList: [params.id]\n        }).done(function successHandler() {\n            var group;\n            params.signalingChannel = signalingChannel;\n            params.instanceId = instanceId;\n\n            group = that.getGroup({id: params.id});\n\n            if (!group) {\n                group = respoke.Group(params);\n                that.addGroup(group);\n            }\n\n            group.listen('join', params.onJoin);\n            group.listen('leave', params.onLeave);\n            group.listen('message', params.onMessage);\n\n            group.addMember({\n                connection: that.getConnection({\n                    endpointId: that.endpointId,\n                    connectionId: that.connectionId\n                })\n            });\n\n            /**\n             * This event is fired every time the client joins a group. If the client leaves\n             * a group, this event will be fired again on the next time the client joins the group.\n             * @event respoke.Client#join\n             * @type {respoke.Event}\n             * @property {respoke.Group} group\n             * @property {string} name - the event name.\n             */\n            that.fire('join', {\n                group: group\n            });\n            deferred.resolve(group);\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return retVal;\n    };\n\n    /**\n     * Add a Group. This is called when we join a group and need to begin keeping track of it.\n     * @memberof! respoke.Client\n     * @method respoke.Client.addGroup\n     * @param {respoke.Group}\n     * @private\n     */\n    that.addGroup = function (newGroup) {\n        if (!newGroup || newGroup.className !== 'respoke.Group') {\n            throw new Error(\"Can't add group to internal tracking without a group.\");\n        }\n\n        newGroup.listen('leave', function leaveHandler(evt) {\n            newGroup.removeMember({connectionId: evt.connection.id});\n            var endpt = evt.connection.getEndpoint();\n            if (!endpt.hasListeners('presence')) {\n                checkEndpointForRemoval(endpt);\n            }\n        }, true);\n\n        groups.push(newGroup);\n    };\n\n    /**\n     * Get a list of all the groups the client is currently a member of.\n     * @memberof! respoke.Client\n     * @method respoke.Client.getGroups\n     * @returns {Array<respoke.Group>} All of the groups the library is aware of.\n     */\n    that.getGroups = function () {\n        return groups;\n    };\n\n    /**\n     * Find a group by id and return it.\n     *\n     *     var group = client.getGroup({\n     *         id: \"resistance\"\n     *     });\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getGroup\n     * @param {object} params\n     * @param {string} params.id\n     * @param {respoke.Group.onJoin} [params.onJoin] - Receive notification that an endpoint has joined this group.\n     * @param {respoke.Group.onLeave} [params.onLeave] - Receive notification that an endpoint has left this group.\n     * @param {respoke.Group.onMessage} [params.onMessage] - Receive notification that a message has been\n     * received to a group.\n     * @returns {respoke.Group|undefined} The group whose ID was specified.\n     */\n    that.getGroup = function (params) {\n        var group;\n        if (!params || !params.id) {\n            throw new Error(\"Can't get a group without group id.\");\n        }\n\n        groups.every(function eachGroup(grp) {\n            if (grp.id === params.id) {\n                group = grp;\n                return false;\n            }\n            return true;\n        });\n\n        if (group) {\n            group.listen('join', params.onJoin);\n            group.listen('leave', params.onLeave);\n            group.listen('message', params.onMessage);\n        }\n\n        return group;\n    };\n\n    /**\n     * Remove an Endpoint. Since an endpoint can be a member of multiple groups, we can't just remove it from\n     * our list on respoke.Endpoint#leave. We must see if it's a member of any more groups. If it's not\n     * a member of any other groups, we can stop keeping track of it.\n     * @todo TODO Need to account for Endpoints not created as part of a group. These do not need to be\n     * deleted based on group membership.\n     * @memberof! respoke.Client\n     * @method respoke.Client.checkEndpointForRemoval\n     * @param {object} params\n     * @param {string} params.id - The ID of the Endpoint to check for removal.\n     * @private\n     */\n    function checkEndpointForRemoval(params) {\n        params = params || {};\n        if (!params.id) {\n            throw new Error(\"Can't remove endpoint from internal tracking without group id.\");\n        }\n\n        Q.all(groups.map(function eachGroup(group) {\n            return group.getMembers();\n        })).done(function successHandler(connectionsByGroup) {\n            // connectionsByGroup is a two-dimensional array where the first dimension is a group\n            // and the second dimension is a connection.\n            var absent = connectionsByGroup.every(function eachConnectionList(connectionList) {\n                return connectionList.every(function eachConnection(conn) {\n                    return (conn.endpointId !== params.id);\n                });\n            });\n            if (absent) {\n                endpoints.every(function eachEndpoint(ept, index) {\n                    if (ept.id === params.id) {\n                        endpoints.splice(index, 1);\n                        return false;\n                    }\n                    return true;\n                });\n            }\n        });\n    }\n\n    /**\n     * Find an endpoint by id and return the `respoke.Endpoint` object.\n     *\n     * If it is not already cached locally, will be added to the local cache of tracked endpoints,\n     * its presence will be determined, and will be available in `client.getEndpoints()`.\n     *\n     *     var endpoint = client.getEndpoint({\n     *         id: \"dlee\"\n     *     });\n     *\n     * @ignore If the endpoint is not found in the local cache of endpoint objects (see `client.getEndpoints()`),\n     * it will be created. This is useful, for example, in the case of dynamic endpoints where groups are\n     * not in use. Override dynamic endpoint creation by setting `params.skipCreate = true`.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getEndpoint\n     * @param {object} params\n     * @param {string} params.id\n     * @param {respoke.Endpoint.onMessage} [params.onMessage] - Handle messages sent to the logged-in user\n     * from this one Endpoint.\n     * @param {respoke.Endpoint.onPresence} [params.onPresence] - Handle presence notifications from this one\n     * Endpoint.\n     * @arg {boolean} [params.skipCreate] - Skip the creation step and return undefined if we don't yet\n     * @arg {boolean} [params.skipPresence] - Skip registering for this endpoint's presence.\n     * @returns {respoke.Endpoint} The endpoint whose ID was specified.\n     */\n    that.getEndpoint = function (params) {\n        var endpoint;\n        if (!params || !params.id) {\n            throw new Error(\"Can't get an endpoint without endpoint id.\");\n        }\n\n        endpoints.every(function eachEndpoint(ept) {\n            if (ept.id === params.id) {\n                endpoint = ept;\n                return false;\n            }\n            return true;\n        });\n\n        if (!endpoint && params && !params.skipCreate) {\n            params.instanceId = instanceId;\n            params.signalingChannel = signalingChannel;\n            params.resolveEndpointPresence = clientSettings.resolveEndpointPresence;\n            params.addCall = addCall;\n\n            endpoint = respoke.Endpoint(params);\n            endpoints.push(endpoint);\n        }\n\n        if (!endpoint) {\n            return;\n        }\n\n        if (params.skipPresence !== true) {\n            signalingChannel.registerPresence({\n                endpointList: [endpoint.id]\n            }).done(null, function (err) {\n                log.error(\"Couldn't register for presence on\", endpoint.id, err.message);\n            });\n        }\n        endpoint.listen('presence', params.onPresence);\n        endpoint.listen('message', params.onMessage);\n\n        return endpoint;\n    };\n\n    /**\n     * Find a Connection by id and return it.\n     *\n     *     var connection = client.getConnection({\n     *         id: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\"\n     *     });\n     *\n     * @ignore In most cases, if we don't find it we will create it. This is useful\n     * in the case of dynamic endpoints where groups are not in use. Set skipCreate=true\n     * to return undefined if the Connection is not already known.\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getConnection\n     * @param {object} params\n     * @param {string} params.connectionId\n     * @param {string} [params.endpointId] - An endpointId to use in the creation of this connection.\n     * @param {respoke.Endpoint.onMessage} [params.onMessage] - Handle messages sent to the logged-in user\n     * from this one Connection.\n     * @param {respoke.Endpoint.onPresence} [params.onPresence] - Handle presence notifications from this one\n     * Connection.\n     * @returns {respoke.Connection} The connection whose ID was specified.\n     */\n    that.getConnection = function (params) {\n        var connection;\n        var endpoint;\n        var endpointsToSearch = endpoints;\n\n        params = params || {};\n        if (!params.connectionId) {\n            throw new Error(\"Can't get a connection without connection id.\");\n        }\n        if (!params.endpointId && !params.skipCreate) {\n            throw new Error(\"Can't create a connection without endpoint id.\");\n        }\n\n        if (params.endpointId) {\n            endpoint = that.getEndpoint({\n                id: params.endpointId,\n                skipPresence: true,\n                skipCreate: params.skipCreate\n            });\n\n            endpointsToSearch = [];\n            if (endpoint) {\n                endpointsToSearch = [endpoint];\n            }\n        }\n\n        endpointsToSearch.every(function eachEndpoint(ept) {\n            connection = ept.getConnection(params);\n            return !connection;\n        });\n\n        if (!connection && !params.skipCreate) {\n            params.instanceId = instanceId;\n            connection = respoke.Connection(params);\n            endpoint.connections.push(connection);\n        }\n\n        return connection;\n    };\n\n    /**\n     * Get the list of **all endpoints** that the library has knowledge of.\n     * These are `respoke.Endpoint` objects, not just the endpointIds.\n     *\n     * The library gains knowledge of an endpoint in two ways:\n     * 1. when an endpoint joins a group that the user (currently logged-in endpoint) is a member of (if group presence is enabled)\n     * 2. when an endpoint that the user (currently logged-in endpoint) is watching*\n     *\n     * *If an endpoint that the library does not know about sends a message to the client, you\n     * can immediately call the `client.getEndpoint()` method on the sender of the message to enable\n     * watching of the sender's endpoint.\n     *\n     *      client.on('message', function (data) {\n     *          if (data.endpoint) {\n     *              // start tracking this endpoint.\n     *              client.getEndpoint({ id: data.endpoint.id });\n     *          }\n     *      });\n     *\n     *\n     * @memberof! respoke.Client\n     * @method respoke.Client.getEndpoints\n     * @returns {Array<respoke.Endpoint>}\n     */\n    that.getEndpoints = function () {\n        return endpoints;\n    };\n\n    return that;\n}; // End respoke.Client\n\n/**\n * Handle sending successfully.\n * @callback respoke.Client.successHandler\n */\n/**\n * Handle joining a group successfully. This callback is called only once when Client.join() is called.\n * @callback respoke.Client.joinHandler\n * @param {respoke.Group} group\n */\n/**\n * Receive notification that the client has joined a group. This callback is called everytime\n * respoke.Client#join is fired.\n * @callback respoke.Client.onJoin\n * @param {respoke.Event} evt\n * @param {respoke.Group} evt.group\n * @param {string} evt.name - the event name.\n */\n/**\n * Receive notification that the client has left a group. This callback is called everytime\n * respoke.Client#leave is fired.\n * @callback respoke.Client.onLeave\n * @param {respoke.Event} evt\n * @param {respoke.Group} evt.group\n * @param {string} evt.name - the event name.\n */\n/**\n * Receive notification that a message has been received. This callback is called every time\n * respoke.Client#message is fired.\n * @callback respoke.Client.onClientMessage\n * @param {respoke.Event} evt\n * @param {respoke.TextMessage} evt.message\n * @param {respoke.Group} [evt.group] - If the message is to a group we already know about,\n * this will be set. If null, the developer can use client.join({id: evt.message.header.channel}) to join\n * the group. From that point forward, Group#message will fire when a message is received as well. If\n * group is undefined instead of null, the message is not a group message at all.\n * @param {string} evt.name - the event name.\n * @param {respoke.Client} evt.target\n */\n/**\n * Receive notification that the client is receiving a call from a remote party. This callback is called every\n * time respoke.Client#call is fired.\n * @callback respoke.Client.onCall\n * @param {respoke.Event} evt\n * @param {respoke.Call} evt.call\n * @param {respoke.Endpoint} evt.endpoint\n * @param {string} evt.name - the event name.\n */\n/**\n * Receive notification that the client is receiving a request for a direct connection from a remote party.\n * This callback is called every time respoke.Client#direct-connection is fired.\n * @callback respoke.Client.onDirectConnection\n * @param {respoke.Event} evt\n * @param {respoke.DirectConnection} evt.directConnection\n * @param {respoke.Endpoint} evt.endpoint\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * Receive notification Respoke has successfully connected to the cloud. This callback is called every time\n * respoke.Client#connect is fired.\n * @callback respoke.Client.onConnect\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Client} evt.target\n */\n/**\n * Receive notification Respoke has successfully disconnected from the cloud. This callback is called every time\n * respoke.Client#disconnect is fired.\n * @callback respoke.Client.onDisconnect\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Client} evt.target\n */\n/**\n * Receive notification Respoke has successfully reconnected to the cloud. This callback is called every time\n * respoke.Client#reconnect is fired.\n * @callback respoke.Client.onReconnect\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Client} evt.target\n */\n/**\n * Handle disconnection to the cloud successfully.\n * @callback respoke.Client.disconnectSuccessHandler\n */\n/**\n * Handle an error that resulted from a method call.\n * @callback respoke.Client.errorHandler\n * @params {Error} err\n */\n/**\n * Handle connection to the cloud successfully.\n * @callback respoke.Client.connectSuccessHandler\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/client.js\n ** module id = 9\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar respoke = require('./respoke');\n\n/**\n * A `respoke.Connection` always belongs to an Endpoint.\n *\n * There is a distinction between Endpoint and Connection because an Endpoint can be authenticated\n * from multiple devices, browsers, or browser tabs. Each of these separate authentications is a Connection.\n * A Client can choose to interact with connections of the same endpoint in different ways.\n *\n * @constructor\n * @class respoke.Connection\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.id\n * @returns {respoke.Connection}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Connection\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name client\n     * @type {respoke.Client}\n     * @private\n     */\n    var client = respoke.getClient(instanceId);\n\n    /**\n     * The connection id.\n     * @memberof! respoke.Connection\n     * @name id\n     * @type {string}\n     */\n    that.id = that.id || that.connectionId;\n    if (!that.id) {\n        throw new Error(\"Can't make a connection without an id.\");\n    }\n    delete that.instanceId;\n    delete that.connectionId;\n\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.Connection\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Connection';\n\n    /**\n     * Represents the presence status. Typically a string, but other types are supported.\n     * Defaults to `'unavailable'`.\n     *\n     * **Do not modify this directly** - it won't update presence with Respoke. Presence must be updated\n     * by the remote endpoint.\n     *\n     * @memberof! respoke.Connection\n     * @name presence\n     * @type {string|number|object|Array}\n     */\n    that.presence = 'unavailable';\n\n    /**\n     * Deprecated: use endpoint.presence instead.\n     *\n     * Return the presence.\n     * @memberof! respoke.Connection\n     * @deprecated\n     * @name presence\n     * @type {string|number|object|Array}\n     */\n    that.getPresence = function () {\n        return that.presence;\n    };\n\n    /**\n     * Send a message to this connection of an endpoint. If the endpoint has multiple connections,\n     * it will only receive the message at this connection.\n     *\n     *     connection.sendMessage({\n     *         message: \"PJ, put that PBR down!\"\n     *     });\n     *\n     * **Using callbacks** will disable promises.\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.sendMessage\n     * @param {object} params\n     * @param {string} params.message\n     * @param {boolean} [params.push=false] Whether or not the message should be considered for push notifications to\n     * mobile devices.\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation\n     * of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        params = params || {};\n        params.connectionId = that.id;\n        return that.getEndpoint().sendMessage(params);\n    };\n\n    /**\n     * Create a new screen sharing call. Screenshares are inherently unidirectional video only. This may change\n     * in the future when Chrome adds the ability to obtain screen video and microphone audio at the same time. For\n     * now, if you also need audio, place a second audio only call.\n     *\n     * The endpoint who calls `connection.startScreenShare` will be the one whose screen is shared. If you'd like to\n     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n     * not the sharer, it is recommened that you use `endpoint.sendMessage` to send a control message to the user\n     * whose screenshare is being requested so that user's app can call `connection.startScreenShare`.\n     *\n     * NOTE: At this time, screen sharing only works with Chrome, and Chrome requires a Chrome extension to\n     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension.\n     * Support for additional browsers will be added in the future.\n     *\n     *     connection.startScreenShare({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startScreenShare\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n     * and the remote party has received the video.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @returns {respoke.Call}\n     */\n    that.startScreenShare = function (params) {\n        client.verifyConnected();\n        params.connectionId = that.id;\n        return that.getEndpoint().startScreenShare(params);\n    };\n\n    /**\n     * Create a new Call for a voice and/or video call this particular connection, only. The Call cannot be answered\n     * by another connection of this Endpoint.\n     *\n     *     connection.startCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {RTCConstraints} [params.constraints]\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n     * video attached to it.\n     * @returns {respoke.Call}\n     */\n    that.startCall = function (params) {\n        params = params || {};\n        params.connectionId = that.id;\n        return that.getEndpoint().startCall(params);\n    };\n\n    /**\n     * Create a new audio-only call.\n     *\n     *     connection.startAudioCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startAudioCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @returns {respoke.Call}\n     */\n    that.startAudioCall = function (params) {\n        client.verifyConnected();\n        params.connectionId = that.id;\n        return that.getEndpoint().startAudioCall(params);\n    };\n\n    /**\n     * Create a new call with audio and video.\n     *\n     *     connection.startVideoCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startVideoCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has\n     * been hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @returns {respoke.Call}\n     */\n    that.startVideoCall = function (params) {\n        client.verifyConnected();\n        params.connectionId = that.id;\n        return that.getEndpoint().startVideoCall(params);\n    };\n\n    /**\n     * Create a new DirectConnection with this particular connection, only. The DirectConnection cannot be answered\n     * by another connection of this Endpoint.  This method creates a new Call as well, attaching this\n     * DirectConnection to it for the purposes of creating a peer-to-peer link for sending data such as messages to\n     * the other endpoint. Information sent through a DirectConnection is not handled by the cloud infrastructure.\n     *\n     *     connection.startDirectConnection({\n     *         onOpen: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.startDirectConnection\n     * @param {object} params\n     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess] - Success handler for this\n     * invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {respoke.DirectConnection.onStart} [params.onStart] - A callback for when setup of the direct\n     * connection begins. The direct connection will not be open yet.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - A callback for receiving notification of when\n     * the DirectConnection is open and ready to be used.\n     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n     * connection.\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - A callback for receiving notification of\n     * when the DirectConnection is closed and the two Endpoints are disconnected.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - A callback for receiving messages sent\n     * through the DirectConnection.\n     * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the\n     * request for a direct connection and setup begins.\n     * @returns {respoke.DirectConnection} The DirectConnection which can be used to send data and messages\n     * directly to the other endpoint.\n     */\n    that.startDirectConnection = function (params) {\n        var retVal;\n        var deferred;\n        params = params || {};\n\n        try {\n            client.verifyConnected();\n        } catch (err) {\n            deferred = respoke.Q.defer();\n            retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n            deferred.reject(err);\n            return retVal;\n        }\n\n        params.connectionId = that.id;\n        return that.getEndpoint().startDirectConnection(params);\n    };\n\n    /**\n     * Get the Endpoint that this Connection belongs to.\n     * @memberof! respoke.Connection\n     * @method respoke.Connection.getEndpoint\n     * @returns {respoke.Endpoint}\n     */\n    that.getEndpoint = function () {\n        return client.getEndpoint({\n            id: that.endpointId,\n            skipPresence: true\n        });\n    };\n\n    return that;\n}; // End respoke.Connection\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/connection.js\n ** module id = 10\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\nvar log = respoke.log;\n\n/**\n * `respoke.Endpoint`s are users of a Respoke app.\n * An Endpoint can be a person in a browser or device, or an app using Respoke APIs from a server.\n * A Client can interact with endpoints through messages, audio or video calls, or direct connections.\n * An Endpoint may be authenticated from multiple devices to the same app (each of which is\n * represented by a Connection).\n *\n * ```\n * var jim = client.getEndpoint({ id: 'jim' });\n * ```\n *\n * @constructor\n * @class respoke.Endpoint\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.id\n * @param {string} params.instanceId\n * @param {respoke.client.resolvePresence} [params.resolvePresence] An optional function for resolving presence\n * for an endpoint.\n * @returns {respoke.Endpoint}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Endpoint\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name client\n     * @type {respoke.Client}\n     * @private\n     */\n    var client = respoke.getClient(instanceId);\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name signalingChannel\n     * @type {respoke.SignalingChannel}\n     * @private\n     */\n    var signalingChannel = params.signalingChannel;\n\n    var addCall = params.addCall;\n\n    delete that.signalingChannel;\n    delete that.instanceId;\n    delete that.connectionId;\n    delete that.addCall;\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.Endpoint\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Endpoint';\n    /**\n     * A direct connection to this endpoint. This can be used to send direct messages.\n     * @memberof! respoke.Endpoint\n     * @name directConnection\n     * @type {respoke.DirectConnection}\n     */\n    that.directConnection = null;\n\n    /**\n     * Array of connections for this endpoint.\n     * @memberof! respoke.Endpoint\n     * @name connections\n     * @type {Array<respoke.Connection>}\n     */\n    that.connections = [];\n    client.listen('disconnect', function disconnectHandler() {\n        that.connections = [];\n    });\n\n    var resolveEndpointPresence = params.resolveEndpointPresence;\n    delete that.resolveEndpointPresence;\n\n    /**\n     * Represents the presence status. Typically a string, but other types are supported.\n     * Defaults to `'unavailable'`.\n     *\n     * **Do not modify this directly** - it won't update presence with Respoke. Presence must be updated\n     * by the remote endpoint.\n     *\n     * @memberof! respoke.Endpoint\n     * @name presence\n     * @type {string|number|object|Array}\n     */\n    that.presence = 'unavailable';\n\n    /**\n     * Deprecated: use endpoint.presence instead.\n     *\n     * Return the presence.\n     * @memberof! respoke.Endpoint\n     * @deprecated\n     * @name presence\n     * @type {string|number|object|Array}\n     */\n    that.getPresence = function () {\n        return that.presence;\n    };\n\n    /**\n     * Internally set the presence on the object for this session upon receipt of a presence notification from\n     * the backend. Respoke developers shouldn't use this.\n     *\n     * ```\n     * client.setPresence({ presence: 'busy' });\n     * ```\n     *\n     * While technically available on an Endpoint or Connection, this will not trigger\n     * any API changes. The changes will only be reflected locally.\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.setPresence\n     * @param {object} params\n     * @param {string|number|object|Array} [params.presence=available]\n     * @param {string} params.connectionId\n     * @fires respoke.Endpoint#presence\n     * @private\n     */\n    that.setPresence = function (params) {\n        var connection;\n        params = params || {};\n        params.presence = params.presence || 'available';\n        params.connectionId = params.connectionId || that.connectionId;\n\n        if (!params.connectionId) {\n            throw new Error(\"Can't set Endpoint presence without a connectionId.\");\n        }\n\n        connection = that.getConnection({connectionId: params.connectionId}) || client.getConnection({\n            connectionId: params.connectionId,\n            skipCreate: false,\n            endpointId: that.id\n        });\n\n        connection.presence = params.presence;\n        that.resolvePresence();\n\n        /**\n         * This event indicates that the presence for this endpoint has been updated.\n         * @event respoke.Endpoint#presence\n         * @type {respoke.Event}\n         * @property {string|number|object|Array} presence\n         * @property {string} name - the event name.\n         * @property {respoke.Endpoint} target\n         */\n        that.fire('presence', {\n            presence: that.presence\n        });\n    };\n\n    /**\n     * Send a message to the endpoint through the infrastructure.\n     *\n     * ```\n     * endpoint.sendMessage({\n     *     message: \"wassuuuuup\"\n     * });\n     * ```\n     *\n     * **Using callbacks** will disable promises.\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.sendMessage\n     * @param {object} params\n     * @param {string} params.message\n     * @param {string} [params.connectionId]\n     * @param {boolean} [params.push=false] Whether or not to consider the message for push notifications to mobile\n     * devices.\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of this\n     * method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this method\n     * only.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        var promise;\n        var retVal;\n        params = params || {};\n\n        promise = signalingChannel.sendMessage({\n            connectionId: params.connectionId,\n            message: params.message,\n            push: !!params.push,\n            recipient: that\n        });\n\n        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n        return retVal;\n    };\n\n    /**\n     * Create a new audio-only call.\n     *\n     *     endpoint.startAudioCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startAudioCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @returns {respoke.Call}\n     */\n    that.startAudioCall = function (params) {\n        params = params || {};\n\n        params.constraints = respoke.convertConstraints(params.constraints, [{\n            video: false,\n            audio: true,\n            optional: [],\n            mandatory: {}\n        }]);\n\n        return that.startCall(params);\n    };\n\n    /**\n     * Create a new call with audio and video.\n     *\n     *     endpoint.startVideoCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startVideoCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @returns {respoke.Call}\n     */\n    that.startVideoCall = function (params) {\n        params = params || {};\n\n        params.constraints = respoke.convertConstraints(params.constraints, [{\n            video: true,\n            audio: true,\n            optional: [],\n            mandatory: {}\n        }]);\n\n        return that.startCall(params);\n    };\n\n    /**\n     * Create a new screen sharing call. Screenshares are inherently unidirectional video only. This may change\n     * in the future when Chrome adds the ability to obtain screen video and microphone audio at the same time. For\n     * now, if you also need audio, place a second audio only call.\n     *\n     * The endpoint who calls `endpoint.startScreenShare` will be the one whose screen is shared. If you'd like to\n     * implement this as a screenshare request in which the endpoint who starts the call is the watcher and\n     * not the sharer, it is recommened that you use `endpoint.sendMessage` to send a control message to the user\n     * whose screenshare is being requested so that user's app can call `endpoint.startScreenShare`.\n     *\n     * NOTE: At this time, screen sharing only works with Chrome, and Chrome requires a Chrome extension to\n     * access screen sharing features. Please see instructions at https://github.com/respoke/respoke-chrome-extension.\n     * Support for additional browsers will be added in the future.\n     *\n     *     endpoint.startScreenShare({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startScreenShare\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n     * and the remote party has received the video.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {string} [params.source] - Pass in what type of mediaSource you want. If omitted, you'll have access\n     * to both the screen and windows. In firefox, you'll have access to the screen only.\n     * @returns {respoke.Call}\n     */\n    that.startScreenShare = function (params) {\n        params = params || {};\n        params.target = 'screenshare';\n\n        if (typeof params.caller !== 'boolean') {\n            params.caller = true;\n        }\n\n        if (params.caller) {\n            params.constraints = respoke.getScreenShareConstraints(params);\n            params.sendOnly = true;\n        } else {\n            params.receiveOnly = true;\n        }\n\n        return that.startCall(params);\n    };\n\n    /**\n     * Create a new call.\n     *\n     *     endpoint.startCall({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startCall\n     * @param {object} params\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for receiving an HTML5 Video\n     * element with the remote\n     * audio and/or video attached.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {Array<RTCConstraints>} [params.constraints]\n     * @param {boolean} [params.receiveOnly] - whether or not we accept media\n     * @param {boolean} [params.sendOnly] - whether or not we send media\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint, if it is not desired to call\n     * all connections belonging to this endpoint.\n     * @param {HTMLVideoElement} [params.videoLocalElement] - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} [params.videoRemoteElement] - Pass in an optional html video element to have remote\n     * video attached to it.\n     * @returns {respoke.Call}\n     */\n    that.startCall = function (params) {\n        var call = null;\n        params = params || {};\n\n        params.constraints = respoke.convertConstraints(params.constraints, [{\n            video: true,\n            audio: true,\n            mandatory: {},\n            optional: []\n        }]);\n\n        // If they are requesting a screen share by constraints without having called startScreenShare\n        if (params.target !== 'screenshare' && params.constraints[0] &&\n                respoke.constraintsHasScreenShare(params.constraints[0])) {\n            return that.startScreenShare(params);\n        }\n\n        params.target = params.target || \"call\";\n\n        log.debug('Endpoint.call', params);\n        client.verifyConnected();\n        if (typeof params.caller !== 'boolean') {\n            params.caller = true;\n        }\n\n        if (!that.id) {\n            log.error(\"Can't start a call without endpoint ID!\");\n            return;\n        }\n\n        params.instanceId = instanceId;\n        params.remoteEndpoint = that;\n\n        params.signalOffer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'offer';\n            signalParams.target = params.target;\n            signalParams.recipient = that;\n\n            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n        };\n        params.signalAnswer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'answer';\n            signalParams.target = params.target;\n            signalParams.recipient = that;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n                signalParams.call.hangup({signal: false});\n            });\n        };\n        params.signalConnected = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.connectionId = signalParams.call.connectionId;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalParams.recipient = that;\n            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n                signalParams.call.hangup();\n            });\n        };\n        params.signalModify = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.recipient = that;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalingChannel.sendModify(signalParams).done();\n        };\n        params.signalCandidate = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.recipient = that;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalingChannel.sendCandidate(signalParams).done();\n        };\n        params.signalHangup = function (signalParams) {\n            signalParams.target = params.target;\n            signalParams.recipient = that;\n            signalParams.sessionId = signalParams.call.sessionId;\n            signalingChannel.sendHangup(signalParams).done();\n        };\n        params.signalReport = function (signalParams) {\n            log.debug(\"Sending debug report\", signalParams.report);\n            signalingChannel.sendReport(signalParams).done();\n        };\n\n        params.signalingChannel = signalingChannel;\n        call = respoke.Call(params);\n        addCall({call: call});\n        return call;\n    };\n\n    /**\n     * Create a new DirectConnection.  This method creates a new Call as well, attaching this DirectConnection to\n     * it for the purposes of creating a peer-to-peer link for sending data such as messages to the other endpoint.\n     * Information sent through a DirectConnection is not handled by the cloud infrastructure.  If there is already\n     * a direct connection open, this method will resolve the promise with that direct connection instead of\n     * attempting to create a new one.\n     *\n     *     endpoint.startDirectConnection({\n     *         onOpen: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.startDirectConnection\n     * @param {object} params\n     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess] - Success handler for this\n     * invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @param {respoke.DirectConnection.onStart} [params.onStart] - A callback for when setup of the direct\n     * connection begins. The direct connection will not be open yet.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - A callback for receiving notification of when\n     * the DirectConnection is open and ready to be used.\n     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n     * connection.\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - A callback for receiving notification of\n     * when the DirectConnection is closed and the two Endpoints are disconnected.\n     * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the\n     * request for a direct connection and setup begins.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - A callback for receiving messages sent\n     * through the DirectConnection.\n     * @param {string} [params.connectionId] - An optional connection ID to use for this connection. This allows\n     * the connection to be made to a specific instance of an endpoint in the case that the same endpoint is logged\n     * in from multiple locations.\n     * @returns {Promise<respoke.DirectConnection>} The DirectConnection which can be used to send data and messages\n     * directly to the other endpoint.\n     */\n    that.startDirectConnection = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n        var call;\n\n        try {\n            client.verifyConnected();\n        } catch (err) {\n            deferred.reject(err);\n            return retVal;\n        }\n\n        if (that.directConnection || params.create === false) {\n            deferred.resolve(that.directConnection);\n            return retVal;\n        }\n\n        if (typeof params.caller !== 'boolean') {\n            params.caller = true;\n        }\n\n        if (!that.id) {\n            deferred.reject(new Error(\"Can't start a direct connection without endpoint ID!\"));\n            return retVal;\n        }\n\n        params.instanceId = instanceId;\n        params.remoteEndpoint = that;\n\n        params.signalOffer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.signalType = 'offer';\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n\n            signalingChannel.sendSDP(signalParams).done(onSuccess, onError);\n        };\n        params.signalConnected = function (signalParams) {\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n            signalingChannel.sendConnected(signalParams).done(null, function errorHandler(err) {\n                signalParams.call.hangup();\n            });\n        };\n        params.signalAnswer = function (signalParams) {\n            var onSuccess = signalParams.onSuccess;\n            var onError = signalParams.onError;\n            delete signalParams.onSuccess;\n            delete signalParams.onError;\n\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n            signalParams.signalType = 'answer';\n            signalingChannel.sendSDP(signalParams).then(onSuccess, onError).done(null, function errorHandler(err) {\n                signalParams.call.hangup({signal: false});\n            });\n        };\n        params.signalCandidate = function (signalParams) {\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n            signalingChannel.sendCandidate(signalParams).done();\n        };\n        params.signalHangup = function (signalParams) {\n            signalParams.target = 'directConnection';\n            signalParams.recipient = that;\n            signalingChannel.sendHangup(signalParams).done();\n        };\n        params.signalReport = function (signalParams) {\n            signalParams.report.target = 'directConnection';\n            log.debug(\"Not sending report\");\n            log.debug(signalParams.report);\n        };\n        params.needDirectConnection = true;\n        // Don't include audio in the offer SDP\n        params.offerOptions = {\n            mandatory: {\n                OfferToReceiveAudio: false\n            }\n        };\n\n        params.signalingChannel = signalingChannel;\n        call = respoke.Call(params);\n        addCall({call: call});\n        call.listen('direct-connection', function directConnectionHandler(evt) {\n            that.directConnection = evt.directConnection;\n            if (params.caller !== true) {\n                if (!client.hasListeners('direct-connection') &&\n                        !client.hasListeners('direct-connection') &&\n                        !call.hasListeners('direct-connection')) {\n                    that.directConnection.reject();\n                    deferred.reject(new Error(\"Got an incoming direct connection with no handlers to accept it!\"));\n                    return;\n                }\n\n                deferred.resolve(that.directConnection);\n                that.directConnection.listen('close', function closeHandler(evt) {\n                    that.directConnection = undefined;\n                }, true);\n            }\n        }, true);\n\n        return retVal;\n    };\n\n    /**\n     * Find the presence out of all known connections with the highest priority (most availability)\n     * and set it as the endpoint's resolved presence.\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.resolvePresence\n     * @private\n     */\n    that.resolvePresence = function () {\n\n        var presenceList = that.connections.map(function (connection) {\n            return connection.presence;\n        });\n\n        if (resolveEndpointPresence !== undefined) {\n            that.presence = resolveEndpointPresence(presenceList);\n        } else {\n            var options = ['chat', 'available', 'away', 'dnd', 'xa', 'unavailable'];\n            var idList;\n\n            /*!\n             * Sort the connections array by the priority of the value of the presence of that\n             * connectionId. This will cause the first element in the list to be the id of the\n             * session with the highest priority presence so we can access it by the 0 index.\n             * TODO: If we don't really care about the sorting and only about the highest priority\n             * we could use Array.prototype.every to improve this algorithm.\n             */\n            idList = that.connections.sort(function sorter(a, b) {\n                var indexA = options.indexOf(a.presence);\n                var indexB = options.indexOf(b.presence);\n                // Move it to the end of the list if it isn't one of our accepted presence values\n                indexA = indexA === -1 ? 1000 : indexA;\n                indexB = indexB === -1 ? 1000 : indexB;\n                return indexA < indexB ? -1 : (indexB < indexA ? 1 : 0);\n            });\n\n            if (idList[0]) {\n                that.presence = idList[0].presence;\n            } else {\n                that.presence = 'unavailable';\n            }\n        }\n    };\n\n    /**\n     * Get the Connection with the specified id. The connection ID is optional if only one connection exists.\n     *\n     *     var connection = endpoint.getConnection({\n     *         connectionId: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX\"\n     *     });\n     *\n     * @memberof! respoke.Endpoint\n     * @method respoke.Endpoint.getConnection\n     * @private\n     * @param {object} params\n     * @param {string} [params.connectionId]\n     * @return {respoke.Connection}\n     */\n    that.getConnection = function (params) {\n        var connection = null;\n        params = params || {};\n        if (that.connections.length === 1 &&\n                (!params.connectionId || that.connections[0] === params.connectionId)) {\n            return that.connections[0];\n        }\n\n        if (!params || !params.connectionId) {\n            throw new Error(\"Can't find a connection without the connectionId.\");\n        }\n\n        that.connections.every(function eachConnection(conn) {\n            if (conn.id === params.connectionId) {\n                connection = conn;\n                return false;\n            }\n            return true;\n        });\n\n        return connection;\n    };\n\n    return that;\n}; // End respoke.Endpoint\n/**\n * Handle messages sent to the logged-in user from this one Endpoint.  This callback is called every time\n * respoke.Endpoint#message fires.\n * @callback respoke.Endpoint.onMessage\n * @param {respoke.Event} evt\n * @param {respoke.TextMessage} evt.message - the message\n * @param {respoke.Endpoint} evt.target\n * @param {string} evt.name - the event name\n */\n/**\n * Handle presence notifications from this one Endpoint.  This callback is called every time\n * respoke.Endpoint#message fires.\n * @callback respoke.Endpoint.onPresence\n * @param {respoke.Event} evt\n * @param {string|number|object|Array} evt.presence - the Endpoint's presence\n * @param {respoke.Endpoint} evt.target\n * @param {string} evt.name - the event name\n */\n /**\n * Handle resolving presence for this endpoint\n * @callback respoke.Client.resolveEndpointPresence\n * @param {Array<object>} connectionPresence\n * @returns {object|string|number}\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/endpoint.js\n ** module id = 11\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\n/**\n * A text message and the information needed to route it.\n * @class respoke.TextMessage\n * @constructor\n * @param {object} params\n * @param {string} [params.endpointId] - If sending, endpoint ID of the thing we're sending a message to.\n * @param {string} [params.connectionId] - If sending, connection ID of the thing we're sending a message to.\n * @param {string} [params.message] - If sending, a message to send\n * @param {object} [params.rawMessage] - If receiving, the parsed JSON we got from the server\n * @private\n * @returns {respoke.TextMessage}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = {};\n\n    /**\n     * Parse rawMessage and set attributes required for message delivery.\n     * @memberof! respoke.TextMessage\n     * @method respoke.TextMessage.parse\n     * @private\n     */\n    function parse() {\n        if (params.rawMessage) {\n            try {\n                that.endpointId = params.rawMessage.header.from;\n                that.connectionId = params.rawMessage.header.fromConnection;\n                that.timestamp = params.rawMessage.header.timestamp;\n            } catch (e) {\n                throw new Error(e);\n            }\n            that.message = params.rawMessage.message || params.rawMessage.body;\n            if (params.rawMessage.header.channel) {\n                that.recipient = params.rawMessage.header.channel;\n            }\n        } else {\n            try {\n                that.to = params.endpointId;\n                that.toConnection = params.connectionId;\n                that.requestConnectionReply = (params.requestConnectionReply === true);\n                that.push = (params.push === true);\n            } catch (e) {\n                throw new Error(e);\n            }\n            that.message = params.message;\n        }\n    }\n\n    parse();\n    return that;\n}; // End respoke.TextMessage\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/textMessage.js\n ** module id = 12\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\n\n/**\n * A `respoke.Group` represents a collection of endpoints.\n *\n * There are methods to communicate with the endpoints at the group level and track\n * their presence in the group.\n *\n * @class respoke.Group\n * @augments respoke.EventEmitter\n * @constructor\n * @param {object} params\n * @param {string} params.instanceId\n * @param {respoke.Group.onJoin} params.onJoin - A callback to receive notifications every time a new\n * endpoint has joined the group. This callback does not get called when the client joins the group.\n * @param {respoke.Group.onMessage} params.onMessage - A callback to receive messages sent to the group from\n * remote endpoints.\n * @param {respoke.Group.onLeave} params.onLeave - A callback to receive notifications every time a new\n * endpoint has left the group. This callback does not get called when the client leaves the group.\n * @returns {respoke.Group}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n\n    var that = respoke.EventEmitter(params);\n    /**\n     * @memberof! respoke.Group\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var client = respoke.getClient(instanceId);\n\n    if (!that.id) {\n        throw new Error(\"Can't create a group without an ID.\");\n    }\n\n    /**\n     * Indicates whether there have been group membership changes since the last time we performed\n     * a network request to list group members.\n     * @memberof! respoke.Group\n     * @name cacheIsValid\n     * @private\n     * @type {boolean}\n     */\n    var cacheIsValid = false;\n\n    /**\n     * Internal reference to the api signaling channel.\n     * @memberof! respoke.Group\n     * @name signalingChannel\n     * @type respoke.SignalingChannel\n     * @private\n     */\n    var signalingChannel = params.signalingChannel;\n    delete params.signalingChannel;\n\n    /**\n     * The connections to members of this group.\n     * @memberof! respoke.Group\n     * @name endpoints\n     * @type {array<respoke.Connection>}\n     */\n    that.connections = [];\n    /**\n     * A name to identify the type of this object.\n     * @memberof! respoke.Group\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Group';\n    that.listen('join', params.onJoin);\n    /**\n     * Indicates that a message has been sent to this group.\n     * @event respoke.Group#message\n     * @type {respoke.Event}\n     * @property {respoke.TextMessage} message\n     * @property {string} name - The event name.\n     * @property {respoke.Group} target\n     */\n    that.listen('message', params.onMessage);\n    that.listen('leave', params.onLeave);\n    client.listen('disconnect', function disconnectHandler() {\n        cacheIsValid = false;\n        that.connections = [];\n    }, true);\n\n    delete that.instanceId;\n    delete that.onMessage;\n    delete that.onPresence;\n    delete that.onJoin;\n    delete that.onLeave;\n\n    /**\n     * Join this group.\n     *\n     *     group.join().done(function () {\n     *         group.sendMessage({\n     *             message: \"Hey, ppl! I'm here!\"\n     *         });\n     *     }, function (err) {\n     *         // Couldn't join the group, possibly permissions error\n     *     });\n     *\n     * **Using callbacks** will disable promises.\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.join\n     * @return {Promise|undefined}\n     * @param {object} params\n     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @fires respoke.Client#join\n     */\n    that.join = function () {\n        var params = {\n            id: that.id\n        };\n        var promise;\n        var deferred;\n        var retVal;\n        cacheIsValid = false;\n\n        try {\n            validateConnection();\n        } catch (err) {\n            deferred = Q.defer();\n            retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n            deferred.reject(err);\n            return retVal;\n        }\n\n        promise = client.join(params);\n        retVal = respoke.handlePromise(promise, params.onSuccess, params.onError);\n        return retVal;\n    };\n\n    /**\n     * Leave this group. If this method is called multiple times synchronously, it will batch requests and\n     * only make one API call to Respoke.\n     *\n     *     group.leave({\n     *         onSuccess: function () {\n     *             // good riddance\n     *         },\n     *         onError: function (err) {\n     *             // Couldn't leave the group, possibly a permissions error\n     *         }\n     *     });\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.leave\n     * @param {object} params\n     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @return {Promise|undefined}\n     * @fires respoke.Client#leave\n     */\n    that.leave = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n        try {\n            validateConnection();\n            validateMembership();\n        } catch (err) {\n            deferred.reject(err);\n            return retVal;\n        }\n\n        signalingChannel.leaveGroup({\n            groupList: [that.id]\n        }).done(function successHandler() {\n            that.connections = [];\n            deferred.resolve();\n            cacheIsValid = false;\n\n            /**\n             * This event is fired when the client leaves a group.\n             * @event respoke.Client#leave\n             * @type {respoke.Event}\n             * @property {respoke.Group} group\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             * @private\n             */\n            client.fire('leave', {\n                group: that\n            });\n        }, function errorHandler(err) {\n            deferred.reject();\n        });\n        return retVal;\n    };\n\n    /**\n     * Remove a Connection from a Group. This does not change the status of the remote Endpoint, it only changes the\n     * internal representation of the Group membership. This method should only be used internally.\n     * @private\n     * @memberof! respoke.Group\n     * @method respoke.Group.removeMember\n     * @param {object} params\n     * @param {string} [params.connectionId] - Endpoint's connection id\n     * @fires respoke.Group#leave\n     */\n    that.removeMember = function (params) {\n        params = params || {};\n\n        try {\n            validateConnection();\n            validateMembership();\n        } catch (err) {\n            return;\n        }\n\n        if (!params.connectionId) {\n            throw new Error(\"Can't remove a member to the group without it's Connection id.\");\n        }\n\n        cacheIsValid = false;\n\n        that.connections.every(function eachConnection(conn, index) {\n            if (conn.id === params.connectionId) {\n                that.connections.splice(index, 1);\n\n                /**\n                 * This event is fired when a member leaves a group the client is a member of.\n                 * @event respoke.Group#leave\n                 * @type {respoke.Event}\n                 * @property {respoke.Connection} connection - The connection that left the group.\n                 * @property {string} name - The event name.\n                 * @property {respoke.Group} target\n                 */\n                that.fire('leave', {\n                    connection: conn\n                });\n                return false;\n            }\n            return true;\n        });\n    };\n\n    /**\n     * Return true if the logged-in user is a member of this group and false if not.\n     *\n     *     if (group.isJoined()) {\n     *         // I'm a member!\n     *     } else {\n     *         // Maybe join here\n     *     }\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.isJoined\n     * @returns {boolean}\n     */\n    that.isJoined = function () {\n        // connections array contains some connections and ours is among them.\n        return (that.connections.length > 0 && !that.connections.every(function (conn) {\n            return conn.id !== client.connectionId;\n        }));\n    };\n\n    /**\n     * Add a Connection to a group. This does not change the status of the remote Endpoint, it only changes the\n     * internal representation of the Group membership. This method should only be used internally.\n     * @memberof! respoke.Group\n     * @private\n     * @method respoke.Group.addMember\n     * @param {object} params\n     * @param {respoke.Connection} params.connection\n     * @fires respoke.Group#join\n     */\n    that.addMember = function (params) {\n        params = params || {};\n        var absent;\n\n        validateConnection();\n\n        if (!params.connection) {\n            throw new Error(\"Can't add a member to the group without it's Connection object.\");\n        }\n\n        cacheIsValid = false;\n\n        absent = that.connections.every(function eachConnection(conn) {\n            return (conn.id !== params.connection.id);\n        });\n\n        if (absent) {\n            that.connections.push(params.connection);\n            if (params.skipEvent) {\n                return;\n            }\n\n            /**\n             * This event is fired when a member joins a Group that the currently logged-in endpoint is a member\n             * of.\n             * @event respoke.Group#join\n             * @type {respoke.Event}\n             * @property {respoke.Connection} connection - The connection that joined the group.\n             * @property {string} name - The event name.\n             * @property {respoke.Group} target\n             */\n            that.fire('join', {\n                connection: params.connection\n            });\n        }\n    };\n\n    /**\n     * Validate that the client is connected to the Respoke infrastructure.\n     * @memberof! respoke.Group\n     * @method respoke.Group.validateConnection\n     * @private\n     */\n    function validateConnection() {\n        if (!signalingChannel || !signalingChannel.isConnected()) {\n            throw new Error(\"Can't complete request when not connected. Please reconnect!\");\n        }\n    }\n\n    /**\n     * Validate that the client is a member of this group.\n     * @memberof! respoke.Group\n     * @method respoke.Group.validateMembership\n     * @private\n     */\n    function validateMembership() {\n        if (!that.isJoined()) {\n            throw new Error(\"Not a member of this group anymore.\");\n        }\n    }\n\n    /**\n     *\n     * Send a message to all of the endpoints in the group.\n     *\n     *      var group = client.getGroup({ id: 'js-enthusiasts'});\n     *\n     *      group.sendMessage({\n     *          message: \"Cat on keyboard\",\n     *          onSuccess: function (evt) {\n     *              console.log('Message was sent');\n     *          }\n     *      });\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.sendMessage\n     * @param {object} params\n     * @param {string} params.message - The message.\n     * @param {boolean} [params.push=false] - Whether or not the message should be considered for push notifications to\n     * mobile devices.\n     * @param {function} params.onSuccess - Success handler indicating that the message was delivered.\n     * @param {function} params.onError - Error handler indicating that the message was not delivered.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        params = params || {};\n        params.id = that.id;\n        var promise;\n\n        try {\n            validateConnection();\n            validateMembership();\n        } catch (err) {\n            promise = Q.reject(err);\n        }\n\n        return respoke.handlePromise(promise ? promise : signalingChannel.publish(params),\n                params.onSuccess, params.onError);\n    };\n\n    /**\n     * Get group members\n     *\n     * Get an array containing all connections subscribed to the group. Accepts onSuccess or onError parameters,\n     * or it returns a promise that you can observe. An endpoint may have more than one connection subscribed to\n\t * a group, so if you're interested in unique endpoints, you may want to filter the connections by endpointId.\n     *\n     *     group.getMembers({\n     *         onSuccess: function (connections) {\n     *             connections.forEach(function (connection) {\n     *                 console.log(connection.endpoint.id);\n     *             });\n     *         }\n     *     });\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.getMembers\n     * @param {object} params\n     * @param {respoke.Client.joinHandler} [params.onSuccess] - Success handler for this invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Success handler for this invocation of this method only.\n     * @returns {Promise<Array>} A promise to an array of Connections.\n     */\n    that.getMembers = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n        try {\n            validateConnection();\n            validateMembership();\n        } catch (err) {\n            deferred.reject(err);\n            return retVal;\n        }\n\n        if (that.connections.length > 0 && cacheIsValid) {\n            deferred.resolve(that.connections);\n            return retVal;\n        }\n\n        signalingChannel.getGroupMembers({\n            id: that.id\n        }).done(function successHandler(list) {\n            var endpointList = [];\n            list.forEach(function eachMember(params) {\n                var connection = client.getConnection({\n                    endpointId: params.endpointId,\n                    connectionId: params.connectionId,\n                    skipCreate: true\n                });\n\n                if (!connection) {\n                    // Create the connection\n                    connection = client.getConnection({\n                        endpointId: params.endpointId,\n                        connectionId: params.connectionId\n                    });\n                }\n\n                if (endpointList.indexOf(params.endpointId) === -1) {\n                    endpointList.push(params.endpointId);\n                }\n                that.addMember({\n                    connection: connection,\n                    skipEvent: true\n                });\n            });\n\n            cacheIsValid = true;\n\n            deferred.resolve(that.connections);\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return retVal;\n    };\n\n    /**\n     * Experimental. Create a new conference call. The ID will be the group name. Only members of this group will\n     * be permitted to participate in the conference call.\n     *\n     *     group.joinConference({\n     *         onConnect: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.Group\n     * @method respoke.Group.joinConference\n     * @private\n     * @param {object} params\n     * @param {string|boolean} params.audio - Whether participant should send and receive audio. Boolean `true`\n     * indicates send and receive. Boolean `false` indicates neither send nor receive. Strings `send` and `receive`\n     * indicate send only and receive only respectively.\n     * @param {string|boolean} params.video - Whether participant should send and receive audio. Boolean `true`\n     * indicates send and receive. Boolean `false` indicates neither send nor receive. Strings `send` and `receive`\n     * indicate send only and receive only respectively.\n     * @param {boolean} params.mixAudio - Whether Respoke should mix all the audio streams together to save bandwidth\n     * for this one participant.\n     * @arg {respoke.Conference.onJoin} [params.onJoin] - Callback for when a participant joins the conference.\n     * @arg {respoke.Conference.onLeave} [params.onLeave] - Callback for when a participant leaves the conference.\n     * @arg {respoke.Conference.onMessage} [params.onMessage] - Callback for when a message is sent to the conference.\n     * @param {respoke.Conference.onMute} [params.onMute] - Callback for when local or remote media is muted or unmuted.\n     * @arg {respoke.Conference.onTopic} [params.onTopic] - Callback for the conference topic changes.\n     * @arg {respoke.Conference.onPresenter} [params.onPresenter] - Callback for when the presenter changes.\n     * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n     * media renegotiation.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for when the screenshare is connected\n     * and the remote party has received the video.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for being notified when the call has been\n     * hung up.\n     * @param {respoke.Call.onAllow} [params.onAllow] - When setting up a call, receive notification that the\n     * browser has granted access to media.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for receiving statistical\n     * information.\n     * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n     * relay servers. If it cannot flow through relay servers, the call will fail.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @returns {respoke.Conference}\n     */\n    that.joinConference = function (params) {\n        var conference = null;\n        params = params || {};\n        params.id = that.id;\n\n        conference = client.joinConference(params);\n        return conference;\n    };\n\n    return that;\n}; // End respoke.Group\n/**\n * Receive notification that an endpoint has joined this group. This callback is called everytime\n * respoke.Group#join is fired.\n * @callback respoke.Group.onJoin\n * @param {respoke.Event} evt\n * @param {respoke.Connection} evt.connection\n * @param {string} evt.name - the event name.\n * @param {respoke.Group} evt.target\n */\n/**\n * Receive notification that an endpoint has left this group. This callback is called everytime\n * respoke.Group#leave is fired.\n * @callback respoke.Group.onLeave\n * @param {respoke.Event} evt\n * @param {respoke.Connection} evt.connection\n * @param {string} evt.name - the event name.\n * @param {respoke.Group} evt.target\n */\n/**\n * Receive notification that a message has been received to a group. This callback is called every time\n * respoke.Group#message is fired.\n * @callback respoke.Group.onMessage\n * @param {respoke.Event} evt\n * @param {respoke.TextMessage} evt.message\n * @param {string} evt.name - the event name.\n * @param {respoke.Group} evt.target\n */\n/**\n * Get a list of the Connections which are members of this Group.\n * @callback respoke.Group.connectionsHandler\n * @param {Array<respoke.Connection>} connections\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/group.js\n ** module id = 13\n ** module chunks = 0\n **/","'use strict';\n/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar Q = require('q');\nvar io = require('socket.io-client');\nvar respoke = require('./respoke');\nvar log = respoke.log;\n\n/**\n * Returns a timestamp, measured in milliseconds.\n *\n * This method will use high resolution time, if available. Otherwise it falls back to just\n * using the wall clock.\n *\n * @return {number} Number of milliseconds that have passed since some point in the past.\n * @private\n */\nvar now;\nif (window.performance && window.performance.now) {\n    now = window.performance.now.bind(window.performance);\n} else if (Date.now) {\n    now = Date.now.bind(Date);\n} else {\n    now = function () {\n        return new Date().getTime();\n    };\n}\n\n/**\n * Container for holding requests that are currently waiting on responses.\n * @returns {PendingRequests}\n * @private\n * @constructor\n */\nvar PendingRequests = function () {\n    /**\n     * Pending requests.\n     * @private\n     * @type {Array}\n     */\n    var contents = [];\n    /**\n     * Counter to provide the next id.\n     * @private\n     * @type {number}\n     */\n    var counter = 0;\n    var that = {};\n\n    /**\n     * Add a new pending request.\n     *\n     * @memberof PendingRequests\n     * @param obj\n     * @returns {*} The key to use for the `remove` method.\n     */\n    that.add = function (obj) {\n        contents[counter] = obj;\n        counter++;\n        return counter;\n    };\n\n    /**\n     * Remove a pending request.\n     *\n     * @param {*} key Key returned from `add` method.\n     */\n    that.remove = function (key) {\n        delete contents[key];\n    };\n\n    /**\n     * Disposes of any currently pending requests, synchronously invoking the provided function on\n     * each.\n     *\n     * @param {function} [fn] Callback for pending requests.\n     */\n    that.reset = function (fn) {\n        if (fn) {\n            contents.forEach(fn);\n        }\n        contents = [];\n    };\n\n    return that;\n};\n\n/**\n * The purpose of this class is to make a method call for each API call\n * to the backend REST interface.  This class takes care of App authentication, websocket connection,\n * Endpoint authentication, and all App interactions thereafter.  Almost all methods return a Promise.\n * @class respoke.SignalingChannel\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.instanceId - client id\n * @private\n * @returns {respoke.SignalingChannel}\n */\nmodule.exports = function (params) {\n    params = params || {};\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name className\n     * @type {string}\n     * @private\n     */\n    that.className = 'respoke.SignalingChannel';\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name client\n     * @private\n     * @type {respoke.Client}\n     */\n    var client = respoke.getClient(instanceId);\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name socket\n     * @private\n     * @type {Socket.io.Socket}\n     */\n    var socket = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name clientSettings\n     * @private\n     * @type {object}\n     */\n    var clientSettings = params.clientSettings;\n    delete that.clientSettings;\n    clientSettings.baseURL = clientSettings.baseURL || 'https://api.respoke.io';\n    /**\n     * A map to avoid duplicate endpoint presence registrations.\n     * @memberof! respoke.SignalingChannel\n     * @name presenceRegistered\n     * @private\n     * @type {object}\n     */\n    var presenceRegistered = {};\n    /**\n     * A reference to the private function Client.actuallyConnect that gets set in SignalingChannel.open() so we\n     * don't have to make it public.\n     * @memberof! respoke.SignalingChannel\n     * @name actuallyConnect\n     * @private\n     * @type {function}\n     */\n    var actuallyConnect = null;\n    /**\n     * Set of promises for any pending requests on the WebSocket.\n     * @private\n     * @type {PendingRequests}\n     */\n    var pendingRequests = PendingRequests();\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name reconnectTimeout\n     * @private\n     * @type {number}\n     */\n    var reconnectTimeout = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name maxReconnectTimeout\n     * @private\n     * @type {number}\n     */\n    var maxReconnectTimeout = 5 * 60 * 1000;\n    /**\n     * Rejects a message if the body size is greater than this. It is enforced servcer side, so changing this\n     * won't make the bodySizeLimit any bigger, this just gives you a senseable error if it's too big.\n     * @memberof! respoke.signalingChannel\n     * @name bodySizeLimit\n     * @private\n     * @type {number}\n     */\n    var bodySizeLimit = 20000;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name appId\n     * @private\n     * @type {string}\n     */\n    var appId = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name endpointId\n     * @private\n     * @type {string}\n     */\n    var endpointId = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name token\n     * @private\n     * @type {string}\n     */\n    var token = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name appToken\n     * @private\n     * @type {string}\n     */\n    var appToken = null;\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name xhr\n     * @private\n     * @type {XMLHttpRequest}\n     */\n    var xhr = new XMLHttpRequest();\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name routingMethods\n     * @private\n     * @type {object}\n     * @desc The methods contained in this object are statically defined methods that are called by constructing\n     * their names dynamically. 'do' + $className + $signalType == 'doCallOffer', et. al.\n     */\n    var routingMethods = {};\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name handlerQueue\n     * @private\n     * @type {object}\n     */\n    var handlerQueue = {\n        'message': [],\n        'signal': [],\n        'presence': []\n    };\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @name errors\n     * @private\n     * @type {object}\n     */\n    var errors = {\n        400: \"Can't perform this action: missing or invalid parameters.\",\n        401: \"Can't perform this action: not authenticated.\",\n        403: \"Can't perform this action: not authorized.\",\n        404: \"Item not found.\",\n        409: \"Can't perform this action: item in the wrong state.\",\n        429: \"API rate limit was exceeded.\",\n        500: \"Can't perform this action: server problem.\"\n    };\n\n    /**\n     * Indicate whether the signaling channel has a valid connection to Respoke.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.isConnected\n     * @return {boolean}\n     */\n    that.isConnected = function () {\n        return !!(socket && socket.socket.connected);\n    };\n\n    /**\n     * Indicate whether the signaling channel is currently waiting on a websocket to connect.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.isConnecting\n     * @private\n     * @return {boolean}\n     */\n    function isConnecting() {\n        return !!(socket && socket.socket.connecting);\n    }\n\n    /**\n     * Get the call debug preference.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.isSendingReport\n     * @private\n     * @return {boolean}\n     */\n    that.isSendingReport = function (params) {\n        return clientSettings.enableCallDebugReport;\n    };\n\n    /**\n     * Open a connection to the REST API and validate the app, creating a session token.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.open\n     * @private\n     * @param {object} params\n     * @param {string} [params.token] - The Endpoint's auth token\n     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @return {Promise}\n     */\n    that.open = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug('SignalingChannel.open', params, clientSettings);\n        token = params.token || token;\n        actuallyConnect = typeof params.actuallyConnect === 'function' ? params.actuallyConnect : actuallyConnect;\n\n        Q.fcall(function tokenPromise() {\n            if (clientSettings.developmentMode === true && clientSettings.appId && params.endpointId) {\n                return that.getToken({\n                    appId: clientSettings.appId,\n                    endpointId: params.endpointId\n                });\n            }\n            return null;\n        }).then(function successHandler(newToken) {\n            token = newToken || token;\n            return doOpen({token: token});\n        }).done(function successHandler() {\n            deferred.resolve();\n            log.debug('client', client);\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Get a developer mode token for an endpoint. App must be in developer mode.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getToken\n     * @private\n     * @param {object} params\n     * @param {string} [params.endpointId] - An identifier to use when creating an authentication token for this\n     * endpoint. This is only used when `developmentMode` is set to `true`.\n     * @return {Promise<String>}\n     */\n    that.getToken = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug('SignalingChannel.getToken', params);\n\n        var callParams = {\n            path: '/v1/tokens',\n            httpMethod: 'POST',\n            parameters: {\n                appId: clientSettings.appId,\n                endpointId: params.endpointId,\n                ttl: 60 * 60 * 6\n            }\n        };\n\n        call(callParams).done(function (response) {\n            if (response.code === 200 && response.result && response.result.tokenId) {\n                token = response.result.tokenId;\n                deferred.resolve(response.result.tokenId);\n                return;\n            }\n            deferred.reject(buildResponseError(response, \"Couldn't get a developer mode token: \" + response.error));\n        }, function (err) {\n            deferred.reject(new Error(\"Couldn't get a developer mode token: \" + err.message));\n        });\n        return deferred.promise;\n    };\n\n    /**\n     * Open a connection to the REST API and validate the app, creating a session token.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.doOpen\n     * @param {object} params\n     * @param {string} params.token - The Endpoint's auth token\n     * @return {Promise}\n     * @private\n     */\n    function doOpen(params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug('SignalingChannel.doOpen', params);\n\n        if (!params.token) {\n            deferred.reject(new Error(\"Can't open connection to Respoke without a token.\"));\n            return deferred.promise;\n        }\n\n        call({\n            path: '/v1/session-tokens',\n            httpMethod: 'POST',\n            parameters: {\n                tokenId: params.token\n            }\n        }).done(function (response) {\n            if (response.code === 200) {\n                appToken = response.result.token;\n                deferred.resolve();\n                log.debug(\"Signaling connection open to\", clientSettings.baseURL);\n            } else {\n                deferred.reject(buildResponseError(response, \"Couldn't authenticate app: \" + response.error));\n            }\n        }, function (err) {\n            log.error(\"Network call failed:\", err.message);\n            deferred.reject(new Error(\"Couldn't authenticate app: \" + err.message));\n        });\n\n        return deferred.promise;\n    }\n\n    /**\n     * Close a connection to the REST API. Invalidate the session token.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.close\n     * @private\n     * @return {Promise}\n     */\n    that.close = function () {\n        var deferred = Q.defer();\n\n        wsCall({\n            path: '/v1/connections/%s/',\n            httpMethod: 'DELETE',\n            objectId: client.endpointId\n        }).fin(function finallyHandler() {\n            return call({\n                path: '/v1/session-tokens',\n                httpMethod: 'DELETE'\n            });\n        }).fin(function finallyHandler() {\n            if (socket) {\n                socket.removeAllListeners();\n                socket.disconnect();\n            }\n            deferred.resolve();\n        }).done();\n\n        return deferred.promise;\n    };\n\n    /**\n     * Generate and send a presence message representing the client's current status. This triggers\n     * the server to send the client's endpoint's presence.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendPresence\n     * @private\n     * @param {object} params\n     * @param {string|number|object|Array} [params.presence=available]\n     * @param {string} [params.status] - Non-enumeration human-readable status.\n     * @param {string} [params.show] - I can't remember what this is.\n     * @returns {Promise}\n     */\n    that.sendPresence = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        log.debug(\"Signaling sendPresence\");\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/presence',\n            httpMethod: 'POST',\n            parameters: {\n                'presence': {\n                    show: params.show,\n                    'status': params.status,\n                    type: params.presence || \"available\"\n                }\n            }\n        }).done(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return deferred.promise;\n    };\n\n    /**\n     * If the logged-in endpoint has permission through its Respoke role, forcibly remove another participant\n     * from the conference, ending its conference call.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.removeConferenceParticipant\n     * @private\n     * @param {object} params\n     * @param {string} [endpointId] - The endpoint id of the endpoint to be removed\n     * @param {string} [connectionId] - The connection id of the connection to be removed\n     * @returns {Promise}\n     */\n    that.removeConferenceParticipant = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var endpointId = params.endpointId;\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        if (!endpointId && params.connectionId) {\n            try {\n                endpointId = client.getConnection({\n                    connectionId: params.connectionId\n                }).getEndpoint().id;\n            } catch (err) {}\n\n            if (!endpointId) {\n                deferred.reject(new Error(\"conference.removeParticipant can't figure out what endpoint to remove!\"));\n                return deferred.promise;\n            }\n        }\n\n        wsCall({\n            httpMethod: 'DELETE',\n            path: '/v1/conferences/' + params.conferenceId + '/participants/' + endpointId,\n            parameters: {\n                connectionId: params.connectionId // Optional; It's OK if it's undefined here.\n            }\n        }).then(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * If the logged-in endpoint has permission through its Respoke role, close down the conference, removing all\n     * participants.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.destroyConference\n     * @param {object} params\n     * @param {string} params.id\n     * @private\n     * @returns {Promise}\n     */\n    that.destroyConference = function (params) {\n        var deferred = Q.defer();\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            httpMethod: 'DELETE',\n            path: '/v1/conferences/%s/',\n            objectId: params.conferenceId\n        }).then(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Retrieve the list of participants in the specified conference.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getConferenceParticipants\n     * @private\n     * @returns {Promise<respoke.Connection>}\n     * @param {object} params\n     * @param {string} params.id\n     */\n    that.getConferenceParticipants = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            httpMethod: 'GET',\n            path: '/v1/conferences/%s/participants/',\n            objectId: params.id\n        }).then(function successHandler(participants) {\n            deferred.resolve(participants.map(function (par) {\n                return client.getConnection({\n                    connectionId: par.connectionId,\n                    endpointId: par.endpointId\n                });\n            }));\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Get or create a group in the infrastructure.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getGroup\n     * @private\n     * @returns {Promise<respoke.Group>}\n     * @param {object} params\n     * @param {string} params.name\n     */\n    that.getGroup = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            httpMethod: 'POST',\n            path: '/v1/channels/',\n            parameters: {\n                name: params.name\n            }\n        }).then(function successHandler(group) {\n            deferred.resolve(group);\n        }, function errorHandler(err) {\n            // Group was already created, just return back the same params we were given.\n            deferred.resolve({id: params.name});\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Leave a group. In order to aggregate subsequent repeated requests, this function, when called synchronously,\n     * will continue to accumulate group ids until the next tick of the event loop, when the request will be\n     * issued. The same instance of Promise is returned each time.\n     * @memberof! respoke.SignalingChannel\n     * @private\n     * @method respoke.SignalingChannel.leaveGroup\n     * @returns {Promise}\n     * @param {object} params\n     * @param {array} params.groupList\n     */\n    that.leaveGroup = (function () {\n        var groups = {};\n        var deferred = Q.defer();\n\n        return function (params) {\n            params = params || {};\n            params.groupList = params.groupList || [];\n\n            var toRun = (Object.keys(groups).length === 0);\n\n            if (!that.isConnected()) {\n                deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n                return deferred.promise;\n            }\n\n            params.groupList.forEach(function (id) {\n                if (typeof id === 'string') {\n                    groups[id] = true;\n                }\n            });\n\n            if (!toRun) {\n                return deferred.promise;\n            }\n\n            setTimeout(function () {\n                // restart accumulation\n                var groupList = Object.keys(groups);\n                groups = {};\n                var saveDeferred = deferred;\n                deferred = Q.defer();\n\n                if (groupList.length === 0) {\n                    saveDeferred.resolve();\n                    return;\n                }\n\n                wsCall({\n                    path: '/v1/groups/',\n                    parameters: {\n                        groups: groupList\n                    },\n                    httpMethod: 'DELETE'\n                }).done(function successHandler() {\n                    saveDeferred.resolve();\n                }, function errorHandler(err) {\n                    saveDeferred.reject(err);\n                });\n            });\n            return deferred.promise;\n        };\n    })();\n\n    /**\n     * Join a group. In order to aggregate subsequent repeated requests, this function, when called synchronously,\n     * will continue to accumulate group ids until the next tick of the event loop, when the request will be\n     * issued. The same instance of Promise is returned each time.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.joinGroup\n     * @private\n     * @returns {Promise}\n     * @param {object} params\n     * @param {array} params.groupList\n     */\n    that.joinGroup = (function () {\n        var groups = {};\n        var deferred = Q.defer();//i think this needs to go in actualJoinGroup\n\n        return function actualJoinGroup(params) {\n            params = params || {};\n            params.groupList = params.groupList || [];\n\n            log.trace('been asked to join groups', params.groupList);\n\n            var needsToRun = (Object.keys(groups).length === 0);\n\n            if (!that.isConnected()) {\n                deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n                return deferred.promise;\n            }\n\n            params.groupList.forEach(function (id) {\n                if (typeof id === 'string') {\n                    log.trace('put group', id, 'in the join queue');\n                    groups[id] = true;\n                }\n            });\n\n            if (!needsToRun) {\n                return deferred.promise;\n            }\n\n            setTimeout(function requestJoinsForGroupQueue() {\n                // restart accumulation\n                var groupList = Object.keys(groups);\n                log.trace('list of groups to be requested', groupList);\n                //reset the groups object\n                groups = {};\n                var saveDeferred = deferred;\n                deferred = Q.defer();\n\n                if (groupList.length === 0) {\n                    log.trace('list of groups was empty so not sending queue');\n                    saveDeferred.resolve();\n                    return;\n                }\n\n                wsCall({\n                    path: '/v1/groups/',\n                    parameters: {\n                        groups: groupList\n                    },\n                    httpMethod: 'POST'\n                }).done(function successHandler() {\n                    saveDeferred.resolve();\n                }, function errorHandler(err) {\n                    saveDeferred.reject(err);\n                });\n            });\n            return deferred.promise;\n        };\n    })();\n\n    /**\n     * Publish a message to a group.\n     * @memberof! respoke.SignalingChannel\n     * @private\n     * @method respoke.SignalingChannel.publish\n     * @returns {Promise}\n     * @param {object} params\n     * @param {string} params.id\n     * @param {string} params.message\n     * @param {boolean} [params.push=false]\n     */\n    that.publish = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var message = respoke.TextMessage({\n            endpointId: params.id,\n            message: params.message,\n            push: !!params.push\n        });\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/channels/%s/publish/',\n            objectId: params.id,\n            httpMethod: 'POST',\n            parameters: message\n        }).done(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return deferred.promise;\n    };\n\n    /**\n     * Register as an observer of presence for the specified endpoint ids. In order to aggregate subsequent repeated\n     * requests, this function, when called synchronously, will continue to accumulate endpoint ids until the next\n     * tick of the event loop, when the request will be issued. The same instance of Promise is returned each time.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.registerPresence\n     * @private\n     * @param {object} params\n     * @param {Array<string>} params.endpointList\n     * @returns {Promise}\n     */\n    that.registerPresence = (function () {\n        var endpoints = {};\n        var deferred = Q.defer();\n\n        return function (params) {\n            params = params || {};\n            params.endpointList = params.endpointList || [];\n            var toRun = (Object.keys(endpoints).length === 0);\n\n            if (!that.isConnected()) {\n                return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            }\n\n            params.endpointList.forEach(function (ep) {\n                if (typeof ep === 'string' && presenceRegistered[ep] !== true) {\n                    endpoints[ep] = true;\n                }\n            });\n\n            if (!toRun) {\n                return deferred.promise;\n            }\n\n            setTimeout(function () {\n                // restart accumulation\n                var endpointList = Object.keys(endpoints);\n                endpoints = {};\n                var saveDeferred = deferred;\n                deferred = Q.defer();\n\n                if (endpointList.length === 0) {\n                    saveDeferred.resolve();\n                    return;\n                }\n\n                wsCall({\n                    httpMethod: 'POST',\n                    path: '/v1/presenceobservers',\n                    parameters: {\n                        endpointList: endpointList\n                    }\n                }).done(function successHandler() {\n                    params.endpointList.forEach(function eachId(id) {\n                        presenceRegistered[id] = true;\n                    });\n                    saveDeferred.resolve();\n                }, function (err) {\n                    saveDeferred.reject(err);\n                });\n                // We could even add a tiny delay like 10ms if we want to get more conservative and\n                // catch asychronous calls to client.getEndpoint() and other methods which call\n                // this method.\n            });\n\n            return deferred.promise;\n        };\n    })();\n\n    /**\n     * Join a group.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getGroupMembers\n     * @private\n     * @returns {Promise<Array>}\n     * @param {object} params\n     * @param {string} params.id\n     */\n    that.getGroupMembers = function (params) {\n        var deferred = Q.defer();\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        if (!params.id) {\n            deferred.reject(new Error(\"Can't get group's endpoints without group ID.\"));\n            return deferred.promise;\n        }\n\n        return wsCall({\n            path: '/v1/channels/%s/subscribers/',\n            objectId: params.id,\n            httpMethod: 'GET'\n        });\n    };\n\n    /**\n     * Send a chat message.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendMessage\n     * @private\n     * @param {object} params\n     * @param {respoke.SignalingMessage} params.message - The string text message to send.\n     * @param {respoke.Endpoint} params.recipient\n     * @param {string} [params.connectionId]\n     * @param {boolean} [params.push=false]\n     * @returns {Promise}\n     */\n    that.sendMessage = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var message = respoke.TextMessage({\n            endpointId: params.recipient.id,\n            connectionId: params.connectionId,\n            message: params.message,\n            push: !!params.push\n        });\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/messages',\n            httpMethod: 'POST',\n            parameters: message\n        }).done(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n        return deferred.promise;\n    };\n\n    /**\n     * Send an ACK signal to acknowlege reception of a signal.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendACK\n     * @private\n     * @param {object} params\n     * @param {respoke.SignalingMessage} params.signal\n     * @return {Promise}\n     */\n    that.sendACK = function (params) {\n        var endpoint;\n        params = params || {};\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        if (!params.signal) {\n            return Q.reject(new Error(\"Can't send ACK, no signal was given.\"));\n        }\n\n        endpoint = client.getEndpoint({\n            id: params.signal.fromEndpoint,\n            skipPresence: true\n        });\n        if (!endpoint) {\n            return Q.reject(new Error(\"Can't send ACK, can't get endpoint.\"));\n        }\n\n        return that.sendSignal({\n            recipient: endpoint,\n            signalType: 'ack',\n            signalId: params.signal.signalId,\n            sessionId: params.signal.sessionId,\n            target: params.signal.target,\n            ackedSignalType: params.signal.signalType\n        });\n    };\n\n    /**\n     * Send a signaling message.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendSignal\n     * @private\n     * @param {object} params\n     * @param {respoke.Call} [params.call] - For getting the sessionId & connectionId. Not required for 'ack'.\n     * @return {Promise}\n     */\n    that.sendSignal = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var signal;\n        var to;\n        var toConnection;\n        var toType;\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        if (params.call) {\n            params.sessionId = params.call.id;\n            if (params.call.connectionId) { // the recipient's connectionId\n                params.connectionId = params.call.connectionId;\n            }\n        }\n\n        to = params.recipient.id;\n        toConnection = params.connectionId;\n        toType = params.toType || 'web';\n\n        try {\n            params.signalId = respoke.makeGUID();\n            // This will strip off non-signaling attributes.\n            signal = respoke.SignalingMessage(params);\n        } catch (e) {\n            deferred.reject(e);\n            return deferred.promise;\n        }\n\n        params = {\n            signal: JSON.stringify(signal),\n            to: to,\n            toConnection: toConnection,\n            toType: toType\n        };\n\n        wsCall({\n            path: '/v1/signaling',\n            httpMethod: 'POST',\n            parameters: {\n                signal: JSON.stringify(signal),\n                to: to,\n                toConnection: toConnection,\n                toType: toType\n            }\n        }).done(function successHandler() {\n            deferred.resolve();\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Send an ICE candidate.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendCandidate\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @param {string} [params.connectionId]\n     * @param {Array<RTCIceCandidate>} params.iceCandidates - An array of ICE candidate.\n     * @return {Promise}\n     */\n    that.sendCandidate = function (params) {\n        params = params || {};\n        params.signalType = 'iceCandidates';\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Send an SDP.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendSDP\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @param {string} [params.connectionId]\n     * @param {RTCSessionDescription} params.sessionDescription - An SDP to JSONify and send.\n     * @return {Promise}\n     */\n    that.sendSDP = function (params) {\n        params = params || {};\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        if (['offer', 'answer'].indexOf(params.signalType) === -1) {\n            return Q.reject(\"Not an SDP type signal.\");\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Send a call report to the cloud infrastructure.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendReport\n     * @private\n     * @param {object} params\n     * @todo TODO document the params.\n     * @return {Promise}\n     */\n    that.sendReport = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var message = {\n            debugData: params\n        };\n\n        if (!clientSettings.enableCallDebugReport) {\n            log.debug('not sending call debugs - disabled');\n            deferred.resolve();\n            return deferred.promise;\n        }\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            path: '/v1/call-debugs',\n            httpMethod: 'POST',\n            parameters: message\n        }).done(function () {\n            deferred.resolve();\n        }, function (err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Send a message hanging up the WebRTC session.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendHangup\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @param {string} [params.connectionId]\n     * @param {string} params.reason - The reason the session is being hung up.\n     * @return {Promise}\n     */\n    that.sendHangup = function (params) {\n        params = params || {};\n        params.signalType = 'bye';\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Send a message to all connection ids indicating we have negotiated a call with one connection.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendConnected\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @return {Promise}\n     */\n    that.sendConnected = function (params) {\n        params = params || {};\n        params.signalType = 'connected';\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Send a message to the remote party indicating a desire to renegotiate media.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.sendModify\n     * @private\n     * @param {object} params\n     * @param {respoke.Endpoint} params.recipient - The recipient.\n     * @param {string} params.action - The state of the modify request, one of: 'initiate', 'accept', 'reject'\n     * @return {Promise}\n     */\n    that.sendModify = function (params) {\n        params = params || {};\n        params.signalType = 'modify';\n\n        if (['initiate', 'accept', 'reject'].indexOf(params.action) === -1) {\n            return Q.reject(\"No valid action in modify signal.\");\n        }\n\n        if (!that.isConnected()) {\n            return Q.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n        }\n\n        return that.sendSignal(params);\n    };\n\n    /**\n     * Uppercase the first letter of the word.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.firstUpper\n     * @private\n     */\n    function firstUpper(str) {\n        return str[0].toUpperCase() + str.slice(1);\n    }\n\n    /**\n     * Route different types of signaling messages via events.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routeSignal\n     * @private\n     * @param {respoke.SignalingMessage} message - A message to route\n     * @fires respoke.Call#offer\n     * @fires respoke.Call#connected\n     * @fires respoke.Call#answer\n     * @fires respoke.Call#iceCandidates\n     * @fires respoke.Call#hangup\n     * @fires respoke.DirectConnection#offer\n     * @fires respoke.DirectConnection#connected\n     * @fires respoke.DirectConnection#answer\n     * @fires respoke.DirectConnection#iceCandidates\n     * @fires respoke.DirectConnection#hangup\n     */\n    that.routeSignal = function (signal) {\n        var target = null;\n        var method = 'do';\n\n        if (signal.signalType !== 'iceCandidates') { // Too many of these!\n            log.debug(signal.signalType, signal);\n        }\n\n        if (signal.target === undefined) {\n            throw new Error(\"target undefined\");\n        }\n\n        // Only create if this signal is an offer.\n        Q.fcall(function makePromise() {\n            var endpoint;\n            /*!\n             * This will return calls regardless of whether they are associated\n             * with a direct connection or not, and it will create a call if no\n             * call is found and this signal is an offer. Direct connections get\n             * created in the next step.\n             */\n            target = client.getCall({\n                id: signal.sessionId,\n                endpointId: signal.fromEndpoint,\n                target: signal.target,\n                conferenceId: signal.conferenceId,\n                type: signal.fromType,\n                create: (signal.target !== 'directConnection' && signal.signalType === 'offer'),\n                callerId: signal.callerId\n            });\n            if (target) {\n                return target;\n            }\n\n            if (signal.target === 'directConnection') {\n                // return a promise\n                endpoint = client.getEndpoint({\n                    id: signal.fromEndpoint,\n                    skipPresence: true\n                });\n\n                if (endpoint.directConnection && endpoint.directConnection.call.id === signal.sessionId) {\n                    return endpoint.directConnection;\n                }\n\n                return endpoint.startDirectConnection({\n                    id: signal.sessionId,\n                    create: (signal.signalType === 'offer'),\n                    caller: (signal.signalType !== 'offer')\n                });\n            }\n        }).done(function successHandler(target) {\n            // target might be null, a Call, or a DirectConnection.\n            if (target) {\n                target = target.call || target;\n            }\n            if (!target || target.id !== signal.sessionId) {\n                // orphaned signal\n                log.warn(\"Couldn't associate signal with a call.\", signal);\n                return;\n            }\n\n            method += firstUpper(signal.signalType);\n            routingMethods[method]({\n                call: target,\n                signal: signal\n            });\n        }, null);\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doOffer\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-offer\n     */\n    routingMethods.doOffer = function (params) {\n        params.call.connectionId = params.signal.fromConnection;\n        /**\n         * Send the `offer` signal into the Call.\n         * @event respoke.Call#signal-offer\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-offer', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doConnected\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-connected\n     */\n    routingMethods.doConnected = function (params) {\n        /**\n         * Send the `connected` signal into the Call.\n         * @event respoke.Call#signal-connected\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-connected', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.dModify\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-modify\n     */\n    routingMethods.doModify = function (params) {\n        /**\n         * Send the `modify` signal into the Call.\n         * @event respoke.Call#signal-modify\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-modify', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doAnswer\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-answer\n     */\n    routingMethods.doAnswer = function (params) {\n        params.call.connectionId = params.signal.fromConnection;\n        /**\n         * Send the `answer` signal into the Call.\n         * @event respoke.Call#signal-answer\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-answer', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doIceCandidates\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-icecandidates\n     */\n    routingMethods.doIceCandidates = function (params) {\n        /**\n         * Send the `icecandidates` signal into the Call.\n         * @event respoke.Call#signal-icecandidates\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-icecandidates', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doBye\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     * @fires respoke.Call#signal-hangup\n     */\n    routingMethods.doBye = function (params) {\n        /**\n         *  We may receive hangup from one or more parties after connectionId is set if the call is rejected\n         *  by a connection that didn't win the call. In this case, we have to ignore the signal since\n         *  we are already on a call. TODO: this should really be inside PeerConnection.\n         */\n        if (params.call.connectionId && params.call.connectionId !== params.signal.fromConnection) {\n            return;\n        }\n        /**\n         * Send the `hangup` signal into the Call.\n         * @event respoke.Call#signal-hangup\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        params.call.fire('signal-hangup', {\n            signal: params.signal\n        });\n    };\n\n    /**\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.routingMethods.doUnknown\n     * @private\n     * @params {object} params\n     * @params {object} params.signal\n     */\n    routingMethods.doUnknown = function (params) {\n        log.error(\"Don't know what to do with\", params.signal.target, \"msg of unknown type\", params.signal.signalType);\n    };\n\n    /**\n     * Add a handler to the connection for messages of different types.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.addHandler\n     * @private\n     * @param {object} params\n     * @param {string} params.type - The type of socket message, i. e., 'message', 'presence', 'join'\n     * @param {function} params.handler - A function to which to pass the message\n     * @todo TODO See if this is necessary anymore\n     */\n    that.addHandler = function (params) {\n        if (socket.socket && socket.socket.open) {\n            socket.on(params.type, params.handler);\n        } else {\n            handlerQueue[params.type].push(params.handler);\n        }\n    };\n\n    /**\n     * Socket handler for pub-sub messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onPubSub\n     * @param {object} message The Socket.io message.\n     * @private\n     * @fires respoke.Group#message\n     * @fires respoke.Client#message\n     */\n    var onPubSub = function onPubSub(message) {\n        var group;\n        var groupMessage;\n\n        if (message.header.from === client.endpointId) {\n            return;\n        }\n\n        groupMessage = respoke.TextMessage({\n            rawMessage: message\n        });\n\n        group = client.getGroup({id: message.header.channel});\n        if (group) {\n            /**\n             * Indicate that a message has been received to a group.\n             * @event respoke.Group#message\n             * @type {respoke.Event}\n             * @property {respoke.TextMessage} message\n             * @property {string} name - the event name.\n             * @property {respoke.Group} target\n             */\n            group.fire('message', {\n                message: groupMessage\n            });\n        }\n        /**\n         * Indicate that a message has been received.\n         * @event respoke.Client#message\n         * @type {respoke.Event}\n         * @property {respoke.TextMessage} message\n         * @property {respoke.Group} [group] - If the message is to a group we already know about,\n         * this will be set. If null, the developer can use client.join({id: evt.message.header.channel}) to join\n         * the group. From that point forward, Group#message will fire when a message is received as well. If\n         * group is undefined instead of null, the message is not a group message at all.\n         * @property {string} name - the event name.\n         * @property {respoke.Client} target\n         */\n        client.fire('message', {\n            message: groupMessage,\n            group: group || null\n        });\n    };\n\n    /**\n     * Socket handler for join messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onJoin\n     * @param {object} message The Socket.io message.\n     * @private\n     */\n    var onJoin = function onJoin(message) {\n        var group;\n        var presenceMessage;\n        var endpoint;\n        var connection;\n\n        if (message.connectionId === client.connectionId) {\n            connection = client.getConnection({connectionId: message.connectionId, endpointId: message.endpointId});\n            group = client.getGroup({id: message.header.channel});\n            if (!group) {\n                group = respoke.Group({\n                    id: message.header.channel,\n                    instanceId: instanceId,\n                    signalingChannel: that\n                });\n                client.addGroup(group);\n            }\n            if (!group.isJoined()) {\n                group.addMember({connection: connection});\n                client.fire('join', {\n                    group: group\n                });\n            }\n        } else {\n\n            endpoint = client.getEndpoint({\n                skipPresence: true,\n                id: message.endpointId,\n                instanceId: instanceId,\n                name: message.endpointId\n            });\n\n            // Handle presence not associated with a channel\n            if (!connection) {\n                endpoint.setPresence({\n                    connectionId: message.connectionId\n                });\n                connection = client.getConnection({\n                    connectionId: message.connectionId,\n                    endpointId: message.endpointId\n                });\n            }\n\n            group = client.getGroup({id: message.header.channel});\n\n            if (group && connection) {\n                group.addMember({connection: connection});\n            } else {\n                log.error(\"Can't add endpoint to group:\", message, group, endpoint, connection);\n            }\n        }\n    };\n\n    /**\n     * Socket handler for leave messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onLeave\n     * @param {object} message The Socket.io message.\n     * @private\n     */\n    var onLeave = function onLeave(message) {\n        var group;\n        var presenceMessage;\n        var endpoint;\n        if (message.connectionId === client.connectionId) {\n            group = client.getGroup({id: message.header.channel});\n            client.fire('leave', {\n                group: group\n            });\n        } else {\n\n            endpoint = client.getEndpoint({\n                skipPresence: true,\n                id: message.endpointId\n            });\n\n            endpoint.connections.every(function eachConnection(conn, index) {\n                if (conn.id === message.connectionId) {\n                    endpoint.connections.splice(index, 1);\n                    return false;\n                }\n                return true;\n            });\n\n            group = client.getGroup({id: message.header.channel});\n            group.removeMember({connectionId: message.connectionId});\n        }\n    };\n\n    /**\n     * Socket handler for presence messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onMessage\n     * @param {object} message The Socket.io message.\n     * @private\n     * @fires respoke.Endpoint#message\n     * @fires respoke.Client#message\n     */\n    var onMessage = function onMessage(message) {\n        var endpoint;\n        message = respoke.TextMessage({rawMessage: message});\n        if (message.endpointId) {\n            endpoint = client.getEndpoint({\n                id: message.endpointId,\n                skipCreate: true\n            });\n        }\n        if (endpoint) {\n            /**\n             * Indicate that a message has been received.\n             * @event respoke.Endpoint#message\n             * @type {respoke.Event}\n             * @property {respoke.TextMessage} message\n             * @property {string} name - the event name.\n             * @property {respoke.Endpoint} target\n             */\n            endpoint.fire('message', {\n                message: message\n            });\n        }\n        /**\n         * Indicate that a message has been received.\n         * @event respoke.Client#message\n         * @type {respoke.Event}\n         * @property {respoke.TextMessage} message\n         * @property {respoke.Endpoint} [endpoint] - If the message is from an endpoint we already know about,\n         * this will be set. If null, the developer can use client.getEndpoint({id: evt.message.endpointId}) to get\n         * the Endpoint. From that point forward, Endpoint#message will fire when a message is received as well.\n         * @property {string} name - the event name.\n         * @property {respoke.Client} target\n         */\n        client.fire('message', {\n            endpoint: endpoint || null,\n            message: message\n        });\n    };\n\n    /**\n     * Create a socket handler for the onConnect event with all the right things in scope.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.generateConnectHandler\n     * @param {respoke.Client.successHandler} [onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [onError] - Error handler for this invocation of this\n     * method only.\n     * @private\n     */\n    var generateConnectHandler = function generateConnectHandler(onSuccess, onError) {\n        onSuccess = onSuccess || function () {};\n        onError = onError || function () {};\n        return function onConnect() {\n            Object.keys(handlerQueue).forEach(function addEachHandlerType(category) {\n                if (!handlerQueue[category]) {\n                    return;\n                }\n\n                handlerQueue[category].forEach(function addEachHandler(handler) {\n                    socket.on(category, handler);\n                });\n                handlerQueue[category] = [];\n            });\n\n            wsCall({\n                path: '/v1/connections',\n                httpMethod: 'POST'\n            }).done(function successHandler(res) {\n                log.debug('connections result', res);\n                client.endpointId = res.endpointId;\n                client.connectionId = res.id;\n                onSuccess();\n            }, onError);\n        };\n    };\n\n    /**\n     * Socket handler for presence messages.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.onPresence\n     * @param {object} message The Socket.io message.\n     * @private\n     */\n    function onPresence(message) {\n        var endpoint;\n        var groups;\n\n        if (message.header.from === client.endpointId) {\n            // Skip ourselves\n            return;\n        }\n        log.debug('socket.on presence', message);\n\n        endpoint = client.getEndpoint({\n            skipPresence: true,\n            id: message.header.from,\n            instanceId: instanceId,\n            name: message.header.from,\n            connection: message.header.fromConnection\n        });\n\n        endpoint.setPresence({\n            connectionId: message.header.fromConnection,\n            presence: message.type\n        });\n\n        if (endpoint.presence === 'unavailable') {\n            groups = client.getGroups();\n            if (groups) {\n                groups.forEach(function eachGroup(group) {\n                    group.removeMember({connectionId: message.header.fromConnection});\n                });\n            }\n        }\n    }\n\n    /*!\n     * On reconnect, start with a reconnect interval of 2000ms. Every time reconnect fails, the interval\n     * is doubled up to a maximum of 5 minutes. From then on, it will attempt to reconnect every 5 minutes forever.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.reconnect\n     * @private\n     */\n    function reconnect() {\n        appToken = undefined;\n        token = undefined;\n        reconnectTimeout = (reconnectTimeout === null) ? 2500 : 2 * reconnectTimeout;\n\n        if (reconnectTimeout > (maxReconnectTimeout)) {\n            reconnectTimeout = maxReconnectTimeout;\n        }\n\n        setTimeout(function doReconnect() {\n            actuallyConnect().then(function successHandler() {\n                reconnectTimeout = null;\n                log.debug('socket reconnected');\n                return Q.all(client.getGroups().map(function iterGroups(group) {\n                    client.join({\n                        id: group.id,\n                        onMessage: clientSettings.onMessage,\n                        onJoin: clientSettings.onJoin,\n                        onLeave: clientSettings.onLeave\n                    });\n                }));\n            }).done(function successHandler(user) {\n                /**\n                 * Indicate that a reconnect has succeeded.\n                 * @event respoke.Client#reconnect\n                 * @property {string} name - the event name.\n                 * @property {respoke.Client}\n                 */\n                client.fire('reconnect');\n            }, function (err) {\n                log.error(\"Couldn't rejoin previous groups.\", err.message, err.stack);\n                reconnect();\n            });\n        }, reconnectTimeout);\n    }\n\n    /**\n     * Authenticate to the cloud and call the handler on state change.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.authenticate\n     * @private\n     * @param {object} params\n     * @return {Promise}\n     */\n    that.authenticate = function (params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var pieces = [];\n        var protocol = null;\n        var host = null;\n        var port = null;\n\n        if (!appToken) {\n            deferred.reject(new Error(\"Can't open a websocket without an app token.\"));\n        }\n\n        pieces = clientSettings.baseURL.split(/:\\/\\//);\n        protocol = pieces[0];\n        pieces = pieces[1].split(/:/);\n        host = pieces[0];\n        port = pieces[1];\n\n        /*!\n         * Try to connect for 2 seconds before failing.\n         * @private\n         */\n        var connectParams = {\n            'connect timeout': 2000,\n            'force new connection': true, // Don't try to reuse old connection.\n            'sync disconnect on unload': true, // have Socket.io call disconnect() on the browser unload event.\n            reconnect: false,\n            host: host,\n            port: port || '443',\n            protocol: protocol,\n            secure: (protocol === 'https'),\n            query: '__sails_io_sdk_version=0.10.0&app-token=' + appToken\n        };\n\n        if (that.isConnected() || isConnecting()) {\n            return;\n        }\n        socket = io.connect(clientSettings.baseURL, connectParams);\n\n        socket.on('connect', generateConnectHandler(function onSuccess() {\n            deferred.resolve();\n        }, function onError(err) {\n            deferred.reject(err);\n        }));\n\n        socket.on('join', onJoin);\n        socket.on('leave', onLeave);\n        socket.on('pubsub', onPubSub);\n        socket.on('message', onMessage);\n        socket.on('presence', onPresence);\n\n        // connection timeout\n        socket.on('connect_failed', function connectFailedHandler(res) {\n            deferred.reject(new Error(\"WebSocket connection failed.\"));\n            log.error('Socket.io connect timeout.', res || \"\");\n            reconnect();\n        });\n\n        // handshake error, 403\n        socket.on('error', function errorHandler(res) {\n            log.debug('Socket.io request failed.', res || \"\");\n            reconnect();\n        });\n\n        that.addHandler({\n            type: 'signal',\n            handler: function signalHandler(message) {\n                var knownSignals = ['offer', 'answer', 'connected', 'modify', 'iceCandidates', 'bye'];\n                var signal = respoke.SignalingMessage({\n                    rawMessage: message\n                });\n\n                if (signal.signalType === 'ack') {\n                    return;\n                }\n\n                if (!signal.target || !signal.signalType || knownSignals.indexOf(signal.signalType) === -1) {\n                    log.error(\"Got malformed signal.\", signal);\n                    throw new Error(\"Can't route signal without target or type.\");\n                }\n\n                that.routeSignal(signal);\n            }\n        });\n\n        socket.on('disconnect', function onDisconnect() {\n            pendingRequests.reset(function (pendingRequest) {\n                log.debug('Failing pending requests');\n                pendingRequest.reject(new Error(\"WebSocket disconnected\"));\n            });\n\n            /**\n             * Indicate that this client has been disconnected from the Respoke service.\n             * @event respoke.Client#disconnect\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n            client.fire('disconnect');\n\n            if (clientSettings.reconnect !== true) {\n                socket = null;\n                return;\n            }\n            reconnect();\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Get ephemeral TURN credentials.  This method is called whenever a call is either\n     * sent or received, prior to creating a PeerConnection\n     *\n     * @memberof! respoke.SignalingChannel\n     * @private\n     * @method respoke.SignalingChannel.getTurnCredentials\n     * @return {Promise<Array>}\n     */\n    that.getTurnCredentials = function () {\n        var deferred = Q.defer();\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        wsCall({\n            httpMethod: 'GET',\n            path: '/v1/turn'\n        }).done(function successHandler(creds) {\n            var result = [];\n\n            if (!creds || !creds.uris) {\n                deferred.reject(new Error(\"Turn credentials empty.\"));\n                return;\n            }\n\n            creds.uris.forEach(function saveTurnUri(uri) {\n                var cred = null;\n\n                if (!uri) {\n                    return;\n                }\n\n                cred = createIceServer(uri, creds.username, creds.password);\n                result.push(cred);\n            });\n\n            if (result.length === 0) {\n                deferred.reject(new Error(\"Got no TURN credentials.\"));\n            }\n\n            log.debug('TURN creds', result);\n            deferred.resolve(result);\n        }, function errorHandler(err) {\n            deferred.reject(err);\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Construct a websocket API call and return the formatted response and errors. The 'success'\n     * attribute indicates the success or failure of the API call. The 'response' attribute\n     * is an associative array constructed by json.decode. The 'error' attriute is a message.\n     * If the API call is successful but the server returns invalid JSON, error will be\n     * \"Invalid JSON.\" and response will be the unchanged content of the response body.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.wsCall\n     * @private\n     * @param {object} params\n     * @param {string} params.httpMethod\n     * @param {string} params.path\n     * @param {string} params.objectId\n     * @param {object} params.parameters - These are request body parameters that get converted to JSON before\n     * being sent over the websocket. Undefined parameters and functions are removed by JSON.stringify.\n     * @return {Promise<object>}\n     */\n    function wsCall(params) {\n        params = params || {};\n        var deferred = Q.defer();\n        var start = now();\n        // Too many of these!\n        var logRequest = params.path.indexOf('messages') === -1 && params.path.indexOf('signaling') === -1;\n        var request;\n        var bodyLength = 0;\n        if (params.parameters) {\n            bodyLength = encodeURI(JSON.stringify(params.parameters)).split(/%..|./).length - 1;\n        }\n\n        if (!that.isConnected()) {\n            deferred.reject(new Error(\"Can't complete request when not connected. Please reconnect!\"));\n            return deferred.promise;\n        }\n\n        if (!params) {\n            deferred.reject(new Error('No params.'));\n            return deferred.promise;\n        }\n\n        if (!params.path) {\n            deferred.reject(new Error('No request path.'));\n            return deferred.promise;\n        }\n\n        if (bodyLength > bodySizeLimit) {\n            deferred.reject(new Error('Request body exceeds maximum size of ' + bodySizeLimit + ' bytes'));\n            return deferred.promise;\n        }\n\n        params.httpMethod = (params.httpMethod || 'get').toLowerCase();\n\n        if (params.objectId) {\n            params.path = params.path.replace(/\\%s/ig, params.objectId);\n        }\n\n        if (logRequest) {\n            log.debug('socket request', {\n                method: params.httpMethod,\n                path: params.path,\n                parameters: params.parameters\n            });\n        }\n\n        request = {\n            method: params.httpMethod,\n            path: params.path,\n            parameters: params.parameters,\n            tries: 0,\n            durationMillis: 0\n        };\n\n        request.id = pendingRequests.add(deferred);\n\n        function handleResponse(response) {\n            var thisHandler = this; // jshint ignore:line\n            /*!\n             * Response:\n             *  {\n             *      body: {},\n             *      headers: {},\n             *      statusCode: 200\n             *  }\n             */\n            try {\n                response.body = JSON.parse(response.body);\n            } catch (e) {\n                if (typeof response.body !== 'object') {\n                    deferred.reject(new Error(\"Server response could not be parsed!\" + response.body));\n                    return;\n                }\n            }\n\n            if (response.statusCode === 429) {\n                if (request.tries < 3 && deferred.promise.isPending()) {\n                    setTimeout(function () {\n                        start = now();\n                        sendWebsocketRequest(request, handleResponse);\n                    }, 1000); // one day this will be response.interval or something\n                } else {\n                    request.durationMillis = now() - start;\n                    pendingRequests.remove(request.id);\n                    failWebsocketRequest(request, response,\n                            \"Too many retries after rate limit exceeded.\", deferred);\n                }\n                return;\n            }\n\n            request.durationMillis = now() - start;\n            pendingRequests.remove(request.id);\n\n            if ([200, 204, 205, 302, 401, 403, 404, 418].indexOf(thisHandler.status) === -1) {\n                failWebsocketRequest(request, response,\n                        response.body.error || errors[thisHandler.status] || \"Unknown error\", deferred);\n            } else {\n                deferred.resolve(response.body);\n            }\n\n            if (logRequest) {\n                log.debug('socket response', {\n                    method: request.method,\n                    path: request.path,\n                    durationMillis: request.durationMillis,\n                    response: response\n                });\n            }\n        }\n\n        start = now();\n        sendWebsocketRequest(request, handleResponse);\n        return deferred.promise;\n    }\n\n    function failWebsocketRequest(request, response, error, deferred) {\n        if (response && response.body && response.body.error) {\n            if (response.body.details) {\n                error += ' ' + response.body.details;\n            }\n            deferred.reject(buildResponseError(response, error + ' (' + request.method + ' ' + request.path + ')'));\n        } else {\n            deferred.resolve(response.body);\n        }\n    }\n\n    function sendWebsocketRequest(request, handleResponse) {\n        request.tries += 1;\n        socket.emit(request.method, JSON.stringify({\n            url: request.path,\n            data: request.parameters,\n            headers: {'App-Token': appToken}\n        }), handleResponse);\n    }\n\n    /**\n     * Construct an API call and return the formatted response and errors. The 'success'\n     * attribute indicates the success or failure of the API call. The 'response' attribute\n     * is an associative array constructed by json.decode. The 'error' attribute is a message.\n     * If the API call is successful but the server returns invalid JSON, error will be\n     * \"Invalid JSON.\" and response will be the unchanged content of the response body.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.call\n     * @private\n     * @param {object} params\n     * @param {string} params.httpMethod\n     * @param {string} params.objectId\n     * @param {string} params.path\n     * @param {object} params.parameters\n     * @returns {Promise}\n     */\n    function call(params) {\n        /* Params go in the URI for GET, DELETE, same format for\n         * POST and PUT, but they must be sent separately after the\n         * request is opened. */\n        var deferred = Q.defer();\n        var paramString = null;\n        var uri = null;\n        var response = {\n            'result': null,\n            'code': null\n        };\n        var start = now();\n\n        uri = clientSettings.baseURL + params.path;\n\n        if (!params) {\n            deferred.reject(new Error('No params.'));\n            return;\n        }\n\n        if (!params.httpMethod) {\n            deferred.reject(new Error('No HTTP method.'));\n            return;\n        }\n\n        if (!params.path) {\n            deferred.reject(new Error('No request path.'));\n            return;\n        }\n\n        if (params.objectId) {\n            params.path = params.path.replace(/\\%s/ig, params.objectId);\n        }\n\n        if (['GET', 'DELETE'].indexOf(params.httpMethod) > -1) {\n            uri += makeParamString(params.parameters);\n        }\n\n        xhr.open(params.httpMethod, uri);\n        if (appToken) {\n            xhr.setRequestHeader(\"App-Token\", appToken);\n        }\n        if (['POST', 'PUT'].indexOf(params.httpMethod) > -1) {\n            paramString = JSON.stringify(params.parameters);\n            if (paramString.length > bodySizeLimit) {\n                deferred.reject(new Error('Request body exceeds maximum size of ' + bodySizeLimit + ' bytes'));\n                return;\n            }\n            xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n        } else if (['GET', 'DELETE'].indexOf(params.httpMethod) === -1) {\n            deferred.reject(new Error('Illegal HTTP request method ' + params.httpMethod));\n            return;\n        }\n        log.debug('request', {\n            method: params.httpMethod,\n            uri: uri,\n            params: paramString\n        });\n\n        try {\n            xhr.send(paramString);\n        } catch (err) {\n            deferred.reject(err);\n            return;\n        }\n\n        xhr.onreadystatechange = function () {\n            var durationMillis = now() - start;\n            var limit;\n            var unit;\n\n            if (this.readyState !== 4) {\n                return;\n            }\n\n            if (this.status === 0) {\n                deferred.reject(new Error(\"Status is 0: Incomplete request, SSL error, or CORS error.\"));\n                return;\n            }\n\n            if ([200, 204, 205, 302, 401, 403, 404, 418].indexOf(this.status) > -1) {\n                response.code = this.status;\n                response.headers = getAllResponseHeaders(this);\n                response.uri = uri;\n                response.params = params.parameters;\n                response.error = errors[this.status];\n                if (this.response) {\n                    try {\n                        response.result = JSON.parse(this.response);\n                    } catch (e) {\n                        response.result = this.response;\n                        response.error = \"Invalid JSON.\";\n                    }\n                }\n                log.debug('response', {\n                    method: params.httpMethod,\n                    durationMillis: durationMillis,\n                    response: response\n                });\n                deferred.resolve(response);\n            } else if (this.status === 429) {\n                unit = getResponseHeader(this, 'RateLimit-Time-Units');\n                limit = getResponseHeader(this, 'RateLimit-Limit');\n                deferred.reject(buildResponseError(response, \"Rate limit of \" + limit + \"/\" + unit +\n                    \" exceeded. Try again in 1 \" + unit + \".\"));\n            } else {\n                deferred.reject(buildResponseError(response, 'unexpected response ' + this.status));\n            }\n        };\n\n        return deferred.promise;\n    }\n\n    /**\n     * Turn key/value and key/list pairs into an HTTP URL parameter string.\n     * var1=value1&var2=value2,value3,value4\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.makeParamString\n     * @private\n     * @param {object} params - Arbitrary collection of strings and arrays to serialize.\n     * @returns {string}\n     */\n    function makeParamString(params) {\n        var strings = [];\n        if (!params) {\n            return '';\n        }\n\n        Object.keys(params).forEach(function formatParam(name) {\n            var value = params[name];\n            /* Skip objects -- We won't know how to name these. */\n            if (value instanceof Array) {\n                strings.push([name, value.join(',')].join('='));\n            } else if (typeof value !== 'object' && typeof value !== 'function') {\n                strings.push([name, value].join('='));\n            }\n        });\n\n        if (strings.length > 0) {\n            return '?' + strings.join('&');\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * Tries to retrieve a single header value from an XHR response. If the header is disallowed,\n     * or does not exist, will return null. Otherwise returns the value of the header.\n     *\n     * The CORS spec does not define what the browser should do in the case of a request for a\n     * disallowed header, but at least Chrome throws an exception.\n     *\n     * @param {object} xhrResponse The response of an XMLHttpRequest\n     * @param {string} header The name of the header to retrieve the value for\n     * @returns {string|null} The value(s) of the header, or null if disallowed or unavailable.\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getResponseHeader\n     * @private\n     */\n    function getResponseHeader(xhrResponse, header) {\n        try {\n            return xhrResponse.getResponseHeader(header);\n        } catch (e) {\n            return null;\n        }\n    }\n\n    /**\n     * Retrieves all headers from an XHR response as key/val pairs\n     *\n     * @param {object} xhrResponse The response of an XMLHttpRequest\n     * @returns {*} the key/val pairs of the response headers\n     * @memberof! respoke.SignalingChannel\n     * @method respoke.SignalingChannel.getAllResponseHeaders\n     * @private\n     */\n    function getAllResponseHeaders(xhrResponse) {\n        var result = {};\n        var headers;\n        var pairs;\n\n        headers = xhrResponse.getAllResponseHeaders();\n        if (!headers) {\n            return result;\n        }\n\n        // 1 header per line (cr+lf)\n        pairs = headers.split('\\u000d\\u000a');\n        pairs.forEach(function (pair) {\n            var key;\n            var val;\n\n            // key separated from value by ': '\n            // value may contain ': ', so using indexOf instead of split\n            var index = pair.indexOf('\\u003a\\u0020');\n            if (index > 0) {\n                key = pair.substring(0, index);\n                val = pair.substring(index + 2);\n                result[key] = val;\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     * Creates an Error with the supplied `message` and, if available, the `Request-Id` header\n     * from the supplied `response`.\n     *\n     * @param {object} res\n     * @param {object} [res.headers]\n     * @param {string} [res.headers.Request-Id] The requestId to append to the Error message\n     * @param {string} message The message the Error should be constructed with\n     * @returns {Error} the constructed Error object\n     * @memberof respoke.SignalingChannel\n     * @method respoke.SignalingChannel.buildResponseError\n     * @api private\n     */\n    function buildResponseError(res, message) {\n        var requestId = res && res.headers && res.headers['Request-Id'];\n        if (requestId) {\n            message += ' [Request-Id: ' + requestId + ']';\n        }\n\n        return new Error(message);\n    }\n\n    return that;\n}; // End respoke.SignalingChannel\n/**\n * Handle an error that resulted from a method call.\n * @callback respoke.SignalingChannel.errorHandler\n * @params {Error} err\n */\n/**\n * Handle sending successfully.\n * @callback respoke.SignalingChannel.sendHandler\n */\n/**\n * Receive a group.\n * @callback respoke.SignalingChannel.groupHandler\n * @param {respoke.Group}\n */\n/**\n * Receive a list of groups.\n * @callback respoke.SignalingChannel.groupListHandler\n * @param {Array}\n */\n/**\n * Receive a list of TURN credentials.\n * @callback respoke.SignalingChannel.turnSuccessHandler\n * @param {Array}\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/signalingChannel.js\n ** module id = 14\n ** module chunks = 0\n **/","/*! Socket.IO.js build:0.9.17, development. Copyright(c) 2011 LearnBoost <dev@learnboost.com> MIT Licensed */\n\nvar io = ('undefined' === typeof module ? {} : module.exports);\n(function() {\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, global) {\n\n  /**\n   * IO namespace.\n   *\n   * @namespace\n   */\n\n  var io = exports;\n\n  /**\n   * Socket.IO version\n   *\n   * @api public\n   */\n\n  io.version = '0.9.17';\n\n  /**\n   * Protocol implemented.\n   *\n   * @api public\n   */\n\n  io.protocol = 1;\n\n  /**\n   * Available transports, these will be populated with the available transports\n   *\n   * @api public\n   */\n\n  io.transports = [];\n\n  /**\n   * Keep track of jsonp callbacks.\n   *\n   * @api private\n   */\n\n  io.j = [];\n\n  /**\n   * Keep track of our io.Sockets\n   *\n   * @api private\n   */\n  io.sockets = {};\n\n\n  /**\n   * Manages connections to hosts.\n   *\n   * @param {String} uri\n   * @Param {Boolean} force creation of new socket (defaults to false)\n   * @api public\n   */\n\n  io.connect = function (host, details) {\n    var uri = io.util.parseUri(host)\n      , uuri\n      , socket;\n\n    if (global && global.location) {\n      uri.protocol = uri.protocol || global.location.protocol.slice(0, -1);\n      uri.host = uri.host || (global.document\n        ? global.document.domain : global.location.hostname);\n      uri.port = uri.port || global.location.port;\n    }\n\n    uuri = io.util.uniqueUri(uri);\n\n    var options = {\n        host: uri.host\n      , secure: 'https' == uri.protocol\n      , port: uri.port || ('https' == uri.protocol ? 443 : 80)\n      , query: uri.query || ''\n    };\n\n    io.util.merge(options, details);\n\n    if (options['force new connection'] || !io.sockets[uuri]) {\n      socket = new io.Socket(options);\n    }\n\n    if (!options['force new connection'] && socket) {\n      io.sockets[uuri] = socket;\n    }\n\n    socket = socket || io.sockets[uuri];\n\n    // if path is different from '' or /\n    return socket.of(uri.path.length > 1 ? uri.path : '');\n  };\n\n})('object' === typeof module ? module.exports : (this.io = {}), this);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, global) {\n\n  /**\n   * Utilities namespace.\n   *\n   * @namespace\n   */\n\n  var util = exports.util = {};\n\n  /**\n   * Parses an URI\n   *\n   * @author Steven Levithan <stevenlevithan.com> (MIT license)\n   * @api public\n   */\n\n  var re = /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\n  var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password',\n               'host', 'port', 'relative', 'path', 'directory', 'file', 'query',\n               'anchor'];\n\n  util.parseUri = function (str) {\n    var m = re.exec(str || '')\n      , uri = {}\n      , i = 14;\n\n    while (i--) {\n      uri[parts[i]] = m[i] || '';\n    }\n\n    return uri;\n  };\n\n  /**\n   * Produces a unique url that identifies a Socket.IO connection.\n   *\n   * @param {Object} uri\n   * @api public\n   */\n\n  util.uniqueUri = function (uri) {\n    var protocol = uri.protocol\n      , host = uri.host\n      , port = uri.port;\n\n    if ('document' in global) {\n      host = host || document.domain;\n      port = port || (protocol == 'https'\n        && document.location.protocol !== 'https:' ? 443 : document.location.port);\n    } else {\n      host = host || 'localhost';\n\n      if (!port && protocol == 'https') {\n        port = 443;\n      }\n    }\n\n    return (protocol || 'http') + '://' + host + ':' + (port || 80);\n  };\n\n  /**\n   * Mergest 2 query strings in to once unique query string\n   *\n   * @param {String} base\n   * @param {String} addition\n   * @api public\n   */\n\n  util.query = function (base, addition) {\n    var query = util.chunkQuery(base || '')\n      , components = [];\n\n    util.merge(query, util.chunkQuery(addition || ''));\n    for (var part in query) {\n      if (query.hasOwnProperty(part)) {\n        components.push(part + '=' + query[part]);\n      }\n    }\n\n    return components.length ? '?' + components.join('&') : '';\n  };\n\n  /**\n   * Transforms a querystring in to an object\n   *\n   * @param {String} qs\n   * @api public\n   */\n\n  util.chunkQuery = function (qs) {\n    var query = {}\n      , params = qs.split('&')\n      , i = 0\n      , l = params.length\n      , kv;\n\n    for (; i < l; ++i) {\n      kv = params[i].split('=');\n      if (kv[0]) {\n        query[kv[0]] = kv[1];\n      }\n    }\n\n    return query;\n  };\n\n  /**\n   * Executes the given function when the page is loaded.\n   *\n   *     io.util.load(function () { console.log('page loaded'); });\n   *\n   * @param {Function} fn\n   * @api public\n   */\n\n  var pageLoaded = false;\n\n  util.load = function (fn) {\n    if ('document' in global && document.readyState === 'complete' || pageLoaded) {\n      return fn();\n    }\n\n    util.on(global, 'load', fn, false);\n  };\n\n  /**\n   * Adds an event.\n   *\n   * @api private\n   */\n\n  util.on = function (element, event, fn, capture) {\n    if (element.attachEvent) {\n      element.attachEvent('on' + event, fn);\n    } else if (element.addEventListener) {\n      element.addEventListener(event, fn, capture);\n    }\n  };\n\n  /**\n   * Generates the correct `XMLHttpRequest` for regular and cross domain requests.\n   *\n   * @param {Boolean} [xdomain] Create a request that can be used cross domain.\n   * @returns {XMLHttpRequest|false} If we can create a XMLHttpRequest.\n   * @api private\n   */\n\n  util.request = function (xdomain) {\n\n    if (xdomain && 'undefined' != typeof XDomainRequest && !util.ua.hasCORS) {\n      return new XDomainRequest();\n    }\n\n    if ('undefined' != typeof XMLHttpRequest && (!xdomain || util.ua.hasCORS)) {\n      return new XMLHttpRequest();\n    }\n\n    if (!xdomain) {\n      try {\n        return new window[(['Active'].concat('Object').join('X'))]('Microsoft.XMLHTTP');\n      } catch(e) { }\n    }\n\n    return null;\n  };\n\n  /**\n   * XHR based transport constructor.\n   *\n   * @constructor\n   * @api public\n   */\n\n  /**\n   * Change the internal pageLoaded value.\n   */\n\n  if ('undefined' != typeof window) {\n    util.load(function () {\n      pageLoaded = true;\n    });\n  }\n\n  /**\n   * Defers a function to ensure a spinner is not displayed by the browser\n   *\n   * @param {Function} fn\n   * @api public\n   */\n\n  util.defer = function (fn) {\n    if (!util.ua.webkit || 'undefined' != typeof importScripts) {\n      return fn();\n    }\n\n    util.load(function () {\n      setTimeout(fn, 100);\n    });\n  };\n\n  /**\n   * Merges two objects.\n   *\n   * @api public\n   */\n\n  util.merge = function merge (target, additional, deep, lastseen) {\n    var seen = lastseen || []\n      , depth = typeof deep == 'undefined' ? 2 : deep\n      , prop;\n\n    for (prop in additional) {\n      if (additional.hasOwnProperty(prop) && util.indexOf(seen, prop) < 0) {\n        if (typeof target[prop] !== 'object' || !depth) {\n          target[prop] = additional[prop];\n          seen.push(additional[prop]);\n        } else {\n          util.merge(target[prop], additional[prop], depth - 1, seen);\n        }\n      }\n    }\n\n    return target;\n  };\n\n  /**\n   * Merges prototypes from objects\n   *\n   * @api public\n   */\n\n  util.mixin = function (ctor, ctor2) {\n    util.merge(ctor.prototype, ctor2.prototype);\n  };\n\n  /**\n   * Shortcut for prototypical and static inheritance.\n   *\n   * @api private\n   */\n\n  util.inherit = function (ctor, ctor2) {\n    function f() {};\n    f.prototype = ctor2.prototype;\n    ctor.prototype = new f;\n  };\n\n  /**\n   * Checks if the given object is an Array.\n   *\n   *     io.util.isArray([]); // true\n   *     io.util.isArray({}); // false\n   *\n   * @param Object obj\n   * @api public\n   */\n\n  util.isArray = Array.isArray || function (obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  };\n\n  /**\n   * Intersects values of two arrays into a third\n   *\n   * @api public\n   */\n\n  util.intersect = function (arr, arr2) {\n    var ret = []\n      , longest = arr.length > arr2.length ? arr : arr2\n      , shortest = arr.length > arr2.length ? arr2 : arr;\n\n    for (var i = 0, l = shortest.length; i < l; i++) {\n      if (~util.indexOf(longest, shortest[i]))\n        ret.push(shortest[i]);\n    }\n\n    return ret;\n  };\n\n  /**\n   * Array indexOf compatibility.\n   *\n   * @see bit.ly/a5Dxa2\n   * @api public\n   */\n\n  util.indexOf = function (arr, o, i) {\n\n    for (var j = arr.length, i = i < 0 ? i + j < 0 ? 0 : i + j : i || 0;\n         i < j && arr[i] !== o; i++) {}\n\n    return j <= i ? -1 : i;\n  };\n\n  /**\n   * Converts enumerables to array.\n   *\n   * @api public\n   */\n\n  util.toArray = function (enu) {\n    var arr = [];\n\n    for (var i = 0, l = enu.length; i < l; i++)\n      arr.push(enu[i]);\n\n    return arr;\n  };\n\n  /**\n   * UA / engines detection namespace.\n   *\n   * @namespace\n   */\n\n  util.ua = {};\n\n  /**\n   * Whether the UA supports CORS for XHR.\n   *\n   * @api public\n   */\n\n  util.ua.hasCORS = 'undefined' != typeof XMLHttpRequest && (function () {\n    try {\n      var a = new XMLHttpRequest();\n    } catch (e) {\n      return false;\n    }\n\n    return a.withCredentials != undefined;\n  })();\n\n  /**\n   * Detect webkit.\n   *\n   * @api public\n   */\n\n  util.ua.webkit = 'undefined' != typeof navigator\n    && /webkit/i.test(navigator.userAgent);\n\n   /**\n   * Detect iPad/iPhone/iPod.\n   *\n   * @api public\n   */\n\n  util.ua.iDevice = 'undefined' != typeof navigator\n      && /iPad|iPhone|iPod/i.test(navigator.userAgent);\n\n})('undefined' != typeof io ? io : module.exports, this);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.EventEmitter = EventEmitter;\n\n  /**\n   * Event emitter constructor.\n   *\n   * @api public.\n   */\n\n  function EventEmitter () {};\n\n  /**\n   * Adds a listener\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.on = function (name, fn) {\n    if (!this.$events) {\n      this.$events = {};\n    }\n\n    if (!this.$events[name]) {\n      this.$events[name] = fn;\n    } else if (io.util.isArray(this.$events[name])) {\n      this.$events[name].push(fn);\n    } else {\n      this.$events[name] = [this.$events[name], fn];\n    }\n\n    return this;\n  };\n\n  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n  /**\n   * Adds a volatile listener.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.once = function (name, fn) {\n    var self = this;\n\n    function on () {\n      self.removeListener(name, on);\n      fn.apply(this, arguments);\n    };\n\n    on.listener = fn;\n    this.on(name, on);\n\n    return this;\n  };\n\n  /**\n   * Removes a listener.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.removeListener = function (name, fn) {\n    if (this.$events && this.$events[name]) {\n      var list = this.$events[name];\n\n      if (io.util.isArray(list)) {\n        var pos = -1;\n\n        for (var i = 0, l = list.length; i < l; i++) {\n          if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {\n            pos = i;\n            break;\n          }\n        }\n\n        if (pos < 0) {\n          return this;\n        }\n\n        list.splice(pos, 1);\n\n        if (!list.length) {\n          delete this.$events[name];\n        }\n      } else if (list === fn || (list.listener && list.listener === fn)) {\n        delete this.$events[name];\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Removes all listeners for an event.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.removeAllListeners = function (name) {\n    if (name === undefined) {\n      this.$events = {};\n      return this;\n    }\n\n    if (this.$events && this.$events[name]) {\n      this.$events[name] = null;\n    }\n\n    return this;\n  };\n\n  /**\n   * Gets all listeners for a certain event.\n   *\n   * @api publci\n   */\n\n  EventEmitter.prototype.listeners = function (name) {\n    if (!this.$events) {\n      this.$events = {};\n    }\n\n    if (!this.$events[name]) {\n      this.$events[name] = [];\n    }\n\n    if (!io.util.isArray(this.$events[name])) {\n      this.$events[name] = [this.$events[name]];\n    }\n\n    return this.$events[name];\n  };\n\n  /**\n   * Emits an event.\n   *\n   * @api public\n   */\n\n  EventEmitter.prototype.emit = function (name) {\n    if (!this.$events) {\n      return false;\n    }\n\n    var handler = this.$events[name];\n\n    if (!handler) {\n      return false;\n    }\n\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    if ('function' == typeof handler) {\n      handler.apply(this, args);\n    } else if (io.util.isArray(handler)) {\n      var listeners = handler.slice();\n\n      for (var i = 0, l = listeners.length; i < l; i++) {\n        listeners[i].apply(this, args);\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Based on JSON2 (http://www.JSON.org/js.html).\n */\n\n(function (exports, nativeJSON) {\n  \"use strict\";\n\n  // use native JSON if it's available\n  if (nativeJSON && nativeJSON.parse){\n    return exports.JSON = {\n      parse: nativeJSON.parse\n    , stringify: nativeJSON.stringify\n    };\n  }\n\n  var JSON = exports.JSON = {};\n\n  function f(n) {\n      // Format integers to have at least two digits.\n      return n < 10 ? '0' + n : n;\n  }\n\n  function date(d, key) {\n    return isFinite(d.valueOf()) ?\n        d.getUTCFullYear()     + '-' +\n        f(d.getUTCMonth() + 1) + '-' +\n        f(d.getUTCDate())      + 'T' +\n        f(d.getUTCHours())     + ':' +\n        f(d.getUTCMinutes())   + ':' +\n        f(d.getUTCSeconds())   + 'Z' : null;\n  };\n\n  var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n      escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n      gap,\n      indent,\n      meta = {    // table of character substitutions\n          '\\b': '\\\\b',\n          '\\t': '\\\\t',\n          '\\n': '\\\\n',\n          '\\f': '\\\\f',\n          '\\r': '\\\\r',\n          '\"' : '\\\\\"',\n          '\\\\': '\\\\\\\\'\n      },\n      rep;\n\n\n  function quote(string) {\n\n// If the string contains no control characters, no quote characters, and no\n// backslash characters, then we can safely slap some quotes around it.\n// Otherwise we must also replace the offending characters with safe escape\n// sequences.\n\n      escapable.lastIndex = 0;\n      return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n          var c = meta[a];\n          return typeof c === 'string' ? c :\n              '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n      }) + '\"' : '\"' + string + '\"';\n  }\n\n\n  function str(key, holder) {\n\n// Produce a string from holder[key].\n\n      var i,          // The loop counter.\n          k,          // The member key.\n          v,          // The member value.\n          length,\n          mind = gap,\n          partial,\n          value = holder[key];\n\n// If the value has a toJSON method, call it to obtain a replacement value.\n\n      if (value instanceof Date) {\n          value = date(key);\n      }\n\n// If we were called with a replacer function, then call the replacer to\n// obtain a replacement value.\n\n      if (typeof rep === 'function') {\n          value = rep.call(holder, key, value);\n      }\n\n// What happens next depends on the value's type.\n\n      switch (typeof value) {\n      case 'string':\n          return quote(value);\n\n      case 'number':\n\n// JSON numbers must be finite. Encode non-finite numbers as null.\n\n          return isFinite(value) ? String(value) : 'null';\n\n      case 'boolean':\n      case 'null':\n\n// If the value is a boolean or null, convert it to a string. Note:\n// typeof null does not produce 'null'. The case is included here in\n// the remote chance that this gets fixed someday.\n\n          return String(value);\n\n// If the type is 'object', we might be dealing with an object or an array or\n// null.\n\n      case 'object':\n\n// Due to a specification blunder in ECMAScript, typeof null is 'object',\n// so watch out for that case.\n\n          if (!value) {\n              return 'null';\n          }\n\n// Make an array to hold the partial results of stringifying this object value.\n\n          gap += indent;\n          partial = [];\n\n// Is the value an array?\n\n          if (Object.prototype.toString.apply(value) === '[object Array]') {\n\n// The value is an array. Stringify every element. Use null as a placeholder\n// for non-JSON values.\n\n              length = value.length;\n              for (i = 0; i < length; i += 1) {\n                  partial[i] = str(i, value) || 'null';\n              }\n\n// Join all of the elements together, separated with commas, and wrap them in\n// brackets.\n\n              v = partial.length === 0 ? '[]' : gap ?\n                  '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n                  '[' + partial.join(',') + ']';\n              gap = mind;\n              return v;\n          }\n\n// If the replacer is an array, use it to select the members to be stringified.\n\n          if (rep && typeof rep === 'object') {\n              length = rep.length;\n              for (i = 0; i < length; i += 1) {\n                  if (typeof rep[i] === 'string') {\n                      k = rep[i];\n                      v = str(k, value);\n                      if (v) {\n                          partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                      }\n                  }\n              }\n          } else {\n\n// Otherwise, iterate through all of the keys in the object.\n\n              for (k in value) {\n                  if (Object.prototype.hasOwnProperty.call(value, k)) {\n                      v = str(k, value);\n                      if (v) {\n                          partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                      }\n                  }\n              }\n          }\n\n// Join all of the member texts together, separated with commas,\n// and wrap them in braces.\n\n          v = partial.length === 0 ? '{}' : gap ?\n              '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n              '{' + partial.join(',') + '}';\n          gap = mind;\n          return v;\n      }\n  }\n\n// If the JSON object does not yet have a stringify method, give it one.\n\n  JSON.stringify = function (value, replacer, space) {\n\n// The stringify method takes a value and an optional replacer, and an optional\n// space parameter, and returns a JSON text. The replacer can be a function\n// that can replace values, or an array of strings that will select the keys.\n// A default replacer method can be provided. Use of the space parameter can\n// produce text that is more easily readable.\n\n      var i;\n      gap = '';\n      indent = '';\n\n// If the space parameter is a number, make an indent string containing that\n// many spaces.\n\n      if (typeof space === 'number') {\n          for (i = 0; i < space; i += 1) {\n              indent += ' ';\n          }\n\n// If the space parameter is a string, it will be used as the indent string.\n\n      } else if (typeof space === 'string') {\n          indent = space;\n      }\n\n// If there is a replacer, it must be a function or an array.\n// Otherwise, throw an error.\n\n      rep = replacer;\n      if (replacer && typeof replacer !== 'function' &&\n              (typeof replacer !== 'object' ||\n              typeof replacer.length !== 'number')) {\n          throw new Error('JSON.stringify');\n      }\n\n// Make a fake root object containing our value under the key of ''.\n// Return the result of stringifying the value.\n\n      return str('', {'': value});\n  };\n\n// If the JSON object does not yet have a parse method, give it one.\n\n  JSON.parse = function (text, reviver) {\n  // The parse method takes a text and an optional reviver function, and returns\n  // a JavaScript value if the text is a valid JSON text.\n\n      var j;\n\n      function walk(holder, key) {\n\n  // The walk method is used to recursively walk the resulting structure so\n  // that modifications can be made.\n\n          var k, v, value = holder[key];\n          if (value && typeof value === 'object') {\n              for (k in value) {\n                  if (Object.prototype.hasOwnProperty.call(value, k)) {\n                      v = walk(value, k);\n                      if (v !== undefined) {\n                          value[k] = v;\n                      } else {\n                          delete value[k];\n                      }\n                  }\n              }\n          }\n          return reviver.call(holder, key, value);\n      }\n\n\n  // Parsing happens in four stages. In the first stage, we replace certain\n  // Unicode characters with escape sequences. JavaScript handles many characters\n  // incorrectly, either silently deleting them, or treating them as line endings.\n\n      text = String(text);\n      cx.lastIndex = 0;\n      if (cx.test(text)) {\n          text = text.replace(cx, function (a) {\n              return '\\\\u' +\n                  ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n          });\n      }\n\n  // In the second stage, we run the text against regular expressions that look\n  // for non-JSON patterns. We are especially concerned with '()' and 'new'\n  // because they can cause invocation, and '=' because it can cause mutation.\n  // But just to be safe, we want to reject all unexpected forms.\n\n  // We split the second stage into 4 regexp operations in order to work around\n  // crippling inefficiencies in IE's and Safari's regexp engines. First we\n  // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we\n  // replace all simple value tokens with ']' characters. Third, we delete all\n  // open brackets that follow a colon or comma or that begin the text. Finally,\n  // we look to see that the remaining characters are only whitespace or ']' or\n  // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.\n\n      if (/^[\\],:{}\\s]*$/\n              .test(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')\n                  .replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']')\n                  .replace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))) {\n\n  // In the third stage we use the eval function to compile the text into a\n  // JavaScript structure. The '{' operator is subject to a syntactic ambiguity\n  // in JavaScript: it can begin a block or an object literal. We wrap the text\n  // in parens to eliminate the ambiguity.\n\n          j = eval('(' + text + ')');\n\n  // In the optional fourth stage, we recursively walk the new structure, passing\n  // each name/value pair to a reviver function for possible transformation.\n\n          return typeof reviver === 'function' ?\n              walk({'': j}, '') : j;\n      }\n\n  // If the text is not JSON parseable, then a SyntaxError is thrown.\n\n      throw new SyntaxError('JSON.parse');\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , typeof JSON !== 'undefined' ? JSON : undefined\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Parser namespace.\n   *\n   * @namespace\n   */\n\n  var parser = exports.parser = {};\n\n  /**\n   * Packet types.\n   */\n\n  var packets = parser.packets = [\n      'disconnect'\n    , 'connect'\n    , 'heartbeat'\n    , 'message'\n    , 'json'\n    , 'event'\n    , 'ack'\n    , 'error'\n    , 'noop'\n  ];\n\n  /**\n   * Errors reasons.\n   */\n\n  var reasons = parser.reasons = [\n      'transport not supported'\n    , 'client not handshaken'\n    , 'unauthorized'\n  ];\n\n  /**\n   * Errors advice.\n   */\n\n  var advice = parser.advice = [\n      'reconnect'\n  ];\n\n  /**\n   * Shortcuts.\n   */\n\n  var JSON = io.JSON\n    , indexOf = io.util.indexOf;\n\n  /**\n   * Encodes a packet.\n   *\n   * @api private\n   */\n\n  parser.encodePacket = function (packet) {\n    var type = indexOf(packets, packet.type)\n      , id = packet.id || ''\n      , endpoint = packet.endpoint || ''\n      , ack = packet.ack\n      , data = null;\n\n    switch (packet.type) {\n      case 'error':\n        var reason = packet.reason ? indexOf(reasons, packet.reason) : ''\n          , adv = packet.advice ? indexOf(advice, packet.advice) : '';\n\n        if (reason !== '' || adv !== '')\n          data = reason + (adv !== '' ? ('+' + adv) : '');\n\n        break;\n\n      case 'message':\n        if (packet.data !== '')\n          data = packet.data;\n        break;\n\n      case 'event':\n        var ev = { name: packet.name };\n\n        if (packet.args && packet.args.length) {\n          ev.args = packet.args;\n        }\n\n        data = JSON.stringify(ev);\n        break;\n\n      case 'json':\n        data = JSON.stringify(packet.data);\n        break;\n\n      case 'connect':\n        if (packet.qs)\n          data = packet.qs;\n        break;\n\n      case 'ack':\n        data = packet.ackId\n          + (packet.args && packet.args.length\n              ? '+' + JSON.stringify(packet.args) : '');\n        break;\n    }\n\n    // construct packet with required fragments\n    var encoded = [\n        type\n      , id + (ack == 'data' ? '+' : '')\n      , endpoint\n    ];\n\n    // data fragment is optional\n    if (data !== null && data !== undefined)\n      encoded.push(data);\n\n    return encoded.join(':');\n  };\n\n  /**\n   * Encodes multiple messages (payload).\n   *\n   * @param {Array} messages\n   * @api private\n   */\n\n  parser.encodePayload = function (packets) {\n    var decoded = '';\n\n    if (packets.length == 1)\n      return packets[0];\n\n    for (var i = 0, l = packets.length; i < l; i++) {\n      var packet = packets[i];\n      decoded += '\\ufffd' + packet.length + '\\ufffd' + packets[i];\n    }\n\n    return decoded;\n  };\n\n  /**\n   * Decodes a packet\n   *\n   * @api private\n   */\n\n  var regexp = /([^:]+):([0-9]+)?(\\+)?:([^:]+)?:?([\\s\\S]*)?/;\n\n  parser.decodePacket = function (data) {\n    var pieces = data.match(regexp);\n\n    if (!pieces) return {};\n\n    var id = pieces[2] || ''\n      , data = pieces[5] || ''\n      , packet = {\n            type: packets[pieces[1]]\n          , endpoint: pieces[4] || ''\n        };\n\n    // whether we need to acknowledge the packet\n    if (id) {\n      packet.id = id;\n      if (pieces[3])\n        packet.ack = 'data';\n      else\n        packet.ack = true;\n    }\n\n    // handle different packet types\n    switch (packet.type) {\n      case 'error':\n        var pieces = data.split('+');\n        packet.reason = reasons[pieces[0]] || '';\n        packet.advice = advice[pieces[1]] || '';\n        break;\n\n      case 'message':\n        packet.data = data || '';\n        break;\n\n      case 'event':\n        try {\n          var opts = JSON.parse(data);\n          packet.name = opts.name;\n          packet.args = opts.args;\n        } catch (e) { }\n\n        packet.args = packet.args || [];\n        break;\n\n      case 'json':\n        try {\n          packet.data = JSON.parse(data);\n        } catch (e) { }\n        break;\n\n      case 'connect':\n        packet.qs = data || '';\n        break;\n\n      case 'ack':\n        var pieces = data.match(/^([0-9]+)(\\+)?(.*)/);\n        if (pieces) {\n          packet.ackId = pieces[1];\n          packet.args = [];\n\n          if (pieces[3]) {\n            try {\n              packet.args = pieces[3] ? JSON.parse(pieces[3]) : [];\n            } catch (e) { }\n          }\n        }\n        break;\n\n      case 'disconnect':\n      case 'heartbeat':\n        break;\n    };\n\n    return packet;\n  };\n\n  /**\n   * Decodes data payload. Detects multiple messages\n   *\n   * @return {Array} messages\n   * @api public\n   */\n\n  parser.decodePayload = function (data) {\n    // IE doesn't like data[i] for unicode chars, charAt works fine\n    if (data.charAt(0) == '\\ufffd') {\n      var ret = [];\n\n      for (var i = 1, length = ''; i < data.length; i++) {\n        if (data.charAt(i) == '\\ufffd') {\n          ret.push(parser.decodePacket(data.substr(i + 1).substr(0, length)));\n          i += Number(length) + 1;\n          length = '';\n        } else {\n          length += data.charAt(i);\n        }\n      }\n\n      return ret;\n    } else {\n      return [parser.decodePacket(data)];\n    }\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.Transport = Transport;\n\n  /**\n   * This is the transport template for all supported transport methods.\n   *\n   * @constructor\n   * @api public\n   */\n\n  function Transport (socket, sessid) {\n    this.socket = socket;\n    this.sessid = sessid;\n  };\n\n  /**\n   * Apply EventEmitter mixin.\n   */\n\n  io.util.mixin(Transport, io.EventEmitter);\n\n\n  /**\n   * Indicates whether heartbeats is enabled for this transport\n   *\n   * @api private\n   */\n\n  Transport.prototype.heartbeats = function () {\n    return true;\n  };\n\n  /**\n   * Handles the response from the server. When a new response is received\n   * it will automatically update the timeout, decode the message and\n   * forwards the response to the onMessage function for further processing.\n   *\n   * @param {String} data Response from the server.\n   * @api private\n   */\n\n  Transport.prototype.onData = function (data) {\n    this.clearCloseTimeout();\n\n    // If the connection in currently open (or in a reopening state) reset the close\n    // timeout since we have just received data. This check is necessary so\n    // that we don't reset the timeout on an explicitly disconnected connection.\n    if (this.socket.connected || this.socket.connecting || this.socket.reconnecting) {\n      this.setCloseTimeout();\n    }\n\n    if (data !== '') {\n      // todo: we should only do decodePayload for xhr transports\n      var msgs = io.parser.decodePayload(data);\n\n      if (msgs && msgs.length) {\n        for (var i = 0, l = msgs.length; i < l; i++) {\n          this.onPacket(msgs[i]);\n        }\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Handles packets.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onPacket = function (packet) {\n    this.socket.setHeartbeatTimeout();\n\n    if (packet.type == 'heartbeat') {\n      return this.onHeartbeat();\n    }\n\n    if (packet.type == 'connect' && packet.endpoint == '') {\n      this.onConnect();\n    }\n\n    if (packet.type == 'error' && packet.advice == 'reconnect') {\n      this.isOpen = false;\n    }\n\n    this.socket.onPacket(packet);\n\n    return this;\n  };\n\n  /**\n   * Sets close timeout\n   *\n   * @api private\n   */\n\n  Transport.prototype.setCloseTimeout = function () {\n    if (!this.closeTimeout) {\n      var self = this;\n\n      this.closeTimeout = setTimeout(function () {\n        self.onDisconnect();\n      }, this.socket.closeTimeout);\n    }\n  };\n\n  /**\n   * Called when transport disconnects.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onDisconnect = function () {\n    if (this.isOpen) this.close();\n    this.clearTimeouts();\n    this.socket.onDisconnect();\n    return this;\n  };\n\n  /**\n   * Called when transport connects\n   *\n   * @api private\n   */\n\n  Transport.prototype.onConnect = function () {\n    this.socket.onConnect();\n    return this;\n  };\n\n  /**\n   * Clears close timeout\n   *\n   * @api private\n   */\n\n  Transport.prototype.clearCloseTimeout = function () {\n    if (this.closeTimeout) {\n      clearTimeout(this.closeTimeout);\n      this.closeTimeout = null;\n    }\n  };\n\n  /**\n   * Clear timeouts\n   *\n   * @api private\n   */\n\n  Transport.prototype.clearTimeouts = function () {\n    this.clearCloseTimeout();\n\n    if (this.reopenTimeout) {\n      clearTimeout(this.reopenTimeout);\n    }\n  };\n\n  /**\n   * Sends a packet\n   *\n   * @param {Object} packet object.\n   * @api private\n   */\n\n  Transport.prototype.packet = function (packet) {\n    this.send(io.parser.encodePacket(packet));\n  };\n\n  /**\n   * Send the received heartbeat message back to server. So the server\n   * knows we are still connected.\n   *\n   * @param {String} heartbeat Heartbeat response from the server.\n   * @api private\n   */\n\n  Transport.prototype.onHeartbeat = function (heartbeat) {\n    this.packet({ type: 'heartbeat' });\n  };\n\n  /**\n   * Called when the transport opens.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onOpen = function () {\n    this.isOpen = true;\n    this.clearCloseTimeout();\n    this.socket.onOpen();\n  };\n\n  /**\n   * Notifies the base when the connection with the Socket.IO server\n   * has been disconnected.\n   *\n   * @api private\n   */\n\n  Transport.prototype.onClose = function () {\n    var self = this;\n\n    /* FIXME: reopen delay causing a infinit loop\n    this.reopenTimeout = setTimeout(function () {\n      self.open();\n    }, this.socket.options['reopen delay']);*/\n\n    this.isOpen = false;\n    this.socket.onClose();\n    this.onDisconnect();\n  };\n\n  /**\n   * Generates a connection url based on the Socket.IO URL Protocol.\n   * See <https://github.com/learnboost/socket.io-node/> for more details.\n   *\n   * @returns {String} Connection url\n   * @api private\n   */\n\n  Transport.prototype.prepareUrl = function () {\n    var options = this.socket.options;\n\n    return this.scheme() + '://'\n      + options.host + ':' + options.port + '/'\n      + options.resource + '/' + io.protocol\n      + '/' + this.name + '/' + this.sessid;\n  };\n\n  /**\n   * Checks if the transport is ready to start a connection.\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  Transport.prototype.ready = function (socket, fn) {\n    fn.call(this);\n  };\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.Socket = Socket;\n\n  /**\n   * Create a new `Socket.IO client` which can establish a persistent\n   * connection with a Socket.IO enabled server.\n   *\n   * @api public\n   */\n\n  function Socket (options) {\n    this.options = {\n        port: 80\n      , secure: false\n      , document: 'document' in global ? document : false\n      , resource: 'socket.io'\n      , transports: io.transports\n      , 'connect timeout': 10000\n      , 'try multiple transports': true\n      , 'reconnect': true\n      , 'reconnection delay': 500\n      , 'reconnection limit': Infinity\n      , 'reopen delay': 3000\n      , 'max reconnection attempts': 10\n      , 'sync disconnect on unload': false\n      , 'auto connect': true\n      , 'flash policy port': 10843\n      , 'manualFlush': false\n    };\n\n    io.util.merge(this.options, options);\n\n    this.connected = false;\n    this.open = false;\n    this.connecting = false;\n    this.reconnecting = false;\n    this.namespaces = {};\n    this.buffer = [];\n    this.doBuffer = false;\n\n    if (this.options['sync disconnect on unload'] &&\n        (!this.isXDomain() || io.util.ua.hasCORS)) {\n      var self = this;\n      io.util.on(global, 'beforeunload', function () {\n        self.disconnectSync();\n      }, false);\n    }\n\n    if (this.options['auto connect']) {\n      this.connect();\n    }\n};\n\n  /**\n   * Apply EventEmitter mixin.\n   */\n\n  io.util.mixin(Socket, io.EventEmitter);\n\n  /**\n   * Returns a namespace listener/emitter for this socket\n   *\n   * @api public\n   */\n\n  Socket.prototype.of = function (name) {\n    if (!this.namespaces[name]) {\n      this.namespaces[name] = new io.SocketNamespace(this, name);\n\n      if (name !== '') {\n        this.namespaces[name].packet({ type: 'connect' });\n      }\n    }\n\n    return this.namespaces[name];\n  };\n\n  /**\n   * Emits the given event to the Socket and all namespaces\n   *\n   * @api private\n   */\n\n  Socket.prototype.publish = function () {\n    this.emit.apply(this, arguments);\n\n    var nsp;\n\n    for (var i in this.namespaces) {\n      if (this.namespaces.hasOwnProperty(i)) {\n        nsp = this.of(i);\n        nsp.$emit.apply(nsp, arguments);\n      }\n    }\n  };\n\n  /**\n   * Performs the handshake\n   *\n   * @api private\n   */\n\n  function empty () { };\n\n  Socket.prototype.handshake = function (fn) {\n    var self = this\n      , options = this.options;\n\n    function complete (data) {\n      if (data instanceof Error) {\n        self.connecting = false;\n        self.onError(data.message);\n      } else {\n        fn.apply(null, data.split(':'));\n      }\n    };\n\n    var url = [\n          'http' + (options.secure ? 's' : '') + ':/'\n        , options.host + ':' + options.port\n        , options.resource\n        , io.protocol\n        , io.util.query(this.options.query, 't=' + +new Date)\n      ].join('/');\n\n    if (this.isXDomain() && !io.util.ua.hasCORS) {\n      var insertAt = document.getElementsByTagName('script')[0]\n        , script = document.createElement('script');\n\n      script.src = url + '&jsonp=' + io.j.length;\n      insertAt.parentNode.insertBefore(script, insertAt);\n\n      io.j.push(function (data) {\n        complete(data);\n        script.parentNode.removeChild(script);\n      });\n    } else {\n      var xhr = io.util.request();\n\n      xhr.open('GET', url, true);\n      if (this.isXDomain()) {\n        xhr.withCredentials = true;\n      }\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState == 4) {\n          xhr.onreadystatechange = empty;\n\n          if (xhr.status == 200) {\n            complete(xhr.responseText);\n          } else if (xhr.status == 403) {\n            self.onError(xhr.responseText);\n          } else {\n            self.connecting = false;            \n            !self.reconnecting && self.onError(xhr.responseText);\n          }\n        }\n      };\n      xhr.send(null);\n    }\n  };\n\n  /**\n   * Find an available transport based on the options supplied in the constructor.\n   *\n   * @api private\n   */\n\n  Socket.prototype.getTransport = function (override) {\n    var transports = override || this.transports, match;\n\n    for (var i = 0, transport; transport = transports[i]; i++) {\n      if (io.Transport[transport]\n        && io.Transport[transport].check(this)\n        && (!this.isXDomain() || io.Transport[transport].xdomainCheck(this))) {\n        return new io.Transport[transport](this, this.sessionid);\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * Connects to the server.\n   *\n   * @param {Function} [fn] Callback.\n   * @returns {io.Socket}\n   * @api public\n   */\n\n  Socket.prototype.connect = function (fn) {\n    if (this.connecting) {\n      return this;\n    }\n\n    var self = this;\n    self.connecting = true;\n    \n    this.handshake(function (sid, heartbeat, close, transports) {\n      self.sessionid = sid;\n      self.closeTimeout = close * 1000;\n      self.heartbeatTimeout = heartbeat * 1000;\n      if(!self.transports)\n          self.transports = self.origTransports = (transports ? io.util.intersect(\n              transports.split(',')\n            , self.options.transports\n          ) : self.options.transports);\n\n      self.setHeartbeatTimeout();\n\n      function connect (transports){\n        if (self.transport) self.transport.clearTimeouts();\n\n        self.transport = self.getTransport(transports);\n        if (!self.transport) return self.publish('connect_failed');\n\n        // once the transport is ready\n        self.transport.ready(self, function () {\n          self.connecting = true;\n          self.publish('connecting', self.transport.name);\n          self.transport.open();\n\n          if (self.options['connect timeout']) {\n            self.connectTimeoutTimer = setTimeout(function () {\n              if (!self.connected) {\n                self.connecting = false;\n\n                if (self.options['try multiple transports']) {\n                  var remaining = self.transports;\n\n                  while (remaining.length > 0 && remaining.splice(0,1)[0] !=\n                         self.transport.name) {}\n\n                    if (remaining.length){\n                      connect(remaining);\n                    } else {\n                      self.publish('connect_failed');\n                    }\n                }\n              }\n            }, self.options['connect timeout']);\n          }\n        });\n      }\n\n      connect(self.transports);\n\n      self.once('connect', function (){\n        clearTimeout(self.connectTimeoutTimer);\n\n        fn && typeof fn == 'function' && fn();\n      });\n    });\n\n    return this;\n  };\n\n  /**\n   * Clears and sets a new heartbeat timeout using the value given by the\n   * server during the handshake.\n   *\n   * @api private\n   */\n\n  Socket.prototype.setHeartbeatTimeout = function () {\n    clearTimeout(this.heartbeatTimeoutTimer);\n    if(this.transport && !this.transport.heartbeats()) return;\n\n    var self = this;\n    this.heartbeatTimeoutTimer = setTimeout(function () {\n      self.transport.onClose();\n    }, this.heartbeatTimeout);\n  };\n\n  /**\n   * Sends a message.\n   *\n   * @param {Object} data packet.\n   * @returns {io.Socket}\n   * @api public\n   */\n\n  Socket.prototype.packet = function (data) {\n    if (this.connected && !this.doBuffer) {\n      this.transport.packet(data);\n    } else {\n      this.buffer.push(data);\n    }\n\n    return this;\n  };\n\n  /**\n   * Sets buffer state\n   *\n   * @api private\n   */\n\n  Socket.prototype.setBuffer = function (v) {\n    this.doBuffer = v;\n\n    if (!v && this.connected && this.buffer.length) {\n      if (!this.options['manualFlush']) {\n        this.flushBuffer();\n      }\n    }\n  };\n\n  /**\n   * Flushes the buffer data over the wire.\n   * To be invoked manually when 'manualFlush' is set to true.\n   *\n   * @api public\n   */\n\n  Socket.prototype.flushBuffer = function() {\n    this.transport.payload(this.buffer);\n    this.buffer = [];\n  };\n  \n\n  /**\n   * Disconnect the established connect.\n   *\n   * @returns {io.Socket}\n   * @api public\n   */\n\n  Socket.prototype.disconnect = function () {\n    if (this.connected || this.connecting) {\n      if (this.open) {\n        this.of('').packet({ type: 'disconnect' });\n      }\n\n      // handle disconnection immediately\n      this.onDisconnect('booted');\n    }\n\n    return this;\n  };\n\n  /**\n   * Disconnects the socket with a sync XHR.\n   *\n   * @api private\n   */\n\n  Socket.prototype.disconnectSync = function () {\n    // ensure disconnection\n    var xhr = io.util.request();\n    var uri = [\n        'http' + (this.options.secure ? 's' : '') + ':/'\n      , this.options.host + ':' + this.options.port\n      , this.options.resource\n      , io.protocol\n      , ''\n      , this.sessionid\n    ].join('/') + '/?disconnect=1';\n\n    xhr.open('GET', uri, false);\n    xhr.send(null);\n\n    // handle disconnection immediately\n    this.onDisconnect('booted');\n  };\n\n  /**\n   * Check if we need to use cross domain enabled transports. Cross domain would\n   * be a different port or different domain name.\n   *\n   * @returns {Boolean}\n   * @api private\n   */\n\n  Socket.prototype.isXDomain = function () {\n\n    var port = global.location.port ||\n      ('https:' == global.location.protocol ? 443 : 80);\n\n    return this.options.host !== global.location.hostname \n      || this.options.port != port;\n  };\n\n  /**\n   * Called upon handshake.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onConnect = function () {\n    if (!this.connected) {\n      this.connected = true;\n      this.connecting = false;\n      if (!this.doBuffer) {\n        // make sure to flush the buffer\n        this.setBuffer(false);\n      }\n      this.emit('connect');\n    }\n  };\n\n  /**\n   * Called when the transport opens\n   *\n   * @api private\n   */\n\n  Socket.prototype.onOpen = function () {\n    this.open = true;\n  };\n\n  /**\n   * Called when the transport closes.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onClose = function () {\n    this.open = false;\n    clearTimeout(this.heartbeatTimeoutTimer);\n  };\n\n  /**\n   * Called when the transport first opens a connection\n   *\n   * @param text\n   */\n\n  Socket.prototype.onPacket = function (packet) {\n    this.of(packet.endpoint).onPacket(packet);\n  };\n\n  /**\n   * Handles an error.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onError = function (err) {\n    if (err && err.advice) {\n      if (err.advice === 'reconnect' && (this.connected || this.connecting)) {\n        this.disconnect();\n        if (this.options.reconnect) {\n          this.reconnect();\n        }\n      }\n    }\n\n    this.publish('error', err && err.reason ? err.reason : err);\n  };\n\n  /**\n   * Called when the transport disconnects.\n   *\n   * @api private\n   */\n\n  Socket.prototype.onDisconnect = function (reason) {\n    var wasConnected = this.connected\n      , wasConnecting = this.connecting;\n\n    this.connected = false;\n    this.connecting = false;\n    this.open = false;\n\n    if (wasConnected || wasConnecting) {\n      this.transport.close();\n      this.transport.clearTimeouts();\n      if (wasConnected) {\n        this.publish('disconnect', reason);\n\n        if ('booted' != reason && this.options.reconnect && !this.reconnecting) {\n          this.reconnect();\n        }\n      }\n    }\n  };\n\n  /**\n   * Called upon reconnection.\n   *\n   * @api private\n   */\n\n  Socket.prototype.reconnect = function () {\n    this.reconnecting = true;\n    this.reconnectionAttempts = 0;\n    this.reconnectionDelay = this.options['reconnection delay'];\n\n    var self = this\n      , maxAttempts = this.options['max reconnection attempts']\n      , tryMultiple = this.options['try multiple transports']\n      , limit = this.options['reconnection limit'];\n\n    function reset () {\n      if (self.connected) {\n        for (var i in self.namespaces) {\n          if (self.namespaces.hasOwnProperty(i) && '' !== i) {\n              self.namespaces[i].packet({ type: 'connect' });\n          }\n        }\n        self.publish('reconnect', self.transport.name, self.reconnectionAttempts);\n      }\n\n      clearTimeout(self.reconnectionTimer);\n\n      self.removeListener('connect_failed', maybeReconnect);\n      self.removeListener('connect', maybeReconnect);\n\n      self.reconnecting = false;\n\n      delete self.reconnectionAttempts;\n      delete self.reconnectionDelay;\n      delete self.reconnectionTimer;\n      delete self.redoTransports;\n\n      self.options['try multiple transports'] = tryMultiple;\n    };\n\n    function maybeReconnect () {\n      if (!self.reconnecting) {\n        return;\n      }\n\n      if (self.connected) {\n        return reset();\n      };\n\n      if (self.connecting && self.reconnecting) {\n        return self.reconnectionTimer = setTimeout(maybeReconnect, 1000);\n      }\n\n      if (self.reconnectionAttempts++ >= maxAttempts) {\n        if (!self.redoTransports) {\n          self.on('connect_failed', maybeReconnect);\n          self.options['try multiple transports'] = true;\n          self.transports = self.origTransports;\n          self.transport = self.getTransport();\n          self.redoTransports = true;\n          self.connect();\n        } else {\n          self.publish('reconnect_failed');\n          reset();\n        }\n      } else {\n        if (self.reconnectionDelay < limit) {\n          self.reconnectionDelay *= 2; // exponential back off\n        }\n\n        self.connect();\n        self.publish('reconnecting', self.reconnectionDelay, self.reconnectionAttempts);\n        self.reconnectionTimer = setTimeout(maybeReconnect, self.reconnectionDelay);\n      }\n    };\n\n    this.options['try multiple transports'] = false;\n    this.reconnectionTimer = setTimeout(maybeReconnect, this.reconnectionDelay);\n\n    this.on('connect', maybeReconnect);\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.SocketNamespace = SocketNamespace;\n\n  /**\n   * Socket namespace constructor.\n   *\n   * @constructor\n   * @api public\n   */\n\n  function SocketNamespace (socket, name) {\n    this.socket = socket;\n    this.name = name || '';\n    this.flags = {};\n    this.json = new Flag(this, 'json');\n    this.ackPackets = 0;\n    this.acks = {};\n  };\n\n  /**\n   * Apply EventEmitter mixin.\n   */\n\n  io.util.mixin(SocketNamespace, io.EventEmitter);\n\n  /**\n   * Copies emit since we override it\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.$emit = io.EventEmitter.prototype.emit;\n\n  /**\n   * Creates a new namespace, by proxying the request to the socket. This\n   * allows us to use the synax as we do on the server.\n   *\n   * @api public\n   */\n\n  SocketNamespace.prototype.of = function () {\n    return this.socket.of.apply(this.socket, arguments);\n  };\n\n  /**\n   * Sends a packet.\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.packet = function (packet) {\n    packet.endpoint = this.name;\n    this.socket.packet(packet);\n    this.flags = {};\n    return this;\n  };\n\n  /**\n   * Sends a message\n   *\n   * @api public\n   */\n\n  SocketNamespace.prototype.send = function (data, fn) {\n    var packet = {\n        type: this.flags.json ? 'json' : 'message'\n      , data: data\n    };\n\n    if ('function' == typeof fn) {\n      packet.id = ++this.ackPackets;\n      packet.ack = true;\n      this.acks[packet.id] = fn;\n    }\n\n    return this.packet(packet);\n  };\n\n  /**\n   * Emits an event\n   *\n   * @api public\n   */\n  \n  SocketNamespace.prototype.emit = function (name) {\n    var args = Array.prototype.slice.call(arguments, 1)\n      , lastArg = args[args.length - 1]\n      , packet = {\n            type: 'event'\n          , name: name\n        };\n\n    if ('function' == typeof lastArg) {\n      packet.id = ++this.ackPackets;\n      packet.ack = 'data';\n      this.acks[packet.id] = lastArg;\n      args = args.slice(0, args.length - 1);\n    }\n\n    packet.args = args;\n\n    return this.packet(packet);\n  };\n\n  /**\n   * Disconnects the namespace\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.disconnect = function () {\n    if (this.name === '') {\n      this.socket.disconnect();\n    } else {\n      this.packet({ type: 'disconnect' });\n      this.$emit('disconnect');\n    }\n\n    return this;\n  };\n\n  /**\n   * Handles a packet\n   *\n   * @api private\n   */\n\n  SocketNamespace.prototype.onPacket = function (packet) {\n    var self = this;\n\n    function ack () {\n      self.packet({\n          type: 'ack'\n        , args: io.util.toArray(arguments)\n        , ackId: packet.id\n      });\n    };\n\n    switch (packet.type) {\n      case 'connect':\n        this.$emit('connect');\n        break;\n\n      case 'disconnect':\n        if (this.name === '') {\n          this.socket.onDisconnect(packet.reason || 'booted');\n        } else {\n          this.$emit('disconnect', packet.reason);\n        }\n        break;\n\n      case 'message':\n      case 'json':\n        var params = ['message', packet.data];\n\n        if (packet.ack == 'data') {\n          params.push(ack);\n        } else if (packet.ack) {\n          this.packet({ type: 'ack', ackId: packet.id });\n        }\n\n        this.$emit.apply(this, params);\n        break;\n\n      case 'event':\n        var params = [packet.name].concat(packet.args);\n\n        if (packet.ack == 'data')\n          params.push(ack);\n\n        this.$emit.apply(this, params);\n        break;\n\n      case 'ack':\n        if (this.acks[packet.ackId]) {\n          this.acks[packet.ackId].apply(this, packet.args);\n          delete this.acks[packet.ackId];\n        }\n        break;\n\n      case 'error':\n        if (packet.advice){\n          this.socket.onError(packet);\n        } else {\n          if (packet.reason == 'unauthorized') {\n            this.$emit('connect_failed', packet.reason);\n          } else {\n            this.$emit('error', packet.reason);\n          }\n        }\n        break;\n    }\n  };\n\n  /**\n   * Flag interface.\n   *\n   * @api private\n   */\n\n  function Flag (nsp, name) {\n    this.namespace = nsp;\n    this.name = name;\n  };\n\n  /**\n   * Send a message\n   *\n   * @api public\n   */\n\n  Flag.prototype.send = function () {\n    this.namespace.flags[this.name] = true;\n    this.namespace.send.apply(this.namespace, arguments);\n  };\n\n  /**\n   * Emit an event\n   *\n   * @api public\n   */\n\n  Flag.prototype.emit = function () {\n    this.namespace.flags[this.name] = true;\n    this.namespace.emit.apply(this.namespace, arguments);\n  };\n\n})(\n    'undefined' != typeof io ? io : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.websocket = WS;\n\n  /**\n   * The WebSocket transport uses the HTML5 WebSocket API to establish an\n   * persistent connection with the Socket.IO server. This transport will also\n   * be inherited by the FlashSocket fallback as it provides a API compatible\n   * polyfill for the WebSockets.\n   *\n   * @constructor\n   * @extends {io.Transport}\n   * @api public\n   */\n\n  function WS (socket) {\n    io.Transport.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from Transport.\n   */\n\n  io.util.inherit(WS, io.Transport);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  WS.prototype.name = 'websocket';\n\n  /**\n   * Initializes a new `WebSocket` connection with the Socket.IO server. We attach\n   * all the appropriate listeners to handle the responses from the server.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  WS.prototype.open = function () {\n    var query = io.util.query(this.socket.options.query)\n      , self = this\n      , Socket\n\n\n    if (!Socket) {\n      Socket = global.MozWebSocket || global.WebSocket;\n    }\n\n    this.websocket = new Socket(this.prepareUrl() + query);\n\n    this.websocket.onopen = function () {\n      self.onOpen();\n      self.socket.setBuffer(false);\n    };\n    this.websocket.onmessage = function (ev) {\n      self.onData(ev.data);\n    };\n    this.websocket.onclose = function () {\n      self.onClose();\n      self.socket.setBuffer(true);\n    };\n    this.websocket.onerror = function (e) {\n      self.onError(e);\n    };\n\n    return this;\n  };\n\n  /**\n   * Send a message to the Socket.IO server. The message will automatically be\n   * encoded in the correct message format.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  // Do to a bug in the current IDevices browser, we need to wrap the send in a \n  // setTimeout, when they resume from sleeping the browser will crash if \n  // we don't allow the browser time to detect the socket has been closed\n  if (io.util.ua.iDevice) {\n    WS.prototype.send = function (data) {\n      var self = this;\n      setTimeout(function() {\n         self.websocket.send(data);\n      },0);\n      return this;\n    };\n  } else {\n    WS.prototype.send = function (data) {\n      this.websocket.send(data);\n      return this;\n    };\n  }\n\n  /**\n   * Payload\n   *\n   * @api private\n   */\n\n  WS.prototype.payload = function (arr) {\n    for (var i = 0, l = arr.length; i < l; i++) {\n      this.packet(arr[i]);\n    }\n    return this;\n  };\n\n  /**\n   * Disconnect the established `WebSocket` connection.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  WS.prototype.close = function () {\n    this.websocket.close();\n    return this;\n  };\n\n  /**\n   * Handle the errors that `WebSocket` might be giving when we\n   * are attempting to connect or send messages.\n   *\n   * @param {Error} e The error.\n   * @api private\n   */\n\n  WS.prototype.onError = function (e) {\n    this.socket.onError(e);\n  };\n\n  /**\n   * Returns the appropriate scheme for the URI generation.\n   *\n   * @api private\n   */\n  WS.prototype.scheme = function () {\n    return this.socket.options.secure ? 'wss' : 'ws';\n  };\n\n  /**\n   * Checks if the browser has support for native `WebSockets` and that\n   * it's not the polyfill created for the FlashSocket transport.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  WS.check = function () {\n    return ('WebSocket' in global && !('__addTask' in WebSocket))\n          || 'MozWebSocket' in global;\n  };\n\n  /**\n   * Check if the `WebSocket` transport support cross domain communications.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  WS.xdomainCheck = function () {\n    return true;\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('websocket');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.flashsocket = Flashsocket;\n\n  /**\n   * The FlashSocket transport. This is a API wrapper for the HTML5 WebSocket\n   * specification. It uses a .swf file to communicate with the server. If you want\n   * to serve the .swf file from a other server than where the Socket.IO script is\n   * coming from you need to use the insecure version of the .swf. More information\n   * about this can be found on the github page.\n   *\n   * @constructor\n   * @extends {io.Transport.websocket}\n   * @api public\n   */\n\n  function Flashsocket () {\n    io.Transport.websocket.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from Transport.\n   */\n\n  io.util.inherit(Flashsocket, io.Transport.websocket);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  Flashsocket.prototype.name = 'flashsocket';\n\n  /**\n   * Disconnect the established `FlashSocket` connection. This is done by adding a \n   * new task to the FlashSocket. The rest will be handled off by the `WebSocket` \n   * transport.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  Flashsocket.prototype.open = function () {\n    var self = this\n      , args = arguments;\n\n    WebSocket.__addTask(function () {\n      io.Transport.websocket.prototype.open.apply(self, args);\n    });\n    return this;\n  };\n  \n  /**\n   * Sends a message to the Socket.IO server. This is done by adding a new\n   * task to the FlashSocket. The rest will be handled off by the `WebSocket` \n   * transport.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  Flashsocket.prototype.send = function () {\n    var self = this, args = arguments;\n    WebSocket.__addTask(function () {\n      io.Transport.websocket.prototype.send.apply(self, args);\n    });\n    return this;\n  };\n\n  /**\n   * Disconnects the established `FlashSocket` connection.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  Flashsocket.prototype.close = function () {\n    WebSocket.__tasks.length = 0;\n    io.Transport.websocket.prototype.close.call(this);\n    return this;\n  };\n\n  /**\n   * The WebSocket fall back needs to append the flash container to the body\n   * element, so we need to make sure we have access to it. Or defer the call\n   * until we are sure there is a body element.\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  Flashsocket.prototype.ready = function (socket, fn) {\n    function init () {\n      var options = socket.options\n        , port = options['flash policy port']\n        , path = [\n              'http' + (options.secure ? 's' : '') + ':/'\n            , options.host + ':' + options.port\n            , options.resource\n            , 'static/flashsocket'\n            , 'WebSocketMain' + (socket.isXDomain() ? 'Insecure' : '') + '.swf'\n          ];\n\n      // Only start downloading the swf file when the checked that this browser\n      // actually supports it\n      if (!Flashsocket.loaded) {\n        if (typeof WEB_SOCKET_SWF_LOCATION === 'undefined') {\n          // Set the correct file based on the XDomain settings\n          WEB_SOCKET_SWF_LOCATION = path.join('/');\n        }\n\n        if (port !== 843) {\n          WebSocket.loadFlashPolicyFile('xmlsocket://' + options.host + ':' + port);\n        }\n\n        WebSocket.__initialize();\n        Flashsocket.loaded = true;\n      }\n\n      fn.call(self);\n    }\n\n    var self = this;\n    if (document.body) return init();\n\n    io.util.load(init);\n  };\n\n  /**\n   * Check if the FlashSocket transport is supported as it requires that the Adobe\n   * Flash Player plug-in version `10.0.0` or greater is installed. And also check if\n   * the polyfill is correctly loaded.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  Flashsocket.check = function () {\n    if (\n        typeof WebSocket == 'undefined'\n      || !('__initialize' in WebSocket) || !swfobject\n    ) return false;\n\n    return swfobject.getFlashPlayerVersion().major >= 10;\n  };\n\n  /**\n   * Check if the FlashSocket transport can be used as cross domain / cross origin \n   * transport. Because we can't see which type (secure or insecure) of .swf is used\n   * we will just return true.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  Flashsocket.xdomainCheck = function () {\n    return true;\n  };\n\n  /**\n   * Disable AUTO_INITIALIZATION\n   */\n\n  if (typeof window != 'undefined') {\n    WEB_SOCKET_DISABLE_AUTO_INITIALIZATION = true;\n  }\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('flashsocket');\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n/*\tSWFObject v2.2 <http://code.google.com/p/swfobject/> \n\tis released under the MIT License <http://www.opensource.org/licenses/mit-license.php> \n*/\nif ('undefined' != typeof window) {\nvar swfobject=function(){var D=\"undefined\",r=\"object\",S=\"Shockwave Flash\",W=\"ShockwaveFlash.ShockwaveFlash\",q=\"application/x-shockwave-flash\",R=\"SWFObjectExprInst\",x=\"onreadystatechange\",O=window,j=document,t=navigator,T=false,U=[h],o=[],N=[],I=[],l,Q,E,B,J=false,a=false,n,G,m=true,M=function(){var aa=typeof j.getElementById!=D&&typeof j.getElementsByTagName!=D&&typeof j.createElement!=D,ah=t.userAgent.toLowerCase(),Y=t.platform.toLowerCase(),ae=Y?/win/.test(Y):/win/.test(ah),ac=Y?/mac/.test(Y):/mac/.test(ah),af=/webkit/.test(ah)?parseFloat(ah.replace(/^.*webkit\\/(\\d+(\\.\\d+)?).*$/,\"$1\")):false,X=!+\"\\v1\",ag=[0,0,0],ab=null;if(typeof t.plugins!=D&&typeof t.plugins[S]==r){ab=t.plugins[S].description;if(ab&&!(typeof t.mimeTypes!=D&&t.mimeTypes[q]&&!t.mimeTypes[q].enabledPlugin)){T=true;X=false;ab=ab.replace(/^.*\\s+(\\S+\\s+\\S+$)/,\"$1\");ag[0]=parseInt(ab.replace(/^(.*)\\..*$/,\"$1\"),10);ag[1]=parseInt(ab.replace(/^.*\\.(.*)\\s.*$/,\"$1\"),10);ag[2]=/[a-zA-Z]/.test(ab)?parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/,\"$1\"),10):0}}else{if(typeof O[(['Active'].concat('Object').join('X'))]!=D){try{var ad=new window[(['Active'].concat('Object').join('X'))](W);if(ad){ab=ad.GetVariable(\"$version\");if(ab){X=true;ab=ab.split(\" \")[1].split(\",\");ag=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}}catch(Z){}}}return{w3:aa,pv:ag,wk:af,ie:X,win:ae,mac:ac}}(),k=function(){if(!M.w3){return}if((typeof j.readyState!=D&&j.readyState==\"complete\")||(typeof j.readyState==D&&(j.getElementsByTagName(\"body\")[0]||j.body))){f()}if(!J){if(typeof j.addEventListener!=D){j.addEventListener(\"DOMContentLoaded\",f,false)}if(M.ie&&M.win){j.attachEvent(x,function(){if(j.readyState==\"complete\"){j.detachEvent(x,arguments.callee);f()}});if(O==top){(function(){if(J){return}try{j.documentElement.doScroll(\"left\")}catch(X){setTimeout(arguments.callee,0);return}f()})()}}if(M.wk){(function(){if(J){return}if(!/loaded|complete/.test(j.readyState)){setTimeout(arguments.callee,0);return}f()})()}s(f)}}();function f(){if(J){return}try{var Z=j.getElementsByTagName(\"body\")[0].appendChild(C(\"span\"));Z.parentNode.removeChild(Z)}catch(aa){return}J=true;var X=U.length;for(var Y=0;Y<X;Y++){U[Y]()}}function K(X){if(J){X()}else{U[U.length]=X}}function s(Y){if(typeof O.addEventListener!=D){O.addEventListener(\"load\",Y,false)}else{if(typeof j.addEventListener!=D){j.addEventListener(\"load\",Y,false)}else{if(typeof O.attachEvent!=D){i(O,\"onload\",Y)}else{if(typeof O.onload==\"function\"){var X=O.onload;O.onload=function(){X();Y()}}else{O.onload=Y}}}}}function h(){if(T){V()}else{H()}}function V(){var X=j.getElementsByTagName(\"body\")[0];var aa=C(r);aa.setAttribute(\"type\",q);var Z=X.appendChild(aa);if(Z){var Y=0;(function(){if(typeof Z.GetVariable!=D){var ab=Z.GetVariable(\"$version\");if(ab){ab=ab.split(\" \")[1].split(\",\");M.pv=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}else{if(Y<10){Y++;setTimeout(arguments.callee,10);return}}X.removeChild(aa);Z=null;H()})()}else{H()}}function H(){var ag=o.length;if(ag>0){for(var af=0;af<ag;af++){var Y=o[af].id;var ab=o[af].callbackFn;var aa={success:false,id:Y};if(M.pv[0]>0){var ae=c(Y);if(ae){if(F(o[af].swfVersion)&&!(M.wk&&M.wk<312)){w(Y,true);if(ab){aa.success=true;aa.ref=z(Y);ab(aa)}}else{if(o[af].expressInstall&&A()){var ai={};ai.data=o[af].expressInstall;ai.width=ae.getAttribute(\"width\")||\"0\";ai.height=ae.getAttribute(\"height\")||\"0\";if(ae.getAttribute(\"class\")){ai.styleclass=ae.getAttribute(\"class\")}if(ae.getAttribute(\"align\")){ai.align=ae.getAttribute(\"align\")}var ah={};var X=ae.getElementsByTagName(\"param\");var ac=X.length;for(var ad=0;ad<ac;ad++){if(X[ad].getAttribute(\"name\").toLowerCase()!=\"movie\"){ah[X[ad].getAttribute(\"name\")]=X[ad].getAttribute(\"value\")}}P(ai,ah,Y,ab)}else{p(ae);if(ab){ab(aa)}}}}}else{w(Y,true);if(ab){var Z=z(Y);if(Z&&typeof Z.SetVariable!=D){aa.success=true;aa.ref=Z}ab(aa)}}}}}function z(aa){var X=null;var Y=c(aa);if(Y&&Y.nodeName==\"OBJECT\"){if(typeof Y.SetVariable!=D){X=Y}else{var Z=Y.getElementsByTagName(r)[0];if(Z){X=Z}}}return X}function A(){return !a&&F(\"6.0.65\")&&(M.win||M.mac)&&!(M.wk&&M.wk<312)}function P(aa,ab,X,Z){a=true;E=Z||null;B={success:false,id:X};var ae=c(X);if(ae){if(ae.nodeName==\"OBJECT\"){l=g(ae);Q=null}else{l=ae;Q=X}aa.id=R;if(typeof aa.width==D||(!/%$/.test(aa.width)&&parseInt(aa.width,10)<310)){aa.width=\"310\"}if(typeof aa.height==D||(!/%$/.test(aa.height)&&parseInt(aa.height,10)<137)){aa.height=\"137\"}j.title=j.title.slice(0,47)+\" - Flash Player Installation\";var ad=M.ie&&M.win?(['Active'].concat('').join('X')):\"PlugIn\",ac=\"MMredirectURL=\"+O.location.toString().replace(/&/g,\"%26\")+\"&MMplayerType=\"+ad+\"&MMdoctitle=\"+j.title;if(typeof ab.flashvars!=D){ab.flashvars+=\"&\"+ac}else{ab.flashvars=ac}if(M.ie&&M.win&&ae.readyState!=4){var Y=C(\"div\");X+=\"SWFObjectNew\";Y.setAttribute(\"id\",X);ae.parentNode.insertBefore(Y,ae);ae.style.display=\"none\";(function(){if(ae.readyState==4){ae.parentNode.removeChild(ae)}else{setTimeout(arguments.callee,10)}})()}u(aa,ab,X)}}function p(Y){if(M.ie&&M.win&&Y.readyState!=4){var X=C(\"div\");Y.parentNode.insertBefore(X,Y);X.parentNode.replaceChild(g(Y),X);Y.style.display=\"none\";(function(){if(Y.readyState==4){Y.parentNode.removeChild(Y)}else{setTimeout(arguments.callee,10)}})()}else{Y.parentNode.replaceChild(g(Y),Y)}}function g(ab){var aa=C(\"div\");if(M.win&&M.ie){aa.innerHTML=ab.innerHTML}else{var Y=ab.getElementsByTagName(r)[0];if(Y){var ad=Y.childNodes;if(ad){var X=ad.length;for(var Z=0;Z<X;Z++){if(!(ad[Z].nodeType==1&&ad[Z].nodeName==\"PARAM\")&&!(ad[Z].nodeType==8)){aa.appendChild(ad[Z].cloneNode(true))}}}}}return aa}function u(ai,ag,Y){var X,aa=c(Y);if(M.wk&&M.wk<312){return X}if(aa){if(typeof ai.id==D){ai.id=Y}if(M.ie&&M.win){var ah=\"\";for(var ae in ai){if(ai[ae]!=Object.prototype[ae]){if(ae.toLowerCase()==\"data\"){ag.movie=ai[ae]}else{if(ae.toLowerCase()==\"styleclass\"){ah+=' class=\"'+ai[ae]+'\"'}else{if(ae.toLowerCase()!=\"classid\"){ah+=\" \"+ae+'=\"'+ai[ae]+'\"'}}}}}var af=\"\";for(var ad in ag){if(ag[ad]!=Object.prototype[ad]){af+='<param name=\"'+ad+'\" value=\"'+ag[ad]+'\" />'}}aa.outerHTML='<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"'+ah+\">\"+af+\"</object>\";N[N.length]=ai.id;X=c(ai.id)}else{var Z=C(r);Z.setAttribute(\"type\",q);for(var ac in ai){if(ai[ac]!=Object.prototype[ac]){if(ac.toLowerCase()==\"styleclass\"){Z.setAttribute(\"class\",ai[ac])}else{if(ac.toLowerCase()!=\"classid\"){Z.setAttribute(ac,ai[ac])}}}}for(var ab in ag){if(ag[ab]!=Object.prototype[ab]&&ab.toLowerCase()!=\"movie\"){e(Z,ab,ag[ab])}}aa.parentNode.replaceChild(Z,aa);X=Z}}return X}function e(Z,X,Y){var aa=C(\"param\");aa.setAttribute(\"name\",X);aa.setAttribute(\"value\",Y);Z.appendChild(aa)}function y(Y){var X=c(Y);if(X&&X.nodeName==\"OBJECT\"){if(M.ie&&M.win){X.style.display=\"none\";(function(){if(X.readyState==4){b(Y)}else{setTimeout(arguments.callee,10)}})()}else{X.parentNode.removeChild(X)}}}function b(Z){var Y=c(Z);if(Y){for(var X in Y){if(typeof Y[X]==\"function\"){Y[X]=null}}Y.parentNode.removeChild(Y)}}function c(Z){var X=null;try{X=j.getElementById(Z)}catch(Y){}return X}function C(X){return j.createElement(X)}function i(Z,X,Y){Z.attachEvent(X,Y);I[I.length]=[Z,X,Y]}function F(Z){var Y=M.pv,X=Z.split(\".\");X[0]=parseInt(X[0],10);X[1]=parseInt(X[1],10)||0;X[2]=parseInt(X[2],10)||0;return(Y[0]>X[0]||(Y[0]==X[0]&&Y[1]>X[1])||(Y[0]==X[0]&&Y[1]==X[1]&&Y[2]>=X[2]))?true:false}function v(ac,Y,ad,ab){if(M.ie&&M.mac){return}var aa=j.getElementsByTagName(\"head\")[0];if(!aa){return}var X=(ad&&typeof ad==\"string\")?ad:\"screen\";if(ab){n=null;G=null}if(!n||G!=X){var Z=C(\"style\");Z.setAttribute(\"type\",\"text/css\");Z.setAttribute(\"media\",X);n=aa.appendChild(Z);if(M.ie&&M.win&&typeof j.styleSheets!=D&&j.styleSheets.length>0){n=j.styleSheets[j.styleSheets.length-1]}G=X}if(M.ie&&M.win){if(n&&typeof n.addRule==r){n.addRule(ac,Y)}}else{if(n&&typeof j.createTextNode!=D){n.appendChild(j.createTextNode(ac+\" {\"+Y+\"}\"))}}}function w(Z,X){if(!m){return}var Y=X?\"visible\":\"hidden\";if(J&&c(Z)){c(Z).style.visibility=Y}else{v(\"#\"+Z,\"visibility:\"+Y)}}function L(Y){var Z=/[\\\\\\\"<>\\.;]/;var X=Z.exec(Y)!=null;return X&&typeof encodeURIComponent!=D?encodeURIComponent(Y):Y}var d=function(){if(M.ie&&M.win){window.attachEvent(\"onunload\",function(){var ac=I.length;for(var ab=0;ab<ac;ab++){I[ab][0].detachEvent(I[ab][1],I[ab][2])}var Z=N.length;for(var aa=0;aa<Z;aa++){y(N[aa])}for(var Y in M){M[Y]=null}M=null;for(var X in swfobject){swfobject[X]=null}swfobject=null})}}();return{registerObject:function(ab,X,aa,Z){if(M.w3&&ab&&X){var Y={};Y.id=ab;Y.swfVersion=X;Y.expressInstall=aa;Y.callbackFn=Z;o[o.length]=Y;w(ab,false)}else{if(Z){Z({success:false,id:ab})}}},getObjectById:function(X){if(M.w3){return z(X)}},embedSWF:function(ab,ah,ae,ag,Y,aa,Z,ad,af,ac){var X={success:false,id:ah};if(M.w3&&!(M.wk&&M.wk<312)&&ab&&ah&&ae&&ag&&Y){w(ah,false);K(function(){ae+=\"\";ag+=\"\";var aj={};if(af&&typeof af===r){for(var al in af){aj[al]=af[al]}}aj.data=ab;aj.width=ae;aj.height=ag;var am={};if(ad&&typeof ad===r){for(var ak in ad){am[ak]=ad[ak]}}if(Z&&typeof Z===r){for(var ai in Z){if(typeof am.flashvars!=D){am.flashvars+=\"&\"+ai+\"=\"+Z[ai]}else{am.flashvars=ai+\"=\"+Z[ai]}}}if(F(Y)){var an=u(aj,am,ah);if(aj.id==ah){w(ah,true)}X.success=true;X.ref=an}else{if(aa&&A()){aj.data=aa;P(aj,am,ah,ac);return}else{w(ah,true)}}if(ac){ac(X)}})}else{if(ac){ac(X)}}},switchOffAutoHideShow:function(){m=false},ua:M,getFlashPlayerVersion:function(){return{major:M.pv[0],minor:M.pv[1],release:M.pv[2]}},hasFlashPlayerVersion:F,createSWF:function(Z,Y,X){if(M.w3){return u(Z,Y,X)}else{return undefined}},showExpressInstall:function(Z,aa,X,Y){if(M.w3&&A()){P(Z,aa,X,Y)}},removeSWF:function(X){if(M.w3){y(X)}},createCSS:function(aa,Z,Y,X){if(M.w3){v(aa,Z,Y,X)}},addDomLoadEvent:K,addLoadEvent:s,getQueryParamValue:function(aa){var Z=j.location.search||j.location.hash;if(Z){if(/\\?/.test(Z)){Z=Z.split(\"?\")[1]}if(aa==null){return L(Z)}var Y=Z.split(\"&\");for(var X=0;X<Y.length;X++){if(Y[X].substring(0,Y[X].indexOf(\"=\"))==aa){return L(Y[X].substring((Y[X].indexOf(\"=\")+1)))}}}return\"\"},expressInstallCallback:function(){if(a){var X=c(R);if(X&&l){X.parentNode.replaceChild(l,X);if(Q){w(Q,true);if(M.ie&&M.win){l.style.display=\"block\"}}if(E){E(B)}}a=false}}}}();\n}\n// Copyright: Hiroshi Ichikawa <http://gimite.net/en/>\n// License: New BSD License\n// Reference: http://dev.w3.org/html5/websockets/\n// Reference: http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol\n\n(function() {\n  \n  if ('undefined' == typeof window || window.WebSocket) return;\n\n  var console = window.console;\n  if (!console || !console.log || !console.error) {\n    console = {log: function(){ }, error: function(){ }};\n  }\n  \n  if (!swfobject.hasFlashPlayerVersion(\"10.0.0\")) {\n    console.error(\"Flash Player >= 10.0.0 is required.\");\n    return;\n  }\n  if (location.protocol == \"file:\") {\n    console.error(\n      \"WARNING: web-socket-js doesn't work in file:///... URL \" +\n      \"unless you set Flash Security Settings properly. \" +\n      \"Open the page via Web server i.e. http://...\");\n  }\n\n  /**\n   * This class represents a faux web socket.\n   * @param {string} url\n   * @param {array or string} protocols\n   * @param {string} proxyHost\n   * @param {int} proxyPort\n   * @param {string} headers\n   */\n  WebSocket = function(url, protocols, proxyHost, proxyPort, headers) {\n    var self = this;\n    self.__id = WebSocket.__nextId++;\n    WebSocket.__instances[self.__id] = self;\n    self.readyState = WebSocket.CONNECTING;\n    self.bufferedAmount = 0;\n    self.__events = {};\n    if (!protocols) {\n      protocols = [];\n    } else if (typeof protocols == \"string\") {\n      protocols = [protocols];\n    }\n    // Uses setTimeout() to make sure __createFlash() runs after the caller sets ws.onopen etc.\n    // Otherwise, when onopen fires immediately, onopen is called before it is set.\n    setTimeout(function() {\n      WebSocket.__addTask(function() {\n        WebSocket.__flash.create(\n            self.__id, url, protocols, proxyHost || null, proxyPort || 0, headers || null);\n      });\n    }, 0);\n  };\n\n  /**\n   * Send data to the web socket.\n   * @param {string} data  The data to send to the socket.\n   * @return {boolean}  True for success, false for failure.\n   */\n  WebSocket.prototype.send = function(data) {\n    if (this.readyState == WebSocket.CONNECTING) {\n      throw \"INVALID_STATE_ERR: Web Socket connection has not been established\";\n    }\n    // We use encodeURIComponent() here, because FABridge doesn't work if\n    // the argument includes some characters. We don't use escape() here\n    // because of this:\n    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Functions#escape_and_unescape_Functions\n    // But it looks decodeURIComponent(encodeURIComponent(s)) doesn't\n    // preserve all Unicode characters either e.g. \"\\uffff\" in Firefox.\n    // Note by wtritch: Hopefully this will not be necessary using ExternalInterface.  Will require\n    // additional testing.\n    var result = WebSocket.__flash.send(this.__id, encodeURIComponent(data));\n    if (result < 0) { // success\n      return true;\n    } else {\n      this.bufferedAmount += result;\n      return false;\n    }\n  };\n\n  /**\n   * Close this web socket gracefully.\n   */\n  WebSocket.prototype.close = function() {\n    if (this.readyState == WebSocket.CLOSED || this.readyState == WebSocket.CLOSING) {\n      return;\n    }\n    this.readyState = WebSocket.CLOSING;\n    WebSocket.__flash.close(this.__id);\n  };\n\n  /**\n   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n   *\n   * @param {string} type\n   * @param {function} listener\n   * @param {boolean} useCapture\n   * @return void\n   */\n  WebSocket.prototype.addEventListener = function(type, listener, useCapture) {\n    if (!(type in this.__events)) {\n      this.__events[type] = [];\n    }\n    this.__events[type].push(listener);\n  };\n\n  /**\n   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n   *\n   * @param {string} type\n   * @param {function} listener\n   * @param {boolean} useCapture\n   * @return void\n   */\n  WebSocket.prototype.removeEventListener = function(type, listener, useCapture) {\n    if (!(type in this.__events)) return;\n    var events = this.__events[type];\n    for (var i = events.length - 1; i >= 0; --i) {\n      if (events[i] === listener) {\n        events.splice(i, 1);\n        break;\n      }\n    }\n  };\n\n  /**\n   * Implementation of {@link <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-registration\">DOM 2 EventTarget Interface</a>}\n   *\n   * @param {Event} event\n   * @return void\n   */\n  WebSocket.prototype.dispatchEvent = function(event) {\n    var events = this.__events[event.type] || [];\n    for (var i = 0; i < events.length; ++i) {\n      events[i](event);\n    }\n    var handler = this[\"on\" + event.type];\n    if (handler) handler(event);\n  };\n\n  /**\n   * Handles an event from Flash.\n   * @param {Object} flashEvent\n   */\n  WebSocket.prototype.__handleEvent = function(flashEvent) {\n    if (\"readyState\" in flashEvent) {\n      this.readyState = flashEvent.readyState;\n    }\n    if (\"protocol\" in flashEvent) {\n      this.protocol = flashEvent.protocol;\n    }\n    \n    var jsEvent;\n    if (flashEvent.type == \"open\" || flashEvent.type == \"error\") {\n      jsEvent = this.__createSimpleEvent(flashEvent.type);\n    } else if (flashEvent.type == \"close\") {\n      // TODO implement jsEvent.wasClean\n      jsEvent = this.__createSimpleEvent(\"close\");\n    } else if (flashEvent.type == \"message\") {\n      var data = decodeURIComponent(flashEvent.message);\n      jsEvent = this.__createMessageEvent(\"message\", data);\n    } else {\n      throw \"unknown event type: \" + flashEvent.type;\n    }\n    \n    this.dispatchEvent(jsEvent);\n  };\n  \n  WebSocket.prototype.__createSimpleEvent = function(type) {\n    if (document.createEvent && window.Event) {\n      var event = document.createEvent(\"Event\");\n      event.initEvent(type, false, false);\n      return event;\n    } else {\n      return {type: type, bubbles: false, cancelable: false};\n    }\n  };\n  \n  WebSocket.prototype.__createMessageEvent = function(type, data) {\n    if (document.createEvent && window.MessageEvent && !window.opera) {\n      var event = document.createEvent(\"MessageEvent\");\n      event.initMessageEvent(\"message\", false, false, data, null, null, window, null);\n      return event;\n    } else {\n      // IE and Opera, the latter one truncates the data parameter after any 0x00 bytes.\n      return {type: type, data: data, bubbles: false, cancelable: false};\n    }\n  };\n  \n  /**\n   * Define the WebSocket readyState enumeration.\n   */\n  WebSocket.CONNECTING = 0;\n  WebSocket.OPEN = 1;\n  WebSocket.CLOSING = 2;\n  WebSocket.CLOSED = 3;\n\n  WebSocket.__flash = null;\n  WebSocket.__instances = {};\n  WebSocket.__tasks = [];\n  WebSocket.__nextId = 0;\n  \n  /**\n   * Load a new flash security policy file.\n   * @param {string} url\n   */\n  WebSocket.loadFlashPolicyFile = function(url){\n    WebSocket.__addTask(function() {\n      WebSocket.__flash.loadManualPolicyFile(url);\n    });\n  };\n\n  /**\n   * Loads WebSocketMain.swf and creates WebSocketMain object in Flash.\n   */\n  WebSocket.__initialize = function() {\n    if (WebSocket.__flash) return;\n    \n    if (WebSocket.__swfLocation) {\n      // For backword compatibility.\n      window.WEB_SOCKET_SWF_LOCATION = WebSocket.__swfLocation;\n    }\n    if (!window.WEB_SOCKET_SWF_LOCATION) {\n      console.error(\"[WebSocket] set WEB_SOCKET_SWF_LOCATION to location of WebSocketMain.swf\");\n      return;\n    }\n    var container = document.createElement(\"div\");\n    container.id = \"webSocketContainer\";\n    // Hides Flash box. We cannot use display: none or visibility: hidden because it prevents\n    // Flash from loading at least in IE. So we move it out of the screen at (-100, -100).\n    // But this even doesn't work with Flash Lite (e.g. in Droid Incredible). So with Flash\n    // Lite, we put it at (0, 0). This shows 1x1 box visible at left-top corner but this is\n    // the best we can do as far as we know now.\n    container.style.position = \"absolute\";\n    if (WebSocket.__isFlashLite()) {\n      container.style.left = \"0px\";\n      container.style.top = \"0px\";\n    } else {\n      container.style.left = \"-100px\";\n      container.style.top = \"-100px\";\n    }\n    var holder = document.createElement(\"div\");\n    holder.id = \"webSocketFlash\";\n    container.appendChild(holder);\n    document.body.appendChild(container);\n    // See this article for hasPriority:\n    // http://help.adobe.com/en_US/as3/mobile/WS4bebcd66a74275c36cfb8137124318eebc6-7ffd.html\n    swfobject.embedSWF(\n      WEB_SOCKET_SWF_LOCATION,\n      \"webSocketFlash\",\n      \"1\" /* width */,\n      \"1\" /* height */,\n      \"10.0.0\" /* SWF version */,\n      null,\n      null,\n      {hasPriority: true, swliveconnect : true, allowScriptAccess: \"always\"},\n      null,\n      function(e) {\n        if (!e.success) {\n          console.error(\"[WebSocket] swfobject.embedSWF failed\");\n        }\n      });\n  };\n  \n  /**\n   * Called by Flash to notify JS that it's fully loaded and ready\n   * for communication.\n   */\n  WebSocket.__onFlashInitialized = function() {\n    // We need to set a timeout here to avoid round-trip calls\n    // to flash during the initialization process.\n    setTimeout(function() {\n      WebSocket.__flash = document.getElementById(\"webSocketFlash\");\n      WebSocket.__flash.setCallerUrl(location.href);\n      WebSocket.__flash.setDebug(!!window.WEB_SOCKET_DEBUG);\n      for (var i = 0; i < WebSocket.__tasks.length; ++i) {\n        WebSocket.__tasks[i]();\n      }\n      WebSocket.__tasks = [];\n    }, 0);\n  };\n  \n  /**\n   * Called by Flash to notify WebSockets events are fired.\n   */\n  WebSocket.__onFlashEvent = function() {\n    setTimeout(function() {\n      try {\n        // Gets events using receiveEvents() instead of getting it from event object\n        // of Flash event. This is to make sure to keep message order.\n        // It seems sometimes Flash events don't arrive in the same order as they are sent.\n        var events = WebSocket.__flash.receiveEvents();\n        for (var i = 0; i < events.length; ++i) {\n          WebSocket.__instances[events[i].webSocketId].__handleEvent(events[i]);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }, 0);\n    return true;\n  };\n  \n  // Called by Flash.\n  WebSocket.__log = function(message) {\n    console.log(decodeURIComponent(message));\n  };\n  \n  // Called by Flash.\n  WebSocket.__error = function(message) {\n    console.error(decodeURIComponent(message));\n  };\n  \n  WebSocket.__addTask = function(task) {\n    if (WebSocket.__flash) {\n      task();\n    } else {\n      WebSocket.__tasks.push(task);\n    }\n  };\n  \n  /**\n   * Test if the browser is running flash lite.\n   * @return {boolean} True if flash lite is running, false otherwise.\n   */\n  WebSocket.__isFlashLite = function() {\n    if (!window.navigator || !window.navigator.mimeTypes) {\n      return false;\n    }\n    var mimeType = window.navigator.mimeTypes[\"application/x-shockwave-flash\"];\n    if (!mimeType || !mimeType.enabledPlugin || !mimeType.enabledPlugin.filename) {\n      return false;\n    }\n    return mimeType.enabledPlugin.filename.match(/flashlite/i) ? true : false;\n  };\n  \n  if (!window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION) {\n    if (window.addEventListener) {\n      window.addEventListener(\"load\", function(){\n        WebSocket.__initialize();\n      }, false);\n    } else {\n      window.attachEvent(\"onload\", function(){\n        WebSocket.__initialize();\n      });\n    }\n  }\n  \n})();\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   *\n   * @api public\n   */\n\n  exports.XHR = XHR;\n\n  /**\n   * XHR constructor\n   *\n   * @costructor\n   * @api public\n   */\n\n  function XHR (socket) {\n    if (!socket) return;\n\n    io.Transport.apply(this, arguments);\n    this.sendBuffer = [];\n  };\n\n  /**\n   * Inherits from Transport.\n   */\n\n  io.util.inherit(XHR, io.Transport);\n\n  /**\n   * Establish a connection\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  XHR.prototype.open = function () {\n    this.socket.setBuffer(false);\n    this.onOpen();\n    this.get();\n\n    // we need to make sure the request succeeds since we have no indication\n    // whether the request opened or not until it succeeded.\n    this.setCloseTimeout();\n\n    return this;\n  };\n\n  /**\n   * Check if we need to send data to the Socket.IO server, if we have data in our\n   * buffer we encode it and forward it to the `post` method.\n   *\n   * @api private\n   */\n\n  XHR.prototype.payload = function (payload) {\n    var msgs = [];\n\n    for (var i = 0, l = payload.length; i < l; i++) {\n      msgs.push(io.parser.encodePacket(payload[i]));\n    }\n\n    this.send(io.parser.encodePayload(msgs));\n  };\n\n  /**\n   * Send data to the Socket.IO server.\n   *\n   * @param data The message\n   * @returns {Transport}\n   * @api public\n   */\n\n  XHR.prototype.send = function (data) {\n    this.post(data);\n    return this;\n  };\n\n  /**\n   * Posts a encoded message to the Socket.IO server.\n   *\n   * @param {String} data A encoded message.\n   * @api private\n   */\n\n  function empty () { };\n\n  XHR.prototype.post = function (data) {\n    var self = this;\n    this.socket.setBuffer(true);\n\n    function stateChange () {\n      if (this.readyState == 4) {\n        this.onreadystatechange = empty;\n        self.posting = false;\n\n        if (this.status == 200){\n          self.socket.setBuffer(false);\n        } else {\n          self.onClose();\n        }\n      }\n    }\n\n    function onload () {\n      this.onload = empty;\n      self.socket.setBuffer(false);\n    };\n\n    this.sendXHR = this.request('POST');\n\n    if (global.XDomainRequest && this.sendXHR instanceof XDomainRequest) {\n      this.sendXHR.onload = this.sendXHR.onerror = onload;\n    } else {\n      this.sendXHR.onreadystatechange = stateChange;\n    }\n\n    this.sendXHR.send(data);\n  };\n\n  /**\n   * Disconnects the established `XHR` connection.\n   *\n   * @returns {Transport}\n   * @api public\n   */\n\n  XHR.prototype.close = function () {\n    this.onClose();\n    return this;\n  };\n\n  /**\n   * Generates a configured XHR request\n   *\n   * @param {String} url The url that needs to be requested.\n   * @param {String} method The method the request should use.\n   * @returns {XMLHttpRequest}\n   * @api private\n   */\n\n  XHR.prototype.request = function (method) {\n    var req = io.util.request(this.socket.isXDomain())\n      , query = io.util.query(this.socket.options.query, 't=' + +new Date);\n\n    req.open(method || 'GET', this.prepareUrl() + query, true);\n\n    if (method == 'POST') {\n      try {\n        if (req.setRequestHeader) {\n          req.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');\n        } else {\n          // XDomainRequest\n          req.contentType = 'text/plain';\n        }\n      } catch (e) {}\n    }\n\n    return req;\n  };\n\n  /**\n   * Returns the scheme to use for the transport URLs.\n   *\n   * @api private\n   */\n\n  XHR.prototype.scheme = function () {\n    return this.socket.options.secure ? 'https' : 'http';\n  };\n\n  /**\n   * Check if the XHR transports are supported\n   *\n   * @param {Boolean} xdomain Check if we support cross domain requests.\n   * @returns {Boolean}\n   * @api public\n   */\n\n  XHR.check = function (socket, xdomain) {\n    try {\n      var request = io.util.request(xdomain),\n          usesXDomReq = (global.XDomainRequest && request instanceof XDomainRequest),\n          socketProtocol = (socket && socket.options && socket.options.secure ? 'https:' : 'http:'),\n          isXProtocol = (global.location && socketProtocol != global.location.protocol);\n      if (request && !(usesXDomReq && isXProtocol)) {\n        return true;\n      }\n    } catch(e) {}\n\n    return false;\n  };\n\n  /**\n   * Check if the XHR transport supports cross domain requests.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  XHR.xdomainCheck = function (socket) {\n    return XHR.check(socket, true);\n  };\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports.htmlfile = HTMLFile;\n\n  /**\n   * The HTMLFile transport creates a `forever iframe` based transport\n   * for Internet Explorer. Regular forever iframe implementations will \n   * continuously trigger the browsers buzy indicators. If the forever iframe\n   * is created inside a `htmlfile` these indicators will not be trigged.\n   *\n   * @constructor\n   * @extends {io.Transport.XHR}\n   * @api public\n   */\n\n  function HTMLFile (socket) {\n    io.Transport.XHR.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from XHR transport.\n   */\n\n  io.util.inherit(HTMLFile, io.Transport.XHR);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  HTMLFile.prototype.name = 'htmlfile';\n\n  /**\n   * Creates a new Ac...eX `htmlfile` with a forever loading iframe\n   * that can be used to listen to messages. Inside the generated\n   * `htmlfile` a reference will be made to the HTMLFile transport.\n   *\n   * @api private\n   */\n\n  HTMLFile.prototype.get = function () {\n    this.doc = new window[(['Active'].concat('Object').join('X'))]('htmlfile');\n    this.doc.open();\n    this.doc.write('<html></html>');\n    this.doc.close();\n    this.doc.parentWindow.s = this;\n\n    var iframeC = this.doc.createElement('div');\n    iframeC.className = 'socketio';\n\n    this.doc.body.appendChild(iframeC);\n    this.iframe = this.doc.createElement('iframe');\n\n    iframeC.appendChild(this.iframe);\n\n    var self = this\n      , query = io.util.query(this.socket.options.query, 't='+ +new Date);\n\n    this.iframe.src = this.prepareUrl() + query;\n\n    io.util.on(window, 'unload', function () {\n      self.destroy();\n    });\n  };\n\n  /**\n   * The Socket.IO server will write script tags inside the forever\n   * iframe, this function will be used as callback for the incoming\n   * information.\n   *\n   * @param {String} data The message\n   * @param {document} doc Reference to the context\n   * @api private\n   */\n\n  HTMLFile.prototype._ = function (data, doc) {\n    // unescape all forward slashes. see GH-1251\n    data = data.replace(/\\\\\\//g, '/');\n    this.onData(data);\n    try {\n      var script = doc.getElementsByTagName('script')[0];\n      script.parentNode.removeChild(script);\n    } catch (e) { }\n  };\n\n  /**\n   * Destroy the established connection, iframe and `htmlfile`.\n   * And calls the `CollectGarbage` function of Internet Explorer\n   * to release the memory.\n   *\n   * @api private\n   */\n\n  HTMLFile.prototype.destroy = function () {\n    if (this.iframe){\n      try {\n        this.iframe.src = 'about:blank';\n      } catch(e){}\n\n      this.doc = null;\n      this.iframe.parentNode.removeChild(this.iframe);\n      this.iframe = null;\n\n      CollectGarbage();\n    }\n  };\n\n  /**\n   * Disconnects the established connection.\n   *\n   * @returns {Transport} Chaining.\n   * @api public\n   */\n\n  HTMLFile.prototype.close = function () {\n    this.destroy();\n    return io.Transport.XHR.prototype.close.call(this);\n  };\n\n  /**\n   * Checks if the browser supports this transport. The browser\n   * must have an `Ac...eXObject` implementation.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  HTMLFile.check = function (socket) {\n    if (typeof window != \"undefined\" && (['Active'].concat('Object').join('X')) in window){\n      try {\n        var a = new window[(['Active'].concat('Object').join('X'))]('htmlfile');\n        return a && io.Transport.XHR.check(socket);\n      } catch(e){}\n    }\n    return false;\n  };\n\n  /**\n   * Check if cross domain requests are supported.\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  HTMLFile.xdomainCheck = function () {\n    // we can probably do handling for sub-domains, we should\n    // test that it's cross domain but a subdomain here\n    return false;\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('htmlfile');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n\n  /**\n   * Expose constructor.\n   */\n\n  exports['xhr-polling'] = XHRPolling;\n\n  /**\n   * The XHR-polling transport uses long polling XHR requests to create a\n   * \"persistent\" connection with the server.\n   *\n   * @constructor\n   * @api public\n   */\n\n  function XHRPolling () {\n    io.Transport.XHR.apply(this, arguments);\n  };\n\n  /**\n   * Inherits from XHR transport.\n   */\n\n  io.util.inherit(XHRPolling, io.Transport.XHR);\n\n  /**\n   * Merge the properties from XHR transport\n   */\n\n  io.util.merge(XHRPolling, io.Transport.XHR);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  XHRPolling.prototype.name = 'xhr-polling';\n\n  /**\n   * Indicates whether heartbeats is enabled for this transport\n   *\n   * @api private\n   */\n\n  XHRPolling.prototype.heartbeats = function () {\n    return false;\n  };\n\n  /** \n   * Establish a connection, for iPhone and Android this will be done once the page\n   * is loaded.\n   *\n   * @returns {Transport} Chaining.\n   * @api public\n   */\n\n  XHRPolling.prototype.open = function () {\n    var self = this;\n\n    io.Transport.XHR.prototype.open.call(self);\n    return false;\n  };\n\n  /**\n   * Starts a XHR request to wait for incoming messages.\n   *\n   * @api private\n   */\n\n  function empty () {};\n\n  XHRPolling.prototype.get = function () {\n    if (!this.isOpen) return;\n\n    var self = this;\n\n    function stateChange () {\n      if (this.readyState == 4) {\n        this.onreadystatechange = empty;\n\n        if (this.status == 200) {\n          self.onData(this.responseText);\n          self.get();\n        } else {\n          self.onClose();\n        }\n      }\n    };\n\n    function onload () {\n      this.onload = empty;\n      this.onerror = empty;\n      self.retryCounter = 1;\n      self.onData(this.responseText);\n      self.get();\n    };\n\n    function onerror () {\n      self.retryCounter ++;\n      if(!self.retryCounter || self.retryCounter > 3) {\n        self.onClose();  \n      } else {\n        self.get();\n      }\n    };\n\n    this.xhr = this.request();\n\n    if (global.XDomainRequest && this.xhr instanceof XDomainRequest) {\n      this.xhr.onload = onload;\n      this.xhr.onerror = onerror;\n    } else {\n      this.xhr.onreadystatechange = stateChange;\n    }\n\n    this.xhr.send(null);\n  };\n\n  /**\n   * Handle the unclean close behavior.\n   *\n   * @api private\n   */\n\n  XHRPolling.prototype.onClose = function () {\n    io.Transport.XHR.prototype.onClose.call(this);\n\n    if (this.xhr) {\n      this.xhr.onreadystatechange = this.xhr.onload = this.xhr.onerror = empty;\n      try {\n        this.xhr.abort();\n      } catch(e){}\n      this.xhr = null;\n    }\n  };\n\n  /**\n   * Webkit based browsers show a infinit spinner when you start a XHR request\n   * before the browsers onload event is called so we need to defer opening of\n   * the transport until the onload event is called. Wrapping the cb in our\n   * defer method solve this.\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  XHRPolling.prototype.ready = function (socket, fn) {\n    var self = this;\n\n    io.util.defer(function () {\n      fn.call(self);\n    });\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('xhr-polling');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n\n/**\n * socket.io\n * Copyright(c) 2011 LearnBoost <dev@learnboost.com>\n * MIT Licensed\n */\n\n(function (exports, io, global) {\n  /**\n   * There is a way to hide the loading indicator in Firefox. If you create and\n   * remove a iframe it will stop showing the current loading indicator.\n   * Unfortunately we can't feature detect that and UA sniffing is evil.\n   *\n   * @api private\n   */\n\n  var indicator = global.document && \"MozAppearance\" in\n    global.document.documentElement.style;\n\n  /**\n   * Expose constructor.\n   */\n\n  exports['jsonp-polling'] = JSONPPolling;\n\n  /**\n   * The JSONP transport creates an persistent connection by dynamically\n   * inserting a script tag in the page. This script tag will receive the\n   * information of the Socket.IO server. When new information is received\n   * it creates a new script tag for the new data stream.\n   *\n   * @constructor\n   * @extends {io.Transport.xhr-polling}\n   * @api public\n   */\n\n  function JSONPPolling (socket) {\n    io.Transport['xhr-polling'].apply(this, arguments);\n\n    this.index = io.j.length;\n\n    var self = this;\n\n    io.j.push(function (msg) {\n      self._(msg);\n    });\n  };\n\n  /**\n   * Inherits from XHR polling transport.\n   */\n\n  io.util.inherit(JSONPPolling, io.Transport['xhr-polling']);\n\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n  JSONPPolling.prototype.name = 'jsonp-polling';\n\n  /**\n   * Posts a encoded message to the Socket.IO server using an iframe.\n   * The iframe is used because script tags can create POST based requests.\n   * The iframe is positioned outside of the view so the user does not\n   * notice it's existence.\n   *\n   * @param {String} data A encoded message.\n   * @api private\n   */\n\n  JSONPPolling.prototype.post = function (data) {\n    var self = this\n      , query = io.util.query(\n             this.socket.options.query\n          , 't='+ (+new Date) + '&i=' + this.index\n        );\n\n    if (!this.form) {\n      var form = document.createElement('form')\n        , area = document.createElement('textarea')\n        , id = this.iframeId = 'socketio_iframe_' + this.index\n        , iframe;\n\n      form.className = 'socketio';\n      form.style.position = 'absolute';\n      form.style.top = '0px';\n      form.style.left = '0px';\n      form.style.display = 'none';\n      form.target = id;\n      form.method = 'POST';\n      form.setAttribute('accept-charset', 'utf-8');\n      area.name = 'd';\n      form.appendChild(area);\n      document.body.appendChild(form);\n\n      this.form = form;\n      this.area = area;\n    }\n\n    this.form.action = this.prepareUrl() + query;\n\n    function complete () {\n      initIframe();\n      self.socket.setBuffer(false);\n    };\n\n    function initIframe () {\n      if (self.iframe) {\n        self.form.removeChild(self.iframe);\n      }\n\n      try {\n        // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n        iframe = document.createElement('<iframe name=\"'+ self.iframeId +'\">');\n      } catch (e) {\n        iframe = document.createElement('iframe');\n        iframe.name = self.iframeId;\n      }\n\n      iframe.id = self.iframeId;\n\n      self.form.appendChild(iframe);\n      self.iframe = iframe;\n    };\n\n    initIframe();\n\n    // we temporarily stringify until we figure out how to prevent\n    // browsers from turning `\\n` into `\\r\\n` in form inputs\n    this.area.value = io.JSON.stringify(data);\n\n    try {\n      this.form.submit();\n    } catch(e) {}\n\n    if (this.iframe.attachEvent) {\n      iframe.onreadystatechange = function () {\n        if (self.iframe.readyState == 'complete') {\n          complete();\n        }\n      };\n    } else {\n      this.iframe.onload = complete;\n    }\n\n    this.socket.setBuffer(true);\n  };\n\n  /**\n   * Creates a new JSONP poll that can be used to listen\n   * for messages from the Socket.IO server.\n   *\n   * @api private\n   */\n\n  JSONPPolling.prototype.get = function () {\n    var self = this\n      , script = document.createElement('script')\n      , query = io.util.query(\n             this.socket.options.query\n          , 't='+ (+new Date) + '&i=' + this.index\n        );\n\n    if (this.script) {\n      this.script.parentNode.removeChild(this.script);\n      this.script = null;\n    }\n\n    script.async = true;\n    script.src = this.prepareUrl() + query;\n    script.onerror = function () {\n      self.onClose();\n    };\n\n    var insertAt = document.getElementsByTagName('script')[0];\n    insertAt.parentNode.insertBefore(script, insertAt);\n    this.script = script;\n\n    if (indicator) {\n      setTimeout(function () {\n        var iframe = document.createElement('iframe');\n        document.body.appendChild(iframe);\n        document.body.removeChild(iframe);\n      }, 100);\n    }\n  };\n\n  /**\n   * Callback function for the incoming message stream from the Socket.IO server.\n   *\n   * @param {String} data The message\n   * @api private\n   */\n\n  JSONPPolling.prototype._ = function (msg) {\n    this.onData(msg);\n    if (this.isOpen) {\n      this.get();\n    }\n    return this;\n  };\n\n  /**\n   * The indicator hack only works after onload\n   *\n   * @param {Socket} socket The socket instance that needs a transport\n   * @param {Function} fn The callback\n   * @api private\n   */\n\n  JSONPPolling.prototype.ready = function (socket, fn) {\n    var self = this;\n    if (!indicator) return fn.call(this);\n\n    io.util.load(function () {\n      fn.call(self);\n    });\n  };\n\n  /**\n   * Checks if browser supports this transport.\n   *\n   * @return {Boolean}\n   * @api public\n   */\n\n  JSONPPolling.check = function () {\n    return 'document' in global;\n  };\n\n  /**\n   * Check if cross domain requests are supported\n   *\n   * @returns {Boolean}\n   * @api public\n   */\n\n  JSONPPolling.xdomainCheck = function () {\n    return true;\n  };\n\n  /**\n   * Add the transport to your public io.transports array.\n   *\n   * @api private\n   */\n\n  io.transports.push('jsonp-polling');\n\n})(\n    'undefined' != typeof io ? io.Transport : module.exports\n  , 'undefined' != typeof io ? io : module.parent.exports\n  , this\n);\n\nif (typeof define === \"function\" && define.amd) {\n  define([], function () { return io; });\n}\n})();\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/socket.io-client/dist/socket.io.js\n ** module id = 15\n ** module chunks = 0\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 16\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\nvar log = respoke.log;\n\n/**\n * A direct connection via RTCDataChannel, including state and path negotation.\n * @class respoke.DirectConnection\n * @constructor\n * @augments respoke.EventEmitter\n * @param {string} params\n * @param {string} params.instanceId - client id\n * @param {respoke.Call} params.call - The call that is handling state for this direct connection.\n * @param {boolean} [params.forceTurn] - If true, force the data to flow through relay servers instead of allowing\n * it to flow peer-to-peer. The relay acts like a blind proxy.\n * @param {string} params.connectionId - The connection ID of the remoteEndpoint.\n * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n * @param {function} params.signalReport - Signaling action from SignalingChannel.\n * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n * @param {respoke.DirectConnection.onStart} [params.onStart] - Callback for when setup of the direct connection\n * begins. The direct connection will not be open yet.\n * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors that happen during\n * direct connection setup or media renegotiation.\n * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for closing the direct connection.\n * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for opening the direct connection.\n * @param {respoke.DirectConnection.onAccept} [params.onAccept] - Callback for when the user accepts the request\n * for a direct connection and setup is about to begin.\n * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for incoming messages. Not usually\n * necessary to listen to this event if you are already listening to respoke.Endpoint#message.\n * @returns {respoke.DirectConnection}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Client\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n\n    /**\n     * A name to identify this class\n     * @memberof! respoke.DirectConnection\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.DirectConnection';\n    /**\n     * The unique identifier of the direct connection.\n     *\n     * @memberof! respoke.DirectConnection\n     * @name id\n     * @type {string}\n     */\n    that.id = respoke.makeGUID();\n\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name call\n     * @type {respoke.Call}\n     */\n    if (!that.call.caller) {\n        that.call.caller = false;\n    }\n\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name dataChannel\n     * @type {RTCDataChannel}\n     * @private\n     */\n    var dataChannel = null;\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name client\n     * @type {respoke.Client}\n     * @private\n     */\n    var client = respoke.getClient(instanceId);\n\n    /**\n     * @memberof! respoke.DirectConnection\n     * @name pc\n     * @type {RTCPeerConnection}\n     * @private\n     */\n    var pc = params.pc;\n    delete params.pc;\n\n    /**\n     * When the datachannel is availble, we need to attach the callbacks. The event this function is attached to\n     * only fires for the callee.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.listenDataChannel\n     * @param {respoke.Event} evt\n     * @private\n     */\n    function listenDataChannel(evt) {\n        dataChannel = evt.channel;\n        dataChannel.onerror = onDataChannelError;\n        dataChannel.onmessage = onDataChannelMessage;\n        if (dataChannel.readyState === 'open') {\n            dataChannel.onopen = null;\n            onDataChannelOpen();\n        } else {\n            dataChannel.onopen = onDataChannelOpen;\n        }\n    }\n\n    /**\n     * Register any event listeners passed in as callbacks\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.saveParameters\n     * @param {object} params\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for when the direct connection\n     * is closed.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for when the direct connection\n     * is open.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for incoming messages.\n     * @param {respoke.DirectConnection.onError} [params.onError] - Callback for errors setting up the direct\n     * connection.\n     * @param {respoke.DirectConnection.onStart} [params.onStart] - Callback for when the direct connection\n     * is being set up. The direct connection will not be open yet.\n     * @param {boolean} [params.forceTurn] - If true, force the data to flow through relay servers instead of allowing\n     * it to flow peer-to-peer. The relay acts like a blind proxy.\n     * @private\n     */\n    function saveParameters(params) {\n        /**\n         * The direct connection is open.\n         * @event respoke.DirectConnection#open\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.listen('open', params.onOpen);\n        /**\n         * The direct connection is closed.\n         * @event respoke.DirectConnection#close\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.listen('close', params.onClose);\n        /**\n         * Incoming message on this direct connection.\n         * @event respoke.DirectConnection#message\n         * @type {respoke.Event}\n         * @property {respoke.TextMessage} message\n         * @property {respoke.Endpoint} endpoint\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.listen('message', params.onMessage);\n        // documented elsewhere\n        that.listen('start', params.onStart);\n        /**\n         * An error occurred while setting up the direct connection.\n         * @event respoke.DirectConnection#error\n         * @type {respoke.Event}\n         * @property {string} reason - A human-readable description of the error.\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.listen('error', params.onError);\n        pc.listen('direct-connection', listenDataChannel, true);\n        pc.listen('stats', function fireStats(evt) {\n            /**\n             * This event is fired every time statistical information about the direct connection\n             * becomes available.\n             * @event respoke.DirectConnection#stats\n             * @type {respoke.Event}\n             * @property {object} stats - an object with stats in it.\n             * @property {respoke.DirectConnection} target\n             * @property {string} name - the event name.\n             */\n            that.fire('stats', {stats: evt.stats});\n        }, true);\n\n    }\n    saveParameters(params);\n\n    delete that.onOpen;\n    delete that.onClose;\n    delete that.onMessage;\n\n    /**\n     * Return media stats. Since we have to wait for both the answer and offer to be available before starting\n     * statistics, we'll return a promise for the stats object.\n     *\n     *     directConnection.getStats({\n     *         onStats: function (evt) {\n     *             console.log('Stats', evt.stats);\n     *         }\n     *     }).done(function () {\n     *         console.log('Stats started.');\n     *     }, function (err) {\n     *         console.log('Direct connection is already closed.');\n     *     });\n     *\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.getStats\n     * @returns {Promise<object>|undefined}\n     * @param {object} params\n     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive the\n     * stats if the Respoke stats module is loaded. If no callback is provided, the connection's report will\n     * contain stats but the developer will not receive them on the client-side.\n     * @param {respoke.DirectConnection.statsSuccessHandler} [params.onSuccess] - Success handler for this\n     * invocation of this method only.\n     * @param {respoke.DirectConnection.errorHandler} [params.onError] - Error handler for this invocation of\n     * this method only.\n     */\n    that.getStats = function (params) {\n        if (pc && pc.getStats) {\n            that.listen('stats', params.onStats);\n            delete params.onStats;\n            return pc.getStats(params);\n        }\n        return null;\n    };\n\n    if (!respoke.MediaStats) {\n        delete that.getStats;\n    }\n\n    /**\n     * Detect datachannel errors for internal state.\n     * @memberof! respoke.DirectConnection\n     * @private\n     * @method respoke.DirectConnection.onDataChannelError\n     */\n    function onDataChannelError(error) {\n        /**\n         * Indicate that an error has occurred setting up the direct connection.\n         * @event respoke.DirectConnection#error\n         * @type {respoke.Event}\n         * @property {object} error\n         * @property {respoke.DirectConnection} directConnection\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('error', {\n            error: error\n        });\n        that.close();\n    }\n\n    /**\n     * Receive and route messages to the Endpoint.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.onDataChannelMessage\n     * @private\n     * @param {MessageEvent}\n     * @fires respoke.DirectConnection#message\n     */\n    function onDataChannelMessage(evt) {\n        var message;\n        try {\n            message = JSON.parse(evt.data);\n        } catch (e) {\n            message = evt.data;\n        }\n        /**\n         * A message has been received over the direct connection.\n         * @event respoke.Endpoint#message\n         * @type {respoke.Event}\n         * @property {object} message\n         * @property {respoke.DirectConnection} directConnection\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.call.remoteEndpoint.fire('message', {\n            message: message,\n            directConnection: that\n        });\n        /**\n         * A message has been received over the direct connection.\n         * @event respoke.DirectConnection#message\n         * @type {respoke.Event}\n         * @property {object} message\n         * @property {respoke.Endpoint} endpoint\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('message', {\n            message: message,\n            endpoint: that.call.remoteEndpoint\n        });\n    }\n\n    /**\n     * Detect when the channel is open.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.onDataChannelOpen\n     * @private\n     * @param {MessageEvent}\n     * @fires respoke.DirectConnection#open\n     */\n    function onDataChannelOpen(evt) {\n        //dataChannel = evt.target || evt.channel;\n        /**\n         * The direct connection is open.\n         * @event respoke.DirectConnection#open\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('open');\n    }\n\n    /**\n     * Detect when the channel is closed.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.onDataChannelClose\n     * @private\n     * @param {MessageEvent}\n     * @fires respoke.DirectConnection#close\n     */\n    function onDataChannelClose(evt) {\n        //dataChannel = evt.target || evt.channel;\n        /**\n         * The direct connection is closed.\n         * @event respoke.DirectConnection#close\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('close');\n    }\n\n    /**\n     * Create the datachannel. For the caller, set up all the handlers we'll need to keep track of the\n     * datachannel's state and to receive messages.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.createDataChannel\n     * @private\n     */\n    function createDataChannel() {\n        dataChannel = pc.createDataChannel(\"respokeDataChannel\");\n        dataChannel.binaryType = 'arraybuffer';\n        dataChannel.onerror = onDataChannelError;\n        dataChannel.onmessage = onDataChannelMessage;\n        dataChannel.onopen = onDataChannelOpen;\n\n        /**\n         * The direct connection setup has begun. This does NOT mean it's ready to send messages yet. Listen to\n         * DirectConnection#open for that notification.\n         * @event respoke.DirectConnection#start\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('start');\n    }\n\n    /**\n     * Start the process of obtaining media. saveParameters will only be meaningful for the callee,\n     * since the library calls this method for the caller. Developers will use this method to pass in\n     * callbacks for the callee.\n     *\n     *     directConnection.accept({\n     *         onOpen: function (evt) {}\n     *     });\n     *\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.accept\n     * @fires respoke.DirectConnection#accept\n     * @param {object} params\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen]\n     * @param {respoke.DirectConnection.onClose} [params.onClose]\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage]\n     */\n    that.accept = function (params) {\n        params = params || {};\n        log.debug('DirectConnection.accept');\n        saveParameters(params);\n\n        log.debug(\"I am \" + (pc.state.caller ? '' : 'not ') + \"the caller.\");\n\n        if (pc.state.caller === true) {\n            createDataChannel();\n        }\n        that.call.answer();\n\n        /**\n         * The request to open a direct connection has been accepted.\n         * @event respoke.DirectConnection#accept\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('accept');\n    };\n\n    /**\n     * Tear down the connection.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.close\n     * @fires respoke.DirectConnection#close\n     */\n    that.close = function (params) {\n        params = params || {};\n        log.debug(\"DirectConnection.close\");\n\n        if (that.call && that.call.remoteEndpoint) {\n            that.call.remoteEndpoint.directConnection = null;\n        }\n\n        if (dataChannel) {\n            dataChannel.close();\n        }\n\n        /**\n         * The direct connection has been closed.\n         * @event respoke.DirectConnection#close\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.DirectConnection} target\n         */\n        that.fire('close');\n\n        that.ignore();\n\n        if (that.call && params.skipRemove !== true) {\n            that.call.removeDirectConnection();\n        }\n\n        dataChannel = null;\n        that.call = null;\n        pc = null;\n    };\n\n    /**\n     * Send a message over the datachannel in the form of a JSON-encoded plain old JavaScript object. Only one\n     * attribute may be given: either a string 'message' or an object 'object'.\n     * **Using callbacks** by passing `params.onSuccess` or `params.onError` will disable promises.\n     *\n     *     directConnection.sendMessage({\n     *         message: \"And they say HTTP is stateless!\"\n     *     });\n     *\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.sendMessage\n     * @param {object} params\n     * @param {string} [params.message] - The message to send.\n     * @param {object} [params.object] - An object to send.\n     * @param {respoke.DirectConnection.sendHandler} [params.onSuccess] - Success handler for this invocation\n     * of this method only.\n     * @param {respoke.DirectConnection.errorHandler} [params.onError] - Error handler for this invocation\n     * of this method only.\n     * @returns {Promise|undefined}\n     */\n    that.sendMessage = function (params) {\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n        if (that.isActive()) {\n            dataChannel.send(JSON.stringify(params.object || {\n                message: params.message\n            }));\n            deferred.resolve();\n        } else {\n            deferred.reject(new Error(\"dataChannel not in an open state.\"));\n        }\n        return retVal;\n    };\n\n    /**\n     * Expose close as reject for approve/reject workflow.\n     *\n     *     client.listen('direct-connection, function (evt) {\n     *         if (iDontLikeThisPerson()) {\n     *             evt.directConnection.reject();\n     *         }\n     *     });\n     *\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.reject\n     * @param {boolean} signal - Optional flag to indicate whether to send or suppress sending\n     * a hangup signal to the remote side.\n     */\n    that.reject = that.close;\n\n    /**\n     * Indicate whether a datachannel is being setup or is in progress.\n     * @memberof! respoke.DirectConnection\n     * @method respoke.DirectConnection.isActive\n     * @returns {boolean}\n     */\n    that.isActive = function () {\n        // Why does pc.iceConnectionState not transition into 'connected' even though media is flowing?\n        //return (pc && pc.isActive() && dataChannel && dataChannel.readyState === 'open');\n        return (dataChannel && dataChannel.readyState === 'open');\n    };\n\n    return that;\n}; // End respoke.DirectConnection\n\n/**\n * Called when the direct connection is closed.  This callback is called every time respoke.DirectConnection#close\n * fires.\n * @callback respoke.DirectConnection.onClose\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Called when the setup of the direct connection has begun. The direct connection will not be open yet. This\n * callback is called every time respoke.DirectConnection#start fires.\n * @callback respoke.DirectConnection.onStart\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Called when the direct connection is opened.  This callback is called every time respoke.DirectConnection#open\n * fires.\n * @callback respoke.DirectConnection.onOpen\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Called when a message is received over the direct connection.  This callback is called every time\n * respoke.DirectConnection#message fires.\n * @callback respoke.DirectConnection.onMessage\n * @param {respoke.Event} evt\n * @param {object} evt.message\n * @param {respoke.Endpoint} evt.endpoint\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Handle an error that resulted from a specific method call. This handler will not fire more than once.\n * @callback respoke.DirectConnection.errorHandler\n * @param {Error} err\n */\n/**\n * When a call is in setup or media renegotiation happens. This callback will be called every time\n * respoke.DirectConnection#error.\n * @callback respoke.DirectConnection.onError\n * @param {respoke.Event} evt\n * @param {boolean} evt.reason - A human-readable description of the error.\n * @param {string} evt.name - the event name.\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Called when the callee accepts the direct connection. This callback is called every time\n * respoke.DirectConnection#accept is fired.\n * @callback respoke.DirectConnection.onAccept\n * @param {respoke.Event} evt\n * @param {respoke.DirectConnection} evt.target\n */\n/**\n * Handle the successful kick-off of stats on a call.\n * @callback respoke.DirectConnection.statsSuccessHandler\n * @param {respoke.Event} evt\n * @param {object} evt.stats - an object with stats in it.\n * @param {respoke.DirectConnection} evt.target\n * @param {string} evt.name - the event name.\n */\n/**\n * Handle sending successfully.\n * @callback respoke.DirectConnection.sendHandler\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/directConnection.js\n ** module id = 17\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\nvar log = respoke.log;\n\n/**\n * WebRTC PeerConnection. This class handles all the state and connectivity for Call and DirectConnection.\n * This class cannot be used alone, but is instantiated by and must be given media by either Call, DirectConnection,\n * or the not-yet-implemented ScreenShare.\n * @class respoke.PeerConnection\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.instanceId - client id\n * @param {boolean} [params.forceTurn] - If true, delete all 'host' and 'srvflx' candidates and send only 'relay'\n * candidates.\n * @param {boolean} [params.disableTurn] - If true, delete all 'relay' candidates and send only 'host' and 'srvflx'\n * candidates.\n * @param {respoke.Call} params.call\n * @param {string} params.connectionId - The connection ID of the remoteEndpoint.\n * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n * @param {function} params.signalModify - Signaling action from SignalingChannel.\n * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n * @param {function} params.signalReport - Signaling action from SignalingChannel.\n * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n * @param {respoke.Call.onHangup} [params.onHangup] - Callback for the developer to be notified about hangup.\n * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - Callback for the developer to receive\n * statistics about the call. This is only used if call.getStats() is called and the stats module is loaded.\n * @param {object} [params.pcOptions]\n * @param {object} [params.offerOptions]\n * @returns {respoke.PeerConnection}\n */\n\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.PeerConnection';\n\n    /**\n     * Whether or not we will send a 'hangup' signal to the other side during hangup.\n     * @memberof! respoke.PeerConnection\n     * @name toSendHangup\n     * @type {respoke.Endpoint}\n     */\n    var toSendHangup;\n\n    /**\n     * @memberof! respoke.PeerConnection\n     * @private\n     * @name pc\n     * @type RTCPeerConnection\n     * @desc The RTCPeerConnection as provided by the browser API. All internal state, networking functionality, and\n     * raw data transfer occurs within the PeerConnection.\n     */\n    var pc = null;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name defModify\n     * @private\n     * @type {Promise}\n     * @desc Used in the state machine to trigger methods or functions whose execution depends on the reception,\n     * handling, or sending of some information.\n     */\n    var defModify;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name previewLocalMedia\n     * @private\n     * @type {respoke.Call.previewLocalMedia}\n     * @desc A callback provided by the developer that we'll call after receiving local media and before\n     * approve() is called.\n     */\n    var previewLocalMedia = typeof params.previewLocalMedia === 'function' ? params.previewLocalMedia : undefined;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name candidateSendingQueue\n     * @private\n     * @type {array}\n     * @desc An array to save candidates between offer and answer so that both parties can process them simultaneously.\n     */\n    var candidateSendingQueue = respoke.queueFactory();\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name candidateReceivingQueue\n     * @private\n     * @type {array}\n     * @desc An array to save candidates between offer and answer so that both parties can process them simultaneously.\n     */\n    var candidateReceivingQueue = respoke.queueFactory();\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name client\n     * @private\n     * @type {respoke.Client}\n     */\n    var client = respoke.getClient(instanceId);\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalOffer\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalOffer = params.signalOffer;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalConnected\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalConnected = params.signalConnected;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalModify\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalModify = params.signalModify;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalAnswer\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalAnswer = params.signalAnswer;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalHangup\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalHangup = respoke.callOnce(params.signalHangup);\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalReport\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed by the signaling channel.\n     */\n    var signalReport = params.signalReport;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalCandidateOrig\n     * @private\n     * @type {function}\n     * @desc A temporary function saved from params in order to construct the candidate signaling function.\n     */\n    var signalCandidateOrig = params.signalCandidate;\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name signalCandidate\n     * @private\n     * @type {function}\n     * @desc A signaling function constructed from the one passed to us by the signaling channel with additions\n     * to facilitate candidate logging.\n     */\n    function signalCandidate(params) {\n        if (!pc) {\n            return;\n        }\n\n        params.iceCandidates = [params.candidate];\n        signalCandidateOrig(params);\n        that.report.candidatesSent.push({candidate: params.candidate});\n    }\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name sdpExpectedStreamCount\n     * @private\n     * @type {number}\n     */\n    that.sdpExpectedStreamCount = 0;\n\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name offerOptions\n     * @private\n     * @type {object}\n     */\n    var offerOptions = params.offerOptions || {};\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name pcOptions\n     * @private\n     * @type {object}\n     */\n    var pcOptions = params.pcOptions || {\n        optional: [\n            { DtlsSrtpKeyAgreement: true },\n            { RtpDataChannels: false }\n        ]\n    };\n\n    /**\n     * @memberof! respoke.PeerConnection\n     * @name report\n     * @type {object}\n     */\n    that.report = {\n        callStarted: 0,\n        callStopped: 0,\n        callerendpoint: that.call.caller ? client.name : that.call.remoteEndpoint.id,\n        callerconnection: that.call.caller ? client.id : that.call.connectionId,\n        calleeendpoint: that.call.caller ? that.call.remoteEndpoint.id : client.id,\n        calleeconnection: that.call.caller ? that.call.connectionId : client.connectionId,\n        sessionId: that.call.id,\n        lastSDPString: '',\n        sdpsSent: [],\n        sdpsReceived: [],\n        candidatesSent: [],\n        candidatesReceived: [],\n        userAgent: navigator.userAgent,\n        os: navigator.platform\n    };\n\n    /**\n     * Start the process of network and media negotiation. Called after local video approved.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.initOffer\n     * @fires respoke.PeerConnection#initOffer\n     * @private\n     */\n    function initOffer() {\n        if (!pc) {\n            return;\n        }\n\n        if (that.state.receiveOnly) {\n            makeOptionsReceiveOnly(offerOptions);\n        }\n\n        if (that.state.sendOnly) {\n            makeOptionsSendOnly(offerOptions);\n        }\n\n        log.info('creating offer', offerOptions);\n        pc.createOffer(saveOfferAndSend, function errorHandler(p) {\n            log.error('createOffer failed');\n        }, offerOptions);\n    }\n\n    function makeOptionsReceiveOnly(options) {\n        if (navigator.webkitGetUserMedia) {\n            options.mandatory = {\n                OfferToReceiveVideo: true,\n                OfferToReceiveAudio: true,\n                OfferToSendVideo: false,\n                OfferToSendAudio: false\n            };\n        } else {\n            options.offerToReceiveVideo = true;\n            options.offerToReceiveAudio = true;\n            options.offerToSendVideo = false;\n            options.offerToSendAudio = false;\n        }\n    }\n\n    function makeOptionsSendOnly(options) {\n        if (navigator.webkitGetUserMedia) {\n            options.mandatory = {\n                OfferToSendVideo: true,\n                OfferToSendAudio: true,\n                OfferToReceiveVideo: false,\n                OfferToReceiveAudio: false\n            };\n        } else {\n            options.offerToSendVideo = true;\n            options.offerToSendAudio = true;\n            options.offerToReceiveVideo = false;\n            options.offerToReceiveAudio = false;\n        }\n    }\n\n    /**\n     * Process a remote offer if we are not the caller. This is necessary because we don't process the offer until\n     * the callee has answered the call.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.processOffer\n     * @param {RTCSessionDescriptor}\n     * @returns {Promise}\n     */\n    that.processOffer = function (oOffer) {\n        if (!pc) {\n            return;\n        }\n        log.debug('processOffer', oOffer);\n\n        that.report.sdpsReceived.push(oOffer);\n        that.report.lastSDPString = oOffer.sdp;\n\n        //set flags for audio / video being offered\n        that.sdpExpectedStreamCount = respoke.sdpStreamCount(oOffer.sdp);\n        that.call.hasDataChannel = respoke.sdpHasDataChannel(oOffer.sdp);\n\n        try {\n            pc.setRemoteDescription(new RTCSessionDescription(oOffer),\n                function successHandler() {\n                    if (!pc) {\n                        return;\n                    }\n\n                    processReceivingQueue();\n                    log.debug('set remote desc of offer succeeded');\n                    pc.createAnswer(function successHandler(oSession) {\n                        that.state.processedRemoteSDP = true;\n                        saveAnswerAndSend(oSession);\n                    }, function errorHandler(err) {\n                        err = new Error(\"Error creating SDP answer.\" + err.message);\n                        that.report.callStoppedReason = err.message;\n                        /**\n                         * This event is fired on errors that occur during call setup or media negotiation.\n                         * @event respoke.Call#error\n                         * @type {respoke.Event}\n                         * @property {string} reason - A human readable description about the error.\n                         * @property {respoke.Call} target\n                         * @property {string} name - the event name.\n                         */\n                        that.call.fire('error', {\n                            message: err.message\n                        });\n                        log.error('create answer failed');\n                        that.report.callStoppedReason = 'setRemoteDescription failed at answer.';\n                        that.close();\n                    });\n                }, function errorHandler(err) {\n                    err = new Error('Error calling setRemoteDescription on offer I received.' + err.message);\n                    that.report.callStoppedReason = err.message;\n                    /**\n                     * This event is fired on errors that occur during call setup or media negotiation.\n                     * @event respoke.Call#error\n                     * @type {respoke.Event}\n                     * @property {string} reason - A human readable description about the error.\n                     * @property {respoke.Call} target\n                     * @property {string} name - the event name.\n                     */\n                    that.call.fire('error', {\n                        message: err.message\n                    });\n                }\n            );\n        } catch (err) {\n            var newErr = new Error(\"Exception calling setRemoteDescription on offer I received.\" + err.message);\n            that.report.callStoppedReason = newErr.message;\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.call.fire('error', {\n                message: newErr.message\n            });\n        }\n    };\n\n    /**\n     * Return media stats. Since we have to wait for both the answer and offer to be available before starting\n     * statistics, we'll return a promise for the stats object.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.getStats\n     * @returns {Promise<{respoke.MediaStatsParser}>|undefined}\n     * @param {object} params\n     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onSuccess] - Success handler for this\n     * invocation of this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @fires respoke.PeerConnection#stats\n     */\n    function getStats(params) {\n        var deferred = Q.defer();\n        var retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n\n        if (!respoke.MediaStats) {\n            deferred.reject(new Error(\"Statistics module is not loaded.\"));\n            return retVal;\n        }\n\n        function onConnect() {\n            var stats = respoke.MediaStatsParser({\n                peerConnection: pc,\n                interval: params.interval,\n                onStats: function statsHandler(stats) {\n                    if (!pc) {\n                        return;\n                    }\n\n                    /**\n                     * This event is fired every 5 seconds by default, configurable by the 'interval' property to\n                     * `call.startStats` and reports the current state of media statistics.\n                     * @event respoke.PeerConnection#stats\n                     * @type {respoke.Event}\n                     * @property {object} stats - an object with stats in it.\n                     * @property {string} name - the event name.\n                     * @property {respoke.PeerConnection}\n                     */\n                    that.fire('stats', {\n                        stats: stats\n                    });\n                }\n            });\n            that.listen('close', function closeHandler(evt) {\n\n                stats.stopStats();\n            }, true);\n            deferred.resolve();\n        }\n\n        if (!pc) {\n            that.once('stream-received', onConnect);\n        } else {\n            onConnect();\n        }\n\n        return retVal;\n    }\n\n    if (respoke.MediaStats) {\n        that.getStats = getStats;\n    }\n\n    /**\n     * Create the RTCPeerConnection and add handlers. Process any offer we have already received.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.init\n     */\n    that.init = function init() {\n        log.debug('PC.init');\n\n        if (pc) {\n            return;\n        }\n\n        that.report.callStarted = new Date().getTime();\n\n        pc = new RTCPeerConnection(that.servers, pcOptions);\n        pc.onicecandidate = onIceCandidate;\n        pc.onnegotiationneeded = onNegotiationNeeded;\n        pc.oniceconnectionstatechange = onIceConnectionStateChange;\n        pc.onaddstream = function onaddstream(evt) {\n            /**\n             * Indicate the RTCPeerConnection has received remote media.\n             * @event respoke.PeerConnection#remote-stream-received\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('remote-stream-received', {\n                stream: evt.stream\n            });\n        };\n        pc.onremovestream = function onremovestream(evt) {\n            /**\n             * Indicate the remote side has stopped sending media.\n             * @event respoke.PeerConnection#remote-stream-removed\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('remote-stream-removed', {\n                stream: evt.stream\n            });\n        };\n        pc.ondatachannel = function ondatachannel(evt) {\n            /**\n             * CAUTION: This event is only called for the callee because RTCPeerConnection#ondatachannel\n             * is only called for the callee.\n             * @event respoke.PeerConnection#direct-connection\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('direct-connection', {\n                channel: evt.channel\n            });\n        };\n\n        that.state.listen('offering:entry', function (evt) {\n            if (that.state.caller) {\n                initOffer();\n            }\n        });\n    };\n\n    /**\n     * Return an array of remote media streams.\n     * @muremberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.getRemoteStreams\n     */\n    that.getRemoteStreams = function () {\n        if (!pc) {\n            return [];\n        }\n        return pc.getRemoteStreams.apply(pc, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Return an array of local media streams.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.getLocalStreams\n     */\n    that.getLocalStreams = function () {\n        if (!pc) {\n            return [];\n        }\n        return pc.getLocalStreams.apply(pc, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * Create a data channel.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.createDataChannel\n     */\n    that.createDataChannel = function () {\n        if (!pc) {\n            return;\n        }\n        return pc.createDataChannel.apply(pc, Array.prototype.slice.call(arguments));\n    };\n\n    /**\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.addStream\n     * Expose addStream.\n     * @param {RTCMediaStream}\n     */\n    that.addStream = function (stream) {\n        if (!pc) {\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.call.fire('error', {\n                message: \"Got local stream in a precall state.\"\n            });\n            return;\n        }\n        pc.addStream(stream);\n    };\n\n    /**\n     * Process a local ICE Candidate\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.onIceCandidate\n     * @private\n     * @param {RTCIceCandidate}\n     */\n    function onIceCandidate(oCan) {\n        var candidate = oCan.candidate; // {candidate: ..., sdpMLineIndex: ... }\n        if (!pc || !candidate || !candidate.candidate) {\n            return;\n        }\n\n        if (that.forceTurn === true && candidate.candidate.indexOf(\"typ relay\") === -1) {\n            log.debug(\"Dropping candidate because forceTurn is on.\");\n            return;\n        } else if (that.disableTurn === true && candidate.candidate.indexOf(\"typ relay\") !== -1) {\n            log.debug(\"Dropping candidate because disableTurn is on.\");\n            return;\n        }\n\n        candidateSendingQueue.push(candidate);\n    }\n\n    /**\n     * Handle ICE state change\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.onIceConnectionStateChange\n     * @private\n     */\n    function onIceConnectionStateChange(evt) {\n        if (!pc) {\n            return;\n        }\n\n        if (pc.iceConnectionState === 'connected') {\n            /**\n             * Indicate that we've successfully connected to the remote side. This is only helpful for the\n             * outgoing connection.\n             * @event respoke.PeerConnection#connect\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('connect');\n        }\n    }\n\n    /**\n     * Handle renegotiation\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.onNegotiationNeeded\n     * @private\n     */\n    function onNegotiationNeeded() {\n        log.warn(\"Negotiation needed.\");\n    }\n\n    /**\n     * Process any ICE candidates that we received from our browser before we were able to send\n     * our SDP to the other side.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.processSendingQueue\n     * @private\n     */\n    function processSendingQueue() {\n        candidateSendingQueue.trigger(function sendIce(can) {\n            if (!pc) {\n                return;\n            }\n\n            signalCandidate({\n                candidate: can,\n                call: that.call\n            });\n        });\n    }\n\n    /**\n     * Process any ICE candidates that we received from the other side while we were waiting on the other\n     * party's SDP to arrive and be processed.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.processReceivingQueue\n     * @private\n     */\n    function processReceivingQueue() {\n        candidateReceivingQueue.trigger(function processIce(can) {\n            if (!pc) {\n                return;\n            }\n\n            pc.addIceCandidate(new RTCIceCandidate(can.candidate), function onSuccess() {\n                log.debug((that.state.caller ? 'caller' : 'callee'), 'got a remote candidate.', can.candidate);\n                that.report.candidatesReceived.push(can.candidate);\n            }, function onError(e) {\n                log.error(\"Couldn't add ICE candidate: \" + e.message, can.candidate);\n            });\n        });\n    }\n\n    /**\n     * Save an SDP we've gotten from the browser which will be an offer and send it to the other\n     * side.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.saveOfferAndSend\n     * @param {RTCSessionDescription}\n     * @private\n     */\n    function saveOfferAndSend(oSession) {\n        oSession.type = 'offer';\n        if (!pc) {\n            return;\n        }\n        log.debug('setting and sending offer', oSession);\n        that.report.sdpsSent.push(oSession);\n\n        pc.setLocalDescription(oSession, function successHandler(p) {\n            oSession.type = 'offer';\n            signalOffer({\n                call: that.call,\n                sessionDescription: oSession,\n                onSuccess: function () {\n                    that.state.sentSDP = true;\n                    processSendingQueue();\n                },\n                onError: function (err) {\n                    log.error('offer could not be sent', err);\n                    that.call.hangup({signal: false});\n                }\n            });\n        }, function errorHandler(p) {\n            var err = new Error('Error calling setLocalDescription on offer I created.');\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.call.fire('error', {\n                message: err.message\n            });\n        });\n    }\n\n    /**\n     * Save our SDP we've gotten from the browser which will be an answer and send it to the\n     * other side.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.saveAnswerAndSend\n     * @param {RTCSessionDescription}\n     * @private\n     */\n    function saveAnswerAndSend(oSession) {\n        if (!pc) {\n            return;\n        }\n\n        if (!that.state.caller) {\n            that.report.callerconnection = that.call.connectionId;\n        }\n\n        oSession.type = 'answer';\n        log.debug('setting and sending answer', oSession);\n        that.report.sdpsSent.push(oSession);\n\n        pc.setLocalDescription(oSession, function successHandler(p) {\n            oSession.type = 'answer';\n            signalAnswer({\n                sessionDescription: oSession,\n                call: that.call,\n                onSuccess: processSendingQueue\n            });\n            that.state.sentSDP = true;\n        }, function errorHandler(p) {\n            var err = new Error('Error calling setLocalDescription on answer I created.');\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.call.fire('error', {\n                message: err.message\n            });\n        });\n    }\n\n    /**\n     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n     * signal is not false and we have not received a hangup signal from the remote party.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.close\n     * @fires respoke.PeerConnection#destoy\n     * @param {object} param\n     * @param {boolean} [param.signal] - Optional flag to indicate whether to send or suppress sending\n     * a hangup signal to the remote side. This is set to false by the library if we're responding to a\n     * hangup signal.\n     * @fires respoke.PeerConnection#close\n     */\n    that.close = function (params) {\n        params = params || {};\n        toSendHangup = true;\n\n        if (that.state.caller === true) {\n            if (!that.state.sentSDP) {\n                // Never send hangup if we are the caller but we haven't sent any other signal yet.\n                toSendHangup = false;\n            }\n        }\n\n        toSendHangup = (typeof params.signal === 'boolean' ? params.signal : toSendHangup);\n        if (toSendHangup) {\n            log.info('sending hangup');\n            signalHangup({\n                call: that.call\n            });\n        }\n\n        that.report.callStopped = new Date().getTime();\n\n        /**\n         * Indicate that the RTCPeerConnection is closed.\n         * @event respoke.PeerConnection#close\n         * @type {respoke.Event}\n         * @property {boolean} sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n         * @property {string} name - the event name.\n         * @property {respoke.PeerConnection}\n         */\n        that.fire('close', {\n            sentSignal: toSendHangup\n        });\n        that.ignore();\n\n        if (pc && that.report) {\n            pc.close();\n        }\n        pc = null;\n\n        if (that.call.enableCallDebugReport) {\n            signalReport({\n                report: that.report\n            });\n        }\n        that.report = null;\n    };\n    that.close = respoke.callOnce(that.close);\n\n    /**\n     * Indicate whether a call is being setup or is in progress.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.isActive\n     * @returns {boolean}\n     */\n    that.isActive = function () {\n        return !!(pc && ['completed', 'connected', 'new', 'checking'].indexOf(pc.iceConnectionState) > -1);\n    };\n\n    /**\n     * Save the answer and tell the browser about it.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.listenAnswer\n     * @param {object} evt\n     * @param {object} evt.signal - The signal, including the remote SDP and the connectionId of the endpoint who\n     * answered the call.\n     * @private\n     */\n    function listenAnswer(evt) {\n        if (!pc) {\n            return;\n        }\n        log.debug('got answer', evt.signal);\n\n        that.report.sdpsReceived.push(evt.signal.sessionDescription);\n        that.state.sendOnly = respoke.sdpHasReceiveOnly(evt.signal.sessionDescription.sdp);\n        that.sdpExpectedStreamCount = respoke.sdpStreamCount(evt.signal.sessionDescription.sdp);\n        that.report.lastSDPString = evt.signal.sessionDescription.sdp;\n\n        if (that.state.caller) {\n            that.report.calleeconnection = evt.signal.fromConnection;\n        }\n\n        that.call.connectionId = evt.signal.fromConnection;\n        // TODO don't signal connected more than once.\n        signalConnected({\n            call: that.call\n        });\n\n        pc.setRemoteDescription(\n            new RTCSessionDescription(evt.signal.sessionDescription),\n            function successHandler() {\n                processReceivingQueue();\n                that.state.dispatch('receiveAnswer');\n            }, function errorHandler(p) {\n                var newErr = new Error(\"Exception calling setRemoteDescription on answer I received.\");\n                that.report.callStoppedReason = newErr.message;\n                /**\n                 * This event is fired on errors that occur during call setup or media negotiation.\n                 * @event respoke.Call#error\n                 * @type {respoke.Event}\n                 * @property {string} reason - A human readable description about the error.\n                 * @property {respoke.Call} target\n                 * @property {string} name - the event name.\n                 */\n                that.call.fire('error', {\n                    message: newErr.message\n                });\n                log.error('set remote desc of answer failed', evt.signal.sessionDescription, p);\n                that.report.callStoppedReason = 'setRemoteDescription failed at answer.';\n                that.close();\n            }\n        );\n    }\n\n    /**\n     * Figure out who won the call. This necessary to prevent two connections of the same endpoint from thinking\n     * they are both on the same call.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.listenConnected\n     * @private\n     */\n    function listenConnected(evt) {\n        if (evt.signal.connectionId !== client.connectionId) {\n            log.debug(\"Hanging up because I didn't win the call.\", evt.signal, client);\n            that.call.hangup({signal: false});\n        }\n    }\n\n    /**\n     * Send the initiate signal to start the modify process. This method is only called by the caller of the\n     * renegotiation.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.startModify\n     * @param {object} params\n     * @param {object} [params.constraints] - Indicate this is a request for media and what type of media.\n     * @param {boolean} [params.directConnection] - Indicate this is a request for a direct connection.\n     */\n    that.startModify = function (params) {\n        defModify = Q.defer();\n        signalModify({\n            action: 'initiate',\n            call: that.call,\n            constraints: params.constraints,\n            directConnection: params.directConnection\n        });\n    };\n\n    /**\n     * Indicate a desire from the other side to renegotiate media.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.listenModify\n     * @param {object} evt\n     * @param {object} evt.signal\n     * @private\n     */\n    function listenModify(evt) {\n        var err;\n        log.debug('PC.listenModify', evt.signal);\n\n        if (evt.signal.action === 'accept') {\n            if (defModify.promise.isPending()) {\n                defModify.resolve();\n                /**\n                 * Indicate that the remote party has accepted our invitation to begin renegotiating media.\n                 * @event respoke.PeerConnection#modify-accept\n                 * @type {respoke.Event}\n                 * @property {string} name - the event name.\n                 * @property {respoke.PeerConnection}\n                 */\n                that.fire('modify-accept', {signal: evt.signal});\n            }\n            return;\n        } else if (evt.signal.action === 'reject') {\n            if (defModify.promise.isPending()) {\n                err = new Error(\"Remote party cannot negotiate.\");\n                log.debug(err.message);\n                defModify.reject(err);\n                /**\n                 * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n                 * @event respoke.PeerConnection#modify-reject\n                 * @type {respoke.Event}\n                 * @property {Error} err\n                 * @property {string} name - the event name.\n                 * @property {respoke.PeerConnection}\n                 */\n                that.fire('modify-reject', {err: err});\n            }\n            return;\n        }\n\n        // This code only gets executed if signal.action === 'initiate'\n        if (defModify && defModify.promise.isPending()) {\n            // TODO compare signal request ID and accept if we have the higher request ID,\n            // reject if we have the lower request ID.\n            err = new Error(\"Got modify in a negotiating state.\");\n            log.debug(err.message);\n            defModify.reject(err);\n            /**\n             * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n             * @event respoke.PeerConnection#modify-reject\n             * @type {respoke.Event}\n             * @property {Error} err\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('modify-reject', {err: err});\n            signalModify({\n                action: 'reject',\n                call: that.call\n            });\n            return;\n        }\n\n        defModify = Q.defer();\n\n        if (!that.state.sentSDP || that.state.isState('idle')) {\n            err = new Error(\"Got modify in a precall state.\");\n            /**\n             * Indicate that the remote party has rejected our invitation to begin renegotiating media.\n             * @event respoke.PeerConnection#modify-reject\n             * @type {respoke.Event}\n             * @property {Error} err\n             * @property {string} name - the event name.\n             * @property {respoke.PeerConnection}\n             */\n            that.fire('modify-reject', {err: err});\n            signalModify({\n                action: 'reject',\n                call: that.call\n            });\n            defModify.reject(err);\n            return;\n        }\n\n        /**\n         * Indicate that the remote party has accepted our invitation to begin renegotiating media.\n         * @event respoke.PeerConnection#modify-accept\n         * @type {respoke.Event}\n         * @property {object} signal\n         * @property {string} name - the event name.\n         * @property {respoke.PeerConnection}\n         */\n        that.fire('modify-accept', {signal: evt.signal});\n        signalModify({\n            action: 'accept',\n            call: that.call\n        });\n        defModify.resolve();\n    }\n\n    /**\n     * Save the candidate. If we initiated the call, place the candidate into the queue so\n     * we can process them after we receive the answer.\n     * @memberof! respoke.PeerConnection\n     * @method respoke.PeerConnection.addRemoteCandidate\n     * @param {object} params\n     * @param {RTCIceCandidate} params.candidate\n     */\n    that.addRemoteCandidate = function (params) {\n        if (!pc && (that.state.sentSDP || that.state.receivedSDP)) { // we hung up.\n            return;\n        }\n\n        if (!params || !params.candidate || !params.candidate.hasOwnProperty('sdpMLineIndex')) {\n            log.warn(\"addRemoteCandidate got wrong format!\", params);\n            return;\n        }\n\n        candidateReceivingQueue.push(params);\n    };\n\n    that.call.listen('signal-answer', listenAnswer, true);\n    that.call.listen('signal-connected', listenConnected, true);\n    that.call.listen('signal-modify', listenModify, true);\n\n    return that;\n}; // End respoke.PeerConnection\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/peerConnection.js\n ** module id = 18\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar respoke = require('./respoke');\nvar log = respoke.log;\nvar Statechart = require('statechart');\nvar Q = require('q');\n\n/**\n * State machine for WebRTC calling, data channels, and screen sharing.\n * NOTE: All state transitions are synchronous! However, listeners to the events this class fires will be called\n * asynchronously.\n * @class respoke.CallState\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {respoke.Call} call\n * @link https://cdn.respoke.io/respoke.min.js\n * @returns {respoke.CallState}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var fsm;\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    that.className = 'respoke.CallState';\n    delete that.instanceId;\n\n    var client = respoke.getClient(instanceId);\n    var allTimers = [];\n    var answerTimer;\n    var answerTimeout = params.answerTimeout || 10000;\n    var receiveAnswerTimer;\n    var receiveAnswerTimeout = params.receiveAnswerTimeout || 60000;\n    var connectionTimer;\n    var connectionTimeout = params.connectionTimeout || 10000;\n    var modifyTimer;\n    var modifyTimeout = params.modifyTimeout || 60000;\n    var oldRole;\n\n    /*!\n     * These can quite often result in a condition in which they do not cause a transition to occur.\n     * There is at least one \"universal\" (air quotes) event which probably? shouldn't? but may\n     * result in a non-transition error when it's OK, and that is the 'reject' event.\n     */\n    var nontransitionEvents = ['receiveLocalMedia', 'receiveRemoteMedia', 'approve', 'answer', 'sentOffer',\n        'receiveAnswer'];\n\n    function assert(condition) {\n        if (!condition) {\n            throw new Error(\"Assertion failed.\");\n        }\n    }\n\n    that.hasLocalMediaApproval = false;\n    that.hasLocalMedia = false;\n    that.receivedBye = false;\n    that.isAnswered = false;\n    that.sentSDP = false;\n    that.receivedSDP = false;\n    that.processedRemoteSDP = false;\n    that.needDirectConnection = !!that.needDirectConnection;\n    that.sendOnly = !!that.sendOnly;\n    that.receiveOnly = !!that.receiveOnly;\n\n    // Event\n    var rejectEvent = [{\n        target: 'connected',\n        guard: function (params) {\n            // we have any media flowing or data channel open\n            if (typeof oldRole === 'boolean') {\n                // Reset the role if we have aborted a modify.\n                that.caller = oldRole;\n            }\n\n            if (modifyTimer) {\n                modifyTimer.clear();\n            }\n\n            return that.hasMedia();\n        }\n    }, {\n        target: 'terminated',\n        guard: function (params) {\n            params = params || {};\n            // we have no media flowing or data channel open\n            that.hangupReason = params.reason || \"no media\";\n            return !that.hasMedia();\n        }\n    }];\n\n    // Event\n    function rejectModify() {\n        // reject modification\n        if (modifyTimer) {\n            modifyTimer.clear();\n        }\n    }\n\n    // Event\n    function clearReceiveAnswerTimer() {\n        that.processedRemoteSDP = true;\n        if (receiveAnswerTimer) {\n            receiveAnswerTimer.clear();\n        }\n    }\n\n    // Event\n    var hangupEvent = {\n        target: 'terminated',\n        action: function (params) {\n            params = params || {};\n            that.signalBye = params.signal;\n            that.hangupReason = that.hangupReason || params.reason || \"none\";\n        }\n    };\n\n    function needToObtainMedia() {\n        return (\n            that.needDirectConnection !== true &&\n            that.receiveOnly !== true &&\n            that.hasLocalMedia !== true\n        );\n    }\n\n    function needToApproveDirectConnection(params) {\n        return (that.needDirectConnection === true && typeof params.previewLocalMedia === 'function');\n    }\n\n    function automaticOffering(params) {\n        if (that.caller !== true) {\n            return false;\n        }\n\n        // TODO: this will need to be change with media negotiation\n        if ((!that.needDirectConnection && that.receiveOnly) || that.hasLocalMedia) {\n            return true;\n        }\n        return (that.needDirectConnection === true && typeof params.previewLocalMedia !== 'function');\n    }\n\n    function hasListener() {\n        if ((client.hasListeners('call') && !that.needDirectConnection) ||\n                (client.hasListeners('direct-connection') && that.needDirectConnection)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function createTimer(func, name, time) {\n        var id = setTimeout(function () {\n            id = null;\n            log.error((that.caller ? \"caller's\" : \"callee's\"), name, \"timer expired.\");\n            func();\n        }, time);\n        log.debug('setting timer', name, 'for', time / 1000, 'secs');\n        var timer  = {\n            name: name,\n            clear: function () {\n                if (id === null) {\n                    return;\n                }\n                log.debug('clearing', (that.caller ? \"caller's\" : \"callee's\"), 'timer', name);\n                clearTimeout(id);\n                id = null;\n            }\n        };\n        allTimers.push(timer);\n        return timer;\n    }\n\n    var stateParams = {\n        initialState: 'idle',\n        states: {\n            // State\n            idle: {\n                // Event\n                exit: function () {\n                    that.fire('idle:exit');\n                },\n                // Event\n                initiate: [{\n                    target: 'negotiatingContainer',\n                    guard: function (params) {\n                        assert(typeof params.caller === 'boolean');\n                        return (params.caller === true || hasListener());\n                    }\n                }, {\n                    target: 'terminated',\n                    guard: function (params) {\n                        return (params.caller !== true && !hasListener());\n                    }\n                }],\n                receiveLocalMedia: function () {\n                    that.hasLocalMedia = true;\n                },\n                // Event\n                receiveOffer: {\n                    action: function (params) {\n                        that.receivedSDP = true;\n                    }\n                },\n                // Event\n                hangup: hangupEvent\n            },\n            // State\n            negotiatingContainer: {\n                init: \"preparing\",\n                // Event\n                hangup: hangupEvent,\n                // Event\n                modify: rejectModify,\n                // Event\n                receiveLocalMedia: function () {\n                    that.hasLocalMedia = true;\n                },\n                states: {\n                    preparing: {\n                        // Event\n                        entry: {\n                            action: function () {\n                                that.hasLocalMediaApproval = false;\n                                that.hasLocalMedia = false;\n                                that.sentSDP = false;\n                                that.receivedSDP = false;\n                                that.processedRemoteSDP = false;\n                                that.isAnswered = false;\n                                if (!that.isModifying()) {\n                                    answerTimer = createTimer(function () {\n                                        that.dispatch('reject', {reason: \"answer own call timer \" + that.caller});\n                                    }, 'answer own call', answerTimeout);\n                                }\n                                that.fire('preparing:entry');\n                            }\n                        },\n                        // Event\n                        exit: function () {\n                            that.fire('preparing:exit');\n                            if (answerTimer) {\n                                answerTimer.clear();\n                            }\n                        },\n                        // Event\n                        reject: rejectEvent,\n                        // Event\n                        receiveOffer: {\n                            action: function (params) {\n                                that.receivedSDP = true;\n                                if (that.isAnswered) {\n                                    // If we get here, we are the callee and we've answered the call before the call\n                                    // creation/receive offer promise chain completed.\n                                    setTimeout(function () {\n                                        that.dispatch('answer', params);\n                                    });\n                                }\n                            }\n                        },\n                        // Event\n                        answer: [{\n                            action: function (params) {\n                                assert(!params.previewLocalMedia || typeof params.previewLocalMedia === 'function');\n                                that.isAnswered = true;\n                                if (typeof params.previewLocalMedia !== 'function') {\n                                    that.hasLocalMediaApproval = true;\n                                }\n                            }\n                        }, {\n                            // we are going to send media\n                            target: 'approvingDeviceAccess',\n                            guard: needToObtainMedia\n                        }, {\n                            // we are sending a direct connection & developer wants to approve\n                            target: 'approvingContent',\n                            guard: needToApproveDirectConnection\n                        }, {\n                            target: 'offering',\n                            guard: automaticOffering\n                        }, {\n                            // we are not sending anything or developer does not want to approve media.\n                            target: 'connecting',\n                            guard: function (params) {\n                                // caller will always answer before sending offer.\n                                // callee will usually answer after receiving offer if media is requested.\n                                if (!that.receivedSDP) {\n                                    return false;\n                                }\n\n                                if (needToObtainMedia() || needToApproveDirectConnection(params) ||\n                                        automaticOffering(params)) {\n                                    return false;\n                                }\n\n                                if (!params.previewLocalMedia || that.receiveOnly) {\n                                    setTimeout(function () {\n                                        params.approve();\n                                    });\n                                }\n                                return (that.receiveOnly === true || that.needDirectConnection === true);\n                            }\n                        }]\n                    },\n                    // State\n                    gettingMedia: {\n                        reject: rejectEvent,\n                        // Event\n                        receiveLocalMedia: [{\n                            action: function () {\n                                that.hasLocalMedia = true;\n                            }\n                        }, {\n                            target: 'offering',\n                            guard: function (params) {\n                                return (that.caller === true && that.hasLocalMediaApproval === true &&\n                                    that.hasLocalMedia === true);\n                            }\n                        }, {\n                            target: 'connecting',\n                            guard: function (params) {\n                                return (that.caller === false && that.hasLocalMediaApproval === true &&\n                                    that.hasLocalMedia === true);\n                            }\n                        }],\n                        states: {\n                            // State\n                            approvingDeviceAccess: {\n                                // Event\n                                entry: function () {\n                                    that.fire('approving-device-access:entry');\n                                },\n                                // Event\n                                approve: [{\n                                    target: 'approvingContent',\n                                    guard: function (params) {\n                                        return (typeof params.previewLocalMedia === 'function');\n                                    }\n                                }, {\n                                    target: 'connecting',\n                                    guard: function (params) {\n                                        return (that.caller === false &&\n                                            (that.hasLocalMedia === true || that.needDirectConnection === true) &&\n                                            typeof params.previewLocalMedia !== 'function');\n                                    }\n                                }, {\n                                    target: 'offering',\n                                    guard: function (params) {\n                                        return (that.caller === true && that.hasLocalMedia === true &&\n                                            typeof params.previewLocalMedia !== 'function');\n                                    }\n                                }]\n                            },\n                            // State\n                            approvingContent: {\n                                // Event\n                                entry: function () {\n                                    that.fire('approving-content:entry');\n                                },\n                                // Event\n                                exit: function () {\n                                    that.fire('approving-content:exit');\n                                },\n                                // Event\n                                approve: [function (params) {\n                                    that.hasLocalMediaApproval = true;\n                                }, {\n                                    target: 'offering',\n                                    guard: function (params) {\n                                        return (that.caller === true && that.hasLocalMedia === true);\n                                    }\n                                }, {\n                                    target: 'connecting',\n                                    guard: function (params) {\n                                        return (that.caller === false && that.hasLocalMedia === true);\n                                    }\n                                }]\n                            }\n                        }\n                    },\n                    // State\n                    offeringContainer: {\n                        init: 'offering',\n                        reject: rejectEvent,\n                        sentOffer: function () {\n                            // start answer timer\n                            receiveAnswerTimer = createTimer(function () {\n                                that.dispatch('reject', {reason: \"receive answer timer\"});\n                            }, 'receive answer', receiveAnswerTimeout);\n                        },\n                        states: {\n                            offering: {\n                                // Event\n                                entry: function () {\n                                    that.fire('offering:entry');\n                                },\n                                // Event\n                                exit: function () {\n                                    that.fire('offering:exit');\n                                },\n                                // Event\n                                receiveLocalMedia: [function () {\n                                    that.hasLocalMedia = true;\n                                }, {\n                                    target: 'connected',\n                                    guard: function (params) {\n                                        // for direct connection, local media is the same as remote media\n                                        return (that.needDirectConnection === true);\n                                    }\n                                }],\n                                // Event\n                                receiveRemoteMedia: {\n                                    target: 'connected'\n                                },\n                                // Event\n                                receiveAnswer: [clearReceiveAnswerTimer, {\n                                    target: 'connecting'\n                                }]\n                            }\n                        }\n                    },\n                    // State\n                    connectingContainer: {\n                        init: 'connecting',\n                        reject: rejectEvent,\n                        receiveAnswer: clearReceiveAnswerTimer,\n                        states: {\n                            connecting: {\n                                // Event\n                                entry: function () {\n                                    that.fire('connecting:entry');\n\n                                    // set connection timer\n                                    connectionTimer = createTimer(function () {\n                                        that.dispatch('reject', {reason: \"connection timer\"});\n                                    }, 'connection', connectionTimeout);\n                                },\n                                // Event\n                                exit: function () {\n                                    if (connectionTimer) {\n                                        connectionTimer.clear();\n                                    }\n                                    if (modifyTimer) {\n                                        modifyTimer.clear();\n                                    }\n                                    that.fire('connecting:exit');\n                                },\n                                // Event\n                                receiveLocalMedia: [{\n                                    action: function () {\n                                        that.hasLocalMedia = true;\n                                    }\n                                }, {\n                                    target: 'connected',\n                                    guard: function (params) {\n                                        // for direct connection, local media is the same as remote media\n                                        return (that.needDirectConnection === true && that.caller === false);\n                                    }\n                                }],\n                                // Event\n                                receiveRemoteMedia: {\n                                    target: 'connected'\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            // State\n            // This state is for when we are in limbo between connected and negotiating and we are\n            // trying to figure out if the other side will allow us to modify. If we receive modify in\n            // this state, we will reject it. If the other party is in connected, we will be able to modify.\n            modifyingContainer: {\n                init: 'modifying',\n                reject: rejectEvent,\n                // Event\n                modify: rejectModify,\n                // Event\n                hangup: hangupEvent,\n                states: {\n                    modifying: {\n                        // Event\n                        entry: function () {\n                            modifyTimer = createTimer(function () {\n                                that.dispatch('reject', {reason: \"modify timer\"});\n                            }, 'modify for caller', modifyTimeout);\n                            that.fire('modifying:entry');\n                        },\n                        // Event\n                        accept: [function () {\n                            that.caller = true;\n                        }, {\n                            target: 'preparing'\n                        }],\n                        // Event\n                        exit: function () {\n                            that.fire('modifying:exit');\n                        }\n                    }\n                }\n            },\n            // State\n            connectedContainer: {\n                init: 'connected',\n                reject: {\n                    target: 'terminated',\n                    action: function (params) {\n                        that.hangupReason = params.reason || \"got reject while connected\";\n                    }\n                },\n                receiveAnswer: clearReceiveAnswerTimer,\n                // Event\n                hangup: hangupEvent,\n                states: {\n                    connected: {\n                        // Event\n                        entry: function () {\n                            oldRole = that.caller;\n                            that.needDirectConnection = false;\n                            that.fire('connected:entry');\n                        },\n                        // Event\n                        exit: function () {\n                            that.fire('connected:exit');\n                        },\n                        // Event\n                        modify: [{\n                            // be notified that the other side would like modification\n                            target: 'preparing',\n                            guard: function (params) {\n                                params = params || {};\n                                if (params.receive === true) {\n                                    that.caller = false;\n                                    modifyTimer = createTimer(function () {\n                                        // If modify gets interrupted, go back to previous roles.\n                                        that.dispatch('reject', {reason: \"modify timer\"});\n                                    }, 'modify', modifyTimeout);\n                                    return true;\n                                }\n                            }\n                        }, {\n                            // request to begin modification\n                            target: 'modifying',\n                            guard: function (params) {\n                                params = params || {};\n                                return (params.receive !== true);\n                            }\n                        }]\n                    }\n                }\n            },\n            // State\n            terminatedContainer: {\n                init: 'terminated',\n                states: {\n                    terminated: {\n                        // Event\n                        entry: {\n                            action: function () {\n                                that.fire('terminated:entry');\n                                allTimers.forEach(function (timer) {\n                                    timer.clear();\n                                });\n                                setTimeout(function () {\n                                    fsm = null;\n                                    that.ignore();\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    stateParams.that = Object.create(Statechart);\n    fsm = respoke.Class(stateParams);\n    fsm.run({\n        // rename to 'debug' to enable\n        debugOff: function () {\n            // So we can print the caller. Debug most often used when testing & tests run in the same tab.\n            var args = Array.prototype.slice.call(arguments);\n            args.splice(0, 0, that.caller);\n            log.debug.apply(log, args);\n        }\n    });\n\n    /**\n     * Return the name of the current state.\n     * @memberof! respoke.CallState\n     * @method respoke.Call.getState\n     * @returns {string}\n     */\n    that.getState = function () {\n        if (!fsm) {\n            return 'terminated';\n        }\n        return fsm.currentState().name;\n    };\n\n    /**\n     * Synchronously dispatch an event, which may or may not change the state.\n     * @memberof! respoke.CallState\n     * @method respoke.Call.dispatch\n     */\n    that.dispatch = function (evt, args) {\n        var oldState;\n        var newState;\n\n        if (!fsm) {\n            return;\n        }\n\n        oldState = that.getState();\n        try {\n            fsm.dispatch(evt, args);\n        } catch (err) {\n            log.debug('error dispatching', evt, 'from', oldState, \"with\", args, err);\n            throw err;\n        }\n        newState = that.getState();\n        if (oldState === newState && nontransitionEvents.indexOf(evt) === -1) {\n            log.debug(that.caller, \"Possible bad event \" + evt + \", no transition occured.\");\n        }\n        log.debug(that.caller, 'dispatching', evt, 'moving from ', oldState, 'to', newState, args);\n    };\n\n    /**\n     * Determine whether or not we are in the middle of a call modification.\n     * @memberof! respoke.CallState\n     * @method respoke.Call.isModifying\n     * @returns {boolean}\n     */\n    that.isModifying = function () {\n        var modifyingStates = ['preparing', 'modifying', 'approvingDeviceAccess', 'approvingMedia', 'offering'];\n        return (modifyingStates.indexOf(that.getState()) > -1 && that.hasMedia());\n    };\n\n    /**\n     * Helper for testing state name\n     * @memberof! respoke.CallState\n     * @method respoke.Call.isState\n     * @param {string} name\n     * @returns {boolean}\n     */\n    that.isState = function (name) {\n        return (that.getState() === name);\n    };\n\n    assert(typeof that.hasMedia === 'function');\n    assert(typeof that.caller === 'boolean');\n    return that;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/callState.js\n ** module id = 19\n ** module chunks = 0\n **/","// Copyright (c) 2010 David Durman\n//\n// The contents of this file are subject to the MIT License (the \"License\");\n// you may not use this file except in compliance with the License. You may obtain a copy of the License at\n// http://opensource.org/licenses/MIT.\n//\n// This hierarchical state machine implementation has been inspired\n// by the QP active object framework, see http://www.state-machine.com/\n\n\n(function(root, factory){\n    \"use strict\";\n\n    if (typeof exports === 'object') {\n\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like enviroments that support module.exports,\n        // like Node.\n        module.exports = factory();\n\n    } else if (typeof define === 'function' && define.amd) {\n\n        // AMD. Register as an anonymous module.\n        define(factory);\n\n    } else {\n\n        // Browser globals (root is window)\n        root.Statechart = factory();\n    }\n\n}(this, function(){\n\n    \"use strict\";\n\n    var assert = function(assertion){\n        if (!assertion) {\n            throw new Error(\"Assertion failed.\");\n        }\n    };\n\n\n    // Statechart.\n    // -----------\n\n    // `myState` - the current state\n    // `mySource` - the source of the current transition\n\n    var Statechart = {\n\n        run: function(opt){\n            opt = opt || {};\n            this.debug = opt.debug ? opt.debug : function(){};\n            this.construct(this.initialState);\n            this.init(null);\n        },\n\n        construct: function(initialState){\n            this.myState = this.top();\n            this.mySource = this.state(\"Initial\");\n\n            // Initial pseudo-state\n            this.states.Initial = {\n                empty: function(){\n                    this.newInitialState(initialState);\n                }\n            };\n            var handled = function(){ return null; };\n\n            // TOP state\n            this.states.TOP = {\n                entry: handled,\n                exit:  handled,\n                init:  handled,\n                empty: handled\n            };\n            this.flatten();\n        },\n\n        // Trigger the initial transition and recursively enter the submachine of the top state.\n        // Must be called only once for a given Statechart before dispatching any events to it.\n        init: function(anEventOrNull){\n            assert(this.myState === this.top() && this.mySource !== null);\n            var s = this.myState;    // save top in temp\n            this.mySource.trigger(anEventOrNull);    // topmost initial transition\n            assert(s.equals(this.myState.superstate()));    // verify that we only went one level deep\n            s = this.myState;\n            s.enter();\n            while (s.init() === null) {    // while init is handled (i.e. till we reach a leaf node)\n                assert(s.equals(this.myState.superstate()));    // verify that we only went one level deep\n                s = this.myState;\n                s.enter();\n            }\n        },\n\n        state: function(stateOrName){\n            return (stateOrName && stateOrName instanceof QState) ? stateOrName : new QState(this, stateOrName);\n        },\n\n        top: function(stateOrName){\n            // create the top state only once and store it to an auxiliary property\n            return (this._topState || (this._topState = new QState(this, \"TOP\")));\n        },\n\n        currentState: function(){\n            return this.myState;\n        },\n\n        flatten: function(){\n            this.statesTable = this.statesTable || {};\n            this._flatten(this.states, this.top().name);\n        },\n\n        _flatten: function(states, parent){\n            if (!states) {\n                return;\n            }\n\n            for (var state in states) {\n                if (states.hasOwnProperty(state)) {\n                    this.statesTable[state] = states[state];\n                    this.statesTable[state].parent = parent;\n                    this._flatten(states[state].states, state);\n                }\n            }\n        },\n\n        selectState: function(stateName){\n            return this.statesTable[stateName];\n        },\n\n        dispatchEvent: function(anEvent, state, act){\n            act = act || state[anEvent.type];\n\n            // Action might also be an array in which case it is assumed that evaluating guards decides\n            // which target to enter.\n            if (act instanceof Array) {\n                for (var i = 0; i < act.length; i++) {\n                    this.dispatchEvent(anEvent, state, act[i]);\n                }\n            }\n\n            // @todo This is terrible edge case used just for more fancy Statechart representation\n            // It allows using \"MyState\": { init: \"MySubState\", ... } intead of\n            // \"MyState\": { init: function(){ this.newInitialState(\"MySubState\"); }, ... }\n            // In some cases the latter form can be useful for better control of the Statechart\n            if (anEvent.type === \"init\" && typeof act === \"string\") {\n                this.newInitialState(act);\n                return null; // handled\n            }\n\n            if (act instanceof Function){\n                act.call(this, anEvent.args);\n                return null;  // handled\n            } else if (act) {\n                // no guard at all or the guard condition is met\n                if (!act.guard || (act.guard && act.guard.call(this, anEvent.args))){\n                    if (act.action) {\n                        act.action.call(this, anEvent.args);\n                    }\n                    if (act.target) {\n                        this.newState(act.target);\n                    }\n                    return null;  // handled\n                }\n            } else {        // act is undefined (no handler in state for anEvent)\n                if (state === this.selectState(\"TOP\")) {\n                    this.handleUnhandledEvent(anEvent); // not-handled\n                    return null;    // handled (TOP state handles all events)\n                }\n            }\n            return this.state(state.parent); // not-handled\n        },\n\n        // Override this when needed.\n        handleUnhandledEvent: function(anEvent){\n            this.debug(\"Unhandled event: \" + anEvent.type);\n            return null;\n        },\n\n        // Traverse the state hierarchy starting from the currently active state myState.\n        // Advance up the state hierarchy (i.e., from substates to superstates), invoking all\n        // the state handlers in succession. At each level of state nesting, it intercepts the value\n        // returned from a state handler to obtain the superstate needed to advance to the next level.\n        dispatch: function(anEvent, args){\n            if (!anEvent || !(anEvent instanceof QEvent)) {\n                anEvent = new QEvent(anEvent, args);\n            }\n            this.mySource = this.myState;\n            while (this.mySource) {\n                this.mySource = this.mySource.trigger(anEvent);\n            }\n        },\n\n        // Performs dynamic transition. (macro Q_TRAN_DYN())\n        newState: function(aStateName){\n            this.transition(this.state(aStateName));\n        },\n\n        // Used by handlers only in response to the #init event. (macro Q_INIT())\n        // USAGE: return this.newInitialState(\"whatever\");\n        // @return null for convenience\n\n        newInitialState: function(aStateOrName){\n            this.myState = this.state(aStateOrName);\n            return null;\n        },\n\n        // Dynamic transition. (Q_TRAN_DYN())\n        transition: function(target){\n            assert(!target.equals(this.top()));\n\n            var entry = [];\n            var mySource = this.mySource;\n            var s = this.myState;\n\n            // exit all the nested states between myState and mySource\n            assert(s !== null);\n            assert(mySource !== null);\n            while (!s.equals(mySource)) {\n                s = s.exit() || s.superstate();\n            }\n\n            // check all seven possible source/target state combinations\n\n\t    entry.push(target);\n\n            // (a) mySource == target (self transition)\n            if (mySource.equals(target)) {\n                mySource.exit();\n                return this.enterVia(target, entry);\n            }\n\n            // (b) mySource == target.superstate (one level deep)\n            var p = target.superstate();\n            if (mySource.equals(p)) {\n                return this.enterVia(target, entry);\n            }\n\n            assert(mySource !== null);\n\n            // (c) mySource.superstate == target.superstate (most common - fsa)\n            var q = mySource.superstate();\n            if (q.equals(p)) {\n                mySource.exit();\n                return this.enterVia(target, entry);\n            }\n\n            // (d) mySource.superstate == target (one level up)\n            if (q.equals(target)) {\n                mySource.exit();\n                entry.pop();    // do not enter the LCA\n                return this.enterVia(target, entry);\n            }\n\n            // (e) mySource == target.superstate.superstate... hierarchy (many levels deep)\n\t    entry.push(p);\n            s = p.superstate();\n            while (s !== null) {\n                if (mySource.equals(s)) {\n                    return this.enterVia(target, entry);\n                }\n\n\t\tentry.push(s);\n                s = s.superstate();\n            }\n\n            // otherwise we're definitely exiting mySource\n            mySource.exit();\n\n            // entry array is complete, save its length to avoid computing it repeatedly\n            var entryLength = entry.length;\n\n            // (f) mySource.superstate == target.superstate.superstate... hierarchy\n            var lca;\n            for (lca = entryLength - 1; lca >= 0; lca -= 1) {\n                if (q.equals(entry[lca])) {\n                    return this.enterVia(target, entry.slice(0, lca)); // do not enter lca\n                }\n            }\n\n            // (g) each mySource.superstate.superstate... for each target.superstate.superstate...\n            s = q;\n            while (s !== null) {\n                for (lca = entryLength - 1; lca >= 0; lca -= 1) {\n                    if (s.equals(entry[lca])) {\n                        return this.enterVia(target, entry.slice(0, lca)); // do not enter lca\n                    }\n                }\n                s.exit();\n                s = s.superstate();\n            }\n        },\n\n        // tail of transition()\n        // We are in the LCA of mySource and target.\n        enterVia: function(target, entry){\n\n            // retrace the entry path in reverse order\n            var idx = entry.length;\n            while (idx > 0) {\n                idx--;\n                entry[idx].enter();\n            }\n\n            this.myState = target;\n            while (target.init() === null) {\n                // initial transition must go one level deep\n                assert(target.equals(this.myState.superstate()));\n                target = this.myState;\n                target.enter();\n            }\n        }\n    };\n\n    // QState.\n    // -------\n\n    function QState(fsm, name){\n        this.fsm = fsm;\n        this.name = name;\n    }\n\n    QState.prototype = {\n        equals: function(state){\n            return (this.name === state.name && this.fsm === state.fsm);\n        },\n\n        dispatchEvent: function(anEvent, state){\n            return this.fsm.dispatchEvent(anEvent, state);\n        },\n\n        trigger: function(anEvent){\n            var evt = anEvent || QEventEmpty;\n            var state = this.fsm.selectState(this.name);\n            return this.dispatchEvent(evt, state);\n        },\n\n        enter: function(){\n            this.fsm.debug(\"[\" + this.name + \"] enter\");\n            return this.trigger(QEventEntry);\n        },\n\n        exit: function(){\n            this.fsm.debug(\"[\" + this.name + \"] exit\");\n            return this.trigger(QEventExit);\n        },\n\n        init: function(){\n            this.fsm.debug(\"[\" + this.name + \"] init\");\n            return this.trigger(QEventInit);\n        },\n\n        // Answer my superstate. Default is to return fsm top state.\n        superstate: function(){\n            var superstate = this.trigger(QEventEmpty);\n            if (superstate && superstate instanceof QState) {\n                return superstate;\n            }\n            superstate = this.fsm.top();\n            if (this.name === superstate.name) {\n                return null;\n            }\n            return superstate;\n        }\n    };\n\n    // QEvent\n    // ------\n\n    function QEvent(type, args){\n        this.type = type;\n        this.args = args;\n    }\n\n    // these events are static, they do not carry any arguments\n    // -> create them only once\n    // moreover, they don't have to be exposed to the outer world\n    var QEventEntry = new QEvent(\"entry\");\n    var QEventExit = new QEvent(\"exit\");\n    var QEventInit = new QEvent(\"init\");\n    var QEventEmpty = new QEvent(\"empty\");\n\n\n    return Statechart;\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/statechart/lib/statechart.js\n ** module id = 20\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\nvar log = respoke.log;\n\n/**\n * A `respoke.Call` is Respoke's interface into a WebRTC call, including getUserMedia,\n * path and codec negotation, and call state.\n * There are several methods on an instance of `respoke.Client` which return a `respoke.Call`.\n *\n * ```\n * var jim = client.getEndpoint({ id: 'jim' });\n * var call = jim.startAudioCall();\n * ```\n *\n * @class respoke.Call\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.instanceId - client id\n * @param {boolean} params.caller - whether or not we initiated the call\n * @param {boolean} [params.receiveOnly] - whether or not we accept media\n * @param {boolean} [params.sendOnly] - whether or not we send media\n * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n * relay servers. If it cannot flow through relay servers, the call will fail.\n * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n * required to flow peer-to-peer. If it cannot, the call will fail.\n * @param {respoke.Endpoint} params.remoteEndpoint - The endpoint who is being called.\n * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint.\n * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n * wants to perform an action between local media becoming available and calling approve().\n * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n * @param {function} params.signalReport - Signaling action from SignalingChannel.\n * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n * @param {Array<RTCConstraints>} params.constraints - Array of WebRTC constraints. This is ignored when\n * `params.outgoingMedia` is passed into the Call object.\n * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n * media renegotiation.\n * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n * element with the local audio and/or video attached.\n * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n * This callback will be called when media is muted or unmuted.\n * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n * for the user to give permission to start getting audio or video.\n * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n * the approval was automatic.\n * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n * granted by the browser without asking the user to approve it.\n * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n * video attached to it.\n * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n * @param {respoke.LocalMedia} params.outgoingMedia - Pass in an optional LocalMedia object to override the one that is\n * built automatically when establishing the call. When this is defined then any constraints passed to the\n * call are ignored since the media object already exists.\n * video attached to it.\n * @returns {respoke.Call}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Call\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var that = respoke.EventEmitter(params);\n    delete that.instanceId;\n    delete that.outgoingMedia;\n\n    /**\n     * A name to identify the type of object.\n     * @memberof! respoke.Call\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Call';\n\n    /**\n     * Whether or not the client is the caller of the call.\n     * @memberof! respoke.Call\n     * @name caller\n     * @type {boolean}\n     */\n    that.caller = !!that.caller;\n    Object.defineProperty(that, \"initiator\", {\n        configurable: true,\n        enumerable: true,\n        get: function () {\n            log.warn(\"The call.initiator flag is deprecated. Please use call.caller instead.\");\n            return that.caller;\n        },\n        set: function () {\n            // ignore\n        }\n    });\n\n    if (!that.caller) {\n        // Don't let Respoke.js pass any default constraints if we're accepting the call. We have no freaking clue\n        // what kind of media we are expected to provide at this point.\n        delete params.constraints;\n        that.constraints = [];\n    }\n\n    /**\n     * The call ID.\n     * @memberof! respoke.Call\n     * @name id\n     * @type {string}\n     */\n    that.id = that.caller ? respoke.makeGUID() : that.id;\n\n    // log the call id to the console for debugging purposes. Do not change this to `respoke.log`!\n    console.log(\"[Respoke] Creating call. id='\" + that.id + \"'\");\n\n    if (!that.id) {\n        throw new Error(\"Can't start a new call without a call id.\");\n    }\n\n    /**\n     * Promise used to trigger actions dependant upon having received media or a datachannel.\n     * @memberof! respoke.Call\n     * @name defMedia\n     * @private\n     * @type {Promise}\n     */\n    var defMedia = Q.defer();\n    /**\n     * Promise used to trigger notification of a request for renegotiating media. For the caller of the\n     * renegotiation (which doesn't have to be the same as the caller of the call), this is resolved\n     * or rejected as soon as the 'accept' or 'reject' signal is received. For the callee, it is\n     * resolved or rejected only after the developer or user approves or rejects the modify.\n     * @memberof! respoke.Call\n     * @name defModify\n     * @private\n     * @type {Promise}\n     */\n    var defModify;\n    /**\n     * @memberof! respoke.Call\n     * @name previewLocalMedia\n     * @private\n     * @type {respoke.Call.previewLocalMedia}\n     */\n    var previewLocalMedia = params.previewLocalMedia;\n    /**\n     * @memberof! respoke.Call\n     * @name client\n     * @private\n     * @type {respoke.getClient}\n     */\n    var client = respoke.getClient(instanceId);\n    /**\n     * @memberof! respoke.Call\n     * @name signalingChannel\n     * @private\n     * @type {respoke.signalingChannel}\n     */\n    var signalingChannel = params.signalingChannel;\n\n    /**\n     * Informational property. Whether call debugs were enabled on the client during creation.\n     * Changing this value will do nothing.\n     * @name enableCallDebugReport\n     * @type {boolean}\n     */\n    that.enableCallDebugReport = params.signalingChannel.isSendingReport();\n\n    /**\n     * @memberof! respoke.Call\n     * @name pc\n     * @private\n     * @type {respoke.PeerConnection}\n     */\n    var pc = respoke.PeerConnection({\n        instanceId: instanceId,\n        state: respoke.CallState({\n            instanceId: instanceId,\n            caller: that.caller,\n            needDirectConnection: params.needDirectConnection,\n            sendOnly: params.sendOnly,\n            receiveOnly: params.receiveOnly,\n            // hasMedia is not defined yet.\n            hasMedia: function () {\n                return that.hasMedia();\n            }\n        }),\n        forceTurn: !!params.forceTurn,\n        call: that,\n        pcOptions: {\n            optional: [\n                { DtlsSrtpKeyAgreement: true },\n                { RtpDataChannels: false }\n            ]\n        },\n        offerOptions: params.offerOptions || null,\n        signalOffer: function (args) {\n            if (!pc) {\n                return;\n            }\n\n            params.signalOffer(args);\n            pc.state.dispatch('sentOffer');\n        },\n        signalConnected: params.signalConnected,\n        signalAnswer: params.signalAnswer,\n        signalModify: params.signalModify,\n        signalHangup: params.signalHangup,\n        signalReport: params.signalReport,\n        signalCandidate: params.signalCandidate\n    });\n\n    /**\n     * Array of streams of local media that we are sending to the remote party.\n     * @name outgoingMediaStreams\n     * @type {Array<respoke.LocalMedia>}\n     */\n    that.outgoingMediaStreams = [];\n    that.outgoingMediaStreams.hasAudio = function () {\n        if (that.outgoingMediaStreams.length === 0) {\n            return false;\n        }\n\n        return !that.outgoingMediaStreams.every(function (stream) {\n            return stream.getAudioTracks().length === 0;\n        });\n    };\n    that.outgoingMediaStreams.hasVideo = function () {\n        if (that.outgoingMediaStreams.length === 0) {\n            return false;\n        }\n\n        return !that.outgoingMediaStreams.every(function (stream) {\n            return stream.getVideoTracks().length === 0;\n        });\n    };\n\n    if (params.outgoingMedia) {\n        that.outgoingMediaStreams.push(params.outgoingMedia);\n    }\n\n    /**\n     * Local media that we are sending to the remote party. This will be undefined if we are sending no media.\n     * This property is just the first item in the `outgoingMediaStreams` array. If multiple streams are present,\n     * use that array to find the stream you need instead of relying on this property.\n     * @name outgoingMedia\n     * @type {respoke.LocalMedia}\n     */\n    Object.defineProperty(that, \"outgoingMedia\", {\n        configurable: false,\n        enumerable: true,\n        get: function () {\n            return that.outgoingMediaStreams[0];\n        },\n        set: function () {\n            // ignore\n        }\n    });\n\n    /**\n     * Array of streams of remote media that we are receiving from the remote party.\n     * @name incomingMediaStreams\n     * @type {Array<respoke.RemoteMedia>}\n     */\n    that.incomingMediaStreams = [];\n    that.incomingMediaStreams.hasAudio = function () {\n        if (that.incomingMediaStreams.length === 0) {\n            return false;\n        }\n\n        return !that.incomingMediaStreams.every(function (stream) {\n            return stream.getAudioTracks().length === 0;\n        });\n    };\n    that.incomingMediaStreams.hasVideo = function () {\n        if (that.incomingMediaStreams.length === 0) {\n            return false;\n        }\n\n        return !that.incomingMediaStreams.every(function (stream) {\n            return stream.getVideoTracks().length === 0;\n        });\n    };\n\n    /**\n     * Remote media that we are receiving from the remote party.  This will be undefined if we\n     * are receiving no media. This property is just the first item in the `incomingMediaStreams` array. If multiple\n     * streams are present, use that array to find the stream you need instead of relying on this property.\n     * @name incomingMedia\n     * @type {respoke.RemoteMedia}\n     */\n    Object.defineProperty(that, \"incomingMedia\", {\n        configurable: false,\n        enumerable: true,\n        get: function () {\n            return that.incomingMediaStreams[0];\n        },\n        set: function () {\n            // ignore\n        }\n    });\n\n    /**\n     * A flag indicating whether this call has audio or is expected to have audio coming in from the other side.\n     *\n     * @name hasAudio\n     * @type {boolean}\n     */\n    Object.defineProperty(that, \"hasAudio\", {\n        configurable: false,\n        enumerable: true,\n        get: that.incomingMediaStreams.hasAudio,\n        set: function () {\n            // ignore\n        }\n    });\n\n    /**\n     * A flag indicating whether this call has video or is expected to have video coming in from the other side.\n     *\n     * @name hasVideo\n     * @type {boolean}\n     */\n    Object.defineProperty(that, \"hasVideo\", {\n        configurable: false,\n        enumerable: true,\n        get: that.incomingMediaStreams.hasVideo,\n        set: function () {\n            // ignore\n        }\n    });\n\n    delete params.signalingChannel;\n    delete that.signalingChannel;\n\n    /**\n     * @memberof! respoke.Call\n     * @name videoIsMuted\n     * @private\n     * @type {boolean}\n     */\n    var videoIsMuted = false;\n    /**\n     * @memberof! respoke.Call\n     * @name audioIsMuted\n     * @private\n     * @type {boolean}\n     */\n    var audioIsMuted = false;\n    /**\n     * @memberof! respoke.Call\n     * @name directConnection\n     * @private\n     * @type {respoke.DirectConnection}\n     */\n    var directConnection = null;\n    /**\n     * @memberof! respoke.Call\n     * @name toSendHangup\n     * @private\n     * @type {boolean}\n     */\n    var toSendHangup = null;\n\n    /**\n     * Set up promises. If we're not the caller, we need to listen for approval AND the remote SDP to come in\n     * before we can act on the call. Save parameters sent in with the constructor, then delete them off the call.\n     * If this call was initiated with a DirectConnection, set it up so answer() will be the approval mechanism.\n     * @method respoke.Call.init\n     * @memberof! respoke.Call\n     * @fires respoke.Client#call\n     * @private\n     */\n    function init() {\n        log.debug('Call.init');\n\n        if (defModify !== undefined) {\n            defMedia = Q.defer();\n        }\n\n        pc.init(); // instantiates RTCPeerConnection, can't call on modify\n        if (defModify === undefined && pc.state.needDirectConnection === true) {\n            actuallyAddDirectConnection(params);\n        }\n    }\n\n    /**\n     * Register any event listeners passed in as callbacks, save other params to answer() and accept().\n     * @memberof! respoke.Call\n     * @method respoke.Call.saveParameters\n     * @param {object} params\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n     * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will fire even if\n     * the approval was automatic.\n     * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n     * user's media.  This event gets fired even if the allow process is automatic, i. e., permission and media is\n     * granted by the browser without asking the user to approve it.\n     * @param {Array<RTCConstraints>} [params.constraints]\n     * @param {boolean} [params.forceTurn]\n     * @param {boolean} [params.receiveOnly]\n     * @param {boolean} [params.sendOnly]\n     * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n     * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n     * video attached to it.\n     * @private\n     * @fires respoke.Call#stats\n     */\n    function saveParameters(params) {\n        var isNewConstraint;\n\n        /* This happens when the call is hung up automatically, for instance due to the lack of an onCall\n         * handler. In this case, pc has been set to null in hangup. The call has already failed, and the\n         * invocation of this function is an artifact of async code not being finished yet, so we can just\n         * skip all of this setup.\n         */\n        if (!pc) {\n            return;\n        }\n\n        that.listen('local-stream-received', params.onLocalMedia);\n        that.listen('connect', params.onConnect);\n        that.listen('hangup', params.onHangup);\n        that.listen('allow', params.onAllow);\n        that.listen('answer', params.onAnswer);\n        that.listen('approve', params.onApprove);\n        that.listen('mute', params.onMute);\n        that.listen('requesting-media', params.onRequestingMedia);\n\n        previewLocalMedia = typeof params.previewLocalMedia === 'function' ?\n            params.previewLocalMedia : previewLocalMedia;\n\n        pc.state.receiveOnly = typeof params.receiveOnly === 'boolean' ? params.receiveOnly : pc.state.receiveOnly;\n        pc.state.sendOnly = typeof params.sendOnly === 'boolean' ? params.sendOnly : pc.state.sendOnly;\n        pc.state.needDirectConnection = typeof params.needDirectConnection === 'boolean' ?\n            params.needDirectConnection : pc.state.needDirectConnection;\n        pc.disableTurn = typeof params.disableTurn === 'boolean' ? params.disableTurn : !!pc.disableTurn;\n        pc.forceTurn = typeof params.forceTurn === 'boolean' ? params.forceTurn : !!pc.forceTurn;\n\n        that.videoLocalElement = params.videoLocalElement ? params.videoLocalElement : that.videoLocalElement;\n        that.videoRemoteElement = params.videoRemoteElement ? params.videoRemoteElement : that.videoRemoteElement;\n\n        if (that.toType === 'did' && !that.caller) {\n            params.callerId = params.callerId || {};\n            that.callerId = {\n                name: params.callerId.name || null,\n                number: params.callerId.number || null\n            };\n        }\n\n        if (pc.state.receiveOnly) {\n            that.outgoingMediaStreams.length = 0;\n            that.constraints = [];\n        } else if (params.constraints) {\n            that.constraints = respoke.convertConstraints(params.constraints);\n            updateOutgoingMediaEstimate({constraints: that.constraints[0], source: params.source});\n        }\n\n        if (pc.state.sendOnly) {\n            that.incomingMediaStreams.length = 0;\n        } else if (params.constraints && pc.state.caller === true && that.incomingMediaStreams.length === 0) {\n            // TODO above condition is not good enough for media renegotiation.\n            // Only the person who initiated this round of media negotiation needs to estimate remote\n            // media based on what constraints local media is using.\n            // Also don't try to guess what media they'll send back if we're sending more than one stream.\n            that.constraints = respoke.convertConstraints(params.constraints);\n            updateIncomingMediaEstimate({constraints: params.constraints[0]});\n        }\n\n        pc.listen('stats', function fireStats(evt) {\n            /**\n             * This event is fired every time statistical information about audio and/or video on a call\n             * becomes available.\n             * @event respoke.Call#stats\n             * @type {respoke.Event}\n             * @property {respoke.MediaStats} stats - an object with stats in it.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.fire('stats', {stats: evt.stats});\n        }, true);\n\n        delete that.signalOffer;\n        delete that.signalConnected;\n        delete that.signalAnswer;\n        delete that.signalHangup;\n        delete that.signalReport;\n        delete that.signalCandidate;\n    }\n\n    /**\n     * Build respoke.LocalMedia after the call is answered.\n     * @memberof! respoke.Call\n     * @method respoke.Call.buildLocalMedia\n     * @param {RTCConstraint} constraint\n     * @private\n     */\n    function buildLocalMedia(constraint) {\n        var localMedia;\n\n        if (pc.state.receiveOnly) {\n            return Q.reject(new Error(\"Shouldn't have requested local media when receiveOnly is true.\"));\n        }\n\n        if (constraint.className === 'respoke.LocalMedia') {\n            localMedia = constraint;\n        } else {\n            localMedia = respoke.LocalMedia({\n                hasScreenShare: respoke.constraintsHasScreenShare(constraint),\n                constraints: constraint,\n                source: params.source\n            });\n            that.outgoingMediaStreams.push(localMedia);\n        }\n\n        // Use the element for only one set of constraints, and make sure it's one that has video.\n        if (respoke.constraintsHasVideo(localMedia.constraints) &&\n                that.videoLocalElement && !that.videoLocalElement.used) {\n            that.videoLocalElement.used = true;\n            localMedia.element = that.videoLocalElement;\n        }\n\n        localMedia.listen('requesting-media', function waitAllowHandler(evt) {\n            if (!pc) {\n                return;\n            }\n\n            /**\n             * The browser is asking for permission to access the User's media. This would be an ideal time\n             * to modify the UI of the application so that the user notices the request for permissions\n             * and approves it.\n             * @event respoke.Call#requesting-media\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.Call} target\n             */\n            that.fire('requesting-media');\n        }, true);\n\n        localMedia.listen('allow', function allowHandler(evt) {\n            if (!pc) {\n                return;\n            }\n\n            /**\n             * The user has approved the request for media. Any UI changes made to remind the user to click Allow\n             * should be canceled now. This event is the same as the `onAllow` callback.  This event gets fired\n             * even if the allow process is automatic, i. e., permission and media is granted by the browser\n             * without asking the user to approve it.\n             * @event respoke.Call#allow\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.Call} target\n             */\n            that.fire('allow');\n            pc.state.dispatch('approve', {\n                previewLocalMedia: previewLocalMedia\n            });\n        }, true);\n\n        return localMedia.start().then(function () {\n            streamReceivedHandler(localMedia);\n        });\n    }\n\n    /**\n     * Answer the call and start the process of obtaining media. This method is called automatically on the caller's\n     * side. This method must be called on the callee's side to indicate that the endpoint does wish to accept the\n     * call. The app will have a later opportunity, by passing a callback named previewLocalMedia, to approve or\n     * reject the call based on whether audio and/or video is working and is working at an acceptable level.\n     *\n     *     client.listen('call', function (evt) {\n     *         if (!evt.call.caller) {\n     *             evt.call.answer();\n     *         }\n     *     });\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.answer\n     * @fires respoke.Call#answer\n     * @param {object} [params]\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n     * it was ended in a graceful manner. TODO: add the hangup reason to the Event.\n     * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n     * This callback will be called when media is muted or unmuted.\n     * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n     * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n     * for the user to give permission to start getting audio or video.\n     * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n     * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n     * the approval was automatic.\n     * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n     * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n     * granted by the browser without asking the user to approve it.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {boolean} [params.receiveOnly] - Whether or not we accept media.\n     * @param {boolean} [params.sendOnly] - Whether or not we send media.\n     * @param {Array<RTCConstraints>} [params.constraints] - Information about the media for this call.\n     * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n     * video attached to it.\n     * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n     * video attached to it.\n     */\n    that.answer = function (params) {\n        params = params || {};\n        log.debug('Call.answer', params);\n\n        saveParameters(params);\n\n        pc.listen('remote-stream-received', onRemoteStreamAdded, true);\n        pc.listen('remote-stream-removed', onRemoteStreamRemoved, true);\n\n        pc.state.once('approving-device-access:entry', function (evt) {\n            doAddVideo(params);\n        });\n        pc.state.dispatch('answer', {\n            previewLocalMedia: previewLocalMedia,\n            approve: that.approve\n        });\n        /**\n         * The call was answered.\n         * @event respoke.Call#answer\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('answer');\n    };\n\n    /**\n     * Accept a request to modify the media on the call. This method should be called within the Call#modify\n     * event listener, which gives the developer or website user a chance to see what changes are proposed and\n     * to accept or reject them.\n     *\n     *     call.listen('modify', function (evt) {\n     *         evt.call.accept();\n     *     });\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.accept\n     * @fires respoke.Call#accept\n     * @private\n     * @param {object} [params]\n     * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n     * wants to perform an action between local media becoming available and calling approve().\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the developer to receive the\n     * remote video element.\n     * @param {respoke.Call.onHangup} [params.onHangup] - Callback for the developer to be notified about hangup.\n     * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n     * required to flow peer-to-peer. If it cannot, the call will fail.\n     * @param {boolean} [params.receiveOnly] - Whether or not we accept media.\n     * @param {boolean} [params.sendOnly] - Whether or not we send media.\n     * @param {Array<RTCConstraints>} [params.constraints] - Information about the media for this call.\n     */\n    that.accept = that.answer;\n\n    /**\n     * Start the process of network and media negotiation. If the app passes in a callback named previewLocalMedia\n     * in order to allow the logged-in person a chance to base their decision to continue the call on whether\n     * audio and/or video is working correctly,\n     * this method must be called on both sides in order to begin the call. If call.approve() is called, the call\n     * will progress as expected. If call.reject() is called, the call will be aborted.\n     *\n     *     call.listen('local-stream-received', function (evt) {\n     *         if (userLikesVideo()) {\n     *             evt.call.approve();\n     *         }\n     *     });\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.approve\n     * @fires respoke.Call#approve\n     */\n    that.approve = function () {\n        log.debug('Call.approve');\n        /**\n         * Fired when the local media access is approved.\n         * @event respoke.Call#approve\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('approve');\n        pc.state.dispatch('approve', {\n            previewLocalMedia: previewLocalMedia\n        });\n\n        if (defModify && defModify.promise.isPending()) {\n            defModify.resolve(true);\n            defModify = undefined;\n        }\n    };\n\n    /**\n     * Listen for the remote side to remove media in the middle of the call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.onRemoteStreamRemoved\n     * @private\n     * @param {object}\n     */\n    function onRemoteStreamRemoved(evt) {\n        log.debug('pc event: remote stream removed');\n    }\n\n    /**\n     * Listen for the remote side to add additional media in the middle of the call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.onRemoteStreamAdded\n     * @private\n     * @param {object}\n     * @fires respoke.Call#connect\n     */\n    function onRemoteStreamAdded(evt) {\n        var hasAudio = false;\n        var hasVideo = false;\n        var hasScreenShare = false;\n        var remoteMedia;\n        var useEl;\n\n        if (!pc) {\n            return;\n        }\n        log.debug('received remote media', evt);\n\n        // This is the first remote media we have received. The one we currently have is a guess. Rip it\n        // out and replace it with reality.\n        if (that.incomingMediaStreams.length === 1 && that.incomingMediaStreams[0].temporary === true) {\n            // have to do it this way because assigning a blank array to that.incomingMediaStreams will\n            // clobber the methods like hasAudio that we have added to the array.\n            that.incomingMediaStreams.length = 0;\n        }\n\n        hasAudio = evt.stream.getAudioTracks().length > 0;\n        hasVideo = evt.stream.getVideoTracks().length > 0;\n        // TODO this is not good enough long term.\n        hasScreenShare = hasVideo && that.target === 'screenshare';\n\n        if (that.videoRemoteElement && !that.videoRemoteElement.used) {\n            that.videoRemoteElement.used = true;\n            useEl = that.videoRemoteElement;\n        }\n\n        remoteMedia = respoke.RemoteMedia({\n            element: useEl,\n            stream: evt.stream,\n            hasScreenShare: hasScreenShare,\n            constraints: {\n                audio: hasAudio,\n                video: hasVideo\n            }\n        });\n        that.incomingMediaStreams.push(remoteMedia);\n\n        if (that.incomingMediaStreams.length < pc.sdpExpectedStreamCount) {\n            // there are more streams left to receive before we can dispatch the event to the state machine.\n            return;\n        }\n\n        /**\n         * Indicates that either remote media stream has been added to the call or if no\n         * media is expected, the other side is receiving our media.\n         * @event respoke.Call#connect\n         * @type {respoke.Event}\n         * @property {Element} element - The HTML5 Video element with the remote stream attached.\n         * @property {respoke.RemoteMedia} stream - The incomingMedia property on the call.\n         * @property {string} name - The event name.\n         * @property {respoke.Call} target\n         */\n        pc.state.dispatch('receiveRemoteMedia');\n        that.fire('connect', {\n            stream: remoteMedia.stream,\n            element: remoteMedia.element\n        });\n    }\n\n    /**\n     * ## The plugin `respoke.MediaStats` must be loaded before using this method.\n     *\n     * Start the process of listening for a continuous stream of statistics about the flow of audio and/or video.\n     * Since we have to wait for both the answer and offer to be available before starting\n     * statistics, the library returns a promise for the stats object. The statistics object does not contain the\n     * statistics; rather it contains methods of interacting with the actions of obtaining statistics. To obtain\n     * the actual statistics one time, use stats.getStats(); use the onStats callback to obtain a continuous\n     * stream of statistics every `interval` seconds.  Returns null if stats module is not loaded.\n     *\n     *     call.getStats({\n     *         onStats: function (evt) {\n     *             console.log('Stats', evt.stats);\n     *         }\n     *     }).done(function () {\n     *         console.log('Stats started');\n     *     }, function (err) {\n     *         console.log('Call is already hung up.');\n     *     });\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.getStats\n     * @param {object} params\n     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive\n     * the stats. If no callback is provided, the call's report will contain stats but the developer will not\n     * receive them on the client-side.\n     * @param {respoke.Call.statsSuccessHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Call.errorHandler} [params.onError] - Error handler for this invocation of this method only.\n     * @returns {Promise<object>|null}\n     */\n    function getStats(params) {\n        if (pc && pc.getStats) {\n            that.listen('stats', params.onStats);\n            return pc.getStats(params);\n        }\n        return null;\n    }\n    if (respoke.MediaStats) {\n        that.getStats = getStats;\n    }\n\n    /**\n     * Return local video element with the logged-in endpoint's audio and/or video streams attached to it.\n     *\n     *     var el = call.getLocalElement();\n     *     container.append(el);\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.getLocalElement\n     * @returns {Video} An HTML5 video element.\n     */\n    that.getLocalElement = function () {\n        return that.outgoingMediaStreams[0] ? that.outgoingMediaStreams[0].element : undefined;\n    };\n\n    /**\n     * Return remote video element with the remote endpoint's audio and/or video streams attached to it.\n     *\n     *     var el = call.getRemoteElement();\n     *     container.append(el);\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.getRemoteElement\n     * @returns {Video} An HTML5 video element.\n     */\n    that.getRemoteElement = function () {\n        return that.incomingMediaStreams[0] ? that.incomingMediaStreams[0].element : undefined;\n    };\n\n    /**\n     * Set up the local media.\n     * @memberof! respoke.Call\n     * @method respoke.Call.streamReceivedHandler\n     * @param {respoke.LocalMedia} The local media.\n     * @private\n     */\n    function streamReceivedHandler(localMedia) {\n        if (!pc) {\n            return;\n        }\n\n        pc.addStream(localMedia.stream);\n        if (typeof previewLocalMedia === 'function' && localMedia.element) {\n            previewLocalMedia(localMedia.element, that);\n        }\n\n        localMedia.listen('stop', function stopHandler(/* evt */) {\n            // if the local media has stopped, it has already been removed from respoke.streams.\n            // just need to remove it from the call's streams, and hangup if no streams left.\n\n            var idx = that.outgoingMediaStreams.indexOf(localMedia);\n            if (idx > -1) {\n                that.outgoingMediaStreams.splice(idx, 1);\n            }\n\n            if (!that.outgoingMediaStreams.length && !that.incomingMediaStreams.length) {\n                that.hangup({ reason: 'last stream ended' });\n            }\n        });\n\n        /**\n         * Indicate that the call has received local media from the browser.\n         * @event respoke.Call#local-stream-received\n         * @type {respoke.Event}\n         * @property {Element} element\n         * @property {respoke.LocalMedia} stream\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('local-stream-received', {\n            element: localMedia.element,\n            stream: localMedia\n        });\n\n        /**\n         * This event indicates that local video has been unmuted.\n         * @event respoke.Call#mute\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        localMedia.listen('mute', function (evt) {\n            that.fire('mute', {\n                type: evt.type,\n                muted: evt.muted\n            });\n        });\n    }\n\n    /**\n     * Create the RTCPeerConnection and add handlers. Process any offer we have already received. This method is called\n     * after answer() so we cannot use this method to set up the DirectConnection.\n     * @memberof! respoke.Call\n     * @method respoke.Call.doAddVideo\n     * @private\n     * @param {object} params\n     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect]\n     * @param {respoke.Call.onHangup} [params.onHangup]\n     * @fires respoke.Call#requesting-media\n     * @fires respoke.Call#allow\n     * @fires respoke.Call#local-stream-received\n     */\n    function doAddVideo(params) {\n        log.debug('Call.doAddVideo');\n        saveParameters(params);\n    }\n\n    /**\n     * Add a video and audio stream to the existing call. By default, this method adds both video AND audio.\n     * If audio is not desired, pass {audio: false}.\n     * @memberof! respoke.Call\n     * @method respoke.Call.addVideo\n     * @private\n     * @param {object} params\n     * @param {boolean} [params.audio=true]\n     * @param {boolean} [params.video=true]\n     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints, indicating the media\n     * being requested is\n     * an audio and/or video stream.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect]\n     * @param {respoke.Call.onHangup} [params.onHangup]\n     * @param {respoke.Call.mediaSuccessHandler} [params.onSuccess]\n     * @param {respoke.Client.errorHandler} [params.onError]\n     * @returns {Promise<respoke.LocalMedia>}\n     */\n    that.addVideo = function (params) {\n        log.debug('Call.addVideo');\n        params = params || {};\n        if (!params.constraints || !params.constraints.length) {\n            params.constraints = [{video: true, audio: true}];\n        }\n        params.instanceId = instanceId;\n\n        if (!defMedia.promise.isFulfilled()) { // we're the callee & have just accepted to modify\n            doAddVideo(params);\n        } else { // we're the caller and need to see if we can modify\n            pc.startModify({\n                constraints: params.constraints\n            });\n            defModify = Q.defer();\n            defModify.promise.then(function modifyAccepted() {\n                doAddVideo(params);\n            });\n        }\n        return defModify.promise;\n    };\n\n    /**\n     * Add an audio stream to the existing call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.addAudio\n     * @private\n     * @param {object} params\n     * @param {boolean} [params.audio=true]\n     * @param {boolean} [params.video=false]\n     * @param {Array<RTCConstraints>} [params.constraints] - getUserMedia constraints, indicating the media\n     * being requested is an audio and/or video stream.\n     * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] Callback for receiving an HTML5 Video\n     * element with the local audio and/or video attached.\n     * @param {respoke.Call.onConnect} [params.onConnect]\n     * @param {respoke.Call.onHangup} [params.onHangup]\n     * @param {respoke.Call.mediaSuccessHandler} [params.onSuccess]\n     * @param {respoke.Client.errorHandler} [params.onError]\n     * @returns {Promise<respoke.LocalMedia>}\n     */\n    that.addAudio = function (params) {\n        params = params || {};\n        if (!params.constraints || !params.constraints.length) {\n            params.constraints = [{video: false, audio: true}];\n        }\n\n        return that.addVideo(params);\n    };\n\n    /**\n     * Get the direct connection on this call, if it exists.\n     *\n     *     var dc = call.getDirectConnection();\n     *     if (!dc) {\n     *         console.log(\"No direct connection has been started.\");\n     *     } else {\n     *         dc.sendMessage({message: 'hi'});\n     *     }\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.getDirectConnection\n     * @returns {respoke.DirectConnection}\n     */\n    that.getDirectConnection = function () {\n        return directConnection || null;\n    };\n\n    /**\n     * Remove a direct connection from the existing call. If there is no other media, this will hang up the call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.removeDirectConnection\n     * @private\n     * @param {object} params\n     * @arg {boolean} [params.skipModify] Do not restart media negotiation.\n     */\n    that.removeDirectConnection = function (params) {\n        params = params || {};\n        log.debug('Call.removeDirectConnection');\n\n        if (directConnection) {\n            directConnection.close({skipRemove: true});\n        }\n\n        if (!that.hasMedia()) {\n            log.debug('Hanging up because there are no local streams.');\n            that.hangup();\n            return;\n        }\n\n        if (params.skipModify === true) {\n            return;\n        }\n\n        pc.startModify({\n            directConnection: false\n        });\n        defModify = Q.defer();\n        defModify.promise.done(function onModifySuccess() {\n            defMedia.resolve();\n            defModify = undefined;\n        });\n    };\n\n    /**\n     * Add a direct connection to the existing call.\n     *\n     *     call.addDirectConnection({\n     *         onOpen: function (evt) {\n     *             console.log(\"Direct connection open!\");\n     *         }\n     *     });\n     *\n     * @memberof! respoke.Call\n     * @method respoke.Call.addDirectConnection\n     * @private\n     * @param {object} params\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for the developer to be notified about\n     * closing the connection.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for the developer to be notified about\n     * opening the connection.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for the developer to be notified\n     * about incoming messages. Not usually necessary to listen to this event if you are already listening to\n     * respoke.Endpoint#message.\n     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess]\n     * @param {respoke.Client.errorHandler} [params.onError]\n     * @returns {Promise<respoke.DirectConnection>}\n     */\n    that.addDirectConnection = function (params) {\n        log.debug('Call.addDirectConnection');\n        pc.startModify({\n            directConnection: true\n        });\n        defModify = Q.defer();\n        return defModify.promise.then(function onModifySuccess() {\n            return actuallyAddDirectConnection(params);\n        }, function onModifyError(err) {\n            throw err;\n        });\n    };\n\n    /**\n     * Add a direct connection to the existing call.\n     * @memberof! respoke.Call\n     * @method respoke.Call.actuallyAddDirectConnection\n     * @private\n     * @param {object} params\n     * @param {respoke.DirectConnection.onClose} [params.onClose] - Callback for the developer to be notified about\n     * closing the connection.\n     * @param {respoke.DirectConnection.onOpen} [params.onOpen] - Callback for the developer to be notified about\n     * opening the connection.\n     * @param {respoke.DirectConnection.onMessage} [params.onMessage] - Callback for the developer to be notified\n     * about incoming messages. Not usually necessary to listen to this event if you are already listening to\n     * respoke.Endpoint#message.\n     * @param {respoke.Call.directConnectionSuccessHandler} [params.onSuccess]\n     * @param {respoke.Client.errorHandler} [params.onError]\n     * @returns {Promise<respoke.DirectConnection>}\n     * @fires respoke.Client#direct-connection\n     * @fires respoke.Call#direct-connection\n     */\n    function actuallyAddDirectConnection(params) {\n        log.debug('Call.actuallyAddDirectConnection', params);\n        params = params || {};\n        defMedia.promise.then(params.onSuccess, params.onError);\n\n        if (directConnection && directConnection.isActive()) {\n            if (defMedia.promise.isPending()) {\n                defMedia.resolve(directConnection);\n            } else {\n                log.warn(\"Not creating a new direct connection.\");\n            }\n            return defMedia.promise;\n        }\n\n        params.instanceId = instanceId;\n        params.pc = pc;\n        params.call = that;\n\n        directConnection = respoke.DirectConnection(params);\n\n        directConnection.listen('close', function closeHandler() {\n            if (!that.hasMedia()) {\n                log.debug('Hanging up because there are no local streams.');\n                that.hangup();\n            } else {\n                that.removeDirectConnection({skipModify: true});\n            }\n        }, true);\n\n        directConnection.listen('accept', function acceptHandler() {\n            if (pc.state.caller === false) {\n                log.debug('Answering as a result of approval.');\n            } else {\n                defMedia.resolve(directConnection);\n            }\n        }, true);\n\n        directConnection.listen('open', function openHandler() {\n            pc.state.dispatch('receiveRemoteMedia');\n        }, true);\n\n        directConnection.listen('error', function errorHandler(err) {\n            defMedia.reject(new Error(err));\n        }, true);\n\n        that.remoteEndpoint.directConnection = directConnection;\n\n        /**\n         * This event is fired when the local end of the directConnection is available. It still will not be\n         * ready to send and receive messages until the 'open' event fires.\n         * @event respoke.Call#direct-connection\n         * @type {respoke.Event}\n         * @property {respoke.DirectConnection} directConnection\n         * @property {respoke.Endpoint} endpoint\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('direct-connection', {\n            directConnection: directConnection,\n            endpoint: that.remoteEndpoint\n        });\n\n        /**\n         * This event is fired when the logged-in endpoint is receiving a request to open a direct connection\n         * to another endpoint.  If the user wishes to allow the direct connection, calling\n         * evt.directConnection.accept() will allow the connection to be set up.\n         * @event respoke.Client#direct-connection\n         * @type {respoke.Event}\n         * @property {respoke.DirectConnection} directConnection\n         * @property {respoke.Endpoint} endpoint\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         * @private\n         */\n        client.fire('direct-connection', {\n            directConnection: directConnection,\n            endpoint: that.remoteEndpoint\n        });\n\n        if (pc.state.caller === true) {\n            directConnection.accept();\n        }\n\n        return defMedia.promise;\n    }\n\n    /**\n     * Close the direct connection.\n     * @memberof! respoke.Call\n     * @method respoke.Call.closeDirectConnection\n     */\n    that.closeDirectConnection = function () {\n        if (directConnection) {\n            directConnection.close();\n            directConnection = null;\n        }\n    };\n\n    /**\n     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n     * signal is not false and we have not received a hangup signal from the remote party.\n     * @memberof! respoke.Call\n     * @method respoke.Call.hangup\n     * @fires respoke.Call#hangup\n     * @param {object} params\n     * @arg {boolean} params.signal Optional flag to indicate whether to send or suppress sending\n     * a hangup signal to the remote side.\n     */\n    that.hangup = function (params) {\n        if (!pc) {\n            return;\n        }\n        params = params || {};\n        params.reason = params.reason || \"hangup method called.\";\n        pc.state.dispatch('hangup', params);\n    };\n    that.hangup = respoke.callOnce(that.hangup);\n\n    /**\n     * Tear down the call, release user media.  Send a hangup signal to the remote party if\n     * signal is not false and we have not received a hangup signal from the remote party. This is an event\n     * handler added to the state machine via `once`.\n     * @memberof! respoke.Call\n     * @method respoke.Call.hangup\n     * @fires respoke.Call#hangup\n     * @private\n     */\n    var doHangup = function () {\n        log.debug('hangup', that.caller);\n\n        that.outgoingMediaStreams.forEach(function (stream) {\n            // only call stop on the stream if it was constructed explicitly for the call\n            if (stream !== params.outgoingMedia) {\n                stream.stop();\n            }\n        });\n\n        if (directConnection) {\n            directConnection.close();\n            directConnection = null;\n        }\n\n        if (pc) {\n            pc.close({signal: (pc.state.receivedBye ? false : pc.state.signalBye)});\n        }\n\n        /**\n         * This event is fired when the call has hung up.\n         * @event respoke.Call#hangup\n         * @type {respoke.Event}\n         * @property {boolean} sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n         * @property {string} name - the event name.\n         * @property {respoke.Call} target\n         */\n        that.fire('hangup', {\n            reason: pc.state.hangupReason || \"No reason specified.\"\n        });\n\n        pc.state.ignore();\n        pc.ignore();\n        that.ignore();\n        pc = null;\n    };\n    doHangup = respoke.callOnce(doHangup);\n\n    /**\n     * Expose hangup as reject for approve/reject workflow.\n     * @memberof! respoke.Call\n     * @method respoke.Call.reject\n     * @param {object} params\n     */\n    that.reject = function () {\n        if (!pc) {\n            return;\n        }\n        pc.state.dispatch('reject', {reason: 'call.reject() called'});\n    };\n\n    /**\n     * Indicate whether a call is being setup or is in progress.\n     * @memberof! respoke.Call\n     * @method respoke.Call.isActive\n     * @returns {boolean}\n     */\n    that.isActive = function () {\n        return !!(pc && pc.isActive() && (\n            that.outgoingMediaStreams.length > 0 ||\n            that.incomingMediaStreams.length > 0 ||\n            (directConnection && directConnection.isActive())\n        ));\n    };\n\n    /**\n     * Set the estimated media status on incoming media.\n     * @memberof! respoke.Call\n     * @method respoke.Call.listenAnswer\n     * @param {object} evt\n     * @param {object} evt.signal - The offer signal including the sdp\n     * @private\n     */\n    function listenAnswer(evt) {\n        log.debug('listenAnswer', evt.signal);\n\n        that.hasDataChannel = respoke.sdpHasDataChannel(evt.signal.sessionDescription.sdp);\n        updateIncomingMediaEstimate({sdp: evt.signal.sessionDescription});\n    }\n\n    /**\n     * Set the estimated media status on incoming media.\n     * @memberof! respoke.Call\n     * @method respoke.Call.updateIncomingMediaEstimate\n     * @param {object} params\n     * @param {RTCSessionDescriptor} [params.sdp] - optional sdp to use to estimate media\n     * @param {RTCConstraints} [params.constraints] - optional constraints to use to estimate media\n     * @private\n     */\n    function updateIncomingMediaEstimate(params) {\n        if (pc.state.sendOnly) {\n            that.incomingMediaStreams.length = 0;\n            return;\n        }\n\n        if (!params.sdp && !params.constraints) {\n            throw new Error(\"Can't estimate incoming media without sdp or constraints\");\n        }\n\n        if (that.incomingMediaStreams.length === 0) {\n            that.incomingMediaStreams.push(respoke.RemoteMedia({\n                hasScreenShare: (that.target === 'screenshare'),\n                temporary: true\n            }));\n        }\n\n        if (params.sdp) {\n            if (that.incomingMediaStreams[0] && that.incomingMediaStreams[0].temporary) {\n                that.incomingMediaStreams[0].setSDP(params.sdp);\n            }\n        }\n\n        if (params.constraints) {\n            if (that.incomingMediaStreams[0] && that.incomingMediaStreams[0].temporary) {\n                that.incomingMediaStreams[0].setConstraints(params.constraints);\n            }\n        }\n    }\n\n    /**\n     * Set the estimated media status on outgoing media. For this method, by the time we have constraints, we're\n     * already calling getUserMedia so we will have exactly the right information. No need to use constraints\n     * to estimate.\n     * @memberof! respoke.Call\n     * @method respoke.Call.updateOutgoingMediaEstimate\n     * @param {object} params\n     * @param {RTCSessionDescriptor} [params.sdp] - optional sdp to use to estimate media\n     * @param {RTCConstraints} [params.constraints] - optional constraints to use to estimate media\n     * @private\n     */\n    function updateOutgoingMediaEstimate(params) {\n        if (pc.state.receiveOnly) {\n            that.outgoingMediaStreams.length = 0;\n            that.constraints = [];\n            return;\n        }\n\n        if (!params.sdp && !params.constraints) {\n            throw new Error(\"Can't estimate outgoing media without sdp or constraints\");\n        }\n\n        if (that.outgoingMediaStreams.length === 0) {\n            that.outgoingMediaStreams.push(respoke.LocalMedia({\n                instanceId: instanceId,\n                temporary: true,\n                source: params.source\n            }));\n        }\n\n        if (params.sdp) {\n            if (that.outgoingMediaStreams[0] && that.outgoingMediaStreams[0].temporary) {\n                that.outgoingMediaStreams[0].setSDP(params.sdp);\n            }\n        }\n\n        if (params.constraints) {\n            if (that.outgoingMediaStreams[0] && that.outgoingMediaStreams[0].temporary) {\n                that.outgoingMediaStreams[0].setConstraints(params.constraints);\n            }\n        }\n    }\n\n    /**\n     * Save the offer so we can tell the browser about it after the PeerConnection is ready.\n     * Set the estimated media status on incoming and outgoing media.\n     * @memberof! respoke.Call\n     * @method respoke.Call.listenOffer\n     * @param {object} evt\n     * @param {object} evt.signal - The offer signal including the sdp\n     * @private\n     * @fires respoke.Call#modify\n     */\n    function listenOffer(evt) {\n        log.debug('listenOffer', evt.signal);\n        var info = {};\n\n        that.sessionId = evt.signal.sessionId;\n        pc.state.receiveOnly = respoke.sdpHasSendOnly(evt.signal.sessionDescription.sdp);\n        pc.state.sendOnly = respoke.sdpHasReceiveOnly(evt.signal.sessionDescription.sdp);\n        pc.state.listen('connecting:entry', function () {\n            if (!pc.state.caller) {\n                pc.processOffer(evt.signal.sessionDescription);\n            }\n        });\n\n        // Only do this if we're still trying to guess what media is coming in.\n        // TODO not good enough for media renegotiation\n        updateIncomingMediaEstimate({sdp: evt.signal.sessionDescription});\n\n        /*!\n         * Always overwrite constraints for callee on every offer, since answer() and accept() will\n         * always be called after parsing the SDP. However, if the caller isn't sending any media,\n         * use audio & video as our estimate.\n         * TODO not good enough for media renegotiation\n         */\n        // If sendOnly, we can't rely on the offer for media estimate. It doesn't have any media in it!\n        if (pc.state.sendOnly) {\n            updateOutgoingMediaEstimate({constraints: {\n                audio: true,\n                video: true\n            }});\n        } else {\n            updateOutgoingMediaEstimate({sdp: evt.signal.sessionDescription});\n        }\n\n        if (that.outgoingMedia) {\n            log.info(\"Default outgoingMedia constraints\", that.outgoingMedia.constraints);\n        }\n\n        if (pc.state.isModifying()) {\n            if (pc.state.needDirectConnection === true) {\n                info.directConnection = directConnection;\n            } else if (pc.state.needDirectConnection === false) {\n                // Nothing\n            } else {\n                info.call = that;\n            }\n            /**\n             * Indicates a request to add something to an existing call. If 'constraints' is set, evt.constraints\n             * describes the media the other side has added. In this case, call.approve() must be called in order\n             * to approve the new media and send the same type of media.  If directConnection exists, the other side\n             * wishes to to open a direct connection. In order to approve, call directConnection.accept(). In either\n             * case, call.reject() and directConnection.reject() can be called to decline the request to add to the\n             * call.\n             * @event respoke.Call#modify\n             * @type {respoke.Event}\n             * @property {object} [constraints]\n             * @property {boolean} [directConnection]\n             * @property {string} name - the event name.\n             * @property {respoke.Call} target\n             */\n            that.fire('modify', info);\n        }\n\n        pc.state.dispatch('receiveOffer', {\n            previewLocalMedia: previewLocalMedia,\n            approve: that.approve\n        });\n    }\n\n    /**\n     * Save the answer and tell the browser about it.\n     * @memberof! respoke.Call\n     * @method respoke.Call.listenModify\n     * @private\n     */\n    function listenModify(evt) {\n        log.debug('Call.listenModify', evt);\n        if (evt.signal.action === 'initiate') {\n            defModify = Q.defer();\n            pc.state.dispatch('modify', {receive: true});\n        }\n    }\n\n    /**\n     * Set up state and media for the modify.\n     * @memberof! respoke.Call\n     * @method respoke.Call.onModifyAccept\n     * @param {respoke.Event} evt\n     * @private\n     */\n    function onModifyAccept(evt) {\n        pc.state.dispatch('accept');\n\n        if (evt.signal.action !== 'initiate') {\n            defModify.resolve(); // resolved later for callee\n            defModify = undefined;\n            return;\n        }\n\n        // callee only from here down\n\n        // init the directConnection if necessary. We don't need to do anything with\n        // audio or video right now.\n        if (evt.signal.directConnection === true) {\n            actuallyAddDirectConnection().done(function successHandler(dc) {\n                directConnection = dc;\n                directConnection.accept();\n            });\n        } else if (evt.signal.directConnection === false) {\n            if (directConnection) {\n                that.removeDirectConnection({skipModify: true});\n                defMedia.resolve(false);\n            }\n        }\n        pc.state.needDirectConnection = typeof evt.signal.directConnection === 'boolean' ?\n            evt.signal.directConnection : null;\n        that.outgoingMedia.constraints = evt.signal.constraints || that.outgoingMedia.constraints;\n    }\n\n    /**\n     * Ignore the modify.\n     * @memberof! respoke.Call\n     * @method respoke.Call.onModifyReject\n     * @param {respoke.Event} evt\n     * @param {Error} evt.err\n     * @private\n     */\n    function onModifyReject(evt) {\n        if (evt.signal.action !== 'initiate') {\n            defMedia.reject(evt.err);\n            defModify.reject(evt.err);\n            defModify = undefined;\n        }\n    }\n\n    /**\n     * If video is muted, unmute. If not muted, mute.\n     * @deprecated\n     * @memberof! respoke.Call\n     * @method respoke.Call.toggleVideo\n     */\n    that.toggleVideo = function () {\n        if (that.isActive()) {\n            if (!videoIsMuted) {\n                that.muteVideo();\n            } else {\n                that.unmuteVideo();\n            }\n        }\n    };\n\n    /**\n     * If audio is muted, unmute. If not muted, mute.\n     * @deprecated\n     * @memberof! respoke.Call\n     * @method respoke.Call.toggleAudio\n     */\n    that.toggleAudio = function () {\n        if (that.isActive()) {\n            if (!audioIsMuted) {\n                that.muteAudio();\n            } else {\n                that.unmuteAudio();\n            }\n        }\n    };\n\n    /**\n     * Indicate whether the call has media of any type flowing in either direction.\n     * @memberof! respoke.Call\n     * @method respoke.Call.hasMedia\n     * @returns {boolean}\n     */\n    that.hasMedia = function () {\n        var local;\n        var remote;\n\n        if (!pc || !pc.getLocalStreams) {\n            // PeerConnection.init() has not been called yet\n            return false;\n        }\n\n        local = pc.getLocalStreams();\n        remote = pc.getRemoteStreams();\n\n        if (directConnection && directConnection.isActive()) {\n            return true;\n        }\n\n        return (local.length > 0 || remote.length > 0);\n    };\n\n    /**\n     * Mute all local video streams.\n     * @memberof! respoke.Call\n     * @method respoke.Call.muteVideo\n     * @fires respoke.Call#mute\n     */\n    that.muteVideo = function () {\n        if (videoIsMuted) {\n            return;\n        }\n        that.outgoingMedia.muteVideo();\n        videoIsMuted = true;\n    };\n\n    /**\n     * Unmute all local video streams.\n     * @memberof! respoke.Call\n     * @method respoke.Call.unmuteVideo\n     * @fires respoke.Call#mute\n     */\n    that.unmuteVideo = function () {\n        if (!videoIsMuted) {\n            return;\n        }\n        that.outgoingMedia.unmuteVideo();\n        videoIsMuted = false;\n    };\n\n    /**\n     * Mute all local audio streams.\n     * @memberof! respoke.Call\n     * @method respoke.Call.muteAudio\n     * @fires respoke.Call#mute\n     */\n    that.muteAudio = function () {\n        if (audioIsMuted) {\n            return;\n        }\n        that.outgoingMedia.muteAudio();\n        audioIsMuted = true;\n    };\n\n    /**\n     * Unmute all local audio streams.\n     * @memberof! respoke.Call\n     * @method respoke.Call.unmuteAudio\n     * @fires respoke.Call#mute\n     */\n    that.unmuteAudio = function () {\n        if (!audioIsMuted) {\n            return;\n        }\n\n        that.outgoingMedia.unmuteAudio();\n        audioIsMuted = false;\n    };\n\n    /**\n     * Save the hangup reason and hang up.\n     * @memberof! respoke.Call\n     * @method respoke.Call.listenHangup\n     * @params {object} evt\n     * @params {object} evt.signal - The hangup signal, including an optional hangup reason.\n     * @private\n     */\n    function listenHangup(evt) {\n        if (!pc) {\n            return;\n        }\n        pc.report.callStoppedReason = evt.signal.reason || \"Remote side hung up\";\n        pc.state.receivedBye = true;\n        pc.state.dispatch('hangup', {signal: false, reason: pc.report.callStoppedReason});\n    }\n\n    pc.state.once('terminated:entry', function (evt) {\n        doHangup();\n    }, true);\n\n    that.listen('signal-answer', listenAnswer);\n    that.listen('signal-offer', function (evt) {\n        if (pc.state.getState() === 'idle') {\n            pc.state.once('preparing:entry', function () {\n                listenOffer(evt);\n            });\n        } else {\n            listenOffer(evt);\n        }\n    }, true);\n    that.listen('signal-hangup', listenHangup, true);\n    that.listen('signal-modify', listenModify, true);\n    pc.listen('modify-reject', onModifyReject, true);\n    pc.listen('modify-accept', onModifyAccept, true);\n    that.listen('signal-icecandidates', function onCandidateSignal(evt) {\n        if (!pc || !evt.signal.iceCandidates || !evt.signal.iceCandidates.length) {\n            return;\n        }\n        evt.signal.iceCandidates.forEach(function processCandidate(candidate) {\n            if (!pc) {\n                return;\n            }\n            pc.addRemoteCandidate({candidate: candidate});\n        });\n    }, true);\n\n    that.listen('answer', function (evt) {\n        var mediaPromises = [];\n\n        if (pc.state.receiveOnly || pc.state.needDirectConnection) {\n            that.outgoingMediaStreams.length = 0;\n            return;\n        }\n\n        /*!\n         * By the time we get to here, we could be in a couple of states.\n         *\n         * If receiveOnly is set to true, we could possibly have constraints (if the developer used the API wrong)\n         * but we will not have any media in that.outgoingMediaStreams. We should unset that.constraints and skip\n         * building any local media.\n         *\n         * If we have never received any constraints, and receiveOnly is NOT set to true, we will have an estimate\n         * at that.outgoingMediaStreams[0] with temporary set to true. This estimate was set by parsing the SDP.\n         *\n         * If we have received one or more constraints, that.constraints array will contain the most recent set\n         * AND we will have an estimate at that.outgoingMediaStreams[0] with temporary set to true. We must completely\n         * rebuild that.outgoingMediaStreams from that.constraints.\n         */\n        if (pc.state.receiveOnly) {\n            that.outgoingMediaStreams.length = 0;\n            that.constraints = [];\n            return;\n        }\n\n        if (that.constraints.length === 0) {\n            // We didn't get told what to do by constraints; use our guess.\n            that.outgoingMediaStreams[0].temporary = undefined;\n        } else if (that.outgoingMediaStreams.length > 0 && that.outgoingMediaStreams[0].temporary) {\n            // We got told what to do. Discard our guess. It's OK for that.outgoingMediaStreams to be empty now.\n            that.outgoingMediaStreams.shift();\n        }\n\n        // If outgoingMedia is passed into the Call then there is no need to build the LocalMedia here\n        if (params.outgoingMedia) {\n            return;\n        }\n\n        if (that.constraints.length > 0) {\n            that.outgoingMediaStreams.length = 0;\n            that.constraints.forEach(function (constraint) {\n                mediaPromises.push(buildLocalMedia(constraint));\n            });\n        } else if (that.outgoingMediaStreams.length > 0) {\n            that.outgoingMediaStreams.forEach(function (stream) {\n                mediaPromises.push(buildLocalMedia(stream));\n            });\n        } else {\n            throw new Error(\"I have no idea what type of media I am supposed to build.\");\n        }\n\n        // These errors are handled elsewhere.\n        Q.all(mediaPromises).done(function () {\n            pc.state.dispatch('receiveLocalMedia');\n        }, function (err) {\n            pc.state.dispatch('reject', {reason: 'media stream error'});\n            pc.report.callStoppedReason = err.message;\n            /**\n             * This event is fired on errors that occur during call setup or media negotiation.\n             * @event respoke.Call#error\n             * @type {respoke.Event}\n             * @property {string} reason - A human readable description about the error.\n             * @property {respoke.Call} target\n             * @property {string} name - the event name.\n             */\n            that.fire('error', {\n                reason: err.message\n            });\n        });\n    }, true);\n\n    if (pc.state.needDirectConnection !== true) {\n        pc.state.once('preparing:entry', function () {\n            /**\n             * This event provides notification for when an incoming call is being received.  If the user wishes\n             * to allow the call, the app should call evt.call.answer() to answer the call.\n             * @event respoke.Client#call\n             * @type {respoke.Event}\n             * @property {respoke.Call} call\n             * @property {respoke.Endpoint} endpoint\n             * @property {string} name - the event name.\n             * @property {respoke.Client} target\n             */\n            client.fire('call', {\n                endpoint: that.remoteEndpoint,\n                call: that\n            });\n        }, true);\n    }\n\n    pc.state.listen('idle:exit', function (evt) {\n        saveParameters(params);\n    });\n\n    pc.state.listen('preparing:entry', function (evt) {\n        init();\n\n        if (params.outgoingMedia) {\n            streamReceivedHandler(params.outgoingMedia);\n            pc.state.dispatch('receiveLocalMedia');\n        }\n\n        if (pc.state.caller === true) {\n            that.answer();\n        }\n    }, true);\n\n    /*!\n     *  If we are sending media and the other side is not, we have to fire Call#connect manually,\n     *  because the RTCPeerConnection will never reach an ICE connection state of \"connected.\"\n     *  This will need to be moved when we start handling media renegotiation.\n     */\n    pc.state.listen('connecting:entry', function connectNoMedia() {\n        if (pc.state.sendOnly) {\n            /**\n             * Indicates that either remote media stream has been added to the call or if no\n             * media is expected, the other side is receiving our media.\n             * @event respoke.Call#connect\n             * @type {respoke.Event}\n             * @property {string} name - The event name.\n             * @property {respoke.Call} target\n             */\n            that.fire('connect');\n            pc.state.dispatch('receiveRemoteMedia');\n        }\n    });\n\n    signalingChannel.getTurnCredentials().then(function (result) {\n        if (!pc) {\n            throw new Error(\"Already hung up.\");\n        }\n        if (!result) {\n            log.warn(\"Relay service not available.\");\n            pc.servers = {iceServers: []};\n        } else {\n            pc.servers = {iceServers: result};\n        }\n    }).fin(function () {\n        if (!pc) {\n            throw new Error(\"Already hung up.\");\n        }\n        pc.state.dispatch('initiate', {\n            caller: that.caller\n        });\n    }).done(null, function (err) {\n        if (err.message !== \"Already hung up.\") {\n            log.debug('Unexpected exception', err);\n        }\n    });\n\n    return that;\n}; // End respoke.Call\n\n/**\n * Handle an error that resulted from a method call.\n * @callback respoke.Call.errorHandler\n * @param {Error} err\n */\n/**\n * Handle the successful kick-off of stats on a call.\n * @callback respoke.Call.statsSuccessHandler\n * @param {respoke.MediaStatsParser} statsParser\n */\n/**\n * Handle obtaining media successfully.\n * @callback respoke.Call.mediaSuccessHandler\n * @param {respoke.LocalMedia} localMedia\n */\n/**\n * When on a call, receive local media when it becomes available. This is what you will need to provide if you want\n * to show the user their own video during a call. This callback is called every time\n * respoke.Call#local-stream-received is fired.\n * @callback respoke.Call.onLocalMedia Callback for receiving an HTML5 Video\n * element with the local audio and/or video attached.\n * @param {respoke.Event} evt\n * @param {Element} evt.element\n * @param {respoke.LocalMedia} - The outgoingMedia property on the call.\n * @param {string} evt.name - The event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * When on a call, receive remote media when it becomes available. This is what you will need to provide if you want\n * to show the user the other party's video during a call. This callback is called every time\n * respoke.Call#connect is fired.\n * @callback respoke.Call.onConnect\n * @param {respoke.Event} evt\n * @param {Element} evt.element - the HTML5 Video element with the new stream attached.\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * When a call is in setup or media renegotiation happens. This callback will be called every time\n * respoke.Call#error.\n * @callback respoke.Call.onError\n * @param {respoke.Event} evt\n * @param {boolean} evt.reason - A human-readable description of the error.\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * When on a call, receive notification the call has been hung up. This callback is called every time\n * respoke.Call#hangup is fired.\n * @callback respoke.Call.onHangup\n * @param {respoke.Event} evt\n * @param {boolean} evt.sentSignal - Whether or not we sent a 'hangup' signal to the other party.\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * Called when changing the mute state on any type of media. This callback will be called when media is muted or\n * unmuted. This callback is called every time respoke.Call#mute is fired.\n * @callback respoke.Call.onMute\n * @param {respoke.Event} evt\n * @param {respoke.Call} evt.target\n */\n/**\n * Called when the callee answers the call. This callback is called every time respoke.Call#answer is fired.\n * @callback respoke.Call.onAnswer\n * @param {respoke.Event} evt\n * @param {respoke.Call} evt.target\n */\n/**\n * Called when the user approves local media. This callback will be called whether or not the approval was based\n * on user feedback. I. e., it will be called even if the approval was automatic. This callback is called every time\n * respoke.Call#approve is fired.\n * @callback respoke.Call.onApprove\n * @param {respoke.Event} evt\n * @param {respoke.Call} evt.target\n */\n/**\n * When setting up a call, receive notification that the browser has granted access to media.  This callback is\n * called every time respoke.Call#allow is fired.\n * @callback respoke.Call.onAllow\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * When setting up a call, receive notification that the app has asked the browser for permission to get audio or\n * video and is waiting on the browser to grant or reject permission. This callback will be called every time\n * respoke.Call#requesting-media is fired.\n * @callback respoke.Call.onRequestingMedia\n * @param {respoke.Event} evt\n * @param {string} evt.name - the event name.\n * @param {respoke.Call} evt.target\n */\n/**\n * The use of stats requires an additional module to Respoke. When on a call, receive periodic statistical\n * information about the call, including the codec, lost packets, and bandwidth being consumed. This callback is\n * called every time respoke.Call#stats is fired.\n * @callback respoke.MediaStatsParser.statsHandler\n * @param {respoke.Event} evt\n * @param {respoke.MediaStats} evt.stats - an object with stats in it.\n * @param {respoke.Call} evt.target\n * @param {string} evt.name - the event name.\n */\n/**\n * When on a call, receive local media when it becomes available. This is what you will need to provide if you want\n * to allow the user to preview and approve or reject their own video before a call. If this callback is provided,\n * Respoke will wait for call.answer() to be called before proceeding. If this callback is not provided,\n * Respoke will proceed without waiting for user input. This callback is called every time\n * respoke.Call#local-stream-received is fired.\n * @callback respoke.Call.previewLocalMedia\n * @param {object} element - the HTML5 Video element with the new stream attached.\n * @param {respoke.Call} call\n */\n/**\n * Receive the DirectConnection.\n * @callback respoke.Call.directConnectionSuccessHandler\n * @param {respoke.DirectConnection} directConnection\n */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/call.js\n ** module id = 21\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar respoke = require('./respoke');\nvar log = respoke.log;\nvar Q = respoke.Q;\n\n/**\n * A wrapper around the stream from `getUserMedia`,\n * which is attached to a call at `call.outgoingMedia`.\n *\n * @class respoke.LocalMedia\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {object} [params.constraints]\n * @param {HTMLVideoElement} params.element - Pass in an optional html video element to have local\n * video attached to it.\n * @returns {respoke.LocalMedia}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    var that = respoke.EventEmitter(params);\n\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.LocalMedia';\n    /**\n     * Respoke media ID (different from a `MediaStream.id`).\n     * @memberof! respoke.LocalMedia\n     * @name id\n     * @type {string}\n     */\n    that.id = respoke.makeGUID();\n    /**\n     * The HTML element with video attached.\n     * @memberof! respoke.LocalMedia\n     * @name element\n     * @type {HTMLVideoElement}\n     */\n    that.element = params.element;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name hasScreenShare\n     * @private\n     * @type {boolean}\n     */\n    var hasScreenShare = params.hasScreenShare;\n    delete params.hasScreenShare;\n\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name screenShareSource\n     * @private\n     * @type {string}\n     */\n    var screenShareSource = params.source;\n    delete params.source;\n\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name sdpHasAudio\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasAudio = false;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name sdpHasVideo\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasVideo = false;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name sdpHasDataChannel\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasDataChannel = false;\n    /**\n     * A timer to make sure we only fire {respoke.LocalMedia#requesting-media} if the browser doesn't\n     * automatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.\n     * @memberof! respoke.LocalMedia\n     * @name allowTimer\n     * @private\n     * @type {number}\n     */\n    var allowTimer = 0;\n    /**\n     * @memberof! respoke.LocalMedia\n     * @name mediaOptions\n     * @private\n     * @type {object}\n     */\n    var mediaOptions = {\n        optional: [\n            { DtlsSrtpKeyAgreement: true },\n            { RtpDataChannels: false }\n        ]\n    };\n\n    /**\n     * The local `MediaStream` from `getUserMedia()`.\n     * @memberof! respoke.LocalMedia\n     * @name stream\n     * @type {RTCMediaStream}\n     */\n    that.stream = null;\n\n    /**\n     * The media deferred whose promise is returned from localMedia.start and resolved with the stream.\n     * @memberof! respoke.LocalMedia\n     * @name deferred\n     * @type {object}\n     * @private\n     */\n    var deferred = Q.defer();\n\n    function getStream(theConstraints) {\n        for (var i = 0; i < respoke.streams.length; i++) {\n            var s = respoke.streams[i];\n\n            var sConstraints = respoke.clone(s.constraints);\n            if (sConstraints.video && sConstraints.video.mandatory &&\n                sConstraints.video.mandatory.chromeMediaSourceId) {\n                delete sConstraints.video.mandatory.chromeMediaSourceId;\n            }\n\n            if (respoke.isEqual(sConstraints, theConstraints)) {\n                return s.stream;\n            }\n        }\n        return null;\n    }\n\n    function removeStream(theConstraints) {\n        var toRemoveIndex;\n        for (var i = 0; i < respoke.streams.length; i++) {\n            var s = respoke.streams[i];\n            if (respoke.isEqual(s.constraints, theConstraints)) {\n                toRemoveIndex = i;\n                break;\n            }\n        }\n        if (toRemoveIndex !== undefined) {\n            respoke.streams.splice(toRemoveIndex, 1);\n        }\n    }\n\n    /**\n     * Save the local stream. Kick off SDP creation.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.onReceiveUserMedia\n     * @private\n     * @param {RTCMediaStream} theStream\n     */\n    function onReceiveUserMedia(theStream) {\n        that.stream = theStream;\n        clearTimeout(allowTimer);\n        /**\n         * The user has approved the request for media. Any UI changes made to remind the user to click Allow\n         * should be canceled now. This event is the same as the `onAllow` callback.  This event gets fired\n         * even if the allow process is automatic, i. e., permission and media is granted by the browser\n         * without asking the user to approve it.\n         * @event respoke.LocalMedia#allow\n         * @type {respoke.Event}\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         */\n        that.fire('allow');\n        log.debug('User gave permission to use media.');\n        log.debug('onReceiveUserMedia');\n\n        that.element = that.element || document.createElement('video');\n\n        // This still needs some work. Using cached streams causes an unused video element to be passed\n        // back to the App. This is because we assume at the moment that only one local media video element\n        // will be needed. The first one passed back will contain media and the others will fake it. Media\n        // will still be sent with every peer connection. Also need to study the use of getLocalElement\n        // and the implications of passing back a video element with no media attached.\n        var aStream = getStream(that.constraints);\n        if (aStream) {\n            aStream.numPc += 1;\n\n            attachMediaStream(that.element, that.stream);\n            // We won't want our local video outputting audio.\n            that.element.muted = true;\n            that.element.autoplay = true;\n\n            // perform cleanup on the LocalMedia instance if the underlying stream has ended\n            aStream.addEventListener('ended', that.stop, false);\n\n            deferred.resolve();\n        } else {\n            that.stream.numPc = 1;\n            respoke.streams.push({stream: that.stream, constraints: that.constraints});\n\n            attachMediaStream(that.element, that.stream);\n            // We won't want our local video outputting audio.\n            that.element.muted = true;\n            that.element.autoplay = true;\n\n            // perform cleanup on the LocalMedia instance if the underlying stream has ended\n            that.stream.addEventListener('ended', that.stop, false);\n            deferred.resolve();\n        }\n    }\n\n    /**\n     * Expose getAudioTracks.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.getAudioTracks\n     */\n    that.getAudioTracks = function () {\n        if (that.stream) {\n            return that.stream.getAudioTracks();\n        }\n        return [];\n    };\n\n    /**\n     * Expose getVideoTracks.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.getVideoTracks\n     */\n    that.getVideoTracks = function () {\n        if (that.stream) {\n            return that.stream.getVideoTracks();\n        }\n        return [];\n    };\n\n    /**\n     * Create the RTCPeerConnection and add handlers. Process any offer we have already received.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.requestMedia\n     * @private\n     */\n    function requestMedia() {\n        var theStream;\n        var requestingScreenShare;\n\n        if (!that.constraints) {\n            deferred.reject(new Error('No constraints.'));\n            return;\n        }\n\n        if (respoke.useFakeMedia === true) {\n            that.constraints.fake = true;\n        }\n\n        theStream = getStream(that.constraints);\n        if (theStream) {\n            log.debug('using old stream');\n            onReceiveUserMedia(theStream);\n            return;\n        }\n\n        // TODO set getStream(that.constraints) = true as a flag that we are already\n        // attempting to obtain this media so the race condition where gUM is called twice with\n        // the same constraints when calls are placed too quickly together doesn't occur.\n        allowTimer = setTimeout(function delayPermissionsRequest() {\n            /**\n             * The browser is asking for permission to access the User's media. This would be an ideal time\n             * to modify the UI of the application so that the user notices the request for permissions\n             * and approves it.\n             * @event respoke.LocalMedia#requesting-media\n             * @type {respoke.Event}\n             * @property {string} name - the event name.\n             * @property {respoke.LocalMedia} target\n             */\n            that.fire('requesting-media');\n        }, 500);\n\n        requestingScreenShare =\n            (that.constraints.video.mandatory && that.constraints.video.mandatory.chromeMediaSource) ||\n            (that.constraints.video.chromeMediaSource) || (that.constraints.video.mediaSource);\n\n        if (requestingScreenShare) {\n            if (respoke.isNwjs || (respoke.needsChromeExtension && respoke.hasChromeExtension)) {\n                respoke.chooseDesktopMedia({source: screenShareSource}, function (params) {\n                    if (!params.sourceId) {\n                        deferred.reject(new Error(\"Error trying to get screensharing source: \" + params.error));\n                        return;\n                    }\n                    that.constraints.video.mandatory.chromeMediaSourceId = params.sourceId;\n                    log.debug(\"Running getUserMedia with constraints\", that.constraints);\n                    getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n                });\n                return;\n            } else if (respoke.needsFirefoxExtension && respoke.hasFirefoxExtension) {\n                log.debug(\"Running getUserMedia with constraints\", that.constraints);\n                getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n                return;\n            } else {\n                deferred.reject(new Error(\"Screen sharing not implemented on this platform yet.\"));\n                return;\n            }\n        }\n        log.debug(\"Running getUserMedia with constraints\", that.constraints);\n        getUserMedia(that.constraints, onReceiveUserMedia, onUserMediaError);\n    }\n\n    /**\n     * Handle any error that comes up during the process of getting user media.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.onUserMediaError\n     * @private\n     * @param {object}\n     */\n    function onUserMediaError(p) {\n        var errorMessage = p.code === 1 ? \"Permission denied.\" : \"Unknown.\";\n        deferred.reject(new Error(\"Error getting user media: \" + errorMessage));\n    }\n\n    /**\n     * Whether the video stream is muted, or undefined if no stream of this type exists.\n     *\n     * All video tracks must be muted for this to return `false`.\n     * @returns boolean\n     */\n    that.isVideoMuted = function () {\n        if (!that.stream || !that.stream.getVideoTracks().length) {\n            return undefined;\n        }\n\n        return that.stream.getVideoTracks().every(function (track) {\n            return !track.enabled;\n        });\n    };\n\n    /**\n     * Mute local video stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.muteVideo\n     * @fires respoke.LocalMedia#mute\n     */\n    that.muteVideo = function () {\n        if (that.isVideoMuted()) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });\n        /**\n         * Indicate that the mute status of local audio or video has changed.\n         * @event respoke.LocalMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'video',\n            muted: true\n        });\n    };\n\n    /**\n     * Unmute local video stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.unmuteVideo\n     * @fires respoke.LocalMedia#mute\n     */\n    that.unmuteVideo = function () {\n        if (!that.isVideoMuted()) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });\n        /**\n         * Indicate that the mute status of local audio or video has changed.\n         * @event respoke.LocalMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'video',\n            muted: false\n        });\n    };\n\n    /**\n     * Whether the audio stream is muted, or undefined if no track of this type exists.\n     *\n     * All audio tracks must be muted for this to return `false`.\n     * @returns boolean\n     */\n    that.isAudioMuted = function () {\n        if (!that.stream || !that.stream.getAudioTracks().length) {\n            return undefined;\n        }\n        return that.stream.getAudioTracks().every(function (track) {\n            return !track.enabled;\n        });\n    };\n\n    /**\n     * Mute local audio stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.muteAudio\n     * @fires respoke.LocalMedia#mute\n     */\n    that.muteAudio = function () {\n        if (that.isAudioMuted()) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });\n        /**\n         * Indicate that the mute status of local audio or video has changed.\n         * @event respoke.LocalMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'audio',\n            muted: true\n        });\n    };\n\n    /**\n     * Unmute local audio stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.unmuteAudio\n     * @fires respoke.LocalMedia#mute\n     */\n    that.unmuteAudio = function () {\n        if (!that.isAudioMuted()) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });\n        /**\n         * Indicate that the mute status of local audio or video has changed.\n         * @event respoke.LocalMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'audio',\n            muted: false\n        });\n    };\n\n    /**\n     * Stop the stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.stop\n     * @fires respoke.LocalMedia#stop\n     */\n    that.stop = function () {\n        if (!that.stream) {\n            return;\n        }\n\n        that.stream.numPc -= 1;\n        if (that.stream.numPc === 0) {\n            that.stream.stop();\n            removeStream(that.constraints);\n        }\n        that.stream = null;\n        /**\n         * Indicate that local media has stopped.\n         * @event respoke.LocalMedia#stop\n         * @property {string} name - the event name.\n         * @property {respoke.LocalMedia} target\n         */\n        that.fire('stop');\n    };\n\n    /**\n     * Indicate whether we are sending a screenshare.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.hasScreenShare\n     * @return {boolean}\n     */\n    that.hasScreenShare = function () {\n        if (that.stream) {\n            return (that.stream.getVideoTracks().length > 0 && hasScreenShare);\n        }\n        return hasScreenShare;\n    };\n\n    /**\n     * Indicate whether we are sending video.\n     *\n     * Note: This method will return true when the video is a screenshare.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.hasVideo\n     * @return {boolean}\n     */\n    that.hasVideo = function () {\n        if (that.stream) {\n            return (that.stream.getVideoTracks().length > 0);\n        }\n        return sdpHasVideo;\n    };\n\n    /**\n     * Indicate whether we are sending audio.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.hasAudio\n     * @return {boolean}\n     */\n    that.hasAudio = function () {\n        if (that.stream) {\n            return (that.stream.getAudioTracks().length > 0);\n        }\n        return sdpHasAudio;\n    };\n\n    /**\n     * Indicate whether we have media yet.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.hasMedia\n     * @return {boolean}\n     */\n    that.hasMedia = function () {\n        return !!that.stream;\n    };\n\n    /**\n     * Save and parse the SDP.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.setSDP\n     * @param {RTCSessionDescription} oSession\n     * @private\n     */\n    that.setSDP = function (oSession) {\n        sdpHasVideo = respoke.sdpHasVideo(oSession.sdp);\n        sdpHasAudio = respoke.sdpHasAudio(oSession.sdp);\n        sdpHasDataChannel = respoke.sdpHasDataChannel(oSession.sdp);\n\n        // We don't have media yet & this can still be changed so create the defaults based on what the sdp says.\n        if (that.temporary) {\n            that.constraints = {\n                video: sdpHasVideo,\n                audio: sdpHasAudio,\n                mandatory: {},\n                optional: []\n            };\n        }\n    };\n\n    /**\n     * Parse the constraints.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.setConstraints\n     * @param {MediaConstraints} constraints\n     * @private\n     */\n    that.setConstraints = function (constraints) {\n        that.constraints = constraints;\n        sdpHasVideo = respoke.constraintsHasVideo(that.constraints);\n        sdpHasAudio = respoke.constraintsHasAudio(that.constraints);\n    };\n\n    /**\n     * Start the stream.\n     * @memberof! respoke.LocalMedia\n     * @method respoke.LocalMedia.start\n     * @fires respoke.LocalMedia#start\n     * @param {object} [params]\n     * @param {respoke.Client.successHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Client.errorHandler} [params.onError] - Error handler for this invocation of this\n     * method only.\n     * @returns {Promise|undefined}\n     */\n    that.start = function (params) {\n        var retVal;\n        params = params || {};\n\n        if (that.temporary) {\n            deferred.reject(new Error(\"Temporary local media started!\"));\n        } else {\n            requestMedia();\n        }\n\n        retVal = respoke.handlePromise(deferred.promise, params.onSuccess, params.onError);\n        return retVal;\n    };\n\n    return that;\n}; // End respoke.LocalMedia\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/localMedia.js\n ** module id = 22\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar respoke = require('./respoke');\n\n/**\n * Class for managing the remote media stream,\n * which is attached to a call at `call.outgoingMedia`.\n *\n * @class respoke.RemoteMedia\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {object} params.constraints\n * @param {boolean} params.temporary - whether this instance represents our best guess of future media. If so,\n * this object will be deleted when real media comes in. It will be replaced by different instance of\n * respoke.RemoteMedia representing the actual state of media.\n * @param {HTMLVideoElement} params.element - Pass in an optional html video element to have remote\n * video attached to it.\n * @returns {respoke.RemoteMedia}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var that = respoke.EventEmitter(params);\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.RemoteMedia';\n    /**\n     * Respoke media ID (different from a `MediaStream.id`).\n     * @memberof! respoke.RemoteMedia\n     * @name id\n     * @type {string}\n     */\n    that.id = respoke.makeGUID();\n    /**\n     * The HTML element with attached video.\n     * @memberof! respoke.RemoteMedia\n     * @name element\n     * @type {HTMLVideoElement}\n     */\n    that.element = params.element || document.createElement('video');\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name hasScreenShare\n     * @private\n     * @type {boolean}\n     */\n    var hasScreenShare = params.hasScreenShare;\n    delete params.hasScreenShare;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name sdpHasAudio\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasAudio = false;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name sdpHasVideo\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasVideo = false;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name sdpHasDataChannel\n     * @private\n     * @type {boolean}\n     */\n    var sdpHasDataChannel = false;\n    /**\n     * A timer to make sure we only fire {respoke.RemoteMedia#requesting-media} if the browser doesn't\n     * automatically grant permission on behalf of the user. Timer is canceled in onReceiveUserMedia.\n     * @memberof! respoke.RemoteMedia\n     * @name allowTimer\n     * @private\n     * @type {number}\n     */\n    var allowTimer = 0;\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name mediaOptions\n     * @private\n     * @type {object}\n     */\n    var mediaOptions = {\n        optional: [\n            { DtlsSrtpKeyAgreement: true },\n            { RtpDataChannels: false }\n        ]\n    };\n    /**\n     * @memberof! respoke.RemoteMedia\n     * @name pc\n     * @private\n     * @type {respoke.PeerConnection}\n     */\n    var pc = params.pc;\n    delete that.pc;\n    /**\n     * The remote `MediaStream`.\n     * @memberof! respoke.RemoteMedia\n     * @name stream\n     * @type {RTCMediaStream}\n     */\n    that.stream = params.stream;\n\n    if (!that.temporary) {\n        attachMediaStream(that.element, that.stream);\n        that.element.autoplay = true;\n        setTimeout(that.element.play.bind(that.element)); // stupid Firefox requires this.\n    }\n\n    /**\n     * Indicate whether we are receiving a screenshare.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.hasScreenShare\n     * @return {boolean}\n     */\n    that.hasScreenShare = function () {\n        if (that.stream) {\n            return (that.stream.getVideoTracks().length > 0 && hasScreenShare);\n        }\n        return hasScreenShare;\n    };\n\n    /**\n     * Indicate whether we are receiving video.\n     *\n     * Note: This method will return true when the video is a screenshare.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.hasVideo\n     * @return {boolean}\n     */\n    that.hasVideo = function () {\n        if (that.stream) {\n            return (that.stream.getVideoTracks().length > 0);\n        }\n        return sdpHasVideo;\n    };\n\n    /**\n     * Indicate whether we are receiving audio.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.hasAudio\n     * @return {boolean}\n     */\n    that.hasAudio = function () {\n        if (that.stream) {\n            return (that.stream.getAudioTracks().length > 0);\n        }\n        return sdpHasAudio;\n    };\n\n    /**\n     * Indicate whether we have media yet.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.hasMedia\n     * @return {boolean}\n     */\n    that.hasMedia = function () {\n        return !!that.stream;\n    };\n\n    /**\n     * Save and parse the SDP\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.setSDP\n     * @param {RTCSessionDescription} oSession\n     * @private\n     */\n    that.setSDP = function (oSession) {\n        sdpHasVideo = respoke.sdpHasVideo(oSession.sdp);\n        sdpHasAudio = respoke.sdpHasAudio(oSession.sdp);\n        sdpHasDataChannel = respoke.sdpHasDataChannel(oSession.sdp);\n    };\n\n    /**\n     * Parse the constraints.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.setConstraints\n     * @param {MediaConstraints} constraints\n     * @private\n     */\n    that.setConstraints = function (constraints) {\n        that.constraints = constraints;\n        sdpHasVideo = respoke.constraintsHasVideo(that.constraints);\n        sdpHasAudio = respoke.constraintsHasAudio(that.constraints);\n    };\n\n    /**\n     * Expose getAudioTracks.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.getAudioTracks\n     */\n    that.getAudioTracks = function () {\n        if (that.stream) {\n            return that.stream.getAudioTracks();\n        }\n        return [];\n    };\n\n    /**\n     * Expose getVideoTracks.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.getVideoTracks\n     */\n    that.getVideoTracks = function () {\n        if (that.stream) {\n            return that.stream.getVideoTracks();\n        }\n        return [];\n    };\n\n    /**\n     * Stop the stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.stop\n     * @fires respoke.RemoteMedia#stop\n     */\n    that.stop = function () {\n        if (!that.stream) {\n            return;\n        }\n\n        that.stream.numPc -= 1;\n        if (that.stream.numPc === 0) {\n            that.stream.stop();\n        }\n        that.stream = null;\n        /**\n         * Indicate that remote media has stopped.\n         * @event respoke.RemoteMedia#stop\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         */\n        that.fire('stop');\n    };\n\n    /**\n     * Whether the video stream is muted.\n     *\n     * All video tracks must be muted for this to return `false`.\n     * @returns boolean\n     */\n    that.isVideoMuted = function () {\n        if (!that.stream) {\n            return false;\n        }\n        return that.stream.getVideoTracks().every(function (track) {\n            return !track.enabled;\n        });\n    };\n\n    /**\n     * Mute remote video stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.muteVideo\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.muteVideo = function () {\n        if (that.isVideoMuted()) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });\n        /**\n         * Indicate that the muted status of remote video or audio has changed.\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'video',\n            muted: true\n        });\n    };\n\n    /**\n     * Unmute remote video stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.unmuteVideo\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.unmuteVideo = function () {\n        if (!that.isVideoMuted()) {\n            return;\n        }\n        that.stream.getVideoTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });\n        /**\n         * Indicate that the muted status of remote video or audio has changed.\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'video',\n            muted: false\n        });\n    };\n\n    /**\n     * Whether the audio stream is muted.\n     *\n     * All audio tracks must be muted for this to return `false`.\n     * @returns boolean\n     */\n    that.isAudioMuted = function () {\n        if (!that.stream) {\n            return false;\n        }\n        return that.stream.getAudioTracks().every(function (track) {\n            return !track.enabled;\n        });\n    };\n\n    /**\n     * Mute remote audio stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.muteAudio\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.muteAudio = function () {\n        if (that.isAudioMuted()) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = false;\n        });\n        /**\n         * Indicate that the muted status of remote video or audio has changed.\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'audio',\n            muted: true\n        });\n    };\n\n    /**\n     * Unmute remote audio stream.\n     * @memberof! respoke.RemoteMedia\n     * @method respoke.RemoteMedia.unmuteAudio\n     * @fires respoke.RemoteMedia#mute\n     */\n    that.unmuteAudio = function () {\n        if (!that.isAudioMuted()) {\n            return;\n        }\n        that.stream.getAudioTracks().forEach(function eachTrack(track) {\n            track.enabled = true;\n        });\n        /**\n         * Indicate that the muted status of remote video or audio has changed.\n         * @event respoke.RemoteMedia#mute\n         * @property {string} name - the event name.\n         * @property {respoke.RemoteMedia} target\n         * @property {string} type - Either \"audio\" or \"video\" to specify the type of stream whose muted state\n         * has been changed.\n         * @property {boolean} muted - Whether the stream is now muted. Will be set to false if mute was turned off.\n         */\n        that.fire('mute', {\n            type: 'audio',\n            muted: false\n        });\n    };\n\n    return that;\n}; // End respoke.RemoteMedia\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/remoteMedia.js\n ** module id = 23\n ** module chunks = 0\n **/","/*!\n * Copyright 2014, Digium, Inc.\n * All rights reserved.\n *\n * This source code is licensed under The MIT License found in the\n * LICENSE file in the root directory of this source tree.\n *\n * For all details and documentation:  https://www.respoke.io\n * @ignore\n */\n\nvar Q = require('q');\nvar respoke = require('./respoke');\n\n/**\n * A conference call to one or more people with audio. Eventually this will handle video, too.\n * @class respoke.Conference\n * @constructor\n * @augments respoke.EventEmitter\n * @param {object} params\n * @param {string} params.id - The id that should be used to create the conference call or the ID\n * of the call to join.\n * @param {string} params.instanceId - client id\n * @param {boolean} params.caller - whether or not we initiated the call\n * @param {boolean} [params.receiveOnly] - whether or not we accept media\n * @param {boolean} [params.sendOnly] - whether or not we send media\n * @param {boolean} [params.needDirectConnection] - flag to enable skipping media & opening direct connection.\n * @param {boolean} [params.forceTurn] - If true, media is not allowed to flow peer-to-peer and must flow through\n * relay servers. If it cannot flow through relay servers, the call will fail.\n * @param {boolean} [params.disableTurn] - If true, media is not allowed to flow through relay servers; it is\n * required to flow peer-to-peer. If it cannot, the call will fail.\n * @param {respoke.Endpoint} params.remoteEndpoint - The endpoint who is being called.\n * @param {string} [params.connectionId] - The connection ID of the remoteEndpoint.\n * @param {respoke.Call.previewLocalMedia} [params.previewLocalMedia] - A function to call if the developer\n * wants to perform an action between local media becoming available and calling approve().\n * @param {function} params.signalOffer - Signaling action from SignalingChannel.\n * @param {function} params.signalConnected - Signaling action from SignalingChannel.\n * @param {function} params.signalAnswer - Signaling action from SignalingChannel.\n * @param {function} params.signalHangup - Signaling action from SignalingChannel.\n * @param {function} params.signalReport - Signaling action from SignalingChannel.\n * @param {function} params.signalCandidate - Signaling action from SignalingChannel.\n * @param {Array<RTCConstraints>} params.constraints - Array of WebRTC constraints.\n * @param {respoke.Conference.onJoin} [params.onJoin] - Callback for when a participant joins the conference.\n * @param {respoke.Conference.onLeave} [params.onLeave] - Callback for when a participant leaves the conference.\n * @param {respoke.Conference.onMessage} [params.onMessage] - Callback for when a message is sent to the conference.\n * @param {respoke.Conference.onMute} [params.onMute] - Callback for when local or remote media is muted or unmuted.\n * @param {respoke.Conference.onTopic} [params.onTopic] - Callback for the conference topic changes.\n * @param {respoke.Conference.onPresenter} [params.onPresenter] - Callback for when the presenter changes.\n * @param {respoke.Call.onError} [params.onError] - Callback for errors that happen during call setup or\n * media renegotiation.\n * @param {respoke.Call.onLocalMedia} [params.onLocalMedia] - Callback for receiving an HTML5 Video\n * element with the local audio and/or video attached.\n * @param {respoke.Call.onConnect} [params.onConnect] - Callback for the remote video element.\n * @param {respoke.Call.onHangup} [params.onHangup] - Callback for when the call is ended, whether or not\n * it was ended in a graceful manner.\n * @param {respoke.Call.onMute} [params.onMute] - Callback for changing the mute state on any type of media.\n * This callback will be called when media is muted or unmuted.\n * @param {respoke.Call.onAnswer} [params.onAnswer] - Callback for when the callee answers the call.\n * @param {respoke.Call.onRequestingMedia} [params.onRequestingMedia] - Callback for when the app is waiting\n * for the user to give permission to start getting audio or video.\n * @param {respoke.Call.onApprove} [params.onApprove] - Callback for when the user approves local media. This\n * callback will be called whether or not the approval was based on user feedback. I. e., it will be called even if\n * the approval was automatic.\n * @param {respoke.Call.onAllow} [params.onAllow] - Callback for when the browser gives us access to the\n * user's media.  This event gets called even if the allow process is automatic, i. e., permission and media is\n * granted by the browser without asking the user to approve it.\n * @param {HTMLVideoElement} params.videoLocalElement - Pass in an optional html video element to have local\n * video attached to it.\n * @param {HTMLVideoElement} params.videoRemoteElement - Pass in an optional html video element to have remote\n * video attached to it.\n * @returns {respoke.Conference}\n */\nmodule.exports = function (params) {\n    \"use strict\";\n    params = params || {};\n    /**\n     * @memberof! respoke.Client\n     * @name instanceId\n     * @private\n     * @type {string}\n     */\n    var instanceId = params.instanceId;\n    var signalingChannel = params.signalingChannel;\n    var that = respoke.EventEmitter({\n        id: params.id\n    });\n\n    that.listen('join', params.onJoin);\n    that.listen('leave', params.onLeave);\n    that.listen('message', params.onMessage);\n    that.listen('mute', params.onMute);\n    that.listen('topic', params.onTopic);\n    that.listen('presenter', params.onPresenter);\n    delete params.onJoin;\n    delete params.onLeave;\n    delete params.onMessage;\n    delete params.onMute;\n    delete params.onTopic;\n    delete params.onPresenter;\n\n    params.caller = true;\n    params.conferenceId = params.id;\n    delete params.id;\n    params.remoteEndpoint = that;\n    that.call = respoke.Call(params);\n\n    // Redirect a bunch of events.\n    [\n        'mute', 'hangup', 'connect', 'stats', 'error', 'local-stream-received',\n         'remote-stream-received', 'requesting-media', 'approve', 'allow'\n    ].forEach(function (eventName) {\n        that.call.listen(eventName, function (evt) {\n            evt.call = that.call; // target will be updated to point to this conference object.\n            that.fire(eventName, evt);\n        });\n    });\n\n    delete that.instanceId;\n\n    /**\n     * A name to identify this class\n     * @memberof! respoke.Conference\n     * @name className\n     * @type {string}\n     */\n    that.className = 'respoke.Conference';\n\n    /**\n     * @memberof! respoke.Conference\n     * @name client\n     * @type {respoke.Client}\n     * @private\n     */\n    var client = respoke.getClient(instanceId);\n\n    /**\n     * Leave the conference.\n     * @memberof! respoke.Conference\n     * @method respoke.Conference.leave\n     */\n    that.leave = that.call.hangup;\n\n    /**\n     * Mute local user's audio.\n     * @memberof! respoke.Conference\n     * @method respoke.Conference.muteAudio\n     */\n    that.muteAudio = that.call.muteAudio;\n\n    /**\n     * ## The plugin `respoke.MediaStats` must be loaded before using this method.\n     *\n     * Start the process of listening for a continuous stream of statistics about the flow of audio and/or video.\n     * Since we have to wait for both the answer and offer to be available before starting\n     * statistics, the library returns a promise for the stats object. The statistics object does not contain the\n     * statistics; rather it contains methods of interacting with the actions of obtaining statistics. To obtain\n     * the actual statistics one time, use stats.getStats(); use the onStats callback to obtain a continuous\n     * stream of statistics every `interval` seconds.  Returns null if stats module is not loaded.\n     *\n     *     conference.getStats({\n     *         onStats: function (evt) {\n     *             console.log('Stats', evt.stats);\n     *         }\n     *     }).done(function () {\n     *         console.log('Stats started');\n     *     }, function (err) {\n     *         console.log('Call is already hung up.');\n     *     });\n     *\n     * @memberof! respoke.Conference\n     * @method respoke.Conference.getStats\n     * @param {object} params\n     * @param {number} [params.interval=5000] - How often in milliseconds to fetch statistics.\n     * @param {respoke.MediaStatsParser.statsHandler} [params.onStats] - An optional callback to receive\n     * the stats. If no callback is provided, the call's report will contain stats but the developer will not\n     * receive them on the client-side.\n     * @param {respoke.Call.statsSuccessHandler} [params.onSuccess] - Success handler for this invocation of\n     * this method only.\n     * @param {respoke.Call.errorHandler} [params.onError] - Error handler for this invocation of this method only.\n     * @returns {Promise<object>|null}\n     */\n    if (respoke.MediaStats) {\n        that.getStats = that.call.getStats;\n    }\n\n    /**\n     * Get an array containing a Connection object for each participant in the conference.\n     * @memberof! respoke.Conference\n     * @method respoke.Conference.getParticipants\n     * @returns {Promise<Array>}\n     */\n    that.getParticipants = function () {\n        return signalingChannel.getConferenceParticipants({\n            id: that.id\n        });\n    };\n\n    /**\n     * If the logged-in endpoint has permission through its Respoke role, forcibly remove another participant\n     * from the conference, ending its conference call.\n     * @memberof! respoke.Conference\n     * @method respoke.Conference.removeParticipant\n     * @param {object} params\n     * @param {string} [endpointId] - The endpoint id of the endpoint to be removed\n     * @param {string} [connectionId] - The connection id of the connection to be removed\n     * @returns {Promise}\n     */\n    that.removeParticipant = function (params) {\n        params = params || {};\n        params.conferenceId = that.id;\n        return signalingChannel.removeConferenceParticipant(params);\n    };\n\n    /**\n     * If the logged-in endpoint has permission through its Respoke role, shut down the conference, removing all\n     * participants.\n     * @memberof! respoke.Conference\n     * @method respoke.Conference.destroy\n     * @returns {Promise}\n     */\n    that.destroy = function (params) {\n        return signalingChannel.destroyConference({\n            conferenceId: that.id\n        });\n    };\n\n    return that;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./respoke/conference.js\n ** module id = 24\n ** module chunks = 0\n **/"],"sourceRoot":""}